
#ifdef NEED_UNDERSCORE
# define TRANSFORM_SYMBOLS
# define EXPORT_SYMBOL(sym) _ ## sym
#else
# define EXPORT_SYMBOL(sym) sym
#endif

#ifndef TRANSFORM_SYMBOLS

# define GLOBAL(sym) \
  .global sym; \
  sym ##:

# define GLOBAL_FUNC(sym) \
  GLOBAL (sym)

#else

# define GLOBAL(sym) \
  .global EXPORT_SYMBOL (sym); \
  EXPORT_SYMBOL (sym) ##: \
  sym ##:

# define GLOBAL_FUNC(sym) \
  .global sym; \
  GLOBAL (sym)

#endif


.text

.global EXPORT_SYMBOL(lbInkeyToAscii);
.global EXPORT_SYMBOL(lbInkey_prefixed);
.global EXPORT_SYMBOL(lbInkey);
.global EXPORT_SYMBOL(lbShift);
.global EXPORT_SYMBOL(lbKeyOn);

.global EXPORT_SYMBOL(lbFontPtr);

.global EXPORT_SYMBOL(deep_radar_surface_col);	/* 0x152E5C */
.global EXPORT_SYMBOL(deep_radar_line_col);	/* 0x152E5D */
.global EXPORT_SYMBOL(lbSeed);	/* 0x153240 */
.global EXPORT_SYMBOL(pixmap);	/* 0x162280 */

.global EXPORT_SYMBOL(lbDisplay);
.global EXPORT_SYMBOL(lbMouseInstalled);	/* 0x1E3088 */
.global EXPORT_SYMBOL(lbSinTable);

.global EXPORT_SYMBOL(vec_map);
.global EXPORT_SYMBOL(vec_window_width);	/* 0x150114 */
.global EXPORT_SYMBOL(vec_window_height);	/* 0x150118 */
.global EXPORT_SYMBOL(vec_colour);
.global EXPORT_SYMBOL(vec_mode);

.global EXPORT_SYMBOL(weapon_defs);	/* 0x15401C */
.global EXPORT_SYMBOL(mod_defs);	/* 0x15441C */
.global EXPORT_SYMBOL(static_radii);	/* 0x154216 */
.global EXPORT_SYMBOL(peep_type_stats);	/* 0x154890 */
.global EXPORT_SYMBOL(mem_game);	/* 0x1539c4 */
.global EXPORT_SYMBOL(people_frames);	/* 0x153D5C */
.global EXPORT_SYMBOL(follow_dist);	/* 0x153398 */

.global EXPORT_SYMBOL(pop1_sprites);	/* 0x19CBDC */
.global EXPORT_SYMBOL(pointer_sprites);	/* 0x1A5840 */
.global EXPORT_SYMBOL(small_font);	/* 0x1A5848 */

.global EXPORT_SYMBOL(NetworkServicePtr);     /* 0x1E2F40 */

/* C function pointers used in ASM; these are in C calling convention,
 * use ac_* variants if you need to call them with Watcom convention. */
.global EXPORT_SYMBOL(my_build_packet);
.global EXPORT_SYMBOL(build_packet);
.global EXPORT_SYMBOL(build_packet2);
.global EXPORT_SYMBOL(build_packet3);
.global EXPORT_SYMBOL(build_packet4);

/* Radica network lib */
.global EXPORT_SYMBOL(data_1596c4)
.global EXPORT_SYMBOL(data_15aba2)
.global EXPORT_SYMBOL(data_15aba5)
.global EXPORT_SYMBOL(data_15abaf)
.global EXPORT_SYMBOL(data_15abb6)
.global EXPORT_SYMBOL(data_15abb3)

/*----------------------------------------------------------------*/
/* int place_default_player(unsigned int player_id, __int16 a2)
*/
GLOBAL_FUNC(ASM_place_default_player)	/* 0x0101F0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x30,%esp
		mov    %eax,%esi
		mov    %edx,0x28(%esp)
		movl   $0xffffffff,0x4(%esp)
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    data_1a63ae(%eax),%dl
		test   %dl,%dl
		je     jump_10233
		xor    %ecx,%ecx
		mov    %dl,%cl
		inc    %ecx
		jmp    jump_10238
	jump_10233:
		mov    $0x4,%ecx
	jump_10238:
		xor    %edx,%edx
		mov    %si,%dx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		mov    $0x1,%edi
		add    %eax,%eax
		mov    %ecx,0x8(%esp)
		mov    %eax,%edx
		shl    $0x2,%eax
		shl    %cl,%edi
		sub    %edx,%eax
		xor    %edx,%edx
		lea    -0x1(%edi),%ecx
		mov    data_1a639b(%eax),%dl
		cmp    %ecx,%edx
		jl     jump_1028e
		jmp    jump_102a3
	jump_10270:
		movl   $0x1,0x8(%esp)
		jmp    jump_102a3
	jump_1027a:
		movl   $0x2,0x8(%esp)
		jmp    jump_102a3
	jump_10284:
		movl   $0x3,0x8(%esp)
		jmp    jump_102a3
	jump_1028e:
		mov    %dl,%al
		cmp    $0x3,%dl
		jb     jump_1029e
		jbe    jump_1027a
		cmp    $0x7,%dl
		je     jump_10284
		jmp    jump_102a3
	jump_1029e:
		cmp    $0x1,%dl
		je     jump_10270
	jump_102a3:
		cmpb   $0x0,in_network_game
		je     jump_102b4
		movl   $0x4,0x8(%esp)
	jump_102b4:
		xor    %eax,%eax
		mov    %si,%ax
		xor    %edx,%edx
		mov    default_agent_tiles_x(%eax),%dl
		shl    $0x8,%edx
		mov    %edx,0x10(%esp)
		xor    %edx,%edx
		mov    default_agent_tiles_z(%eax),%dl
		shl    $0x8,%edx
		mov    in_network_game,%cl
		mov    %edx,0xc(%esp)
		test   %cl,%cl
		je     jump_102fc
		testb  $0x20,unkn_flags_08
		je     jump_102fa
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		xor    %ebx,%ebx
		and    $0x7,%al
		mov    %ax,%bx
		jmp    jump_102fc
	jump_102fa:
		mov    %eax,%ebx
	jump_102fc:
		xor    %edx,%edx
		mov    0x8(%esp),%ecx
		mov    %edx,0x24(%esp)
		test   %ecx,%ecx
		jle    jump_10749
		mov    %esi,%eax
		shl    $0x3,%ebx
		mov    %edx,(%esp)
		mov    %edx,0x1c(%esp)
		mov    %edx,0x14(%esp)
		shl    $0x2,%eax
		mov    %ebx,0x18(%esp)
		mov    %eax,0x2c(%esp)
	jump_10329:
		cmpb   $0x0,in_network_game
		je     jump_10354
		mov    0x18(%esp),%eax
		mov    EXPORT_SYMBOL(netgame_agent_pos_x)-2(%eax),%eax
		sar    $0x10,%eax
		mov    %eax,0x10(%esp)
		mov    0x18(%esp),%eax
		mov    EXPORT_SYMBOL(netgame_agent_pos_z)-2(%eax),%eax
		sar    $0x10,%eax
		mov    %eax,0xc(%esp)
	jump_10354:
		xor    %eax,%eax
		mov    %si,%ax
		imul   $0x1aa,%eax,%eax
		add    0x14(%esp),%eax
		mov    EXPORT_SYMBOL(players)+0x09C(%eax),%ecx # players[0].MyAgent[0]
		# The NULL test here jumps to a place where the NULL pointer is used.. need fix
		# Currently the fix is go to next; the proper one would be to allocate new thing
		test   %ecx,%ecx
		#je     jump_1037f # crash on NULL thing pointer
		je     jump_106fc
		testb  $0x2,0xc(%ecx)
		jne    jump_1037f
		cmpw   $0x0,0x28(%esp)
		je     jump_106fc
	jump_1037f:
		xor    %eax,%eax
		mov    %si,%ax
		mov    %eax,0x20(%esp)
		imul   $0x1aa,%eax,%edi
		mov    0x14(%esp),%ebp
		add    %edi,%ebp
		mov    EXPORT_SYMBOL(players)+0x09C(%ebp),%eax # players[0].MyAgent[0]
		mov    0x16(%eax),%ax
		mov    $0x1,%ecx
		and    $0xffff,%eax
		mov    0xc(%esp),%ebx
		push   %eax
		xor    %edx,%edx
		mov    0x14(%esp),%eax
		call   replace_thing_given_thing_idx
		mov    0x3a(%eax),%dx
		mov    0x3a(%eax),%cx
		add    %edx,%edx
		add    %edx,%ecx
		mov    %cx,0x3a(%eax)
		mov    %cx,0x7e(%eax)
		mov    0x20(%esp),%edx
		mov    %eax,EXPORT_SYMBOL(players)+0x09C(%ebp) # players[0].MyAgent[0]
		mov    level_def__PlayableGroups(%edx),%dl
		movl   $0x2000,0xc(%eax)
		mov    %dl,0x50(%eax)
		mov    %dl,0x51(%eax)
		xor    %edx,%edx
		mov    0x24(%esp),%ecx
		mov    data_1a63ae(%edi),%dl
		mov    %eax,%ebx
		cmp    %ecx,%edx
		jl     jump_1044c
		xor    %edx,%edx
		mov    0x16(%eax),%dx
		mov    %edx,EXPORT_SYMBOL(players)+0x088(%ebp) # players[0].DirectControl[0]
		mov    0xd(%eax),%ch
		xor    %edx,%edx
		or     $0x10,%ch
		mov    EXPORT_SYMBOL(local_player_no),%dl
		mov    %ch,0xd(%eax)
		cmp    0x20(%esp),%edx
		jne    jump_10482
		cmpl   $0x0,0x24(%esp)
		jne    jump_10482
		mov    0x18(%eax),%edx
		mov    0x20(%eax),%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		mov    %dx,ingame__TrackX
		mov    %ax,ingame__TrackZ
		jmp    jump_10482
	jump_1044c:
		cmpb   $0x0,in_network_game
		je     jump_1046b
		test   %dl,%dl
		je     jump_1046b
		mov    0xc(%eax),%edi
		movw   $0xd,0xa(%eax)
		or     $0x2000002,%edi
		mov    %edi,0xc(%eax)
	jump_1046b:
		xor    %eax,%eax
		mov    %si,%ax
		imul   $0x1aa,%eax,%eax
		add    0x14(%esp),%eax
		xor    %edx,%edx
		mov    %edx,EXPORT_SYMBOL(players)+0x088(%eax) # players[0].DirectControl[0]
	jump_10482:
		xor    %al,%al
		mov    %al,EXPORT_SYMBOL(lbDisplay)+104 # lbDisplay.RightButton
		mov    EXPORT_SYMBOL(lbDisplay)+104,%al # lbDisplay.RightButton
		mov    %al,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		xor    %ecx,%ecx
		mov    %si,%cx
		imul   $0x1aa,%ecx,%ecx
		movw   $0x0,0xa(%ebx)
		movw   $0x0,0x72(%ebx)
		movw   $0x0,0x52(%ebx)
		mov    0x2c(%esp),%eax
		movw   $0x0,0x8e(%ebx)
		mov    0x24(%esp),%edi
		movl   $0x0,0x40(%ebx)
		add    %edi,%eax
		mov    %ax,0x54(%ebx)
		mov    0x14(%esp),%eax
		movw   $0x0,0x4a(%ebx)
		mov    data_1a63b0(%ecx,%eax,1),%eax
		or     $0x400000,%eax
		mov    %eax,0xa4(%ebx)
		mov    0x1c(%esp),%eax
		mov    $0x1,%edx
		mov    0x24(%esp),%ebp
		mov    data_1a63c0(%ecx,%eax,1),%ax
		mov    (%esp),%edi
		mov    %ax,0x70(%ebx)
		xor    %eax,%eax
		add    %ebp,%ecx
		mov    0x16(%ebx),%ax
		movb   $0x0,0x99(%ebx)
		call   ac_find_nth_weapon_held
		mov    %al,data_1a638c(%ecx)
		xor    %eax,%eax
		jmp    jump_1053a
	jump_10524:
		xor    %ecx,%ecx
		mov    %si,%cx
		imul   $0x1aa,%ecx,%ecx
		add    %edi,%ecx
		inc    %eax
		movb   $0x0,data_1a63fa(%ecx,%edx,1)
	jump_1053a:
		xor    %edx,%edx
		mov    %ax,%dx
		cmp    $0x20,%edx
		jl     jump_10524
		cmpb   $0x0,in_network_game
		je     jump_1056a
		xor    %eax,%eax
		mov    %si,%ax
		mov    EXPORT_SYMBOL(group_types)(%eax),%al
		and    $0xff,%eax
		mov    %eax,0x4(%esp)
		mov    %ebx,%eax
		call   ac_do_weapon_quantities_net_to_player
		jmp    jump_10571
	jump_1056a:
		mov    %ebx,%eax
		call   ac_do_weapon_quantities1
	jump_10571:
		mov    0x4(%esp),%eax
		test   %eax,%eax
		jge    jump_10676
		jmp    jump_10690
	jump_10582:
		movb   $0x1,0x8(%ebx)
		mov    0x8(%ebx),%al
		imul   $0x2c,%eax,%eax
		xor    %edx,%edx
		mov    0x6c(%ebx),%dl
		mov    EXPORT_SYMBOL(people_frames)(%eax,%edx,2),%ax
		xor    %edx,%edx
		mov    0x8(%ebx),%dl
		imul   $0x2c,%edx,%edx
		dec    %eax
		mov    %ax,0x26(%ebx)
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		xor    %edx,%edx
		and    $0xffff,%eax
		mov    0x57(%ebx),%dl
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		mov    %ax,0x24(%ebx)
		jmp    jump_10690
	jump_105d2:
		movb   $0x2,0x8(%ebx)
		xor    %eax,%eax
		mov    0x8(%ebx),%al
		imul   $0x2c,%eax,%edx
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		dec    %eax
		mov    %ax,0x26(%ebx)
		xor    %eax,%eax
		mov    0x8(%ebx),%al
		imul   $0x2c,%eax,%edx
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		add    %eax,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    0x57(%ebx),%al
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		mov    %ax,0x24(%ebx)
		jmp    jump_10690
	jump_10621:
		movb   $0x9,0x8(%ebx)
		xor    %eax,%eax
		mov    0x8(%ebx),%al
		imul   $0x2c,%eax,%edx
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		dec    %eax
		mov    %ax,0x26(%ebx)
		xor    %eax,%eax
		mov    0x8(%ebx),%al
		imul   $0x2c,%eax,%edx
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		add    %eax,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    0x57(%ebx),%al
		add    %edx,%eax
		lea    0x0(,%eax,2),%edx
		mov    nstart_ani,%eax
		mov    (%edx,%eax,1),%ax
		mov    %ax,0x24(%ebx)
		jmp    jump_10690
	jump_10676:
		cmp    $0x1,%eax
		jb     jump_10688
		jbe    jump_105d2
		cmp    $0x2,%eax
		je     jump_10621
		jmp    jump_10690
	jump_10688:
		test   %eax,%eax
		je     jump_10582
	jump_10690:
		xor    %eax,%eax
		mov    0x8(%ebx),%al
		imul   $0x2c,%eax,%eax
		xor    %edx,%edx
		mov    0x6c(%ebx),%dl
		add    %edx,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    0x57(%ebx),%al
		add    %edx,%eax
		lea    0x0(,%eax,2),%edx
		mov    nstart_ani,%eax
		mov    0x24(%ebx),%cx
		sub    (%edx,%eax,1),%cx
		xor    %edx,%edx
		mov    0x8(%ebx),%dl
		mov    %cx,0x24(%ebx)
		imul   $0x2c,%edx,%ecx
		movb   $0x0,0x6c(%ebx)
		xor    %edx,%edx
		mov    0x6c(%ebx),%dl
		add    %edx,%edx
		add    %ecx,%edx
		xor    %ecx,%ecx
		mov    EXPORT_SYMBOL(people_frames)(%edx),%cx
		xor    %edx,%edx
		mov    0x57(%ebx),%dl
		add    %ecx,%edx
		mov    0x24(%ebx),%di
		mov    (%eax,%edx,2),%ax
		add    %eax,%edi
		mov    %di,0x24(%ebx)
	jump_106fc:
		mov    0x10(%esp),%edi
		mov    0x18(%esp),%ebp
		mov    (%esp),%eax
		mov    0x1c(%esp),%edx
		mov    0x14(%esp),%ebx
		mov    0x24(%esp),%ecx
		add    $0x100,%edi
		add    $0x2,%ebp
		add    $0x20,%eax
		add    $0x2,%edx
		add    $0x4,%ebx
		inc    %ecx
		mov    %edi,0x10(%esp)
		mov    %ebp,0x18(%esp)
		mov    %eax,(%esp)
		mov    %edx,0x1c(%esp)
		mov    %ebx,0x14(%esp)
		mov    0x8(%esp),%edi
		mov    %ecx,0x24(%esp)
		cmp    %edi,%ecx
		jl     jump_10329
	jump_10749:
		mov    $0x4,%dl
		xor    %eax,%eax
		mov    %dl,EXPORT_SYMBOL(playable_agents)
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_unkn_truce_groups)	/* 0x010CA0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xb8,%esp
		lea    0x8c(%esp),%edi
		mov    $data_152e38,%esi
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		lea    0xa0(%esp),%edi
		mov    $data_176ca4,%esi
		mov    EXPORT_SYMBOL(colour_lookup)+3,%al
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		mov    %al,0xa0(%esp)
		mov    EXPORT_SYMBOL(colour_lookup)+2,%al
		mov    %al,0xa1(%esp)
		mov    EXPORT_SYMBOL(colour_lookup)+1,%al
		mov    %al,0xa2(%esp)
		mov    EXPORT_SYMBOL(colour_lookup)+7,%al
		mov    %al,0xa3(%esp)
		mov    EXPORT_SYMBOL(colour_lookup)+0x06,%al
		mov    %al,0xa4(%esp)
		mov    EXPORT_SYMBOL(colour_lookup)+0x05,%al
		mov    %al,0xa5(%esp)
		mov    EXPORT_SYMBOL(colour_lookup)+0x09,%al
		mov    $0x28,%ebx
		mov    %al,0xa6(%esp)
		mov    EXPORT_SYMBOL(colour_lookup),%al
		xor    %edx,%edx
		mov    %al,0xa7(%esp)
		lea    0x64(%esp),%eax
		call   ac_memset
		mov    $0x5,%ebx
		lea    0xa8(%esp),%eax
		xor    %edx,%edx
		call   ac_memset
		xor    %edx,%edx
		jmp    jump_10d53
	jump_10d52:
		inc    %edx
	jump_10d53:
		xor    %ebx,%ebx
		mov    %dx,%bx
		cmp    $0x8,%ebx
		jge    jump_10d9d
		mov    $0x1,%eax
		mov    %edx,%ecx
		movzbl ingame__InNetGame_UNSURE,%esi
		shl    %cl,%eax
		test   %eax,%esi
		je     jump_10d52
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(byte_1C5C28)(%ebx),%al
		lea    0x0(,%eax,8),%ecx
		movzbl 0xa8(%esp,%eax,1),%esi
		add    %esi,%ecx
		mov    level_def__PlayableGroups(%ebx),%bl
		mov    %bl,0x64(%esp,%ecx,1)
		incb   0xa8(%esp,%eax,1)
		jmp    jump_10d52
	jump_10d9d:
		movl   $0x1,0xb0(%esp)
		mov    $0x1,%ebp
		jmp    jump_10db6
	jump_10daf:
		incl   0xb0(%esp)
	jump_10db6:
		xor    %eax,%eax
		mov    0xb0(%esp),%ax
		cmp    $0x5,%eax
		jge    jump_10e82
		xor    %ebx,%ebx
		mov    %ebx,0xb4(%esp)
		jmp    jump_10ddb
	jump_10dd4:
		incl   0xb4(%esp)
	jump_10ddb:
		xor    %eax,%eax
		mov    0xb0(%esp),%ax
		mov    0xa8(%esp,%eax,1),%al
		xor    %ebx,%ebx
		and    $0xff,%eax
		mov    0xb4(%esp),%bx
		cmp    %eax,%ebx
		jge    jump_10daf
		xor    %edx,%edx
		jmp    jump_10e04
	jump_10e03:
		inc    %edx
	jump_10e04:
		xor    %eax,%eax
		xor    %ebx,%ebx
		mov    0xb0(%esp),%ax
		xor    %ecx,%ecx
		mov    %dx,%bx
		mov    0xa8(%esp,%eax,1),%cl
		cmp    %ecx,%ebx
		jge    jump_10dd4
		mov    0xb4(%esp),%edi
		cmp    %di,%dx
		je     jump_10e03
		lea    0x0(,%eax,8),%esi
		xor    %eax,%eax
		mov    %di,%ax
		add    %esi,%eax
		movzbl 0x64(%esp,%eax,1),%edi
		imul   $0x28,%edi,%eax
		add    %ebx,%esi
		mov    %ebp,%ebx
		mov    0x64(%esp,%esi,1),%cl
		shl    %cl,%ebx
		or     %ebx,war_flags__Truce(%eax)
		not    %ebx
		and    %ebx,EXPORT_SYMBOL(war_flags)(%eax)
		and    %ebx,data_19eca0(%eax)
		and    %ebx,data_19ec9c(%eax)
		xor    %eax,%eax
		mov    0x64(%esp,%esi,1),%al
		push   %eax
		push   %edi
		push   $aGroupDTrucedWi
		lea    0xc(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0x10,%esp
		jmp    jump_10e03
	jump_10e82:
		xor    %ebx,%ebx
		xor    %eax,%eax
		jmp    jump_10ebd
	jump_10e88:
		mov    0xa0(%esp,%ebx,1),%dl
		mov    %dl,%bl
		mov    %dl,EXPORT_SYMBOL(byte_1C5C30)(%eax)
		and    $0xff,%ebx
		mov    %ebx,0x8c(%esp,%ecx,1)
		mov    %esi,%ebx
		jmp    jump_10eb7
	jump_10ea8:
		mov    0xa0(%esp,%ebx,1),%dl
		mov    %esi,%ebx
		mov    %dl,EXPORT_SYMBOL(byte_1C5C30)(%eax)
	jump_10eb7:
		inc    %eax
		cmp    $0x8,%eax
		jge    jump_10f02
	jump_10ebd:
		mov    $0x1,%edi
		mov    %al,%cl
		movzbl ingame__InNetGame_UNSURE,%esi
		shl    %cl,%edi
		test   %edi,%esi
		je     jump_10eb7
		mov    EXPORT_SYMBOL(byte_1C5C28)(%eax),%cl
		lea    0x1(%ebx),%esi
		test   %cl,%cl
		je     jump_10ea8
		xor    %ecx,%ecx
		mov    EXPORT_SYMBOL(byte_1C5C28)(%eax),%cl
		shl    $0x2,%ecx
		cmpl   $0xffffffff,0x8c(%esp,%ecx,1)
		je     jump_10e88
		mov    0x8c(%esp,%ecx,1),%dl
		mov    %dl,EXPORT_SYMBOL(byte_1C5C30)(%eax)
		jmp    jump_10eb7
	jump_10f02:
		add    $0xb8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_fill_netgame_agent_pos)	/* 0x010F10 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		mov    things,%edi
		mov    %eax,%esi
		mov    %edx,%ecx
		mov    %ebx,%ebp
		xor    %eax,%eax
		mov    things_used_head,%ax
		test   %eax,%eax
		je     jump_10f86
		lea    0x0(,%esi,8),%ebx
		lea    0x0(,%ebp,2),%esi
		mov    %ebx,%edx
		add    %ebx,%esi
	jump_10f3e:
		imul   $0xa8,%eax,%eax
		mov    %edi,%ebx
		add    %edi,%eax
		xor    %edi,%ebx
		mov    0x50(%eax),%bl
		cmp    %ecx,%ebx
		jne    jump_10f7c
		xor    %ecx,%ebx
		mov    0x9(%eax),%bl
		cmp    $0x3,%ebx
		jne    jump_10f7c
		mov    0x18(%eax),%ebx
		sar    $0x8,%ebx
		mov    %bx,netgame_agent_pos_x(%edx)
		mov    0x20(%eax),%ebx
		add    $0x2,%edx
		sar    $0x8,%ebx
		mov    %bx,EXPORT_SYMBOL(netgame_agent_pos_z)-2(%edx)
		cmp    %esi,%edx
		je     jump_10f86
	jump_10f7c:
		mov    0x4(%eax),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_10f3e
	jump_10f86:
		mov    %edi,things
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
/* void unkn1_handle_agent_groups()
*/
GLOBAL_FUNC(ASM_unkn1_handle_agent_groups)	/* 0x010F94 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		xor    %edx,%edx
		mov    $0x4,%ecx
		mov    %edx,(%esp)
	jump_10fa7:
		mov    (%esp),%eax
		xor    %edx,%edx
		mov    %ecx,%ebx
		mov    level_def__PlayableGroups(%eax),%dl
		call   ac_fill_netgame_agent_pos
		mov    (%esp),%ebx
		inc    %ebx
		mov    %ebx,(%esp)
		cmp    $0x8,%ebx
		jl     jump_10fa7
		xor    %edi,%edi
		mov    %edi,(%esp)
		jmp    jump_10fd8
	jump_10fcc:
		mov    (%esp),%ebp
		inc    %ebp
		mov    %ebp,(%esp)
		cmp    $0x8,%ebp
		jge    jump_1101e
	jump_10fd8:
		mov    (%esp),%cl
		xor    %edx,%edx
		mov    $0x1,%eax
		mov    ingame__InNetGame_UNSURE,%dl
		shl    %cl,%eax
		test   %eax,%edx
		je     jump_10fcc
		mov    $0x4,%ah
		mov    (%esp),%ebx
		mov    %ah,EXPORT_SYMBOL(playable_agents)
		mov    (%esp),%eax
		xor    %ecx,%ecx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(group_types)(%eax),%cl
		xor    %eax,%eax
		mov    (%esp),%dx
		mov    level_def__PlayableGroups(%ebx),%al
		mov    $0x4,%ebx
		call   ac_make_group_into_players
		jmp    jump_10fcc
	jump_1101e:
		xor    %edx,%edx
		mov    $0x2000,%edi
		mov    %edx,(%esp)
		jmp    jump_1103a
	jump_1102a:
		mov    (%esp),%ebx
		inc    %ebx
		mov    %ebx,(%esp)
		cmp    $0x8,%ebx
		jge    jump_110b6
	jump_1103a:
		mov    (%esp),%cl
		xor    %eax,%eax
		mov    $0x1,%edx
		mov    ingame__InNetGame_UNSURE,%al
		shl    %cl,%edx
		test   %edx,%eax
		jne    jump_1102a
		mov    (%esp),%eax
		mov    things_used_head,%bx
		movzbw level_def__PlayableGroups(%eax),%si
		test   %bx,%bx
		je     jump_1102a
	jump_11066:
		xor    %eax,%eax
		mov    %bx,%ax
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %eax,%edx
		xor    %ecx,%ecx
		xor    %eax,%eax
		mov    0x50(%edx),%cl
		mov    %si,%ax
		mov    0x6(%edx),%bx
		cmp    %eax,%ecx
		jne    jump_110ac
		xor    %eax,%eax
		mov    0x9(%edx),%al
		cmp    $0x3,%eax
		jne    jump_110ac
		test   %edi,0xc(%edx)
		jne    jump_110ac
		xor    %eax,%eax
		mov    0x16(%edx),%ax
		call   ac_remove_thing
		mov    %edx,%eax
		call   ac_delete_node
	jump_110ac:
		test   %bx,%bx
		jne    jump_11066
		jmp    jump_1102a
	jump_110b6:
		testb  $0x10,unkn_flags_08
		je     jump_110e0
		xor    %esi,%esi
		mov    %esi,(%esp)
		xor    %ebx,%ebx
	jump_110c6:
		mov    (%esp),%edi
		xor    %eax,%eax
		mov    %ebx,%edx
		mov    login_control__TechLevel,%al
		inc    %edi
		call   ac_process_things_unkn_sub2
		mov    %edi,(%esp)
		cmp    $0x2d,%edi
		jl     jump_110c6
	jump_110e0:
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
/* void simulated_level(void)
*/
GLOBAL_FUNC(ASM_simulated_level)	/* 0x0116A4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x10,%esp
		xor    %eax,%eax
		mov    $0x6,%bl
		xor    %edx,%edx
	jump_116b3:
		add    $0x28,%eax
		mov    %edx,data_19ec70(%eax)
		mov    %bl,EXPORT_SYMBOL(war_flags)-0x18(%eax)
		mov    %dl,EXPORT_SYMBOL(war_flags)-0x17(%eax)
		cmp    $0x4d8,%eax
		jne    jump_116b3
		mov    $0xa0000,%edx
		mov    $0xa00,%ebx
		mov    %edx,0x4(%esp)
		mov    %ebx,0x8(%esp)
		jmp    jump_11705
	jump_116e3:
		mov    0x6(%esp),%edx
		mov    0x8(%esp),%ecx
		add    $0x8,%edx
		add    $0x800,%ecx
		mov    %dx,0x6(%esp)
		mov    %ecx,0x8(%esp)
		cmp    $0x7a00,%ecx
		je     jump_11752
	jump_11705:
		mov    0x8(%esp),%eax
		mov    0x4(%esp),%ebp
		mov    $0xa0000,%edi
		mov    $0xa00,%esi
		mov    %eax,(%esp)
		jmp    jump_11730
	jump_1171c:
		add    $0x800,%esi
		add    $0x80000,%edi
		cmp    $0x7a00,%esi
		je     jump_116e3
	jump_11730:
		mov    %edi,%edx
		mov    %ebp,%eax
		call   is_this_a_nice_place_for_a_picnic
		test   %eax,%eax
		je     jump_1171c
		push   $0x40
		mov    0x4(%esp),%eax
		mov    %esi,%ebx
		push   $0x32
		xor    %ecx,%ecx
		xor    %edx,%edx
		call   func_756e4
		jmp    jump_1171c
	jump_11752:
		xor    %edi,%edi
		jmp    jump_11794
	jump_11756:
		movb   $0x3,0x8(%eax)
		jmp    jump_11784
	jump_1175c:
		movb   $0x7,0x8(%eax)
		jmp    jump_11784
	jump_11762:
		movw   $0x0,0x38(%eax)
		movw   $0x3e7,0x28(%eax)
		mov    0xc(%esp),%ebx
		movw   $0x3e7,0x2a(%eax)
		cmp    $0xc,%ebx
		jb     jump_11784
		jbe    jump_1175c
		cmp    $0xd,%ebx
		je     jump_11756
	jump_11784:
		movw   $0x32,0x14(%eax)
	jump_1178a:
		inc    %edi
		cmp    $0x64,%edi
		jge    jump_11855
	jump_11794:
		xor    %edx,%edx
		call   ac_LbRandomAnyShort
		mov    %ax,%dx
		mov    $0x64,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %edx,%esi
		xor    %edx,%edx
		call   ac_LbRandomAnyShort
		mov    %ax,%dx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %edx,%ebx
		shl    $0x8,%esi
		shl    $0x8,%ebx
		add    $0xa80,%esi
		add    $0xa80,%ebx
		movswl %si,%eax
		movswl %bx,%edx
		call   ac_alt_at_point
		mov    %eax,%ebp
		mov    %ebx,%edx
		mov    %esi,%eax
		shl    $0x8,%edx
		shl    $0x8,%eax
		sar    $0x8,%ebp
		call   is_this_a_nice_place_for_a_picnic
		test   %eax,%eax
		je     jump_1178a
		mov    $0x1a,%ecx
		mov    %edi,%edx
		mov    %edi,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		lea    0x1(%edx),%eax
		mov    %eax,0xc(%esp)
		mov    %dl,%cl
		mov    $0x1,%eax
		shl    %cl,%eax
		test   $0x3ffbdfff,%eax
		je     jump_1178a
		xor    %eax,%eax
		mov    0xc(%esp),%al
		mov    $0x3ec,%ecx
		push   %eax
		mov    %ebp,%edx
		mov    %esi,%eax
		call   create_item
		test   %eax,%eax
		je     jump_1178a
		mov    0xc(%esp),%ebp
		cmp    $0xd,%ebp
		je     jump_11762
		cmp    $0xc,%ebp
		je     jump_11762
		jmp    jump_1178a
	jump_11855:
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
/* void draw_sorted_sprite1a(struct Sprite *ssprite, short x, short y, ubyte csel)
*/
GLOBAL_FUNC(ASM_draw_sorted_sprite1a)	/* 0x0122FC */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		sub    $0xc,%esp
		mov    %dx,(%esp)
		mov    %bx,0x4(%esp)
		mov    %cl,0x8(%esp)
		xor    %edx,%edx
		mov    %cl,%dl
		cmp    $0xa,%edx
		jge    jump_1231c
		movb   $0xa,0x8(%esp)
	jump_1231c:
		xor    %edx,%edx
		mov    0x8(%esp),%dl
		cmp    $0x30,%edx
		jle    jump_1232c
		movb   $0x30,0x8(%esp)
	jump_1232c:
		mov    EXPORT_SYMBOL(overall_scale)-2,%edx
		sar    $0x10,%edx
		cmp    $0x100,%edx
		je     jump_12376
		test   %edx,%edx
		jle    jump_12376
		cmp    $0x1000,%edx
		jge    jump_12376
		mov    0x2(%esp),%ebx
		xor    %edx,%edx
		xor    %ecx,%ecx
		mov    0x8(%esp),%dl
		mov    EXPORT_SYMBOL(overall_scale),%cx
		push   %edx
		mov    0x2(%esp),%edx
		sar    $0x10,%ebx
		sar    $0x10,%edx
		and    $0xffff,%eax
		call   ac_draw_unkn1_scaled_alpha_sprite
		jmp    jump_12473
	jump_12376:
		and    $0xffff,%eax
		lea    0x0(,%eax,8),%edx
		mov    frame,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    (%eax),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    melement_ani,%esi
		add    %eax,%eax
		mov    melement_ani,%edx
		add    %eax,%esi
		cmp    %edx,%esi
		ja     jump_123cf
		jmp    jump_1246a
	jump_123b0:
		xor    %eax,%eax
		mov    0x8(%esi),%ax
		imul   $0xa,%eax,%eax
		mov    melement_ani,%esi
		mov    melement_ani,%ebx
		add    %eax,%esi
		cmp    %ebx,%esi
		jbe    jump_1246a
	jump_123cf:
		xor    %ebx,%ebx
		mov    m_sprites,%ecx
		mov    (%esi),%bx
		add    %ecx,%ebx
		cmp    %ecx,%ebx
		jbe    jump_123b0
		mov    0x6(%esi),%ax
		xor    %ah,%ah
		and    $0x7,%al
		mov    0x7(%esi),%cl
		mov    %ax,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		test   $0xfe,%cl
		jne    jump_1242c
		xor    %eax,%eax
		mov    0x8(%esp),%al
		mov    $EXPORT_SYMBOL(pixmap),%ecx # pixmap.fade_table
		shl    $0x8,%eax
		mov    0x2(%esp),%edx
		add    %eax,%ecx
		mov    0x2(%esi),%eax
		mov    (%esi),%edi
		sar    $0x10,%eax
		sar    $0x10,%edx
		sar    %eax
		sar    $0x10,%edi
		add    %eax,%edx
		mov    -0x2(%esp),%eax
		sar    %edi
		sar    $0x10,%eax
		add    %edi,%eax
		call   ac_LbSpriteDrawRemap
	jump_1242c:
		mov    (%esi),%ebx
		mov    EXPORT_SYMBOL(word_1A5834)-2,%eax
		sar    $0x10,%ebx
		sar    $0x10,%eax
		sar    %ebx
		cmp    %eax,%ebx
		jge    jump_12446
		mov    %bx,EXPORT_SYMBOL(word_1A5834)
	jump_12446:
		mov    0x2(%esi),%ebx
		mov    EXPORT_SYMBOL(word_1A5834),%eax
		sar    $0x10,%ebx
		sar    $0x10,%eax
		sar    %ebx
		cmp    %eax,%ebx
		jge    jump_123b0
		mov    %bx,EXPORT_SYMBOL(word_1A5836)
		jmp    jump_123b0
	jump_1246a:
		xor    %edx,%edx
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
	jump_12473:
		add    $0xc,%esp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_init_engine)	/* 0x1260C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		mov    EXPORT_SYMBOL(game_sort_sprites),%eax
		mov    $0x3c80,%edx
		mov    %eax,EXPORT_SYMBOL(p_current_sort_sprite)
		mov    EXPORT_SYMBOL(game_draw_list),%eax
		mov    $0x3780,%ebx
		add    $0x5,%eax
		xor    %ecx,%ecx
		mov    %eax,EXPORT_SYMBOL(p_current_draw_item)
		call   calc_bul_offsets
		mov    EXPORT_SYMBOL(lbDisplay)+28,%esi # lbDisplay.PhysicalScreenHeight
		mov    %edx,engn_xc
		mov    %ebx,engn_zc
		mov    engn_xc,%ax
		mov    %ecx,engn_yc
		mov    %ax,ingame__TrackX
		mov    engn_zc,%ax
		mov    engn_xc,%dx
		mov    %ax,ingame__TrackZ
		mov    EXPORT_SYMBOL(render_area_a),%ax
		xor    %dl,%dl
		shl    $0x7,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+24,%ebx # lbDisplay.PhysicalScreenWidth
		sub    %eax,%edx
		mov    EXPORT_SYMBOL(render_area_b),%ax
		mov    %dx,EXPORT_SYMBOL(word_19CC64)
		mov    engn_zc,%dx
		shl    $0x7,%eax
		xor    %dl,%dl
		push   %esi
		sub    %eax,%edx
		mov    %ebx,%ecx
		mov    %dx,EXPORT_SYMBOL(word_19CC66)
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay)+4,%eax # lbDisplay.WScreen
		mov    %dx,ingame__NextRocket
		mov    EXPORT_SYMBOL(vec_tmap),%edx
		call   ac_setup_vecs
		orw    $0x20c0,EXPORT_SYMBOL(ingame)+0x92F # ingame.Flags+0
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_func_13A78)	/* 0x13a78 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x28,%esp
		cmpb   $0x0,is_single_game
		jne    jump_13a97
		xor    %edx,%edx
		mov    %edx,EXPORT_SYMBOL(dword_176CC4)
		jmp    jump_13c98
	jump_13a97:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(players)+0x088(%eax),%edx # players[0].DirectControl[0]
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		mov    0x18(%eax),%edx
		mov    engn_xc,%ebx
		sar    $0x8,%edx
		sub    %ebx,%edx
		mov    %edx,0x14(%esp)
		mov    0x1c(%eax),%edx
		mov    engn_yc,%ecx
		sar    $0x5,%edx
		sub    %ecx,%edx
		mov    %edx,0x18(%esp)
		mov    0x20(%eax),%eax
		mov    engn_zc,%esi
		sar    $0x8,%eax
		mov    EXPORT_SYMBOL(dword_176D14),%ebp
		sub    %esi,%eax
		mov    0x14(%esp),%esi
		imul   %ebp,%esi
		lea    0x0(,%ecx,8),%edx
		mov    0x18(%esp),%edi
		mov    EXPORT_SYMBOL(dword_176D10),%ecx
		mov    %eax,0x1c(%esp)
		sub    %edx,%edi
		mov    0x1c(%esp),%edx
		imul   %ecx,%edx
		mov    0x1c(%esp),%ebx
		imul   %ebp,%ebx
		sub    %edx,%esi
		mov    0x14(%esp),%edx
		imul   %ecx,%edx
		mov    %edi,%ecx
		add    %ebx,%edx
		imul   EXPORT_SYMBOL(dword_176D1C),%ecx
		sar    $0x10,%edx
		mov    EXPORT_SYMBOL(dword_176D18),%ebx
		imul   %edx,%ebx
		imul   EXPORT_SYMBOL(dword_176D1C),%edx
		mov    %edi,0x18(%esp)
		sub    %ebx,%ecx
		mov    %edi,%ebx
		imul   EXPORT_SYMBOL(dword_176D18),%ebx
		add    %ebx,%edx
		sar    $0x10,%edx
		mov    %edx,0x1c(%esp)
		mov    EXPORT_SYMBOL(overall_scale)-2,%edx
		sar    $0x10,%esi
		sar    $0x10,%edx
		imul   %edx,%esi
		sar    $0x10,%ecx
		imul   %edx,%ecx
		xor    %ebx,%ebx
		mov    %esp,%eax
		mov    game_perspective,%bl
		mov    %esi,0x14(%esp)
		mov    %esi,%edx
		mov    %ecx,0x18(%esp)
		sar    $0xb,%edx
		cmp    $0x5,%ebx
		je     jump_13bb1
		mov    EXPORT_SYMBOL(dword_176D3C),%ebx
		jmp    jump_13bc9
	jump_13bb1:
		mov    0x1c(%esp),%ebx
		neg    %ebx
		add    $0x4000,%ebx
		imul   %ebx,%edx
		mov    EXPORT_SYMBOL(dword_176D3C),%ebx
		sar    $0xe,%edx
	jump_13bc9:
		add    %edx,%ebx
		mov    %ebx,(%esp)
		mov    (%eax),%edx
		test   %edx,%edx
		jge    jump_13bef
		mov    0x26(%eax),%dh
		or     $0x1,%dh
		mov    (%eax),%esi
		mov    %dh,0x26(%eax)
		cmp    $0xfffff830,%esi
		jge    jump_13c09
		movl   $0xfffff830,(%eax)
		jmp    jump_13c09
	jump_13bef:
		cmp    EXPORT_SYMBOL(vec_window_width),%edx
		jl     jump_13c09
		cmp    $0x7d0,%edx
		jle    jump_13c05
		movl   $0x7d0,(%eax)
	jump_13c05:
		orb    $0x2,0x26(%eax)
	jump_13c09:
		xor    %edx,%edx
		mov    game_perspective,%dl
		cmp    $0x5,%edx
		je     jump_13c24
		mov    0x18(%eax),%ebx
		mov    EXPORT_SYMBOL(dword_176D40),%edx
		sar    $0xb,%ebx
		jmp    jump_13c41
	jump_13c24:
		mov    0x1c(%eax),%edx
		mov    0x18(%eax),%ebx
		neg    %edx
		sar    $0xb,%ebx
		add    $0x4000,%edx
		imul   %edx,%ebx
		mov    EXPORT_SYMBOL(dword_176D40),%edx
		sar    $0xe,%ebx
	jump_13c41:
		sub    %ebx,%edx
		mov    %edx,0x4(%eax)
		mov    0x4(%eax),%edi
		test   %edi,%edi
		jge    jump_13c63
		orb    $0x4,0x26(%eax)
		cmpl   $0xfffff830,0x4(%eax)
		jge    jump_13c86
		movl   $0xfffff830,0x4(%eax)
		jmp    jump_13c86
	jump_13c63:
		cmp    EXPORT_SYMBOL(vec_window_height),%edi
		jl     jump_13c86
		mov    0x26(%eax),%bl
		or     $0x8,%bl
		mov    0x4(%eax),%edx
		mov    %bl,0x26(%eax)
		cmp    $0x7d0,%edx
		jle    jump_13c86
		movl   $0x7d0,0x4(%eax)
	jump_13c86:
		orb    $0x40,0x26(%eax)
		mov    0x1c(%esp),%eax
		add    $0x1388,%eax
		mov    %eax,EXPORT_SYMBOL(dword_176CC4)
	jump_13c98:
		add    $0x28,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_bang_start)	/* 0x01493C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x90,%esp
		mov    %eax,0x84(%esp)
		cmpw   $0x0,0xa(%eax)
		je     jump_149b7
		mov    0x84(%esp),%edx
		mov    0x84(%esp),%ebx
		mov    0x84(%esp),%ecx
		mov    0x18(%eax),%eax
		xor    %esi,%esi
		sar    $0x8,%eax
		mov    0x1c(%edx),%edx
		mov    0x20(%ebx),%ebx
		mov    0xa(%ecx),%si
		sar    $0x8,%edx
		sar    $0x8,%ebx
		cmp    $0x64,%esi
		jl     jump_14995
		mov    $0xfffffff6,%esi
		mov    EXPORT_SYMBOL(colour_lookup)+7,%cl
		jmp    jump_1499b
	jump_14995:
		mov    EXPORT_SYMBOL(colour_lookup)+3,%cl
	jump_1499b:
		and    $0xff,%ecx
		push   %ecx
		push   $0x0
		movswl %si,%ecx
		push   %ecx
		push   %ebx
		lea    0x190(%edx),%ecx
		push   %ecx
		mov    %eax,%ecx
		call   ac_build_laser
	jump_149b7:
		mov    $0x7,%ecx
		mov    EXPORT_SYMBOL(dword_152E4C),%eax
		ror    %cl,%eax
		add    $0x16365267,%eax
		mov    %eax,EXPORT_SYMBOL(dword_152E4C)
		and    $0xff,%eax
		cmp    $0xf0,%eax
		jle    jump_149e3
		sub    $0xf0,%eax
		mov    %eax,EXPORT_SYMBOL(dword_176CAC)
	jump_149e3:
		mov    $0x7,%ecx
		mov    EXPORT_SYMBOL(dword_152E4C),%eax
		ror    %cl,%eax
		add    $0x16365267,%eax
		mov    %eax,EXPORT_SYMBOL(dword_152E4C)
        # pre-conditional function start ends

		add    $0x90,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_child_object)	/* 0x015BAC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x40,%esp
		mov    %eax,%edx
		mov    0x18(%eax),%ebp
		xor    %ecx,%ecx
		mov    0x1c(%eax),%esi
		mov    0x94(%eax),%cx
		mov    0x20(%eax),%edi
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		shl    $0x2,%eax
		add    %ecx,%eax
		mov    things,%ecx
		shl    $0x3,%eax
		add    %eax,%ecx
		mov    0x18(%ecx),%eax
		sar    $0x8,%eax
		mov    %eax,0x14(%esp)
		mov    0x1c(%ecx),%eax
		sar    $0x4,%eax
		mov    %eax,0x18(%esp)
		mov    0x20(%ecx),%eax
		sar    $0x8,%eax
		mov    %eax,0x1c(%esp)
		mov    0x14(%esp),%eax
		mov    %eax,0x34(%esp)
		mov    0x18(%esp),%eax
		mov    %eax,0x38(%esp)
		mov    0x1c(%esp),%eax
		mov    %eax,0x3c(%esp)
		mov    0x52(%edx),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(local_mats),%edx
		shl    $0x2,%eax
		lea    0x34(%esp),%ebx
		add    %eax,%edx
		lea    0x28(%esp),%eax
		call   ac_matrix_transform
		mov    0x28(%esp),%eax
		sar    $0x8,%ebp
		sar    $0xf,%eax
		sar    $0x5,%esi
		mov    %eax,0x14(%esp)
		mov    0x2c(%esp),%eax
		sar    $0x8,%edi
		sar    $0xf,%eax
		push   %ecx
		mov    %eax,0x1c(%esp)
		mov    0x34(%esp),%eax
		mov    0x18(%esp),%edx
		sar    $0xf,%eax
		add    %edx,%ebp
		mov    %eax,0x20(%esp)
		mov    0x1c(%esp),%ebx
		mov    0x50(%ecx),%edx
		add    %ebx,%esi
		sar    $0x10,%edx
		lea    (%edi,%eax,1),%ebx
		lea    0x0(,%edx,8),%eax
		mov    engn_xc,%edi
		add    %edx,%eax
		mov    game_objects,%ecx
		shl    $0x2,%eax
		mov    engn_zc,%edx
		add    %eax,%ecx
		sub    %edx,%ebx
		mov    %ebp,%eax
		mov    %esi,%edx
		sub    %edi,%eax
		call   ac_draw_rot_object
		add    $0x40,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_do_car_glare)	/* 0x015CB8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		sub    $0x48,%esp
		mov    %eax,%esi
		xor    %eax,%eax
		mov    0x26(%esi),%ax
		cmp    $0x1f,%eax
		jg     jump_15dda
		xor    %dh,%dh
		mov    master_glare(,%eax,2),%dl
		mov    %edx,0x44(%esp)
		mov    data_153775(,%eax,2),%al
		xor    %ah,%ah
		mov    %eax,0x40(%esp)
		test   %ax,%ax
		je     jump_15dda
		mov    %edx,%edi
		jmp    jump_15dbd
	jump_15cfb:
		imul   $0x7,%eax,%eax
		mov    EXPORT_SYMBOL(car_glare)-2(%eax),%edx
		sar    $0x10,%edx
		add    %edx,%edx
		mov    %edx,0x14(%esp)
		mov    EXPORT_SYMBOL(car_glare)(%eax),%edx
		mov    EXPORT_SYMBOL(car_glare)+2(%eax),%eax
		sar    $0x10,%eax
		neg    %eax
		sar    $0x10,%edx
		add    %eax,%eax
		neg    %edx
		mov    %eax,0x1c(%esp)
		xor    %ah,%ah
		add    %edx,%edx
		mov    %ah,0x26(%esp)
		mov    0x14(%esp),%eax
		mov    %edx,0x18(%esp)
		mov    %eax,0x34(%esp)
		mov    0x1c(%esp),%eax
		mov    %edx,0x38(%esp)
		mov    %eax,0x3c(%esp)
		mov    0x52(%esi),%eax
		sar    $0x10,%eax
		imul   $0x24,%eax,%eax
		mov    $EXPORT_SYMBOL(local_mats),%edx
		lea    0x34(%esp),%ebx
		add    %eax,%edx
		lea    0x28(%esp),%eax
		call   ac_matrix_transform
		mov    0x28(%esp),%eax
		sar    $0xf,%eax
		mov    %eax,0x14(%esp)
		mov    0x2c(%esp),%eax
		sar    $0xf,%eax
		mov    %eax,0x18(%esp)
		mov    0x30(%esp),%eax
		sar    $0xf,%eax
		mov    %eax,0x1c(%esp)
		mov    0x18(%esi),%eax
		mov    0x14(%esp),%edx
		sar    $0x8,%eax
		add    %edx,%eax
		mov    0x1c(%esi),%edx
		mov    0x18(%esp),%ebx
		sar    $0x5,%edx
		mov    0x1c(%esp),%ecx
		add    %ebx,%edx
		mov    0x20(%esi),%ebx
		cwtl
		sar    $0x8,%ebx
		movswl %dx,%edx
		add    %ecx,%ebx
		mov    $0x30,%ecx
		movswl %bx,%ebx
		inc    %edi
		call   ac_build_glare
	jump_15dbd:
		xor    %edx,%edx
		xor    %eax,%eax
		mov    0x44(%esp),%dx
		mov    0x40(%esp),%ax
		add    %eax,%edx
		xor    %eax,%eax
		mov    %di,%ax
		cmp    %edx,%eax
		jl     jump_15cfb
	jump_15dda:
		add    $0x48,%esp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_number_player)	/* 0x01C2CC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x30,%esp
		mov    %eax,%edi
		mov    %dl,0x2c(%esp)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_1c2eb
		xor    %eax,%eax
		jmp    jump_1c2f0
	jump_1c2eb:
		mov    $0x4,%eax
	jump_1c2f0:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(byte_1DB2E9),%dl
		cmp    $0x1,%edx
		jne    jump_1c304
		mov    $0x5f8,%edx
		jmp    jump_1c309
	jump_1c304:
		mov    $0x5f0,%edx
	jump_1c309:
		add    %eax,%edx
		xor    %eax,%eax
		mov    0x2c(%esp),%al
		add    %edx,%eax
		xor    %edx,%edx
		mov    nstart_ani,%ebx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		mov    (%ebx,%eax,2),%bx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		cmpb   $0x0,data_1a63ae(%eax)
		jne    jump_1c397
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(players)+0x088(%eax),%ecx # players[0].DirectControl[0]
		mov    0x16(%edi),%dx
		cmp    %ecx,%edx
		jne    jump_1c387
		testb  $0x4,gameturn
		jne    jump_1c387
		mov    gameturn,%ecx
		xor    %eax,%eax
		and    $0x3,%ecx
		jmp    jump_1c37c
	jump_1c36b:
		xor    %edx,%edx
		mov    %bx,%dx
		mov    frame,%ebx
		inc    %eax
		mov    0x6(%ebx,%edx,8),%bx
	jump_1c37c:
		xor    %edx,%edx
		mov    %ax,%dx
		cmp    %ecx,%edx
		jbe    jump_1c36b
		jmp    jump_1c397
	jump_1c387:
		xor    %eax,%eax
		mov    frame,%edx
		mov    %bx,%ax
		mov    0x6(%edx,%eax,8),%bx
	jump_1c397:
		testb  $0x2,0x44(%edi)
		jne    jump_1c77f
		testb  $0x10,0xf(%edi)
		je     jump_1c408
		mov    0x5c(%edi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		mov    0x8(%edx,%eax,8),%al
		and    $0xff,%eax
		cmp    $0x1d,%eax
		jne    jump_1c408
		mov    0x18(%edi),%eax
		mov    engn_xc,%edx
		sar    $0x8,%eax
		sub    %edx,%eax
		mov    %eax,0x14(%esp)
		mov    0x1c(%edi),%edx
		mov    engn_yc,%eax
		sar    $0x5,%edx
		sar    $0x3,%eax
		sub    %eax,%edx
		mov    %edx,0x18(%esp)
		mov    0x20(%edi),%eax
		mov    engn_zc,%ecx
		sar    $0x8,%eax
		sub    %ecx,%eax
		jmp    jump_1c486
	jump_1c408:
		mov    engn_yc,%ecx
		mov    0xd(%edi),%al
		sar    $0x3,%ecx
		test   $0x40,%al
		je     jump_1c45a
		mov    0x5c(%edi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		mov    0x18(%eax),%edx
		mov    engn_xc,%esi
		sar    $0x8,%edx
		sub    %esi,%edx
		mov    %edx,0x14(%esp)
		mov    0x1c(%eax),%edx
		sar    $0x5,%edx
		sub    %ecx,%edx
		mov    %edx,0x18(%esp)
		mov    0x20(%eax),%eax
		jmp    jump_1c47b
	jump_1c45a:
		mov    0x18(%edi),%eax
		mov    engn_xc,%esi
		sar    $0x8,%eax
		sub    %esi,%eax
		mov    %eax,0x14(%esp)
		mov    0x1c(%edi),%eax
		sar    $0x5,%eax
		sub    %ecx,%eax
		mov    %eax,0x18(%esp)
		mov    0x20(%edi),%eax
	jump_1c47b:
		mov    engn_zc,%ebp
		sar    $0x8,%eax
		sub    %ebp,%eax
	jump_1c486:
		mov    %eax,0x1c(%esp)
		mov    0x14(%esp),%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ecx
		mov    0x1c(%esp),%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%ecx
		jle    jump_1c4b3
		mov    0x1c(%esp),%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ecx
		mov    0x14(%esp),%eax
		jmp    jump_1c4c2
	jump_1c4b3:
		mov    0x14(%esp),%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ecx
		mov    0x1c(%esp),%eax
	jump_1c4c2:
		sar    %ecx
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		add    %ecx,%eax
		cmp    $0x1200,%eax
		jg     jump_1c77f
		mov    0x14(%esp),%ecx
		mov    EXPORT_SYMBOL(dword_176D14),%ebp
		imul   %ebp,%ecx
		mov    engn_yc,%edx
		mov    0x18(%esp),%esi
		shl    $0x3,%edx
		sub    %edx,%esi
		mov    0x1c(%esp),%edx
		mov    %esi,0x18(%esp)
		mov    EXPORT_SYMBOL(dword_176D10),%esi
		imul   %esi,%edx
		sub    %edx,%ecx
		mov    %ecx,%edx
		mov    0x14(%esp),%ecx
		imul   %esi,%ecx
		sar    $0x10,%edx
		mov    %edx,0x28(%esp)
		mov    0x1c(%esp),%edx
		imul   %ebp,%edx
		mov    0x18(%esp),%esi
		imul   EXPORT_SYMBOL(dword_176D1C),%esi
		add    %ecx,%edx
		mov    EXPORT_SYMBOL(dword_176D18),%ecx
		sar    $0x10,%edx
		imul   %edx,%ecx
		mov    EXPORT_SYMBOL(dword_176D18),%ebp
		sub    %ecx,%esi
		mov    0x18(%esp),%ecx
		imul   %ebp,%ecx
		imul   EXPORT_SYMBOL(dword_176D1C),%edx
		add    %ecx,%edx
		sar    $0x10,%edx
		mov    %edx,0x1c(%esp)
		mov    EXPORT_SYMBOL(overall_scale)-2,%edx
		mov    0x28(%esp),%ecx
		sar    $0x10,%edx
		imul   %edx,%ecx
		sar    $0x10,%esi
		imul   %edx,%esi
		xor    %ah,%ah
		mov    %ah,0x26(%esp)
		mov    %esp,%eax
		mov    %ecx,0x14(%esp)
		mov    %esi,0x18(%esp)
		xor    %ecx,%ecx
		mov    0x14(%esp),%edx
		mov    game_perspective,%cl
		sar    $0xb,%edx
		cmp    $0x5,%ecx
		je     jump_1c596
		mov    EXPORT_SYMBOL(dword_176D3C),%ecx
		jmp    jump_1c5ae
	jump_1c596:
		mov    0x1c(%esp),%ecx
		neg    %ecx
		add    $0x4000,%ecx
		imul   %ecx,%edx
		mov    EXPORT_SYMBOL(dword_176D3C),%ecx
		sar    $0xe,%edx
	jump_1c5ae:
		add    %edx,%ecx
		mov    %ecx,(%esp)
		mov    (%eax),%edx
		test   %edx,%edx
		jge    jump_1c5d4
		mov    0x26(%eax),%dh
		or     $0x1,%dh
		mov    (%eax),%ebp
		mov    %dh,0x26(%eax)
		cmp    $0xfffff830,%ebp
		jge    jump_1c5ee
		movl   $0xfffff830,(%eax)
		jmp    jump_1c5ee
	jump_1c5d4:
		cmp    EXPORT_SYMBOL(vec_window_width),%edx
		jl     jump_1c5ee
		cmp    $0x7d0,%edx
		jle    jump_1c5ea
		movl   $0x7d0,(%eax)
	jump_1c5ea:
		orb    $0x2,0x26(%eax)
	jump_1c5ee:
		xor    %edx,%edx
		mov    game_perspective,%dl
		cmp    $0x5,%edx
		je     jump_1c609
		mov    0x18(%eax),%ecx
		mov    EXPORT_SYMBOL(dword_176D40),%edx
		sar    $0xb,%ecx
		jmp    jump_1c626
	jump_1c609:
		mov    0x1c(%eax),%edx
		mov    0x18(%eax),%ecx
		neg    %edx
		sar    $0xb,%ecx
		add    $0x4000,%edx
		imul   %edx,%ecx
		mov    EXPORT_SYMBOL(dword_176D40),%edx
		sar    $0xe,%ecx
	jump_1c626:
		sub    %ecx,%edx
		mov    %edx,0x4(%eax)
		mov    0x4(%eax),%edx
		test   %edx,%edx
		jge    jump_1c64f
		mov    0x26(%eax),%ch
		or     $0x4,%ch
		mov    0x4(%eax),%ebp
		mov    %ch,0x26(%eax)
		cmp    $0xfffff830,%ebp
		jge    jump_1c672
		movl   $0xfffff830,0x4(%eax)
		jmp    jump_1c672
	jump_1c64f:
		cmp    EXPORT_SYMBOL(vec_window_height),%edx
		jl     jump_1c672
		mov    0x26(%eax),%cl
		or     $0x8,%cl
		mov    0x4(%eax),%esi
		mov    %cl,0x26(%eax)
		cmp    $0x7d0,%esi
		jle    jump_1c672
		movl   $0x7d0,0x4(%eax)
	jump_1c672:
		orb    $0x40,0x26(%eax)
		testb  $0x10,0xf(%edi)
		je     jump_1c69a
		xor    %edx,%edx
		mov    0x2c(%esp),%dl
		lea    0x0(,%edx,8),%eax
		sub    %edx,%eax
		mov    (%esp),%edx
		sub    $0xe,%eax
		add    %eax,%edx
		xor    %esi,%esi
		mov    %edx,(%esp)
		jmp    jump_1c6ca
	jump_1c69a:
		xor    %eax,%eax
		xor    %edx,%edx
		mov    0x57(%edi),%al
		mov    EXPORT_SYMBOL(byte_176D49),%dl
		add    $0x2,%eax
		sub    %edx,%eax
		add    $0x8,%eax
		and    $0x7,%eax
		shl    $0xa,%eax
		mov    EXPORT_SYMBOL(lbSinTable)+2048(%eax),%esi
		neg    %esi
		mov    0x46(%edi),%cl
		sar    $0xe,%esi
		test   $0x8,%cl
		jne    jump_1c6ca
		sar    %esi
	jump_1c6ca:
		xor    %eax,%eax
		mov    %bx,%ax
		mov    frame,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    (%eax),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    melement_ani,%ecx
		add    %eax,%eax
		mov    melement_ani,%ebx
		add    %eax,%ecx
		cmp    %ebx,%ecx
		ja     jump_1c71c
		jmp    jump_1c77f
	jump_1c701:
		xor    %eax,%eax
		mov    0x8(%ecx),%ax
		imul   $0xa,%eax,%eax
		mov    melement_ani,%ecx
		mov    melement_ani,%edi
		add    %eax,%ecx
		cmp    %edi,%ecx
		jbe    jump_1c77f
	jump_1c71c:
		xor    %ebx,%ebx
		mov    m_sprites,%ebp
		mov    (%ecx),%bx
		add    %ebp,%ebx
		cmp    %ebp,%ebx
		jbe    jump_1c701
		mov    0x6(%ecx),%ax
		xor    %ah,%ah
		and    $0x7,%al
		mov    %ax,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		testb  $0xfe,0x7(%ecx)
		jne    jump_1c701
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		mov    0x2(%ecx),%edx
		mov    EXPORT_SYMBOL(overall_scale)-2,%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		imul   %eax,%edx
		mov    0x4(%esp),%edi
		sar    $0x9,%edx
		add    %edi,%edx
		mov    (%ecx),%edi
		sar    $0x10,%edi
		add    %esi,%edi
		imul   %edi,%eax
		mov    (%esp),%ebp
		sar    $0x9,%eax
		add    %ebp,%eax
		call   ac_LbSpriteDraw
		jmp    jump_1c701
	jump_1c77f:
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_hud_lock_target)	/* 0x02017C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(players)+0x088(%eax),%edx # players[0].DirectControl[0]
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%ecx
		shl    $0x3,%eax
		lea    (%ecx,%eax,1),%edx
		testb  $0x10,0xf(%edx)
		je     jump_202ba
		mov    0x5c(%edx),%ebx
		sar    $0x10,%ebx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		add    %eax,%ecx
		xor    %eax,%eax
		mov    0x8(%ecx),%al
		cmp    $0x33,%eax
		je     jump_201f5
		cmp    $0x3b,%eax
		jne    jump_202ba
	jump_201f5:
		mov    0x40(%edx),%ebx
		test   %ebx,%ebx
		je     jump_20213
		mov    0x18(%ebx),%esi
		mov    0x1c(%ebx),%eax
		sar    $0x8,%esi
		mov    0x20(%ebx),%ebx
		sar    $0x5,%eax
		sar    $0x8,%ebx
		add    $0x78,%eax
		jmp    jump_2027e
	jump_20213:
		testb  $0x20,0xf(%edx)
		je     jump_202ba
		testb  $0x20,0xd(%edx)
		je     jump_20275
		xor    %eax,%eax
		mov    0x54(%edx),%ax
		sar    $0x2,%eax
		mov    %eax,%ebx
		shl    $0x3,%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		sub    %ebx,%eax
		add    %eax,%eax
		mov    %eax,%ebx
		shl    $0x2,%eax
		sub    %ebx,%eax
		mov    %eax,%ebx
		mov    0x54(%edx),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		add    %eax,%eax
		add    %eax,%ebx
		xor    %esi,%esi
		mov    data_1a63c6(%ebx),%eax
		mov    data_1a647a(%ebx),%si
		sar    $0x10,%eax
		mov    data_1a6482(%ebx),%bx
		and    $0xffff,%ebx
		jmp    jump_2027e
	jump_20275:
		mov    0x2c(%edx),%esi
		mov    0x30(%edx),%eax
		mov    0x34(%edx),%ebx
	jump_2027e:
		mov    0x48(%ecx),%edx
		sar    $0x10,%edx
		cmp    $0x800,%edx
		jge    jump_202ba
		cmp    $0x18,%edx
		jge    jump_202a3
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(colour_lookup)+2,%dl
		push   %edx
		mov    $0xc,%ecx
		push   $0xc
		jmp    jump_202b1
	jump_202a3:
		xor    %ecx,%ecx
		mov    EXPORT_SYMBOL(colour_lookup)+4,%cl
		push   %ecx
		mov    %edx,%ecx
		sar    %ecx
		push   %ecx
	jump_202b1:
		mov    %eax,%edx
		mov    %esi,%eax
		call   draw_3d_map_corn_square
	jump_202ba:
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_target_vehicle)	/* 0x0202C0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x30,%esp
		mov    %eax,%ebx
		mov    engn_xc,%ecx
		mov    engn_yc,%edi
		mov    engn_zc,%ebp
		mov    0x18(%eax),%eax
		mov    0x1c(%ebx),%edx
		mov    0x20(%ebx),%esi
		sar    $0x8,%eax
		sar    $0x8,%edx
		sar    $0x8,%esi
		shl    $0x3,%edx
		sub    %ecx,%eax
		sub    %ebp,%esi
		mov    %eax,0x14(%esp)
		mov    %esi,0x1c(%esp)
		xor    %ah,%ah
		sub    %edi,%edx
		mov    %ah,0x26(%esp)
		mov    0x14(%esp),%eax
		mov    %edx,0x18(%esp)
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%esi
		mov    0x1c(%esp),%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%esi
		jle    jump_20326
		sar    %eax
		jmp    jump_20328
	jump_20326:
		sar    %esi
	jump_20328:
		add    %esi,%eax
		cmp    $0x1400,%eax
		jg     jump_2063e
		mov    0x14(%esp),%esi
		mov    EXPORT_SYMBOL(dword_176D14),%edi
		imul   %esi,%edi
		mov    engn_yc,%edx
		mov    0x18(%esp),%ecx
		shl    $0x3,%edx
		mov    EXPORT_SYMBOL(dword_176D10),%ebp
		sub    %edx,%ecx
		mov    0x1c(%esp),%edx
		imul   %ebp,%edx
		imul   %ebp,%esi
		mov    %ecx,0x18(%esp)
		mov    EXPORT_SYMBOL(dword_176D14),%ecx
		sub    %edx,%edi
		mov    0x1c(%esp),%edx
		imul   %ecx,%edx
		mov    0x18(%esp),%ebp
		add    %esi,%edx
		imul   EXPORT_SYMBOL(dword_176D1C),%ebp
		sar    $0x10,%edx
		mov    EXPORT_SYMBOL(dword_176D18),%esi
		imul   %edx,%esi
		sub    %esi,%ebp
		mov    EXPORT_SYMBOL(dword_176D18),%ecx
		mov    %ebp,%esi
		mov    0x18(%esp),%ebp
		imul   %ecx,%ebp
		imul   EXPORT_SYMBOL(dword_176D1C),%edx
		add    %ebp,%edx
		sar    $0x10,%edx
		mov    %edx,0x1c(%esp)
		mov    EXPORT_SYMBOL(overall_scale)-2,%edx
		sar    $0x10,%edi
		sar    $0x10,%edx
		imul   %edx,%edi
		sar    $0x10,%esi
		imul   %edx,%esi
		mov    %esp,%eax
		mov    %edi,0x14(%esp)
		mov    %esi,0x18(%esp)
		mov    %edi,%edx
		movzbl game_perspective,%esi
		sar    $0xb,%edx
		cmp    $0x5,%esi
		je     jump_203e6
		mov    EXPORT_SYMBOL(dword_176D3C),%esi
		jmp    jump_203fe
	jump_203e6:
		mov    0x1c(%esp),%esi
		neg    %esi
		add    $0x4000,%esi
		imul   %esi,%edx
		mov    EXPORT_SYMBOL(dword_176D3C),%esi
		sar    $0xe,%edx
	jump_203fe:
		add    %edx,%esi
		mov    %esi,(%esp)
		mov    (%eax),%esi
		test   %esi,%esi
		jge    jump_2041d
		orb    $0x1,0x26(%eax)
		cmpl   $0xfffff830,(%eax)
		jge    jump_20437
		movl   $0xfffff830,(%eax)
		jmp    jump_20437
	jump_2041d:
		cmp    EXPORT_SYMBOL(vec_window_width),%esi
		jl     jump_20437
		cmp    $0x7d0,%esi
		jle    jump_20433
		movl   $0x7d0,(%eax)
	jump_20433:
		orb    $0x2,0x26(%eax)
	jump_20437:
		xor    %edx,%edx
		mov    game_perspective,%dl
		cmp    $0x5,%edx
		je     jump_20452
		mov    0x18(%eax),%edx
		mov    EXPORT_SYMBOL(dword_176D40),%esi
		sar    $0xb,%edx
		jmp    jump_2046f
	jump_20452:
		mov    0x1c(%eax),%edx
		mov    0x18(%eax),%esi
		neg    %edx
		sar    $0xb,%esi
		add    $0x4000,%edx
		imul   %esi,%edx
		mov    EXPORT_SYMBOL(dword_176D40),%esi
		sar    $0xe,%edx
	jump_2046f:
		sub    %edx,%esi
		mov    %esi,0x4(%eax)
		mov    0x4(%eax),%ecx
		test   %ecx,%ecx
		jge    jump_20498
		mov    0x26(%eax),%ch
		or     $0x4,%ch
		mov    0x4(%eax),%ebp
		mov    %ch,0x26(%eax)
		cmp    $0xfffff830,%ebp
		jge    jump_204bb
		movl   $0xfffff830,0x4(%eax)
		jmp    jump_204bb
	jump_20498:
		cmp    EXPORT_SYMBOL(vec_window_height),%ecx
		jl     jump_204bb
		mov    0x26(%eax),%cl
		or     $0x8,%cl
		mov    0x4(%eax),%edi
		mov    %cl,0x26(%eax)
		cmp    $0x7d0,%edi
		jle    jump_204bb
		movl   $0x7d0,0x4(%eax)
	jump_204bb:
		orb    $0x40,0x26(%eax)
		xor    %eax,%eax
		mov    0x14(%ebx),%ax
		sar    $0x4,%eax
		mov    %eax,%ecx
		xor    %eax,%eax
		mov    (%esp),%edi
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		mov    0x4(%esp),%esi
		cmp    $0x1,%eax
		jne    jump_20526
		movswl %cx,%edx
		mov    %esi,%ebp
		sub    %edx,%ebp
		mov    EXPORT_SYMBOL(pop1_sprites),%eax
		mov    %ebp,0x28(%esp)
		movzbl 0x1fd(%eax),%ebp
		mov    %ebp,0x2c(%esp)
		mov    0x28(%esp),%ebp
		sub    0x2c(%esp),%ebp
		mov    %ebp,0x2c(%esp)
		mov    %edi,%ebp
		lea    0x1f8(%eax),%ebx
		sub    %edx,%ebp
		mov    0x1fc(%eax),%al
		mov    %ebp,%edx
		and    $0xff,%eax
		sub    %eax,%edx
		mov    %edx,%eax
		mov    0x2c(%esp),%edx
		jmp    jump_20561
	jump_20526:
		mov    EXPORT_SYMBOL(pop1_sprites),%eax
		mov    %esi,%ebp
		lea    0x1f8(%eax),%edx
		xor    %ebx,%ebx
		mov    %edx,0x2c(%esp)
		movswl %cx,%edx
		mov    0x1fd(%eax),%bl
		sub    %edx,%ebp
		sub    %ebx,%ebp
		mov    %edi,%ebx
		sub    %edx,%ebx
		mov    0x1fc(%eax),%al
		mov    %ebx,%edx
		and    $0xff,%eax
		sub    %eax,%edx
		mov    0x2c(%esp),%ebx
		mov    %edx,%eax
		mov    %ebp,%edx
	jump_20561:
		call   ac_LbSpriteDraw
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_20597
		movswl %cx,%ebp
		mov    %esi,%edx
		mov    EXPORT_SYMBOL(pop1_sprites),%eax
		sub    %ebp,%edx
		lea    0x1fe(%eax),%ebx
		mov    0x1fd(%eax),%al
		and    $0xff,%eax
		sub    %eax,%edx
		lea    (%edi,%ebp,1),%eax
		jmp    jump_205bb
	jump_20597:
		movswl %cx,%edx
		mov    %esi,%ebp
		mov    EXPORT_SYMBOL(pop1_sprites),%eax
		sub    %edx,%ebp
		lea    0x1fe(%eax),%ebx
		mov    0x1fd(%eax),%al
		and    $0xff,%eax
		sub    %eax,%ebp
		lea    (%edi,%edx,1),%eax
		mov    %ebp,%edx
	jump_205bb:
		call   ac_LbSpriteDraw
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		mov    EXPORT_SYMBOL(pop1_sprites),%ebx
		movswl %cx,%eax
		add    $0x20a,%ebx
		lea    (%esi,%eax,1),%edx
		add    %edi,%eax
		call   ac_LbSpriteDraw
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_20614
		movswl %cx,%eax
		mov    EXPORT_SYMBOL(pop1_sprites),%edx
		add    %eax,%esi
		sub    %eax,%edi
		xor    %eax,%eax
		mov    0x20e(%edx),%al
		lea    0x204(%edx),%ebx
		sub    %eax,%edi
		mov    %esi,%edx
		mov    %edi,%eax
		jmp    jump_20639
	jump_20614:
		mov    EXPORT_SYMBOL(pop1_sprites),%edx
		movswl %cx,%eax
		lea    0x204(%edx),%ebx
		sub    %eax,%edi
		add    %eax,%esi
		mov    %edi,%eax
		mov    0x20e(%edx),%dl
		and    $0xff,%edx
		sub    %edx,%eax
		mov    %esi,%edx
	jump_20639:
		call   ac_LbSpriteDraw
	jump_2063e:
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_target_person)	/* 0x020648 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x30,%esp
		mov    %edx,%ecx
		mov    0x18(%eax),%edx
		mov    0x1c(%eax),%ebx
		mov    0x20(%eax),%esi
		sar    $0x8,%edx
		sar    $0x8,%ebx
		sar    $0x8,%esi
		testb  $0x2,0xc(%eax)
		jne    jump_2092f
		mov    engn_yc,%ebp
		lea    0x0(,%ebx,8),%eax
		mov    engn_xc,%edi
		sub    %ebp,%eax
		sub    %edi,%edx
		add    $0x78,%eax
		mov    %edx,0x14(%esp)
		mov    %eax,0x18(%esp)
		lea    0x0(,%ebp,8),%edx
		mov    engn_zc,%eax
		mov    0x18(%esp),%ebx
		sub    %eax,%esi
		sub    %edx,%ebx
		mov    %esi,0x1c(%esp)
		mov    %ebx,0x18(%esp)
		mov    0x14(%esp),%ebx
		mov    EXPORT_SYMBOL(dword_176D14),%esi
		imul   %ebx,%esi
		mov    EXPORT_SYMBOL(dword_176D10),%edi
		mov    0x1c(%esp),%edx
		imul   %edi,%edx
		imul   %edi,%ebx
		sub    %edx,%esi
		mov    0x1c(%esp),%edx
		imul   EXPORT_SYMBOL(dword_176D14),%edx
		mov    EXPORT_SYMBOL(dword_176D1C),%ebp
		mov    0x18(%esp),%edi
		imul   %ebp,%edi
		add    %ebx,%edx
		mov    EXPORT_SYMBOL(dword_176D18),%ebx
		sar    $0x10,%edx
		imul   %edx,%ebx
		mov    EXPORT_SYMBOL(dword_176D18),%ebp
		sub    %ebx,%edi
		mov    0x18(%esp),%ebx
		imul   %ebp,%ebx
		imul   EXPORT_SYMBOL(dword_176D1C),%edx
		add    %ebx,%edx
		sar    $0x10,%edx
		mov    %edx,0x1c(%esp)
		mov    EXPORT_SYMBOL(overall_scale)-2,%edx
		sar    $0x10,%esi
		sar    $0x10,%edx
		imul   %edx,%esi
		sar    $0x10,%edi
		imul   %edx,%edi
		xor    %ah,%ah
		mov    %ah,0x26(%esp)
		xor    %ebx,%ebx
		mov    %esp,%eax
		mov    game_perspective,%bl
		mov    %esi,0x14(%esp)
		mov    %esi,%edx
		mov    %edi,0x18(%esp)
		sar    $0xb,%edx
		cmp    $0x5,%ebx
		je     jump_2074f
		mov    EXPORT_SYMBOL(dword_176D3C),%ebx
		jmp    jump_20767
	jump_2074f:
		mov    0x1c(%esp),%ebx
		neg    %ebx
		add    $0x4000,%ebx
		imul   %ebx,%edx
		mov    EXPORT_SYMBOL(dword_176D3C),%ebx
		sar    $0xe,%edx
	jump_20767:
		add    %edx,%ebx
		mov    %ebx,(%esp)
		mov    (%eax),%edx
		test   %edx,%edx
		jge    jump_2078d
		mov    0x26(%eax),%dh
		or     $0x1,%dh
		mov    (%eax),%edi
		mov    %dh,0x26(%eax)
		cmp    $0xfffff830,%edi
		jge    jump_207a7
		movl   $0xfffff830,(%eax)
		jmp    jump_207a7
	jump_2078d:
		cmp    EXPORT_SYMBOL(vec_window_width),%edx
		jl     jump_207a7
		cmp    $0x7d0,%edx
		jle    jump_207a3
		movl   $0x7d0,(%eax)
	jump_207a3:
		orb    $0x2,0x26(%eax)
	jump_207a7:
		xor    %edx,%edx
		mov    game_perspective,%dl
		cmp    $0x5,%edx
		je     jump_207c2
		mov    0x18(%eax),%ebx
		mov    EXPORT_SYMBOL(dword_176D40),%edx
		sar    $0xb,%ebx
		jmp    jump_207df
	jump_207c2:
		mov    0x1c(%eax),%edx
		mov    0x18(%eax),%ebx
		neg    %edx
		sar    $0xb,%ebx
		add    $0x4000,%edx
		imul   %edx,%ebx
		mov    EXPORT_SYMBOL(dword_176D40),%edx
		sar    $0xe,%ebx
	jump_207df:
		sub    %ebx,%edx
		mov    %edx,0x4(%eax)
		mov    0x4(%eax),%ebp
		test   %ebp,%ebp
		jge    jump_20808
		mov    0x26(%eax),%bh
		or     $0x4,%bh
		mov    0x4(%eax),%edi
		mov    %bh,0x26(%eax)
		cmp    $0xfffff830,%edi
		jge    jump_2082b
		movl   $0xfffff830,0x4(%eax)
		jmp    jump_2082b
	jump_20808:
		cmp    EXPORT_SYMBOL(vec_window_height),%ebp
		jl     jump_2082b
		mov    0x26(%eax),%bl
		or     $0x8,%bl
		mov    0x4(%eax),%esi
		mov    %bl,0x26(%eax)
		cmp    $0x7d0,%esi
		jle    jump_2082b
		movl   $0x7d0,0x4(%eax)
	jump_2082b:
		orb    $0x40,0x26(%eax)
		mov    (%esp),%esi
		mov    %esi,%edx
		mov    0x4(%esp),%edi
		sub    %ecx,%edx
		xor    %eax,%eax
		mov    %edx,0x28(%esp)
		mov    %edi,%edx
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		sub    %ecx,%edx
		cmp    $0x1,%eax
		mov    EXPORT_SYMBOL(pop1_sprites),%eax
		movzbl 0x1fd(%eax),%ebp
		lea    0x1d4(%eax),%ebx
		mov    0x1fc(%eax),%al
		sub    %ebp,%edx
		mov    0x28(%esp),%ebp
		and    $0xff,%eax
		sub    %eax,%ebp
		mov    %ebp,%eax
		call   ac_LbSpriteDraw
		mov    %edi,%ebx
		xor    %edx,%edx
		lea    (%esi,%ecx,1),%eax
		sub    %ecx,%ebx
		mov    EXPORT_SYMBOL(lbDisplay)+100,%dx # lbDisplay.ScreenMode
		mov    %ebx,0x2c(%esp)
		cmp    $0x1,%edx
		mov    EXPORT_SYMBOL(pop1_sprites),%edx
		lea    0x1da(%edx),%ebx
		mov    0x1fd(%edx),%dl
		mov    0x2c(%esp),%ebp
		and    $0xff,%edx
		sub    %edx,%ebp
		mov    %ebp,%edx
		call   ac_LbSpriteDraw
		xor    %ebx,%ebx
		lea    (%esi,%ecx,1),%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%bx # lbDisplay.ScreenMode
		lea    (%edi,%ecx,1),%edx
		cmp    $0x1,%ebx
		mov    EXPORT_SYMBOL(pop1_sprites),%ebx
		add    $0x1e6,%ebx
		call   ac_LbSpriteDraw
		mov    %esi,%ebx
		xor    %eax,%eax
		lea    (%edi,%ecx,1),%edx
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		sub    %ecx,%ebx
		cmp    $0x1,%eax
		jne    jump_2090a
		mov    EXPORT_SYMBOL(pop1_sprites),%eax
		lea    0x1e0(%eax),%ecx
		mov    0x20e(%eax),%al
		and    $0xff,%eax
		sub    %eax,%ebx
		mov    %ebx,%eax
		mov    %ecx,%ebx
		jmp    jump_2092a
	jump_2090a:
		mov    EXPORT_SYMBOL(pop1_sprites),%ecx
		lea    0x1e0(%ecx),%eax
		mov    0x20e(%ecx),%cl
		and    $0xff,%ecx
		sub    %ecx,%ebx
		mov    %ebx,%ecx
		mov    %eax,%ebx
		mov    %ecx,%eax
	jump_2092a:
		call   ac_LbSpriteDraw
	jump_2092f:
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_show_goto_point)	/* 0x020938 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		sub    $0xc,%esp
		xor    %ah,%ah
		mov    %ah,0x8(%esp)
		test   %al,%al
		je     jump_2096a
		mov    nstart_ani,%eax
		xor    %esi,%esi
		mov    0x73c(%eax),%ax
		mov    %si,data_176cb6
		mov    %ax,data_176cb4
		jmp    jump_20b04
	jump_2096a:
		cmpw   $0x0,data_176cb4
		je     jump_20b04
		mov    data_176cb6,%ax
		xor    %edx,%edx
		mov    %ax,%dx
		inc    %eax
		mov    %ax,data_176cb6
		cmp    $0x5,%edx
		jle    jump_20998
		xor    %ebx,%ebx
		mov    %bx,data_176cb4
	jump_20998:
		xor    %eax,%eax
		mov    frame,%edx
		mov    data_176cb4,%ax
		mov    0x6(%edx,%eax,8),%ax
		movzbl EXPORT_SYMBOL(local_player_no),%esi
		mov    %ax,data_176cb4
		lea    0x0(,%esi,8),%eax
		add    %esi,%eax
		shl    $0x3,%eax
		sub    %esi,%eax
		add    %eax,%eax
		lea    0x0(,%eax,4),%edx
		sub    %eax,%edx
		xor    %eax,%eax
		mov    mouser,%al
		mov    EXPORT_SYMBOL(players)+0x088(%edx,%eax,4),%edx # players[0].DirectControl[0]
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%esi
		shl    $0x3,%eax
		add    %eax,%esi
		testb  $0x10,0xf(%esi)
		jne    jump_20a0d
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0x1,%eax
		jne    jump_20b04
	jump_20a0d:
		testb  $0x40,0x44(%esi)
		jne    jump_20b04
		xor    %eax,%eax
		mov    data_176cb6,%ax
		cmp    $0x1,%eax
		jne    jump_20a40
		push   $0x3
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x5c,%edx
		xor    %eax,%eax
		call   ac_play_sample_using_heap
	jump_20a40:
		mov    0x98(%esi),%eax
		xor    %edx,%edx
		sar    $0x10,%eax
		mov    EXPORT_SYMBOL(local_player_no),%dl
		mov    %eax,(%esp)
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		lea    0x0(,%eax,4),%ebx
		sub    %eax,%ebx
		mov    0x9a(%esi),%edi
		mov    data_1a63d8(%ebx),%cx
		sar    $0x10,%edi
		test   %cx,%cx
		je     jump_20ac4
		mov    (%esp),%eax
		mov    data_1a63d6(%ebx),%ecx
		mov    %edi,%edx
		sar    $0x10,%ecx
		shl    $0x8,%eax
		shl    $0x8,%edx
		test   %ecx,%ecx
		jle    jump_20aae
		mov    data_1a63d8(%ebx),%bx
		and    $0xffff,%ebx
		call   ac_get_height_on_face
		jmp    jump_20ad3
	jump_20aae:
		mov    data_1a63d8(%ebx),%bx
		neg    %ebx
		and    $0xffff,%ebx
		call   ac_get_height_on_face_quad
		jmp    jump_20ad3
	jump_20ac4:
		mov    -0x2(%esp),%eax
		movswl %di,%edx
		sar    $0x10,%eax
		call   ac_alt_at_point
	jump_20ad3:
		sar    $0x8,%eax
		mov    %eax,0x4(%esp)
		testb  $0x8,0x46(%esi)
		je     jump_20ae5
		movb   $0x30,0x8(%esp)
	jump_20ae5:
		lea    0x4(%esp),%edx
		xor    %eax,%eax
		mov    %edi,%ebx
		mov    0x8(%esp),%al
		xor    %ecx,%ecx
		push   %eax
		mov    data_176cb4,%cx
		lea    0x4(%esp),%eax
		call   func_70a88
	jump_20b04:
		add    $0xc,%esp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_engine_net_text)	/* 0x020B50 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x28,%esp
		mov    data_176cc8,%edx
		test   %edx,%edx
		je     jump_20c57
		mov    0x54(%edx),%ax
		and    $0xffff,%eax
		sar    $0x2,%eax
		mov    $unkn2_names,%esi
		shl    $0x4,%eax
		mov    %esp,%edi
		add    %eax,%esi
		push   %edi
	jump_20b80:
		mov    (%esi),%al
		mov    %al,(%edi)
		cmp    $0x0,%al
		je     jump_20b98
		mov    0x1(%esi),%al
		add    $0x2,%esi
		mov    %al,0x1(%edi)
		add    $0x2,%edi
		cmp    $0x0,%al
		jne    jump_20b80
	jump_20b98:
		pop    %edi
		mov    (%esp),%ah
		mov    %esp,%edx
		test   %ah,%ah
		je     jump_20bb5
	jump_20ba2:
		xor    %eax,%eax
		mov    (%edx),%al
		call   ac_my_char_to_upper
		mov    %al,(%edx)
		mov    0x1(%edx),%bl
		inc    %edx
		test   %bl,%bl
		jne    jump_20ba2
	jump_20bb5:
		mov    data_176cc8,%eax
		mov    %esp,%edi
		mov    0x54(%eax),%ax
		and    $0xffff,%eax
		sar    $0x2,%eax
		mov    %esp,%edx
		mov    EXPORT_SYMBOL(byte_1C5C30)(%eax),%al
		mov    (%esp),%bh
		mov    %al,0x24(%esp)
		mov    data_176cd0,%eax
		mov    data_176ccc,%esi
		mov    %eax,0x20(%esp)
		xor    %eax,%eax
		test   %bh,%bh
		je     jump_20c0f
	jump_20bec:
		movsbl (%edx),%ebp
		imul   $0x6,%ebp,%ebp
		mov    EXPORT_SYMBOL(small_font),%ecx
		mov    -0xb6(%ecx,%ebp,1),%cl
		and    $0xff,%ecx
		add    %ecx,%eax
		mov    0x1(%edx),%cl
		inc    %edx
		test   %cl,%cl
		jne    jump_20bec
	jump_20c0f:
		sar    %eax
		mov    (%edi),%ch
		sub    %eax,%esi
		test   %ch,%ch
		je     jump_20c4f
	jump_20c19:
		movsbl (%edi),%eax
		imul   $0x6,%eax,%eax
		mov    EXPORT_SYMBOL(small_font),%edx
		xor    %ecx,%ecx
		add    %edx,%eax
		mov    0x24(%esp),%cl
		lea    -0xba(%eax),%ebp
		mov    0x20(%esp),%edx
		mov    %ebp,%ebx
		mov    %esi,%eax
		call   ac_LbSpriteDrawOneColour
		xor    %eax,%eax
		mov    0x4(%ebp),%al
		add    %eax,%esi
		mov    0x1(%edi),%al
		inc    %edi
		test   %al,%al
		jne    jump_20c19
	jump_20c4f:
		xor    %ebx,%ebx
		mov    %ebx,data_176cc8
	jump_20c57:
		add    $0x28,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret

vtable_20c64:
		.long   func_20f64
		.long   func_20f64
		.long   func_210c3
		.long   func_20fea
		.long   func_20e96
		.long   func_20f64
		.long   func_20f64


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_hud)	/* 0x020C80 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    %eax,%ebx
		cmpw   $0x0,ingame__TrackThing
		je     jump_20cbd
		xor    %edx,%edx
		mov    ingame__TrackThing,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		testb  $0x20,0xd(%edx,%eax,8)
		je     jump_211a4
	jump_20cbd:
		testb  $0x20,EXPORT_SYMBOL(ingame)+0x930 # ingame.Flags+1
		je     jump_211a4
		cmpb   $0x0,EXPORT_SYMBOL(debug_hud_collision)
		jne    jump_211a4
		xor    %eax,%eax
		call   ac_show_goto_point
		cmpl   $0x0,EXPORT_SYMBOL(target_old_frameno)
		jne    jump_20cfd
		mov    nstart_ani,%eax
		mov    0x7ae(%eax),%ax
		and    $0xffff,%eax
		mov    %eax,EXPORT_SYMBOL(target_old_frameno)
	jump_20cfd:
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+107 # lbDisplay.MRightButton
		je     jump_20d6f
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		mov    mouser,%al
		mov    EXPORT_SYMBOL(players)+0x088(%edx,%eax,4),%edx # players[0].DirectControl[0]
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		cmpl   $0x0,0x40(%eax)
		je     jump_20d6f
		xor    %edx,%edx
		mov    0x99(%eax),%dl
		cmp    $0x5,%edx
		jne    jump_20d6f
		mov    0x8a(%eax),%eax
		sar    $0x10,%eax
		cmp    $0xe,%eax
		jge    jump_20d97
	jump_20d6f:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		xor    %ecx,%ecx
		mov    %cx,data_1a63e2(%eax)
	jump_20d97:
		xor    %edx,%edx
		mov    %bx,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%ebp
		shl    $0x3,%eax
		add    %eax,%ebp
		call   ac_draw_hud_lock_target
		mov    EXPORT_SYMBOL(ingame)+0x000,%eax # ingame.GameMode
		sar    $0x10,%eax
		cmp    $0x32,%eax
		jne    jump_211a4
		mov    %ebp,%eax
		call   ac_current_hand_weapon_range
		xor    %ecx,%ecx
		xor    %edi,%edi
		xor    %esi,%esi
		mov    %eax,0x4(%esp)
		jmp    jump_20de5
	jump_20dde:
		add    $0x4,%edi
		add    $0x22,%esi
		inc    %ecx
	jump_20de5:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(playable_agents),%al
		cmp    %eax,%ecx
		jge    jump_20e46
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(local_player_no),%al
		imul   $0x1aa,%eax,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(players)+0x09C(%edi,%eax,1),%ebx # players[0].MyAgent[0]
		mov    %cl,%dl
		mov    %ebx,%eax
		call   ac_number_player
		testb  $0x10,0xd(%ebx)
		je     jump_20dde
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(local_player_no),%al
		imul   $0x1aa,%eax,%eax
		mov    EXPORT_SYMBOL(players)+0x01e(%esi,%eax,1),%ax # players[0].UserInput[0].ControlMode
		and    $0x1f,%ah
		cmp    $0x1,%ax
		je     jump_20dde
		mov    0x40(%ebx),%eax
		test   %eax,%eax
		je     jump_20dde
		mov    $0x2,%edx
		call   ac_draw_target_person
		jmp    jump_20dde
	jump_20e46:
		xor    %eax,%eax
		mov    pktrec_mode,%al
		cmp    $0x2,%eax
		je     func_20e96
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    data_1a63de(%eax),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		jg     jump_210e0
		jl     jump_21100
		mov    $0x8,%eax
	jump_20e91:
		call   ac_do_change_mouse


/*----------------------------------------------------------------*/
func_20e96:
/*----------------------------------------------------------------*/
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    data_1a63e0(%eax),%edx
		sar    $0x10,%edx
		mov    %eax,(%esp)
		test   %edx,%edx
		jle    jump_2119f
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%ebx
		shl    $0x3,%eax
		lea    (%ebx,%eax,1),%ecx
		testb  $0x2,0xc(%ecx)
		jne    jump_2119f
		mov    0x18(%ecx),%esi
		mov    0x1c(%ecx),%edi
		xor    %eax,%eax
		sar    $0x8,%esi
		mov    0x99(%ebp),%al
		sar    $0x8,%edi
		cmp    $0x5,%eax
		jne    jump_21125
		mov    (%esp),%edx
		mov    EXPORT_SYMBOL(players)+0x088(%edx),%edx # players[0].DirectControl[0]
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		shl    $0x3,%eax
		add    %ebx,%eax
		mov    0x40(%eax),%ebp
		test   %ebp,%ebp
		je     jump_2116f
		testb  $0x2,0xc(%ebp)
		jne    jump_2116f
		mov    0x8a(%eax),%edx
		mov    $0x12,%ebx
		sar    $0x10,%edx
		sub    %edx,%ebx
		lea    0x0(,%ebx,4),%edx
		cmp    $0x6,%edx
		jge    jump_20f5c
		mov    $0x6,%edx
	jump_20f5c:
		mov    0x40(%eax),%eax
		jmp    jump_2116a


/*----------------------------------------------------------------*/
func_20f64:
/*----------------------------------------------------------------*/
		mov    0x4(%esp),%ebx
		imul   %ebx,%ebx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    data_1a63e0(%eax),%dx
		mov    %dx,data_1a63e2(%eax)
		mov    data_1a63de(%eax),%edx
		mov    $0x7,%esi
		sar    $0x10,%edx
		mov    %si,data_1a63e4(%eax)
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		mov    $0x3,%ecx
		add    %eax,%edx
		mov    %ebp,%eax
		call   ac_can_i_see_thing
		test   %eax,%eax
		je     jump_20fe0
		mov    $0x3,%eax
		jmp    jump_20e91
	jump_20fe0:
		mov    $0x2,%eax
		jmp    jump_20e91


/*----------------------------------------------------------------*/
func_20fea:
/*----------------------------------------------------------------*/
		mov    data_1a63e0(%eax),%dx
		mov    %dx,data_1a63e2(%eax)
		mov    data_1a63e0(%eax),%ebx
		sar    $0x10,%ebx
		lea    0x0(,%ebx,4),%edx
		add    %ebx,%edx
		shl    $0x2,%edx
		add    %ebx,%edx
		mov    things,%ecx
		shl    $0x3,%edx
		lea    (%ecx,%edx,1),%ebx
		xor    %edx,%edx
		mov    mouser,%dl
		mov    EXPORT_SYMBOL(players)+0x088(%eax,%edx,4),%edx # players[0].DirectControl[0]
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		shl    $0x3,%eax
		mov    %ebx,%edx
		add    %ecx,%eax
		call   ac_can_i_enter_vehicle
		test   %al,%al
		je     jump_21052
		mov    $0x6,%eax
		jmp    jump_20e91
	jump_21052:
		mov    0x4(%esp),%ebx
		imul   %ebx,%ebx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    data_1a63de(%eax),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		add    %eax,%edx
		xor    %eax,%eax
		mov    0x14(%edx),%ax
		imul   %eax,%eax
		mov    $0x3,%ecx
		add    %eax,%ebx
		mov    %ebp,%eax
		call   ac_can_i_see_thing
		test   %eax,%eax
		je     jump_20fe0
		mov    $0x3,%eax
		jmp    jump_20e91


/*----------------------------------------------------------------*/
func_210c3:
/*----------------------------------------------------------------*/
		mov    data_1a63e0(%eax),%dx
		mov    %dx,data_1a63e2(%eax)
		mov    $0x7,%eax
		call   ac_do_change_mouse
		jmp    func_20e96
	jump_210e0:
		mov    data_1a63e4(%eax),%dx
		dec    %edx
		cmp    $0x6,%dx
		ja     func_20e96
		and    $0xffff,%edx
		jmp    *%cs:vtable_20c64(,%edx,4)
	jump_21100:
		mov    data_1a63e4(%eax),%dx
		cmp    $0x3,%dx
		je     func_210c3
		mov    data_1a63e0(%eax),%dx
		mov    %dx,data_1a63e2(%eax)
		mov    $0x5,%eax
		jmp    jump_20e91
	jump_21125:
		xor    %eax,%eax
		mov    0x9(%ecx),%al
		cmp    $0x2,%eax
		jne    jump_21138
		mov    %ecx,%eax
		call   ac_draw_target_vehicle
		jmp    jump_2116f
	jump_21138:
		cmp    $0x3,%eax
		jne    jump_2116f
		testb  $0x10,0xf(%ecx)
		je     jump_21163
		mov    0x5c(%ecx),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		shl    $0x3,%eax
		mov    $0x2,%edx
		add    %ebx,%eax
		jmp    jump_2116a
	jump_21163:
		mov    $0x2,%edx
		mov    %ecx,%eax
	jump_2116a:
		call   ac_draw_target_person
	jump_2116f:
		mov    %ecx,%ebx
		mov    %edi,%edx
		mov    %esi,%eax
		call   ac_draw_hud_health_bar
		mov    %ecx,%ebx
		mov    %edi,%edx
		mov    %esi,%eax
		call   ac_draw_hud_shield_bar
		mov    EXPORT_SYMBOL(target_old_frameno),%eax
		mov    frame,%edx
		mov    0x6(%edx,%eax,8),%ax
		and    $0xffff,%eax
		mov    %eax,EXPORT_SYMBOL(target_old_frameno)
	jump_2119f:
		call   ac_draw_new_panel
	jump_211a4:
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_background_stars)	/* 0x211b0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		sub    $0x8,%esp
		mov    $0x8d747,%edx
		mov    EXPORT_SYMBOL(lbSeed),%eax
		xor    %ecx,%ecx
		mov    %eax,(%esp)
		mov    %edx,EXPORT_SYMBOL(lbSeed)
		jmp    jump_212a0
	jump_211d2:
		mov    %eax,%edx
		imul   %esi,%edx
	jump_211d7:
		shr    $0x6,%edx
		call   ac_LbRandomAnyShort
		and    $0xffff,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		mov    $0x320,%ebx
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %edx,%ebx
		xor    %edx,%edx
		call   ac_LbRandomAnyShort
		mov    %ax,%dx
		mov    $0x320,%edi
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %edi
		sub    $0x190,%ebx
		mov    EXPORT_SYMBOL(dword_176D14),%edi
		imul   %ebx,%edi
		mov    EXPORT_SYMBOL(dword_176D10),%eax
		sub    $0x190,%edx
		imul   %edx,%eax
		imul   EXPORT_SYMBOL(dword_176D14),%edx
		sub    %eax,%edi
		mov    %edi,%eax
		imul   EXPORT_SYMBOL(dword_176D10),%ebx
		add    %ebx,%edx
		mov    EXPORT_SYMBOL(lbDisplay)+24,%ebx # lbDisplay.PhysicalScreenWidth
		sar    $0x10,%eax
		sar    %ebx
		neg    %edx
		add    %ebx,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+28,%ebx # lbDisplay.PhysicalScreenHeight
		sar    $0x10,%edx
		sar    %ebx
		add    %ebx,%edx
		test   %eax,%eax
		jle    jump_21297
		cmp    EXPORT_SYMBOL(lbDisplay)+24,%eax # lbDisplay.PhysicalScreenWidth
		jge    jump_21297
		test   %edx,%edx
		jle    jump_21297
		cmp    EXPORT_SYMBOL(lbDisplay)+28,%edx # lbDisplay.PhysicalScreenHeight
		jge    jump_21297
		mov    $0x4f,%edi
		sar    %esi
		xor    %ebx,%ebx
		sub    %esi,%edi
		mov    EXPORT_SYMBOL(lbDisplay)+100,%bx # lbDisplay.ScreenMode
		mov    %edi,0x4(%esp)
		cmp    $0x1,%ebx
		mov    0x4(%esp),%bl
		and    $0xff,%ebx
		call   ac_LbDrawPixelClip
	jump_21297:
		inc    %ecx
		cmp    $0x4c7,%ecx
		jge    jump_212cb
	jump_212a0:
		mov    gameturn,%eax
		xor    %edx,%edx
		mov    %ecx,%esi
		mov    EXPORT_SYMBOL(lbShift),%dl
		sar    $0x4,%esi
		and    $0x7ff,%eax
		inc    %esi
		cmp    $0x1,%edx
		jne    jump_211d2
		mov    %eax,%edx
		shl    $0x5,%edx
		jmp    jump_211d7
	jump_212cb:
		mov    (%esp),%eax
		mov    %eax,EXPORT_SYMBOL(lbSeed)
		add    $0x8,%esp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


vtable_22c48:
		.long   func_22f45
		.long   func_22fdd
		.long   func_23075
		.long   func_2310d
		.long   func_231a5
		.long   func_2323d
		.long   func_232d5
		.long   func_2336d
		.long   func_23405
		.long   func_2349d
		.long   func_23535
		.long   func_235cd


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_floor_tile1a)	/* 0x022C78 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xa0,%esp
		xor    %ecx,%ecx
		mov    %ax,%cx
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		shl    $0x3,%eax
		sub    %ecx,%eax
		mov    game_floor_tiles,%ecx
		add    %eax,%ecx
		mov    0x20(%ecx),%al
		mov    %al,EXPORT_SYMBOL(vec_colour)
		mov    0x21(%ecx),%al
		mov    %al,EXPORT_SYMBOL(vec_mode)
		xor    %eax,%eax
		mov    0x21(%ecx),%al
		cmp    $0x5,%eax
		je     jump_22cc2
		cmp    $0x15,%eax
		jne    jump_22d78
	jump_22cc2:
		cmpb   $0x0,EXPORT_SYMBOL(byte_19EC6F)
		jne    jump_22ce7
		xor    %eax,%eax
		mov    0x21(%ecx),%al
		cmp    $0x5,%eax
		jne    jump_22cde
		movb   $0x2,EXPORT_SYMBOL(vec_mode)
		jmp    jump_22cfb
	jump_22cde:
		movb   $0x13,EXPORT_SYMBOL(vec_mode)
		jmp    jump_22cfb
	jump_22ce7:
		xor    %eax,%eax
		mov    current_map,%ax
		cmp    $0xb,%eax
		jne    jump_22cfb
		movb   $0x6,EXPORT_SYMBOL(vec_mode)
	jump_22cfb:
		mov    0x10(%ecx),%eax
		xor    %edx,%edx
		mov    0x8(%eax),%dl
		mov    EXPORT_SYMBOL(vec_tmap)(,%edx,4),%edx
		mov    %edx,EXPORT_SYMBOL(vec_map)
		xor    %edx,%edx
		mov    (%eax),%dl
		shl    $0x10,%edx
		mov    %edx,0x58(%esp)
		xor    %edx,%edx
		mov    0x1(%eax),%dl
		shl    $0x10,%edx
		mov    %edx,0x5c(%esp)
		xor    %edx,%edx
		mov    0x4(%eax),%dl
		shl    $0x10,%edx
		mov    %edx,0x8(%esp)
		xor    %edx,%edx
		mov    0x5(%eax),%dl
		shl    $0x10,%edx
		mov    %edx,0xc(%esp)
		xor    %edx,%edx
		mov    0x6(%eax),%dl
		shl    $0x10,%edx
		mov    %edx,0x30(%esp)
		xor    %edx,%edx
		mov    0x7(%eax),%dl
		shl    $0x10,%edx
		mov    %edx,0x34(%esp)
		xor    %edx,%edx
		mov    0x2(%eax),%dl
		shl    $0x10,%edx
		mov    %edx,0x80(%esp)
		mov    0x3(%eax),%al
		and    $0xff,%eax
		shl    $0x10,%eax
		mov    %eax,0x84(%esp)
	jump_22d78:
		movswl (%ecx),%eax
		mov    %eax,0x28(%esp)
		mov    0x6(%ecx),%eax
		sar    $0x10,%eax
		mov    %eax,0x2c(%esp)
		xor    %eax,%eax
		mov    0x18(%ecx),%ax
		shl    $0x7,%eax
		mov    %eax,0x38(%esp)
		mov    0x4(%ecx),%eax
		sar    $0x10,%eax
		mov    %eax,0x50(%esp)
		mov    0xc(%ecx),%eax
		sar    $0x10,%eax
		mov    %eax,0x54(%esp)
		xor    %eax,%eax
		mov    0x1e(%ecx),%ax
		shl    $0x7,%eax
		mov    %eax,0x60(%esp)
		mov    (%ecx),%eax
		sar    $0x10,%eax
		mov    %eax,(%esp)
		mov    0x8(%ecx),%eax
		sar    $0x10,%eax
		mov    %eax,0x4(%esp)
		xor    %eax,%eax
		mov    0x1a(%ecx),%ax
		shl    $0x7,%eax
		mov    %eax,0x10(%esp)
		xor    %eax,%eax
		mov    game_perspective,%al
		cmp    $0x7,%eax
		jne    jump_22df6
		mov    0x10(%esp),%eax
		mov    $0x7,%bh
		sar    $0x10,%eax
		mov    %bh,EXPORT_SYMBOL(vec_mode)
		mov    %al,EXPORT_SYMBOL(vec_colour)
	jump_22df6:
		mov    0x4(%esp),%ebx
		mov    0x54(%esp),%esi
		mov    0x2c(%esp),%edi
		mov    (%esp),%eax
		mov    0x50(%esp),%ebp
		sub    %esi,%ebx
		sub    %ebp,%eax
		sub    %edi,%esi
		imul   %eax,%esi
		mov    %ebp,%edi
		mov    0x28(%esp),%ebp
		sub    %ebp,%edi
		mov    %edi,%eax
		imul   %ebx,%eax
		xor    %edx,%edx
		mov    game_perspective,%dl
		sub    %esi,%eax
		cmp    $0x3,%edx
		je     jump_22e4f
		test   %eax,%eax
		setg   %al
		xor    %ah,%ah
		test   %ax,%ax
		je     jump_22e7d
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_22e6e
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
		jmp    jump_22e6e
	jump_22e4f:
		test   %eax,%eax
		setg   %al
		xor    %ah,%ah
		test   %ax,%ax
		je     jump_22e7d
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_22e6e
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_22e6e:
		mov    %esp,%ebx
		lea    0x50(%esp),%edx
		lea    0x28(%esp),%eax
		call   ac_draw_trigpoly
	jump_22e7d:
		mov    0x2(%ecx),%eax
		sar    $0x10,%eax
		mov    %eax,0x78(%esp)
		mov    0xa(%ecx),%eax
		sar    $0x10,%eax
		mov    %eax,0x7c(%esp)
		xor    %eax,%eax
		mov    0x54(%esp),%ebx
		mov    0x1c(%ecx),%ax
		mov    0x4(%esp),%edi
		shl    $0x7,%eax
		mov    0x50(%esp),%ebp
		mov    %eax,0x88(%esp)
		mov    0x7c(%esp),%eax
		mov    %ebx,%esi
		sub    %ebx,%eax
		mov    0x78(%esp),%ebx
		sub    %edi,%esi
		sub    %ebp,%ebx
		imul   %esi,%ebx
		mov    %ebp,%edi
		sub    (%esp),%edi
		imul   %edi,%eax
		xor    %edx,%edx
		mov    game_perspective,%dl
		sub    %ebx,%eax
		cmp    $0x3,%edx
		je     jump_22ef8
		test   %eax,%eax
		setg   %al
		xor    %ah,%ah
		test   %ax,%ax
		je     jump_22f26
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_22f17
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
		jmp    jump_22f17
	jump_22ef8:
		test   %eax,%eax
		setg   %al
		xor    %ah,%ah
		test   %ax,%ax
		je     jump_22f26
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_22f17
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_22f17:
		lea    0x78(%esp),%ebx
		lea    0x50(%esp),%edx
		mov    %esp,%eax
		call   ac_draw_trigpoly
	jump_22f26:
		mov    0x24(%ecx),%bl
		test   %bl,%bl
		jne    jump_23665
	jump_22f31:
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		add    $0xa0,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_22f45:
/*----------------------------------------------------------------*/
		mov    $0x6,%dh
		mov    $0x400000,%ebx
		mov    $0x5f0000,%esi
		mov    EXPORT_SYMBOL(vec_tmap)+16,%eax
		mov    $0xbf0000,%edi
		mov    %eax,EXPORT_SYMBOL(vec_map)
		mov    %dh,EXPORT_SYMBOL(vec_mode)
		mov    %ebx,0x34(%esp)
		mov    %esi,0x5c(%esp)
		mov    %edi,0x8(%esp)
		mov    %ebx,0xc(%esp)
		mov    %edi,0x80(%esp)
		mov    $0xa00000,%edx
		mov    %esp,%ebx
		lea    0x28(%esp),%eax
		mov    %edx,0x30(%esp)
		mov    %edx,0x58(%esp)
		lea    0x50(%esp),%edx
		mov    %esi,0x84(%esp)
		call   ac_draw_trigpoly
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_22fb3
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_22fb3:
		lea    0x78(%esp),%ebx
		lea    0x50(%esp),%edx
		mov    %esp,%eax
		call   ac_draw_trigpoly
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		add    $0xa0,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_22fdd:
/*----------------------------------------------------------------*/
		mov    $0x9f0000,%ebp
		mov    $0x5f0000,%ebx
		mov    $0x800000,%ecx
		mov    EXPORT_SYMBOL(vec_tmap)+16,%eax
		lea    0x50(%esp),%edx
		mov    %eax,EXPORT_SYMBOL(vec_map)
		mov    %ebp,0x30(%esp)
		mov    %ebp,0x58(%esp)
		mov    %ebx,0x5c(%esp)
		mov    %ecx,0x8(%esp)
		mov    $0x6,%ah
		mov    %ebx,0x84(%esp)
		mov    %ah,EXPORT_SYMBOL(vec_mode)
		mov    $0x400000,%eax
		mov    %esp,%ebx
		mov    %eax,0x34(%esp)
		mov    %eax,0xc(%esp)
		lea    0x28(%esp),%eax
		mov    %ecx,0x80(%esp)
		call   ac_draw_trigpoly
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_2304b
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_2304b:
		lea    0x78(%esp),%ebx
		lea    0x50(%esp),%edx
		mov    %esp,%eax
		call   ac_draw_trigpoly
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		add    $0xa0,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_23075:
/*----------------------------------------------------------------*/
		mov    $0x6,%ch
		mov    $0xdf0000,%esi
		mov    $0x400000,%edi
		mov    $0xc00000,%edx
		mov    EXPORT_SYMBOL(vec_tmap)+16,%eax
		mov    %esp,%ebx
		mov    %eax,EXPORT_SYMBOL(vec_map)
		mov    %ch,EXPORT_SYMBOL(vec_mode)
		mov    %esi,0x30(%esp)
		mov    %edi,0x34(%esp)
		mov    %esi,0x58(%esp)
		mov    %edx,0x8(%esp)
		mov    %edx,0x80(%esp)
		mov    $0x5f0000,%eax
		lea    0x50(%esp),%edx
		mov    %eax,0x5c(%esp)
		mov    %eax,0x84(%esp)
		lea    0x28(%esp),%eax
		mov    %edi,0xc(%esp)
		call   ac_draw_trigpoly
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_230e3
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_230e3:
		lea    0x78(%esp),%ebx
		lea    0x50(%esp),%edx
		mov    %esp,%eax
		call   ac_draw_trigpoly
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		add    $0xa0,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_2310d:
/*----------------------------------------------------------------*/
		mov    $0x6,%bh
		mov    $0x400000,%ecx
		mov    $0x5f0000,%edi
		mov    $0xbf0000,%ebp
		mov    EXPORT_SYMBOL(vec_tmap)+16,%eax
		lea    0x50(%esp),%edx
		mov    %eax,EXPORT_SYMBOL(vec_map)
		mov    %bh,EXPORT_SYMBOL(vec_mode)
		mov    %ecx,0xc(%esp)
		mov    %edi,0x34(%esp)
		mov    %ebp,0x80(%esp)
		mov    %ecx,0x84(%esp)
		mov    %ebp,0x58(%esp)
		mov    $0xa00000,%ebx
		lea    0x28(%esp),%eax
		mov    %ebx,0x8(%esp)
		mov    %ebx,0x30(%esp)
		mov    %esp,%ebx
		mov    %edi,0x5c(%esp)
		call   ac_draw_trigpoly
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_2317b
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_2317b:
		lea    0x78(%esp),%ebx
		lea    0x50(%esp),%edx
		mov    %esp,%eax
		call   ac_draw_trigpoly
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		add    $0xa0,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_231a5:
/*----------------------------------------------------------------*/
		mov    $0x6,%dh
		mov    $0x400000,%ecx
		mov    $0x800000,%esi
		mov    EXPORT_SYMBOL(vec_tmap)+16,%eax
		mov    %esp,%ebx
		mov    %eax,EXPORT_SYMBOL(vec_map)
		mov    %dh,EXPORT_SYMBOL(vec_mode)
		mov    %ecx,0x5c(%esp)
		mov    %esi,0x8(%esp)
		mov    %esi,0x80(%esp)
		mov    $0x9f0000,%eax
		mov    $0x5f0000,%edx
		mov    %eax,0x30(%esp)
		mov    %edx,0x34(%esp)
		mov    %eax,0x58(%esp)
		mov    %edx,0xc(%esp)
		lea    0x50(%esp),%edx
		lea    0x28(%esp),%eax
		mov    %ecx,0x84(%esp)
		call   ac_draw_trigpoly
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_23213
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_23213:
		lea    0x78(%esp),%ebx
		lea    0x50(%esp),%edx
		mov    %esp,%eax
		call   ac_draw_trigpoly
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		add    $0xa0,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_2323d:
/*----------------------------------------------------------------*/
		mov    $0xdf0000,%edi
		mov    $0x5f0000,%ebp
		mov    $0x400000,%edx
		mov    EXPORT_SYMBOL(vec_tmap)+16,%eax
		mov    $0xc00000,%ebx
		mov    %eax,EXPORT_SYMBOL(vec_map)
		mov    %edi,0x30(%esp)
		mov    %ebp,0x34(%esp)
		mov    %edi,0x58(%esp)
		mov    %edx,0x5c(%esp)
		mov    %ebx,0x8(%esp)
		mov    %ebx,0x80(%esp)
		mov    %edx,0x84(%esp)
		mov    $0x6,%ah
		mov    %esp,%ebx
		lea    0x50(%esp),%edx
		mov    %ah,EXPORT_SYMBOL(vec_mode)
		lea    0x28(%esp),%eax
		mov    %ebp,0xc(%esp)
		call   ac_draw_trigpoly
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_232ab
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_232ab:
		lea    0x78(%esp),%ebx
		lea    0x50(%esp),%edx
		mov    %esp,%eax
		call   ac_draw_trigpoly
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		add    $0xa0,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_232d5:
/*----------------------------------------------------------------*/
		mov    $0x6,%ch
		mov    $0x400000,%esi
		mov    $0x5f0000,%ebp
		mov    %esp,%ebx
		mov    EXPORT_SYMBOL(vec_tmap)+16,%eax
		lea    0x50(%esp),%edx
		mov    %eax,EXPORT_SYMBOL(vec_map)
		mov    %ch,EXPORT_SYMBOL(vec_mode)
		mov    %esi,0x84(%esp)
		mov    %ebp,0xc(%esp)
		mov    %esi,0x5c(%esp)
		mov    %ebp,0x34(%esp)
		mov    $0xa00000,%ecx
		mov    $0xbf0000,%eax
		mov    %ecx,0x80(%esp)
		mov    %eax,0x58(%esp)
		mov    %eax,0x30(%esp)
		lea    0x28(%esp),%eax
		mov    %ecx,0x8(%esp)
		call   ac_draw_trigpoly
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_23343
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_23343:
		lea    0x78(%esp),%ebx
		lea    0x50(%esp),%edx
		mov    %esp,%eax
		call   ac_draw_trigpoly
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		add    $0xa0,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_2336d:
/*----------------------------------------------------------------*/
		mov    $0x6,%bh
		mov    $0x800000,%edx
		mov    $0x400000,%esi
		mov    EXPORT_SYMBOL(vec_tmap)+16,%eax
		mov    $0x9f0000,%edi
		mov    %eax,EXPORT_SYMBOL(vec_map)
		mov    %bh,EXPORT_SYMBOL(vec_mode)
		mov    %edx,0x30(%esp)
		mov    %edx,0x58(%esp)
		mov    %esi,0x5c(%esp)
		mov    %edi,0x8(%esp)
		mov    %edi,0x80(%esp)
		mov    $0x5f0000,%ebx
		lea    0x50(%esp),%edx
		lea    0x28(%esp),%eax
		mov    %ebx,0x34(%esp)
		mov    %ebx,0xc(%esp)
		mov    %esp,%ebx
		mov    %esi,0x84(%esp)
		call   ac_draw_trigpoly
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_233db
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_233db:
		lea    0x78(%esp),%ebx
		lea    0x50(%esp),%edx
		mov    %esp,%eax
		call   ac_draw_trigpoly
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		add    $0xa0,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_23405:
/*----------------------------------------------------------------*/
		mov    $0x6,%dh
		mov    $0xc00000,%ebp
		mov    $0x400000,%ebx
		mov    EXPORT_SYMBOL(vec_tmap)+16,%eax
		mov    $0xdf0000,%ecx
		mov    %eax,EXPORT_SYMBOL(vec_map)
		mov    %dh,EXPORT_SYMBOL(vec_mode)
		mov    %ebp,0x30(%esp)
		mov    %ebp,0x58(%esp)
		mov    %ebx,0x5c(%esp)
		mov    %ecx,0x8(%esp)
		mov    %ebx,0x84(%esp)
		mov    $0x5f0000,%eax
		mov    %esp,%ebx
		lea    0x50(%esp),%edx
		mov    %eax,0x34(%esp)
		mov    %eax,0xc(%esp)
		lea    0x28(%esp),%eax
		mov    %ecx,0x80(%esp)
		call   ac_draw_trigpoly
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_23473
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_23473:
		lea    0x78(%esp),%ebx
		lea    0x50(%esp),%edx
		mov    %esp,%eax
		call   ac_draw_trigpoly
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		add    $0xa0,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_2349d:
/*----------------------------------------------------------------*/
		mov    $0xa00000,%esi
		mov    $0x400000,%edi
		mov    $0xbf0000,%edx
		mov    EXPORT_SYMBOL(vec_tmap)+16,%eax
		mov    %esp,%ebx
		mov    %eax,EXPORT_SYMBOL(vec_map)
		mov    %esi,0x58(%esp)
		mov    %edi,0x5c(%esp)
		mov    %esi,0x80(%esp)
		mov    %edx,0x30(%esp)
		mov    $0x6,%ah
		mov    %edx,0x8(%esp)
		mov    %ah,EXPORT_SYMBOL(vec_mode)
		mov    $0x5f0000,%eax
		lea    0x50(%esp),%edx
		mov    %eax,0x84(%esp)
		mov    %eax,0xc(%esp)
		lea    0x28(%esp),%eax
		mov    %edi,0x34(%esp)
		call   ac_draw_trigpoly
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_2350b
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_2350b:
		lea    0x78(%esp),%ebx
		lea    0x50(%esp),%edx
		mov    %esp,%eax
		call   ac_draw_trigpoly
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		add    $0xa0,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_23535:
/*----------------------------------------------------------------*/
		mov    $0x6,%ch
		mov    $0x800000,%ebx
		mov    $0x5f0000,%edi
		mov    $0x9f0000,%ebp
		mov    EXPORT_SYMBOL(vec_tmap)+16,%eax
		lea    0x50(%esp),%edx
		mov    %eax,EXPORT_SYMBOL(vec_map)
		mov    %ch,EXPORT_SYMBOL(vec_mode)
		mov    %ebx,0x30(%esp)
		mov    %ebx,0x58(%esp)
		mov    %edi,0x5c(%esp)
		mov    %ebp,0x8(%esp)
		mov    %ebp,0x80(%esp)
		mov    %edi,0x84(%esp)
		mov    $0x400000,%ecx
		mov    %esp,%ebx
		lea    0x28(%esp),%eax
		mov    %ecx,0x34(%esp)
		mov    %ecx,0xc(%esp)
		call   ac_draw_trigpoly
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_235a3
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_235a3:
		lea    0x78(%esp),%ebx
		lea    0x50(%esp),%edx
		mov    %esp,%eax
		call   ac_draw_trigpoly
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		add    $0xa0,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_235cd:
/*----------------------------------------------------------------*/
		mov    $0x6,%bh
		mov    $0x400000,%edx
		mov    $0x5f0000,%ecx
		mov    EXPORT_SYMBOL(vec_tmap)+16,%eax
		mov    $0xdf0000,%esi
		mov    %eax,EXPORT_SYMBOL(vec_map)
		mov    %bh,EXPORT_SYMBOL(vec_mode)
		mov    %edx,0x34(%esp)
		mov    %ecx,0x5c(%esp)
		mov    %esi,0x8(%esp)
		mov    %edx,0xc(%esp)
		mov    %esi,0x80(%esp)
		mov    $0xc00000,%eax
		mov    %esp,%ebx
		lea    0x50(%esp),%edx
		mov    %eax,0x30(%esp)
		mov    %eax,0x58(%esp)
		lea    0x28(%esp),%eax
		mov    %ecx,0x84(%esp)
		call   ac_draw_trigpoly
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_2363b
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_2363b:
		lea    0x78(%esp),%ebx
		lea    0x50(%esp),%edx
		mov    %esp,%eax
		call   ac_draw_trigpoly
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		add    $0xa0,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_23665:
		mov    %bl,%al
		dec    %al
		cmp    $0xb,%al
		ja     jump_22f31
		and    $0xff,%eax
		jmp    *%cs:vtable_22c48(,%eax,4)

vtable_23680:
		.long   func_2396b
		.long   func_239f6
		.long   func_23a81
		.long   func_23b0c
		.long   func_23b97
		.long   func_23c22
		.long   func_23cad
		.long   func_23d38
		.long   func_23dc3
		.long   func_23e4e
		.long   func_23ed9
		.long   func_23f64

vtable_236b0:
		.long   func_24008
		.long   func_240a2
		.long   func_2413b
		.long   func_241d5
		.long   func_2426f
		.long   func_24309
		.long   func_243a2
		.long   func_2443c
		.long   func_244d6
		.long   func_24570
		.long   func_24609
		.long   func_246a3


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_floor_tile1b)	/* 0x0236E0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xa0,%esp
		xor    %ecx,%ecx
		mov    %ax,%cx
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		shl    $0x3,%eax
		sub    %ecx,%eax
		mov    game_floor_tiles,%ecx
		add    %eax,%ecx
		mov    0x20(%ecx),%al
		mov    %al,EXPORT_SYMBOL(vec_colour)
		mov    0x21(%ecx),%al
		mov    %al,EXPORT_SYMBOL(vec_mode)
		xor    %eax,%eax
		mov    0x21(%ecx),%al
		cmp    $0x5,%eax
		je     jump_2372a
		cmp    $0x15,%eax
		jne    jump_237e0
	jump_2372a:
		cmpb   $0x0,EXPORT_SYMBOL(byte_19EC6F)
		jne    jump_2374f
		xor    %eax,%eax
		mov    0x21(%ecx),%al
		cmp    $0x5,%eax
		jne    jump_23746
		movb   $0x2,EXPORT_SYMBOL(vec_mode)
		jmp    jump_23763
	jump_23746:
		movb   $0x13,EXPORT_SYMBOL(vec_mode)
		jmp    jump_23763
	jump_2374f:
		xor    %eax,%eax
		mov    current_map,%ax
		cmp    $0xb,%eax
		jne    jump_23763
		movb   $0x6,EXPORT_SYMBOL(vec_mode)
	jump_23763:
		mov    0x10(%ecx),%eax
		xor    %edx,%edx
		mov    0x8(%eax),%dl
		mov    EXPORT_SYMBOL(vec_tmap)(,%edx,4),%edx
		mov    %edx,EXPORT_SYMBOL(vec_map)
		xor    %edx,%edx
		mov    (%eax),%dl
		shl    $0x10,%edx
		mov    %edx,0x8(%esp)
		xor    %edx,%edx
		mov    0x1(%eax),%dl
		shl    $0x10,%edx
		mov    %edx,0xc(%esp)
		xor    %edx,%edx
		mov    0x4(%eax),%dl
		shl    $0x10,%edx
		mov    %edx,0x80(%esp)
		xor    %edx,%edx
		mov    0x5(%eax),%dl
		shl    $0x10,%edx
		mov    %edx,0x84(%esp)
		xor    %edx,%edx
		mov    0x6(%eax),%dl
		shl    $0x10,%edx
		mov    %edx,0x30(%esp)
		xor    %edx,%edx
		mov    0x7(%eax),%dl
		shl    $0x10,%edx
		mov    %edx,0x34(%esp)
		xor    %edx,%edx
		mov    0x2(%eax),%dl
		shl    $0x10,%edx
		mov    %edx,0x58(%esp)
		mov    0x3(%eax),%al
		and    $0xff,%eax
		shl    $0x10,%eax
		mov    %eax,0x5c(%esp)
	jump_237e0:
		movswl (%ecx),%eax
		mov    %eax,0x28(%esp)
		mov    0x6(%ecx),%eax
		sar    $0x10,%eax
		mov    %eax,0x2c(%esp)
		xor    %eax,%eax
		mov    0x18(%ecx),%ax
		shl    $0x7,%eax
		mov    %eax,0x38(%esp)
		mov    0x4(%ecx),%eax
		sar    $0x10,%eax
		mov    %eax,(%esp)
		mov    0xc(%ecx),%eax
		sar    $0x10,%eax
		mov    %eax,0x4(%esp)
		xor    %eax,%eax
		mov    0x1e(%ecx),%ax
		shl    $0x7,%eax
		mov    %eax,0x10(%esp)
		mov    (%ecx),%eax
		sar    $0x10,%eax
		mov    %eax,0x78(%esp)
		mov    0x8(%ecx),%eax
		sar    $0x10,%eax
		mov    %eax,0x7c(%esp)
		xor    %eax,%eax
		mov    0x1a(%ecx),%ax
		shl    $0x7,%eax
		mov    %eax,0x88(%esp)
		mov    0x2(%ecx),%eax
		sar    $0x10,%eax
		mov    %eax,0x50(%esp)
		mov    0xa(%ecx),%eax
		sar    $0x10,%eax
		mov    %eax,0x54(%esp)
		xor    %eax,%eax
		mov    0x1c(%ecx),%ax
		shl    $0x7,%eax
		mov    %eax,0x60(%esp)
		xor    %eax,%eax
		mov    game_perspective,%al
		cmp    $0x7,%eax
		jne    jump_23885
		mov    0x88(%esp),%eax
		mov    $0x7,%bh
		sar    $0x10,%eax
		mov    %bh,EXPORT_SYMBOL(vec_mode)
		mov    %al,EXPORT_SYMBOL(vec_colour)
	jump_23885:
		mov    (%esp),%edx
		mov    0x28(%esp),%ebx
		mov    0x54(%esp),%eax
		mov    0x4(%esp),%ebp
		sub    %ebx,%edx
		sub    %ebp,%eax
		imul   %edx,%eax
		mov    (%esp),%esi
		mov    0x50(%esp),%ebx
		mov    0x2c(%esp),%edi
		sub    %esi,%ebx
		mov    0x4(%esp),%esi
		sub    %edi,%esi
		imul   %esi,%ebx
		sub    %ebx,%eax
		test   %eax,%eax
		setg   %al
		xor    %ah,%ah
		test   %ax,%ax
		je     jump_238e1
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_238d2
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_238d2:
		lea    0x50(%esp),%ebx
		mov    %esp,%edx
		lea    0x28(%esp),%eax
		call   ac_draw_trigpoly
	jump_238e1:
		mov    0x78(%esp),%edx
		mov    0x50(%esp),%eax
		mov    0x7c(%esp),%ebp
		sub    %eax,%edx
		mov    0x2c(%esp),%eax
		sub    %ebp,%eax
		imul   %edx,%eax
		mov    0x28(%esp),%ebx
		mov    0x78(%esp),%esi
		mov    0x54(%esp),%edi
		sub    %esi,%ebx
		mov    0x7c(%esp),%esi
		sub    %edi,%esi
		imul   %esi,%ebx
		sub    %ebx,%eax
		test   %eax,%eax
		setg   %al
		xor    %ah,%ah
		test   %ax,%ax
		je     jump_23941
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_23930
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_23930:
		lea    0x28(%esp),%ebx
		lea    0x78(%esp),%edx
		lea    0x50(%esp),%eax
		call   ac_draw_trigpoly
	jump_23941:
		mov    0x24(%ecx),%dl
		test   %dl,%dl
		jne    jump_23fef
	jump_2394c:
		mov    0x24(%ecx),%dh
		test   %dh,%dh
		jne    jump_2473d
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		add    $0xa0,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_2396b:
/*----------------------------------------------------------------*/
		mov    $0xa00000,%esi
		mov    $0x400000,%edi
		mov    $0xbf0000,%edx
		mov    EXPORT_SYMBOL(vec_tmap)+16,%eax
		lea    0x50(%esp),%ebx
		mov    %eax,EXPORT_SYMBOL(vec_map)
		mov    %esi,0x30(%esp)
		mov    %edi,0x34(%esp)
		mov    %esi,0x8(%esp)
		mov    %edx,0x80(%esp)
		mov    $0x6,%ah
		mov    %edx,0x58(%esp)
		mov    %ah,EXPORT_SYMBOL(vec_mode)
		mov    $0x5f0000,%eax
		mov    %esp,%edx
		mov    %eax,0xc(%esp)
		mov    %eax,0x5c(%esp)
		lea    0x28(%esp),%eax
		mov    %edi,0x84(%esp)
		call   ac_draw_trigpoly
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_239d9
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_239d9:
		lea    0x28(%esp),%ebx
		lea    0x78(%esp),%edx
		lea    0x50(%esp),%eax
		call   ac_draw_trigpoly
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		jmp    jump_2394c


/*----------------------------------------------------------------*/
func_239f6:
/*----------------------------------------------------------------*/
		mov    $0x6,%bh
		mov    $0x400000,%edx
		mov    $0x5f0000,%esi
		mov    EXPORT_SYMBOL(vec_tmap)+16,%eax
		mov    $0x800000,%edi
		mov    %eax,EXPORT_SYMBOL(vec_map)
		mov    %bh,EXPORT_SYMBOL(vec_mode)
		mov    %edx,0x34(%esp)
		mov    %esi,0xc(%esp)
		mov    %edi,0x80(%esp)
		mov    %edx,0x84(%esp)
		mov    %edi,0x58(%esp)
		mov    $0x9f0000,%eax
		lea    0x50(%esp),%ebx
		mov    %esp,%edx
		mov    %eax,0x30(%esp)
		mov    %eax,0x8(%esp)
		lea    0x28(%esp),%eax
		mov    %esi,0x5c(%esp)
		call   ac_draw_trigpoly
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_23a64
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_23a64:
		lea    0x28(%esp),%ebx
		lea    0x78(%esp),%edx
		lea    0x50(%esp),%eax
		call   ac_draw_trigpoly
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		jmp    jump_2394c


/*----------------------------------------------------------------*/
func_23a81:
/*----------------------------------------------------------------*/
		mov    $0x6,%dh
		mov    $0xdf0000,%esi
		mov    $0x400000,%edi
		mov    EXPORT_SYMBOL(vec_tmap)+16,%eax
		lea    0x50(%esp),%ebx
		mov    %eax,EXPORT_SYMBOL(vec_map)
		mov    %dh,EXPORT_SYMBOL(vec_mode)
		mov    %esi,0x30(%esp)
		mov    %edi,0x34(%esp)
		mov    %esi,0x8(%esp)
		mov    $0x5f0000,%eax
		mov    $0xc00000,%edx
		mov    %eax,0xc(%esp)
		mov    %edx,0x80(%esp)
		mov    %edx,0x58(%esp)
		mov    %eax,0x5c(%esp)
		mov    %esp,%edx
		lea    0x28(%esp),%eax
		mov    %edi,0x84(%esp)
		call   ac_draw_trigpoly
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_23aef
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_23aef:
		lea    0x28(%esp),%ebx
		lea    0x78(%esp),%edx
		lea    0x50(%esp),%eax
		call   ac_draw_trigpoly
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		jmp    jump_2394c


/*----------------------------------------------------------------*/
func_23b0c:
/*----------------------------------------------------------------*/
		mov    $0x400000,%edx
		mov    $0x5f0000,%esi
		mov    $0xbf0000,%edi
		mov    EXPORT_SYMBOL(vec_tmap)+16,%eax
		lea    0x50(%esp),%ebx
		mov    %eax,EXPORT_SYMBOL(vec_map)
		mov    %edx,0x84(%esp)
		mov    %esi,0x34(%esp)
		mov    %edi,0x58(%esp)
		mov    %edx,0x5c(%esp)
		mov    $0x6,%ah
		mov    %edi,0x8(%esp)
		mov    %ah,EXPORT_SYMBOL(vec_mode)
		mov    $0xa00000,%eax
		mov    %esp,%edx
		mov    %eax,0x80(%esp)
		mov    %eax,0x30(%esp)
		lea    0x28(%esp),%eax
		mov    %esi,0xc(%esp)
		call   ac_draw_trigpoly
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_23b7a
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_23b7a:
		lea    0x28(%esp),%ebx
		lea    0x78(%esp),%edx
		lea    0x50(%esp),%eax
		call   ac_draw_trigpoly
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		jmp    jump_2394c


/*----------------------------------------------------------------*/
func_23b97:
/*----------------------------------------------------------------*/
		mov    $0x6,%bh
		mov    $0x9f0000,%esi
		mov    $0x5f0000,%edi
		mov    EXPORT_SYMBOL(vec_tmap)+16,%eax
		mov    $0x800000,%edx
		mov    %eax,EXPORT_SYMBOL(vec_map)
		mov    %bh,EXPORT_SYMBOL(vec_mode)
		mov    %esi,0x30(%esp)
		mov    %edi,0x34(%esp)
		mov    %esi,0x8(%esp)
		mov    %edx,0x80(%esp)
		mov    %edx,0x58(%esp)
		mov    $0x400000,%eax
		lea    0x50(%esp),%ebx
		mov    %esp,%edx
		mov    %eax,0xc(%esp)
		mov    %eax,0x5c(%esp)
		lea    0x28(%esp),%eax
		mov    %edi,0x84(%esp)
		call   ac_draw_trigpoly
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_23c05
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_23c05:
		lea    0x28(%esp),%ebx
		lea    0x78(%esp),%edx
		lea    0x50(%esp),%eax
		call   ac_draw_trigpoly
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		jmp    jump_2394c


/*----------------------------------------------------------------*/
func_23c22:
/*----------------------------------------------------------------*/
		mov    $0x6,%dh
		mov    $0x400000,%esi
		mov    $0xc00000,%edi
		mov    EXPORT_SYMBOL(vec_tmap)+16,%eax
		lea    0x50(%esp),%ebx
		mov    %eax,EXPORT_SYMBOL(vec_map)
		mov    %dh,EXPORT_SYMBOL(vec_mode)
		mov    %esi,0xc(%esp)
		mov    %edi,0x80(%esp)
		mov    %edi,0x58(%esp)
		mov    $0xdf0000,%eax
		mov    $0x5f0000,%edx
		mov    %eax,0x30(%esp)
		mov    %edx,0x34(%esp)
		mov    %eax,0x8(%esp)
		mov    %edx,0x84(%esp)
		mov    %esp,%edx
		lea    0x28(%esp),%eax
		mov    %esi,0x5c(%esp)
		call   ac_draw_trigpoly
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_23c90
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_23c90:
		lea    0x28(%esp),%ebx
		lea    0x78(%esp),%edx
		lea    0x50(%esp),%eax
		call   ac_draw_trigpoly
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		jmp    jump_2394c


/*----------------------------------------------------------------*/
func_23cad:
/*----------------------------------------------------------------*/
		mov    $0xa00000,%esi
		mov    $0x400000,%edi
		mov    $0xbf0000,%edx
		mov    EXPORT_SYMBOL(vec_tmap)+16,%eax
		lea    0x50(%esp),%ebx
		mov    %eax,EXPORT_SYMBOL(vec_map)
		mov    %esi,0x58(%esp)
		mov    %edi,0x5c(%esp)
		mov    %esi,0x80(%esp)
		mov    %edx,0x8(%esp)
		mov    $0x6,%ah
		mov    %edx,0x30(%esp)
		mov    %ah,EXPORT_SYMBOL(vec_mode)
		mov    $0x5f0000,%eax
		mov    %esp,%edx
		mov    %eax,0x84(%esp)
		mov    %eax,0x34(%esp)
		lea    0x28(%esp),%eax
		mov    %edi,0xc(%esp)
		call   ac_draw_trigpoly
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_23d1b
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_23d1b:
		lea    0x28(%esp),%ebx
		lea    0x78(%esp),%edx
		lea    0x50(%esp),%eax
		call   ac_draw_trigpoly
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		jmp    jump_2394c


/*----------------------------------------------------------------*/
func_23d38:
/*----------------------------------------------------------------*/
		mov    $0x6,%bh
		mov    $0x5f0000,%edx
		mov    $0x400000,%esi
		mov    EXPORT_SYMBOL(vec_tmap)+16,%eax
		mov    $0x9f0000,%edi
		mov    %eax,EXPORT_SYMBOL(vec_map)
		mov    %bh,EXPORT_SYMBOL(vec_mode)
		mov    %edx,0x34(%esp)
		mov    %esi,0xc(%esp)
		mov    %edi,0x80(%esp)
		mov    %edx,0x84(%esp)
		mov    %edi,0x58(%esp)
		mov    $0x800000,%eax
		lea    0x50(%esp),%ebx
		mov    %esp,%edx
		mov    %eax,0x30(%esp)
		mov    %eax,0x8(%esp)
		lea    0x28(%esp),%eax
		mov    %esi,0x5c(%esp)
		call   ac_draw_trigpoly
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_23da6
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_23da6:
		lea    0x28(%esp),%ebx
		lea    0x78(%esp),%edx
		lea    0x50(%esp),%eax
		call   ac_draw_trigpoly
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		jmp    jump_2394c


/*----------------------------------------------------------------*/
func_23dc3:
/*----------------------------------------------------------------*/
		mov    $0x6,%dh
		mov    $0xc00000,%esi
		mov    $0x5f0000,%edi
		mov    EXPORT_SYMBOL(vec_tmap)+16,%eax
		lea    0x50(%esp),%ebx
		mov    %eax,EXPORT_SYMBOL(vec_map)
		mov    %dh,EXPORT_SYMBOL(vec_mode)
		mov    %esi,0x30(%esp)
		mov    %edi,0x34(%esp)
		mov    %esi,0x8(%esp)
		mov    $0x400000,%eax
		mov    $0xdf0000,%edx
		mov    %eax,0xc(%esp)
		mov    %edx,0x80(%esp)
		mov    %edx,0x58(%esp)
		mov    %eax,0x5c(%esp)
		mov    %esp,%edx
		lea    0x28(%esp),%eax
		mov    %edi,0x84(%esp)
		call   ac_draw_trigpoly
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_23e31
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_23e31:
		lea    0x28(%esp),%ebx
		lea    0x78(%esp),%edx
		lea    0x50(%esp),%eax
		call   ac_draw_trigpoly
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		jmp    jump_2394c


/*----------------------------------------------------------------*/
func_23e4e:
/*----------------------------------------------------------------*/
		mov    $0x400000,%edx
		mov    $0x5f0000,%esi
		mov    $0xbf0000,%edi
		mov    EXPORT_SYMBOL(vec_tmap)+16,%eax
		lea    0x50(%esp),%ebx
		mov    %eax,EXPORT_SYMBOL(vec_map)
		mov    %edx,0xc(%esp)
		mov    %esi,0x5c(%esp)
		mov    %edi,0x30(%esp)
		mov    %edx,0x34(%esp)
		mov    $0x6,%ah
		mov    %edi,0x80(%esp)
		mov    %ah,EXPORT_SYMBOL(vec_mode)
		mov    $0xa00000,%eax
		mov    %esp,%edx
		mov    %eax,0x8(%esp)
		mov    %eax,0x58(%esp)
		lea    0x28(%esp),%eax
		mov    %esi,0x84(%esp)
		call   ac_draw_trigpoly
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_23ebc
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_23ebc:
		lea    0x28(%esp),%ebx
		lea    0x78(%esp),%edx
		lea    0x50(%esp),%eax
		call   ac_draw_trigpoly
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		jmp    jump_2394c


/*----------------------------------------------------------------*/
func_23ed9:
/*----------------------------------------------------------------*/
		mov    $0x6,%bh
		mov    $0x800000,%esi
		mov    $0x400000,%edi
		mov    EXPORT_SYMBOL(vec_tmap)+16,%eax
		mov    $0x9f0000,%edx
		mov    %eax,EXPORT_SYMBOL(vec_map)
		mov    %bh,EXPORT_SYMBOL(vec_mode)
		mov    %esi,0x30(%esp)
		mov    %edi,0x34(%esp)
		mov    %esi,0x8(%esp)
		mov    %edx,0x80(%esp)
		mov    %edx,0x58(%esp)
		mov    $0x5f0000,%eax
		lea    0x50(%esp),%ebx
		mov    %esp,%edx
		mov    %eax,0xc(%esp)
		mov    %eax,0x5c(%esp)
		lea    0x28(%esp),%eax
		mov    %edi,0x84(%esp)
		call   ac_draw_trigpoly
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_23f47
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_23f47:
		lea    0x28(%esp),%ebx
		lea    0x78(%esp),%edx
		lea    0x50(%esp),%eax
		call   ac_draw_trigpoly
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		jmp    jump_2394c


/*----------------------------------------------------------------*/
func_23f64:
/*----------------------------------------------------------------*/
		mov    $0x6,%dh
		mov    $0x5f0000,%esi
		mov    $0xdf0000,%edi
		mov    EXPORT_SYMBOL(vec_tmap)+16,%eax
		lea    0x50(%esp),%ebx
		mov    %eax,EXPORT_SYMBOL(vec_map)
		mov    %dh,EXPORT_SYMBOL(vec_mode)
		mov    %esi,0xc(%esp)
		mov    %edi,0x80(%esp)
		mov    %edi,0x58(%esp)
		mov    $0xc00000,%eax
		mov    $0x400000,%edx
		mov    %eax,0x30(%esp)
		mov    %edx,0x34(%esp)
		mov    %eax,0x8(%esp)
		mov    %edx,0x84(%esp)
		mov    %esp,%edx
		lea    0x28(%esp),%eax
		mov    %esi,0x5c(%esp)
		call   ac_draw_trigpoly
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_23fd2
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_23fd2:
		lea    0x28(%esp),%ebx
		lea    0x78(%esp),%edx
		lea    0x50(%esp),%eax
		call   ac_draw_trigpoly
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		jmp    jump_2394c
	jump_23fef:
		mov    %dl,%al
		dec    %al
		cmp    $0xb,%al
		ja     jump_2394c
		and    $0xff,%eax
		jmp    *%cs:vtable_23680(,%eax,4)


/*----------------------------------------------------------------*/
func_24008:
/*----------------------------------------------------------------*/
		mov    $0x6,%dl
		mov    $0x400000,%ebx
		mov    $0x5f0000,%esi
		mov    EXPORT_SYMBOL(vec_tmap)+16,%eax
		mov    $0xbf0000,%edi
		mov    %eax,EXPORT_SYMBOL(vec_map)
		mov    %dl,EXPORT_SYMBOL(vec_mode)
		mov    %ebx,0x34(%esp)
		mov    %esi,0xc(%esp)
		mov    %edi,0x80(%esp)
		mov    %ebx,0x84(%esp)
		mov    %edi,0x58(%esp)
		mov    $0xa00000,%edx
		lea    0x50(%esp),%ebx
		lea    0x28(%esp),%eax
		mov    %edx,0x30(%esp)
		mov    %edx,0x8(%esp)
		mov    %esp,%edx
		mov    %esi,0x5c(%esp)
		call   ac_draw_trigpoly
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_24076
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_24076:
		lea    0x28(%esp),%ebx
		lea    0x78(%esp),%edx
		lea    0x50(%esp),%eax
		call   ac_draw_trigpoly
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		add    $0xa0,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_240a2:
/*----------------------------------------------------------------*/
		mov    $0x9f0000,%ebp
		mov    $0x5f0000,%ebx
		mov    $0x800000,%ecx
		mov    EXPORT_SYMBOL(vec_tmap)+16,%eax
		mov    %esp,%edx
		mov    %eax,EXPORT_SYMBOL(vec_map)
		mov    %ebp,0x30(%esp)
		mov    %ebp,0x8(%esp)
		mov    %ebx,0xc(%esp)
		mov    %ecx,0x80(%esp)
		mov    $0x6,%al
		mov    %ebx,0x5c(%esp)
		mov    %al,EXPORT_SYMBOL(vec_mode)
		mov    $0x400000,%eax
		lea    0x50(%esp),%ebx
		mov    %eax,0x34(%esp)
		mov    %eax,0x84(%esp)
		lea    0x28(%esp),%eax
		mov    %ecx,0x58(%esp)
		call   ac_draw_trigpoly
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_2410f
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_2410f:
		lea    0x28(%esp),%ebx
		lea    0x78(%esp),%edx
		lea    0x50(%esp),%eax
		call   ac_draw_trigpoly
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		add    $0xa0,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_2413b:
/*----------------------------------------------------------------*/
		mov    $0x6,%cl
		mov    $0xdf0000,%esi
		mov    $0x400000,%edi
		mov    $0xc00000,%edx
		mov    EXPORT_SYMBOL(vec_tmap)+16,%eax
		lea    0x50(%esp),%ebx
		mov    %eax,EXPORT_SYMBOL(vec_map)
		mov    %cl,EXPORT_SYMBOL(vec_mode)
		mov    %esi,0x30(%esp)
		mov    %edi,0x34(%esp)
		mov    %esi,0x8(%esp)
		mov    %edx,0x80(%esp)
		mov    %edx,0x58(%esp)
		mov    $0x5f0000,%eax
		mov    %esp,%edx
		mov    %eax,0xc(%esp)
		mov    %eax,0x5c(%esp)
		lea    0x28(%esp),%eax
		mov    %edi,0x84(%esp)
		call   ac_draw_trigpoly
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_241a9
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_241a9:
		lea    0x28(%esp),%ebx
		lea    0x78(%esp),%edx
		lea    0x50(%esp),%eax
		call   ac_draw_trigpoly
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		add    $0xa0,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_241d5:
/*----------------------------------------------------------------*/
		mov    $0x6,%bl
		mov    $0x400000,%ecx
		mov    $0x5f0000,%edi
		mov    $0xbf0000,%ebp
		mov    EXPORT_SYMBOL(vec_tmap)+16,%eax
		mov    %esp,%edx
		mov    %eax,EXPORT_SYMBOL(vec_map)
		mov    %bl,EXPORT_SYMBOL(vec_mode)
		mov    %ecx,0x84(%esp)
		mov    %edi,0x34(%esp)
		mov    %ebp,0x58(%esp)
		mov    %ecx,0x5c(%esp)
		mov    %ebp,0x8(%esp)
		mov    $0xa00000,%ebx
		lea    0x28(%esp),%eax
		mov    %ebx,0x80(%esp)
		mov    %ebx,0x30(%esp)
		lea    0x50(%esp),%ebx
		mov    %edi,0xc(%esp)
		call   ac_draw_trigpoly
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_24243
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_24243:
		lea    0x28(%esp),%ebx
		lea    0x78(%esp),%edx
		lea    0x50(%esp),%eax
		call   ac_draw_trigpoly
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		add    $0xa0,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_2426f:
/*----------------------------------------------------------------*/
		mov    $0x6,%dl
		mov    $0x400000,%ecx
		mov    $0x800000,%esi
		mov    EXPORT_SYMBOL(vec_tmap)+16,%eax
		lea    0x50(%esp),%ebx
		mov    %eax,EXPORT_SYMBOL(vec_map)
		mov    %dl,EXPORT_SYMBOL(vec_mode)
		mov    %ecx,0xc(%esp)
		mov    %esi,0x80(%esp)
		mov    %esi,0x58(%esp)
		mov    $0x9f0000,%eax
		mov    $0x5f0000,%edx
		mov    %eax,0x30(%esp)
		mov    %edx,0x34(%esp)
		mov    %eax,0x8(%esp)
		mov    %edx,0x84(%esp)
		mov    %esp,%edx
		lea    0x28(%esp),%eax
		mov    %ecx,0x5c(%esp)
		call   ac_draw_trigpoly
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_242dd
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_242dd:
		lea    0x28(%esp),%ebx
		lea    0x78(%esp),%edx
		lea    0x50(%esp),%eax
		call   ac_draw_trigpoly
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		add    $0xa0,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_24309:
/*----------------------------------------------------------------*/
		mov    $0xdf0000,%edi
		mov    $0x5f0000,%ebp
		mov    $0x400000,%edx
		mov    EXPORT_SYMBOL(vec_tmap)+16,%eax
		mov    $0xc00000,%ebx
		mov    %eax,EXPORT_SYMBOL(vec_map)
		mov    %edi,0x30(%esp)
		mov    %ebp,0x34(%esp)
		mov    %edi,0x8(%esp)
		mov    %edx,0xc(%esp)
		mov    %ebx,0x80(%esp)
		mov    %ebx,0x58(%esp)
		mov    %edx,0x5c(%esp)
		mov    $0x6,%al
		lea    0x50(%esp),%ebx
		mov    %esp,%edx
		mov    %al,EXPORT_SYMBOL(vec_mode)
		lea    0x28(%esp),%eax
		mov    %ebp,0x84(%esp)
		call   ac_draw_trigpoly
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_24376
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_24376:
		lea    0x28(%esp),%ebx
		lea    0x78(%esp),%edx
		lea    0x50(%esp),%eax
		call   ac_draw_trigpoly
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		add    $0xa0,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_243a2:
/*----------------------------------------------------------------*/
		mov    $0x6,%cl
		mov    $0x400000,%esi
		mov    $0x5f0000,%ebp
		lea    0x50(%esp),%ebx
		mov    EXPORT_SYMBOL(vec_tmap)+16,%eax
		mov    %esp,%edx
		mov    %eax,EXPORT_SYMBOL(vec_map)
		mov    %cl,EXPORT_SYMBOL(vec_mode)
		mov    %esi,0x5c(%esp)
		mov    %ebp,0x84(%esp)
		mov    %esi,0xc(%esp)
		mov    %ebp,0x34(%esp)
		mov    $0xa00000,%ecx
		mov    $0xbf0000,%eax
		mov    %ecx,0x58(%esp)
		mov    %eax,0x8(%esp)
		mov    %eax,0x30(%esp)
		lea    0x28(%esp),%eax
		mov    %ecx,0x80(%esp)
		call   ac_draw_trigpoly
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_24410
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_24410:
		lea    0x28(%esp),%ebx
		lea    0x78(%esp),%edx
		lea    0x50(%esp),%eax
		call   ac_draw_trigpoly
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		add    $0xa0,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_2443c:
/*----------------------------------------------------------------*/
		mov    $0x6,%bl
		mov    $0x800000,%edx
		mov    $0x400000,%esi
		mov    EXPORT_SYMBOL(vec_tmap)+16,%eax
		mov    $0x9f0000,%edi
		mov    %eax,EXPORT_SYMBOL(vec_map)
		mov    %bl,EXPORT_SYMBOL(vec_mode)
		mov    %edx,0x30(%esp)
		mov    %edx,0x8(%esp)
		mov    %esi,0xc(%esp)
		mov    %edi,0x80(%esp)
		mov    %edi,0x58(%esp)
		mov    $0x5f0000,%ebx
		mov    %esp,%edx
		lea    0x28(%esp),%eax
		mov    %ebx,0x34(%esp)
		mov    %ebx,0x84(%esp)
		lea    0x50(%esp),%ebx
		mov    %esi,0x5c(%esp)
		call   ac_draw_trigpoly
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_244aa
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_244aa:
		lea    0x28(%esp),%ebx
		lea    0x78(%esp),%edx
		lea    0x50(%esp),%eax
		call   ac_draw_trigpoly
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		add    $0xa0,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_244d6:
/*----------------------------------------------------------------*/
		mov    $0x6,%dl
		mov    $0xc00000,%ebp
		mov    $0x400000,%ebx
		mov    EXPORT_SYMBOL(vec_tmap)+16,%eax
		mov    $0xdf0000,%ecx
		mov    %eax,EXPORT_SYMBOL(vec_map)
		mov    %dl,EXPORT_SYMBOL(vec_mode)
		mov    %ebp,0x30(%esp)
		mov    %ebp,0x8(%esp)
		mov    %ebx,0xc(%esp)
		mov    %ecx,0x80(%esp)
		mov    %ebx,0x5c(%esp)
		mov    $0x5f0000,%eax
		lea    0x50(%esp),%ebx
		mov    %esp,%edx
		mov    %eax,0x34(%esp)
		mov    %eax,0x84(%esp)
		lea    0x28(%esp),%eax
		mov    %ecx,0x58(%esp)
		call   ac_draw_trigpoly
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_24544
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_24544:
		lea    0x28(%esp),%ebx
		lea    0x78(%esp),%edx
		lea    0x50(%esp),%eax
		call   ac_draw_trigpoly
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		add    $0xa0,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_24570:
/*----------------------------------------------------------------*/
		mov    $0xa00000,%esi
		mov    $0x400000,%edi
		mov    $0xbf0000,%edx
		mov    EXPORT_SYMBOL(vec_tmap)+16,%eax
		lea    0x50(%esp),%ebx
		mov    %eax,EXPORT_SYMBOL(vec_map)
		mov    %esi,0x8(%esp)
		mov    %edi,0xc(%esp)
		mov    %esi,0x58(%esp)
		mov    %edx,0x30(%esp)
		mov    $0x6,%al
		mov    %edx,0x80(%esp)
		mov    %al,EXPORT_SYMBOL(vec_mode)
		mov    $0x5f0000,%eax
		mov    %esp,%edx
		mov    %eax,0x5c(%esp)
		mov    %eax,0x84(%esp)
		lea    0x28(%esp),%eax
		mov    %edi,0x34(%esp)
		call   ac_draw_trigpoly
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_245dd
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_245dd:
		lea    0x28(%esp),%ebx
		lea    0x78(%esp),%edx
		lea    0x50(%esp),%eax
		call   ac_draw_trigpoly
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		add    $0xa0,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_24609:
/*----------------------------------------------------------------*/
		mov    $0x6,%cl
		mov    $0x800000,%ebx
		mov    $0x5f0000,%edi
		mov    $0x9f0000,%ebp
		mov    EXPORT_SYMBOL(vec_tmap)+16,%eax
		mov    %esp,%edx
		mov    %eax,EXPORT_SYMBOL(vec_map)
		mov    %cl,EXPORT_SYMBOL(vec_mode)
		mov    %ebx,0x30(%esp)
		mov    %ebx,0x8(%esp)
		mov    %edi,0xc(%esp)
		mov    %ebp,0x80(%esp)
		mov    %ebp,0x58(%esp)
		mov    %edi,0x5c(%esp)
		mov    $0x400000,%ecx
		lea    0x50(%esp),%ebx
		lea    0x28(%esp),%eax
		mov    %ecx,0x34(%esp)
		mov    %ecx,0x84(%esp)
		call   ac_draw_trigpoly
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_24677
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_24677:
		lea    0x28(%esp),%ebx
		lea    0x78(%esp),%edx
		lea    0x50(%esp),%eax
		call   ac_draw_trigpoly
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		add    $0xa0,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_246a3:
/*----------------------------------------------------------------*/
		mov    $0x6,%bl
		mov    $0x400000,%edx
		mov    $0x5f0000,%ecx
		mov    EXPORT_SYMBOL(vec_tmap)+16,%eax
		mov    $0xdf0000,%esi
		mov    %eax,EXPORT_SYMBOL(vec_map)
		mov    %bl,EXPORT_SYMBOL(vec_mode)
		mov    %edx,0x34(%esp)
		mov    %ecx,0xc(%esp)
		mov    %esi,0x80(%esp)
		mov    %edx,0x84(%esp)
		mov    %esi,0x58(%esp)
		mov    $0xc00000,%eax
		lea    0x50(%esp),%ebx
		mov    %esp,%edx
		mov    %eax,0x30(%esp)
		mov    %eax,0x8(%esp)
		lea    0x28(%esp),%eax
		mov    %ecx,0x5c(%esp)
		call   ac_draw_trigpoly
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_24711
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_24711:
		lea    0x28(%esp),%ebx
		lea    0x78(%esp),%edx
		lea    0x50(%esp),%eax
		call   ac_draw_trigpoly
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		addl   $0x2,EXPORT_SYMBOL(dword_176D4C)
		add    $0xa0,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_2473d:
		mov    %dh,%al
		dec    %al
		cmp    $0xb,%al
		ja     jump_22f31
		and    $0xff,%eax
		jmp    *%cs:vtable_236b0(,%eax,4)


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_check_mouse_overvehicle)	/* 0x024758 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x2c,%esp
		mov    %eax,%ebx
		mov    %dl,%cl
		mov    0x18(%eax),%eax
		mov    engn_xc,%edx
		sar    $0x8,%eax
		sub    %edx,%eax
		mov    %eax,0x14(%esp)
		mov    0x1c(%ebx),%eax
		mov    engn_yc,%esi
		sar    $0x5,%eax
		sub    %esi,%eax
		mov    %eax,0x18(%esp)
		lea    0x0(,%esi,8),%edx
		mov    0x18(%esp),%ebp
		mov    0x20(%ebx),%eax
		sub    %edx,%ebp
		mov    EXPORT_SYMBOL(dword_176D14),%edx
		mov    %ebp,0x18(%esp)
		mov    0x14(%esp),%ebp
		imul   %edx,%ebp
		mov    engn_zc,%edi
		sar    $0x8,%eax
		mov    0x14(%esp),%esi
		sub    %edi,%eax
		mov    EXPORT_SYMBOL(dword_176D10),%edi
		imul   %edi,%esi
		mov    %eax,0x1c(%esp)
		mov    0x1c(%esp),%edx
		imul   %edi,%edx
		mov    EXPORT_SYMBOL(dword_176D14),%edi
		sub    %edx,%ebp
		mov    0x1c(%esp),%edx
		imul   %edi,%edx
		mov    0x18(%esp),%edi
		add    %esi,%edx
		imul   EXPORT_SYMBOL(dword_176D1C),%edi
		sar    $0x10,%edx
		mov    EXPORT_SYMBOL(dword_176D18),%esi
		imul   %edx,%esi
		sub    %esi,%edi
		sar    $0x10,%edi
		mov    0x18(%esp),%esi
		mov    %edi,0x28(%esp)
		imul   EXPORT_SYMBOL(dword_176D18),%esi
		imul   EXPORT_SYMBOL(dword_176D1C),%edx
		add    %esi,%edx
		sar    $0x10,%edx
		mov    %edx,0x1c(%esp)
		mov    EXPORT_SYMBOL(overall_scale)-2,%edx
		sar    $0x10,%ebp
		sar    $0x10,%edx
		imul   %edx,%ebp
		mov    0x28(%esp),%esi
		imul   %edx,%esi
		mov    %esp,%eax
		mov    %ebp,0x14(%esp)
		mov    %esi,0x18(%esp)
		mov    %ebp,%edx
		movzbl game_perspective,%esi
		sar    $0xb,%edx
		cmp    $0x5,%esi
		je     jump_24851
		mov    EXPORT_SYMBOL(dword_176D3C),%esi
		jmp    jump_24869
	jump_24851:
		mov    0x1c(%esp),%esi
		neg    %esi
		add    $0x4000,%esi
		imul   %esi,%edx
		mov    EXPORT_SYMBOL(dword_176D3C),%esi
		sar    $0xe,%edx
	jump_24869:
		add    %edx,%esi
		mov    %esi,(%esp)
		mov    (%eax),%ebp
		test   %ebp,%ebp
		jge    jump_2488f
		mov    0x26(%eax),%dh
		or     $0x1,%dh
		mov    (%eax),%ebp
		mov    %dh,0x26(%eax)
		cmp    $0xfffff830,%ebp
		jge    jump_248a9
		movl   $0xfffff830,(%eax)
		jmp    jump_248a9
	jump_2488f:
		cmp    EXPORT_SYMBOL(vec_window_width),%ebp
		jl     jump_248a9
		cmp    $0x7d0,%ebp
		jle    jump_248a5
		movl   $0x7d0,(%eax)
	jump_248a5:
		orb    $0x2,0x26(%eax)
	jump_248a9:
		xor    %edx,%edx
		mov    game_perspective,%dl
		cmp    $0x5,%edx
		je     jump_248c4
		mov    0x18(%eax),%esi
		mov    EXPORT_SYMBOL(dword_176D40),%edx
		sar    $0xb,%esi
		jmp    jump_248e1
	jump_248c4:
		mov    0x1c(%eax),%edx
		mov    0x18(%eax),%esi
		neg    %edx
		sar    $0xb,%esi
		add    $0x4000,%edx
		imul   %edx,%esi
		mov    EXPORT_SYMBOL(dword_176D40),%edx
		sar    $0xe,%esi
	jump_248e1:
		sub    %esi,%edx
		mov    %edx,0x4(%eax)
		mov    0x4(%eax),%edx
		test   %edx,%edx
		jge    jump_2490a
		mov    0x26(%eax),%dl
		or     $0x4,%dl
		mov    0x4(%eax),%ebp
		mov    %dl,0x26(%eax)
		cmp    $0xfffff830,%ebp
		jge    jump_2492d
		movl   $0xfffff830,0x4(%eax)
		jmp    jump_2492d
	jump_2490a:
		cmp    EXPORT_SYMBOL(vec_window_height),%edx
		jl     jump_2492d
		mov    0x26(%eax),%ch
		or     $0x8,%ch
		mov    0x4(%eax),%edi
		mov    %ch,0x26(%eax)
		cmp    $0x7d0,%edi
		jle    jump_2492d
		movl   $0x7d0,0x4(%eax)
	jump_2492d:
		orb    $0x40,0x26(%eax)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_24987
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_24954
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
		add    %eax,%eax
		jmp    jump_24959
	jump_24954:
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
	jump_24959:
		mov    %eax,%edx
		mov    (%esp),%edi
		sar    %edx
		xor    %eax,%eax
		sub    %edi,%edx
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_24978
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		add    %eax,%eax
		jmp    jump_2497d
	jump_24978:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
	jump_2497d:
		mov    0x4(%esp),%ebp
		sar    %eax
		sub    %ebp,%eax
		jmp    jump_249c6
	jump_24987:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_2499e
		mov    EXPORT_SYMBOL(lbDisplay)+80,%edx # lbDisplay.MMouseX
		add    %edx,%edx
		jmp    jump_249a4
	jump_2499e:
		mov    EXPORT_SYMBOL(lbDisplay)+80,%edx # lbDisplay.MMouseX
	jump_249a4:
		sub    (%esp),%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_249bd
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		add    %eax,%eax
		jmp    jump_249c2
	jump_249bd:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
	jump_249c2:
		sub    0x4(%esp),%eax
	jump_249c6:
		imul   %edx,%edx
		imul   %eax,%eax
		add    %eax,%edx
		xor    %eax,%eax
		mov    0x14(%ebx),%ax
		mov    %eax,%esi
		mov    EXPORT_SYMBOL(overall_scale)-2,%eax
		sar    $0x3,%esi
		sar    $0x10,%eax
		imul   %esi,%eax
		sar    $0x8,%eax
		imul   %eax,%eax
		cmp    %eax,%edx
		jge    jump_24a23
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    0x16(%ebx),%dx
		mov    %dx,data_1a63e0(%eax)
		xor    %edx,%edx
		mov    %cl,%dl
		mov    %dx,data_1a63e4(%eax)
	jump_24a23:
		add    $0x2c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_check_mouse_over_face)	/* 0x24A2C */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x70,%esp
		mov    %eax,%edi
		mov    %edx,0x5c(%esp)
		mov    %ebx,%ebp
		mov    %ecx,%esi
		xor    %eax,%eax
		mov    pktrec_mode,%al
		cmp    $0x2,%eax
		je     jump_25095
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_24a99
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_24a6f
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
		add    %eax,%eax
		jmp    jump_24a74
	jump_24a6f:
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
	jump_24a74:
		sar    %eax
		mov    %eax,0x20(%esp)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_24a90
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		add    %eax,%eax
		jmp    jump_24a95
	jump_24a90:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
	jump_24a95:
		sar    %eax
		jmp    jump_24ad3
	jump_24a99:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_24aaf
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
		add    %eax,%eax
		jmp    jump_24ab4
	jump_24aaf:
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
	jump_24ab4:
		mov    %eax,0x20(%esp)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_24ace
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		add    %eax,%eax
		jmp    jump_24ad3
	jump_24ace:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
	jump_24ad3:
		mov    %eax,0x50(%esp)
		mov    0x4(%ebp),%edx
		push   %edx
		mov    0x0(%ebp),%ebx
		mov    0x60(%esp),%eax
		push   %ebx
		mov    0x4(%eax),%ecx
		mov    (%eax),%edx
		push   %ecx
		mov    0x2c(%esp),%eax
		mov    (%edi),%ebx
		push   %edx
		mov    0x4(%edi),%ecx
		mov    0x60(%esp),%edx
		call   check_big_point_triangle
		test   %al,%al
		jne    jump_24d25
		add    $0x70,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4
	jump_24b0d:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %si,data_1a63e0(%eax)
		movswl %si,%eax
		mov    game_object_faces,%edx
		shl    $0x5,%eax
		add    %eax,%edx
		xor    %ebx,%ebx
		mov    0xc(%edx),%bx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		mov    game_objects,%ebx
		shl    $0x2,%eax
		add    %eax,%ebx
		mov    %ebx,0x68(%esp)
		xor    %ebx,%ebx
		mov    (%edx),%bx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		mov    EXPORT_SYMBOL(game_object_points),%ebx
		add    %eax,%eax
		lea    (%ebx,%eax,1),%ecx
		xor    %eax,%eax
		mov    0x4(%edx),%ax
		mov    %eax,0x24(%esp)
		mov    %ecx,0x6c(%esp)
		mov    0x24(%esp),%ecx
		shl    $0x2,%eax
		add    %ecx,%eax
		add    %eax,%eax
		lea    (%ebx,%eax,1),%ecx
		mov    0x2(%edx),%dx
		mov    %ecx,0x60(%esp)
		and    $0xffff,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		add    %eax,%eax
		add    %eax,%ebx
		mov    %ebx,0x64(%esp)
		jmp    jump_24d4e
	jump_24bb8:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %esi,%ebx
		mov    %eax,%edx
		shl    $0x2,%eax
		neg    %ebx
		sub    %edx,%eax
		movswl %si,%edx
		mov    %bx,data_1a63e0(%eax)
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    game_object_faces4,%edx
		shl    $0x3,%eax
		add    %eax,%edx
		xor    %ebx,%ebx
		mov    0xe(%edx),%bx
		lea    0x0(,%ebx,8),%eax
		add    %eax,%ebx
		mov    game_objects,%eax
		shl    $0x2,%ebx
		add    %ebx,%eax
		xor    %ebx,%ebx
		mov    (%edx),%bx
		mov    %eax,0x68(%esp)
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		mov    EXPORT_SYMBOL(game_object_points),%ebx
		add    %eax,%eax
		lea    (%ebx,%eax,1),%ecx
		xor    %eax,%eax
		mov    0x4(%edx),%ax
		mov    %eax,0x24(%esp)
		mov    %ecx,0x6c(%esp)
		mov    0x24(%esp),%ecx
		shl    $0x2,%eax
		add    %ecx,%eax
		add    %eax,%eax
		lea    (%ebx,%eax,1),%ecx
		mov    0x2(%edx),%dx
		mov    %ecx,0x60(%esp)
		and    $0xffff,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		add    %eax,%eax
		add    %eax,%ebx
		mov    %ebx,0x64(%esp)
		jmp    jump_24d4e
	jump_24c6f:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %esi,%ebx
		mov    %eax,%edx
		shl    $0x2,%eax
		neg    %ebx
		sub    %edx,%eax
		movswl %si,%edx
		mov    %bx,data_1a63e0(%eax)
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    game_object_faces4,%edx
		shl    $0x3,%eax
		add    %eax,%edx
		xor    %ebx,%ebx
		mov    0xe(%edx),%bx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		mov    game_objects,%ebx
		shl    $0x2,%eax
		add    %eax,%ebx
		mov    %ebx,0x68(%esp)
		xor    %ebx,%ebx
		mov    0x6(%edx),%bx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		mov    EXPORT_SYMBOL(game_object_points),%ebx
		add    %eax,%eax
		lea    (%ebx,%eax,1),%ecx
		xor    %eax,%eax
		mov    0x2(%edx),%ax
		mov    %eax,0x24(%esp)
		mov    %ecx,0x6c(%esp)
		mov    0x24(%esp),%ecx
		shl    $0x2,%eax
		add    %ecx,%eax
		add    %eax,%eax
		lea    (%ebx,%eax,1),%ecx
		mov    0x4(%edx),%dx
		mov    %ecx,0x60(%esp)
		and    $0xffff,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		add    %eax,%eax
		add    %eax,%ebx
		mov    %ebx,0x64(%esp)
		jmp    jump_24d4e
	jump_24d25:
		mov    0x80(%esp),%edx
		cmp    $0x2,%dx
		jb     jump_24d44
		jbe    jump_24bb8
		cmp    $0x3,%dx
		je     jump_24c6f
		jmp    jump_24d4e
	jump_24d44:
		cmp    $0x1,%dx
		je     jump_24b0d
	jump_24d4e:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    $0x3,%edx
		mov    0x68(%esp),%ebx
		mov    %dx,data_1a63e4(%eax)
		mov    0x14(%ebx),%ebx
		sar    $0x10,%ebx
		mov    0x68(%esp),%eax
		mov    %ebx,(%esp)
		mov    0x6c(%esp),%ebx
		mov    0x12(%eax),%eax
		mov    (%ebx),%ebx
		sar    $0x10,%eax
		sar    $0x10,%ebx
		add    %eax,%ebx
		mov    0x68(%esp),%edx
		mov    %ebx,0x48(%esp)
		mov    0x6c(%esp),%ebx
		mov    0xc(%edx),%edx
		mov    0x2(%ebx),%ebx
		sar    $0x10,%edx
		sar    $0x10,%ebx
		add    %edx,%ebx
		mov    %ebx,0x4(%esp)
		mov    0x6c(%esp),%ebx
		mov    0x4(%ebx),%ebx
		mov    (%esp),%ecx
		sar    $0x10,%ebx
		add    %ebx,%ecx
		mov    0x60(%esp),%ebx
		mov    (%ebx),%ebx
		sar    $0x10,%ebx
		add    %eax,%ebx
		mov    %ebx,0x8(%esp)
		mov    0x60(%esp),%ebx
		mov    0x2(%ebx),%ebx
		sar    $0x10,%ebx
		add    %edx,%ebx
		mov    %ebx,0xc(%esp)
		mov    0x60(%esp),%ebx
		mov    0x4(%ebx),%ebx
		sar    $0x10,%ebx
		mov    %ecx,0x58(%esp)
		mov    %ebx,0x24(%esp)
		mov    (%esp),%ebx
		mov    0x24(%esp),%ecx
		add    %ecx,%ebx
		mov    %ebx,0x10(%esp)
		mov    0x64(%esp),%ebx
		mov    (%ebx),%ebx
		sar    $0x10,%ebx
		add    %eax,%ebx
		mov    0x64(%esp),%eax
		mov    0x2(%eax),%eax
		sar    $0x10,%eax
		add    %eax,%edx
		mov    0x64(%esp),%eax
		mov    %ebx,0x14(%esp)
		mov    0x4(%eax),%eax
		mov    (%esp),%ebx
		sar    $0x10,%eax
		add    %eax,%ebx
		mov    0x5c(%esp),%eax
		mov    (%eax),%ecx
		sub    (%edi),%ecx
		mov    0x5c(%esp),%eax
		mov    %ebx,0x18(%esp)
		mov    0x4(%edi),%ebx
		mov    0x4(%eax),%eax
		sub    %ebx,%eax
		shl    $0x10,%eax
		mov    (%edi),%ebx
		mov    %eax,0x4c(%esp)
		mov    0x0(%ebp),%eax
		sub    %ebx,%eax
		shl    $0x10,%eax
		mov    0x4(%ebp),%ebp
		mov    %eax,0x54(%esp)
		sub    0x4(%edi),%ebp
		mov    0x20(%esp),%eax
		sub    %ebx,%eax
		shl    $0x10,%eax
		mov    0x4(%edi),%ebx
		mov    %eax,0x44(%esp)
		mov    0x50(%esp),%eax
		sub    %ebx,%eax
		shl    $0x10,%eax
		mov    0x48(%esp),%edi
		mov    %eax,0x40(%esp)
		mov    0x8(%esp),%eax
		sub    %edi,%eax
		shl    $0x10,%eax
		mov    0x4(%esp),%ebx
		mov    %eax,0x34(%esp)
		mov    0xc(%esp),%eax
		sub    %ebx,%eax
		shl    $0x10,%eax
		mov    0x58(%esp),%edi
		mov    %eax,0x38(%esp)
		mov    0x10(%esp),%eax
		sub    %edi,%eax
		mov    0x48(%esp),%ebx
		shl    $0x10,%eax
		mov    0x4(%esp),%edi
		mov    %eax,0x3c(%esp)
		sub    %edi,%edx
		mov    0x14(%esp),%eax
		shl    $0x10,%edx
		sub    %ebx,%eax
		mov    %edx,0x30(%esp)
		shl    $0x10,%eax
		mov    0x58(%esp),%edx
		mov    %eax,0x2c(%esp)
		mov    0x18(%esp),%eax
		sub    %edx,%eax
		shl    $0x10,%ebp
		shl    $0x10,%eax
		mov    %ebp,%ebx
		mov    %eax,0x28(%esp)
		mov    0x44(%esp),%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    0x54(%esp),%ebx
		mov    %eax,%edi
		mov    0x40(%esp),%eax
		shl    $0x10,%ecx
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    %ecx,%ebx
		sub    %eax,%edi
		mov    %ebp,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    0x4c(%esp),%ebx
		mov    %eax,0x24(%esp)
		mov    0x54(%esp),%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    0x24(%esp),%ebx
		mov    %edi,%edx
		sub    %eax,%ebx
		mov    %edx,%eax
		shl    $0x10,%eax
		sar    $0x10,%edx
		idiv   %ebx
		mov    %eax,%edi
		mov    0x40(%esp),%eax
		mov    %ecx,%ebx
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    0x4c(%esp),%ebx
		mov    %eax,0x24(%esp)
		mov    0x44(%esp),%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    0x24(%esp),%edx
		mov    %ecx,%ebx
		sub    %eax,%edx
		mov    %ebp,%eax
		mov    %edx,0x1c(%esp)
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    0x4c(%esp),%ebx
		mov    %eax,%ecx
		mov    0x54(%esp),%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    %ecx,%ebx
		mov    0x1c(%esp),%edx
		sub    %eax,%ebx
		mov    %edx,%eax
		shl    $0x10,%eax
		sar    $0x10,%edx
		idiv   %ebx
		mov    %eax,%ecx
		test   %edi,%edi
		jle    jump_25095
		cmp    $0x10000,%edi
		jg     jump_25095
		test   %eax,%eax
		jl     jump_25095
		cmp    $0x10000,%eax
		jg     jump_25095
		add    %edi,%eax
		cmp    $0x20000,%eax
		jg     jump_25095
		mov    0x34(%esp),%ebx
		mov    %edi,%eax
		mov    0x48(%esp),%ebp
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		sar    $0x10,%eax
		mov    0x2c(%esp),%ebx
		add    %eax,%ebp
		mov    %ecx,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		sar    $0x10,%eax
		mov    0x38(%esp),%ebx
		add    %eax,%ebp
		mov    %edi,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    0x30(%esp),%ebx
		mov    %ecx,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    0x3c(%esp),%ebx
		mov    %edi,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    0x58(%esp),%edi
		sar    $0x10,%eax
		mov    0x28(%esp),%ebx
		add    %eax,%edi
		mov    %ecx,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		sar    $0x10,%eax
		mov    0x80(%esp),%ecx
		add    %eax,%edi
		mov    %ebp,%edx
		mov    %edi,%ebx
		shl    $0x8,%edx
		shl    $0x8,%ebx
		cmp    $0x2,%cx
		jb     jump_25083
		jbe    jump_25072
		cmp    $0x3,%cx
		je     jump_25072
		jmp    jump_25089
	jump_25061:
		xor    %ecx,%ecx
		mov    $data_176d90,%eax
		mov    %si,%cx
		call   ac_set_thing_height_on_face_tri
		jmp    jump_25089
	jump_25072:
		xor    %ecx,%ecx
		mov    $data_176d90,%eax
		mov    %si,%cx
		call   ac_set_thing_height_on_face_quad
		jmp    jump_25089
	jump_25083:
		cmp    $0x1,%cx
		je     jump_25061
	jump_25089:
		mov    %ebp,EXPORT_SYMBOL(mouse_map_x)
		mov    %edi,EXPORT_SYMBOL(mouse_map_z)
	jump_25095:
		add    $0x70,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_check_mouse_overlap)	/* 0x250A0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		mov    %esp,%ebp
		sub    $0x4,%esp
		cwtl
		mov    EXPORT_SYMBOL(game_sort_sprites),%esi
		shl    $0x4,%eax
		mov    EXPORT_SYMBOL(overall_scale)-2,%edx
		add    %eax,%esi
		mov    EXPORT_SYMBOL(word_1A5834)-2,%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		imul   %edx,%eax
		mov    %edx,-0x4(%ebp)
		mov    EXPORT_SYMBOL(word_1A5834),%edx
		mov    -0x4(%ebp),%ebx
		sar    $0x10,%edx
		imul   %ebx,%edx
		sar    $0x8,%eax
		movswl (%esi),%ebx
		add    %ebx,%eax
		mov    (%esi),%ebx
		sar    $0x8,%edx
		sar    $0x10,%ebx
		add    %ebx,%edx
		xor    %ebx,%ebx
		mov    0x6(%esi),%bx
		mov    frame,%ecx
		shl    $0x3,%ebx
		add    %ebx,%ecx
		xor    %ebx,%ebx
		mov    -0x4(%ebp),%edi
		mov    0x2(%ecx),%bl
		imul   %edi,%ebx
		mov    0x3(%ecx),%cl
		sar    $0x9,%ebx
		and    $0xff,%ecx
		imul   %edi,%ecx
		sar    $0x9,%ecx
		cmp    $0x10,%ebx
		jge    jump_25134
		mov    $0x11,%edi
		sub    %ebx,%edi
		mov    %edi,%ebx
		sar    %ebx
		sub    %ebx,%eax
		mov    $0x10,%ebx
	jump_25134:
		cmp    $0x14,%ecx
		jge    jump_2514b
		mov    $0x15,%edi
		sub    %ecx,%edi
		mov    %edi,%ecx
		sar    %ecx
		sub    %ecx,%edx
		mov    $0x14,%ecx
	jump_2514b:
		xor    %edi,%edi
		mov    EXPORT_SYMBOL(lbDisplay)+100,%di # lbDisplay.ScreenMode
		cmp    $0x1,%edi
		jne    jump_251f7
		movswl %cx,%ecx
		push   %ecx
		movswl %bx,%ebx
		push   %ebx
		movswl %dx,%ecx
		movswl %ax,%ebx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    %edi,%eax
		jne    jump_25180
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		add    %eax,%eax
		jmp    jump_25185
	jump_25180:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
	jump_25185:
		sar    %eax
		movswl %ax,%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_251a0
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
		add    %eax,%eax
		jmp    jump_251a5
	jump_251a0:
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
	jump_251a5:
		sar    %eax
		cwtl
		call   func_60130
		test   %al,%al
		je     jump_2527e
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		mov    0x8(%esi),%ebx
		sub    %edx,%eax
		mov    0x16(%ebx),%dx
		mov    $0x7,%ebx
		mov    %dx,data_1a63e0(%eax)
		mov    %bx,data_1a63e4(%eax)
		mov    %ebp,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_251f7:
		movswl %cx,%ecx
		push   %ecx
		movswl %bx,%ebx
		push   %ebx
		movswl %dx,%ecx
		movswl %ax,%ebx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_2521b
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		add    %eax,%eax
		jmp    jump_25220
	jump_2521b:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
	jump_25220:
		movswl %ax,%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_25239
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
		add    %eax,%eax
		jmp    jump_2523e
	jump_25239:
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
	jump_2523e:
		cwtl
		call   func_60130
		test   %al,%al
		je     jump_2527e
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		mov    0x8(%esi),%ebx
		sub    %edx,%eax
		mov    0x16(%ebx),%dx
		mov    %dx,data_1a63e0(%eax)
		movw   $0x7,data_1a63e4(%eax)
	jump_2527e:
		mov    %ebp,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_check_mouse_over_unkn2)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		mov    %esp,%ebp
		sub    $0x10,%esp
		mov    %edx,-0xc(%ebp)
		cwtl
		mov    EXPORT_SYMBOL(game_sort_sprites),%edx
		shl    $0x4,%eax
		mov    EXPORT_SYMBOL(word_1A5834)-2,%edi
		add    %edx,%eax
		mov    EXPORT_SYMBOL(overall_scale)-2,%edx
		sar    $0x10,%edi
		sar    $0x10,%edx
		imul   %edx,%edi
		mov    EXPORT_SYMBOL(word_1A5834),%esi
		sar    $0x10,%esi
		imul   %edx,%esi
		movswl (%eax),%ebx
		sar    $0x8,%edi
		add    %ebx,%edi
		mov    (%eax),%ebx
		sar    $0x8,%esi
		sar    $0x10,%ebx
		mov    0x6(%eax),%ax
		add    %ebx,%esi
		and    $0xffff,%eax
		mov    frame,%ebx
		shl    $0x3,%eax
		add    %eax,%ebx
		xor    %eax,%eax
		mov    0x2(%ebx),%al
		imul   %edx,%eax
		mov    0x3(%ebx),%bl
		sar    $0x9,%eax
		and    $0xff,%ebx
		imul   %ebx,%edx
		sar    $0x9,%edx
		mov    %edx,-0x8(%ebp)
		cmp    $0x10,%eax
		jge    jump_2531c
		mov    $0x11,%edx
		sub    %eax,%edx
		mov    %edx,%eax
		sar    %eax
		sub    %eax,%edi
		mov    $0x10,%eax
	jump_2531c:
		cmpl   $0x14,-0x8(%ebp)
		jge    jump_25336
		mov    $0x15,%edx
		sub    -0x8(%ebp),%edx
		mov    $0x14,%ecx
		sar    %edx
		mov    %ecx,-0x8(%ebp)
		sub    %edx,%esi
	jump_25336:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay)+100,%dx # lbDisplay.ScreenMode
		cmp    $0x1,%edx
		jne    jump_253a6
		mov    -0xa(%ebp),%edx
		sar    $0x10,%edx
		push   %edx
		cwtl
		push   %eax
		movswl %si,%eax
		movswl %di,%ebx
		mov    %eax,-0x10(%ebp)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_2536c
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		add    %eax,%eax
		jmp    jump_25371
	jump_2536c:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
	jump_25371:
		sar    %eax
		movswl %ax,%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_2538c
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
		add    %eax,%eax
		jmp    jump_25391
	jump_2538c:
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
	jump_25391:
		sar    %eax
		mov    -0x10(%ebp),%ecx
		cwtl
		call   func_60130
		test   %al,%al
		je     jump_2541f
		jmp    jump_25401
	jump_253a6:
		mov    -0xa(%ebp),%edx
		cwtl
		sar    $0x10,%edx
		movswl %si,%ecx
		push   %edx
		movswl %di,%ebx
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_253cb
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		add    %eax,%eax
		jmp    jump_253d0
	jump_253cb:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
	jump_253d0:
		movswl %ax,%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_253e9
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
		add    %eax,%eax
		jmp    jump_253ee
	jump_253e9:
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
	jump_253ee:
		mov    %ax,-0x4(%ebp)
		mov    -0x6(%ebp),%eax
		sar    $0x10,%eax
		call   func_60130
		test   %al,%al
		je     jump_2541f
	jump_25401:
		mov    -0xc(%ebp),%eax
		mov    %eax,data_176cc8
		mov    -0x8(%ebp),%eax
		sar    %eax
		sub    $0x8,%esi
		add    %eax,%edi
		mov    %esi,data_176cd0
		mov    %edi,data_176ccc
	jump_2541f:
		mov    %ebp,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_check_mouse_overlap_corpse)	/* 0x25428 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		mov    %esp,%ebp
		sub    $0x8,%esp
		movswl %ax,%esi
		mov    EXPORT_SYMBOL(game_sort_sprites),%eax
		shl    $0x4,%esi
		mov    EXPORT_SYMBOL(overall_scale)-2,%ebx
		add    %eax,%esi
		mov    EXPORT_SYMBOL(word_1A5834)-2,%eax
		sar    $0x10,%ebx
		sar    $0x10,%eax
		imul   %ebx,%eax
		sar    $0x8,%eax
		mov    %eax,%edx
		mov    EXPORT_SYMBOL(word_1A5834),%eax
		sar    $0x10,%eax
		imul   %ebx,%eax
		add    (%esi),%dx
		xor    %ecx,%ecx
		mov    0x2(%esi),%di
		mov    0x6(%esi),%cx
		sar    $0x8,%eax
		shl    $0x3,%ecx
		add    %edi,%eax
		mov    frame,%edi
		add    %edi,%ecx
		movzbl 0x2(%ecx),%edi
		imul   %ebx,%edi
		sar    $0x9,%edi
		mov    %edi,-0x8(%ebp)
		mov    -0x8(%ebp),%edi
		mov    0x3(%ecx),%cl
		mov    %di,-0x4(%ebp)
		and    $0xff,%ecx
		imul   %ecx,%ebx
		mov    -0x6(%ebp),%ecx
		sar    $0x10,%ecx
		sar    $0x9,%ebx
		cmp    $0x10,%ecx
		jge    jump_254c5
		mov    $0x11,%edi
		sub    %ecx,%edi
		mov    %edi,%ecx
		movswl %dx,%edx
		sar    %ecx
		sub    %ecx,%edx
		movw   $0x10,-0x4(%ebp)
	jump_254c5:
		movswl %bx,%ecx
		cmp    $0x14,%ecx
		jge    jump_254de
		mov    $0x15,%ebx
		sub    %ecx,%ebx
		cwtl
		sar    %ebx
		sub    %ebx,%eax
		mov    $0x14,%ebx
	jump_254de:
		xor    %ecx,%ecx
		mov    EXPORT_SYMBOL(lbDisplay)+100,%cx # lbDisplay.ScreenMode
		cmp    $0x1,%ecx
		jne    jump_2558d
		movswl %bx,%ebx
		push   %ebx
		mov    -0x6(%ebp),%ebx
		movswl %ax,%ecx
		sar    $0x10,%ebx
		xor    %eax,%eax
		push   %ebx
		movswl %dx,%ebx
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_25517
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		add    %eax,%eax
		jmp    jump_2551c
	jump_25517:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
	jump_2551c:
		sar    %eax
		movswl %ax,%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_25537
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
		add    %eax,%eax
		jmp    jump_2553c
	jump_25537:
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
	jump_2553c:
		sar    %eax
		cwtl
		call   func_60130
		test   %al,%al
		je     jump_25619
		mov    0x8(%esi),%edx
		movzbl EXPORT_SYMBOL(local_player_no),%esi
		lea    0x0(,%esi,8),%eax
		add    %esi,%eax
		shl    $0x3,%eax
		sub    %esi,%eax
		add    %eax,%eax
		mov    %eax,%esi
		shl    $0x2,%eax
		sub    %esi,%eax
		mov    0x16(%edx),%dx
		mov    $0x1,%edi
		mov    %dx,data_1a63e0(%eax)
		mov    %di,data_1a63e4(%eax)
		mov    %ebp,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_2558d:
		movswl %bx,%ebx
		push   %ebx
		mov    -0x6(%ebp),%ebx
		movswl %ax,%ecx
		sar    $0x10,%ebx
		xor    %eax,%eax
		push   %ebx
		movswl %dx,%ebx
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_255b4
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		add    %eax,%eax
		jmp    jump_255b9
	jump_255b4:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
	jump_255b9:
		movswl %ax,%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_255d2
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
		add    %eax,%eax
		jmp    jump_255d7
	jump_255d2:
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
	jump_255d7:
		cwtl
		call   func_60130
		test   %al,%al
		je     jump_25619
		mov    0x8(%esi),%edx
		movzbl EXPORT_SYMBOL(local_player_no),%esi
		lea    0x0(,%esi,8),%eax
		add    %esi,%eax
		shl    $0x3,%eax
		sub    %esi,%eax
		add    %eax,%eax
		mov    %eax,%esi
		shl    $0x2,%eax
		sub    %esi,%eax
		mov    0x16(%edx),%dx
		mov    $0x1,%esi
		mov    %dx,data_1a63e0(%eax)
		mov    %si,data_1a63e4(%eax)
	jump_25619:
		mov    %ebp,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_check_mouse_overlap_item)	/* 0x25624 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		mov    %esp,%ebp
		sub    $0x8,%esp
		movswl %ax,%esi
		mov    EXPORT_SYMBOL(game_sort_sprites),%eax
		shl    $0x4,%esi
		mov    EXPORT_SYMBOL(overall_scale)-2,%edx
		add    %eax,%esi
		mov    EXPORT_SYMBOL(word_1A5834)-2,%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		imul   %edx,%eax
		sar    $0x8,%eax
		mov    %eax,%ebx
		mov    EXPORT_SYMBOL(word_1A5834),%eax
		sar    $0x10,%eax
		imul   %edx,%eax
		mov    %edx,-0x8(%ebp)
		mov    (%esi),%cx
		sar    $0x8,%eax
		mov    0x2(%esi),%di
		mov    %eax,%edx
		xor    %eax,%eax
		add    %ecx,%ebx
		mov    0x6(%esi),%ax
		mov    frame,%ecx
		shl    $0x3,%eax
		add    %edi,%edx
		add    %ecx,%eax
		xor    %ecx,%ecx
		mov    -0x8(%ebp),%edi
		mov    0x2(%eax),%cl
		imul   %edi,%ecx
		mov    0x3(%eax),%al
		sar    $0x9,%ecx
		and    $0xff,%eax
		imul   %edi,%eax
		sar    $0x9,%eax
		mov    %ax,-0x4(%ebp)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(local_player_no),%al
		mov    %eax,-0x8(%ebp)
		mov    -0x8(%ebp),%edi
		shl    $0x3,%eax
		add    %edi,%eax
		shl    $0x3,%eax
		sub    %edi,%eax
		add    %eax,%eax
		mov    %eax,-0x8(%ebp)
		mov    -0x8(%ebp),%edi
		shl    $0x2,%eax
		sub    %edi,%eax
		mov    data_1a63e2(%eax),%eax
		sar    $0x10,%eax
		cmp    $0x5,%eax
		jne    jump_2571a
		mov    0x8(%esi),%eax
		mov    0x2c(%eax),%di
		test   %di,%di
		je     jump_2571a
		mov    %edi,%eax
		cmp    $0xc,%di
		jb     jump_25851
		cmp    $0xd,%di
		ja     jump_25851
		movswl %cx,%eax
		movswl %bx,%ebx
		sar    %eax
		sub    %eax,%ebx
		mov    -0x6(%ebp),%eax
		sar    $0x10,%eax
		movswl %dx,%edx
		sar    %eax
		sub    %eax,%edx
		mov    -0x4(%ebp),%eax
		add    %eax,%eax
		add    %ecx,%ecx
		mov    %ax,-0x4(%ebp)
	jump_2571a:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_257c8
		mov    -0x6(%ebp),%eax
		sar    $0x10,%eax
		push   %eax
		movswl %cx,%eax
		movswl %bx,%ebx
		push   %eax
		movswl %dx,%ecx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_25752
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		add    %eax,%eax
		jmp    jump_25757
	jump_25752:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
	jump_25757:
		sar    %eax
		movswl %ax,%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_25772
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
		add    %eax,%eax
		jmp    jump_25777
	jump_25772:
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
	jump_25777:
		sar    %eax
		cwtl
		call   func_60130
		test   %al,%al
		je     jump_25851
		mov    0x8(%esi),%edx
		movzbl EXPORT_SYMBOL(local_player_no),%esi
		lea    0x0(,%esi,8),%eax
		add    %esi,%eax
		shl    $0x3,%eax
		sub    %esi,%eax
		add    %eax,%eax
		mov    %eax,%esi
		shl    $0x2,%eax
		sub    %esi,%eax
		mov    0x16(%edx),%dx
		mov    $0x5,%ebx
		mov    %dx,data_1a63e0(%eax)
		mov    %bx,data_1a63e4(%eax)
		mov    %ebp,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_257c8:
		mov    -0x6(%ebp),%eax
		sar    $0x10,%eax
		push   %eax
		movswl %cx,%eax
		movswl %bx,%ebx
		push   %eax
		movswl %dx,%ecx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_257ef
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		add    %eax,%eax
		jmp    jump_257f4
	jump_257ef:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
	jump_257f4:
		movswl %ax,%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_2580d
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
		add    %eax,%eax
		jmp    jump_25812
	jump_2580d:
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
	jump_25812:
		cwtl
		call   func_60130
		test   %al,%al
		je     jump_25851
		mov    0x8(%esi),%edx
		movzbl EXPORT_SYMBOL(local_player_no),%esi
		lea    0x0(,%esi,8),%eax
		add    %esi,%eax
		shl    $0x3,%eax
		sub    %esi,%eax
		add    %eax,%eax
		mov    %eax,%esi
		shl    $0x2,%eax
		sub    %esi,%eax
		mov    0x16(%edx),%dx
		mov    %dx,data_1a63e0(%eax)
		movw   $0x5,data_1a63e4(%eax)
	jump_25851:
		mov    %ebp,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_sort_sprite1a)	/* 0x02585C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    %eax,%esi
		mov    $0x78,%edx
		xor    %edi,%edi
		xor    %ecx,%ecx
		mov    %dx,EXPORT_SYMBOL(word_1A5834)
		mov    %ax,%di
		mov    EXPORT_SYMBOL(game_sort_sprites),%eax
		shl    $0x4,%edi
		mov    %dx,EXPORT_SYMBOL(word_1A5836)
		mov    0xc(%edi,%eax,1),%cl
		mov    (%edi,%eax,1),%ebx
		movswl (%edi,%eax,1),%edx
		sar    $0x10,%ebx
		mov    0x6(%edi,%eax,1),%ax
		and    $0xffff,%eax
		call   ac_draw_sorted_sprite1a
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    data_1a63e2(%eax),%eax
		mov    EXPORT_SYMBOL(game_sort_sprites),%ebx
		sar    $0x10,%eax
		mov    0x8(%edi,%ebx,1),%ebx
		cmp    $0x5,%eax
		jg     jump_258eb
		xor    %eax,%eax
		mov    0x9(%ebx),%al
		cmp    $0x19,%eax
		jne    jump_258eb
		movswl %si,%eax
		call   ac_check_mouse_overlap_item
	jump_258eb:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    data_1a63e2(%eax),%eax
		sar    $0x10,%eax
		cmp    $0x6,%eax
		jge    jump_2594b
		xor    %eax,%eax
		mov    0x9(%ebx),%al
		cmp    $0xf,%eax
		je     jump_25938
		jmp    jump_2594b
	jump_25924:
		movswl %si,%eax
		call   ac_check_mouse_overlap
		jmp    jump_2594b
	jump_2592e:
		movswl %si,%eax
		call   ac_check_mouse_overlap_item
		jmp    jump_2594b
	jump_25938:
		mov    0x8(%ebx),%al
		cmp    $0x7,%al
		jb     jump_25947
		jbe    jump_2592e
		cmp    $0x30,%al
		je     jump_25924
		jmp    jump_2594b
	jump_25947:
		cmp    $0x3,%al
		je     jump_2592e
	jump_2594b:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_person_shadow)	/* 0x026CD0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xb4,%esp
		mov    %eax,%esi
		xor    %eax,%eax
		mov    %si,%ax
		mov    EXPORT_SYMBOL(game_sort_sprites),%edx
		shl    $0x4,%eax
		mov    0x8(%edx,%eax,1),%edx
		movb   $0xa,EXPORT_SYMBOL(vec_mode)
		xor    %eax,%eax
		mov    ingame__LastTmap,%al
		mov    EXPORT_SYMBOL(vec_tmap)(,%eax,4),%eax
		mov    %eax,EXPORT_SYMBOL(vec_map)
		xor    %eax,%eax
		mov    0x79(%edx),%al
		sar    $0x5,%eax
		xor    %ebx,%ebx
		mov    %eax,%ecx
		xor    %eax,%eax
		mov    0x26(%edx),%bx
		mov    0x57(%edx),%al
		add    %ebx,%eax
		mov    nstart_ani,%ebx
		add    %eax,%eax
		add    %eax,%ebx
		mov    0x2(%ebx),%di
		xor    %ebx,%ebx
		mov    0x57(%edx),%bl
		mov    0x24(%edx),%ax
		sub    %ebx,%ecx
		sub    %edi,%eax
		mov    %ecx,%ebx
		mov    %eax,%edi
		add    $0x8,%ebx
		xor    %eax,%eax
		xor    %bh,%bh
		mov    0x6c(%edx),%al
		and    $0x7,%bl
		cmp    $0x2,%eax
		je     jump_26d5c
		cmp    $0xf,%eax
		je     jump_26d5c
		cmp    $0x7,%eax
		jne    jump_26d63
	jump_26d5c:
		mov    $0xc,%eax
		jmp    jump_26d8e
	jump_26d63:
		cmp    $0x1,%eax
		je     jump_26d72
		cmp    $0xe,%eax
		je     jump_26d72
		cmp    $0x6,%eax
		jne    jump_26d80
	jump_26d72:
		xor    %eax,%eax
		mov    0x8(%edx),%al
		mov    EXPORT_SYMBOL(byte_154F2C)+0x1(,%eax,2),%al
		jmp    jump_26d8c
	jump_26d80:
		xor    %eax,%eax
		mov    0x8(%edx),%al
		mov    EXPORT_SYMBOL(byte_154F2C)(,%eax,2),%al
	jump_26d8c:
		xor    %ah,%ah
	jump_26d8e:
		and    $0xffff,%eax
		lea    0x0(,%eax,4),%ecx
		movswl %bx,%ebx
		sub    %eax,%ecx
		lea    0x0(,%ebx,4),%eax
		shl    $0x4,%ecx
		sub    %ebx,%eax
		xor    %ebx,%ebx
		add    %eax,%eax
		mov    %di,%bx
		add    %eax,%ecx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(sprshadow_EE90)(%ecx,%ebx,1),%al
		shl    $0x10,%eax
		mov    %eax,0x80(%esp)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(sprshadow_F5E0)(%ecx,%ebx,1),%al
		shl    $0x10,%eax
		mov    %eax,0x84(%esp)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(sprshadow_F370)(%ecx,%ebx,1),%al
		shl    $0x10,%eax
		mov    %eax,0x8(%esp)
		mov    0x84(%esp),%eax
		mov    %eax,0xc(%esp)
		mov    0x8(%esp),%eax
		mov    %eax,0x58(%esp)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(sprshadow_F100)(%ecx,%ebx,1),%al
		shl    $0x10,%eax
		mov    %eax,0x5c(%esp)
		mov    0x80(%esp),%eax
		mov    %eax,0x30(%esp)
		mov    0x5c(%esp),%eax
		mov    %eax,0x34(%esp)
		mov    EXPORT_SYMBOL(engn_anglexz),%eax
		xor    %ebx,%ebx
		sar    $0x8,%eax
		mov    0x79(%edx),%bl
		and    $0xff,%eax
		sub    %eax,%ebx
		mov    %ebx,%eax
		xor    %bh,%ah
		movswl %ax,%ebx
		movsbw EXPORT_SYMBOL(sprshadow_F850)(,%ebx,2),%ax
		neg    %eax
		movswl %ax,%ecx
		lea    0x0(,%ecx,4),%eax
		sub    %ecx,%eax
		mov    EXPORT_SYMBOL(sprshadow_F850)-2(,%ebx,2),%ecx
		sar    $0x18,%ecx
		lea    0x0(,%ecx,4),%ebx
		sub    %ecx,%ebx
		add    %ebx,%ebx
		add    $0x40,%ebx
		sar    $0x7,%ebx
		add    %eax,%eax
		mov    %ebx,%ecx
		mov    %bx,0xb0(%esp)
		neg    %ecx
		add    $0x40,%eax
		mov    %cx,0xb0(%esp)
		xor    %ecx,%ecx
		sar    $0x7,%eax
		mov    0x7a(%edx),%cl
		mov    %eax,%edi
		mov    %cx,0xac(%esp)
		mov    %cl,%dl
		and    $0xff,%edx
		cmp    $0x80,%edx
		jle    jump_26eb2
		movw   $0x80,0xac(%esp)
	jump_26eb2:
		mov    0xaa(%esp),%edx
		cwtl
		sar    $0x10,%edx
		imul   %edx,%eax
		movswl %bx,%ebx
		imul   %edx,%ebx
		mov    %edx,%ecx
		sar    $0x3,%ecx
		add    $0x10,%ecx
		mov    %ecx,0xa0(%esp)
		mov    0xa0(%esp),%cl
		mov    %cl,EXPORT_SYMBOL(vec_colour)
		sar    $0x6,%eax
		mov    EXPORT_SYMBOL(overall_scale)-2,%ecx
		cwtl
		sar    $0x10,%ecx
		imul   %ecx,%eax
		sar    $0x6,%ebx
		movswl %bx,%ebx
		imul   %ecx,%ebx
		xor    %ecx,%ecx
		mov    %si,%cx
		mov    EXPORT_SYMBOL(game_sort_sprites),%ebp
		shl    $0x4,%ecx
		add    %ebp,%ecx
		movswl (%ecx),%ebp
		mov    %ebp,0xa0(%esp)
		mov    0xae(%esp),%ebp
		sar    $0x10,%ebp
		mov    %ebp,0xa8(%esp)
		mov    0xa0(%esp),%ebp
		sub    0xa8(%esp),%ebp
		mov    %ebp,0x78(%esp)
		mov    (%ecx),%ebp
		sar    $0x10,%ebp
		mov    %ebp,0xa0(%esp)
		movswl %di,%ebp
		mov    %ebp,0xa4(%esp)
		mov    0xa0(%esp),%ebp
		sub    0xa4(%esp),%ebp
		mov    %ebp,0x7c(%esp)
		movswl (%ecx),%ebp
		add    0xa8(%esp),%ebp
		mov    %ebp,(%esp)
		mov    (%ecx),%ecx
		mov    0xa4(%esp),%ebp
		sar    $0x10,%ecx
		sar    $0x8,%eax
		add    %ecx,%ebp
		sar    $0x8,%ebx
		mov    %ebp,0x4(%esp)
		cmp    $0x40,%edx
		jle    jump_26fac
		mov    0xa8(%esp),%ecx
		imul   %edx,%ecx
		sar    $0x6,%ecx
		mov    %cx,0xb0(%esp)
		imul   0xa4(%esp),%edx
		sar    $0x6,%edx
		mov    %edx,%edi
	jump_26fac:
		xor    %ecx,%ecx
		mov    %si,%cx
		mov    EXPORT_SYMBOL(game_sort_sprites),%edx
		shl    $0x4,%ecx
		cwtl
		add    %ecx,%edx
		shl    $0x2,%eax
		mov    0xae(%esp),%esi
		movswl (%edx),%ecx
		sar    $0x10,%esi
		add    %eax,%ecx
		add    %esi,%ecx
		mov    %ecx,0x50(%esp)
		mov    (%edx),%ebp
		movswl %bx,%ecx
		sar    $0x10,%ebp
		shl    $0x2,%ecx
		movswl %di,%ebx
		add    %ecx,%ebp
		add    %ebx,%ebp
		mov    %ebp,0x54(%esp)
		movswl (%edx),%ebp
		add    %ebp,%eax
		sub    %esi,%eax
		mov    %eax,0x28(%esp)
		mov    (%edx),%eax
		sar    $0x10,%eax
		add    %ecx,%eax
		sub    %ebx,%eax
		mov    EXPORT_SYMBOL(dword_176D4C),%esi
		mov    %eax,0x2c(%esp)
		xor    %eax,%eax
		inc    %esi
		mov    EXPORT_SYMBOL(vec_mode),%al
		mov    %esi,EXPORT_SYMBOL(dword_176D4C)
		cmp    $0x2,%eax
		jne    jump_27023
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_27023:
		lea    0x78(%esp),%ebx
		mov    %esp,%edx
		lea    0x50(%esp),%eax
		call   ac_draw_trigpoly
		mov    EXPORT_SYMBOL(dword_176D4C),%edi
		xor    %eax,%eax
		inc    %edi
		mov    EXPORT_SYMBOL(vec_mode),%al
		mov    %edi,EXPORT_SYMBOL(dword_176D4C)
		cmp    $0x2,%eax
		jne    jump_27052
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_27052:
		lea    0x78(%esp),%ebx
		lea    0x50(%esp),%edx
		lea    0x28(%esp),%eax
		call   ac_draw_trigpoly
		add    $0xb4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_sort_sprite1b)	/* 0x027070 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xa4,%esp
		mov    %eax,%edi
		xor    %edx,%edx
		xor    %eax,%eax
		mov    %dx,0xa0(%esp)
		mov    %di,%ax
		mov    EXPORT_SYMBOL(game_sort_sprites),%edx
		shl    $0x4,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x6(%eax),%dx
		mov    0x8(%eax),%esi
		cmp    $0x2710,%edx
		jg     jump_274c2
		mov    0xc(%esi),%edx
		test   $0x2,%dl
		je     jump_270bc
		mov    0xc(%eax),%al
		xor    %ah,%ah
		jmp    jump_270f1
	jump_270bc:
		mov    0xc(%eax),%al
		xor    %ah,%ah
		test   $0x200000,%edx
		je     jump_270f1
		mov    $0x10,%ebx
		mov    0x84(%esi),%dl
		mov    %bx,0xa0(%esp)
		add    %ebx,%eax
		test   %dl,%dl
		je     jump_270f1
		mov    $0x20,%ecx
		add    %ebx,%eax
		mov    %cx,0xa0(%esp)
	jump_270f1:
		xor    %edx,%edx
		mov    0x6c(%esi),%dl
		cmp    $0xc,%edx
		je     jump_27104
		testb  $0x80,EXPORT_SYMBOL(ingame)+0x930 # ingame.Flags+1
		je     jump_27109
	jump_27104:
		mov    $0x20,%eax
	jump_27109:
		mov    $0x78,%edx
		mov    0x47(%esi),%bl
		mov    %dx,EXPORT_SYMBOL(word_1A5834)
		mov    %dx,EXPORT_SYMBOL(word_1A5836)
		test   $0x20,%bl
		je     jump_27177
		mov    EXPORT_SYMBOL(ingame)+0x000,%edx # ingame.GameMode
		sar    $0x10,%edx
		cmp    $0x32,%edx
		jne    jump_27177
		testb  $0x80,EXPORT_SYMBOL(ingame)+0x930 # ingame.Flags+1
		je     jump_27252
		xor    %eax,%eax
		mov    %di,%ax
		mov    EXPORT_SYMBOL(game_sort_sprites),%edx
		shl    $0x4,%eax
		mov    (%edx,%eax,1),%ebx
		movswl (%edx,%eax,1),%edx
		mov    nstart_ani,%eax
		sar    $0x10,%ebx
		mov    0x854(%eax),%ax
		mov    $0x20,%ecx
		and    $0xffff,%eax
		call   ac_draw_sorted_sprite1a
		jmp    jump_27252
	jump_27177:
		testb  $0x8,0x46(%esi)
		je     jump_2721d
		xor    %edx,%edx
		mov    0x8(%esi),%dl
		cmp    $0x2,%edx
		jne    jump_2721d
		xor    %eax,%eax
		mov    %di,%ax
		mov    EXPORT_SYMBOL(game_sort_sprites),%edx
		shl    $0x4,%eax
		add    %edx,%eax
		xor    %dh,%dh
		mov    0xd(%eax),%dl
		mov    %edx,0x9c(%esp)
		mov    %dl,%al
		and    $0xff,%eax
		cmp    $0x2,%eax
		jl     jump_271c1
		xor    %eax,%eax
		mov    %dx,%ax
		cmp    $0x6,%eax
		jl     jump_271f2
	jump_271c1:
		xor    %eax,%eax
		mov    %di,%ax
		mov    EXPORT_SYMBOL(game_sort_sprites),%edx
		shl    $0x4,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    0xd(%eax),%dl
		mov    (%eax),%ecx
		push   %edx
		movswl (%eax),%ebx
		xor    %edx,%edx
		push   $0x20
		mov    0x6(%eax),%dx
		mov    0x8(%eax),%eax
		sar    $0x10,%ecx
		add    $0x74,%eax
		call   ac_draw_sorted_sprite1b
	jump_271f2:
		xor    %edx,%edx
		mov    0x9c(%esp),%dx
		mov    $0x20,%eax
		cmp    $0x2,%edx
		jl     jump_27252
		cmp    $0x6,%edx
		jge    jump_27252
		xor    %edx,%edx
		mov    %di,%dx
		mov    %edx,%ebx
		mov    EXPORT_SYMBOL(game_sort_sprites),%edx
		shl    $0x4,%ebx
		jmp    jump_2722b
	jump_2721d:
		xor    %edx,%edx
		mov    %di,%dx
		mov    EXPORT_SYMBOL(game_sort_sprites),%ebx
		shl    $0x4,%edx
	jump_2722b:
		add    %ebx,%edx
		xor    %ebx,%ebx
		mov    0xd(%edx),%bl
		push   %ebx
		and    $0xff,%eax
		mov    (%edx),%ecx
		movswl (%edx),%ebx
		movzwl 0x6(%edx),%ebp
		push   %eax
		mov    0x8(%edx),%eax
		sar    $0x10,%ecx
		add    $0x74,%eax
		mov    %ebp,%edx
		call   ac_draw_sorted_sprite1b
	jump_27252:
		mov    ingame__TrainMode,%eax
		xor    %edx,%edx
		sar    $0x10,%eax
		mov    0x51(%esi),%dl
		cmp    %eax,%edx
		je     jump_272d9
		testb  $0x2,0xc(%esi)
		je     jump_272a4
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    data_1a63e2(%eax),%eax
		sar    $0x10,%eax
		cmp    $0x1,%eax
		jge    jump_272d9
		movswl %di,%eax
		call   ac_check_mouse_overlap_corpse
		jmp    jump_272d9
	jump_272a4:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    data_1a63e2(%eax),%eax
		sar    $0x10,%eax
		cmp    $0x7,%eax
		jge    jump_272d9
		movswl %di,%eax
		call   ac_check_mouse_overlap
	jump_272d9:
		cmpb   $0x0,in_network_game
		je     jump_2736c
		mov    0xd(%esi),%dl
		xor    %eax,%eax
		test   $0x20,%dl
		je     jump_2730b
		xor    %edx,%edx
		mov    0x54(%esi),%dx
		mov    %edx,%ebx
		xor    %edx,%edx
		sar    $0x2,%ebx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		cmp    %edx,%ebx
		je     jump_2730b
		mov    %esi,%eax
		jmp    jump_2734f
	jump_2730b:
		testb  $0x8,0xe(%esi)
		je     jump_2734f
		xor    %edx,%edx
		mov    0x3c(%esi),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		testb  $0x20,0xd(%eax)
		je     jump_2734d
		xor    %edx,%edx
		mov    0x54(%eax),%dx
		mov    %edx,%ebx
		xor    %edx,%edx
		sar    $0x2,%ebx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		cmp    %edx,%ebx
		jne    jump_2734f
	jump_2734d:
		xor    %eax,%eax
	jump_2734f:
		test   %eax,%eax
		je     jump_2736c
		xor    %edx,%edx
		mov    0x99(%eax),%dl
		cmp    $0x1e,%edx
		je     jump_2736c
		movswl %di,%ebx
		mov    %eax,%edx
		mov    %ebx,%eax
		call   ac_check_mouse_over_unkn2
	jump_2736c:
		cmpw   $0x0,0xa0(%esp)
		je     jump_273e6
		xor    %eax,%eax
		push   $0x0
		mov    0xa4(%esp),%al
		push   %eax
		xor    %eax,%eax
		mov    %di,%ax
		mov    EXPORT_SYMBOL(game_sort_sprites),%edx
		shl    $0x4,%eax
		mov    (%edx,%eax,1),%ecx
		movswl (%edx,%eax,1),%ebx
		mov    0x16(%esi),%ax
		xor    %ah,%ah
		sar    $0x10,%ecx
		and    $0x3,%al
		and    $0xffff,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(shield_frm)(,%eax,2),%dx
		xor    %eax,%eax
		mov    0x16(%esi),%ax
		mov    gameturn,%ebp
		shl    $0x4,%eax
		add    %ebp,%eax
		shr    $0x2,%eax
		and    $0x7,%eax
		mov    %eax,0xa0(%esp)
		mov    0xa0(%esp),%ebp
		shl    $0x2,%eax
		add    %ebp,%eax
		add    $EXPORT_SYMBOL(byte_15399C),%eax
		call   ac_draw_sorted_sprite1b
	jump_273e6:
		cmpb   $0x0,EXPORT_SYMBOL(debug_hud_collision)
		je     jump_2743a
		xor    %eax,%eax
		mov    0x7d(%esi),%al
		push   %eax
		push   $ascD_20
		lea    0x8(%esp),%eax
		push   %eax
		call   ac_sprintf
		xor    %eax,%eax
		mov    %di,%ax
		mov    EXPORT_SYMBOL(game_sort_sprites),%edx
		shl    $0x4,%eax
		xor    %ecx,%ecx
		add    %edx,%eax
		lea    0xc(%esp),%ebx
		mov    EXPORT_SYMBOL(colour_lookup)+2,%cl
		mov    0x2(%eax),%dx
		add    $0xc,%esp
		sub    $0x25,%edx
		mov    (%eax),%ax
		add    %edx,%edx
		add    %eax,%eax
		movswl %dx,%edx
		cwtl
		call   ac_draw_text
	jump_2743a:
		testb  $0x1,0x47(%esi)
		je     jump_27477
		xor    %eax,%eax
		mov    %di,%ax
		mov    EXPORT_SYMBOL(game_sort_sprites),%edx
		shl    $0x4,%eax
		xor    %ecx,%ecx
		add    %edx,%eax
		mov    $ascE,%ebx
		mov    EXPORT_SYMBOL(colour_lookup)+2,%cl
		mov    0x2(%eax),%dx
		mov    (%eax),%ax
		sub    $0x25,%edx
		add    %eax,%eax
		add    %edx,%edx
		sub    $0x4,%eax
		movswl %dx,%edx
		cwtl
		call   ac_draw_text
	jump_27477:
		mov    EXPORT_SYMBOL(ingame)+0x000,%eax # ingame.GameMode
		sar    $0x10,%eax
		cmp    $0x32,%eax
		je     jump_274c2
		testb  $0x20,0x47(%esi)
		je     jump_274c2
		xor    %edx,%edx
		mov    %di,%dx
		mov    EXPORT_SYMBOL(game_sort_sprites),%eax
		shl    $0x4,%edx
		xor    %ecx,%ecx
		add    %edx,%eax
		mov    $ascB,%ebx
		mov    EXPORT_SYMBOL(colour_lookup)+2,%cl
		mov    0x2(%eax),%dx
		mov    (%eax),%ax
		sub    $0x25,%edx
		add    %eax,%eax
		add    %edx,%edx
		add    $0x4,%eax
		movswl %dx,%edx
		cwtl
		call   ac_draw_text
	jump_274c2:
		add    $0xa4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_sort_line)	/* 0x0274D0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    %eax,%esi
		testb  $0x3,0xa(%eax)
		je     jump_275fb
		mov    (%esi),%ax
		mov    0x4(%esi),%dx
		mov    0x6(%esi),%bx
		sub    %edx,%eax
		mov    0x2(%esi),%dx
		movswl %ax,%edi
		sub    %ebx,%edx
		test   %edi,%edi
		jge    jump_27505
		mov    %edi,%eax
		neg    %eax
		jmp    jump_27507
	jump_27505:
		mov    %edi,%eax
	jump_27507:
		movswl %dx,%edi
		test   %edi,%edi
		jge    jump_27510
		neg    %edi
	jump_27510:
		cmp    %edi,%eax
		jle    jump_27521
		mov    $0x1,%eax
		xor    %edi,%edi
		mov    %ax,(%esp)
		jmp    jump_2752c
	jump_27521:
		xor    %ecx,%ecx
		mov    $0x1,%edi
		mov    %cx,(%esp)
	jump_2752c:
		testb  $0x2,0xa(%esi)
		je     jump_2753b
		movw   $0x4,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
	jump_2753b:
		xor    %eax,%eax
		xor    %edx,%edx
		mov    0x9(%esi),%al
		mov    0x8(%esi),%dl
		shl    $0x8,%eax
		mov    EXPORT_SYMBOL(pixmap)(%edx,%eax,1),%al # pixmap.fade_table[?]
		and    $0xff,%eax
		mov    0x4(%esi),%ecx
		mov    0x2(%esi),%ebx
		mov    (%esi),%edx
		push   %eax
		sar    $0x10,%ecx
		sar    $0x10,%ebx
		sar    $0x10,%edx
		movswl (%esi),%eax
		call   ac_LbDrawLine
		xor    %eax,%eax
		mov    $0x4,%ebx
		mov    0x8(%esi),%al
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(pixmap)+0x1400(%eax),%al # pixmap.fade_table[0x1400+?]
		mov    -0x2(%esp),%ebp
		and    $0xff,%eax
		movswl %di,%edi
		mov    0x4(%esi),%ecx
		mov    0x2(%esi),%ebx
		mov    (%esi),%edx
		push   %eax
		sar    $0x10,%ecx
		sar    $0x10,%ebp
		sar    $0x10,%ebx
		sar    $0x10,%edx
		movswl (%esi),%eax
		add    %ebp,%ecx
		add    %edi,%ebx
		add    %ebp,%edx
		add    %edi,%eax
		call   ac_LbDrawLine
		xor    %eax,%eax
		mov    0x8(%esi),%al
		mov    EXPORT_SYMBOL(pixmap)+0x1400(%eax),%al # pixmap.fade_table[0x1400+?]
		and    $0xff,%eax
		mov    0x4(%esi),%ecx
		mov    0x2(%esi),%ebx
		mov    (%esi),%edx
		push   %eax
		sar    $0x10,%ecx
		sar    $0x10,%ebx
		sar    $0x10,%edx
		movswl (%esi),%eax
		sub    %ebp,%ecx
		sub    %edi,%ebx
		sub    %ebp,%edx
		sub    %edi,%eax
		call   ac_LbDrawLine
		xor    %ecx,%ecx
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_275fb:
		xor    %eax,%eax
		xor    %edx,%edx
		mov    0x9(%esi),%al
		mov    0x8(%esi),%dl
		shl    $0x8,%eax
		mov    EXPORT_SYMBOL(pixmap)(%edx,%eax,1),%al # pixmap.fade_table[?]
		and    $0xff,%eax
		mov    0x4(%esi),%ecx
		mov    0x2(%esi),%ebx
		mov    (%esi),%edx
		push   %eax
		sar    $0x10,%ecx
		sar    $0x10,%ebx
		sar    $0x10,%edx
		movswl (%esi),%eax
		call   ac_LbDrawLine
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_object_face3_textrd)	/* 0x027638 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x84,%esp
		mov    game_full_lights,%esi
		mov    game_quick_lights,%edi
		mov    %ax,0x80(%esp)
		xor    %eax,%eax
		mov    0x80(%esp),%ax
		mov    game_object_faces,%edx
		shl    $0x5,%eax
		add    %eax,%edx
		mov    0xa(%edx),%al
		mov    %edx,0x7c(%esp)
		mov    %al,EXPORT_SYMBOL(vec_colour)
		mov    0x9(%edx),%al
		mov    0x6(%edx),%dx
		mov    %al,EXPORT_SYMBOL(vec_mode)
		test   %dx,%dx
		je     jump_2775a
		mov    0x7c(%esp),%edx
		xor    %eax,%eax
		mov    0x6(%edx),%ax
		mov    game_face_textures,%edx
		shl    $0x4,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x6(%eax),%dl
		mov    EXPORT_SYMBOL(vec_tmap)(,%edx,4),%edx
		mov    %edx,EXPORT_SYMBOL(vec_map)
		mov    0x7c(%esp),%edx
		mov    0x8(%edx),%bl
		test   %bl,%bl
		je     jump_27710
		test   $0x2,%bl
		je     jump_276d1
		mov    EXPORT_SYMBOL(scratch_buf1),%edx
		mov    %edx,EXPORT_SYMBOL(vec_map)
	jump_276d1:
		mov    0x7c(%esp),%edx
		testb  $0x40,0x8(%edx)
		je     jump_27710
		mov    0x7c(%esp),%ebx
		xor    %edx,%edx
		mov    0xc(%ebx),%dx
		mov    gameturn,%ebx
		add    %ebx,%edx
		mov    %edx,%ebx
		and    $0x1ff,%ebx
		cmp    $0x100,%ebx
		jbe    jump_27710
		and    $0x3f,%edx
		cmpb   $0x0,EXPORT_SYMBOL(byte_153014)(%edx)
		jne    jump_27710
		movb   $0x5,EXPORT_SYMBOL(vec_mode)
	jump_27710:
		xor    %edx,%edx
		mov    (%eax),%dl
		shl    $0x10,%edx
		mov    %edx,0x30(%esp)
		xor    %edx,%edx
		mov    0x1(%eax),%dl
		shl    $0x10,%edx
		mov    %edx,0x34(%esp)
		xor    %edx,%edx
		mov    0x4(%eax),%dl
		shl    $0x10,%edx
		mov    %edx,0x8(%esp)
		xor    %edx,%edx
		mov    0x5(%eax),%dl
		shl    $0x10,%edx
		mov    %edx,0xc(%esp)
		xor    %edx,%edx
		mov    0x2(%eax),%dl
		shl    $0x10,%edx
		mov    %edx,0x58(%esp)
		mov    0x3(%eax),%al
		and    $0xff,%eax
		shl    $0x10,%eax
		mov    %eax,0x5c(%esp)
	jump_2775a:
		mov    0x7c(%esp),%eax
		xor    %edx,%edx
		mov    (%eax),%dx
		lea    0x0(,%edx,4),%eax
		mov    EXPORT_SYMBOL(game_object_points),%ecx
		add    %edx,%eax
		mov    (%ecx,%eax,2),%ax
		mov    EXPORT_SYMBOL(game_screen_point_pool),%edx
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(dword_176D00),%ebx
		movswl (%edx,%eax,8),%eax
		add    %eax,%ebx
		mov    0x7c(%esp),%eax
		mov    %ebx,0x28(%esp)
		xor    %ebx,%ebx
		mov    (%eax),%bx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		mov    (%ecx,%eax,2),%ax
		and    $0xffff,%eax
		mov    (%edx,%eax,8),%eax
		mov    EXPORT_SYMBOL(dword_176D04),%edx
		sar    $0x10,%eax
		add    %eax,%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		mov    %edx,0x2c(%esp)
		cmp    $0x2,%eax
		je     jump_27838
		test   %eax,%eax
		je     jump_27838
		mov    0x7c(%esp),%eax
		xor    %ebx,%ebx
		mov    0xe(%eax),%bx
		xor    %edx,%edx
		shl    $0x7,%ebx
		mov    0x14(%eax),%ax
		add    $0x100,%ebx
		test   %ax,%ax
		je     jump_27822
	jump_277f0:
		mov    %edx,%ecx
		inc    %edx
		cmp    $0x64,%ecx
		jge    jump_27822
		and    $0xffff,%eax
		imul   $0x6,%eax,%ecx
		lea    (%edi,%ecx,1),%eax
		xor    %ecx,%ecx
		mov    0x2(%eax),%cx
		shl    $0x5,%ecx
		add    %esi,%ecx
		movzwl (%eax),%ebp
		movswl (%ecx),%ecx
		imul   %ebp,%ecx
		mov    0x4(%eax),%ax
		add    %ecx,%ebx
		test   %ax,%ax
		jne    jump_277f0
	jump_27822:
		cmp    $0x7e00,%ebx
		jle    jump_2782f
		mov    $0x7f00,%ebx
	jump_2782f:
		shl    $0x7,%ebx
		mov    %ebx,0x38(%esp)
		jmp    jump_27840
	jump_27838:
		movl   $0x200000,0x38(%esp)
	jump_27840:
		mov    0x7c(%esp),%eax
		xor    %edx,%edx
		mov    0x4(%eax),%dx
		lea    0x0(,%edx,4),%eax
		mov    EXPORT_SYMBOL(game_object_points),%ebx
		add    %edx,%eax
		mov    (%ebx,%eax,2),%ax
		mov    EXPORT_SYMBOL(game_screen_point_pool),%edx
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(dword_176D00),%ecx
		movswl (%edx,%eax,8),%eax
		add    %eax,%ecx
		mov    0x7c(%esp),%eax
		mov    %ecx,(%esp)
		xor    %ecx,%ecx
		mov    0x4(%eax),%cx
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		add    %eax,%eax
		add    %eax,%ebx
		xor    %eax,%eax
		mov    (%ebx),%ax
		mov    (%edx,%eax,8),%eax
		mov    EXPORT_SYMBOL(dword_176D04),%edx
		sar    $0x10,%eax
		add    %eax,%edx
		xor    %eax,%eax
		mov    game_perspective,%al
		mov    %edx,0x4(%esp)
		cmp    $0x7,%eax
		jne    jump_278ca
		mov    0x38(%esp),%eax
		mov    $0x7,%dh
		sar    $0x10,%eax
		mov    %dh,EXPORT_SYMBOL(vec_mode)
		mov    %al,EXPORT_SYMBOL(vec_colour)
		jmp    jump_279dd
	jump_278ca:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		je     jump_27952
		test   %eax,%eax
		je     jump_27952
		mov    0x7c(%esp),%eax
		xor    %ebx,%ebx
		mov    0x12(%eax),%bx
		xor    %edx,%edx
		shl    $0x7,%ebx
		mov    0x18(%eax),%ax
		add    $0x100,%ebx
		test   %ax,%ax
		je     jump_2793c
	jump_27900:
		mov    %edx,%ecx
		inc    %edx
		cmp    $0x64,%ecx
		jge    jump_2793c
		xor    %ecx,%ecx
		mov    %ax,%cx
		imul   $0x6,%ecx,%ecx
		lea    (%edi,%ecx,1),%eax
		xor    %ecx,%ecx
		mov    0x2(%eax),%cx
		shl    $0x5,%ecx
		add    %esi,%ecx
		movswl (%ecx),%ecx
		mov    %ecx,0x78(%esp)
		xor    %ecx,%ecx
		mov    0x78(%esp),%ebp
		mov    (%eax),%cx
		imul   %ebp,%ecx
		mov    0x4(%eax),%ax
		add    %ecx,%ebx
		test   %ax,%ax
		jne    jump_27900
	jump_2793c:
		cmp    $0x7e00,%ebx
		jle    jump_27949
		mov    $0x7f00,%ebx
	jump_27949:
		shl    $0x7,%ebx
		mov    %ebx,0x10(%esp)
		jmp    jump_2795a
	jump_27952:
		movl   $0x200000,0x10(%esp)
	jump_2795a:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		je     jump_279d5
		test   %eax,%eax
		je     jump_279d5
		mov    0x7c(%esp),%eax
		xor    %ebx,%ebx
		mov    0x10(%eax),%bx
		xor    %edx,%edx
		shl    $0x7,%ebx
		mov    0x16(%eax),%ax
		add    $0x100,%ebx
		test   %ax,%ax
		je     jump_279bf
	jump_2798c:
		mov    %edx,%ecx
		inc    %edx
		cmp    $0x64,%ecx
		jge    jump_279bf
		and    $0xffff,%eax
		imul   $0x6,%eax,%eax
		mov    %edi,%ecx
		add    %edi,%eax
		xor    %edi,%ecx
		mov    0x2(%eax),%cx
		shl    $0x5,%ecx
		add    %esi,%ecx
		movzwl (%eax),%ebp
		movswl (%ecx),%ecx
		imul   %ebp,%ecx
		mov    0x4(%eax),%ax
		add    %ecx,%ebx
		test   %ax,%ax
		jne    jump_2798c
	jump_279bf:
		cmp    $0x7e00,%ebx
		jle    jump_279cc
		mov    $0x7f00,%ebx
	jump_279cc:
		shl    $0x7,%ebx
		mov    %ebx,0x60(%esp)
		jmp    jump_279dd
	jump_279d5:
		movl   $0x200000,0x60(%esp)
	jump_279dd:
		mov    0x7c(%esp),%eax
		xor    %edx,%edx
		mov    0x2(%eax),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_object_points),%edx
		mov    (%edx,%eax,2),%ax
		mov    EXPORT_SYMBOL(game_screen_point_pool),%ebx
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(dword_176D00),%ecx
		movswl (%ebx,%eax,8),%eax
		add    %eax,%ecx
		mov    0x7c(%esp),%eax
		mov    %ecx,0x50(%esp)
		xor    %ecx,%ecx
		mov    0x2(%eax),%cx
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		mov    (%edx,%eax,2),%ax
		and    $0xffff,%eax
		mov    (%ebx,%eax,8),%eax
		mov    EXPORT_SYMBOL(dword_176D04),%edx
		sar    $0x10,%eax
		add    %eax,%edx
		mov    EXPORT_SYMBOL(byte_19EC6F),%bl
		mov    %edx,0x54(%esp)
		test   %bl,%bl
		jne    jump_27a5e
		mov    $0x200000,%eax
		mov    %eax,0x38(%esp)
		mov    %eax,0x10(%esp)
		mov    %eax,0x60(%esp)
	jump_27a5e:
		mov    EXPORT_SYMBOL(dword_176D4C),%ecx
		mov    %esi,game_full_lights
		mov    %edi,game_quick_lights
		xor    %eax,%eax
		inc    %ecx
		mov    game_perspective,%al
		mov    %ecx,EXPORT_SYMBOL(dword_176D4C)
		cmp    $0x3,%eax
		jne    jump_27af2
		xor    %al,%al
		mov    0x60(%esp),%edx
		mov    %al,EXPORT_SYMBOL(vec_mode)
		xor    %eax,%eax
		sar    $0x10,%edx
		mov    EXPORT_SYMBOL(colour_lookup)+2,%al
		shl    $0x8,%edx
		lea    0x50(%esp),%ebx
		mov    EXPORT_SYMBOL(pixmap)(%edx,%eax,1),%al # pixmap.fade_table[?]
		mov    %esp,%edx
		mov    %al,EXPORT_SYMBOL(vec_colour)
		lea    0x28(%esp),%eax
		call   ac_draw_trigpoly
		mov    EXPORT_SYMBOL(colour_lookup)+3,%al
		mov    %al,EXPORT_SYMBOL(vec_colour)
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+184
		jne    jump_27b46
		lea    0x50(%esp),%edx
		lea    0x28(%esp),%eax
		call   ac_poly_line
		lea    0x50(%esp),%edx
		mov    %esp,%eax
		call   ac_poly_line
		mov    %esp,%edx
		lea    0x28(%esp),%eax
		call   ac_poly_line
		jmp    jump_27b46
	jump_27af2:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_27b05
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_27b05:
		lea    0x50(%esp),%ebx
		mov    %esp,%edx
		lea    0x28(%esp),%eax
		call   ac_draw_trigpoly
		mov    0x7c(%esp),%eax
		testb  $0x1,0x8(%eax)
		je     jump_27b46
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_27b31
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_27b31:
		mov    %esp,%ebx
		lea    0x50(%esp),%edx
		lea    0x28(%esp),%eax
		call   ac_draw_trigpoly
		incl   EXPORT_SYMBOL(dword_176D4C)
	jump_27b46:
		mov    0x7c(%esp),%eax
		testb  $0x4,0x8(%eax)
		je     jump_27b9a
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    data_1a63e2(%eax),%eax
		sar    $0x10,%eax
		cmp    $0x3,%eax
		jge    jump_27b9a
		push   $0x1
		mov    0x82(%esp),%ecx
		lea    0x54(%esp),%ebx
		lea    0x4(%esp),%edx
		lea    0x2c(%esp),%eax
		sar    $0x10,%ecx
		call   ac_check_mouse_over_face
	jump_27b9a:
		cmpb   $0x0,EXPORT_SYMBOL(byte_1C844E)
		je     jump_27ba8
		call   ac_swap_wscreen
	jump_27ba8:
		mov    game_full_lights,%esi
		add    $0x84,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_object_face3_deep_rdr)	/* 0x027BBC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		sub    $0x78,%esp
		mov    %eax,%esi
		xor    %eax,%eax
		mov    %si,%ax
		mov    game_object_faces,%ecx
		shl    $0x5,%eax
		add    %eax,%ecx
		xor    %edx,%edx
		mov    (%ecx),%dx
		lea    0x0(,%edx,4),%eax
		mov    EXPORT_SYMBOL(game_object_points),%ebx
		add    %edx,%eax
		mov    (%ebx,%eax,2),%ax
		mov    EXPORT_SYMBOL(game_screen_point_pool),%edx
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(dword_176D00),%edi
		movswl (%edx,%eax,8),%eax
		add    %eax,%edi
		mov    %edi,0x28(%esp)
		xor    %edi,%edi
		mov    (%ecx),%di
		lea    0x0(,%edi,4),%eax
		add    %edi,%eax
		mov    (%ebx,%eax,2),%ax
		and    $0xffff,%eax
		mov    (%edx,%eax,8),%eax
		mov    EXPORT_SYMBOL(dword_176D04),%edi
		sar    $0x10,%eax
		add    %eax,%edi
		mov    %edi,0x2c(%esp)
		xor    %edi,%edi
		mov    0x4(%ecx),%di
		lea    0x0(,%edi,4),%eax
		add    %edi,%eax
		mov    (%ebx,%eax,2),%ax
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(dword_176D00),%edi
		movswl (%edx,%eax,8),%eax
		add    %eax,%edi
		mov    %edi,(%esp)
		xor    %edi,%edi
		mov    0x4(%ecx),%di
		lea    0x0(,%edi,4),%eax
		add    %edi,%eax
		mov    (%ebx,%eax,2),%ax
		and    $0xffff,%eax
		mov    (%edx,%eax,8),%eax
		mov    EXPORT_SYMBOL(dword_176D04),%edi
		sar    $0x10,%eax
		add    %eax,%edi
		mov    %edi,0x4(%esp)
		xor    %edi,%edi
		mov    0x2(%ecx),%di
		lea    0x0(,%edi,4),%eax
		add    %edi,%eax
		mov    (%ebx,%eax,2),%ax
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(dword_176D00),%edi
		movswl (%edx,%eax,8),%eax
		add    %eax,%edi
		mov    %edi,0x50(%esp)
		xor    %edi,%edi
		mov    0x2(%ecx),%di
		lea    0x0(,%edi,4),%eax
		add    %edi,%eax
		mov    (%ebx,%eax,2),%ax
		and    $0xffff,%eax
		mov    (%edx,%eax,8),%eax
		mov    EXPORT_SYMBOL(dword_176D04),%edx
		sar    $0x10,%eax
		add    %eax,%edx
		mov    EXPORT_SYMBOL(deep_radar_line_col),%al
		mov    %edx,0x54(%esp)
		lea    0x50(%esp),%edx
		mov    %al,EXPORT_SYMBOL(vec_colour)
		lea    0x28(%esp),%eax
		call   ac_poly_line
		lea    0x50(%esp),%edx
		mov    %esp,%eax
		call   ac_poly_line
		mov    %esp,%edx
		lea    0x28(%esp),%eax
		call   ac_poly_line
		mov    EXPORT_SYMBOL(deep_radar_surface_col),%al
		lea    0x50(%esp),%ebx
		mov    %al,EXPORT_SYMBOL(vec_colour)
		mov    $0xf,%ah
		mov    %esp,%edx
		mov    %ah,EXPORT_SYMBOL(vec_mode)
		lea    0x28(%esp),%eax
		call   ac_draw_trigpoly
		testb  $0x4,0x8(%ecx)
		je     jump_27d6c
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    data_1a63e2(%eax),%eax
		sar    $0x10,%eax
		cmp    $0x3,%eax
		jge    jump_27d6c
		push   $0x1
		lea    0x54(%esp),%ebx
		lea    0x4(%esp),%edx
		lea    0x2c(%esp),%eax
		movswl %si,%ecx
		call   ac_check_mouse_over_face
	jump_27d6c:
		add    $0x78,%esp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_object_face4d_textrd)	/* 0x027D78 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xb0,%esp
		mov    game_full_lights,%esi
		mov    game_quick_lights,%edi
		mov    %ax,0xac(%esp)
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    game_object_faces4,%edx
		shl    $0x3,%eax
		add    %eax,%edx
		mov    0xc(%edx),%al
		mov    %edx,0xa8(%esp)
		mov    %al,EXPORT_SYMBOL(vec_colour)
		mov    0xb(%edx),%al
		mov    0x8(%edx),%dx
		mov    %al,EXPORT_SYMBOL(vec_mode)
		test   %dx,%dx
		je     jump_27ef4
		mov    0xa8(%esp),%eax
		xor    %edx,%edx
		mov    0x8(%eax),%dx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    game_textures,%edx
		add    %eax,%eax
		add    %eax,%edx
		xor    %eax,%eax
		mov    0x8(%edx),%al
		mov    EXPORT_SYMBOL(vec_tmap)(,%eax,4),%eax
		mov    %eax,EXPORT_SYMBOL(vec_map)
		mov    0xa8(%esp),%eax
		mov    %edx,0xa4(%esp)
		mov    0xa(%eax),%dl
		test   %dl,%dl
		je     jump_27e6f
		test   $0x2,%dl
		je     jump_27e2a
		mov    EXPORT_SYMBOL(scratch_buf1),%eax
		mov    %eax,EXPORT_SYMBOL(vec_map)
	jump_27e2a:
		mov    0xa8(%esp),%eax
		testb  $0x40,0xa(%eax)
		je     jump_27e6f
		mov    0xa8(%esp),%edx
		xor    %eax,%eax
		mov    0xe(%edx),%ax
		mov    gameturn,%edx
		add    %edx,%eax
		mov    %eax,%edx
		and    $0x1ff,%edx
		cmp    $0x100,%edx
		jbe    jump_27e6f
		and    $0x3f,%eax
		cmpb   $0x0,EXPORT_SYMBOL(byte_153014)(%eax)
		jne    jump_27e6f
		movb   $0x5,EXPORT_SYMBOL(vec_mode)
	jump_27e6f:
		mov    0xa8(%esp),%eax
		testb  $0x20,0xa(%eax)
		je     jump_27e99
		mov    0xa4(%esp),%edx
		xor    %eax,%eax
		mov    0x6(%edx),%al
		shl    $0x10,%eax
		mov    %eax,0x80(%esp)
		xor    %eax,%eax
		mov    0x7(%edx),%al
		jmp    jump_27eb4
	jump_27e99:
		mov    0xa4(%esp),%edx
		xor    %eax,%eax
		mov    0x4(%edx),%al
		shl    $0x10,%eax
		mov    %eax,0x80(%esp)
		xor    %eax,%eax
		mov    0x5(%edx),%al
	jump_27eb4:
		shl    $0x10,%eax
		mov    %eax,0x84(%esp)
		mov    0xa4(%esp),%edx
		xor    %eax,%eax
		mov    (%edx),%al
		shl    $0x10,%eax
		mov    %eax,0x58(%esp)
		xor    %eax,%eax
		mov    0x1(%edx),%al
		shl    $0x10,%eax
		mov    %eax,0x5c(%esp)
		xor    %eax,%eax
		mov    0x2(%edx),%al
		shl    $0x10,%eax
		mov    %eax,0x8(%esp)
		xor    %eax,%eax
		mov    0x3(%edx),%al
		shl    $0x10,%eax
		mov    %eax,0xc(%esp)
	jump_27ef4:
		mov    0xa8(%esp),%eax
		xor    %edx,%edx
		mov    (%eax),%dx
		lea    0x0(,%edx,4),%eax
		mov    EXPORT_SYMBOL(game_object_points),%ecx
		add    %edx,%eax
		mov    (%ecx,%eax,2),%ax
		mov    EXPORT_SYMBOL(game_screen_point_pool),%ebx
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(dword_176D00),%edx
		movswl (%ebx,%eax,8),%eax
		add    %eax,%edx
		mov    0xa8(%esp),%eax
		mov    %edx,0x50(%esp)
		xor    %edx,%edx
		mov    (%eax),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    (%ecx,%eax,2),%ax
		and    $0xffff,%eax
		mov    (%ebx,%eax,8),%eax
		mov    EXPORT_SYMBOL(dword_176D04),%edx
		sar    $0x10,%eax
		add    %eax,%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		mov    %edx,0x54(%esp)
		cmp    $0x2,%eax
		je     jump_27fe8
		mov    0xa8(%esp),%eax
		xor    %ebx,%ebx
		mov    0x10(%eax),%bx
		xor    %edx,%edx
		shl    $0x7,%ebx
		mov    0x18(%eax),%ax
		add    $0x100,%ebx
		test   %ax,%ax
		je     jump_27fd2
	jump_27f8f:
		mov    %edx,%ecx
		inc    %edx
		cmp    $0x64,%ecx
		jge    jump_27fd2
		and    $0xffff,%eax
		imul   $0x6,%eax,%eax
		mov    %edi,%ecx
		add    %edi,%eax
		xor    %edi,%ecx
		mov    0x2(%eax),%cx
		shl    $0x5,%ecx
		add    %esi,%ecx
		movswl (%ecx),%ecx
		mov    %ecx,0xa0(%esp)
		xor    %ecx,%ecx
		mov    0xa0(%esp),%ebp
		mov    (%eax),%cx
		imul   %ebp,%ecx
		mov    0x4(%eax),%ax
		add    %ecx,%ebx
		test   %ax,%ax
		jne    jump_27f8f
	jump_27fd2:
		cmp    $0x7e00,%ebx
		jle    jump_27fdf
		mov    $0x7f00,%ebx
	jump_27fdf:
		shl    $0x7,%ebx
		mov    %ebx,0x60(%esp)
		jmp    jump_27ff0
	jump_27fe8:
		movl   $0x200000,0x60(%esp)
	jump_27ff0:
		mov    0xa8(%esp),%eax
		xor    %edx,%edx
		mov    0x4(%eax),%dx
		lea    0x0(,%edx,4),%eax
		mov    EXPORT_SYMBOL(game_object_points),%ebx
		add    %edx,%eax
		mov    (%ebx,%eax,2),%ax
		mov    EXPORT_SYMBOL(game_screen_point_pool),%edx
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(dword_176D00),%ecx
		movswl (%edx,%eax,8),%eax
		add    %eax,%ecx
		mov    0xa8(%esp),%eax
		mov    %ecx,0x78(%esp)
		xor    %ecx,%ecx
		mov    0x4(%eax),%cx
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		add    %eax,%eax
		add    %eax,%ebx
		xor    %eax,%eax
		mov    (%ebx),%ax
		mov    (%edx,%eax,8),%eax
		mov    EXPORT_SYMBOL(dword_176D04),%edx
		sar    $0x10,%eax
		add    %eax,%edx
		xor    %eax,%eax
		mov    game_perspective,%al
		mov    %edx,0x7c(%esp)
		cmp    $0x7,%eax
		jne    jump_28080
		movb   $0x7,EXPORT_SYMBOL(vec_mode)
		mov    0x60(%esp),%eax
		sar    $0x10,%eax
		mov    %al,EXPORT_SYMBOL(vec_colour)
		jmp    jump_2822c
	jump_28080:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		je     jump_280fd
		mov    0xa8(%esp),%eax
		xor    %ebx,%ebx
		mov    0x14(%eax),%bx
		xor    %edx,%edx
		shl    $0x7,%ebx
		mov    0x1c(%eax),%ax
		add    $0x100,%ebx
		test   %ax,%ax
		je     jump_280e4
	jump_280b1:
		mov    %edx,%ecx
		inc    %edx
		cmp    $0x64,%ecx
		jge    jump_280e4
		and    $0xffff,%eax
		imul   $0x6,%eax,%eax
		mov    %edi,%ecx
		add    %edi,%eax
		xor    %edi,%ecx
		mov    0x2(%eax),%cx
		shl    $0x5,%ecx
		add    %esi,%ecx
		movzwl (%eax),%ebp
		movswl (%ecx),%ecx
		imul   %ebp,%ecx
		mov    0x4(%eax),%ax
		add    %ecx,%ebx
		test   %ax,%ax
		jne    jump_280b1
	jump_280e4:
		cmp    $0x7e00,%ebx
		jle    jump_280f1
		mov    $0x7f00,%ebx
	jump_280f1:
		shl    $0x7,%ebx
		mov    %ebx,0x88(%esp)
		jmp    jump_28108
	jump_280fd:
		movl   $0x200000,0x88(%esp)
	jump_28108:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		je     jump_28192
		mov    0xa8(%esp),%eax
		xor    %ebx,%ebx
		mov    0x12(%eax),%bx
		xor    %edx,%edx
		shl    $0x7,%ebx
		mov    0x1a(%eax),%ax
		add    $0x100,%ebx
		test   %ax,%ax
		je     jump_2817c
	jump_28139:
		mov    %edx,%ecx
		inc    %edx
		cmp    $0x64,%ecx
		jge    jump_2817c
		and    $0xffff,%eax
		imul   $0x6,%eax,%eax
		mov    %edi,%ecx
		add    %edi,%eax
		xor    %edi,%ecx
		mov    0x2(%eax),%cx
		shl    $0x5,%ecx
		add    %esi,%ecx
		movswl (%ecx),%ecx
		mov    %ecx,0xa0(%esp)
		xor    %ecx,%ecx
		mov    0xa0(%esp),%ebp
		mov    (%eax),%cx
		imul   %ebp,%ecx
		mov    0x4(%eax),%ax
		add    %ecx,%ebx
		test   %ax,%ax
		jne    jump_28139
	jump_2817c:
		cmp    $0x7e00,%ebx
		jle    jump_28189
		mov    $0x7f00,%ebx
	jump_28189:
		shl    $0x7,%ebx
		mov    %ebx,0x10(%esp)
		jmp    jump_2819a
	jump_28192:
		movl   $0x200000,0x10(%esp)
	jump_2819a:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		je     jump_28224
		mov    0xa8(%esp),%eax
		xor    %ebx,%ebx
		mov    0x16(%eax),%bx
		xor    %edx,%edx
		shl    $0x7,%ebx
		mov    0x1e(%eax),%ax
		add    $0x100,%ebx
		test   %ax,%ax
		je     jump_2820e
	jump_281cb:
		mov    %edx,%ecx
		inc    %edx
		cmp    $0x64,%ecx
		jge    jump_2820e
		and    $0xffff,%eax
		imul   $0x6,%eax,%eax
		mov    %edi,%ecx
		add    %edi,%eax
		xor    %edi,%ecx
		mov    0x2(%eax),%cx
		shl    $0x5,%ecx
		add    %esi,%ecx
		movswl (%ecx),%ecx
		mov    %ecx,0xa0(%esp)
		xor    %ecx,%ecx
		mov    0xa0(%esp),%ebp
		mov    (%eax),%cx
		imul   %ebp,%ecx
		mov    0x4(%eax),%ax
		add    %ecx,%ebx
		test   %ax,%ax
		jne    jump_281cb
	jump_2820e:
		cmp    $0x7e00,%ebx
		jle    jump_2821b
		mov    $0x7f00,%ebx
	jump_2821b:
		shl    $0x7,%ebx
		mov    %ebx,0x38(%esp)
		jmp    jump_2822c
	jump_28224:
		movl   $0x200000,0x38(%esp)
	jump_2822c:
		mov    0xa8(%esp),%eax
		xor    %edx,%edx
		mov    0x2(%eax),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_object_points),%edx
		mov    (%edx,%eax,2),%ax
		mov    EXPORT_SYMBOL(game_screen_point_pool),%ebx
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(dword_176D00),%ecx
		movswl (%ebx,%eax,8),%eax
		add    %eax,%ecx
		mov    0xa8(%esp),%eax
		mov    %ecx,(%esp)
		xor    %ecx,%ecx
		mov    0x2(%eax),%cx
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		mov    (%edx,%eax,2),%ax
		and    $0xffff,%eax
		mov    (%ebx,%eax,8),%eax
		mov    EXPORT_SYMBOL(dword_176D04),%ecx
		sar    $0x10,%eax
		add    %eax,%ecx
		mov    0xa8(%esp),%eax
		mov    %ecx,0x4(%esp)
		xor    %ecx,%ecx
		mov    0x6(%eax),%cx
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		mov    (%edx,%eax,2),%ax
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(dword_176D00),%ecx
		movswl (%ebx,%eax,8),%eax
		add    %eax,%ecx
		mov    0xa8(%esp),%eax
		mov    %ecx,0x28(%esp)
		xor    %ecx,%ecx
		mov    0x6(%eax),%cx
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		mov    (%edx,%eax,2),%ax
		and    $0xffff,%eax
		mov    (%ebx,%eax,8),%eax
		mov    EXPORT_SYMBOL(dword_176D04),%edx
		sar    $0x10,%eax
		add    %eax,%edx
		mov    EXPORT_SYMBOL(byte_19EC6F),%ah
		mov    %edx,0x2c(%esp)
		test   %ah,%ah
		jne    jump_28319
		mov    $0x200000,%eax
		mov    %eax,0x60(%esp)
		mov    %eax,0x88(%esp)
		mov    %eax,0x10(%esp)
		mov    %eax,0x38(%esp)
	jump_28319:
		mov    EXPORT_SYMBOL(dword_176D4C),%ebp
		mov    %esi,game_full_lights
		mov    %edi,game_quick_lights
		xor    %eax,%eax
		inc    %ebp
		mov    EXPORT_SYMBOL(vec_mode),%al
		mov    %ebp,EXPORT_SYMBOL(dword_176D4C)
		cmp    $0x2,%eax
		jne    jump_28345
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_28345:
		mov    %esp,%ebx
		lea    0x78(%esp),%edx
		lea    0x50(%esp),%eax
		call   ac_draw_trigpoly
		mov    0xa8(%esp),%eax
		testb  $0x1,0xa(%eax)
		je     jump_28383
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_28374
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_28374:
		lea    0x78(%esp),%ebx
		mov    %esp,%edx
		lea    0x50(%esp),%eax
		call   ac_draw_trigpoly
	jump_28383:
		mov    0xa8(%esp),%eax
		testb  $0x4,0xa(%eax)
		je     jump_283da
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    data_1a63e2(%eax),%eax
		sar    $0x10,%eax
		cmp    $0x3,%eax
		jge    jump_283da
		push   $0x2
		mov    0xae(%esp),%ecx
		lea    0x4(%esp),%ebx
		lea    0x7c(%esp),%edx
		lea    0x54(%esp),%eax
		sar    $0x10,%ecx
		call   ac_check_mouse_over_face
	jump_283da:
		mov    0xa8(%esp),%eax
		mov    game_quick_lights,%edi
		mov    0x8(%eax),%bx
		mov    game_full_lights,%esi
		test   %bx,%bx
		je     jump_28491
		testb  $0x20,0xa(%eax)
		je     jump_28435
		mov    0xa4(%esp),%edx
		xor    %eax,%eax
		mov    0x4(%edx),%al
		shl    $0x10,%eax
		mov    %eax,0x30(%esp)
		xor    %eax,%eax
		mov    0x5(%edx),%al
		shl    $0x10,%eax
		mov    %eax,0x34(%esp)
		xor    %eax,%eax
		mov    0x6(%edx),%al
		shl    $0x10,%eax
		mov    %eax,0x80(%esp)
		xor    %eax,%eax
		mov    0x7(%edx),%al
		jmp    jump_28468
	jump_28435:
		mov    0xa4(%esp),%edx
		xor    %eax,%eax
		mov    0x6(%edx),%al
		shl    $0x10,%eax
		mov    %eax,0x30(%esp)
		xor    %eax,%eax
		mov    0x7(%edx),%al
		shl    $0x10,%eax
		mov    %eax,0x34(%esp)
		xor    %eax,%eax
		mov    0x4(%edx),%al
		shl    $0x10,%eax
		mov    %eax,0x80(%esp)
		xor    %eax,%eax
		mov    0x5(%edx),%al
	jump_28468:
		shl    $0x10,%eax
		mov    %eax,0x84(%esp)
		mov    0xa4(%esp),%edx
		xor    %eax,%eax
		mov    0x2(%edx),%al
		shl    $0x10,%eax
		mov    %eax,0x8(%esp)
		xor    %eax,%eax
		mov    0x3(%edx),%al
		shl    $0x10,%eax
		mov    %eax,0xc(%esp)
	jump_28491:
		mov    EXPORT_SYMBOL(dword_176D4C),%edx
		mov    %esi,game_full_lights
		mov    %edi,game_quick_lights
		xor    %eax,%eax
		inc    %edx
		mov    EXPORT_SYMBOL(vec_mode),%al
		mov    %edx,EXPORT_SYMBOL(dword_176D4C)
		cmp    $0x2,%eax
		jne    jump_284bd
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_284bd:
		lea    0x78(%esp),%ebx
		mov    %esp,%edx
		lea    0x28(%esp),%eax
		call   ac_draw_trigpoly
		mov    0xa8(%esp),%eax
		testb  $0x1,0xa(%eax)
		je     jump_284fb
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_284ec
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_284ec:
		mov    %esp,%ebx
		lea    0x78(%esp),%edx
		lea    0x28(%esp),%eax
		call   ac_draw_trigpoly
	jump_284fb:
		mov    0xa8(%esp),%eax
		testb  $0x4,0xa(%eax)
		je     jump_28552
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    data_1a63e2(%eax),%eax
		sar    $0x10,%eax
		cmp    $0x3,%eax
		jge    jump_28552
		push   $0x3
		mov    0xae(%esp),%ecx
		lea    0x7c(%esp),%ebx
		lea    0x4(%esp),%edx
		lea    0x2c(%esp),%eax
		sar    $0x10,%ecx
		call   ac_check_mouse_over_face
	jump_28552:
		mov    game_full_lights,%esi
		add    $0xb0,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_object_face4_deep_rdr)	/* 0x028568 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		sub    $0xa0,%esp
		mov    %eax,%edi
		xor    %eax,%eax
		mov    %di,%ax
		mov    %eax,%edx
		shl    $0x2,%eax
		add    %edx,%eax
		mov    game_object_faces4,%esi
		shl    $0x3,%eax
		add    %eax,%esi
		xor    %edx,%edx
		mov    (%esi),%dx
		lea    0x0(,%edx,4),%eax
		add    %eax,%edx
		mov    EXPORT_SYMBOL(game_object_points),%eax
		add    %edx,%edx
		xor    %ebx,%ebx
		mov    (%edx,%eax,1),%bx
		mov    EXPORT_SYMBOL(game_screen_point_pool),%edx
		mov    EXPORT_SYMBOL(dword_176D00),%ecx
		movswl (%edx,%ebx,8),%ebx
		add    %ebx,%ecx
		mov    %ecx,0x28(%esp)
		xor    %ecx,%ecx
		mov    (%esi),%cx
		lea    0x0(,%ecx,4),%ebx
		add    %ecx,%ebx
		mov    (%eax,%ebx,2),%bx
		and    $0xffff,%ebx
		mov    (%edx,%ebx,8),%ebx
		mov    EXPORT_SYMBOL(dword_176D04),%ecx
		sar    $0x10,%ebx
		add    %ebx,%ecx
		mov    %ecx,0x2c(%esp)
		xor    %ecx,%ecx
		mov    0x4(%esi),%cx
		lea    0x0(,%ecx,4),%ebx
		add    %ecx,%ebx
		mov    (%eax,%ebx,2),%bx
		and    $0xffff,%ebx
		mov    EXPORT_SYMBOL(dword_176D00),%ecx
		movswl (%edx,%ebx,8),%ebx
		add    %ebx,%ecx
		mov    %ecx,0x50(%esp)
		xor    %ecx,%ecx
		mov    0x4(%esi),%cx
		lea    0x0(,%ecx,4),%ebx
		add    %ecx,%ebx
		mov    (%eax,%ebx,2),%bx
		and    $0xffff,%ebx
		mov    (%edx,%ebx,8),%ebx
		mov    EXPORT_SYMBOL(dword_176D04),%ecx
		sar    $0x10,%ebx
		add    %ebx,%ecx
		mov    %ecx,0x54(%esp)
		xor    %ecx,%ecx
		mov    0x2(%esi),%cx
		lea    0x0(,%ecx,4),%ebx
		add    %ecx,%ebx
		mov    (%eax,%ebx,2),%bx
		and    $0xffff,%ebx
		mov    EXPORT_SYMBOL(dword_176D00),%ecx
		movswl (%edx,%ebx,8),%ebx
		add    %ebx,%ecx
		mov    %ecx,0x78(%esp)
		xor    %ecx,%ecx
		mov    0x2(%esi),%cx
		lea    0x0(,%ecx,4),%ebx
		add    %ecx,%ebx
		mov    (%eax,%ebx,2),%bx
		and    $0xffff,%ebx
		mov    (%edx,%ebx,8),%ebx
		mov    EXPORT_SYMBOL(dword_176D04),%ecx
		sar    $0x10,%ebx
		add    %ebx,%ecx
		mov    %ecx,0x7c(%esp)
		xor    %ecx,%ecx
		mov    0x6(%esi),%cx
		lea    0x0(,%ecx,4),%ebx
		add    %ecx,%ebx
		mov    (%eax,%ebx,2),%bx
		and    $0xffff,%ebx
		mov    EXPORT_SYMBOL(dword_176D00),%ecx
		movswl (%edx,%ebx,8),%ebx
		add    %ebx,%ecx
		mov    %ecx,(%esp)
		xor    %ecx,%ecx
		mov    0x6(%esi),%cx
		lea    0x0(,%ecx,4),%ebx
		add    %ecx,%ebx
		mov    (%eax,%ebx,2),%ax
		and    $0xffff,%eax
		mov    (%edx,%eax,8),%eax
		mov    EXPORT_SYMBOL(dword_176D04),%edx
		sar    $0x10,%eax
		add    %eax,%edx
		mov    EXPORT_SYMBOL(deep_radar_surface_col),%al
		mov    %al,EXPORT_SYMBOL(vec_colour)
		mov    $0xf,%ah
		mov    %edx,0x4(%esp)
		mov    %ah,EXPORT_SYMBOL(vec_mode)
		lea    0x78(%esp),%ebx
		lea    0x50(%esp),%edx
		lea    0x28(%esp),%eax
		call   ac_draw_trigpoly
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_28717
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_28717:
		lea    0x50(%esp),%ebx
		lea    0x78(%esp),%edx
		mov    %esp,%eax
		call   ac_draw_trigpoly
		mov    EXPORT_SYMBOL(deep_radar_line_col),%al
		lea    0x50(%esp),%edx
		mov    %al,EXPORT_SYMBOL(vec_colour)
		lea    0x28(%esp),%eax
		call   ac_poly_line
		lea    0x28(%esp),%edx
		lea    0x78(%esp),%eax
		call   ac_poly_line
		testb  $0x4,0xa(%esi)
		je     jump_28793
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    data_1a63e2(%eax),%eax
		sar    $0x10,%eax
		cmp    $0x3,%eax
		jge    jump_28793
		push   $0x2
		lea    0x7c(%esp),%ebx
		lea    0x54(%esp),%edx
		lea    0x2c(%esp),%eax
		movswl %di,%ecx
		call   ac_check_mouse_over_face
	jump_28793:
		lea    0x78(%esp),%edx
		mov    %esp,%eax
		call   ac_poly_line
		lea    0x50(%esp),%edx
		mov    %esp,%eax
		call   ac_poly_line
		testb  $0x4,0xa(%esi)
		je     jump_287f2
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    data_1a63e2(%eax),%eax
		sar    $0x10,%eax
		cmp    $0x3,%eax
		jge    jump_287f2
		push   $0x3
		lea    0x54(%esp),%ebx
		lea    0x7c(%esp),%edx
		lea    0x4(%esp),%eax
		movswl %di,%ecx
		call   ac_check_mouse_over_face
	jump_287f2:
		add    $0xa0,%esp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_object_face4_pole)	/* 0x028800 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xa4,%esp
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    game_object_faces4,%edx
		shl    $0x3,%eax
		add    %eax,%edx
		mov    0xc(%edx),%al
		mov    %al,EXPORT_SYMBOL(vec_colour)
		mov    0xb(%edx),%al
		mov    0x8(%edx),%bx
		mov    %al,EXPORT_SYMBOL(vec_mode)
		test   %bx,%bx
		je     jump_288d5
		xor    %ebx,%ebx
		mov    0x8(%edx),%bx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		mov    game_textures,%ebx
		add    %eax,%eax
		add    %ebx,%eax
		xor    %ebx,%ebx
		mov    0x8(%eax),%bl
		mov    EXPORT_SYMBOL(vec_tmap)(,%ebx,4),%ebx
		mov    %ebx,EXPORT_SYMBOL(vec_map)
		xor    %ebx,%ebx
		mov    (%eax),%bl
		shl    $0x10,%ebx
		mov    %ebx,0x30(%esp)
		xor    %ebx,%ebx
		mov    0x1(%eax),%bl
		shl    $0x10,%ebx
		mov    %ebx,0x34(%esp)
		xor    %ebx,%ebx
		mov    0x2(%eax),%bl
		shl    $0x10,%ebx
		mov    %ebx,0x8(%esp)
		xor    %ebx,%ebx
		mov    0x3(%eax),%bl
		shl    $0x10,%ebx
		mov    %ebx,0xc(%esp)
		xor    %ebx,%ebx
		mov    0x4(%eax),%bl
		shl    $0x10,%ebx
		mov    %ebx,0x80(%esp)
		xor    %ebx,%ebx
		mov    0x5(%eax),%bl
		shl    $0x10,%ebx
		mov    %ebx,0x84(%esp)
		xor    %ebx,%ebx
		mov    0x6(%eax),%bl
		shl    $0x10,%ebx
		mov    %ebx,0x58(%esp)
		mov    0x7(%eax),%al
		and    $0xff,%eax
		shl    $0x10,%eax
		mov    %eax,0x5c(%esp)
	jump_288d5:
		mov    EXPORT_SYMBOL(overall_scale)-2,%eax
		movzwl 0x4(%edx),%ebp
		sar    $0x10,%eax
		imul   %eax,%ebp
		xor    %ebx,%ebx
		mov    0x6(%edx),%bx
		mov    %eax,%edi
		imul   %ebx,%edi
		xor    %ebx,%ebx
		mov    (%edx),%bx
		mov    EXPORT_SYMBOL(game_object_points),%ecx
		lea    0x0(,%ebx,4),%eax
		sar    $0x8,%ebp
		add    %ebx,%eax
		sar    $0x8,%edi
		mov    (%ecx,%eax,2),%ax
		mov    EXPORT_SYMBOL(game_screen_point_pool),%ebx
		and    $0xffff,%eax
		movswl (%ebx,%eax,8),%eax
		sub    %ebp,%eax
		mov    %eax,0x28(%esp)
		xor    %eax,%eax
		mov    (%edx),%ax
		mov    %eax,0xa0(%esp)
		mov    0xa0(%esp),%esi
		shl    $0x2,%eax
		add    %esi,%eax
		mov    (%ecx,%eax,2),%ax
		and    $0xffff,%eax
		mov    (%ebx,%eax,8),%eax
		sar    $0x10,%eax
		xor    %esi,%esi
		mov    %eax,0x2c(%esp)
		mov    (%edx),%si
		lea    0x0(,%esi,4),%eax
		add    %esi,%eax
		mov    (%ecx,%eax,2),%ax
		and    $0xffff,%eax
		movswl (%ebx,%eax,8),%eax
		add    %ebp,%eax
		xor    %esi,%esi
		mov    %eax,(%esp)
		mov    (%edx),%si
		lea    0x0(,%esi,4),%eax
		add    %esi,%eax
		mov    (%ecx,%eax,2),%ax
		and    $0xffff,%eax
		mov    (%ebx,%eax,8),%eax
		sar    $0x10,%eax
		xor    %esi,%esi
		mov    %eax,0x4(%esp)
		mov    0x2(%edx),%si
		lea    0x0(,%esi,4),%eax
		add    %esi,%eax
		add    %eax,%eax
		lea    (%eax,%ecx,1),%esi
		xor    %eax,%eax
		mov    (%esi),%ax
		movswl (%ebx,%eax,8),%eax
		add    %edi,%eax
		xor    %esi,%esi
		mov    %eax,0x78(%esp)
		mov    0x2(%edx),%si
		lea    0x0(,%esi,4),%eax
		add    %esi,%eax
		mov    (%ecx,%eax,2),%ax
		and    $0xffff,%eax
		mov    (%ebx,%eax,8),%eax
		sar    $0x10,%eax
		xor    %esi,%esi
		mov    %eax,0x7c(%esp)
		mov    0x2(%edx),%si
		lea    0x0(,%esi,4),%eax
		add    %esi,%eax
		mov    (%ecx,%eax,2),%ax
		and    $0xffff,%eax
		movswl (%ebx,%eax,8),%eax
		sub    %edi,%eax
		mov    %eax,0x50(%esp)
		mov    0x2(%edx),%dx
		and    $0xffff,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		add    %eax,%eax
		add    %eax,%ecx
		xor    %eax,%eax
		mov    (%ecx),%ax
		mov    (%ebx,%eax,8),%eax
		sar    $0x10,%eax
		mov    %eax,0x54(%esp)
		mov    $0x200000,%edi
		mov    EXPORT_SYMBOL(dword_176D4C),%ebx
		mov    %edi,0x38(%esp)
		mov    %edi,0x10(%esp)
		mov    %edi,%eax
		mov    %edi,0x88(%esp)
		mov    %edi,0x60(%esp)
		xor    %edi,%eax
		inc    %ebx
		mov    EXPORT_SYMBOL(vec_mode),%al
		mov    %ebx,EXPORT_SYMBOL(dword_176D4C)
		cmp    $0x2,%eax
		jne    jump_28a55
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_28a55:
		lea    0x28(%esp),%ebx
		mov    %esp,%edx
		lea    0x78(%esp),%eax
		call   ac_draw_trigpoly
		mov    EXPORT_SYMBOL(dword_176D4C),%ecx
		xor    %eax,%eax
		inc    %ecx
		mov    EXPORT_SYMBOL(vec_mode),%al
		mov    %ecx,EXPORT_SYMBOL(dword_176D4C)
		cmp    $0x2,%eax
		jne    jump_28a84
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_28a84:
		lea    0x28(%esp),%ebx
		lea    0x78(%esp),%edx
		lea    0x50(%esp),%eax
		call   ac_draw_trigpoly
		add    $0xa4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_object_face4g_textrd)	/* 0x028AA4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xa0,%esp
		mov    %eax,%edx
		xor    %ebx,%ebx
		mov    %ax,%bx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		mov    game_object_faces4,%ecx
		shl    $0x3,%eax
		add    %eax,%ecx
		mov    0xc(%ecx),%al
		mov    %al,EXPORT_SYMBOL(vec_colour)
		mov    0xb(%ecx),%al
		mov    0x8(%ecx),%bx
		mov    %al,EXPORT_SYMBOL(vec_mode)
		test   %bx,%bx
		je     jump_28bbc
		xor    %ebx,%ebx
		mov    0x8(%ecx),%bx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		mov    game_textures,%esi
		add    %eax,%eax
		add    %eax,%esi
		xor    %eax,%eax
		mov    0x8(%esi),%al
		mov    EXPORT_SYMBOL(vec_tmap)(,%eax,4),%eax
		mov    %eax,EXPORT_SYMBOL(vec_map)
		testb  $0x2,0xa(%ecx)
		je     jump_28b22
		mov    EXPORT_SYMBOL(scratch_buf1),%eax
		mov    %eax,EXPORT_SYMBOL(vec_map)
	jump_28b22:
		testb  $0x42,0xa(%ecx)
		je     jump_28b56
		xor    %eax,%eax
		mov    0xe(%ecx),%ax
		mov    gameturn,%ebx
		shl    $0x2,%eax
		add    %ebx,%eax
		and    $0xf,%eax
		cmp    $0x7,%eax
		jbe    jump_28b4f
		xor    %al,%al
		mov    %al,EXPORT_SYMBOL(vec_colour)
		mov    %al,EXPORT_SYMBOL(vec_mode)
		jmp    jump_28b56
	jump_28b4f:
		movb   $0x2,EXPORT_SYMBOL(vec_mode)
	jump_28b56:
		testb  $0x20,0xa(%ecx)
		je     jump_28b6f
		xor    %eax,%eax
		mov    0x6(%esi),%al
		shl    $0x10,%eax
		mov    %eax,0x58(%esp)
		xor    %eax,%eax
		mov    0x7(%esi),%al
		jmp    jump_28b80
	jump_28b6f:
		xor    %eax,%eax
		mov    0x4(%esi),%al
		shl    $0x10,%eax
		mov    %eax,0x58(%esp)
		xor    %eax,%eax
		mov    0x5(%esi),%al
	jump_28b80:
		shl    $0x10,%eax
		mov    %eax,0x5c(%esp)
		xor    %eax,%eax
		mov    (%esi),%al
		shl    $0x10,%eax
		mov    %eax,0x80(%esp)
		xor    %eax,%eax
		mov    0x1(%esi),%al
		shl    $0x10,%eax
		mov    %eax,0x84(%esp)
		xor    %eax,%eax
		mov    0x2(%esi),%al
		shl    $0x10,%eax
		mov    %eax,0x30(%esp)
		xor    %eax,%eax
		mov    0x3(%esi),%al
		shl    $0x10,%eax
		mov    %eax,0x34(%esp)
	jump_28bbc:
		xor    %ebx,%ebx
		mov    (%ecx),%bx
		lea    0x0(,%ebx,4),%eax
		mov    EXPORT_SYMBOL(game_object_points),%edi
		add    %ebx,%eax
		mov    (%edi,%eax,2),%ax
		mov    EXPORT_SYMBOL(game_screen_point_pool),%ebp
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(dword_176D00),%ebx
		movswl 0x0(%ebp,%eax,8),%eax
		add    %eax,%ebx
		mov    %ebx,0x78(%esp)
		xor    %ebx,%ebx
		mov    (%ecx),%bx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		mov    (%edi,%eax,2),%ax
		and    $0xffff,%eax
		mov    0x0(%ebp,%eax,8),%eax
		mov    EXPORT_SYMBOL(dword_176D04),%ebx
		sar    $0x10,%eax
		add    %eax,%ebx
		mov    data_180c59,%eax
		sar    $0x10,%eax
		mov    %ebx,0x7c(%esp)
		test   %eax,%eax
		jne    jump_28c2d
		mov    %dx,ingame__draw_unknprop_01
	jump_28c2d:
		xor    %eax,%eax
		mov    0x10(%ecx),%ax
		mov    game_normals,%edx
		shl    $0x4,%eax
		mov    0xc(%edx,%eax,1),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_28c49
		xor    %eax,%eax
	jump_28c49:
		shl    $0xe,%eax
		xor    %edx,%edx
		mov    %eax,0x88(%esp)
		mov    0x4(%ecx),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_object_points),%edx
		mov    (%edx,%eax,2),%ax
		mov    EXPORT_SYMBOL(game_screen_point_pool),%ebx
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(dword_176D00),%edi
		movswl (%ebx,%eax,8),%eax
		add    %eax,%edi
		mov    %edi,0x50(%esp)
		xor    %edi,%edi
		mov    0x4(%ecx),%di
		lea    0x0(,%edi,4),%eax
		add    %edi,%eax
		mov    (%edx,%eax,2),%ax
		and    $0xffff,%eax
		mov    (%ebx,%eax,8),%eax
		mov    EXPORT_SYMBOL(dword_176D04),%edx
		sar    $0x10,%eax
		add    %eax,%edx
		mov    %edx,0x54(%esp)
		xor    %eax,%eax
		mov    0x14(%ecx),%ax
		mov    game_normals,%edx
		shl    $0x4,%eax
		mov    0xc(%edx,%eax,1),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_28ccd
		xor    %eax,%eax
	jump_28ccd:
		shl    $0xe,%eax
		xor    %edx,%edx
		mov    %eax,0x60(%esp)
		mov    0x2(%ecx),%dx
		lea    0x0(,%edx,4),%eax
		mov    EXPORT_SYMBOL(game_object_points),%edi
		add    %edx,%eax
		mov    (%edi,%eax,2),%ax
		mov    EXPORT_SYMBOL(game_screen_point_pool),%ebx
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(dword_176D00),%edx
		movswl (%ebx,%eax,8),%eax
		add    %eax,%edx
		mov    %edx,0x28(%esp)
		xor    %edx,%edx
		mov    0x2(%ecx),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    (%edi,%eax,2),%ax
		and    $0xffff,%eax
		mov    (%ebx,%eax,8),%eax
		mov    EXPORT_SYMBOL(dword_176D04),%edx
		sar    $0x10,%eax
		add    %eax,%edx
		mov    %edx,0x2c(%esp)
		xor    %eax,%eax
		mov    0x12(%ecx),%ax
		mov    game_normals,%edx
		shl    $0x4,%eax
		mov    0xc(%edx,%eax,1),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_28d4e
		xor    %eax,%eax
	jump_28d4e:
		shl    $0xe,%eax
		xor    %edx,%edx
		mov    %eax,0x38(%esp)
		mov    0x6(%ecx),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_object_points),%edx
		mov    (%edx,%eax,2),%ax
		mov    EXPORT_SYMBOL(game_screen_point_pool),%edi
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(dword_176D00),%ebx
		movswl (%edi,%eax,8),%eax
		add    %eax,%ebx
		mov    %ebx,(%esp)
		xor    %ebx,%ebx
		mov    0x6(%ecx),%bx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		mov    (%edx,%eax,2),%ax
		and    $0xffff,%eax
		mov    (%edi,%eax,8),%eax
		mov    EXPORT_SYMBOL(dword_176D04),%edx
		sar    $0x10,%eax
		add    %eax,%edx
		mov    %edx,0x4(%esp)
		xor    %eax,%eax
		mov    0x16(%ecx),%ax
		mov    %eax,%edx
		mov    game_normals,%eax
		shl    $0x4,%edx
		mov    0xc(%edx,%eax,1),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_28dcf
		xor    %eax,%eax
	jump_28dcf:
		shl    $0xe,%eax
		mov    %eax,0x10(%esp)
		xor    %eax,%eax
		mov    0x20(%ecx),%edx
		mov    0xa(%ecx),%al
		sar    $0x10,%edx
		sar    $0x2,%eax
		add    %edx,%eax
		and    $0x7,%eax
		je     jump_28e4b
		mov    0x88(%esp),%edx
		imul   %eax,%edx
		mov    %edx,0x88(%esp)
		mov    0x60(%esp),%edx
		imul   %eax,%edx
		mov    %edx,0x60(%esp)
		mov    0x38(%esp),%edx
		imul   %eax,%edx
		mov    %edx,0x38(%esp)
		mov    0x10(%esp),%edx
		imul   %eax,%edx
		mov    0x88(%esp),%edi
		mov    0x60(%esp),%ebp
		sar    $0x3,%edi
		sar    $0x3,%ebp
		mov    %edi,0x88(%esp)
		mov    %ebp,0x60(%esp)
		mov    0x38(%esp),%eax
		mov    %edx,0x10(%esp)
		sar    $0x3,%eax
		sar    $0x3,%edx
		mov    %eax,0x38(%esp)
		mov    %edx,0x10(%esp)
	jump_28e4b:
		mov    EXPORT_SYMBOL(dword_176D4C),%ebx
		xor    %eax,%eax
		inc    %ebx
		mov    EXPORT_SYMBOL(vec_mode),%al
		mov    %ebx,EXPORT_SYMBOL(dword_176D4C)
		cmp    $0x2,%eax
		jne    jump_28e6b
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_28e6b:
		lea    0x28(%esp),%ebx
		lea    0x50(%esp),%edx
		lea    0x78(%esp),%eax
		call   ac_draw_trigpoly
		testb  $0x1,0xa(%ecx)
		je     jump_28ea6
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_28e95
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_28e95:
		lea    0x50(%esp),%ebx
		lea    0x28(%esp),%edx
		lea    0x78(%esp),%eax
		call   ac_draw_trigpoly
	jump_28ea6:
		cmpw   $0x0,0x8(%ecx)
		je     jump_28f2a
		testb  $0x20,0xa(%ecx)
		je     jump_28ee2
		xor    %eax,%eax
		mov    0x4(%esi),%al
		shl    $0x10,%eax
		mov    %eax,0x8(%esp)
		xor    %eax,%eax
		mov    0x5(%esi),%al
		shl    $0x10,%eax
		mov    %eax,0xc(%esp)
		xor    %eax,%eax
		mov    0x6(%esi),%al
		shl    $0x10,%eax
		mov    %eax,0x58(%esp)
		xor    %eax,%eax
		mov    0x7(%esi),%al
		jmp    jump_28f0b
	jump_28ee2:
		xor    %eax,%eax
		mov    0x6(%esi),%al
		shl    $0x10,%eax
		mov    %eax,0x8(%esp)
		xor    %eax,%eax
		mov    0x7(%esi),%al
		shl    $0x10,%eax
		mov    %eax,0xc(%esp)
		xor    %eax,%eax
		mov    0x4(%esi),%al
		shl    $0x10,%eax
		mov    %eax,0x58(%esp)
		xor    %eax,%eax
		mov    0x5(%esi),%al
	jump_28f0b:
		shl    $0x10,%eax
		mov    %eax,0x5c(%esp)
		xor    %eax,%eax
		mov    0x2(%esi),%al
		shl    $0x10,%eax
		mov    %eax,0x30(%esp)
		xor    %eax,%eax
		mov    0x3(%esi),%al
		shl    $0x10,%eax
		mov    %eax,0x34(%esp)
	jump_28f2a:
		mov    EXPORT_SYMBOL(dword_176D4C),%esi
		xor    %eax,%eax
		inc    %esi
		mov    EXPORT_SYMBOL(vec_mode),%al
		mov    %esi,EXPORT_SYMBOL(dword_176D4C)
		cmp    $0x2,%eax
		jne    jump_28f4a
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_28f4a:
		lea    0x50(%esp),%ebx
		lea    0x28(%esp),%edx
		mov    %esp,%eax
		call   ac_draw_trigpoly
		testb  $0x1,0xa(%ecx)
		je     jump_28f81
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_28f72
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_28f72:
		lea    0x28(%esp),%ebx
		lea    0x50(%esp),%edx
		mov    %esp,%eax
		call   ac_draw_trigpoly
	jump_28f81:
		add    $0xa0,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_object_face4_reflect)	/* 0x028F90 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		sub    $0xa0,%esp
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    game_object_faces4,%ecx
		shl    $0x3,%eax
		add    %eax,%ecx
		mov    0xc(%ecx),%al
		mov    %al,EXPORT_SYMBOL(vec_colour)
		mov    EXPORT_SYMBOL(vec_tmap)+16,%eax
		mov    %eax,EXPORT_SYMBOL(vec_map)
		xor    %eax,%eax
		mov    0x10(%ecx),%ax
		mov    %eax,%edx
		mov    game_normals,%eax
		shl    $0x4,%edx
		mov    0x9(%edx,%eax,1),%edx
		sar    $0x18,%edx
		add    $0x20,%edx
		shl    $0x10,%edx
		mov    %edx,0x30(%esp)
		xor    %edx,%edx
		mov    0x10(%ecx),%dx
		shl    $0x4,%edx
		mov    0xa(%edx,%eax,1),%edx
		sar    $0x18,%edx
		add    $0x80,%edx
		shl    $0x10,%edx
		mov    %edx,0x34(%esp)
		xor    %edx,%edx
		mov    0x14(%ecx),%dx
		shl    $0x4,%edx
		mov    0x9(%edx,%eax,1),%edx
		sar    $0x18,%edx
		add    $0x20,%edx
		shl    $0x10,%edx
		mov    %edx,0x80(%esp)
		xor    %edx,%edx
		mov    0x14(%ecx),%dx
		shl    $0x4,%edx
		mov    0xa(%edx,%eax,1),%edx
		sar    $0x18,%edx
		add    $0x80,%edx
		shl    $0x10,%edx
		mov    %edx,0x84(%esp)
		xor    %edx,%edx
		mov    0x12(%ecx),%dx
		shl    $0x4,%edx
		mov    0x9(%edx,%eax,1),%edx
		sar    $0x18,%edx
		add    $0x20,%edx
		shl    $0x10,%edx
		mov    %edx,0x58(%esp)
		xor    %edx,%edx
		mov    0x12(%ecx),%dx
		shl    $0x4,%edx
		mov    0xa(%edx,%eax,1),%edx
		sar    $0x18,%edx
		add    $0x80,%edx
		shl    $0x10,%edx
		mov    %edx,0x5c(%esp)
		xor    %edx,%edx
		mov    0x16(%ecx),%dx
		shl    $0x4,%edx
		mov    0x9(%edx,%eax,1),%edx
		sar    $0x18,%edx
		add    $0x20,%edx
		shl    $0x10,%edx
		mov    %edx,0x8(%esp)
		xor    %edx,%edx
		mov    0x16(%ecx),%dx
		shl    $0x4,%edx
		mov    0xa(%edx,%eax,1),%eax
		sar    $0x18,%eax
		add    $0x80,%eax
		shl    $0x10,%eax
		xor    %edx,%edx
		mov    %eax,0xc(%esp)
		mov    (%ecx),%dx
		lea    0x0(,%edx,4),%eax
		add    %eax,%edx
		mov    EXPORT_SYMBOL(game_object_points),%eax
		add    %edx,%edx
		mov    (%edx,%eax,1),%dx
		and    $0xffff,%edx
		lea    0x0(,%edx,8),%ebx
		mov    EXPORT_SYMBOL(game_screen_point_pool),%edx
		mov    EXPORT_SYMBOL(dword_176D00),%esi
		movswl (%edx,%ebx,1),%ebx
		add    %ebx,%esi
		mov    %esi,0x28(%esp)
		xor    %esi,%esi
		mov    (%ecx),%si
		lea    0x0(,%esi,4),%ebx
		add    %esi,%ebx
		mov    (%eax,%ebx,2),%bx
		and    $0xffff,%ebx
		mov    (%edx,%ebx,8),%ebx
		mov    EXPORT_SYMBOL(dword_176D04),%esi
		sar    $0x10,%ebx
		add    %ebx,%esi
		mov    %esi,0x2c(%esp)
		xor    %esi,%esi
		mov    0x4(%ecx),%si
		lea    0x0(,%esi,4),%ebx
		add    %esi,%ebx
		mov    (%eax,%ebx,2),%bx
		and    $0xffff,%ebx
		mov    EXPORT_SYMBOL(dword_176D00),%esi
		movswl (%edx,%ebx,8),%ebx
		add    %ebx,%esi
		mov    %esi,0x78(%esp)
		xor    %esi,%esi
		mov    0x4(%ecx),%si
		lea    0x0(,%esi,4),%ebx
		add    %esi,%ebx
		mov    (%eax,%ebx,2),%bx
		and    $0xffff,%ebx
		mov    (%edx,%ebx,8),%ebx
		mov    EXPORT_SYMBOL(dword_176D04),%esi
		sar    $0x10,%ebx
		add    %ebx,%esi
		mov    %esi,0x7c(%esp)
		xor    %esi,%esi
		mov    0x2(%ecx),%si
		lea    0x0(,%esi,4),%ebx
		add    %esi,%ebx
		mov    (%eax,%ebx,2),%bx
		and    $0xffff,%ebx
		mov    EXPORT_SYMBOL(dword_176D00),%esi
		movswl (%edx,%ebx,8),%ebx
		add    %ebx,%esi
		mov    %esi,0x50(%esp)
		xor    %esi,%esi
		mov    0x2(%ecx),%si
		lea    0x0(,%esi,4),%ebx
		add    %esi,%ebx
		mov    (%eax,%ebx,2),%bx
		and    $0xffff,%ebx
		mov    (%edx,%ebx,8),%ebx
		mov    EXPORT_SYMBOL(dword_176D04),%esi
		sar    $0x10,%ebx
		add    %ebx,%esi
		mov    %esi,0x54(%esp)
		xor    %esi,%esi
		mov    0x6(%ecx),%si
		lea    0x0(,%esi,4),%ebx
		add    %esi,%ebx
		mov    (%eax,%ebx,2),%bx
		and    $0xffff,%ebx
		mov    EXPORT_SYMBOL(dword_176D00),%esi
		movswl (%edx,%ebx,8),%ebx
		add    %ebx,%esi
		mov    %esi,(%esp)
		xor    %esi,%esi
		mov    0x6(%ecx),%si
		lea    0x0(,%esi,4),%ebx
		add    %esi,%ebx
		mov    (%eax,%ebx,2),%ax
		and    $0xffff,%eax
		mov    (%edx,%eax,8),%eax
		mov    EXPORT_SYMBOL(dword_176D04),%edx
		sar    $0x10,%eax
		lea    0x50(%esp),%ebx
		add    %eax,%edx
		mov    $0x1b,%ah
		mov    %edx,0x4(%esp)
		mov    EXPORT_SYMBOL(dword_176D4C),%edx
		mov    %ah,EXPORT_SYMBOL(vec_mode)
		inc    %edx
		lea    0x28(%esp),%eax
		mov    %edx,EXPORT_SYMBOL(dword_176D4C)
		lea    0x78(%esp),%edx
		call   ac_draw_trigpoly
		testb  $0x1,0xa(%ecx)
		je     jump_2925d
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_2924c
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_2924c:
		lea    0x78(%esp),%ebx
		lea    0x50(%esp),%edx
		lea    0x28(%esp),%eax
		call   ac_draw_trigpoly
	jump_2925d:
		mov    EXPORT_SYMBOL(dword_176D4C),%ebx
		xor    %eax,%eax
		inc    %ebx
		mov    EXPORT_SYMBOL(vec_mode),%al
		mov    %ebx,EXPORT_SYMBOL(dword_176D4C)
		cmp    $0x2,%eax
		jne    jump_2927d
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_2927d:
		lea    0x78(%esp),%ebx
		lea    0x50(%esp),%edx
		mov    %esp,%eax
		call   ac_draw_trigpoly
		testb  $0x1,0xa(%ecx)
		je     jump_292b4
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_292a5
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_292a5:
		lea    0x50(%esp),%ebx
		lea    0x78(%esp),%edx
		mov    %esp,%eax
		call   ac_draw_trigpoly
	jump_292b4:
		add    $0xa0,%esp
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_object_face3g_textrd)	/* 0x0292C0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x78,%esp
		and    $0xffff,%eax
		mov    game_object_faces,%ecx
		shl    $0x5,%eax
		add    %eax,%ecx
		mov    0xa(%ecx),%al
		mov    %al,EXPORT_SYMBOL(vec_colour)
		mov    0x9(%ecx),%al
		mov    0x6(%ecx),%dx
		mov    %al,EXPORT_SYMBOL(vec_mode)
		test   %dx,%dx
		je     jump_2939f
		xor    %eax,%eax
		mov    %dx,%ax
		mov    game_face_textures,%edx
		shl    $0x4,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x6(%eax),%dl
		mov    EXPORT_SYMBOL(vec_tmap)(,%edx,4),%edx
		mov    %edx,EXPORT_SYMBOL(vec_map)
		mov    0x8(%ecx),%dl
		test   %dl,%dl
		je     jump_29353
		test   $0x2,%dl
		je     jump_29330
		mov    EXPORT_SYMBOL(scratch_buf1),%edx
		mov    %edx,EXPORT_SYMBOL(vec_map)
	jump_29330:
		testb  $0x40,0x8(%ecx)
		je     jump_29353
		xor    %edx,%edx
		mov    gameturn,%ebx
		mov    0xc(%ecx),%dx
		add    %ebx,%edx
		and    $0x1f,%edx
		cmp    $0x10,%edx
		jbe    jump_29353
		movb   $0x5,EXPORT_SYMBOL(vec_mode)
	jump_29353:
		xor    %edx,%edx
		mov    (%eax),%dl
		shl    $0x10,%edx
		mov    %edx,0x8(%esp)
		xor    %edx,%edx
		mov    0x1(%eax),%dl
		shl    $0x10,%edx
		mov    %edx,0xc(%esp)
		xor    %edx,%edx
		mov    0x4(%eax),%dl
		shl    $0x10,%edx
		mov    %edx,0x58(%esp)
		xor    %edx,%edx
		mov    0x5(%eax),%dl
		shl    $0x10,%edx
		mov    %edx,0x5c(%esp)
		xor    %edx,%edx
		mov    0x2(%eax),%dl
		shl    $0x10,%edx
		mov    %edx,0x30(%esp)
		mov    0x3(%eax),%al
		and    $0xff,%eax
		shl    $0x10,%eax
		mov    %eax,0x34(%esp)
		jmp    jump_293a6
	jump_2939f:
		movb   $0x4,EXPORT_SYMBOL(vec_mode)
	jump_293a6:
		xor    %edx,%edx
		mov    (%ecx),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_object_points),%edx
		mov    (%edx,%eax,2),%ax
		mov    EXPORT_SYMBOL(game_screen_point_pool),%ebx
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(dword_176D00),%esi
		movswl (%ebx,%eax,8),%eax
		add    %eax,%esi
		mov    %esi,(%esp)
		xor    %esi,%esi
		mov    (%ecx),%si
		lea    0x0(,%esi,4),%eax
		add    %esi,%eax
		mov    (%edx,%eax,2),%ax
		and    $0xffff,%eax
		mov    (%ebx,%eax,8),%eax
		mov    EXPORT_SYMBOL(dword_176D04),%edx
		sar    $0x10,%eax
		add    %eax,%edx
		mov    %edx,0x4(%esp)
		xor    %eax,%eax
		mov    0xe(%ecx),%ax
		mov    game_normals,%edx
		shl    $0x4,%eax
		mov    0xc(%edx,%eax,1),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_2941d
		xor    %eax,%eax
	jump_2941d:
		shl    $0xe,%eax
		xor    %edx,%edx
		mov    %eax,0x10(%esp)
		mov    0x4(%ecx),%dx
		lea    0x0(,%edx,4),%eax
		mov    EXPORT_SYMBOL(game_object_points),%esi
		add    %edx,%eax
		mov    (%esi,%eax,2),%ax
		mov    EXPORT_SYMBOL(game_screen_point_pool),%ebx
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(dword_176D00),%edx
		movswl (%ebx,%eax,8),%eax
		add    %eax,%edx
		mov    %edx,0x50(%esp)
		xor    %edx,%edx
		mov    0x4(%ecx),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    (%esi,%eax,2),%ax
		and    $0xffff,%eax
		mov    (%ebx,%eax,8),%eax
		mov    EXPORT_SYMBOL(dword_176D04),%edx
		sar    $0x10,%eax
		add    %eax,%edx
		mov    %edx,0x54(%esp)
		xor    %eax,%eax
		mov    0x12(%ecx),%ax
		mov    game_normals,%edx
		shl    $0x4,%eax
		mov    0xc(%edx,%eax,1),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_2949e
		xor    %eax,%eax
	jump_2949e:
		shl    $0xe,%eax
		xor    %ebx,%ebx
		mov    %eax,0x60(%esp)
		mov    0x2(%ecx),%bx
		lea    0x0(,%ebx,4),%eax
		mov    EXPORT_SYMBOL(game_object_points),%esi
		add    %ebx,%eax
		mov    (%esi,%eax,2),%ax
		mov    EXPORT_SYMBOL(game_screen_point_pool),%edx
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(dword_176D00),%ebx
		movswl (%edx,%eax,8),%eax
		add    %eax,%ebx
		mov    %ebx,0x28(%esp)
		xor    %ebx,%ebx
		mov    0x2(%ecx),%bx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		mov    (%esi,%eax,2),%ax
		and    $0xffff,%eax
		mov    (%edx,%eax,8),%eax
		mov    EXPORT_SYMBOL(dword_176D04),%edx
		sar    $0x10,%eax
		add    %eax,%edx
		mov    %edx,0x2c(%esp)
		xor    %eax,%eax
		mov    0x10(%ecx),%ax
		mov    %eax,%edx
		mov    game_normals,%eax
		shl    $0x4,%edx
		mov    0xc(%edx,%eax,1),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_29520
		xor    %eax,%eax
	jump_29520:
		shl    $0xe,%eax
		mov    %eax,0x38(%esp)
		xor    %eax,%eax
		mov    0x1a(%ecx),%edx
		mov    0x8(%ecx),%al
		sar    $0x10,%edx
		sar    $0x2,%eax
		add    %edx,%eax
		and    $0x7,%eax
		je     jump_2957c
		mov    0x10(%esp),%edx
		imul   %eax,%edx
		mov    %edx,0x10(%esp)
		mov    0x60(%esp),%edx
		imul   %eax,%edx
		mov    %edx,0x60(%esp)
		mov    0x38(%esp),%edx
		imul   %eax,%edx
		mov    0x10(%esp),%esi
		sar    $0x3,%esi
		mov    0x60(%esp),%edi
		mov    %esi,0x10(%esp)
		sar    $0x3,%edi
		mov    %edx,%ebp
		mov    %edx,0x38(%esp)
		sar    $0x3,%ebp
		mov    %edi,0x60(%esp)
		mov    %ebp,0x38(%esp)
	jump_2957c:
		mov    EXPORT_SYMBOL(dword_176D4C),%edx
		xor    %eax,%eax
		inc    %edx
		mov    EXPORT_SYMBOL(vec_mode),%al
		mov    %edx,EXPORT_SYMBOL(dword_176D4C)
		cmp    $0x2,%eax
		jne    jump_2959c
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_2959c:
		lea    0x28(%esp),%ebx
		lea    0x50(%esp),%edx
		mov    %esp,%eax
		call   ac_draw_trigpoly
		testb  $0x1,0x8(%ecx)
		je     jump_295d9
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_295c4
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_295c4:
		lea    0x50(%esp),%ebx
		lea    0x28(%esp),%edx
		mov    %esp,%eax
		call   ac_draw_trigpoly
		incl   EXPORT_SYMBOL(dword_176D4C)
	jump_295d9:
		add    $0x78,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_object_face3_reflect)	/* 0x0295E4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		sub    $0x78,%esp
		and    $0xffff,%eax
		mov    game_object_faces,%ecx
		shl    $0x5,%eax
		add    %eax,%ecx
		mov    0xa(%ecx),%al
		mov    %al,EXPORT_SYMBOL(vec_colour)
		mov    EXPORT_SYMBOL(vec_tmap)+16,%eax
		mov    %eax,EXPORT_SYMBOL(vec_map)
		xor    %eax,%eax
		mov    0xe(%ecx),%ax
		mov    %eax,%edx
		mov    game_normals,%eax
		shl    $0x4,%edx
		mov    0x9(%edx,%eax,1),%edx
		sar    $0x18,%edx
		add    $0x20,%edx
		shl    $0x10,%edx
		mov    %edx,0x30(%esp)
		xor    %edx,%edx
		mov    0xe(%ecx),%dx
		shl    $0x4,%edx
		mov    0xa(%edx,%eax,1),%edx
		sar    $0x18,%edx
		add    $0x80,%edx
		shl    $0x10,%edx
		mov    %edx,0x34(%esp)
		xor    %edx,%edx
		mov    0x12(%ecx),%dx
		shl    $0x4,%edx
		mov    0x9(%edx,%eax,1),%edx
		sar    $0x18,%edx
		add    $0x20,%edx
		shl    $0x10,%edx
		mov    %edx,0x58(%esp)
		xor    %edx,%edx
		mov    0x12(%ecx),%dx
		shl    $0x4,%edx
		mov    0xa(%edx,%eax,1),%edx
		sar    $0x18,%edx
		add    $0x80,%edx
		shl    $0x10,%edx
		mov    %edx,0x5c(%esp)
		xor    %edx,%edx
		mov    0x10(%ecx),%dx
		shl    $0x4,%edx
		mov    0x9(%edx,%eax,1),%edx
		sar    $0x18,%edx
		add    $0x20,%edx
		shl    $0x10,%edx
		mov    %edx,0x8(%esp)
		xor    %edx,%edx
		mov    0x10(%ecx),%dx
		shl    $0x4,%edx
		mov    0xa(%edx,%eax,1),%eax
		sar    $0x18,%eax
		add    $0x80,%eax
		shl    $0x10,%eax
		xor    %edx,%edx
		mov    %eax,0xc(%esp)
		mov    (%ecx),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_object_points),%edx
		mov    (%edx,%eax,2),%ax
		mov    EXPORT_SYMBOL(game_screen_point_pool),%ebx
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(dword_176D00),%esi
		movswl (%ebx,%eax,8),%eax
		add    %eax,%esi
		mov    %esi,0x28(%esp)
		xor    %esi,%esi
		mov    (%ecx),%si
		lea    0x0(,%esi,4),%eax
		add    %esi,%eax
		mov    (%edx,%eax,2),%ax
		and    $0xffff,%eax
		mov    (%ebx,%eax,8),%eax
		mov    EXPORT_SYMBOL(dword_176D04),%esi
		sar    $0x10,%eax
		add    %eax,%esi
		mov    %esi,0x2c(%esp)
		xor    %esi,%esi
		mov    0x4(%ecx),%si
		lea    0x0(,%esi,4),%eax
		add    %esi,%eax
		mov    (%edx,%eax,2),%ax
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(dword_176D00),%esi
		movswl (%ebx,%eax,8),%eax
		add    %eax,%esi
		mov    %esi,0x50(%esp)
		xor    %esi,%esi
		mov    0x4(%ecx),%si
		lea    0x0(,%esi,4),%eax
		add    %esi,%eax
		mov    (%edx,%eax,2),%ax
		and    $0xffff,%eax
		mov    (%ebx,%eax,8),%eax
		mov    EXPORT_SYMBOL(dword_176D04),%esi
		sar    $0x10,%eax
		add    %eax,%esi
		mov    %esi,0x54(%esp)
		xor    %esi,%esi
		mov    0x2(%ecx),%si
		lea    0x0(,%esi,4),%eax
		add    %esi,%eax
		mov    (%edx,%eax,2),%ax
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(dword_176D00),%esi
		movswl (%ebx,%eax,8),%eax
		add    %eax,%esi
		mov    %esi,(%esp)
		xor    %esi,%esi
		mov    0x2(%ecx),%si
		lea    0x0(,%esi,4),%eax
		add    %esi,%eax
		mov    (%edx,%eax,2),%ax
		and    $0xffff,%eax
		mov    (%ebx,%eax,8),%eax
		mov    EXPORT_SYMBOL(dword_176D04),%edx
		sar    $0x10,%eax
		mov    %esp,%ebx
		add    %eax,%edx
		mov    $0x1b,%ah
		mov    %edx,0x4(%esp)
		mov    EXPORT_SYMBOL(dword_176D4C),%edx
		mov    %ah,EXPORT_SYMBOL(vec_mode)
		inc    %edx
		lea    0x28(%esp),%eax
		mov    %edx,EXPORT_SYMBOL(dword_176D4C)
		lea    0x50(%esp),%edx
		call   ac_draw_trigpoly
		testb  $0x1,0x8(%ecx)
		je     jump_29803
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_297f4
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_297f4:
		lea    0x50(%esp),%ebx
		mov    %esp,%edx
		lea    0x28(%esp),%eax
		call   ac_draw_trigpoly
	jump_29803:
		add    $0x78,%esp
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_calculate_enginepoint_shade_1)	/* 0x02980C */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		mov    %eax,%ecx
		mov    %edx,%esi
		xor    %eax,%eax
		mov    %bx,%ax
		xor    %edx,%edx
		mov    (%esi,%eax,2),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_object_points),%edx
		add    %eax,%eax
		add    %eax,%edx
		mov    (%edx),%eax
		mov    EXPORT_SYMBOL(dword_19F500),%edi
		sar    $0x10,%eax
		mov    0xc(%esi),%si
		sub    %eax,%edi
		and    $0xffff,%esi
		lea    0x0(,%esi,8),%eax
		add    %esi,%eax
		mov    game_objects,%ebx
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    0x12(%eax),%ebx
		sar    $0x10,%ebx
		sub    %ebx,%edi
		mov    %edi,%ebx
		imul   %ebx,%ebx
		mov    0x2(%edx),%esi
		sar    $0x10,%esi
		mov    EXPORT_SYMBOL(dword_19F504),%edi
		sub    %esi,%edi
		mov    %edi,%esi
		mov    0xc(%eax),%edi
		sar    $0x10,%edi
		sub    %edi,%esi
		imul   %esi,%esi
		mov    0x4(%edx),%edx
		sar    $0x10,%edx
		mov    EXPORT_SYMBOL(dword_19F508),%edi
		mov    0x14(%eax),%eax
		sub    %edx,%edi
		sar    $0x10,%eax
		mov    %edi,%edx
		sub    %eax,%edx
		add    %esi,%ebx
		mov    %edx,%esi
		imul   %edx,%esi
		add    %ebx,%esi
		sar    $0x11,%esi
		test   %esi,%esi
		je     jump_298cf
		mov    $0x1000000,%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		idiv   %esi
		imul   EXPORT_SYMBOL(dword_19F4FC),%eax
		mov    0x10(%ecx),%ebx
		add    %eax,%ebx
		mov    %ebx,0x10(%ecx)
		cmp    $0x3f0000,%ebx
		jle    jump_298d6
	jump_298cf:
		movl   $0x3f0000,0x10(%ecx)
	jump_298d6:
		mov    0x10(%ecx),%eax
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_calculate_enginepoint_shade_2)	/* 0x0298E0 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		mov    %eax,%ecx
		mov    %edx,%esi
		xor    %eax,%eax
		mov    %bx,%ax
		xor    %edx,%edx
		mov    (%esi,%eax,2),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_object_points),%edx
		add    %eax,%eax
		add    %eax,%edx
		mov    (%edx),%eax
		mov    EXPORT_SYMBOL(dword_19F500),%edi
		sar    $0x10,%eax
		mov    0xe(%esi),%si
		sub    %eax,%edi
		and    $0xffff,%esi
		lea    0x0(,%esi,8),%eax
		add    %esi,%eax
		mov    game_objects,%ebx
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    0x12(%eax),%ebx
		sar    $0x10,%ebx
		sub    %ebx,%edi
		mov    %edi,%ebx
		imul   %ebx,%ebx
		mov    0x2(%edx),%esi
		sar    $0x10,%esi
		mov    EXPORT_SYMBOL(dword_19F504),%edi
		sub    %esi,%edi
		mov    %edi,%esi
		mov    0xc(%eax),%edi
		sar    $0x10,%edi
		sub    %edi,%esi
		imul   %esi,%esi
		mov    0x4(%edx),%edx
		sar    $0x10,%edx
		mov    EXPORT_SYMBOL(dword_19F508),%edi
		mov    0x14(%eax),%eax
		sub    %edx,%edi
		sar    $0x10,%eax
		mov    %edi,%edx
		sub    %eax,%edx
		add    %esi,%ebx
		mov    %edx,%esi
		imul   %edx,%esi
		add    %ebx,%esi
		sar    $0x11,%esi
		test   %esi,%esi
		je     jump_299a3
		mov    $0x1000000,%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		idiv   %esi
		imul   EXPORT_SYMBOL(dword_19F4FC),%eax
		mov    0x10(%ecx),%ebx
		add    %eax,%ebx
		mov    %ebx,0x10(%ecx)
		cmp    $0x3f0000,%ebx
		jle    jump_299aa
	jump_299a3:
		movl   $0x3f0000,0x10(%ecx)
	jump_299aa:
		mov    0x10(%ecx),%eax
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_object_face3_textrd_dk)	/* 0x0299B4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x80,%esp
		mov    game_full_lights,%ecx
		mov    game_quick_lights,%esi
		and    $0xffff,%eax
		mov    game_object_faces,%edx
		shl    $0x5,%eax
		add    %eax,%edx
		mov    %edx,0x78(%esp)
		cmpw   $0x0,0x6(%edx)
		je     jump_29a72
		mov    0x78(%esp),%edx
		xor    %eax,%eax
		mov    0x6(%edx),%ax
		mov    game_face_textures,%edx
		shl    $0x4,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x6(%eax),%dl
		mov    EXPORT_SYMBOL(vec_tmap)(,%edx,4),%edx
		mov    %edx,EXPORT_SYMBOL(vec_map)
		mov    0x78(%esp),%edx
		testb  $0x2,0x8(%edx)
		je     jump_29a28
		mov    EXPORT_SYMBOL(scratch_buf1),%edx
		mov    %edx,EXPORT_SYMBOL(vec_map)
	jump_29a28:
		xor    %edx,%edx
		mov    (%eax),%dl
		shl    $0x10,%edx
		mov    %edx,0x30(%esp)
		xor    %edx,%edx
		mov    0x1(%eax),%dl
		shl    $0x10,%edx
		mov    %edx,0x34(%esp)
		xor    %edx,%edx
		mov    0x4(%eax),%dl
		shl    $0x10,%edx
		mov    %edx,0x8(%esp)
		xor    %edx,%edx
		mov    0x5(%eax),%dl
		shl    $0x10,%edx
		mov    %edx,0xc(%esp)
		xor    %edx,%edx
		mov    0x2(%eax),%dl
		shl    $0x10,%edx
		mov    %edx,0x58(%esp)
		mov    0x3(%eax),%al
		and    $0xff,%eax
		shl    $0x10,%eax
		mov    %eax,0x5c(%esp)
	jump_29a72:
		movb   $0x40,EXPORT_SYMBOL(vec_colour)
		mov    0x78(%esp),%eax
		xor    %edx,%edx
		mov    (%eax),%dx
		mov    $0x4,%bh
		lea    0x0(,%edx,4),%eax
		mov    EXPORT_SYMBOL(game_object_points),%edi
		add    %edx,%eax
		mov    %bh,EXPORT_SYMBOL(vec_mode)
		mov    (%edi,%eax,2),%ax
		mov    EXPORT_SYMBOL(game_screen_point_pool),%ebx
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(dword_176D00),%edx
		movswl (%ebx,%eax,8),%eax
		add    %eax,%edx
		mov    0x78(%esp),%eax
		mov    %edx,0x28(%esp)
		xor    %edx,%edx
		mov    (%eax),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    (%edi,%eax,2),%ax
		and    $0xffff,%eax
		mov    (%ebx,%eax,8),%eax
		mov    EXPORT_SYMBOL(dword_176D04),%edx
		sar    $0x10,%eax
		add    %eax,%edx
		mov    0x78(%esp),%eax
		xor    %ebx,%ebx
		mov    %edx,0x2c(%esp)
		mov    0xe(%eax),%bx
		xor    %edx,%edx
		mov    0x14(%eax),%ax
		shl    $0x7,%ebx
		test   %ax,%ax
		je     jump_29b3a
	jump_29afd:
		mov    %edx,%edi
		inc    %edx
		cmp    $0x64,%edi
		jge    jump_29b3a
		and    $0xffff,%eax
		imul   $0x6,%eax,%eax
		mov    %esi,%edi
		add    %esi,%eax
		xor    %esi,%edi
		mov    0x2(%eax),%di
		shl    $0x5,%edi
		add    %ecx,%edi
		movswl (%edi),%edi
		mov    %edi,0x7c(%esp)
		xor    %edi,%edi
		mov    0x7c(%esp),%ebp
		mov    (%eax),%di
		imul   %ebp,%edi
		mov    0x4(%eax),%ax
		add    %edi,%ebx
		test   %ax,%ax
		jne    jump_29afd
	jump_29b3a:
		mov    %ecx,game_full_lights
		mov    %esi,game_quick_lights
		cmp    $0x7e00,%ebx
		jle    jump_29b53
		mov    $0x7f00,%ebx
	jump_29b53:
		mov    0x78(%esp),%edx
		shl    $0x7,%ebx
		lea    0x28(%esp),%eax
		mov    %ebx,0x38(%esp)
		xor    %ebx,%ebx
		call   ac_calculate_enginepoint_shade_1
		mov    %eax,0x38(%esp)
		mov    0x78(%esp),%eax
		xor    %edx,%edx
		mov    0x4(%eax),%dx
		lea    0x0(,%edx,4),%eax
		mov    EXPORT_SYMBOL(game_object_points),%edi
		add    %edx,%eax
		mov    (%edi,%eax,2),%ax
		mov    EXPORT_SYMBOL(game_screen_point_pool),%edx
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(dword_176D00),%ebx
		movswl (%edx,%eax,8),%eax
		add    %eax,%ebx
		mov    0x78(%esp),%eax
		mov    %ebx,(%esp)
		xor    %ebx,%ebx
		mov    0x4(%eax),%bx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		mov    (%edi,%eax,2),%ax
		and    $0xffff,%eax
		mov    (%edx,%eax,8),%eax
		mov    EXPORT_SYMBOL(dword_176D04),%edx
		sar    $0x10,%eax
		add    %eax,%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		mov    %edx,0x4(%esp)
		cmp    $0x2,%eax
		je     jump_29c63
		test   %eax,%eax
		je     jump_29c63
		mov    0x78(%esp),%eax
		mov    game_quick_lights,%esi
		mov    game_full_lights,%ecx
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    0x12(%eax),%bx
		mov    0x18(%eax),%ax
		shl    $0x7,%ebx
		test   %ax,%ax
		je     jump_29c41
	jump_29c0e:
		mov    %edx,%edi
		inc    %edx
		cmp    $0x64,%edi
		jge    jump_29c41
		and    $0xffff,%eax
		imul   $0x6,%eax,%eax
		mov    %esi,%edi
		add    %esi,%eax
		xor    %esi,%edi
		mov    0x2(%eax),%di
		shl    $0x5,%edi
		add    %ecx,%edi
		movzwl (%eax),%ebp
		movswl (%edi),%edi
		imul   %ebp,%edi
		mov    0x4(%eax),%ax
		add    %edi,%ebx
		test   %ax,%ax
		jne    jump_29c0e
	jump_29c41:
		cmp    $0x7e00,%ebx
		jle    jump_29c4e
		mov    $0x7f00,%ebx
	jump_29c4e:
		shl    $0x7,%ebx
		mov    %ecx,game_full_lights
		mov    %esi,game_quick_lights
		mov    %ebx,0x10(%esp)
		jmp    jump_29c6b
	jump_29c63:
		movl   $0x200000,0x10(%esp)
	jump_29c6b:
		mov    $0x2,%ebx
		mov    0x78(%esp),%edx
		mov    %esp,%eax
		call   ac_calculate_enginepoint_shade_1
		mov    %eax,0x10(%esp)
		mov    0x78(%esp),%eax
		xor    %edx,%edx
		mov    0x2(%eax),%dx
		lea    0x0(,%edx,4),%eax
		mov    EXPORT_SYMBOL(game_object_points),%ebx
		add    %edx,%eax
		mov    (%ebx,%eax,2),%ax
		mov    EXPORT_SYMBOL(game_screen_point_pool),%edx
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(dword_176D00),%edi
		movswl (%edx,%eax,8),%eax
		add    %eax,%edi
		mov    0x78(%esp),%eax
		mov    %edi,0x50(%esp)
		xor    %edi,%edi
		mov    0x2(%eax),%di
		lea    0x0(,%edi,4),%eax
		add    %edi,%eax
		mov    (%ebx,%eax,2),%ax
		and    $0xffff,%eax
		mov    (%edx,%eax,8),%eax
		mov    EXPORT_SYMBOL(dword_176D04),%edx
		sar    $0x10,%eax
		add    %eax,%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		mov    %edx,0x54(%esp)
		cmp    $0x2,%eax
		je     jump_29d7f
		test   %eax,%eax
		je     jump_29d7f
		mov    0x78(%esp),%eax
		mov    game_quick_lights,%esi
		mov    game_full_lights,%ecx
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    0x10(%eax),%bx
		mov    0x16(%eax),%ax
		shl    $0x7,%ebx
		test   %ax,%ax
		je     jump_29d5d
	jump_29d21:
		mov    %edx,%edi
		inc    %edx
		cmp    $0x64,%edi
		jge    jump_29d5d
		and    $0xffff,%eax
		imul   $0x6,%eax,%edi
		lea    (%esi,%edi,1),%eax
		xor    %edi,%edi
		mov    0x2(%eax),%di
		shl    $0x5,%edi
		add    %ecx,%edi
		movswl (%edi),%edi
		mov    %edi,0x7c(%esp)
		xor    %edi,%edi
		mov    0x7c(%esp),%ebp
		mov    (%eax),%di
		imul   %ebp,%edi
		mov    0x4(%eax),%ax
		add    %edi,%ebx
		test   %ax,%ax
		jne    jump_29d21
	jump_29d5d:
		cmp    $0x7e00,%ebx
		jle    jump_29d6a
		mov    $0x7f00,%ebx
	jump_29d6a:
		shl    $0x7,%ebx
		mov    %ecx,game_full_lights
		mov    %esi,game_quick_lights
		mov    %ebx,0x60(%esp)
		jmp    jump_29d87
	jump_29d7f:
		movl   $0x200000,0x60(%esp)
	jump_29d87:
		mov    $0x1,%ebx
		mov    0x78(%esp),%edx
		lea    0x50(%esp),%eax
		call   ac_calculate_enginepoint_shade_1
		mov    %eax,0x60(%esp)
		cmpb   $0x0,EXPORT_SYMBOL(byte_19EC6F)
		jne    jump_29db7
		mov    $0x200000,%eax
		mov    %eax,0x38(%esp)
		mov    %eax,0x10(%esp)
		mov    %eax,0x60(%esp)
	jump_29db7:
		mov    game_quick_lights,%esi
		mov    game_full_lights,%ecx
		mov    EXPORT_SYMBOL(dword_176D4C),%edi
		xor    %eax,%eax
		inc    %edi
		mov    game_perspective,%al
		mov    %edi,EXPORT_SYMBOL(dword_176D4C)
		cmp    $0x3,%eax
		jne    jump_29e18
		mov    EXPORT_SYMBOL(colour_lookup)+3,%al
		mov    %al,EXPORT_SYMBOL(vec_colour)
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+184
		jne    jump_29e6c
		lea    0x50(%esp),%edx
		lea    0x28(%esp),%eax
		call   ac_poly_line
		lea    0x50(%esp),%edx
		mov    %esp,%eax
		call   ac_poly_line
		mov    %esp,%edx
		lea    0x28(%esp),%eax
		call   ac_poly_line
		jmp    jump_29e6c
	jump_29e18:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_29e2b
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_29e2b:
		lea    0x50(%esp),%ebx
		mov    %esp,%edx
		lea    0x28(%esp),%eax
		call   ac_draw_trigpoly
		mov    0x78(%esp),%eax
		testb  $0x1,0x8(%eax)
		je     jump_29e6c
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_29e57
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_29e57:
		mov    %esp,%ebx
		lea    0x50(%esp),%edx
		lea    0x28(%esp),%eax
		call   ac_draw_trigpoly
		incl   EXPORT_SYMBOL(dword_176D4C)
	jump_29e6c:
		cmpb   $0x0,EXPORT_SYMBOL(byte_1C844E)
		je     jump_29e7a
		call   ac_swap_wscreen
	jump_29e7a:
		mov    game_full_lights,%ecx
		add    $0x80,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_object_face4d_textrd_dk)	/* 0x029E90 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xac,%esp
		mov    game_quick_lights,%ecx
		mov    game_full_lights,%esi
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    game_object_faces4,%edx
		shl    $0x3,%eax
		add    %eax,%edx
		mov    %edx,0xa8(%esp)
		cmpw   $0x0,0x8(%edx)
		je     jump_29f7c
		mov    0xa8(%esp),%eax
		xor    %edx,%edx
		mov    0x8(%eax),%dx
		lea    0x0(,%edx,8),%eax
		add    %eax,%edx
		mov    game_textures,%eax
		add    %edx,%edx
		add    %edx,%eax
		mov    %eax,0xa4(%esp)
		mov    0xa4(%esp),%edx
		xor    %eax,%eax
		mov    0x8(%edx),%al
		mov    EXPORT_SYMBOL(vec_tmap)(,%eax,4),%eax
		mov    %eax,EXPORT_SYMBOL(vec_map)
		mov    0xa8(%esp),%eax
		testb  $0x2,0xa(%eax)
		je     jump_29f28
		mov    EXPORT_SYMBOL(scratch_buf1),%eax
		mov    %eax,EXPORT_SYMBOL(vec_map)
	jump_29f28:
		mov    0xa4(%esp),%edx
		xor    %eax,%eax
		mov    (%edx),%al
		shl    $0x10,%eax
		mov    %eax,0x30(%esp)
		xor    %eax,%eax
		mov    0x1(%edx),%al
		shl    $0x10,%eax
		mov    %eax,0x34(%esp)
		xor    %eax,%eax
		mov    0x4(%edx),%al
		shl    $0x10,%eax
		mov    %eax,0x58(%esp)
		xor    %eax,%eax
		mov    0x5(%edx),%al
		shl    $0x10,%eax
		mov    %eax,0x5c(%esp)
		xor    %eax,%eax
		mov    0x2(%edx),%al
		shl    $0x10,%eax
		mov    %eax,0x80(%esp)
		xor    %eax,%eax
		mov    0x3(%edx),%al
		shl    $0x10,%eax
		mov    %eax,0x84(%esp)
	jump_29f7c:
		mov    $0x4,%dh
		mov    0xa8(%esp),%eax
		mov    %dh,EXPORT_SYMBOL(vec_mode)
		xor    %edx,%edx
		mov    (%eax),%dx
		mov    $0x40,%bl
		lea    0x0(,%edx,4),%eax
		mov    EXPORT_SYMBOL(game_object_points),%edi
		add    %edx,%eax
		mov    %bl,EXPORT_SYMBOL(vec_colour)
		mov    (%edi,%eax,2),%ax
		mov    EXPORT_SYMBOL(game_screen_point_pool),%ebx
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(dword_176D00),%edx
		movswl (%ebx,%eax,8),%eax
		add    %eax,%edx
		mov    0xa8(%esp),%eax
		mov    %edx,0x28(%esp)
		xor    %edx,%edx
		mov    (%eax),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    (%edi,%eax,2),%ax
		and    $0xffff,%eax
		mov    (%ebx,%eax,8),%eax
		mov    EXPORT_SYMBOL(dword_176D04),%edx
		sar    $0x10,%eax
		add    %eax,%edx
		mov    0xa8(%esp),%eax
		xor    %ebx,%ebx
		mov    %edx,0x2c(%esp)
		mov    0x10(%eax),%bx
		xor    %edx,%edx
		mov    0x18(%eax),%ax
		shl    $0x7,%ebx
		test   %ax,%ax
		je     jump_2a054
	jump_2a011:
		mov    %edx,%edi
		inc    %edx
		cmp    $0x64,%edi
		jge    jump_2a054
		and    $0xffff,%eax
		imul   $0x6,%eax,%eax
		mov    %ecx,%edi
		add    %ecx,%eax
		xor    %ecx,%edi
		mov    0x2(%eax),%di
		shl    $0x5,%edi
		add    %esi,%edi
		movswl (%edi),%edi
		mov    %edi,0xa0(%esp)
		xor    %edi,%edi
		mov    0xa0(%esp),%ebp
		mov    (%eax),%di
		imul   %ebp,%edi
		mov    0x4(%eax),%ax
		add    %edi,%ebx
		test   %ax,%ax
		jne    jump_2a011
	jump_2a054:
		mov    %ecx,game_quick_lights
		mov    %esi,game_full_lights
		cmp    $0x7e00,%ebx
		jle    jump_2a06d
		mov    $0x7f00,%ebx
	jump_2a06d:
		mov    0xa8(%esp),%edx
		shl    $0x7,%ebx
		lea    0x28(%esp),%eax
		mov    %ebx,0x38(%esp)
		xor    %ebx,%ebx
		call   ac_calculate_enginepoint_shade_2
		mov    %eax,0x38(%esp)
		mov    0xa8(%esp),%eax
		xor    %edx,%edx
		mov    0x4(%eax),%dx
		lea    0x0(,%edx,4),%eax
		mov    EXPORT_SYMBOL(game_object_points),%edi
		add    %edx,%eax
		mov    (%edi,%eax,2),%ax
		mov    EXPORT_SYMBOL(game_screen_point_pool),%edx
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(dword_176D00),%ebx
		movswl (%edx,%eax,8),%eax
		add    %eax,%ebx
		mov    0xa8(%esp),%eax
		mov    %ebx,0x50(%esp)
		xor    %ebx,%ebx
		mov    0x4(%eax),%bx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		mov    (%edi,%eax,2),%ax
		and    $0xffff,%eax
		mov    (%edx,%eax,8),%eax
		mov    EXPORT_SYMBOL(dword_176D04),%edx
		sar    $0x10,%eax
		add    %eax,%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		mov    %edx,0x54(%esp)
		cmp    $0x2,%eax
		je     jump_2a182
		mov    0xa8(%esp),%eax
		mov    game_full_lights,%esi
		mov    game_quick_lights,%ecx
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    0x14(%eax),%bx
		mov    0x1c(%eax),%ax
		shl    $0x7,%ebx
		test   %ax,%ax
		je     jump_2a160
	jump_2a12d:
		mov    %edx,%edi
		inc    %edx
		cmp    $0x64,%edi
		jge    jump_2a160
		and    $0xffff,%eax
		imul   $0x6,%eax,%eax
		mov    %ecx,%edi
		add    %ecx,%eax
		xor    %ecx,%edi
		mov    0x2(%eax),%di
		shl    $0x5,%edi
		add    %esi,%edi
		movzwl (%eax),%ebp
		movswl (%edi),%edi
		imul   %ebp,%edi
		mov    0x4(%eax),%ax
		add    %edi,%ebx
		test   %ax,%ax
		jne    jump_2a12d
	jump_2a160:
		cmp    $0x7e00,%ebx
		jle    jump_2a16d
		mov    $0x7f00,%ebx
	jump_2a16d:
		shl    $0x7,%ebx
		mov    %ecx,game_quick_lights
		mov    %esi,game_full_lights
		mov    %ebx,0x60(%esp)
		jmp    jump_2a18a
	jump_2a182:
		movl   $0x200000,0x60(%esp)
	jump_2a18a:
		mov    $0x2,%ebx
		mov    0xa8(%esp),%edx
		lea    0x50(%esp),%eax
		call   ac_calculate_enginepoint_shade_2
		mov    %eax,0x60(%esp)
		mov    0xa8(%esp),%eax
		xor    %edx,%edx
		mov    0x2(%eax),%dx
		lea    0x0(,%edx,4),%eax
		mov    EXPORT_SYMBOL(game_object_points),%ebx
		add    %edx,%eax
		mov    (%ebx,%eax,2),%ax
		mov    EXPORT_SYMBOL(game_screen_point_pool),%edx
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(dword_176D00),%edi
		movswl (%edx,%eax,8),%eax
		add    %eax,%edi
		mov    0xa8(%esp),%eax
		mov    %edi,0x78(%esp)
		xor    %edi,%edi
		mov    0x2(%eax),%di
		lea    0x0(,%edi,4),%eax
		add    %edi,%eax
		mov    (%ebx,%eax,2),%ax
		and    $0xffff,%eax
		mov    (%edx,%eax,8),%eax
		mov    EXPORT_SYMBOL(dword_176D04),%edx
		sar    $0x10,%eax
		add    %eax,%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		mov    %edx,0x7c(%esp)
		cmp    $0x2,%eax
		je     jump_2a29e
		mov    0xa8(%esp),%eax
		mov    game_full_lights,%esi
		mov    game_quick_lights,%ecx
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    0x12(%eax),%bx
		mov    0x1a(%eax),%ax
		shl    $0x7,%ebx
		test   %ax,%ax
		je     jump_2a279
	jump_2a246:
		mov    %edx,%edi
		inc    %edx
		cmp    $0x64,%edi
		jge    jump_2a279
		and    $0xffff,%eax
		imul   $0x6,%eax,%eax
		mov    %ecx,%edi
		add    %ecx,%eax
		xor    %ecx,%edi
		mov    0x2(%eax),%di
		shl    $0x5,%edi
		add    %esi,%edi
		movzwl (%eax),%ebp
		movswl (%edi),%edi
		imul   %ebp,%edi
		mov    0x4(%eax),%ax
		add    %edi,%ebx
		test   %ax,%ax
		jne    jump_2a246
	jump_2a279:
		cmp    $0x7e00,%ebx
		jle    jump_2a286
		mov    $0x7f00,%ebx
	jump_2a286:
		shl    $0x7,%ebx
		mov    %ecx,game_quick_lights
		mov    %esi,game_full_lights
		mov    %ebx,0x88(%esp)
		jmp    jump_2a2a9
	jump_2a29e:
		movl   $0x200000,0x88(%esp)
	jump_2a2a9:
		mov    $0x1,%ebx
		mov    0xa8(%esp),%edx
		lea    0x50(%esp),%eax
		call   ac_calculate_enginepoint_shade_2
		mov    %eax,0x88(%esp)
		mov    0xa8(%esp),%eax
		xor    %edx,%edx
		mov    0x6(%eax),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_object_points),%edx
		mov    (%edx,%eax,2),%ax
		mov    EXPORT_SYMBOL(game_screen_point_pool),%ebx
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(dword_176D00),%edi
		movswl (%ebx,%eax,8),%eax
		add    %eax,%edi
		mov    0xa8(%esp),%eax
		mov    %edi,(%esp)
		xor    %edi,%edi
		mov    0x6(%eax),%di
		lea    0x0(,%edi,4),%eax
		add    %edi,%eax
		add    %eax,%eax
		add    %eax,%edx
		xor    %eax,%eax
		mov    (%edx),%ax
		mov    (%ebx,%eax,8),%eax
		mov    EXPORT_SYMBOL(dword_176D04),%edx
		sar    $0x10,%eax
		add    %eax,%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		mov    %edx,0x4(%esp)
		cmp    $0x2,%eax
		je     jump_2a3bc
		mov    0xa8(%esp),%eax
		mov    game_full_lights,%esi
		mov    game_quick_lights,%ecx
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    0x16(%eax),%bx
		mov    0x1e(%eax),%ax
		shl    $0x7,%ebx
		test   %ax,%ax
		je     jump_2a39a
	jump_2a367:
		mov    %edx,%edi
		inc    %edx
		cmp    $0x64,%edi
		jge    jump_2a39a
		and    $0xffff,%eax
		imul   $0x6,%eax,%eax
		mov    %ecx,%edi
		add    %ecx,%eax
		xor    %ecx,%edi
		mov    0x2(%eax),%di
		shl    $0x5,%edi
		add    %esi,%edi
		movzwl (%eax),%ebp
		movswl (%edi),%edi
		imul   %ebp,%edi
		mov    0x4(%eax),%ax
		add    %edi,%ebx
		test   %ax,%ax
		jne    jump_2a367
	jump_2a39a:
		cmp    $0x7e00,%ebx
		jle    jump_2a3a7
		mov    $0x7f00,%ebx
	jump_2a3a7:
		shl    $0x7,%ebx
		mov    %ecx,game_quick_lights
		mov    %esi,game_full_lights
		mov    %ebx,0x10(%esp)
		jmp    jump_2a3c4
	jump_2a3bc:
		movl   $0x200000,0x10(%esp)
	jump_2a3c4:
		mov    $0x3,%ebx
		mov    0xa8(%esp),%edx
		mov    %esp,%eax
		call   ac_calculate_enginepoint_shade_2
		mov    EXPORT_SYMBOL(byte_19EC6F),%bh
		mov    %eax,0x10(%esp)
		test   %bh,%bh
		jne    jump_2a3fd
		mov    $0x200000,%eax
		mov    %eax,0x38(%esp)
		mov    %eax,0x60(%esp)
		mov    %eax,0x88(%esp)
		mov    %eax,0x10(%esp)
	jump_2a3fd:
		mov    EXPORT_SYMBOL(dword_176D4C),%ebp
		xor    %eax,%eax
		inc    %ebp
		mov    EXPORT_SYMBOL(vec_mode),%al
		mov    %ebp,EXPORT_SYMBOL(dword_176D4C)
		cmp    $0x2,%eax
		jne    jump_2a41d
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_2a41d:
		lea    0x78(%esp),%ebx
		lea    0x50(%esp),%edx
		lea    0x28(%esp),%eax
		call   ac_draw_trigpoly
		mov    0xa8(%esp),%eax
		testb  $0x1,0xa(%eax)
		je     jump_2a45f
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_2a44e
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_2a44e:
		lea    0x50(%esp),%ebx
		lea    0x78(%esp),%edx
		lea    0x28(%esp),%eax
		call   ac_draw_trigpoly
	jump_2a45f:
		mov    0xa8(%esp),%eax
		mov    game_full_lights,%esi
		mov    0x8(%eax),%bx
		mov    game_quick_lights,%ecx
		test   %bx,%bx
		je     jump_2a4d0
		mov    0xa4(%esp),%edx
		xor    %eax,%eax
		mov    0x6(%edx),%al
		shl    $0x10,%eax
		mov    %eax,0x8(%esp)
		xor    %eax,%eax
		mov    0x7(%edx),%al
		shl    $0x10,%eax
		mov    %eax,0xc(%esp)
		xor    %eax,%eax
		mov    0x4(%edx),%al
		shl    $0x10,%eax
		mov    %eax,0x58(%esp)
		xor    %eax,%eax
		mov    0x5(%edx),%al
		shl    $0x10,%eax
		mov    %eax,0x5c(%esp)
		xor    %eax,%eax
		mov    0x2(%edx),%al
		shl    $0x10,%eax
		mov    %eax,0x80(%esp)
		xor    %eax,%eax
		mov    0x3(%edx),%al
		shl    $0x10,%eax
		mov    %eax,0x84(%esp)
	jump_2a4d0:
		mov    EXPORT_SYMBOL(dword_176D4C),%edx
		mov    %ecx,game_quick_lights
		mov    %esi,game_full_lights
		xor    %eax,%eax
		inc    %edx
		mov    EXPORT_SYMBOL(vec_mode),%al
		mov    %edx,EXPORT_SYMBOL(dword_176D4C)
		cmp    $0x2,%eax
		jne    jump_2a4fc
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_2a4fc:
		lea    0x50(%esp),%ebx
		lea    0x78(%esp),%edx
		mov    %esp,%eax
		call   ac_draw_trigpoly
		mov    0xa8(%esp),%eax
		testb  $0x1,0xa(%eax)
		je     jump_2a53a
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_2a52b
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_2a52b:
		lea    0x78(%esp),%ebx
		lea    0x50(%esp),%edx
		mov    %esp,%eax
		call   ac_draw_trigpoly
	jump_2a53a:
		mov    game_quick_lights,%ecx
		add    $0xac,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_special_object_face4)	/* 0x02A550 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		sub    $0xa0,%esp
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    game_special_object_faces4,%ecx
		shl    $0x3,%eax
		add    %eax,%ecx
		mov    0xc(%ecx),%al
		mov    %al,EXPORT_SYMBOL(vec_colour)
		mov    0xb(%ecx),%al
		mov    %al,EXPORT_SYMBOL(vec_mode)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(game_screen_point_pool),%edx
		mov    (%ecx),%ax
		movswl (%edx,%eax,8),%eax
		mov    %eax,0x28(%esp)
		xor    %eax,%eax
		mov    (%ecx),%ax
		mov    (%edx,%eax,8),%eax
		sar    $0x10,%eax
		mov    %eax,0x2c(%esp)
		xor    %eax,%eax
		mov    0x10(%ecx),%ax
		shl    $0xf,%eax
		mov    %eax,0x38(%esp)
		xor    %eax,%eax
		mov    0x2(%ecx),%ax
		movswl (%edx,%eax,8),%eax
		mov    %eax,0x50(%esp)
		xor    %eax,%eax
		mov    0x2(%ecx),%ax
		mov    (%edx,%eax,8),%eax
		sar    $0x10,%eax
		mov    %eax,0x54(%esp)
		xor    %eax,%eax
		mov    0x12(%ecx),%ax
		shl    $0xf,%eax
		mov    %eax,0x60(%esp)
		xor    %eax,%eax
		mov    0x4(%ecx),%ax
		movswl (%edx,%eax,8),%eax
		mov    %eax,0x78(%esp)
		xor    %eax,%eax
		mov    0x4(%ecx),%ax
		mov    (%edx,%eax,8),%eax
		sar    $0x10,%eax
		mov    %eax,0x7c(%esp)
		xor    %eax,%eax
		mov    0x14(%ecx),%ax
		shl    $0xf,%eax
		mov    %eax,0x88(%esp)
		xor    %eax,%eax
		mov    0x6(%ecx),%ax
		movswl (%edx,%eax,8),%eax
		mov    %eax,(%esp)
		xor    %eax,%eax
		mov    0x6(%ecx),%ax
		mov    (%edx,%eax,8),%eax
		sar    $0x10,%eax
		mov    %eax,0x4(%esp)
		xor    %eax,%eax
		mov    0x16(%ecx),%ax
		shl    $0xf,%eax
		mov    EXPORT_SYMBOL(dword_176D4C),%edx
		mov    %eax,0x10(%esp)
		xor    %eax,%eax
		inc    %edx
		mov    0xb(%ecx),%al
		mov    %edx,EXPORT_SYMBOL(dword_176D4C)
		cmp    $0xa,%eax
		je     jump_2a654
		cmp    $0x9,%eax
		jne    jump_2a6e7
	jump_2a654:
		xor    %edx,%edx
		mov    0x8(%ecx),%dx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    game_textures,%edx
		add    %eax,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x8(%eax),%dl
		mov    EXPORT_SYMBOL(vec_tmap)(,%edx,4),%edx
		mov    %edx,EXPORT_SYMBOL(vec_map)
		xor    %edx,%edx
		mov    (%eax),%dl
		shl    $0x10,%edx
		mov    %edx,0x30(%esp)
		xor    %edx,%edx
		mov    0x1(%eax),%dl
		shl    $0x10,%edx
		mov    %edx,0x34(%esp)
		xor    %edx,%edx
		mov    0x2(%eax),%dl
		shl    $0x10,%edx
		mov    %edx,0x58(%esp)
		xor    %edx,%edx
		mov    0x3(%eax),%dl
		shl    $0x10,%edx
		mov    %edx,0x5c(%esp)
		xor    %edx,%edx
		mov    0x4(%eax),%dl
		shl    $0x10,%edx
		mov    %edx,0x80(%esp)
		xor    %edx,%edx
		mov    0x5(%eax),%dl
		shl    $0x10,%edx
		mov    %edx,0x84(%esp)
		xor    %edx,%edx
		mov    0x6(%eax),%dl
		shl    $0x10,%edx
		mov    %edx,0x8(%esp)
		mov    0x7(%eax),%al
		and    $0xff,%eax
		shl    $0x10,%eax
		mov    %eax,0xc(%esp)
	jump_2a6e7:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_2a6fa
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_2a6fa:
		lea    0x78(%esp),%ebx
		lea    0x28(%esp),%edx
		lea    0x50(%esp),%eax
		call   ac_draw_trigpoly
		testb  $0x1,0xa(%ecx)
		je     jump_2a735
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_2a724
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_2a724:
		lea    0x50(%esp),%ebx
		lea    0x28(%esp),%edx
		lea    0x78(%esp),%eax
		call   ac_draw_trigpoly
	jump_2a735:
		mov    EXPORT_SYMBOL(dword_176D4C),%ebx
		xor    %eax,%eax
		inc    %ebx
		mov    EXPORT_SYMBOL(vec_mode),%al
		mov    %ebx,EXPORT_SYMBOL(dword_176D4C)
		cmp    $0x2,%eax
		jne    jump_2a755
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_2a755:
		mov    %esp,%ebx
		lea    0x78(%esp),%edx
		lea    0x50(%esp),%eax
		call   ac_draw_trigpoly
		testb  $0x1,0xa(%ecx)
		je     jump_2a78c
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_2a77d
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_2a77d:
		lea    0x50(%esp),%ebx
		lea    0x78(%esp),%edx
		mov    %esp,%eax
		call   ac_draw_trigpoly
	jump_2a78c:
		add    $0xa0,%esp
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_falling_snow)	/* 0x2AAA0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		movswl %ax,%ebx
		mov    %ebx,%edx
		mov    $0xf0,%ecx
		sar    $0x5,%edx
		sub    %edx,%ecx
		movswl %cx,%edx
		mov    EXPORT_SYMBOL(lbSeed),%ebp
		cmp    $0x14,%edx
		jl     jump_2ab93
		cwtl
		mov    gameturn,%edx
		mov    %eax,EXPORT_SYMBOL(lbSeed)
		lea    (%eax,%edx,1),%edi
		and    $0x1f,%edi
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(waft_table)-2(,%edi,2),%edi
		call   ac_LbRandomPosShort
		mov    %ax,%dx
		mov    EXPORT_SYMBOL(engn_anglexz),%eax
		sar    $0x7,%eax
		add    %eax,%edx
		mov    engn_xc,%eax
		sar    $0x10,%edi
		sar    $0x4,%eax
		sar    %edi
		add    %eax,%edx
		add    %edi,%edx
		mov    $0x140,%edi
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %edi
		mov    $0x2710,%eax
		mov    %edx,%esi
		mov    gameturn,%edx
		sub    %ebx,%eax
		imul   %eax,%edx
		mov    %eax,%ebx
		call   ac_LbRandomPosShort
		shr    $0xc,%edx
		and    $0xffff,%eax
		movswl %cx,%edi
		add    %edx,%eax
		xor    %edx,%edx
		div    %edi
		mov    %edx,%ecx
		mov    $0x4,%edx
		mov    $0x1a0,%edi
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    %ebx,%edx
		mov    %ebx,%eax
		sar    $0x1f,%edx
		idiv   %edi
		xor    %edx,%edx
		shl    $0x7,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+1,%dl
		mov    EXPORT_SYMBOL(pixmap)+0x1400(%edx,%eax,1),%al # pixmap.fade_table[0x1400+?]
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay)+100,%dx # lbDisplay.ScreenMode
		cmp    $0x1,%edx
		xor    %ebx,%ebx
		movswl %cx,%edx
		mov    %al,%bl
		movswl %si,%eax
		call   ac_LbDrawPixelClip
		xor    %ebx,%ebx
		mov    %ebp,EXPORT_SYMBOL(lbSeed)
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
	jump_2ab93:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_sort_sprite_veh_health_bar)	/* 0x02ABE0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		sub    $0x8,%esp
		mov    %eax,%esi
		cwtl
		mov    EXPORT_SYMBOL(game_sort_sprites),%edx
		shl    $0x4,%eax
		mov    0x8(%edx,%eax,1),%eax
		mov    EXPORT_SYMBOL(overall_scale)-2,%edx
		mov    0x86(%eax),%bx
		sar    $0x10,%edx
		mov    0x3a(%eax),%cx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sar    $0x8,%eax
		mov    %eax,%edi
		movswl %bx,%eax
		test   %eax,%eax
		jne    jump_2ac29
		mov    $0x1,%ebx
	jump_2ac29:
		movswl %di,%eax
		movswl %cx,%edx
		imul   %eax,%edx
		movswl %bx,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %ax,0x4(%esp)
		mov    ingame__fld_unkCA0,%eax
		sar    $0x18,%eax
		cmp    $0xfffffffd,%eax
		jne    jump_2ac55
		mov    $0x2a,%eax
		jmp    jump_2ac5a
	jump_2ac55:
		mov    $0x13,%eax
	jump_2ac5a:
		and    $0xff,%eax
		push   %eax
		movswl %si,%eax
		mov    EXPORT_SYMBOL(game_sort_sprites),%edx
		shl    $0x4,%eax
		add    %edx,%eax
		movswl %di,%ecx
		mov    (%eax),%edx
		movswl (%eax),%eax
		lea    0x4(%ecx),%ebx
		mov    %eax,0x4(%esp)
		mov    %ecx,%eax
		mov    0x4(%esp),%ecx
		sar    %eax
		sub    %eax,%ecx
		sar    $0x10,%edx
		mov    %ecx,%eax
		mov    $0x6,%ecx
		call   ac_LbDrawBox
		mov    ingame__fld_unkCA0,%eax
		sar    $0x18,%eax
		cmp    $0xfffffffd,%eax
		jne    jump_2acaa
		mov    $0x21,%eax
		jmp    jump_2acaf
	jump_2acaa:
		mov    $0xf,%eax
	jump_2acaf:
		and    $0xff,%eax
		push   %eax
		movswl %si,%eax
		mov    EXPORT_SYMBOL(game_sort_sprites),%edx
		shl    $0x4,%eax
		add    %edx,%eax
		mov    (%eax),%edx
		movswl (%eax),%ecx
		movswl %di,%eax
		mov    0x6(%esp),%ebx
		sar    %eax
		sar    $0x10,%ebx
		sub    %eax,%ecx
		sar    $0x10,%edx
		lea    0x2(%ecx),%eax
		inc    %edx
		mov    $0x4,%ecx
		call   ac_LbDrawBox
		add    $0x8,%esp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_transform_point)	/* 0x02B3C0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		mov    %eax,%edx
		mov    engn_yc,%ebx
		mov    0x18(%eax),%ecx
		shl    $0x3,%ebx
		mov    EXPORT_SYMBOL(dword_176D10),%edi
		sub    %ebx,%ecx
		mov    0x1c(%eax),%ebx
		imul   %edi,%ebx
		mov    %ecx,0x18(%eax)
		mov    EXPORT_SYMBOL(dword_176D14),%esi
		mov    0x14(%eax),%ecx
		imul   %esi,%ecx
		mov    EXPORT_SYMBOL(dword_176D10),%ebp
		mov    %ecx,%edi
		mov    0x14(%eax),%ecx
		imul   %ebp,%ecx
		sub    %ebx,%edi
		mov    0x1c(%eax),%ebx
		imul   %esi,%ebx
		mov    EXPORT_SYMBOL(dword_176D1C),%ebp
		mov    0x18(%eax),%esi
		imul   %ebp,%esi
		add    %ebx,%ecx
		mov    EXPORT_SYMBOL(dword_176D18),%ebx
		sar    $0x10,%ecx
		imul   %ecx,%ebx
		mov    EXPORT_SYMBOL(dword_176D18),%ebp
		sub    %ebx,%esi
		mov    0x18(%eax),%ebx
		imul   %ebp,%ebx
		imul   EXPORT_SYMBOL(dword_176D1C),%ecx
		add    %ecx,%ebx
		sar    $0x10,%ebx
		mov    %ebx,0x1c(%eax)
		mov    EXPORT_SYMBOL(overall_scale)-2,%ebx
		sar    $0x10,%edi
		sar    $0x10,%ebx
		imul   %ebx,%edi
		sar    $0x10,%esi
		imul   %ebx,%esi
		xor    %ebx,%ebx
		mov    %edi,0x14(%eax)
		mov    game_perspective,%bl
		mov    %esi,0x18(%eax)
		cmp    $0x5,%ebx
		je     jump_2b474
		mov    0x14(%eax),%ecx
		mov    EXPORT_SYMBOL(dword_176D3C),%ebx
		sar    $0xb,%ecx
		jmp    jump_2b491
	jump_2b474:
		mov    0x1c(%eax),%ebx
		mov    0x14(%eax),%ecx
		neg    %ebx
		sar    $0xb,%ecx
		add    $0x4000,%ebx
		imul   %ebx,%ecx
		mov    EXPORT_SYMBOL(dword_176D3C),%ebx
		sar    $0xe,%ecx
	jump_2b491:
		add    %ecx,%ebx
		mov    %ebx,(%eax)
		mov    (%eax),%edx
		test   %edx,%edx
		jge    jump_2b4b6
		mov    0x26(%eax),%dh
		or     $0x1,%dh
		mov    (%eax),%esi
		mov    %dh,0x26(%eax)
		cmp    $0xfffff830,%esi
		jge    jump_2b4d0
		movl   $0xfffff830,(%eax)
		jmp    jump_2b4d0
	jump_2b4b6:
		cmp    EXPORT_SYMBOL(vec_window_width),%edx
		jl     jump_2b4d0
		cmp    $0x7d0,%edx
		jle    jump_2b4cc
		movl   $0x7d0,(%eax)
	jump_2b4cc:
		orb    $0x2,0x26(%eax)
	jump_2b4d0:
		xor    %edx,%edx
		mov    game_perspective,%dl
		cmp    $0x5,%edx
		je     jump_2b4eb
		mov    0x18(%eax),%ebx
		mov    EXPORT_SYMBOL(dword_176D40),%edx
		sar    $0xb,%ebx
		jmp    jump_2b508
	jump_2b4eb:
		mov    0x1c(%eax),%edx
		mov    0x18(%eax),%ebx
		neg    %edx
		sar    $0xb,%ebx
		add    $0x4000,%edx
		imul   %edx,%ebx
		mov    EXPORT_SYMBOL(dword_176D40),%edx
		sar    $0xe,%ebx
	jump_2b508:
		sub    %ebx,%edx
		mov    %edx,0x4(%eax)
		mov    0x4(%eax),%edi
		test   %edi,%edi
		jge    jump_2b52a
		orb    $0x4,0x26(%eax)
		cmpl   $0xfffff830,0x4(%eax)
		jge    jump_2b54d
		movl   $0xfffff830,0x4(%eax)
		jmp    jump_2b54d
	jump_2b52a:
		cmp    EXPORT_SYMBOL(vec_window_height),%edi
		jl     jump_2b54d
		mov    0x26(%eax),%bl
		or     $0x8,%bl
		mov    0x4(%eax),%edx
		mov    %bl,0x26(%eax)
		cmp    $0x7d0,%edx
		jle    jump_2b54d
		movl   $0x7d0,0x4(%eax)
	jump_2b54d:
		orb    $0x40,0x26(%eax)
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret

vtable_2b590:
		.long   func_2b7a0
		.long   func_2b60b
		.long   func_2b7a0
		.long   func_2b60b
		.long   func_2b7a0
		.long   func_2b60b


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_ex_face)	/* 0x02B5A8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		push   %esi
		push   %ebp
		sub    $0xa0,%esp
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		add    $EXPORT_SYMBOL(ex_faces),%eax
		mov    0x5(%eax),%dl
		mov    %dl,EXPORT_SYMBOL(vec_colour)
		mov    0x2(%eax),%dl
		mov    %dl,EXPORT_SYMBOL(vec_mode)
		mov    0x1c(%eax),%edx
		sar    $0x10,%edx
		mov    EXPORT_SYMBOL(game_screen_point_pool),%ebx
		shl    $0x3,%edx
		add    %ebx,%edx
		mov    0x4(%eax),%bl
		dec    %bl
		cmp    $0x5,%bl
		ja     jump_2b8ac
		and    $0xff,%ebx
		jmp    *%cs:vtable_2b590(,%ebx,4)


/*----------------------------------------------------------------*/
func_2b60b:
/*----------------------------------------------------------------*/
		xor    %ebx,%ebx
		mov    (%eax),%bx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		mov    game_textures,%ebx
		add    %eax,%eax
		add    %ebx,%eax
		xor    %ebx,%ebx
		mov    0x8(%eax),%bl
		mov    EXPORT_SYMBOL(vec_tmap)(,%ebx,4),%ebx
		mov    %ebx,EXPORT_SYMBOL(vec_map)
		xor    %ebx,%ebx
		mov    (%eax),%bl
		shl    $0x10,%ebx
		mov    %ebx,0x58(%esp)
		xor    %ebx,%ebx
		mov    0x1(%eax),%bl
		shl    $0x10,%ebx
		mov    %ebx,0x5c(%esp)
		xor    %ebx,%ebx
		mov    0x2(%eax),%bl
		shl    $0x10,%ebx
		mov    %ebx,0x8(%esp)
		xor    %ebx,%ebx
		mov    0x3(%eax),%bl
		shl    $0x10,%ebx
		mov    %ebx,0xc(%esp)
		xor    %ebx,%ebx
		mov    0x4(%eax),%bl
		shl    $0x10,%ebx
		mov    %ebx,0x30(%esp)
		xor    %ebx,%ebx
		mov    0x5(%eax),%bl
		shl    $0x10,%ebx
		mov    %ebx,0x34(%esp)
		xor    %ebx,%ebx
		mov    0x6(%eax),%bl
		shl    $0x10,%ebx
		mov    %ebx,0x80(%esp)
		mov    0x7(%eax),%al
		and    $0xff,%eax
		shl    $0x10,%eax
		mov    %eax,0x84(%esp)
		movswl (%edx),%eax
		mov    %eax,0x50(%esp)
		mov    (%edx),%eax
		mov    $0x100000,%ebx
		sar    $0x10,%eax
		mov    %ebx,0x60(%esp)
		mov    %ebx,0x10(%esp)
		mov    %eax,0x54(%esp)
		mov    0x6(%edx),%eax
		sar    $0x10,%eax
		mov    %eax,(%esp)
		mov    0x8(%edx),%eax
		sar    $0x10,%eax
		mov    %ebx,0x38(%esp)
		mov    %eax,0x4(%esp)
		mov    0xe(%edx),%eax
		sar    $0x10,%eax
		mov    %eax,0x28(%esp)
		mov    0x10(%edx),%eax
		sar    $0x10,%eax
		mov    %ebx,0x88(%esp)
		mov    %eax,0x2c(%esp)
		mov    0x16(%edx),%eax
		sar    $0x10,%eax
		mov    %eax,0x78(%esp)
		mov    0x18(%edx),%eax
		sar    $0x10,%eax
		mov    EXPORT_SYMBOL(dword_176D4C),%ebp
		mov    %eax,0x7c(%esp)
		xor    %eax,%eax
		inc    %ebp
		mov    EXPORT_SYMBOL(vec_mode),%al
		mov    %ebp,EXPORT_SYMBOL(dword_176D4C)
		cmp    $0x2,%eax
		jne    jump_2b720
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_2b720:
		lea    0x28(%esp),%ebx
		mov    %esp,%edx
		lea    0x50(%esp),%eax
		call   ac_draw_trigpoly
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_2b742
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_2b742:
		lea    0x50(%esp),%ebx
		mov    %esp,%edx
		lea    0x28(%esp),%eax
		call   ac_draw_trigpoly
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_2b764
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_2b764:
		lea    0x78(%esp),%ebx
		lea    0x28(%esp),%edx
		mov    %esp,%eax
		call   ac_draw_trigpoly
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_2b786
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_2b786:
		mov    %esp,%ebx
		lea    0x28(%esp),%edx
		lea    0x78(%esp),%eax
		call   ac_draw_trigpoly
		add    $0xa0,%esp
		pop    %ebp
		pop    %esi
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_2b7a0:
/*----------------------------------------------------------------*/
		mov    (%eax),%ax
		and    $0xffff,%eax
		mov    game_face_textures,%ebx
		shl    $0x4,%eax
		add    %ebx,%eax
		xor    %ebx,%ebx
		mov    0x6(%eax),%bl
		mov    EXPORT_SYMBOL(vec_tmap)(,%ebx,4),%ebx
		mov    %ebx,EXPORT_SYMBOL(vec_map)
		xor    %ebx,%ebx
		mov    (%eax),%bl
		shl    $0x10,%ebx
		mov    %ebx,0x58(%esp)
		xor    %ebx,%ebx
		mov    0x1(%eax),%bl
		shl    $0x10,%ebx
		mov    %ebx,0x5c(%esp)
		xor    %ebx,%ebx
		mov    0x4(%eax),%bl
		shl    $0x10,%ebx
		mov    %ebx,0x8(%esp)
		xor    %ebx,%ebx
		mov    0x5(%eax),%bl
		shl    $0x10,%ebx
		mov    %ebx,0xc(%esp)
		xor    %ebx,%ebx
		mov    0x2(%eax),%bl
		shl    $0x10,%ebx
		mov    %ebx,0x30(%esp)
		mov    0x3(%eax),%al
		and    $0xff,%eax
		shl    $0x10,%eax
		mov    %eax,0x34(%esp)
		movl   $0x100000,0x60(%esp)
		movswl (%edx),%eax
		mov    %eax,0x50(%esp)
		mov    (%edx),%eax
		mov    $0x100000,%ebx
		sar    $0x10,%eax
		mov    %ebx,0x38(%esp)
		mov    %eax,0x54(%esp)
		mov    0x6(%edx),%eax
		sar    $0x10,%eax
		mov    %eax,0x28(%esp)
		mov    0x8(%edx),%eax
		sar    $0x10,%eax
		mov    %ebx,0x10(%esp)
		mov    %eax,0x2c(%esp)
		mov    0xe(%edx),%eax
		sar    $0x10,%eax
		mov    %eax,(%esp)
		mov    0x10(%edx),%eax
		sar    $0x10,%eax
		mov    EXPORT_SYMBOL(dword_176D4C),%esi
		mov    %eax,0x4(%esp)
		xor    %eax,%eax
		inc    %esi
		mov    EXPORT_SYMBOL(vec_mode),%al
		mov    %esi,EXPORT_SYMBOL(dword_176D4C)
		cmp    $0x2,%eax
		jne    jump_2b87b
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_2b87b:
		lea    0x28(%esp),%ebx
		mov    %esp,%edx
		lea    0x50(%esp),%eax
		call   ac_draw_trigpoly
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_mode),%al
		cmp    $0x2,%eax
		jne    jump_2b89d
		movb   $0x1b,EXPORT_SYMBOL(vec_mode)
	jump_2b89d:
		lea    0x50(%esp),%ebx
		mov    %esp,%edx
		lea    0x28(%esp),%eax
		call   ac_draw_trigpoly
	jump_2b8ac:
		add    $0xa0,%esp
		pop    %ebp
		pop    %esi
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_animate_textures)	/* 0x02E318 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    game_anim_tmaps,%ebx
		mov    game_textures,%ebp
		mov    EXPORT_SYMBOL(fifties_per_gameturn),%ax
		mov    %ax,(%esp)
		mov    -0x2(%esp),%eax
		sar    $0x10,%eax
		cmp    $0xa,%eax
		jle    jump_2e349
		movw   $0xa,(%esp)
	jump_2e349:
		mov    $0xa,%edx
		cmp    EXPORT_SYMBOL(next_anim_tmap),%dx
		jmp    jump_2e362
	jump_2e357:
		mov    EXPORT_SYMBOL(next_anim_tmap),%si
		inc    %edx
		cmp    %si,%dx
	jump_2e362:
		jae    jump_2e3eb
		xor    %eax,%eax
		mov    %dx,%ax
		imul   $0x36,%eax,%eax
		add    %ebx,%eax
		mov    (%esp),%esi
		mov    0x24(%eax),%di
		add    %esi,%edi
		movzbl 0x22(%eax),%esi
		mov    %di,0x24(%eax)
		movzbl 0x16(%esi,%eax,1),%edi
		xor    %esi,%esi
		mov    0x24(%eax),%si
		sar    $0x4,%esi
		cmp    %edi,%esi
		jle    jump_2e357
		mov    0x22(%eax),%cl
		inc    %cl
		mov    %cl,0x22(%eax)
		mov    0x20(%eax),%esi
		movzbl %cl,%edi
		sar    $0x18,%esi
		movw   $0x0,0x24(%eax)
		cmp    %esi,%edi
		jle    jump_2e3b4
		movb   $0x0,0x22(%eax)
	jump_2e3b4:
		xor    %eax,%eax
		mov    %dx,%ax
		imul   $0x36,%eax,%eax
		add    %ebx,%eax
		movzbl 0x22(%eax),%esi
		mov    0x2(%eax,%esi,2),%si
		and    $0xffff,%esi
		imul   $0x12,%esi,%esi
		mov    (%eax),%ax
		add    %ebp,%esi
		and    $0xffff,%eax
		imul   $0x12,%eax,%eax
		lea    (%eax,%ebp,1),%edi
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsw  %ds:(%esi),%es:(%edi)
		jmp    jump_2e357
	jump_2e3eb:
		mov    %ebp,game_textures
		mov    %ebx,game_anim_tmaps
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_local_to_worldr)	/* 0x02E404 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		mov    EXPORT_SYMBOL(dword_176D14),%edi
		mov    (%eax),%edx
		imul   %edx,%edi
		mov    EXPORT_SYMBOL(dword_176D10),%esi
		mov    (%ebx),%ecx
		imul   %ecx,%esi
		add    %edi,%esi
		sar    $0x10,%esi
		neg    %edx
		mov    %esi,(%eax)
		mov    EXPORT_SYMBOL(dword_176D10),%eax
		imul   %edx,%eax
		imul   EXPORT_SYMBOL(dword_176D14),%ecx
		add    %ecx,%eax
		sar    $0x10,%eax
		mov    %eax,(%ebx)
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_fill_floor_textures)	/* 0x0301A0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    EXPORT_SYMBOL(next_floor_texture),%cx
		mov    EXPORT_SYMBOL(prim4_textures_count),%si
		mov    game_textures,%edi
		mov    $0x1,%edx
		cmp    %dx,%cx
		jbe    jump_3020b
		jmp    jump_301cb
	jump_301c5:
		inc    %edx
		cmp    %cx,%dx
		jae    jump_3020b
	jump_301cb:
		xor    %eax,%eax
		mov    %dx,%ax
		imul   $0x12,%eax,%eax
		mov    %edi,%ebx
		add    %edi,%eax
		xor    %edi,%ebx
		mov    0x8(%eax),%bl
		cmp    $0x5,%ebx
		jne    jump_301c5
		addb   $0x40,(%eax)
		addb   $0x40,0x2(%eax)
		addb   $0x40,0x4(%eax)
		addb   $0x40,0x6(%eax)
		addb   $0xa0,0x1(%eax)
		addb   $0xa0,0x3(%eax)
		addb   $0xa0,0x5(%eax)
		mov    0x7(%eax),%bh
		movb   $0x4,0x8(%eax)
		add    $0xa0,%bh
		mov    %bh,0x7(%eax)
		jmp    jump_301c5
	jump_3020b:
		mov    $0x1,%edx
		cmp    %dx,%si
		jbe    jump_30260
		jmp    jump_3021d
	jump_30217:
		inc    %edx
		cmp    %si,%dx
		jae    jump_30260
	jump_3021d:
		xor    %eax,%eax
		mov    %dx,%ax
		imul   $0x12,%eax,%ebx
		mov    prim4_textures,%eax
		add    %ebx,%eax
		xor    %ebx,%ebx
		mov    0x8(%eax),%bl
		cmp    $0x5,%ebx
		jne    jump_30217
		addb   $0x40,(%eax)
		addb   $0x40,0x2(%eax)
		addb   $0x40,0x4(%eax)
		addb   $0x40,0x6(%eax)
		addb   $0xa0,0x1(%eax)
		addb   $0xa0,0x3(%eax)
		addb   $0xa0,0x5(%eax)
		mov    0x7(%eax),%bh
		movb   $0x4,0x8(%eax)
		add    $0xa0,%bh
		mov    %bh,0x7(%eax)
		jmp    jump_30217
	jump_30260:
		mov    %edi,game_textures
		mov    %si,EXPORT_SYMBOL(prim4_textures_count)
		mov    %cx,EXPORT_SYMBOL(next_floor_texture)
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_read_primveh_obj)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		sub    $0x4,%esp
		mov    $0x2,%edx
		call   ac_LbFileOpen
		mov    %eax,%ecx
		cmp    $0xffffffff,%eax
		je     jump_303f2
		mov    $0x4,%ebx
		mov    %esp,%edx
		call   ac_LbFileRead
		cmpl   $0x1,(%esp)
		jne    jump_302b4
		mov    %ecx,%eax
		call   ac_LbFileClose
		jmp    jump_303f2
	jump_302b4:
		mov    $0x2,%ebx
		mov    $EXPORT_SYMBOL(prim_object_points_count),%edx
		mov    %ecx,%eax
		call   ac_LbFileRead
		mov    $0x2,%ebx
		mov    $EXPORT_SYMBOL(prim_object_faces_count),%edx
		mov    %ecx,%eax
		call   ac_LbFileRead
		mov    $0x2,%ebx
		mov    $EXPORT_SYMBOL(prim_object_faces4_count),%edx
		mov    %ecx,%eax
		call   ac_LbFileRead
		mov    $0x2,%ebx
		mov    $EXPORT_SYMBOL(prim_objects_count),%edx
		mov    %ecx,%eax
		call   ac_LbFileRead
		mov    $0x2,%ebx
		mov    $EXPORT_SYMBOL(prim4_textures_count),%edx
		mov    %ecx,%eax
		call   ac_LbFileRead
		mov    $0x2,%ebx
		mov    $EXPORT_SYMBOL(prim_face_textures_count),%edx
		mov    %ecx,%eax
		call   ac_LbFileRead
		mov    $0x2,%ebx
		mov    $prim_unknprop01,%edx
		mov    %ecx,%eax
		call   ac_LbFileRead
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(prim_object_points_count),%dx
		lea    0x0(,%edx,4),%ebx
		mov    %ecx,%eax
		add    %edx,%ebx
		mov    prim_object_points,%edx
		add    %ebx,%ebx
		call   ac_LbFileRead
		xor    %ebx,%ebx
		mov    prim_object_faces,%edx
		mov    EXPORT_SYMBOL(prim_object_faces_count),%bx
		mov    %ecx,%eax
		shl    $0x5,%ebx
		call   ac_LbFileRead
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(prim_object_faces4_count),%dx
		lea    0x0(,%edx,4),%ebx
		mov    %ecx,%eax
		add    %edx,%ebx
		mov    prim_object_faces4,%edx
		shl    $0x3,%ebx
		call   ac_LbFileRead
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(prim_objects_count),%dx
		lea    0x0(,%edx,8),%ebx
		mov    %ecx,%eax
		add    %edx,%ebx
		mov    prim_objects,%edx
		shl    $0x2,%ebx
		call   ac_LbFileRead
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(prim4_textures_count),%dx
		lea    0x0(,%edx,8),%ebx
		mov    %ecx,%eax
		add    %edx,%ebx
		mov    prim4_textures,%edx
		add    %ebx,%ebx
		call   ac_LbFileRead
		xor    %ebx,%ebx
		mov    prim_face_textures,%edx
		mov    EXPORT_SYMBOL(prim_face_textures_count),%bx
		mov    %ecx,%eax
		shl    $0x4,%ebx
		call   ac_LbFileRead
		mov    %ecx,%eax
		call   ac_LbFileClose
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %ecx
		pop    %ebx
		ret
	jump_303f2:
		xor    %al,%al
		add    $0x4,%esp
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_load_map_bnb)	/* 0x303FC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		sub    $0x28,%esp
		push   %eax
		mov    maps_dir,%edx
		push   %edx
		push   $aSMap03d_bB
		lea    0xc(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0x10,%esp
		mov    $0x2,%edx
		mov    %esp,%eax
		call   ac_LbFileOpen
		mov    %eax,%ecx
		cmp    $0xffffffff,%eax
		jne    jump_30454
		xor    %ah,%ah
		xor    %ecx,%ecx
		mov    %ah,data_177794
		mov    %ah,data_177795
		mov    %ah,data_177796
		mov    %ah,data_177797
		mov    %ecx,data_177790
		jmp    jump_30475
	jump_30454:
		mov    $0x4,%ebx
		mov    $data_177794,%edx
		call   ac_LbFileRead
		mov    %ecx,%eax
		mov    $0x2,%ebx
		call   ac_LbFileClose
		mov    %ebx,data_177790
	jump_30475:
		mov    data_177794,%al
		mov    data_177796,%bh
		cmp    %bh,%al
		jb     jump_30486
		mov    %bh,%al
	jump_30486:
		mov    data_177795,%dl
		mov    data_177797,%cl
		and    $0xff,%eax
		cmp    %cl,%dl
		jb     jump_3049d
		mov    %cl,%dl
	jump_3049d:
		mov    data_177794,%bl
		mov    data_177796,%ch
		and    $0xff,%edx
		cmp    %ch,%bl
		ja     jump_304b5
		mov    %ch,%bl
	jump_304b5:
		mov    data_177795,%cl
		mov    data_177797,%ch
		and    $0xff,%ebx
		cmp    %ch,%cl
		ja     jump_304cd
		mov    %ch,%cl
	jump_304cd:
		mov    EXPORT_SYMBOL(vec_tmap)+16,%esi
		add    $0xa040,%esi
		push   %esi
		and    $0xff,%ecx
		call   ASM_BAT_unknsub_20
		add    $0x28,%esp
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_sanitize_cybmods_fmtver11_flags)	/* 0x304f0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		mov    %eax,%ebx
		mov    (%eax),%dx
		xor    %eax,%eax
		test   $0x1,%dl
		je     jump_30503
		mov    $0x1,%eax
	jump_30503:
		test   $0x2,%dl
		je     jump_3050c
		and    $0xf8,%al
		or     $0x2,%al
	jump_3050c:
		test   $0x4,%dl
		je     jump_30515
		and    $0xf8,%al
		or     $0x3,%al
	jump_30515:
		test   $0x8,%dl
		je     jump_3051e
		and    $0xc7,%al
		or     $0x8,%al
	jump_3051e:
		test   $0x10,%dl
		je     jump_30527
		and    $0xc7,%al
		or     $0x10,%al
	jump_30527:
		test   $0x20,%dl
		je     jump_30530
		and    $0xc7,%al
		or     $0x18,%al
	jump_30530:
		test   $0x40,%dl
		je     jump_3053c
		and    $0xfffffe3f,%eax
		or     $0x40,%al
	jump_3053c:
		test   $0x80,%dl
		je     jump_30548
		and    $0xfffffe3f,%eax
		or     $0x80,%al
	jump_30548:
		test   $0x1,%dh
		je     jump_30554
		and    $0xfffffe3f,%eax
		or     $0xc0,%al
	jump_30554:
		test   $0x2,%dh
		je     jump_3055f
		and    $0xf1,%ah
		or     $0x2,%ah
	jump_3055f:
		test   $0x4,%dh
		je     jump_3056a
		and    $0xf1,%ah
		or     $0x4,%ah
	jump_3056a:
		test   $0x8,%dh
		je     jump_30575
		and    $0xf1,%ah
		or     $0x6,%ah
	jump_30575:
		test   $0x10,%dh
		je     jump_30580
		and    $0xf,%ah
		or     $0x10,%ah
	jump_30580:
		test   $0x20,%dh
		je     jump_3058b
		and    $0xf,%ah
		or     $0x20,%ah
	jump_3058b:
		test   $0x40,%dh
		je     jump_30596
		and    $0xf,%ah
		or     $0x30,%ah
	jump_30596:
		test   $0x80,%dh
		je     jump_305a1
		and    $0xf,%ah
		or     $0x40,%ah
	jump_305a1:
		mov    %ax,(%ebx)
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_find_nearest_object2)	/* 0x0305A8 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x30,%esp
		mov    things,%esi
		mov    %ax,0x28(%esp)
		mov    %dx,0x2c(%esp)
		mov    %ebx,0x24(%esp)
		xor    %edx,%edx
		mov    0x26(%esp),%eax
		mov    %edx,0x20(%esp)
		sar    $0x10,%eax
		mov    0x2a(%esp),%edx
		sar    $0x8,%eax
		sar    $0x10,%edx
		lea    -0x14(%eax),%ebx
		sar    $0x8,%edx
		mov    %ebx,0x4(%esp)
		lea    0x14(%edx),%ebx
		sub    $0x14,%edx
		add    $0x14,%eax
		mov    %edx,(%esp)
		mov    0x4(%esp),%edx
		mov    %eax,0xc(%esp)
		lea    0x0(,%edx,8),%eax
		mov    $0x7fffffff,%edi
		add    %edx,%eax
		mov    %ebx,0x14(%esp)
		add    %eax,%eax
		mov    0xc(%esp),%ebx
		mov    %eax,0x10(%esp)
		cmp    %ebx,%edx
		jmp    jump_30632
	jump_30618:
		mov    0x10(%esp),%ecx
		mov    0x4(%esp),%ebp
		mov    0xc(%esp),%edx
		add    $0x12,%ecx
		inc    %ebp
		mov    %ecx,0x10(%esp)
		mov    %ebp,0x4(%esp)
		cmp    %edx,%ebp
	jump_30632:
		jge    jump_3075a
		mov    (%esp),%eax
		mov    %eax,0x1c(%esp)
		mov    %eax,%ebx
		imul   $0x900,%eax,%eax
		add    0x10(%esp),%eax
		mov    0x14(%esp),%ebp
		mov    %eax,0x18(%esp)
		cmp    %ebp,%ebx
		jmp    jump_30686
	jump_30657:
		imul   $0x3c,%edx,%eax
		mov    EXPORT_SYMBOL(sthings),%edx
		mov    0x2(%edx,%eax,1),%ax
	jump_30665:
		test   %ax,%ax
		jne    jump_306bc
	jump_3066a:
		mov    0x18(%esp),%eax
		mov    0x1c(%esp),%edx
		mov    0x14(%esp),%ebx
		add    $0x900,%eax
		inc    %edx
		mov    %eax,0x18(%esp)
		mov    %edx,0x1c(%esp)
		cmp    %ebx,%edx
	jump_30686:
		jge    jump_30618
		mov    0x4(%esp),%ecx
		cmp    $0x80,%ecx
		jge    jump_3066a
		mov    0x1c(%esp),%ebp
		cmp    $0x80,%ebp
		jge    jump_3066a
		test   %ecx,%ecx
		jle    jump_3066a
		test   %ebp,%ebp
		jle    jump_3066a
		mov    0x18(%esp),%ebx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %ebx,%eax
		mov    0x8(%eax),%ax
		test   %ax,%ax
		je     jump_3066a
	jump_306bc:
		movswl %ax,%edx
		test   %edx,%edx
		jle    jump_30657
		imul   $0xa8,%edx,%edx
		lea    (%esi,%edx,1),%ebx
		xor    %edx,%edx
		mov    0x9(%ebx),%dl
		cmp    $0x9,%edx
		jne    jump_30745
		xor    %edx,%edx
		mov    0x24(%esp),%dx
		test   %edx,%edx
		je     jump_306ee
		mov    0x8(%ebx),%bl
		and    $0xff,%ebx
		cmp    %edx,%ebx
		jne    jump_30745
	jump_306ee:
		movswl %ax,%ebx
		imul   $0xa8,%ebx,%ecx
		mov    %esi,%edx
		mov    0x50(%ecx,%edx,1),%ecx
		sar    $0x10,%ecx
		imul   $0x24,%ecx,%ecx
		mov    game_objects,%edx
		add    %ecx,%edx
		mov    0x12(%edx),%ecx
		sar    $0x10,%ecx
		mov    %ecx,0x8(%esp)
		mov    0x26(%esp),%ecx
		mov    0x8(%esp),%ebp
		sar    $0x10,%ecx
		sub    %ecx,%ebp
		mov    %ebp,%ecx
		imul   %ecx,%ecx
		mov    0x14(%edx),%edx
		mov    0x2a(%esp),%ebp
		sar    $0x10,%edx
		sar    $0x10,%ebp
		sub    %ebp,%edx
		imul   %edx,%edx
		add    %ecx,%edx
		cmp    %edi,%edx
		jae    jump_30745
		mov    %edx,%edi
		mov    %ebx,0x20(%esp)
	jump_30745:
		movswl %ax,%ebx
		imul   $0xa8,%ebx,%ebx
		mov    %esi,%edx
		mov    0x2(%edx,%ebx,1),%ax
		jmp    jump_30665
	jump_3075a:
		mov    0x20(%esp),%eax
		mov    %esi,things
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_level_misc_update)	/* 0x030A9C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    game_level_miscs,%ecx
		xor    %ebx,%ebx
		jmp    jump_30b64
	jump_30aae:
		movswl (%eax),%edi
		mov    0x2(%eax),%eax
		xor    %edx,%edx
		sar    $0x10,%eax
		mov    %edi,engn_xc
		mov    %eax,engn_zc
		mov    $0x20,%eax
		mov    %edx,engn_yc
		call   ac_map_things_unkn_func_04
		test   %ax,%ax
		je     jump_30b0a
		cwtl
		imul   $0xa8,%eax,%edi
		mov    game_level_miscs,%ecx
		add    %ecx,%esi
		mov    things,%eax
		mov    0x6(%esi),%dl
		mov    %dl,0x50(%edi,%eax,1)
		mov    0x8(%esi),%dl
		movw   $0x0,0x84(%edi,%eax,1)
		mov    %dl,0x88(%edi,%eax,1)
		jmp    jump_30b5d
	jump_30b0a:
		mov    %ebx,%edx
		mov    game_level_miscs,%ecx
		inc    %edx
		jmp    jump_30b2a
	jump_30b15:
		imul   $0x16,%eax,%esi
		dec    %eax
		imul   $0x16,%eax,%eax
		add    %ecx,%esi
		lea    (%ecx,%eax,1),%edi
		dec    %ebx
		inc    %edx
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsw  %ds:(%esi),%es:(%edi)
	jump_30b2a:
		xor    %eax,%eax
		mov    %dx,%ax
		cmp    $0xc8,%eax
		jl     jump_30b15
		mov    %ecx,game_level_miscs
		movb   $0x0,0x1125(%ecx)
		jmp    jump_30b5d
	jump_30b45:
		imul   $0x16,%eax,%esi
		lea    (%ecx,%esi,1),%eax
		mov    0xb(%eax),%dl
		mov    %ecx,game_level_miscs
		cmp    $0x1,%dl
		je     jump_30aae
	jump_30b5d:
		mov    game_level_miscs,%ecx
		inc    %ebx
	jump_30b64:
		xor    %eax,%eax
		mov    %bx,%ax
		cmp    $0xc8,%eax
		jl     jump_30b45
		mov    %ecx,game_level_miscs
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_unkn_f_pressed_func)	/* 0x030C24 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		mov    game_commands,%ebx
		mov    EXPORT_SYMBOL(same_type_head)+2,%ax
		xor    %edi,%edi
		test   %ax,%ax
		je     jump_30cee
		mov    %ebx,%esi
	jump_30c43:
		xor    %edx,%edx
		mov    %di,%dx
		cmp    $0x3e8,%edx
		jge    jump_30cee
		and    $0xffff,%eax
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		lea    (%edx,%eax,1),%ebp
		mov    0x52(%ebp),%dx
		xor    %ecx,%ecx
		jmp    jump_30cdb
	jump_30c73:
		test   %cx,%cx
		je     jump_30c88
		and    $0xffff,%ecx
		mov    %ebx,%eax
		shl    $0x5,%ecx
		orb    $0x2,0x18(%ecx,%eax,1)
	jump_30c88:
		xor    %eax,%eax
		mov    %dx,%ax
		mov    %ebx,%ecx
		shl    $0x5,%eax
		orb    $0x4,0x18(%ecx,%eax,1)
		jmp    jump_30ccb
	jump_30c99:
		xor    %eax,%eax
		mov    %dx,%ax
		shl    $0x5,%eax
		mov    0xa(%esi,%eax,1),%al
		cmp    $0x78,%al
		jb     jump_30cc3
		jbe    jump_30c73
		cmp    $0x7e,%al
		jb     jump_30c73
		jbe    jump_30c73
		cmp    $0x82,%al
		jb     jump_30cbd
		jbe    jump_30c73
		cmp    $0x89,%al
		je     jump_30c73
		jmp    jump_30ccb
	jump_30cbd:
		cmp    $0x7f,%al
		je     jump_30c73
		jmp    jump_30ccb
	jump_30cc3:
		cmp    $0x71,%al
		jae    jump_30c73
		cmp    $0x6f,%al
		jae    jump_30c73
	jump_30ccb:
		xor    %eax,%eax
		mov    %dx,%ax
		mov    %edx,%ecx
		shl    $0x5,%eax
		mov    %ebx,%edx
		mov    (%edx,%eax,1),%dx
	jump_30cdb:
		test   %dx,%dx
		jne    jump_30c99
		mov    0x10(%ebp),%ax
		inc    %edi
		test   %ax,%ax
		jne    jump_30c43
	jump_30cee:
		mov    %ebx,game_commands
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_search_things_for_uniqueid)	/* 0x0318C8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		mov    things,%ebp
		mov    %eax,%ebx
		test   %dl,%dl
		je     jump_31912
		mov    things_used_head,%dx
		movswl %bx,%esi
	jump_318e3:
		movswl %dx,%eax
		test   %eax,%eax
		jle    jump_31943
		imul   $0xa8,%eax,%eax
		mov    %ebp,%ecx
		add    %ebp,%eax
		xor    %ebp,%ecx
		mov    0x9(%eax),%cl
		cmp    $0x9,%ecx
		je     jump_3190c
		xor    %ecx,%ecx
		mov    0x4e(%eax),%cx
		cmp    %ecx,%esi
		jne    jump_3190c
		mov    %edx,%eax
		jmp    jump_31945
	jump_3190c:
		mov    0x6(%eax),%dx
		jmp    jump_318e3
	jump_31912:
		mov    sthings_used_head,%ax
		movswl %bx,%esi
	jump_3191b:
		movswl %ax,%edx
		test   %edx,%edx
		jge    jump_3193f
		imul   $0x3c,%edx,%edx
		mov    EXPORT_SYMBOL(sthings),%ecx
		add    %ecx,%edx
		xor    %ecx,%ecx
		mov    0x3a(%edx),%cx
		cmp    %ecx,%esi
		jne    jump_31939
		mov    %eax,%edi
	jump_31939:
		mov    0x6(%edx),%ax
		jmp    jump_3191b
	jump_3193f:
		mov    %edi,%eax
		jmp    jump_31945
	jump_31943:
		xor    %eax,%eax
	jump_31945:
		mov    %ebp,things
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_unkn_lights_processing)	/* 0x0319E4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    EXPORT_SYMBOL(next_light_command),%bx
		mov    game_full_lights,%ebp
		mov    EXPORT_SYMBOL(next_full_light),%dx
		xor    %eax,%eax
		test   %dx,%dx
		jbe    jump_31a33
		jmp    jump_31a17
	jump_31a0a:
		mov    EXPORT_SYMBOL(next_full_light),%cx
		inc    %eax
		cmp    %cx,%ax
		jae    jump_31a33
	jump_31a17:
		xor    %esi,%esi
		mov    %ax,%si
		shl    $0x5,%esi
		lea    (%esi,%ebp,1),%edx
		mov    0x4(%edx),%si
		cmp    %bx,%si
		jbe    jump_31a0a
		movw   $0x0,0x4(%edx)
		jmp    jump_31a0a
	jump_31a33:
		mov    $0x1,%esi
		mov    %esi,(%esp)
		cmp    %si,%bx
		ja     jump_31a55
		jmp    jump_31c20
	jump_31a45:
		mov    (%esp),%edi
		inc    %edi
		mov    %edi,(%esp)
		cmp    %di,%bx
		jbe    jump_31c20
	jump_31a55:
		xor    %edx,%edx
		mov    (%esp),%dx
		imul   $0x24,%edx,%eax
		mov    game_light_commands,%edx
		mov    0x10(%edx,%eax,1),%edi
		sar    $0x10,%edi
		test   %edi,%edi
		jge    jump_31b95
		cmp    $0xfffffa24,%edi
		jge    jump_31afa
		mov    $0x1,%eax
		mov    EXPORT_SYMBOL(next_full_light),%dx
		mov    (%esp),%edi
		cmp    %ax,%dx
		jbe    jump_31ac1
		jmp    jump_31aa2
	jump_31a95:
		mov    EXPORT_SYMBOL(next_full_light),%dx
		inc    %eax
		cmp    %dx,%ax
		jae    jump_31ac1
	jump_31aa2:
		xor    %edx,%edx
		mov    %ax,%dx
		mov    %edx,%esi
		shl    $0x5,%esi
		lea    (%esi,%ebp,1),%edx
		mov    0x4(%edx),%cx
		cmp    %cx,%di
		jae    jump_31a95
		mov    %ecx,%esi
		dec    %esi
		mov    %si,0x4(%edx)
		jmp    jump_31a95
	jump_31ac1:
		mov    %edi,%eax
		cmp    %bx,%di
		jae    jump_31aed
	jump_31ac8:
		xor    %edi,%edi
		mov    %ax,%di
		lea    0x1(%edi),%esi
		imul   $0x24,%esi,%esi
		imul   $0x24,%edi,%edi
		mov    game_light_commands,%edx
		mov    $0x9,%ecx
		add    %edx,%esi
		add    %edx,%edi
		inc    %eax
		rep movsl %ds:(%esi),%es:(%edi)
		cmp    %bx,%ax
		jb     jump_31ac8
	jump_31aed:
		mov    (%esp),%edi
		dec    %edi
		dec    %ebx
		mov    %edi,(%esp)
		jmp    jump_31a45
	jump_31afa:
		imul   $0x3c,%edi,%edi
		mov    EXPORT_SYMBOL(sthings),%eax
		xor    %edx,%edx
		mov    0x30(%edi,%eax,1),%ax
		mov    %ax,%dx
		test   %edx,%edx
		je     jump_31b1d
		cmp    EXPORT_SYMBOL(next_full_light),%ax
		jbe    jump_31a45
	jump_31b1d:
		mov    $0x1,%eax
		mov    EXPORT_SYMBOL(next_full_light),%si
		mov    (%esp),%edi
		cmp    %ax,%si
		jbe    jump_31b5c
		jmp    jump_31b40
	jump_31b33:
		mov    EXPORT_SYMBOL(next_full_light),%dx
		inc    %eax
		cmp    %dx,%ax
		jae    jump_31b5c
	jump_31b40:
		xor    %edx,%edx
		mov    %ax,%dx
		shl    $0x5,%edx
		add    %ebp,%edx
		mov    0x4(%edx),%cx
		cmp    %cx,%di
		jae    jump_31b33
		mov    %ecx,%esi
		dec    %esi
		mov    %si,0x4(%edx)
		jmp    jump_31b33
	jump_31b5c:
		mov    %edi,%eax
		cmp    %bx,%di
		jae    jump_31b88
	jump_31b63:
		xor    %edi,%edi
		mov    %ax,%di
		lea    0x1(%edi),%edx
		imul   $0x24,%edx,%esi
		imul   $0x24,%edi,%edi
		mov    game_light_commands,%edx
		mov    $0x9,%ecx
		add    %edx,%esi
		add    %edx,%edi
		inc    %eax
		rep movsl %ds:(%esi),%es:(%edi)
		cmp    %bx,%ax
		jb     jump_31b63
	jump_31b88:
		mov    (%esp),%edi
		dec    %edi
		dec    %ebx
		mov    %edi,(%esp)
		jmp    jump_31a45
	jump_31b95:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(next_full_light),%ax
		cmp    %eax,%edi
		jle    jump_31a45
		mov    $0x1,%eax
		mov    EXPORT_SYMBOL(next_full_light),%dx
		mov    (%esp),%edi
		cmp    %ax,%dx
		jbe    jump_31be7
		jmp    jump_31bc8
	jump_31bbb:
		mov    EXPORT_SYMBOL(next_full_light),%cx
		inc    %eax
		cmp    %cx,%ax
		jae    jump_31be7
	jump_31bc8:
		xor    %edx,%edx
		mov    %ax,%dx
		mov    %edx,%esi
		shl    $0x5,%esi
		lea    (%esi,%ebp,1),%edx
		mov    0x4(%edx),%si
		cmp    %si,%di
		jae    jump_31bbb
		mov    %esi,%ecx
		dec    %ecx
		mov    %cx,0x4(%edx)
		jmp    jump_31bbb
	jump_31be7:
		mov    %edi,%eax
		cmp    %bx,%di
		jae    jump_31c13
	jump_31bee:
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x1(%edx),%esi
		imul   $0x24,%esi,%esi
		imul   $0x24,%edx,%edx
		mov    game_light_commands,%edi
		mov    $0x9,%ecx
		add    %edi,%esi
		add    %edx,%edi
		inc    %eax
		rep movsl %ds:(%esi),%es:(%edi)
		cmp    %bx,%ax
		jb     jump_31bee
	jump_31c13:
		mov    (%esp),%esi
		dec    %esi
		dec    %ebx
		mov    %esi,(%esp)
		jmp    jump_31a45
	jump_31c20:
		mov    %ebp,game_full_lights
		mov    %bx,EXPORT_SYMBOL(next_light_command)
		add    $0x4,%esp
		pop    %ebp
	jump_31c31:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_update_map_thing_and_traffic_refs)	/* 0x031C38 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    things_used_head,%ax
		xor    %esi,%esi
	jump_31c45:
		cwtl
		test   %eax,%eax
		jle    jump_31cbf
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %eax,%edx
		xor    %eax,%eax
		mov    0x9(%edx),%al
		cmp    $0x9,%eax
		jne    jump_31cb9
		xor    %eax,%eax
		mov    0x8(%edx),%al
		cmp    $0x15,%eax
		jne    jump_31c8f
		mov    0x4c(%edx),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jle    jump_31c83
		call   ac_search_things_for_index
		mov    %ax,0x4e(%edx)
	jump_31c83:
		mov    0x4a(%edx),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jle    jump_31cb9
		jmp    jump_31cb0
	jump_31c8f:
		cmp    0x4e(%edx),%si
		je     jump_31ca4
		mov    0x4c(%edx),%eax
		sar    $0x10,%eax
		call   ac_search_things_for_index
		mov    %ax,0x4e(%edx)
	jump_31ca4:
		cmp    0x4c(%edx),%si
		je     jump_31cb9
		mov    0x4a(%edx),%eax
		sar    $0x10,%eax
	jump_31cb0:
		call   ac_search_things_for_index
		mov    %ax,0x4c(%edx)
	jump_31cb9:
		mov    0x6(%edx),%ax
		jmp    jump_31c45
	jump_31cbf:
		mov    sthings_used_head,%ax
		xor    %esi,%esi
	jump_31cc7:
		movswl %ax,%edi
		test   %edi,%edi
		jge    jump_31d13
		imul   $0x3c,%edi,%ecx
		mov    EXPORT_SYMBOL(sthings),%eax
		add    %eax,%ecx
		xor    %eax,%eax
		mov    0x9(%ecx),%al
		cmp    $0xa,%eax
		jne    jump_31d0d
		mov    %esi,%ebx
		jmp    jump_31ce7
	jump_31ce6:
		inc    %ebx
	jump_31ce7:
		xor    %eax,%eax
		mov    %bx,%ax
		cmp    $0x4,%eax
		jge    jump_31d0d
		add    %eax,%eax
		lea    (%ecx,%eax,1),%edx
		cmp    0x2c(%edx),%si
		je     jump_31ce6
		mov    0x2a(%edx),%eax
		sar    $0x10,%eax
		call   ac_search_things_for_index
		mov    %ax,0x2c(%edx)
		jmp    jump_31ce6
	jump_31d0d:
		mov    0x6(%ecx),%ax
		jmp    jump_31cc7
	jump_31d13:
		mov    $0x1,%edi
		cmp    EXPORT_SYMBOL(next_traffic_node),%di
		jae    jump_31da6
		xor    %edx,%edx
		jmp    jump_31d2a
	jump_31d29:
		inc    %edx
	jump_31d2a:
		xor    %eax,%eax
		mov    %dx,%ax
		cmp    $0x4,%eax
		jge    jump_31d6a
		xor    %ebx,%ebx
		mov    %di,%bx
		imul   $0x24,%ebx,%ebx
		mov    EXPORT_SYMBOL(game_traffic_nodes),%esi
		lea    0x0(,%eax,2),%ecx
		add    %ebx,%esi
		mov    0x4(%ecx,%esi,1),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jle    jump_31d29
		call   ac_search_things_for_index
		mov    EXPORT_SYMBOL(game_traffic_nodes),%esi
		add    %esi,%ebx
		mov    %ax,0x6(%ecx,%ebx,1)
		jmp    jump_31d29
	jump_31d6a:
		xor    %edx,%edx
		mov    %di,%dx
		imul   $0x24,%edx,%edx
		mov    EXPORT_SYMBOL(game_traffic_nodes),%eax
		add    %edx,%eax
		cmpw   $0x0,0x14(%eax)
		je     jump_31d96
		mov    0x12(%eax),%eax
		sar    $0x10,%eax
		call   ac_search_things_for_index
		mov    EXPORT_SYMBOL(game_traffic_nodes),%ebx
		mov    %ax,0x14(%edx,%ebx,1)
	jump_31d96:
		mov    EXPORT_SYMBOL(next_traffic_node),%ax
		inc    %edi
		cmp    %ax,%di
		jae    jump_31da6
		xor    %edx,%edx
		jmp    jump_31d2a
	jump_31da6:
		mov    things_used_head,%dx
	jump_31dad:
		movswl %dx,%eax
		test   %eax,%eax
		jle    jump_31dd6
		imul   $0xa8,%eax,%eax
		mov    things,%ebx
		add    %ebx,%eax
		xor    %ebx,%ebx
		mov    0x9(%eax),%bl
		cmp    $0x9,%ebx
		jne    jump_31dd0
		mov    %dx,0x16(%eax)
	jump_31dd0:
		mov    0x6(%eax),%dx
		jmp    jump_31dad
	jump_31dd6:
		mov    sthings_used_head,%dx
	jump_31ddd:
		movswl %dx,%eax
		test   %eax,%eax
		jge    jump_31e02
		imul   $0x3c,%eax,%ebx
		mov    EXPORT_SYMBOL(sthings),%eax
		add    %ebx,%eax
		xor    %ebx,%ebx
		mov    0x9(%eax),%bl
		cmp    $0xa,%ebx
		jne    jump_31dfc
		mov    %dx,0x16(%eax)
	jump_31dfc:
		mov    0x6(%eax),%dx
		jmp    jump_31ddd
	jump_31e02:
		mov    things_used_head,%dx
	jump_31e09:
		movswl %dx,%eax
		test   %eax,%eax
		jle    jump_31e3e
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x9(%eax),%dl
		cmp    $0x9,%edx
		jne    jump_31e38
		testb  $0x10,0xf(%eax)
		je     jump_31e38
		movb   $0x3,0x58(%eax)
		movb   $0x1,0x59(%eax)
		jmp    jump_31e3e
	jump_31e38:
		mov    0x6(%eax),%dx
		jmp    jump_31e09
	jump_31e3e:
		mov    $0x1,%eax
		cmp    EXPORT_SYMBOL(next_object_face4),%ax
		jmp    jump_31e57
	jump_31e4c:
		mov    EXPORT_SYMBOL(next_object_face4),%bx
		inc    %eax
		cmp    %bx,%ax
	jump_31e57:
		jae    jump_31c31
		xor    %edx,%edx
		mov    %ax,%dx
		imul   $0x28,%edx,%ebx
		mov    game_object_faces4,%edx
		add    %ebx,%edx
		testb  $0x10,0xa(%edx)
		je     jump_31e4c
		movw   $0x0,0x22(%edx)
		jmp    jump_31e4c


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_new_thing_traffic_clone)	/* 0x031E7C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    %eax,%esi
		call   ac_get_new_sthing
		movswl %ax,%ebx
		mov    %ax,(%esp)
		mov    %ebx,%eax
		shl    $0x4,%eax
		sub    %ebx,%eax
		lea    0x0(,%eax,4),%ebx
		mov    EXPORT_SYMBOL(sthings),%eax
		add    %ebx,%eax
		mov    0x18(%esi),%ebx
		mov    %ebx,0x18(%eax)
		mov    0x20(%esi),%ebx
		mov    %ebx,0x20(%eax)
		mov    0x1c(%esi),%ebx
		movb   $0xa,0x9(%eax)
		mov    %ebx,0x1c(%eax)
		mov    0x8(%esi),%dl
		mov    %dl,0x8(%eax)
		mov    0x16(%esi),%dx
		mov    %dx,0x16(%eax)
		xor    %edx,%edx
		jmp    jump_31efe
	jump_31ecf:
		mov    -0x2(%esp),%ecx
		sar    $0x10,%ecx
		imul   $0x3c,%ecx,%edi
		mov    EXPORT_SYMBOL(sthings),%ecx
		lea    0x0(,%eax,2),%ebx
		add    %edi,%ecx
		lea    (%ecx,%ebx,1),%edi
		mov    0x2c(%esi,%ebx,1),%bx
		inc    %edx
		mov    %bx,0x2c(%edi)
		add    %eax,%ecx
		mov    0x34(%esi,%eax,1),%al
		mov    %al,0x34(%ecx)
	jump_31efe:
		xor    %eax,%eax
		mov    %dx,%ax
		cmp    $0x4,%eax
		jl     jump_31ecf
		mov    -0x2(%esp),%eax
		sar    $0x10,%eax
		call   ac_add_node_sthing
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
ASM_change_current_map:	/* 0x03293C */
/*----------------------------------------------------------------*/
		push   %edx
		mov    %eax,%edx
		mov    %ax,current_map
		call   ac_init_things
		movswl %dx,%eax
		call   ac_load_mad_pc
		call   ac_fill_floor_textures
		pop    %edx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_save_crypto_transform1)	/* 0x032C10 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		mov    EXPORT_SYMBOL(save_crypto_tables_state),%dl
		test   %al,%al
		jne    jump_32c2e
		xor    %eax,%eax
		mov    %dl,%al
		mov    save_hashtbl_01(,%eax,4),%eax
		jmp    jump_32cad
	jump_32c2e:
		xor    %ah,%ah
		mov    %ah,EXPORT_SYMBOL(save_crypto_data_state)
		mov    %dl,%al
		sub    $0x37,%al
		movsbl %al,%ebx
		test   %ebx,%ebx
		jge    jump_32c43
		add    $0x38,%al
	jump_32c43:
		mov    %dl,%ah
		sub    $0x18,%ah
		movsbl %ah,%ebx
		test   %ebx,%ebx
		jge    jump_32c52
		add    $0x38,%ah
	jump_32c52:
		movsbl %al,%ebx
		lea    0x0(,%ebx,4),%esi
		movsbl %ah,%ebx
		lea    0x0(,%ebx,4),%ecx
		mov    save_hashtbl_01(%esi),%ebx
		mov    save_hashtbl_01(%ecx),%esi
		lea    (%ebx,%esi,1),%ecx
		xor    %ebx,%ebx
		mov    %dl,%bl
		mov    %ecx,save_hashtbl_01(,%ebx,4)
		xor    %ebx,%ebx
		xor    %ecx,%ecx
		mov    %dl,%bl
		inc    %dl
		mov    %dl,%cl
		mov    save_hashtbl_01(,%ebx,4),%ebx
		cmp    $0x37,%ecx
		jle    jump_32c98
		xor    %dl,%dl
	jump_32c98:
		movsbl %al,%eax
		cmp    save_hashtbl_01(,%eax,4),%ebx
		jae    jump_32cab
		movb   $0x1,EXPORT_SYMBOL(save_crypto_data_state)
	jump_32cab:
		mov    %ebx,%eax
	jump_32cad:
		mov    %dl,EXPORT_SYMBOL(save_crypto_tables_state)
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_save_crypto_transform2)	/* 0x032CB8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		mov    data_1770f5,%dl
		test   %al,%al
		jne    jump_32cd6
		xor    %eax,%eax
		mov    %dl,%al
		mov    save_hashtbl_02(,%eax,4),%eax
		jmp    jump_32d55
	jump_32cd6:
		xor    %ah,%ah
		mov    %ah,data_1770f9
		mov    %dl,%al
		sub    $0x39,%al
		movsbl %al,%ebx
		test   %ebx,%ebx
		jge    jump_32ceb
		add    $0x3a,%al
	jump_32ceb:
		mov    %dl,%ah
		sub    $0x7,%ah
		movsbl %ah,%ebx
		test   %ebx,%ebx
		jge    jump_32cfa
		add    $0x3a,%ah
	jump_32cfa:
		movsbl %al,%ebx
		lea    0x0(,%ebx,4),%esi
		movsbl %ah,%ebx
		lea    0x0(,%ebx,4),%ecx
		mov    save_hashtbl_02(%esi),%ebx
		mov    save_hashtbl_02(%ecx),%esi
		lea    (%ebx,%esi,1),%ecx
		xor    %ebx,%ebx
		mov    %dl,%bl
		mov    %ecx,save_hashtbl_02(,%ebx,4)
		xor    %ebx,%ebx
		xor    %ecx,%ecx
		mov    %dl,%bl
		inc    %dl
		mov    %dl,%cl
		mov    save_hashtbl_02(,%ebx,4),%ebx
		cmp    $0x39,%ecx
		jle    jump_32d40
		xor    %dl,%dl
	jump_32d40:
		movsbl %al,%eax
		cmp    save_hashtbl_02(,%eax,4),%ebx
		jae    jump_32d53
		movb   $0x1,data_1770f9
	jump_32d53:
		mov    %ebx,%eax
	jump_32d55:
		mov    %dl,data_1770f5
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_save_crypto_transform3)	/* 0x032D60 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		mov    data_1770f6,%dl
		test   %al,%al
		jne    jump_32d7e
		xor    %eax,%eax
		mov    %dl,%al
		mov    save_hashtbl_03(,%eax,4),%eax
		jmp    jump_32e04
	jump_32d7e:
		xor    %ah,%ah
		mov    %ah,data_1770fa
		mov    EXPORT_SYMBOL(save_crypto_tables_state),%al
		sub    $0x3a,%al
		movsbl %al,%ebx
		test   %ebx,%ebx
		jge    jump_32d96
		add    $0x3b,%al
	jump_32d96:
		mov    EXPORT_SYMBOL(save_crypto_tables_state),%ah
		sub    $0x13,%ah
		movsbl %ah,%ebx
		test   %ebx,%ebx
		jge    jump_32da9
		add    $0x3b,%ah
	jump_32da9:
		movsbl %al,%ebx
		lea    0x0(,%ebx,4),%esi
		movsbl %ah,%ebx
		lea    0x0(,%ebx,4),%ecx
		mov    save_hashtbl_03(%esi),%ebx
		mov    save_hashtbl_03(%ecx),%esi
		lea    (%ebx,%esi,1),%ecx
		xor    %ebx,%ebx
		mov    %dl,%bl
		mov    %ecx,save_hashtbl_03(,%ebx,4)
		xor    %ebx,%ebx
		xor    %ecx,%ecx
		mov    %dl,%bl
		inc    %dl
		mov    %dl,%cl
		mov    save_hashtbl_03(,%ebx,4),%ebx
		cmp    $0x3a,%ecx
		jle    jump_32def
		xor    %dl,%dl
	jump_32def:
		movsbl %al,%eax
		cmp    save_hashtbl_03(,%eax,4),%ebx
		jae    jump_32e02
		movb   $0x1,data_1770fa
	jump_32e02:
		mov    %ebx,%eax
	jump_32e04:
		mov    %dl,data_1770f6
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_save_crypto_make_hashtable)	/* 0x032E2C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		and    $0xff,%eax
		jne    jump_32e3d
		mov    EXPORT_SYMBOL(save_mortal_salt),%edx
		jmp    jump_32e42
	jump_32e3d:
		mov    $0x5e280a1d,%edx
	jump_32e42:
		xor    %eax,%eax
	jump_32e44:
		imul   $0xbb40e62d,%edx,%edx
		mov    %edx,%ebx
		shr    $0x8,%ebx
		and    $0xffff,%ebx
		add    $0x4,%eax
		and    $0xffff,%ebx
		mov    %ebx,EXPORT_SYMBOL(save_mortal_salt)(%eax)
		cmp    $0xe0,%eax
		jne    jump_32e44
		xor    %eax,%eax
	jump_32e6d:
		imul   $0xbb40e62d,%edx,%edx
		mov    %edx,%ebx
		shr    $0x8,%ebx
		and    $0xffff,%ebx
		add    $0x4,%eax
		and    $0xffff,%ebx
		mov    %ebx,data_176f1c(%eax)
		cmp    $0xe8,%eax
		jne    jump_32e6d
		xor    %eax,%eax
	jump_32e96:
		imul   $0xbb40e62d,%edx,%edx
		mov    %edx,%ebx
		shr    $0x8,%ebx
		and    $0xffff,%ebx
		add    $0x4,%eax
		and    $0xffff,%ebx
		mov    %ebx,data_177004(%eax)
		cmp    $0xec,%eax
		jne    jump_32e96
		xor    %ah,%ah
		mov    %ah,data_1770f6
		mov    %ah,data_1770f5
		mov    %ah,EXPORT_SYMBOL(save_crypto_tables_state)
		mov    $0x1,%eax
		mov    %edx,save_hashtbl_verify_code
		call   ac_save_crypto_transform1
		mov    $0x1,%eax
		call   ac_save_crypto_transform2
		mov    $0x1,%eax
		call   ac_save_crypto_transform3
		mov    save_hashtbl_verify_code,%edx
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_open_file_from_wad)	/* 0x034A84 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x7c,%esp
		mov    %eax,%esi
		mov    %edx,0x78(%esp)
		mov    $0x2f,%edx
		call   ac_strrchr
		xor    %ebx,%ebx
		test   %eax,%eax
		jne    jump_34aa6
		mov    %esi,%edx
		jmp    jump_34aa9
	jump_34aa6:
		lea    0x1(%eax),%edx
	jump_34aa9:
		movsbl (%edx),%eax
		test   %eax,%eax
		je     jump_34abd
		inc    %ebx
		call   ac_toupper
		inc    %edx
		mov    %al,0x63(%esp,%ebx,1)
		jmp    jump_34aa9
	jump_34abd:
		mov    0x78(%esp),%edx
		push   %edx
		xor    %ah,%ah
		push   $aS_idx
		mov    %ah,0x6c(%esp,%ebx,1)
		lea    0x8(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x2,%edx
		mov    %esp,%eax
		call   ac_LbFileOpen
		mov    %eax,%ebp
		cmp    $0xffffffff,%eax
		je     jump_34b8e
	jump_34af1:
		mov    $0x14,%ebx
		lea    0x40(%esp),%edx
		mov    $0xc,%ecx
		lea    0x40(%esp),%esi
		mov    %ebp,%eax
		lea    0x54(%esp),%edi
		call   ac_LbFileRead
		mov    %eax,%ebx
		mov    %eax,0x74(%esp)
		push   %edi
		mov    %ecx,%eax
		shr    $0x2,%ecx
		repnz movsl %ds:(%esi),%es:(%edi)
		mov    %al,%cl
		and    $0x3,%cl
		repnz movsb %ds:(%esi),%es:(%edi)
		pop    %edi
		xor    %dl,%dl
		lea    0x64(%esp),%eax
		mov    %dl,0x60(%esp)
		lea    0x54(%esp),%edx
		call   ac_strcmp
		test   %eax,%eax
		je     jump_34b40
		cmp    $0x14,%ebx
		je     jump_34af1
	jump_34b40:
		mov    %ebp,%eax
		mov    0x74(%esp),%ebx
		call   ac_LbFileClose
		cmp    $0x14,%ebx
		je     jump_34b57
		mov    $0xffffffff,%eax
		jmp    jump_34b8e
	jump_34b57:
		mov    0x78(%esp),%ecx
		push   %ecx
		push   $aS_wad
		lea    0x8(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x2,%edx
		mov    %esp,%eax
		call   ac_LbFileOpen
		mov    %eax,%esi
		cmp    $0xffffffff,%eax
		je     jump_34b8e
		mov    0x4c(%esp),%edx
		xor    %ebx,%ebx
		call   ac_LbFileSeek
		mov    %esi,%eax
	jump_34b8e:
		add    $0x7c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_PacketRecord_Write)	/* 0x035210 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		sub    $0xc,%esp
		mov    %eax,%edx
		cmpb   $0x0,in_network_game
		jne    jump_3527c
		cmpl   $0xffffffff,packet_rec_fh
		je     jump_3527c
		mov    (%edx),%ax
		mov    %ax,(%esp)
		mov    0x2(%edx),%ax
		mov    %ax,0x2(%esp)
		mov    0x4(%edx),%ax
		mov    %ax,0x4(%esp)
		mov    0x6(%edx),%ax
		mov    %ax,0x6(%esp)
		mov    0x8(%edx),%ax
		mov    %ax,0x8(%esp)
		mov    EXPORT_SYMBOL(lbSeed),%ax
		mov    %ax,0xa(%esp)
		testb  $0xff,(%edx)
		jne    jump_3526b
		mov    $0x4,%ebx
		jmp    jump_35270
	jump_3526b:
		mov    $0xc,%ebx
	jump_35270:
		mov    %esp,%edx
		mov    packet_rec_fh,%eax
		call   ac_LbFileWrite
	jump_3527c:
		add    $0xc,%esp
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_PacketRecord_Read)	/* 0x035284 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		sub    $0xc,%esp
		mov    %eax,%ecx
		mov    packet_rec_fh,%edx
		cmp    $0xffffffff,%edx
		je     jump_352f7
		mov    $0x4,%ebx
		mov    %edx,%eax
		mov    %esp,%edx
		call   ac_LbFileRead
		xor    %edx,%edx
		mov    (%esp),%ah
		mov    %dx,0x4(%esp)
		mov    %dx,0x6(%esp)
		mov    %dx,0x8(%esp)
		test   $0xff,%ah
		je     jump_352d1
		mov    $0x8,%ebx
		lea    0x4(%esp),%edx
		mov    packet_rec_fh,%eax
		call   ac_LbFileRead
	jump_352d1:
		mov    (%esp),%eax
		mov    %ax,(%ecx)
		mov    0x2(%esp),%eax
		mov    %ax,0x2(%ecx)
		mov    0x4(%esp),%eax
		mov    %ax,0x4(%ecx)
		mov    0x6(%esp),%eax
		mov    %ax,0x6(%ecx)
		mov    0x8(%esp),%eax
		mov    %ax,0x8(%ecx)
	jump_352f7:
		add    $0xc,%esp
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_smack_mfree)	/* 0x35644 */
/*----------------------------------------------------------------*/
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_smack_malloc)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		mov    scratch_malloc_mem,%edx
		mov    smack_malloc_used_tot,%ebx
		add    %ebx,%edx
		lea    (%ebx,%eax,1),%ecx
		mov    %ecx,smack_malloc_used_tot
		mov    %edx,%eax
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_smack_malloc_free_all)
/*----------------------------------------------------------------*/
		push   %edx
		xor    %edx,%edx
		mov    %edx,smack_malloc_used_tot
		pop    %edx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_unkn_player_group_add)	/* 0x36270 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		sub    $0x8,%esp
		mov    %al,0x4(%esp)
		mov    %dl,(%esp)
		mov    %dl,%al
		mov    $0x5,%ah
		mul    %ah
		mov    0x4(%esp),%ah
		xor    %edx,%edx
		add    %al,%ah
		mov    %ah,%dl
		mov    %ah,0x4(%esp)
		lea    0x0(,%edx,4),%eax
		mov    $0x1,%bl
		add    %edx,%eax
		xor    %esi,%esi
		xor    %ecx,%ecx
		mov    %bl,data_177150(%edx,%eax,4)
		xor    %edx,%edx
		jmp    jump_362bc
	jump_362ac:
		xor    %edi,%edi
		mov    %di,data_177140(%ebx)
	jump_362b5:
		add    $0x2,%esi
		add    $0x4,%ecx
		inc    %edx
	jump_362bc:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(playable_agents),%al
		cmp    %eax,%edx
		jae    jump_36314
		xor    %eax,%eax
		mov    (%esp),%al
		imul   $0x1aa,%eax,%eax
		movzbl 0x4(%esp),%edi
		imul   $0x15,%edi,%edi
		mov    EXPORT_SYMBOL(players)+0x09C(%ecx,%eax,1),%eax # players[0].MyAgent[0]
		mov    0x99(%eax),%bl
		mov    %bl,data_17713c(%edx,%edi,1)
		lea    (%edi,%esi,1),%ebx
		mov    0x72(%eax),%di
		mov    %di,data_177148(%ebx)
		xor    %edi,%edi
		mov    0xa(%eax),%di
		cmp    $0x2b,%edi
		jne    jump_362ac
		mov    0x3c(%eax),%ax
		mov    %ax,data_177140(%ebx)
		jmp    jump_362b5
	jump_36314:
		add    $0x8,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_unkn_player_group_prot)	/* 0x3631C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		mov    %al,0x4(%esp)
		mov    %dl,0x8(%esp)
		mov    %dl,%al
		mov    $0x5,%ah
		mul    %ah
		mov    0x4(%esp),%ah
		xor    %edx,%edx
		add    %al,%ah
		mov    %ah,%dl
		mov    %ah,0x4(%esp)
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		cmpb   $0x0,data_177150(%edx,%eax,4)
		je     jump_36432
		xor    %edi,%edi
		xor    %ebp,%ebp
		mov    %edi,(%esp)
		jmp    jump_363e4
	jump_36363:
		mov    %bh,%dl
		and    $0xff,%edx
		mov    $0x1,%eax
		lea    -0x1(%edx),%ecx
		shl    %cl,%eax
		test   %eax,0xa4(%esi)
		je     jump_36389
		mov    $0x2,%ebx
		mov    %esi,%eax
	jump_36384:
		call   ac_thing_select_specific_weapon
	jump_36389:
		xor    %eax,%eax
		mov    0x4(%esp),%al
		imul   $0x15,%eax,%eax
		lea    (%eax,%ebp,1),%ecx
		mov    $0x2,%ebx
		xor    %edx,%edx
		mov    data_177148(%ecx),%ax
		mov    0x8(%esp),%dl
		mov    %ax,0x72(%esi)
		mov    %esi,%eax
		call   ac_call_unprotect
		mov    data_177140(%ecx),%dx
		test   %dx,%dx
		je     jump_363d7
		xor    %eax,%eax
		mov    %dx,%ax
		imul   $0xa8,%eax,%edx
		mov    things,%eax
		add    %edx,%eax
		mov    %esi,%edx
		call   ac_call_protect_specific
	jump_363d7:
		mov    (%esp),%esi
		add    $0x2,%ebp
		add    $0x4,%esi
		inc    %edi
		mov    %esi,(%esp)
	jump_363e4:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(playable_agents),%al
		cmp    %eax,%edi
		jae    jump_36432
		xor    %eax,%eax
		mov    0x8(%esp),%al
		imul   $0x1aa,%eax,%eax
		add    (%esp),%eax
		mov    EXPORT_SYMBOL(players)+0x09C(%eax),%esi # players[0].MyAgent[0]
		xor    %eax,%eax
		mov    0x4(%esp),%al
		imul   $0x15,%eax,%eax
		lea    (%eax,%edi,1),%edx
		mov    data_17713c(%edx),%bh
		test   %bh,%bh
		jne    jump_36363
		mov    $0x2,%ebx
		xor    %edx,%edx
		mov    %esi,%eax
		mov    0x99(%esi),%dl
		jmp    jump_36384
	jump_36432:
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_do_rotate_map)	/* 0x036480 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    EXPORT_SYMBOL(dword_152EEC),%ebx
		mov    EXPORT_SYMBOL(dword_176D54),%ecx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(kbkeys)+8,%ax
		mov    EXPORT_SYMBOL(lbKeyOn)(%eax),%al
		and    $0x1,%al
		movzbw %al,%si
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(kbkeys)+6,%ax
		mov    EXPORT_SYMBOL(lbKeyOn)(%eax),%al
		and    $0x1,%al
		xor    %ah,%ah
		sub    %eax,%esi
		movswl %si,%edx
		mov    %esi,%eax
		test   %edx,%edx
		jne    jump_364f7
		mov    EXPORT_SYMBOL(lbShift),%dl
		cmp    $0x1,%edx
		jne    jump_364f7
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(kbkeys)+22,%ax
		mov    EXPORT_SYMBOL(lbKeyOn)(%eax),%al
		and    $0x1,%al
		movzbw %al,%si
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(kbkeys)+20,%ax
		mov    EXPORT_SYMBOL(lbKeyOn)(%eax),%al
		and    $0x1,%al
		xor    %ah,%ah
		sub    %eax,%esi
		mov    %esi,%eax
	jump_364f7:
		xor    %esi,%esi
		mov    EXPORT_SYMBOL(kbkeys)+24,%si
		mov    EXPORT_SYMBOL(lbKeyOn)(%esi),%dl
		xor    %esi,%esi
		and    $0x1,%dl
		mov    EXPORT_SYMBOL(kbkeys)+26,%si
		movzbw %dl,%di
		mov    EXPORT_SYMBOL(lbKeyOn)(%esi),%dl
		and    $0x1,%dl
		xor    %dh,%dh
		sub    %dx,%di
		mov    %edi,%edx
		je     jump_36577
		mov    ingame__UserZoom,%si
		shl    $0x3,%edx
		add    %edx,%esi
		xor    %edx,%edx
		mov    %si,%dx
		mov    %si,ingame__UserZoom
		cmp    $0x78,%edx
		jge    jump_3655d
		xor    %edx,%edx
		mov    pktrec_mode,%dl
		cmp    $0x2,%edx
		je     jump_3655d
		movw   $0x78,ingame__UserZoom
		jmp    jump_36577
	jump_3655d:
		xor    %edx,%edx
		mov    ingame__UserZoom,%dx
		cmp    $0x100,%edx
		jl     jump_36577
		movw   $0x100,ingame__UserZoom
	jump_36577:
		xor    %esi,%esi
		mov    EXPORT_SYMBOL(kbkeys)+32,%si
		mov    EXPORT_SYMBOL(lbKeyOn)(%esi),%dl
		xor    %edi,%edi
		and    $0x1,%dl
		mov    EXPORT_SYMBOL(kbkeys)+34,%di
		movzbw %dl,%si
		mov    EXPORT_SYMBOL(lbKeyOn)(%edi),%dl
		and    $0x1,%dl
		xor    %dh,%dh
		sub    %dx,%si
		mov    %esi,%edx
		je     jump_365cc
		movswl %si,%edx
		shl    $0x2,%edx
		add    %edx,%ebx
		cmp    $0xffffff40,%ebx
		jge    jump_365bf
		mov    $0xffffff40,%ebx
		jmp    jump_365cc
	jump_365bf:
		cmp    $0xffffff68,%ebx
		jle    jump_365cc
		mov    $0xffffff68,%ebx
	jump_365cc:
		movswl %ax,%edx
		xor    %edi,%edi
		test   %edx,%edx
		jne    jump_365ff
		mov    EXPORT_SYMBOL(jskeys)+6,%dx
		mov    joy_Buttons,%esi
		and    %edx,%esi
		cmp    %edx,%esi
		jne    jump_365e9
		inc    %eax
	jump_365e9:
		xor    %edx,%edx
		mov    joy_Buttons,%esi
		mov    EXPORT_SYMBOL(jskeys)+8,%dx
		and    %edx,%esi
		cmp    %edx,%esi
		jne    jump_365ff
		dec    %eax
	jump_365ff:
		cwtl
		shl    $0x8,%eax
		lea    (%ecx,%eax,1),%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		shl    $0x2,%edx
		sbb    %edx,%eax
		sar    $0x2,%eax
		mov    %eax,%ecx
		mov    %eax,EXPORT_SYMBOL(dword_176D54)
		movswl %di,%eax
		shl    $0x3,%eax
		add    %eax,%ebx
		mov    %ebx,EXPORT_SYMBOL(dword_152EEC)
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_weapon_select_input)	/* 0x036D14 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+6
		je     jump_36db8
		xor    %dl,%dl
		mov    %dl,EXPORT_SYMBOL(lbKeyOn)+6
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(players)+0x088(%eax),%ax # players[0].DirectControl[0]
		mov    $0x1,%edx
		and    $0xffff,%eax
		xor    %ecx,%ecx
		call   ac_find_nth_weapon_held
		mov    %al,%cl
		test   %ecx,%ecx
		je     jump_36db8
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(local_player_no),%bl
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		sub    %ebx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(players)+0x088(%eax),%edx # players[0].DirectControl[0]
		lea    0x0(,%ebx,4),%eax
		push   $0x0
		sub    %ebx,%eax
		push   $0x0
		shl    $0x4,%eax
		mov    %edx,%ebx
		mov    $0x21,%edx
		add    $packets,%eax
		call   ac_my_build_packet
		mov    $0x1,%al
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_36db8:
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+7
		je     jump_36e58
		xor    %bl,%bl
		mov    %bl,EXPORT_SYMBOL(lbKeyOn)+7
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(players)+0x088(%eax),%ax # players[0].DirectControl[0]
		mov    $0x2,%edx
		and    $0xffff,%eax
		xor    %ecx,%ecx
		call   ac_find_nth_weapon_held
		mov    %al,%cl
		test   %ecx,%ecx
		je     jump_36e58
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(local_player_no),%bl
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		sub    %ebx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(players)+0x088(%eax),%edx # players[0].DirectControl[0]
		lea    0x0(,%ebx,4),%eax
		push   $0x0
		sub    %ebx,%eax
		push   $0x0
		shl    $0x4,%eax
		mov    %edx,%ebx
		mov    $0x21,%edx
		add    $packets,%eax
		call   ac_my_build_packet
		mov    $0x1,%al
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_36e58:
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+8
		je     jump_36f04
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbShift),%al
		test   %eax,%eax
		jne    jump_36f04
		xor    %cl,%cl
		mov    %cl,EXPORT_SYMBOL(lbKeyOn)+8
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(players)+0x088(%eax),%ax # players[0].DirectControl[0]
		mov    $0x3,%edx
		and    $0xffff,%eax
		xor    %ecx,%ecx
		call   ac_find_nth_weapon_held
		mov    %al,%cl
		test   %ecx,%ecx
		je     jump_36f04
		movzbl EXPORT_SYMBOL(local_player_no),%esi
		lea    0x0(,%esi,8),%eax
		add    %esi,%eax
		shl    $0x3,%eax
		sub    %esi,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(players)+0x088(%eax),%ebx # players[0].DirectControl[0]
		lea    0x0(,%esi,4),%eax
		push   $0x0
		sub    %esi,%eax
		push   $0x0
		shl    $0x4,%eax
		mov    $0x21,%edx
		add    $packets,%eax
		call   ac_my_build_packet
		mov    $0x1,%al
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_36f04:
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+9
		je     jump_36fa0
		xor    %al,%al
		mov    %al,EXPORT_SYMBOL(lbKeyOn)+9
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(players)+0x088(%eax),%ax # players[0].DirectControl[0]
		mov    $0x4,%edx
		and    $0xffff,%eax
		xor    %ecx,%ecx
		call   ac_find_nth_weapon_held
		mov    %al,%cl
		test   %ecx,%ecx
		je     jump_36fa0
		movzbl EXPORT_SYMBOL(local_player_no),%esi
		lea    0x0(,%esi,8),%eax
		add    %esi,%eax
		shl    $0x3,%eax
		sub    %esi,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(players)+0x088(%eax),%ebx # players[0].DirectControl[0]
		lea    0x0(,%esi,4),%eax
		push   $0x0
		sub    %esi,%eax
		push   $0x0
		shl    $0x4,%eax
		mov    $0x21,%edx
		add    $packets,%eax
		call   ac_my_build_packet
		mov    $0x1,%al
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_36fa0:
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+10
		je     jump_3704f
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbShift),%al
		test   %eax,%eax
		jne    jump_3704f
		xor    %dl,%dl
		mov    %dl,EXPORT_SYMBOL(lbKeyOn)+10
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(players)+0x088(%eax),%ax # players[0].DirectControl[0]
		mov    $0x5,%edx
		and    $0xffff,%eax
		xor    %ecx,%ecx
		call   ac_find_nth_weapon_held
		mov    %al,%cl
		test   %ecx,%ecx
		je     jump_3704f
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(local_player_no),%bl
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		sub    %ebx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(players)+0x088(%eax),%edx # players[0].DirectControl[0]
		lea    0x0(,%ebx,4),%eax
		push   $0x0
		sub    %ebx,%eax
		push   $0x0
		shl    $0x4,%eax
		mov    %edx,%ebx
		mov    $0x21,%edx
		add    $packets,%eax
		call   ac_my_build_packet
		mov    $0x1,%al
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_3704f:
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+11
		je     jump_370ec
		xor    %bl,%bl
		mov    %bl,EXPORT_SYMBOL(lbKeyOn)+11
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(players)+0x088(%eax),%ax # players[0].DirectControl[0]
		mov    $0x6,%edx
		and    $0xffff,%eax
		xor    %ecx,%ecx
		call   ac_find_nth_weapon_held
		mov    %al,%cl
		test   %ecx,%ecx
		je     jump_370ec
		movzbl EXPORT_SYMBOL(local_player_no),%esi
		lea    0x0(,%esi,8),%eax
		add    %esi,%eax
		shl    $0x3,%eax
		sub    %esi,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(players)+0x088(%eax),%ebx # players[0].DirectControl[0]
		lea    0x0(,%esi,4),%eax
		push   $0x0
		sub    %esi,%eax
		push   $0x0
		shl    $0x4,%eax
		mov    $0x21,%edx
		add    $packets,%eax
		call   ac_my_build_packet
		mov    $0x1,%al
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_370ec:
		xor    %al,%al
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_get_next_player_agent)	/* 0x038bec */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    things,%ebp
		mov    %eax,%esi
		mov    $0xa8,%edi
		xor    %ebx,%ebx
		jmp    jump_38c07
	jump_38c06:
		inc    %ebx
	jump_38c07:
		xor    %eax,%eax
		mov    %bx,%ax
		cmp    $0x4,%eax
		jge    jump_38c35
		xor    %ecx,%ecx
		mov    %si,%cx
		imul   $0x1aa,%ecx,%ecx
		mov    EXPORT_SYMBOL(players)+0x09C(%ecx,%eax,4),%edx # players[0].MyAgent[0]
		sub    %ebp,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %edi
		cwtl
		cmp    EXPORT_SYMBOL(players)+0x088(%ecx),%eax # players[0].DirectControl[0]
		jne    jump_38c06
	jump_38c35:
		xor    %edx,%edx
		mov    %bx,%dx
		inc    %edx
		mov    $0x4,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %edx,%ebx
		xor    %ecx,%ecx
		jmp    jump_38c4f
	jump_38c4d:
		inc    %ebx
		inc    %ecx
	jump_38c4f:
		xor    %eax,%eax
		mov    %cx,%ax
		cmp    $0x4,%eax
		jge    jump_38c8d
		xor    %edx,%edx
		mov    %bx,%dx
		movl   $0x4,(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idivl  (%esp)
		xor    %edi,%edi
		mov    %si,%di
		imul   $0x1aa,%edi,%edi
		mov    EXPORT_SYMBOL(players)+0x09C(%edi,%edx,4),%edx # players[0].MyAgent[0]
		testb  $0x2,0xc(%edx)
		jne    jump_38c4d
		testb  $0x10,0x44(%edx)
		jne    jump_38c4d
		jmp    jump_38cc5
	jump_38c8d:
		xor    %edx,%edx
		mov    %si,%dx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		lea    0x0(,%eax,4),%edi
		xor    %eax,%edx
		mov    $0x4,%ecx
		mov    %bx,%dx
		sub    %eax,%edi
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    EXPORT_SYMBOL(players)+0x09C(%edi,%edx,4),%edx # players[0].MyAgent[0]
	jump_38cc5:
		sub    %ebp,%edx
		mov    $0xa8,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %eax,%edx
		mov    %edx,%eax
		mov    %ebp,things
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_send_person)	/* 0x038CE8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		xor    %ebx,%ebx
		mov    %ax,%bx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		sub    %ebx,%eax
		add    %eax,%eax
		mov    %eax,%ebx
		shl    $0x2,%eax
		sub    %ebx,%eax
		mov    $players,%ebx
		add    %eax,%ebx
		lea    (%ebx,%edx,1),%eax
		xor    %ecx,%ecx
		mov    0xbe(%eax),%cl
		cmp    $0x1,%ecx
		je     jump_38d2c
		movb   $0x1,0xbe(%eax)
		movb   $0x0,0xc2(%eax)
	jump_38d2c:
		mov    %edx,%eax
		shl    $0x4,%eax
		add    %edx,%eax
		mov    0x2(%ebx,%eax,2),%al
		and    $0x40,%al
		jne    jump_38d52
		lea    (%ebx,%edx,1),%ecx
		movzbl 0xc2(%ecx),%esi
		test   %esi,%esi
		jne    jump_38d52
		movb   $0x1,0xc2(%ecx)
		jmp    jump_38d99
	jump_38d52:
		test   %al,%al
		je     jump_38d72
		lea    (%ebx,%edx,1),%ecx
		movzbl 0xc2(%ecx),%esi
		cmp    $0x1,%esi
		jne    jump_38d72
		movb   $0x2,0xc2(%ecx)
		xor    %al,%al
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_38d72:
		test   %al,%al
		jne    jump_38d99
		add    %ebx,%edx
		xor    %eax,%eax
		mov    0xc2(%edx),%al
		cmp    $0x2,%eax
		jne    jump_38d99
		movb   $0x3,0xc2(%edx)
		mov    $0x1,%al
		movb   $0x0,0xbe(%edx)
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_38d99:
		xor    %al,%al
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


vtable_3a9e8:
		.long   func_3ad8b
		.long   func_3ab94
		.long   func_3adf0
		.long   func_3acde
		.long   func_3ac31
		.long   func_3ab94
		.long   func_3ad8b


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_process_mouse_imputs)	/* 0x03AA04 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		xor    %ah,%ah
		mov    %ah,0x8(%esp)
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+106 # lbDisplay.MLeftButton
		jne    jump_3aa56
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		lea    0x0(,%eax,4),%ebx
		xor    %eax,%edx
		mov    mouser,%dl
		sub    %eax,%ebx
		mov    %edx,%eax
		shl    $0x4,%eax
		add    %edx,%eax
		andb   $0x7f,EXPORT_SYMBOL(players)+0x01f(%ebx,%eax,2) # players[0].UserInput[0].ControlMode+1
	jump_3aa56:
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+107 # lbDisplay.MRightButton
		jne    jump_3aa99
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		lea    0x0(,%eax,4),%ebx
		xor    %eax,%edx
		mov    mouser,%dl
		sub    %eax,%ebx
		mov    %edx,%eax
		shl    $0x4,%eax
		add    %edx,%eax
		andb   $0xbf,EXPORT_SYMBOL(players)+0x01f(%ebx,%eax,2) # players[0].UserInput[0].ControlMode+1
	jump_3aa99:
		mov    EXPORT_SYMBOL(ingame)+0x000,%eax # ingame.GameMode
		sar    $0x10,%eax
		cmp    $0x32,%eax
		je     jump_3aaaf
		cmp    $0x3b,%eax
		jne    jump_3b596
	jump_3aaaf:
		call   ac_process_panel_state
		test   %ax,%ax
		je     jump_3aac0
		mov    $0x1,%al
		jmp    jump_3b598
	jump_3aac0:
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		jne    jump_3aae4
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+104 # lbDisplay.RightButton
		jne    jump_3aae4
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+106 # lbDisplay.MLeftButton
		jne    jump_3aae4
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+107 # lbDisplay.MRightButton
		je     jump_3ab00
	jump_3aae4:
		call   ac_check_panel_button
		mov    %al,0x8(%esp)
		and    $0xff,%eax
		je     jump_3ab00
		mov    $0x1,%al
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_3ab00:
		movzbl EXPORT_SYMBOL(local_player_no),%esi
		lea    0x0(,%esi,8),%eax
		add    %esi,%eax
		shl    $0x3,%eax
		sub    %esi,%eax
		xor    %ecx,%ecx
		add    %eax,%eax
		mov    mouser,%cl
		mov    %eax,%edx
		shl    $0x2,%eax
		lea    0x0(,%ecx,4),%ebx
		sub    %edx,%eax
		add    %eax,%ebx
		mov    EXPORT_SYMBOL(players)+0x088(%ebx),%edi # players[0].DirectControl[0]
		lea    0x0(,%edi,4),%edx
		add    %edi,%edx
		shl    $0x2,%edx
		add    %edx,%edi
		mov    things,%edx
		shl    $0x3,%edi
		add    %edi,%edx
		xor    %edi,%edi
		mov    0xa(%edx),%di
		cmp    $0x24,%edi
		je     jump_3b596
		testb  $0x2,0xc(%edx)
		jne    jump_3b596
		mov    0x8(%esp),%dh
		test   %dh,%dh
		jne    jump_3b596
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		je     jump_3b0ac
		mov    %dh,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		cmpw   $0x0,data_1a63e2(%eax)
		jne    jump_3af56


/*----------------------------------------------------------------*/
func_3ab94:
/*----------------------------------------------------------------*/
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		cmpb   $0x0,data_1a63ae(%eax)
		jne    jump_3af76
		mov    EXPORT_SYMBOL(players)+0x01e(%eax),%ax # players[0].UserInput[0].ControlMode
		and    $0x1f,%ah
		cmp    $0x1,%ax
		je     jump_3af76
		mov    EXPORT_SYMBOL(pointer_sprites),%eax
		add    $0x30,%eax
		call   ac_LbMouseChangeSprite
		mov    data_15488b,%edx
		mov    data_15488a,%eax
		sar    $0x18,%edx
		sar    $0x18,%eax
		call   ac_LbMouseChangeSpriteOffset
		xor    %edx,%edx
		mov    $0x1,%ebx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		push   $0x0
		lea    0x0(,%edx,4),%eax
		xor    %ecx,%ecx
		sub    %edx,%eax
		push   $0x0
		shl    $0x4,%eax
		mov    $0x26,%edx
		add    $packets,%eax
		call   ac_build_packet
		mov    $0x1,%al
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_3ac31:
/*----------------------------------------------------------------*/
		mov    %ecx,%edx
		shl    $0x4,%edx
		add    %ecx,%edx
		add    %edx,%edx
		mov    gameturn,%edi
		lea    (%eax,%edx,1),%ecx
		xor    %edx,%edx
		and    $0x7fff,%edi
		mov    EXPORT_SYMBOL(players)+0x006(%ecx),%dx # players[0].UserInput[0].Turn
		sub    %edx,%edi
		lea    0x0(,%esi,4),%edx
		sub    %esi,%edx
		mov    $packets,%esi
		shl    $0x4,%edx
		add    %edx,%esi
		cmp    $0x7,%edi
		jae    jump_3aca1
		push   $0x0
		xor    %edi,%edi
		mov    $0x2c,%edx
		mov    %di,EXPORT_SYMBOL(players)+0x006(%ecx) # players[0].UserInput[0].Turn
		push   $0x0
		mov    data_1a63e0(%eax),%ecx
		mov    EXPORT_SYMBOL(players)+0x088(%ebx),%ebx # players[0].DirectControl[0]
		sar    $0x10,%ecx
		mov    %esi,%eax
		call   ac_my_build_packet
		mov    $0x1,%al
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_3aca1:
		mov    gameturn,%dx
		push   $0x0
		and    $0x7f,%dh
		push   $0x0
		mov    %dx,EXPORT_SYMBOL(players)+0x006(%ecx) # players[0].UserInput[0].Turn
		mov    $0x1f,%edx
		mov    data_1a63e0(%eax),%ecx
		mov    EXPORT_SYMBOL(players)+0x088(%ebx),%ebx # players[0].DirectControl[0]
		sar    $0x10,%ecx
		mov    %esi,%eax
		call   ac_my_build_packet
		mov    $0x1,%al
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_3acde:
/*----------------------------------------------------------------*/
		mov    %ecx,%edx
		shl    $0x4,%edx
		add    %ecx,%edx
		add    %edx,%edx
		mov    gameturn,%edi
		lea    (%eax,%edx,1),%ecx
		xor    %edx,%edx
		and    $0x7fff,%edi
		mov    EXPORT_SYMBOL(players)+0x006(%ecx),%dx # players[0].UserInput[0].Turn
		sub    %edx,%edi
		lea    0x0(,%esi,4),%edx
		sub    %esi,%edx
		mov    $packets,%esi
		shl    $0x4,%edx
		add    %edx,%esi
		cmp    $0x7,%edi
		jae    jump_3ad4e
		push   $0x0
		xor    %edx,%edx
		push   $0x0
		mov    %dx,EXPORT_SYMBOL(players)+0x006(%ecx) # players[0].UserInput[0].Turn
		mov    $0x2b,%edx
		mov    data_1a63e0(%eax),%ecx
		mov    EXPORT_SYMBOL(players)+0x088(%ebx),%ebx # players[0].DirectControl[0]
		sar    $0x10,%ecx
		mov    %esi,%eax
		call   ac_my_build_packet
		mov    $0x1,%al
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_3ad4e:
		mov    gameturn,%dx
		push   $0x0
		and    $0x7f,%dh
		push   $0x0
		mov    %dx,EXPORT_SYMBOL(players)+0x006(%ecx) # players[0].UserInput[0].Turn
		mov    $0x24,%edx
		mov    data_1a63e0(%eax),%ecx
		mov    EXPORT_SYMBOL(players)+0x088(%ebx),%ebx # players[0].DirectControl[0]
		sar    $0x10,%ecx
		mov    %esi,%eax
		call   ac_my_build_packet
		mov    $0x1,%al
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_3ad8b:
/*----------------------------------------------------------------*/
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(local_player_no),%bl
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		sub    %ebx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		xor    %edx,%edx
		push   $0x0
		mov    mouser,%dl
		push   $0x0
		mov    data_1a63e0(%eax),%ecx
		mov    EXPORT_SYMBOL(players)+0x088(%eax,%edx,4),%esi # players[0].DirectControl[0]
		lea    0x0(,%ebx,4),%eax
		sar    $0x10,%ecx
		sub    %ebx,%eax
		mov    $0x25,%edx
		shl    $0x4,%eax
		mov    %esi,%ebx
		add    $packets,%eax
		call   ac_my_build_packet
		mov    $0x1,%al
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_3adf0:
/*----------------------------------------------------------------*/
		mov    data_1a63de(%eax),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		je     func_3ab94
		mov    %ecx,%edx
		shl    $0x4,%edx
		add    %ecx,%edx
		add    %edx,%edx
		mov    gameturn,%edi
		add    %eax,%edx
		xor    %ecx,%ecx
		and    $0x7fff,%edi
		mov    EXPORT_SYMBOL(players)+0x006(%edx),%cx # players[0].UserInput[0].Turn
		sub    %ecx,%edi
		cmp    $0x7,%edi
		jae    jump_3af00
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		lea    0x0(,%eax,4),%ebx
		xor    %eax,%edx
		mov    mouser,%dl
		sub    %eax,%ebx
		mov    %edx,%eax
		shl    $0x4,%eax
		add    %edx,%eax
		xor    %edx,%edx
		xor    %esi,%esi
		mov    EXPORT_SYMBOL(local_player_no),%dl
		mov    %si,EXPORT_SYMBOL(players)+0x006(%ebx,%eax,2) # players[0].UserInput[0].Turn
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		mov    EXPORT_SYMBOL(mouse_map_z),%ebx
		sub    %edx,%eax
		push   %ebx
		mov    data_1a63de(%eax),%eax
		xor    %edx,%edx
		sar    $0x10,%eax
		mov    EXPORT_SYMBOL(local_player_no),%dl
		push   %eax
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		mov    mouser,%al
		movzbl EXPORT_SYMBOL(local_player_no),%esi
		mov    EXPORT_SYMBOL(players)+0x088(%edx,%eax,4),%ebx # players[0].DirectControl[0]
		lea    0x0(,%esi,4),%eax
		sub    %esi,%eax
		mov    EXPORT_SYMBOL(mouse_map_x),%ecx
		mov    %eax,%esi
		mov    $packets,%eax
		shl    $0x4,%esi
		mov    $0x2a,%edx
		add    %esi,%eax
		call   ac_my_build_packet
		mov    $0x1,%al
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_3af00:
		mov    gameturn,%cx
		and    $0x7f,%ch
		mov    %cx,EXPORT_SYMBOL(players)+0x006(%edx) # players[0].UserInput[0].Turn
		mov    EXPORT_SYMBOL(mouse_map_z),%edx
		mov    data_1a63de(%eax),%eax
		push   %edx
		sar    $0x10,%eax
		push   %eax
		lea    0x0(,%esi,4),%eax
		mov    EXPORT_SYMBOL(mouse_map_x),%ecx
		sub    %esi,%eax
		mov    EXPORT_SYMBOL(players)+0x088(%ebx),%ebx # players[0].DirectControl[0]
		shl    $0x4,%eax
		mov    $0x27,%edx
		add    $packets,%eax
		call   ac_my_build_packet
		mov    $0x1,%al
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_3af56:
		mov    data_1a63e4(%eax),%dx
		dec    %edx
		cmp    $0x6,%dx
		ja     func_3ab94
		and    $0xffff,%edx
		jmp    *%cs:vtable_3a9e8(,%edx,4)
	jump_3af76:
		mov    EXPORT_SYMBOL(mouse_map_x),%ecx
		test   %ecx,%ecx
		jle    jump_3b596
		mov    %ecx,%eax
		sar    $0x8,%eax
		cmp    $0x80,%eax
		jge    jump_3b596
		mov    EXPORT_SYMBOL(mouse_map_z),%esi
		test   %esi,%esi
		jle    jump_3b596
		mov    %esi,%eax
		sar    $0x8,%eax
		cmp    $0x80,%eax
		jge    jump_3b596
		mov    EXPORT_SYMBOL(mouse_map_z)-2,%edx
		mov    EXPORT_SYMBOL(mouse_map_x)-2,%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		call   ac_alt_at_point
		sar    $0x8,%eax
		xor    %ebx,%ebx
		add    $0x14,%eax
		mov    EXPORT_SYMBOL(local_player_no),%bl
		mov    %eax,%esi
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		sub    %ebx,%eax
		add    %eax,%eax
		xor    %ecx,%ecx
		lea    0x0(,%eax,4),%edi
		mov    mouser,%cl
		sub    %eax,%edi
		mov    %ecx,%eax
		shl    $0x4,%eax
		add    %ecx,%eax
		add    %eax,%eax
		lea    (%edi,%eax,1),%edx
		mov    gameturn,%eax
		and    $0x7fff,%eax
		movzwl EXPORT_SYMBOL(players)+0x006(%edx),%ebp # players[0].UserInput[0].Turn
		sub    %ebp,%eax
		mov    %eax,%ebp
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%ecx
		shl    $0x4,%eax
		lea    (%edi,%ecx,1),%ebx
		add    $packets,%eax
		cmp    $0x7,%ebp
		jae    jump_3b06d
		mov    EXPORT_SYMBOL(mouse_map_z),%ebp
		xor    %ecx,%ecx
		push   %ebp
		mov    %cx,EXPORT_SYMBOL(players)+0x006(%edx) # players[0].UserInput[0].Turn
		movswl %si,%edx
		mov    EXPORT_SYMBOL(mouse_map_x),%ecx
		push   %edx
		mov    EXPORT_SYMBOL(players)+0x088(%ebx),%ebx # players[0].DirectControl[0]
		mov    $0x28,%edx
		call   ac_my_build_packet
		mov    $0x1,%al
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_3b06d:
		mov    gameturn,%cx
		mov    EXPORT_SYMBOL(mouse_map_z),%edi
		and    $0x7f,%ch
		push   %edi
		mov    %cx,EXPORT_SYMBOL(players)+0x006(%edx) # players[0].UserInput[0].Turn
		movswl %si,%edx
		mov    EXPORT_SYMBOL(mouse_map_x),%ecx
		push   %edx
		mov    EXPORT_SYMBOL(players)+0x088(%ebx),%ebx # players[0].DirectControl[0]
		mov    $0xb,%edx
		call   ac_my_build_packet
		mov    $0x1,%al
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_3b0ac:
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+104 # lbDisplay.RightButton
		je     jump_3b3db
		mov    %ecx,%edx
		shl    $0x4,%edx
		add    %ecx,%edx
		testb  $0x40,EXPORT_SYMBOL(players)+0x01f(%eax,%edx,2) # players[0].UserInput[0].ControlMode+1
		jne    jump_3b3db
		xor    %bh,%bh
		mov    %bh,EXPORT_SYMBOL(lbDisplay)+104 # lbDisplay.RightButton
		mov    EXPORT_SYMBOL(mouse_map_z)-2,%edx
		mov    EXPORT_SYMBOL(mouse_map_x)-2,%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		call   ac_alt_at_point
		sar    $0x8,%eax
		lea    0x14(%eax),%ecx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(local_player_no),%al
		mov    %eax,0x4(%esp)
		mov    %eax,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		movzbl mouser,%ebp
		mov    %eax,%edx
		shl    $0x2,%eax
		lea    0x0(,%ebp,4),%ebx
		sub    %edx,%eax
		add    %eax,%ebx
		mov    EXPORT_SYMBOL(players)+0x088(%ebx),%esi # players[0].DirectControl[0]
		mov    %eax,%edx
		lea    0x0(,%esi,4),%eax
		add    %esi,%eax
		shl    $0x2,%eax
		add    %eax,%esi
		mov    things,%eax
		shl    $0x3,%esi
		mov    0x99(%esi,%eax,1),%al
		cmp    $0x12,%al
		jb     jump_3b3cf
		jbe    jump_3b282
		cmp    $0x1d,%al
		je     jump_3b282
		jmp    jump_3b3db
	jump_3b162:
		mov    %ebp,%eax
		shl    $0x4,%eax
		add    %ebp,%eax
		add    %eax,%eax
		mov    gameturn,%edi
		lea    (%edx,%eax,1),%esi
		xor    %eax,%eax
		and    $0x7fff,%edi
		mov    EXPORT_SYMBOL(players)+0x006(%esi),%ax # players[0].UserInput[0].Turn
		sub    %eax,%edi
		mov    %edi,(%esp)
		mov    0x4(%esp),%edi
		lea    0x0(,%edi,4),%eax
		sub    %edi,%eax
		shl    $0x4,%eax
		mov    (%esp),%ebp
		add    $packets,%eax
		cmp    $0x7,%ebp
		jae    jump_3b20e
		xor    %edi,%edi
		mov    %di,EXPORT_SYMBOL(players)+0x006(%esi) # players[0].UserInput[0].Turn
		mov    data_1a63e2(%edx),%esi
		sar    $0x10,%esi
		cmp    $0x3,%esi
		jne    jump_3b1e0
		mov    EXPORT_SYMBOL(mouse_map_z),%edi
		mov    data_1a63de(%edx),%edx
		push   %edi
		sar    $0x10,%edx
		mov    EXPORT_SYMBOL(mouse_map_x),%ecx
		push   %edx
		mov    EXPORT_SYMBOL(players)+0x088(%ebx),%ebx # players[0].DirectControl[0]
		mov    $0x3b,%edx
		jmp    jump_3b1fc
	jump_3b1e0:
		mov    EXPORT_SYMBOL(mouse_map_z),%esi
		push   %esi
		movswl %cx,%edx
		mov    EXPORT_SYMBOL(players)+0x088(%ebx),%ebx # players[0].DirectControl[0]
		push   %edx
		mov    EXPORT_SYMBOL(mouse_map_x),%ecx
		mov    $0x2e,%edx
	jump_3b1fc:
		call   ac_my_build_packet
		mov    $0x1,%al
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_3b20e:
		mov    gameturn,%di
		and    $0x7fff,%edi
		mov    %di,EXPORT_SYMBOL(players)+0x006(%esi) # players[0].UserInput[0].Turn
		mov    data_1a63e2(%edx),%esi
		sar    $0x10,%esi
		cmp    $0x3,%esi
		jne    jump_3b254
		mov    EXPORT_SYMBOL(mouse_map_z),%ecx
		mov    data_1a63de(%edx),%edx
		push   %ecx
		sar    $0x10,%edx
		mov    EXPORT_SYMBOL(players)+0x088(%ebx),%ebx # players[0].DirectControl[0]
		push   %edx
		mov    EXPORT_SYMBOL(mouse_map_x),%ecx
		mov    $0x3a,%edx
		jmp    jump_3b270
	jump_3b254:
		mov    EXPORT_SYMBOL(mouse_map_z),%edx
		push   %edx
		movswl %cx,%edx
		mov    EXPORT_SYMBOL(players)+0x088(%ebx),%ebx # players[0].DirectControl[0]
		push   %edx
		mov    EXPORT_SYMBOL(mouse_map_x),%ecx
		mov    $0x20,%edx
	jump_3b270:
		call   ac_my_build_packet
		mov    $0x1,%al
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_3b282:
		movzbl EXPORT_SYMBOL(local_player_no),%edi
		lea    0x0(,%edi,8),%eax
		add    %edi,%eax
		shl    $0x3,%eax
		sub    %edi,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		xor    %ebx,%ebx
		sub    %edx,%eax
		mov    mouser,%bl
		mov    %eax,%edx
		mov    %ebx,%eax
		shl    $0x4,%eax
		add    %ebx,%eax
		add    %eax,%eax
		lea    (%edx,%eax,1),%esi
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(players)+0x006(%esi),%ax # players[0].UserInput[0].Turn
		mov    %eax,(%esp)
		mov    gameturn,%eax
		mov    (%esp),%ebp
		and    $0x7fff,%eax
		sub    %ebp,%eax
		mov    %eax,(%esp)
		lea    0x0(,%edi,4),%eax
		shl    $0x2,%ebx
		sub    %edi,%eax
		add    %edx,%ebx
		shl    $0x4,%eax
		mov    (%esp),%edi
		add    $packets,%eax
		cmp    $0x7,%edi
		jae    jump_3b35b
		xor    %edi,%edi
		mov    %di,EXPORT_SYMBOL(players)+0x006(%esi) # players[0].UserInput[0].Turn
		mov    data_1a63e2(%edx),%esi
		sar    $0x10,%esi
		cmp    $0x3,%esi
		jne    jump_3b32d
		mov    EXPORT_SYMBOL(mouse_map_z),%edi
		mov    data_1a63de(%edx),%edx
		push   %edi
		sar    $0x10,%edx
		mov    EXPORT_SYMBOL(mouse_map_x),%ecx
		push   %edx
		mov    EXPORT_SYMBOL(players)+0x088(%ebx),%ebx # players[0].DirectControl[0]
		mov    $0x39,%edx
		jmp    jump_3b349
	jump_3b32d:
		mov    EXPORT_SYMBOL(mouse_map_z),%esi
		push   %esi
		movswl %cx,%edx
		mov    EXPORT_SYMBOL(players)+0x088(%ebx),%ebx # players[0].DirectControl[0]
		push   %edx
		mov    EXPORT_SYMBOL(mouse_map_x),%ecx
		mov    $0x2f,%edx
	jump_3b349:
		call   ac_my_build_packet
		mov    $0x1,%al
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_3b35b:
		mov    gameturn,%di
		and    $0x7fff,%edi
		mov    %di,EXPORT_SYMBOL(players)+0x006(%esi) # players[0].UserInput[0].Turn
		mov    data_1a63e2(%edx),%esi
		sar    $0x10,%esi
		cmp    $0x3,%esi
		jne    jump_3b3a1
		mov    EXPORT_SYMBOL(mouse_map_z),%ecx
		mov    data_1a63de(%edx),%edx
		push   %ecx
		sar    $0x10,%edx
		mov    EXPORT_SYMBOL(players)+0x088(%ebx),%ebx # players[0].DirectControl[0]
		push   %edx
		mov    EXPORT_SYMBOL(mouse_map_x),%ecx
		mov    $0x38,%edx
		jmp    jump_3b3bd
	jump_3b3a1:
		mov    EXPORT_SYMBOL(mouse_map_z),%ebp
		push   %ebp
		movswl %cx,%edx
		mov    EXPORT_SYMBOL(players)+0x088(%ebx),%ebx # players[0].DirectControl[0]
		push   %edx
		mov    EXPORT_SYMBOL(mouse_map_x),%ecx
		mov    $0x1a,%edx
	jump_3b3bd:
		call   ac_my_build_packet
		mov    $0x1,%al
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_3b3cf:
		cmp    $0xc,%al
		jb     jump_3b3db
		cmp    $0xd,%al
		jbe    jump_3b162
	jump_3b3db:
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+107 # lbDisplay.MRightButton
		je     jump_3b596
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		lea    0x0(,%eax,4),%ebx
		xor    %eax,%edx
		mov    mouser,%dl
		sub    %eax,%ebx
		mov    %edx,%eax
		shl    $0x4,%eax
		add    %edx,%eax
		testb  $0x40,EXPORT_SYMBOL(players)+0x01f(%ebx,%eax,2) # players[0].UserInput[0].ControlMode+1
		jne    jump_3b596
		mov    EXPORT_SYMBOL(mouse_map_z)-2,%edx
		mov    EXPORT_SYMBOL(mouse_map_x)-2,%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		call   ac_alt_at_point
		sar    $0x8,%eax
		xor    %ebx,%ebx
		add    $0x14,%eax
		mov    EXPORT_SYMBOL(local_player_no),%bl
		mov    %eax,%edi
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		sub    %ebx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		mov    data_1a63e2(%eax),%esi
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x4,%eax
		sar    $0x10,%esi
		add    $packets,%eax
		cmp    $0x3,%esi
		jne    jump_3b4c3
		mov    EXPORT_SYMBOL(mouse_map_z),%ebx
		push   %ebx
		mov    data_1a63de(%edx),%ebx
		sar    $0x10,%ebx
		push   %ebx
		xor    %ebx,%ebx
		mov    mouser,%bl
		mov    EXPORT_SYMBOL(mouse_map_x),%ecx
		mov    EXPORT_SYMBOL(players)+0x088(%edx,%ebx,4),%ebx # players[0].DirectControl[0]
		mov    $0x38,%edx
		call   ac_my_build_packet
		mov    $0x1,%al
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_3b4c3:
		mov    data_1a63e0(%edx),%ecx
		sar    $0x10,%ecx
		test   %ecx,%ecx
		jle    jump_3b4ff
		cmp    $0x3,%esi
		je     jump_3b4ff
		xor    %ebx,%ebx
		push   $0x0
		mov    mouser,%bl
		push   $0x0
		mov    EXPORT_SYMBOL(players)+0x088(%edx,%ebx,4),%ebx # players[0].DirectControl[0]
		mov    $0x1e,%edx
		call   ac_my_build_packet
		mov    $0x1,%al
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_3b4ff:
		mov    EXPORT_SYMBOL(mouse_map_x),%ebp
		test   %ebp,%ebp
		jle    jump_3b596
		mov    %ebp,%eax
		sar    $0x8,%eax
		cmp    $0x80,%eax
		jge    jump_3b596
		mov    EXPORT_SYMBOL(mouse_map_z),%eax
		test   %eax,%eax
		jle    jump_3b596
		sar    $0x8,%eax
		cmp    $0x80,%eax
		jge    jump_3b596
		mov    EXPORT_SYMBOL(mouse_map_z),%edx
		xor    %ebx,%ebx
		push   %edx
		movswl %di,%eax
		mov    EXPORT_SYMBOL(local_player_no),%bl
		push   %eax
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		sub    %ebx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		mov    mouser,%al
		mov    EXPORT_SYMBOL(players)+0x088(%edx,%eax,4),%esi # players[0].DirectControl[0]
		lea    0x0(,%ebx,4),%eax
		mov    %ebp,%ecx
		sub    %ebx,%eax
		mov    $0x1a,%edx
		shl    $0x4,%eax
		mov    %esi,%ebx
		add    $packets,%eax
		call   ac_my_build_packet
		mov    $0x1,%al
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_3b596:
		xor    %al,%al
	jump_3b598:
		add    $0xc,%esp
	jump_3b59b:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_init_game_controls)	/* 0x03BAE4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		mov    EXPORT_SYMBOL(my_build_packet),%ebx
		mov    mouser,%cl
		xor    %eax,%eax
	jump_3baf5:
		add    $0x15,%eax
		xor    %dl,%dl
		mov    %dl,data_17713b(%eax)
		cmp    $0xd2,%eax
		jne    jump_3baf5
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		cmpb   $0x0,data_1a63ae(%eax)
		jne    jump_3bb3b
		mov    $EXPORT_SYMBOL(build_packet),%ebx
		xor    %cl,%cl
		jmp    jump_3bbc7
	jump_3bb3b:
		mov    EXPORT_SYMBOL(players)+0x01e(%eax),%dx # players[0].UserInput[0].ControlMode
		and    $0x1f,%dh
		cmp    $0x1,%dx
		jne    jump_3bb62
		mov    $EXPORT_SYMBOL(build_packet),%ebx
		xor    %cl,%cl
		mov    %cl,mouser
		mov    %ebx,EXPORT_SYMBOL(my_build_packet)
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_3bb62:
		mov    EXPORT_SYMBOL(players)+0x040(%eax),%dx # players[0].UserInput[1].ControlMode
		and    $0x1f,%dh
		cmp    $0x1,%dx
		jne    jump_3bb89
		mov    $EXPORT_SYMBOL(build_packet2),%ebx
		mov    $0x1,%cl
		mov    %cl,mouser
		mov    %ebx,EXPORT_SYMBOL(my_build_packet)
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_3bb89:
		mov    EXPORT_SYMBOL(players)+0x062(%eax),%dx # players[0].UserInput[2].ControlMode
		and    $0x1f,%dh
		cmp    $0x1,%dx
		jne    jump_3bbb0
		mov    $EXPORT_SYMBOL(build_packet3),%ebx
		mov    $0x2,%cl
		mov    %cl,mouser
		mov    %ebx,EXPORT_SYMBOL(my_build_packet)
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_3bbb0:
		mov    EXPORT_SYMBOL(players)+0x084(%eax),%ax # players[0].UserInput[3].ControlMode
		and    $0x1f,%ah
		cmp    $0x1,%ax
		jne    jump_3bbc7
		mov    $EXPORT_SYMBOL(build_packet4),%ebx
		mov    $0x3,%cl
	jump_3bbc7:
		mov    %cl,mouser
		mov    %ebx,EXPORT_SYMBOL(my_build_packet)
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
ASM_font_word_length:	/* 0x03BBD8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		mov    EXPORT_SYMBOL(small_font),%esi
		mov    (%eax),%bl
		xor    %edx,%edx
		test   %bl,%bl
		je     jump_3bc0f
	jump_3bbea:
		cmpb   $0x20,(%eax)
		je     jump_3bc0f
		xor    %ebx,%ebx
		mov    (%eax),%bl
		imul   $0x6,%ebx,%ecx
		mov    %esi,%ebx
		mov    -0xb6(%ecx,%ebx,1),%bl
		and    $0xff,%ebx
		add    %ebx,%edx
		mov    0x1(%eax),%bh
		inc    %eax
		test   %bh,%bh
		jne    jump_3bbea
	jump_3bc0f:
		mov    %edx,%eax
		mov    %esi,EXPORT_SYMBOL(small_font)
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_load_packet)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x40,%esp
		xor    %edx,%edx
		mov    %edx,(%esp)
		mov    %edx,0x4(%esp)
		mov    %edx,0x8(%esp)
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    $packets,%edx
		shl    $0x4,%eax
		xor    %ebx,%ebx
		add    %eax,%edx
		call   ac_game_graphics_inputs
		xor    %eax,%eax
		mov    %ebx,0x14(%esp)
		mov    pktrec_mode,%al
		mov    %edx,0xc(%esp)
		cmp    $0x2,%eax
		jne    jump_3be48
		xor    %eax,%eax
		mov    in_network_game,%al
		test   %eax,%eax
		jne    jump_3bc7c
		mov    %edx,%eax
		call   ac_PacketRecord_Read
	jump_3bc7c:
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+1
		je     jump_3bcb3
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbShift),%al
		cmp    $0x1,%eax
		jne    jump_3bcb3
		xor    %cl,%cl
		mov    %cl,EXPORT_SYMBOL(lbKeyOn)+1
		call   ac_critical_action_input
		test   %al,%al
		je     jump_3bcb3
		mov    $0x1,%ch
		mov    0xc(%esp),%eax
		mov    %ch,exit_game
		movw   $0x2,(%eax)
	jump_3bcb3:
		call   ac_do_scroll_map
		call   ac_do_rotate_map
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+2
		je     jump_3bd1a
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(players)+0x09C(%eax),%eax # players[0].MyAgent[0]
		mov    0x18(%eax),%edx
		mov    0x20(%eax),%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		mov    %edx,engn_xc
		mov    %eax,engn_zc
		mov    engn_xc,%ax
		mov    %ax,ingame__TrackX
		mov    engn_zc,%ax
		mov    %ax,ingame__TrackZ
	jump_3bd1a:
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+3
		je     jump_3bd77
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(players)+0x0A0(%eax),%eax # players[0].MyAgent[1]
		mov    0x18(%eax),%edx
		mov    0x20(%eax),%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		mov    %edx,engn_xc
		mov    %eax,engn_zc
		mov    engn_xc,%ax
		mov    %ax,ingame__TrackX
		mov    engn_zc,%ax
		mov    %ax,ingame__TrackZ
	jump_3bd77:
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+4
		je     jump_3bdd4
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(players)+0x0A4(%eax),%eax # players[0].MyAgent[2]
		mov    0x18(%eax),%edx
		mov    0x20(%eax),%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		mov    %edx,engn_xc
		mov    %eax,engn_zc
		mov    engn_xc,%ax
		mov    %ax,ingame__TrackX
		mov    engn_zc,%ax
		mov    %ax,ingame__TrackZ
	jump_3bdd4:
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+5
		je     jump_3be31
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    data_1a6388(%eax),%eax
		mov    0x18(%eax),%edx
		mov    0x20(%eax),%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		mov    %edx,engn_xc
		mov    %eax,engn_zc
		mov    engn_xc,%ax
		mov    %ax,ingame__TrackX
		mov    engn_zc,%ax
		mov    %ax,ingame__TrackZ
	jump_3be31:
		xor    %eax,%eax
		call   ac_test_missions
		mov    %ax,ingame__MissionStatus
		add    $0x40,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_3be48:
		mov    EXPORT_SYMBOL(ingame)+0x000,%eax # ingame.GameMode
		sar    $0x10,%eax
		cmp    $0x32,%eax
		je     jump_3be5e
		cmp    $0x3b,%eax
		jne    jump_3c465
	jump_3be5e:
		call   ac_do_user_interface
		and    $0xff,%eax
		mov    %eax,0x14(%esp)
		testb  $0x4,EXPORT_SYMBOL(ingame)+0x99b # ingame.UserFlags
		je     jump_3be99
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+46
		je     jump_3be99
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbShift),%al
		cmp    $0x4,%eax
		jne    jump_3be99
		xor    %dh,%dh
		mov    %dh,EXPORT_SYMBOL(lbKeyOn)+46
		movb   $0x1,mission_result
	jump_3be99:
		testb  $0x4,EXPORT_SYMBOL(ingame)+0x99b # ingame.UserFlags
		je     jump_3bec6
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+33
		je     jump_3bec6
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbShift),%al
		cmp    $0x4,%eax
		jne    jump_3bec6
		xor    %ch,%ch
		mov    %ch,EXPORT_SYMBOL(lbKeyOn)+33
		movb   $0xff,mission_result
	jump_3bec6:
		xor    %eax,%eax
		call   ac_test_missions
		mov    %ax,ingame__MissionStatus
		cwtl
		test   %eax,%eax
		je     jump_3c465
		cmpb   $0x0,in_network_game
		jne    jump_3c465
		call   ac_dos_clock
		mov    $0x64,%ebx
		mov    ingame__fld_unkC91,%edi
		xor    %edx,%edx
		sub    %edi,%eax
		div    %ebx
		mov    %eax,%ebx
		xor    %eax,%eax
		mov    ingame__fld_unkCB5,%ax
		test   %eax,%eax
		je     jump_3c11c
		mov    ingame__fld_unkC4F,%eax
		mov    EXPORT_SYMBOL(scroll_text),%ebp
		sar    $0x10,%eax
		push   %ebp
		mov    EXPORT_SYMBOL(gui_strings)+0x9EC(,%eax,4),%edx # gui_strings[GSTR_ENM_MISSION_STATUS + 1]
		push   %edx
		mov    EXPORT_SYMBOL(gui_strings)+0x9F8,%ebx # gui_strings[GSTR_CHK_MISSION_STA_PRE]
		push   %ebx
		push   $ascSSS
		push   $EXPORT_SYMBOL(unknmsg_str)
		mov    $EXPORT_SYMBOL(unknmsg_str),%ecx
		call   ac_sprintf
		add    $0x14,%esp
		mov    %ecx,EXPORT_SYMBOL(data_15319c)
	jump_3bf4c:
		mov    EXPORT_SYMBOL(SCANNER_colour),%al
		mov    %al,0x3c(%esp)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_3c2cd
		mov    $0xb,%esi
		mov    $0x19,%eax
		mov    EXPORT_SYMBOL(data_15319c),%edi
		xor    %edx,%edx
		mov    %eax,0x18(%esp)
		mov    (%edi),%bl
		mov    %edx,0x1c(%esp)
		test   %bl,%bl
		jne    jump_3c1c0
	jump_3bf8a:
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+28
		jne    jump_3bfb6
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+57
		jne    jump_3bfb6
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+1
		je     jump_3c42c
		testb  $0x1,EXPORT_SYMBOL(lbShift)
		jne    jump_3c42c
	jump_3bfb6:
		mov    ingame__fld_unkC4F,%eax
		sar    $0x10,%eax
		cmp    $0xffffffff,%eax
		jne    jump_3c407
		mov    EXPORT_SYMBOL(lbKeyOn)+1,%dl
		test   %dl,%dl
		jne    jump_3c407
		movb   $0x1,EXPORT_SYMBOL(lbKeyOn)+19
		mov    %dl,EXPORT_SYMBOL(lbKeyOn)+57
		mov    EXPORT_SYMBOL(lbKeyOn)+57,%al
		mov    %al,EXPORT_SYMBOL(lbKeyOn)+28
		jmp    jump_3c42c
	jump_3bff1:
		push   %ebx
		push   %edx
		mov    EXPORT_SYMBOL(gui_strings)+0x9FC,%ebp # gui_strings[GSTR_CHK_MISSION_STA_SUF_KEYS]
		mov    ingame__fld_unkC4F,%eax
		push   %esi
		sar    $0x10,%eax
		push   %ebp
		mov    EXPORT_SYMBOL(gui_strings)+0x9EC(,%eax,4),%edx # gui_strings[GSTR_ENM_MISSION_STATUS + 1 + x]
		push   %edx
		mov    EXPORT_SYMBOL(gui_strings)+0x9F8,%ebx # gui_strings[GSTR_CHK_MISSION_STA_PRE]
		push   %ebx
		push   $aSSSTime02d02d0
		push   $EXPORT_SYMBOL(unknmsg_str)
		call   ac_sprintf
		add    $0x20,%esp
	jump_3c024:
		mov    $EXPORT_SYMBOL(unknmsg_str),%ecx
		mov    %ecx,EXPORT_SYMBOL(data_15319c)
		mov    %ecx,EXPORT_SYMBOL(scroll_text)
		jmp    jump_3bf4c
	jump_3c03a:
		push   %ebx
		push   %edx
		mov    EXPORT_SYMBOL(gui_strings)+0x9FC,%ecx # gui_strings[GSTR_CHK_MISSION_STA_SUF_KEYS]
		mov    ingame__fld_unkC4F,%eax
		push   %esi
		sar    $0x10,%eax
		push   %ecx
		mov    EXPORT_SYMBOL(gui_strings)+0x9EC(,%eax,4),%esi # gui_strings[GSTR_ENM_MISSION_STATUS + 1 + x]
		push   %esi
		mov    EXPORT_SYMBOL(gui_strings)+0x9F8,%edi # gui_strings[GSTR_CHK_MISSION_STA_PRE]
		push   %edi
		push   $aSSSTempo02d02d
		push   $EXPORT_SYMBOL(unknmsg_str)
		call   ac_sprintf
		add    $0x20,%esp
		jmp    jump_3c024
	jump_3c06f:
		push   %ebx
		push   %edx
		mov    EXPORT_SYMBOL(gui_strings)+0x9FC,%ebp # gui_strings[GSTR_CHK_MISSION_STA_SUF_KEYS]
		mov    ingame__fld_unkC4F,%eax
		push   %esi
		sar    $0x10,%eax
		push   %ebp
		mov    EXPORT_SYMBOL(gui_strings)+0x9EC(,%eax,4),%edx # gui_strings[GSTR_ENM_MISSION_STATUS + 1 + x]
		push   %edx
		mov    EXPORT_SYMBOL(gui_strings)+0x9F8,%ebx # gui_strings[GSTR_CHK_MISSION_STA_PRE]
		push   %ebx
		push   $aSSSZeit02d02d0
		push   $EXPORT_SYMBOL(unknmsg_str)
		call   ac_sprintf
		add    $0x20,%esp
		jmp    jump_3c024
	jump_3c0a4:
		cmpb   $0x70,data_177101
		jne    jump_3c0e4
		push   %ebx
		push   %eax
		push   %esi
		mov    EXPORT_SYMBOL(gui_strings)+0x9FC,%eax # gui_strings[GSTR_CHK_MISSION_STA_SUF_KEYS]
		push   %eax
		mov    ingame__fld_unkC4F,%eax
		sar    $0x10,%eax
		mov    EXPORT_SYMBOL(gui_strings)+0x9EC(,%eax,4),%edx # gui_strings[GSTR_ENM_MISSION_STATUS + 1 + x]
		push   %edx
		mov    EXPORT_SYMBOL(gui_strings)+0x9F8,%ebx # gui_strings[GSTR_CHK_MISSION_STA_PRE]
		push   %ebx
		push   $aSSSTiempo02d02
		push   $EXPORT_SYMBOL(unknmsg_str)
		call   ac_sprintf
		add    $0x20,%esp
		jmp    jump_3c024
	jump_3c0e4:
		push   %ebx
		push   %eax
		mov    ingame__fld_unkC4F,%eax
		push   %esi
		mov    EXPORT_SYMBOL(gui_strings)+0x9FC,%esi # gui_strings[GSTR_CHK_MISSION_STA_SUF_KEYS]
		sar    $0x10,%eax
		push   %esi
		mov    EXPORT_SYMBOL(gui_strings)+0x9EC(,%eax,4),%edi # gui_strings[GSTR_ENM_MISSION_STATUS + 1 + x]
		push   %edi
		mov    EXPORT_SYMBOL(gui_strings)+0x9F8,%ebp # gui_strings[GSTR_CHK_MISSION_STA_PRE]
		push   %ebp
		push   $aSSSTid02d02d02
		push   $EXPORT_SYMBOL(unknmsg_str)
		call   ac_sprintf
		add    $0x20,%esp
		jmp    jump_3c024
	jump_3c11c:
		mov    $0xe10,%esi
		mov    %ebx,%eax
		xor    %edx,%edx
		div    %esi
		mov    $0x3c,%edi
		mov    %eax,%esi
		xor    %edx,%edx
		mov    %ebx,%eax
		div    %edi
		mov    $0x3c,%ebp
		mov    %eax,%edi
		xor    %edx,%edx
		mov    %ebx,%eax
		div    %ebp
		mov    %edx,%ebx
		mov    %edi,%eax
		xor    %edx,%edx
		div    %ebp
		mov    language_3str,%cl
		mov    %edx,%eax
		cmp    $0x67,%cl
		jb     jump_3c179
		jbe    jump_3c06f
		cmp    $0x69,%cl
		jb     jump_3c024
		jbe    jump_3c03a
		cmp    $0x73,%cl
		je     jump_3c0a4
		jmp    jump_3c024
	jump_3c179:
		cmp    $0x65,%cl
		jb     jump_3c024
		jbe    jump_3bff1
		push   %ebx
		push   %edx
		mov    EXPORT_SYMBOL(gui_strings)+0x9FC,%ecx # gui_strings[GSTR_CHK_MISSION_STA_SUF_KEYS]
		mov    ingame__fld_unkC4F,%eax
		push   %esi
		sar    $0x10,%eax
		push   %ecx
		mov    EXPORT_SYMBOL(gui_strings)+0x9EC(,%eax,4),%esi # gui_strings[GSTR_ENM_MISSION_STATUS + 1 + x]
		push   %esi
		mov    EXPORT_SYMBOL(gui_strings)+0x9F8,%edi # gui_strings[GSTR_CHK_MISSION_STA_PRE]
		push   %edi
		push   $aSSSHeure02d02d
		push   $EXPORT_SYMBOL(unknmsg_str)
		call   ac_sprintf
		add    $0x20,%esp
		jmp    jump_3c024
	jump_3c1c0:
		movl   $0x1a,0x34(%esp)
	jump_3c1c8:
		mov    (%edi),%cl
		cmp    $0x20,%cl
		jne    jump_3c238
		lea    0x1(%edi),%ebx
		xor    %edx,%edx
		mov    (%ebx),%ch
		mov    %ebx,%eax
		test   %ch,%ch
		je     jump_3c205
	jump_3c1dc:
		cmpb   $0x20,(%eax)
		je     jump_3c205
		xor    %ebx,%ebx
		mov    (%eax),%bl
		imul   $0x6,%ebx,%ecx
		mov    EXPORT_SYMBOL(small_font),%ebx
		mov    -0xb6(%ecx,%ebx,1),%bl
		and    $0xff,%ebx
		add    %ebx,%edx
		mov    0x1(%eax),%bl
		inc    %eax
		test   %bl,%bl
		jne    jump_3c1dc
	jump_3c205:
		mov    EXPORT_SYMBOL(lbDisplay)+24,%eax # lbDisplay.PhysicalScreenWidth
		add    %esi,%edx
		sub    $0x8,%eax
		cmp    %eax,%edx
		jl     jump_3c233
		mov    $0xb,%esi
		mov    0x34(%esp),%ebx
		mov    0x18(%esp),%ecx
		add    $0x6,%ebx
		add    $0x6,%ecx
		mov    %ebx,0x34(%esp)
		mov    %ecx,0x18(%esp)
		jmp    jump_3c2b3
	jump_3c233:
		add    $0x4,%esi
		jmp    jump_3c2b3
	jump_3c238:
		xor    %eax,%eax
		mov    %cl,%al
		call   ac_my_char_to_upper
		and    $0xff,%eax
		imul   $0x6,%eax,%eax
		mov    EXPORT_SYMBOL(small_font),%edx
		xor    %ecx,%ecx
		add    %edx,%eax
		mov    EXPORT_SYMBOL(colour_lookup),%cl
		lea    -0xba(%eax),%ebp
		mov    0x34(%esp),%edx
		lea    0x1(%esi),%eax
		mov    %ebp,%ebx
		call   ac_LbSpriteDrawOneColour
		mov    0x1c(%esp),%eax
		add    gameturn,%eax
		and    $0xf,%eax
		shl    $0x9,%eax
		mov    EXPORT_SYMBOL(lbSinTable)(%eax),%eax
		mov    $0x28,%edx
		sar    $0xd,%eax
		sub    %eax,%edx
		xor    %eax,%eax
		xor    %ecx,%ecx
		mov    0x3c(%esp),%al
		shl    $0x8,%edx
		mov    %ebp,%ebx
		mov    EXPORT_SYMBOL(pixmap)(%edx,%eax,1),%cl # pixmap.fade_table[?]
		mov    0x18(%esp),%edx
		mov    %esi,%eax
		call   ac_LbSpriteDrawOneColour
		xor    %eax,%eax
		mov    0x4(%ebp),%al
		add    %eax,%esi
	jump_3c2b3:
		mov    0x1c(%esp),%ebp
		mov    0x1(%edi),%bh
		inc    %ebp
		inc    %edi
		mov    %ebp,0x1c(%esp)
		test   %bh,%bh
		jne    jump_3c1c8
		jmp    jump_3bf8a
	jump_3c2cd:
		movl   $0x33,0x20(%esp)
		mov    EXPORT_SYMBOL(data_15319c),%edi
		mov    $0x16,%esi
		xor    %ebp,%ebp
		mov    (%edi),%dh
		mov    %ebp,0x24(%esp)
		test   %dh,%dh
		jne    jump_3c2f1
		jmp    jump_3bf8a
	jump_3c2f1:
		movl   $0x34,0x30(%esp)
	jump_3c2f9:
		mov    (%edi),%bh
		cmp    $0x20,%bh
		jne    jump_3c375
		lea    0x1(%edi),%ebx
		xor    %edx,%edx
		mov    (%ebx),%cl
		mov    %ebx,%eax
		test   %cl,%cl
		je     jump_3c33a
	jump_3c311:
		cmpb   $0x20,(%eax)
		je     jump_3c33a
		xor    %ebx,%ebx
		mov    (%eax),%bl
		imul   $0x6,%ebx,%ebx
		mov    EXPORT_SYMBOL(small_font),%ecx
		mov    -0xb6(%ecx,%ebx,1),%bl
		and    $0xff,%ebx
		mov    0x1(%eax),%ch
		inc    %eax
		add    %ebx,%edx
		test   %ch,%ch
		jne    jump_3c311
	jump_3c33a:
		lea    0x0(,%edx,2),%eax
		mov    EXPORT_SYMBOL(lbDisplay)+24,%edx # lbDisplay.PhysicalScreenWidth
		add    %esi,%eax
		sub    $0x10,%edx
		cmp    %edx,%eax
		jl     jump_3c370
		mov    $0x16,%esi
		mov    0x30(%esp),%ebx
		mov    0x20(%esp),%ecx
		add    $0xc,%ebx
		add    $0xc,%ecx
		mov    %ebx,0x30(%esp)
		mov    %ecx,0x20(%esp)
		jmp    jump_3c3f2
	jump_3c370:
		add    $0x8,%esi
		jmp    jump_3c3f2
	jump_3c375:
		xor    %eax,%eax
		mov    %bh,%al
		call   ac_my_char_to_upper
		and    $0xff,%eax
		imul   $0x6,%eax,%eax
		mov    0x30(%esp),%ebx
		mov    EXPORT_SYMBOL(small_font),%edx
		xor    %ecx,%ecx
		add    %edx,%eax
		mov    EXPORT_SYMBOL(colour_lookup),%cl
		lea    -0xba(%eax),%ebp
		lea    0x1(%esi),%edx
		mov    %ebp,%eax
		call   ac_SCANNER_unkn_func_200
		mov    0x24(%esp),%eax
		add    gameturn,%eax
		and    $0xf,%eax
		shl    $0x9,%eax
		mov    EXPORT_SYMBOL(lbSinTable)(%eax),%eax
		mov    $0x28,%edx
		sar    $0xd,%eax
		sub    %eax,%edx
		xor    %eax,%eax
		xor    %ecx,%ecx
		mov    0x3c(%esp),%al
		shl    $0x8,%edx
		mov    0x20(%esp),%ebx
		mov    EXPORT_SYMBOL(pixmap)(%edx,%eax,1),%cl # pixmap.fade_table[?]
		mov    %esi,%edx
		mov    %ebp,%eax
		call   ac_SCANNER_unkn_func_200
		xor    %eax,%eax
		mov    0x4(%ebp),%al
		add    %eax,%esi
		add    %eax,%esi
	jump_3c3f2:
		incl   0x24(%esp)
		mov    0x1(%edi),%bl
		inc    %edi
		test   %bl,%bl
		jne    jump_3c2f9
		jmp    jump_3bf8a
	jump_3c407:
		xor    %bh,%bh
		mov    %bh,EXPORT_SYMBOL(lbKeyOn)+1
		mov    EXPORT_SYMBOL(lbKeyOn)+1,%al
		mov    %al,EXPORT_SYMBOL(lbKeyOn)+57
		mov    EXPORT_SYMBOL(lbKeyOn)+57,%al
		mov    %al,EXPORT_SYMBOL(lbKeyOn)+28
		movw   $0x1,ingame__fld_unkC4F
	jump_3c42c:
		mov    ingame__fld_unkC4F-2,%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_3c465
		mov    ingame__MyGroup,%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		mov    data_1974cc(%eax),%bx
		test   %bx,%bx
		je     jump_3c465
		mov    %bx,ingame__fld_unkC4F
	jump_3c465:
		cmpw   $0x0,ingame__fld_unkC4F
		je     jump_3c4b8
		mov    ingame__fld_unkC4F-2,%eax
		sar    $0x10,%eax
		cmp    $0x1e,%eax
		jge    jump_3c486
		mov    $0xfffffffe,%eax
		call   ac_change_brightness
	jump_3c486:
		decw   ingame__fld_unkC4F
		mov    ingame__fld_unkC4F-2,%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_3c4b8
		mov    $0x1,%eax
		call   ac_init_level_3d
		cmpb   $0x0,is_single_game
		je     jump_3c4b3
		movb   $0x1,exit_game
	jump_3c4b3:
		call   ac_mission_over
	jump_3c4b8:
		cmpl   $0xff,0x14(%esp)
		jne    jump_3c4f9
		cmpb   $0x0,is_single_game
		je     jump_3c4d4
		movb   $0x1,exit_game
		jmp    jump_3c4f9
	jump_3c4d4:
		mov    $0x1,%eax
		call   ac_init_level_3d
		mov    ingame__fld_unkC4F,%eax
		sar    $0x10,%eax
		cmp    $0x1,%eax
		je     jump_3c4f4
		movw   $0xffff,ingame__MissionStatus
	jump_3c4f4:
		call   ac_mission_over
	jump_3c4f9:
		cmpl   $0x0,0x14(%esp)
		je     jump_3c52c
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		cmpb   $0x0,data_1a63ae(%eax)
		je     jump_3cc2a
	jump_3c52c:
		xor    %edi,%edi
		xor    %esi,%esi
		mov    %edi,0x38(%esp)
		jmp    jump_3cbde
	jump_3c539:
		cmp    $0x1,%edi
		jne    jump_3c548
		movl   $ac_build_packet2,0x10(%esp)
		jmp    jump_3c55f
	jump_3c548:
		cmp    $0x2,%edi
		jne    jump_3c557
		movl   $ac_build_packet3,0x10(%esp)
		jmp    jump_3c55f
	jump_3c557:
		movl   $ac_build_packet4,0x10(%esp)
	jump_3c55f:
		cmpw   $0x0,ingame__TrackThing
		jne    jump_3cbcf
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(local_player_no),%bl
		imul   $0x1aa,%ebx,%eax
		lea    (%eax,%esi,1),%edx
		cmpl   $0x0,EXPORT_SYMBOL(players)+0x088(%edx) # players[0].DirectControl[0]
		je     jump_3cba7
		xor    %ecx,%ecx
		mov    EXPORT_SYMBOL(lbShift),%cl
		cmp    $0x1,%ecx
		je     jump_3cba7
		imul   $0x30,%ebx,%ebx
		add    0x38(%esp),%eax
		mov    players-0x3(%eax),%ecx
		sar    $0x18,%ecx
		shl    $0x8,%ecx
		mov    %ecx,(%esp)
		mov    players-0x2(%eax),%ecx
		sar    $0x18,%ecx
		shl    $0x8,%ecx
		mov    %ecx,0x8(%esp)
		mov    $packets,%ecx
		add    %ebx,%ecx
		mov    EXPORT_SYMBOL(players)+0x003(%eax),%bl # players[0].UserInput[0].Bits+3
		mov    %ecx,0x28(%esp)
		test   $0x20,%bl
		je     jump_3c601
		mov    %bl,%ch
		push   $0x0
		and    $0xdf,%ch
		push   $0x0
		mov    %ch,EXPORT_SYMBOL(players)+0x003(%eax) # players[0].UserInput[0].Bits+3
		mov    0x30(%esp),%eax
		mov    EXPORT_SYMBOL(players)+0x088(%edx),%ebx # players[0].DirectControl[0]
		xor    %ecx,%ecx
		mov    $0xff,%edx
		call   *0x18(%esp)
		jmp    jump_3cbcf
	jump_3c601:
		test   $0x40,%bl
		je     jump_3c64f
		imul   $0xa8,EXPORT_SYMBOL(players)+0x088(%edx),%ecx # players[0].DirectControl[0]
		mov    things,%ebx
		testb  $0x10,0xf(%ecx,%ebx,1)
		je     jump_3c64f
		andb   $0xbf,EXPORT_SYMBOL(players)+0x003(%eax) # players[0].UserInput[0].Bits+3
		mov    EXPORT_SYMBOL(players)+0x088(%edx),%ebp # players[0].DirectControl[0]
		imul   $0xa8,%ebp,%eax
		push   $0x0
		push   $0x0
		mov    $0x15,%edx
		mov    0x5c(%ebx,%eax,1),%ecx
		mov    0x30(%esp),%eax
		sar    $0x10,%ecx
		mov    %ebp,%ebx
		call   *0x18(%esp)
		jmp    jump_3cbcf
	jump_3c64f:
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(local_player_no),%bl
		imul   $0x1aa,%ebx,%edx
		imul   $0x30,%ebx,%ebx
		mov    $packets,%ecx
		mov    0x38(%esp),%eax
		add    %ebx,%ecx
		add    %edx,%eax
		mov    %ecx,0x2c(%esp)
		mov    EXPORT_SYMBOL(players)+0x003(%eax),%cl # players[0].UserInput[0].Bits+3
		add    %esi,%edx
		test   $0x40,%cl
		je     jump_3c69c
		push   $0x0
		mov    0x30(%esp),%eax
		mov    EXPORT_SYMBOL(players)+0x088(%edx),%ebx # players[0].DirectControl[0]
		push   $0x0
		xor    %ecx,%ecx
		mov    $0xe,%edx
		call   *0x18(%esp)
		jmp    jump_3cbcf
	jump_3c69c:
		mov    EXPORT_SYMBOL(players)+0x002(%eax),%ch # players[0].UserInput[0].Bits+2
		test   $0x80,%ch
		je     jump_3c754
		xor    %ecx,%ecx
		xor    %edx,%edx
		xor    %eax,%eax
		jmp    jump_3c6b7
	jump_3c6b3:
		add    $0x4,%eax
		inc    %edx
	jump_3c6b7:
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(playable_agents),%bl
		cmp    %ebx,%edx
		jge    jump_3c6ef
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(local_player_no),%bl
		imul   $0x1aa,%ebx,%ebx
		mov    EXPORT_SYMBOL(players)+0x09C(%ebx,%eax,1),%ebx # players[0].MyAgent[0]
		mov    0xa(%ebx),%bx
		and    $0xffff,%ebx
		cmp    $0x2b,%ebx
		je     jump_3c6ec
		cmp    $0xd,%ebx
		jne    jump_3c6b3
	jump_3c6ec:
		inc    %ecx
		jmp    jump_3c6b3
	jump_3c6ef:
		dec    %ebx
		cmp    %ebx,%ecx
		jne    jump_3c724
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(local_player_no),%al
		imul   $0x1aa,%eax,%ebx
		imul   $0x30,%eax,%eax
		push   $0x0
		mov    $0x1d,%edx
		xor    %ecx,%ecx
		push   $0x0
		mov    EXPORT_SYMBOL(players)+0x088(%esi,%ebx,1),%ebx # players[0].DirectControl[0]
		add    $packets,%eax
		call   *0x18(%esp)
		jmp    jump_3cbcf
	jump_3c724:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(local_player_no),%al
		imul   $0x1aa,%eax,%edx
		imul   $0x30,%eax,%eax
		push   $0x0
		xor    %ecx,%ecx
		push   $0x0
		mov    EXPORT_SYMBOL(players)+0x088(%edx,%esi,1),%ebx # players[0].DirectControl[0]
		mov    $0x1c,%edx
		add    $packets,%eax
		call   *0x18(%esp)
		jmp    jump_3cbcf
	jump_3c754:
		test   $0x1,%ch
		je     jump_3c7a4
		imul   $0xa8,EXPORT_SYMBOL(players)+0x088(%edx),%ecx # players[0].DirectControl[0]
		mov    things,%ebx
		testb  $0x8,0xf(%ecx,%ebx,1)
		je     jump_3c7a4
		andb   $0xfe,EXPORT_SYMBOL(players)+0x002(%eax) # players[0].UserInput[0].Bits+2
		imul   $0xa8,EXPORT_SYMBOL(players)+0x088(%edx),%eax # players[0].DirectControl[0]
		push   $0x0
		push   $0x0
		mov    0x5c(%ebx,%eax,1),%ecx
		mov    0x34(%esp),%eax
		sar    $0x10,%ecx
		mov    EXPORT_SYMBOL(players)+0x088(%edx),%ebx # players[0].DirectControl[0]
		mov    $0x10,%edx
		call   *0x18(%esp)
		jmp    jump_3cbcf
	jump_3c7a4:
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(local_player_no),%bl
		imul   $0x1aa,%ebx,%eax
		mov    0x38(%esp),%edx
		add    %eax,%edx
		testb  $0x1,EXPORT_SYMBOL(players)+0x002(%edx) # players[0].UserInput[0].Bits+2
		je     jump_3c81a
		add    %esi,%eax
		imul   $0xa8,EXPORT_SYMBOL(players)+0x088(%eax),%ecx # players[0].DirectControl[0]
		mov    things,%ebp
		add    %ebp,%ecx
		testb  $0x1,0xf(%ecx)
		je     jump_3c81a
		imul   $0x30,%ebx,%ebx
		andb   $0xfe,EXPORT_SYMBOL(players)+0x002(%edx) # players[0].UserInput[0].Bits+2
		imul   $0xa8,EXPORT_SYMBOL(players)+0x088(%eax),%edx # players[0].DirectControl[0]
		push   $0x0
		push   $0x0
		add    %ebp,%edx
		mov    EXPORT_SYMBOL(players)+0x088(%eax),%eax # players[0].DirectControl[0]
		mov    $packets,%ebp
		mov    0x5c(%edx),%ecx
		mov    $0x14,%edx
		sar    $0x10,%ecx
		add    %ebx,%ebp
		mov    %eax,%ebx
		mov    %ebp,%eax
		call   *0x18(%esp)
		jmp    jump_3cbcf
	jump_3c81a:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(local_player_no),%al
		imul   $0x1aa,%eax,%edx
		mov    0x38(%esp),%ebp
		add    %edx,%ebp
		testb  $0x40,EXPORT_SYMBOL(players)+0x002(%ebp) # players[0].UserInput[0].Bits+2
		jne    jump_3c846
		lea    (%edx,%edi,1),%ebx
		xor    %ecx,%ecx
		mov    data_1a639e(%ebx),%cl
		cmp    $0x1,%ecx
		jne    jump_3c895
	jump_3c846:
		xor    %eax,%eax
		mov    %edi,%edx
		mov    EXPORT_SYMBOL(local_player_no),%al
		call   ac_process_send_person
		test   %al,%al
		je     jump_3cbcf
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(local_player_no),%al
		imul   $0x1aa,%eax,%edx
		imul   $0x30,%eax,%eax
		mov    engn_zc,%ebp
		push   %ebp
		mov    engn_xc,%ecx
		push   $0x0
		mov    EXPORT_SYMBOL(players)+0x088(%edx,%esi,1),%ebx # players[0].DirectControl[0]
		mov    $0xb,%edx
		add    $packets,%eax
		call   *0x18(%esp)
		jmp    jump_3cbcf
	jump_3c895:
		mov    EXPORT_SYMBOL(players)+0x002(%ebp),%cl # players[0].UserInput[0].Bits+2
		test   $0x10,%cl
		je     jump_3c8e7
		xor    %edx,%edx
		mov    data_1a63a6(%ebx),%dl
		cmp    $0x17,%edx
		je     jump_3cbcf
		push   $0x0
		push   $0x0
		call   ac_get_next_player_agent
		movswl %ax,%ecx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(local_player_no),%al
		imul   $0x1aa,%eax,%edx
		imul   $0x30,%eax,%eax
		mov    EXPORT_SYMBOL(players)+0x088(%edx,%esi,1),%ebx # players[0].DirectControl[0]
		mov    $0x17,%edx
		add    $packets,%eax
		call   *0x18(%esp)
		jmp    jump_3cbcf
	jump_3c8e7:
		imul   $0x30,%eax,%eax
		add    %esi,%edx
		add    $packets,%eax
		test   $0x2,%cl
		je     jump_3ca98
		mov    (%esp),%ecx
		test   %ecx,%ecx
		jle    jump_3c992
		imul   $0xa8,EXPORT_SYMBOL(players)+0x088(%edx),%eax # players[0].DirectControl[0]
		mov    things,%edx
		mov    0x72(%edx,%eax,1),%ax
		add    $0xa,%eax
		movswl %ax,%edx
		cmp    $0x64,%edx
		jle    jump_3c92c
		mov    $0x64,%eax
	jump_3c92c:
		movswl %ax,%ecx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(local_player_no),%al
		imul   $0x1aa,%eax,%edx
		imul   $0x30,%eax,%eax
		push   $0x0
		push   $0x0
		mov    EXPORT_SYMBOL(players)+0x088(%edx,%esi,1),%ebx # players[0].DirectControl[0]
		mov    $0x23,%edx
		add    $packets,%eax
		call   *0x18(%esp)
		mov    $0x15,%edx
		xor    %ebx,%ebx
		xor    %eax,%eax
		call   ac_IsSamplePlaying
		test   %al,%al
		jne    jump_3c986
		push   $0x1
		push   $0xffffffff
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x15,%edx
		xor    %eax,%eax
		call   ac_play_sample_using_heap
	jump_3c986:
		orb    $0x10,EXPORT_SYMBOL(ingame)+0x931 # ingame.Flags+2
		jmp    jump_3cbcf
	jump_3c992:
		jge    jump_3ca23
		imul   $0xa8,EXPORT_SYMBOL(players)+0x088(%edx),%eax # players[0].DirectControl[0]
		mov    things,%edx
		mov    0x72(%edx,%eax,1),%ax
		sub    $0xa,%eax
		movswl %ax,%edx
		cmp    $0xffffff9c,%edx
		jge    jump_3c9bd
		mov    $0xffffff9c,%eax
	jump_3c9bd:
		movswl %ax,%ecx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(local_player_no),%al
		imul   $0x1aa,%eax,%edx
		imul   $0x30,%eax,%eax
		push   $0x0
		push   $0x0
		mov    EXPORT_SYMBOL(players)+0x088(%edx,%esi,1),%ebx # players[0].DirectControl[0]
		mov    $0x23,%edx
		add    $packets,%eax
		call   *0x18(%esp)
		mov    $0x15,%edx
		xor    %ebx,%ebx
		xor    %eax,%eax
		call   ac_IsSamplePlaying
		test   %al,%al
		jne    jump_3ca17
		push   $0x1
		push   $0xffffffff
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x15,%edx
		xor    %eax,%eax
		call   ac_play_sample_using_heap
	jump_3ca17:
		orb    $0x10,EXPORT_SYMBOL(ingame)+0x931 # ingame.Flags+2
		jmp    jump_3cbcf
	jump_3ca23:
		mov    0x8(%esp),%ecx
		test   %ecx,%ecx
		jge    jump_3ca5a
		mov    data_1a63a6(%ebx),%bl
		and    $0xff,%ebx
		cmp    $0xd,%ebx
		je     jump_3cbcf
		push   $0x0
		mov    EXPORT_SYMBOL(players)+0x088(%edx),%ebx # players[0].DirectControl[0]
		push   $0x0
		xor    %ecx,%ecx
		mov    $0xd,%edx
		call   *0x18(%esp)
		jmp    jump_3cbcf
	jump_3ca5a:
		jle    jump_3ca8b
		mov    data_1a63a6(%ebx),%bl
		and    $0xff,%ebx
		cmp    $0x1b,%ebx
		je     jump_3cbcf
		push   $0x0
		mov    EXPORT_SYMBOL(players)+0x088(%edx),%ebx # players[0].DirectControl[0]
		push   $0x0
		xor    %ecx,%ecx
		mov    $0x1b,%edx
		call   *0x18(%esp)
		jmp    jump_3cbcf
	jump_3ca8b:
		xor    %al,%al
		mov    %al,data_1a63a6(%ebx)
		jmp    jump_3cbcf
	jump_3ca98:
		cmpl   $0x0,(%esp)
		jne    jump_3caaa
		mov    0x8(%esp),%ecx
		test   %ecx,%ecx
		je     jump_3cb7b
	jump_3caaa:
		lea    0x8(%esp),%ebx
		lea    0x4(%esp),%edx
		mov    %esp,%eax
		call   ac_local_to_worldr
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(local_player_no),%al
		imul   $0x1aa,%eax,%edx
		imul   $0x30,%eax,%eax
		mov    0x38(%esp),%ebx
		add    %edx,%ebx
		mov    players(%ebx),%ecx
		add    %esi,%edx
		sar    $0x10,%ecx
		add    $packets,%eax
		test   $0x80,%ch
		je     jump_3cb31
		testb  $0x1,EXPORT_SYMBOL(players)+0x002(%ebx) # players[0].UserInput[0].Bits+2
		je     jump_3cb0f
		mov    0x8(%esp),%ebp
		push   %ebp
		mov    0x8(%esp),%ebx
		mov    0x4(%esp),%ecx
		push   %ebx
		mov    EXPORT_SYMBOL(players)+0x088(%edx),%ebx # players[0].DirectControl[0]
		mov    $0x8019,%edx
		call   *0x18(%esp)
		jmp    jump_3cbcf
	jump_3cb0f:
		mov    0x8(%esp),%ebx
		push   %ebx
		mov    0x8(%esp),%ecx
		push   %ecx
		mov    EXPORT_SYMBOL(players)+0x088(%edx),%ebx # players[0].DirectControl[0]
		mov    0x8(%esp),%ecx
		mov    $0x19,%edx
		call   *0x18(%esp)
		jmp    jump_3cbcf
	jump_3cb31:
		testb  $0x1,EXPORT_SYMBOL(players)+0x002(%ebx) # players[0].UserInput[0].Bits+2
		je     jump_3cb5c
		mov    0x8(%esp),%ecx
		push   %ecx
		mov    0x8(%esp),%ebp
		mov    EXPORT_SYMBOL(players)+0x088(%edx),%ebx # players[0].DirectControl[0]
		push   %ebp
		mov    $0x800c,%edx
		mov    0x8(%esp),%ecx
		call   *0x18(%esp)
		jmp    jump_3cbcf
	jump_3cb5c:
		mov    0x8(%esp),%ebp
		push   %ebp
		mov    0x8(%esp),%ebx
		mov    0x4(%esp),%ecx
		push   %ebx
		mov    EXPORT_SYMBOL(players)+0x088(%edx),%ebx # players[0].DirectControl[0]
		mov    $0xc,%edx
		call   *0x18(%esp)
		jmp    jump_3cbcf
	jump_3cb7b:
		testb  $0x1,EXPORT_SYMBOL(players)+0x002(%ebp) # players[0].UserInput[0].Bits+2
		je     jump_3cb97
		push   %ecx
		push   %ecx
		mov    EXPORT_SYMBOL(players)+0x088(%edx),%ebx # players[0].DirectControl[0]
		mov    $0x8000,%edx
		call   *0x18(%esp)
		jmp    jump_3cbcf
	jump_3cb97:
		push   %ecx
		push   %ecx
		mov    EXPORT_SYMBOL(players)+0x088(%edx),%ebx # players[0].DirectControl[0]
		xor    %edx,%edx
		call   *0x18(%esp)
		jmp    jump_3cbcf
	jump_3cba7:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(local_player_no),%al
		imul   $0x1aa,%eax,%ebx
		imul   $0x30,%eax,%eax
		push   $0x0
		xor    %ecx,%ecx
		xor    %edx,%edx
		push   $0x0
		mov    EXPORT_SYMBOL(players)+0x088(%esi,%ebx,1),%ebx # players[0].DirectControl[0]
		add    $packets,%eax
		call   *0x18(%esp)
	jump_3cbcf:
		mov    0x38(%esp),%eax
		add    $0x4,%esi
		add    $0x22,%eax
		inc    %edi
		mov    %eax,0x38(%esp)
	jump_3cbde:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(local_player_no),%al
		imul   $0x1aa,%eax,%eax
		xor    %edx,%edx
		mov    data_1a63ae(%eax),%dl
		inc    %edx
		cmp    %edx,%edi
		jge    jump_3cc2a
		cmpb   $0x0,data_1a63ae(%eax)
		je     jump_3cc15
		add    0x38(%esp),%eax
		mov    EXPORT_SYMBOL(players)+0x01e(%eax),%ax # players[0].UserInput[0].ControlMode
		and    $0x1f,%ah
		cmp    $0x1,%ax
		je     jump_3cbcf
	jump_3cc15:
		test   %edi,%edi
		jne    jump_3c539
		movl   $ac_build_packet,0x10(%esp)
		jmp    jump_3c55f
	jump_3cc2a:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		xor    %edx,%edx
		mov    mouser,%dl
		mov    data_1a6390(%edx,%eax,1),%al
		and    $0xff,%eax
		cmp    $0x11,%eax
		je     jump_3ccfc
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+1
		je     jump_3ccdc
		cmpb   $0x0,in_network_game
		jne    jump_3cc85
		testb  $0x4,EXPORT_SYMBOL(ingame)+0x99b # ingame.UserFlags
		je     jump_3ccdc
	jump_3cc85:
		testb  $0x2,EXPORT_SYMBOL(lbShift)
		je     jump_3cca7
		mov    in_network_game,%bl
		test   %bl,%bl
		jne    jump_3cca7
		mov    %bl,EXPORT_SYMBOL(lbKeyOn)+1
		movb   $0x1,exit_game
		jmp    jump_3ccdc
	jump_3cca7:
		testb  $0x1,EXPORT_SYMBOL(lbShift)
		je     jump_3ccdc
		xor    %al,%al
		mov    %al,EXPORT_SYMBOL(lbKeyOn)+1
		cmpb   $0x0,in_network_game
		jne    jump_3ccc9
		call   ac_critical_action_input
		test   %al,%al
		je     jump_3ccdc
	jump_3ccc9:
		mov    $0xffffffe0,%eax
		call   ac_change_brightness
		mov    0xc(%esp),%eax
		movw   $0x2,(%eax)
	jump_3ccdc:
		xor    %eax,%eax
		mov    pktrec_mode,%al
		cmp    $0x1,%eax
		jne    jump_3ccfc
		xor    %eax,%eax
		mov    in_network_game,%al
		test   %eax,%eax
		jne    jump_3ccfc
		mov    0xc(%esp),%eax
		call   ac_PacketRecord_Write
	jump_3ccfc:
		add    $0x40,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		lea    0x0(%eax),%eax
	jump_3cd08:
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_build_packet)	/* 0x03CD0C */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    0x10(%esp),%edi
		mov    %dx,(%esp)
		movzbl EXPORT_SYMBOL(local_player_no),%esi
		lea    0x0(,%esi,8),%edx
		add    %esi,%edx
		shl    $0x3,%edx
		sub    %esi,%edx
		add    %edx,%edx
		mov    %edx,%esi
		shl    $0x2,%edx
		sub    %esi,%edx
		mov    %edx,%esi
		mov    (%esp),%dl
		mov    %dl,data_1a63a6(%esi)
		mov    (%esp),%edx
		and    $0x7f,%dh
		and    $0xffff,%edx
		cmp    $0x24,%edx
		jb     jump_3ce78
		jbe    jump_3cdac
		cmp    $0x2f,%edx
		jb     jump_3ce27
		jbe    jump_3cd8d
		cmp    $0x34,%edx
		jb     jump_3cdf9
		jbe    jump_3cdac
		cmp    $0x38,%edx
		jb     jump_3cde4
		cmp    $0x39,%edx
		jbe    jump_3cd8d
		cmp    $0x3b,%edx
		jbe    jump_3cd8d
		cmp    $0xff,%edx
		jmp    jump_3cf2a
	jump_3cd8d:
		mov    %bx,0x2(%eax)
		mov    %cx,0x4(%eax)
		mov    (%esp),%edx
		mov    %di,0x6(%eax)
		mov    %dx,(%eax)
		mov    0x14(%esp),%edx
		mov    %dx,0x8(%eax)
		jmp    jump_3cf30
	jump_3cdac:
		mov    %bx,0x2(%eax)
		mov    (%esp),%edx
		mov    %cx,0x4(%eax)
		mov    %dx,(%eax)
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret    $0x8
	jump_3cdc2:
		mov    $0x78,%esi
		mov    %bx,0x2(%eax)
		mov    (%esp),%edx
		mov    %cx,0x4(%eax)
		mov    %si,ingame__UserZoom
		mov    %dx,(%eax)
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret    $0x8
	jump_3cde4:
		cmp    $0x36,%edx
	jump_3cde7:
		mov    (%esp),%edx
		mov    %bx,0x2(%eax)
		mov    %dx,(%eax)
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret    $0x8
	jump_3cdf9:
		cmp    $0x31,%edx
		jb     jump_3cd8d
		jbe    jump_3ce05
		cmp    $0x32,%edx
		jbe    jump_3cde7
	jump_3ce05:
		mov    %bx,0x2(%eax)
		mov    $0x78,%edx
		mov    %cx,0x4(%eax)
		mov    %dx,ingame__UserZoom
		mov    (%esp),%edx
		mov    %dx,(%eax)
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret    $0x8
	jump_3ce27:
		cmp    $0x2a,%edx
		jb     jump_3ce4f
		jbe    jump_3cd8d
		cmp    $0x2c,%edx
		jb     jump_3cdac
		jbe    jump_3cdac
		cmp    $0x2d,%edx
		jbe    jump_3cdac
		jmp    jump_3cd8d
	jump_3ce4f:
		cmp    $0x26,%edx
		jb     jump_3cdac
		jbe    jump_3cdac
		cmp    $0x27,%edx
		jbe    jump_3cd8d
		cmp    $0x28,%edx
		je     jump_3cd8d
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret    $0x8
	jump_3ce78:
		cmp    $0x18,%edx
		jb     jump_3cecc
		jbe    jump_3cd8d
		cmp    $0x1e,%edx
		jb     jump_3ceaf
		jbe    jump_3cd8d
		cmp    $0x21,%edx
		jb     jump_3cea1
		jbe    jump_3ce05
		cmp    $0x22,%edx
		jmp    jump_3cdac
	jump_3cea1:
		cmp    $0x1f,%edx
		jbe    jump_3cdac
		jmp    jump_3cd8d
	jump_3ceaf:
		cmp    $0x1a,%edx
		jb     jump_3cd8d
		jbe    jump_3cd8d
		cmp    $0x1b,%edx
		jbe    jump_3cdc2
		jmp    jump_3cdac
	jump_3cecc:
		cmp    $0xe,%edx
		jb     jump_3cef2
		cmp    $0x10,%edx
		jbe    jump_3cdac
		cmp    $0x14,%edx
		jb     jump_3cf30
		cmp    $0x15,%edx
		jbe    jump_3cdac
		cmp    $0x16,%edx
		jbe    jump_3cf30
		jmp    jump_3cdac
	jump_3cef2:
		cmp    $0xb,%edx
		jb     jump_3cf28
		jbe    jump_3cd8d
		cmp    $0xc,%edx
		jbe    jump_3cd8d
		mov    $0x78,%edi
		mov    %bx,0x2(%eax)
		mov    (%esp),%edx
		mov    %cx,0x4(%eax)
		mov    %di,ingame__UserZoom
		mov    %dx,(%eax)
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret    $0x8
	jump_3cf28:
		test   %edx,%edx
	jump_3cf2a:
		je     jump_3cde7
	jump_3cf30:
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret    $0x8


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_build_packet2)	/* 0x03CF38 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    0x10(%esp),%edi
		mov    %dx,(%esp)
		movzbl EXPORT_SYMBOL(local_player_no),%esi
		lea    0x0(,%esi,8),%edx
		add    %esi,%edx
		shl    $0x3,%edx
		sub    %esi,%edx
		add    %edx,%edx
		mov    %edx,%esi
		shl    $0x2,%edx
		sub    %esi,%edx
		mov    %edx,%esi
		mov    (%esp),%dl
		mov    %dl,data_1a63a7(%esi)
		mov    (%esp),%edx
		and    $0x7f,%dh
		and    $0xffff,%edx
		cmp    $0x24,%edx
		jb     jump_3d0b2
		jbe    jump_3cfe9
		cmp    $0x30,%edx
		jb     jump_3d066
		jbe    jump_3cfc9
		cmp    $0x35,%edx
		jb     jump_3d054
		cmp    $0x36,%edx
		jbe    jump_3cfb9
		cmp    $0x39,%edx
		jb     jump_3d046
		jbe    jump_3cfc9
		cmp    $0x3b,%edx
		jbe    jump_3cfc9
		cmp    $0xff,%edx
		jmp    jump_3d165
	jump_3cfb9:
		mov    (%esp),%edx
		mov    %bx,0xc(%eax)
		mov    %dx,0xa(%eax)
		jmp    jump_3d16b
	jump_3cfc9:
		mov    %bx,0xc(%eax)
		mov    %cx,0xe(%eax)
		mov    (%esp),%edx
		mov    %di,0x10(%eax)
		mov    %dx,0xa(%eax)
		mov    0x14(%esp),%edx
		mov    %dx,0x12(%eax)
		jmp    jump_3d16b
	jump_3cfe9:
		mov    %bx,0xc(%eax)
		mov    (%esp),%edx
		mov    %cx,0xe(%eax)
		mov    %dx,0xa(%eax)
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret    $0x8
	jump_3d000:
		mov    %bx,0xc(%eax)
		mov    $0x78,%edx
		mov    %cx,0xe(%eax)
		mov    %dx,ingame__UserZoom
		mov    (%esp),%edx
		mov    %dx,0xa(%eax)
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret    $0x8
	jump_3d023:
		mov    $0x78,%esi
		mov    %bx,0xc(%eax)
		mov    (%esp),%edx
		mov    %cx,0xe(%eax)
		mov    %si,ingame__UserZoom
		mov    %dx,0xa(%eax)
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret    $0x8
	jump_3d046:
		cmp    $0x37,%edx
		jbe    jump_3cfb9
		jmp    jump_3cfc9
	jump_3d054:
		cmp    $0x32,%edx
		jb     jump_3d000
		jbe    jump_3cfb9
		cmp    $0x33,%edx
		jbe    jump_3d000
		jmp    jump_3cfe9
	jump_3d066:
		cmp    $0x2a,%edx
		jb     jump_3d089
		jbe    jump_3cfc9
		cmp    $0x2d,%edx
		jb     jump_3d081
		jbe    jump_3cfe9
		jmp    jump_3cfc9
	jump_3d081:
		cmp    $0x2b,%edx
		jmp    jump_3cfe9
	jump_3d089:
		cmp    $0x26,%edx
		jb     jump_3cfe9
		jbe    jump_3cfe9
		cmp    $0x27,%edx
		jbe    jump_3cfc9
		cmp    $0x28,%edx
		je     jump_3cfc9
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret    $0x8
	jump_3d0b2:
		cmp    $0x18,%edx
		jb     jump_3d106
		jbe    jump_3cfc9
		cmp    $0x1e,%edx
		jb     jump_3d0e9
		jbe    jump_3cfc9
		cmp    $0x21,%edx
		jb     jump_3d0db
		jbe    jump_3d000
		cmp    $0x22,%edx
		jmp    jump_3cfe9
	jump_3d0db:
		cmp    $0x1f,%edx
		jbe    jump_3cfe9
		jmp    jump_3cfc9
	jump_3d0e9:
		cmp    $0x1a,%edx
		jb     jump_3cfc9
		jbe    jump_3cfc9
		cmp    $0x1b,%edx
		jbe    jump_3d023
		jmp    jump_3cfe9
	jump_3d106:
		cmp    $0xe,%edx
		jb     jump_3d12c
		cmp    $0x10,%edx
		jbe    jump_3cfe9
		cmp    $0x14,%edx
		jb     jump_3d16b
		cmp    $0x15,%edx
		jbe    jump_3cfe9
		cmp    $0x16,%edx
		jbe    jump_3d16b
		jmp    jump_3cfe9
	jump_3d12c:
		cmp    $0xb,%edx
		jb     jump_3d163
		jbe    jump_3cfc9
		cmp    $0xc,%edx
		jbe    jump_3cfc9
		mov    $0x78,%edi
		mov    %bx,0xc(%eax)
		mov    (%esp),%edx
		mov    %cx,0xe(%eax)
		mov    %di,ingame__UserZoom
		mov    %dx,0xa(%eax)
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret    $0x8
	jump_3d163:
		test   %edx,%edx
	jump_3d165:
		je     jump_3cfb9
	jump_3d16b:
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret    $0x8


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_build_packet3)	/* 0x03D174 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    0x10(%esp),%edi
		mov    %dx,(%esp)
		movzbl EXPORT_SYMBOL(local_player_no),%esi
		lea    0x0(,%esi,8),%edx
		add    %esi,%edx
		shl    $0x3,%edx
		sub    %esi,%edx
		add    %edx,%edx
		mov    %edx,%esi
		shl    $0x2,%edx
		sub    %esi,%edx
		mov    %edx,%esi
		mov    (%esp),%dl
		mov    %dl,data_1a63a8(%esi)
		mov    (%esp),%edx
		and    $0x7f,%dh
		and    $0xffff,%edx
		cmp    $0x24,%edx
		jb     jump_3d2ee
		jbe    jump_3d225
		cmp    $0x30,%edx
		jb     jump_3d2a2
		jbe    jump_3d205
		cmp    $0x35,%edx
		jb     jump_3d290
		cmp    $0x36,%edx
		jbe    jump_3d1f5
		cmp    $0x39,%edx
		jb     jump_3d282
		jbe    jump_3d205
		cmp    $0x3b,%edx
		jbe    jump_3d205
		cmp    $0xff,%edx
		jmp    jump_3d3a1
	jump_3d1f5:
		mov    (%esp),%edx
		mov    %bx,0x16(%eax)
		mov    %dx,0x14(%eax)
		jmp    jump_3d3a7
	jump_3d205:
		mov    %bx,0x16(%eax)
		mov    %cx,0x18(%eax)
		mov    (%esp),%edx
		mov    %di,0x1a(%eax)
		mov    %dx,0x14(%eax)
		mov    0x14(%esp),%edx
		mov    %dx,0x1c(%eax)
		jmp    jump_3d3a7
	jump_3d225:
		mov    %bx,0x16(%eax)
		mov    (%esp),%edx
		mov    %cx,0x18(%eax)
		mov    %dx,0x14(%eax)
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret    $0x8
	jump_3d23c:
		mov    %bx,0x16(%eax)
		mov    $0x78,%edx
		mov    %cx,0x18(%eax)
		mov    %dx,ingame__UserZoom
		mov    (%esp),%edx
		mov    %dx,0x14(%eax)
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret    $0x8
	jump_3d25f:
		mov    $0x78,%esi
		mov    %bx,0x16(%eax)
		mov    (%esp),%edx
		mov    %cx,0x18(%eax)
		mov    %si,ingame__UserZoom
		mov    %dx,0x14(%eax)
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret    $0x8
	jump_3d282:
		cmp    $0x37,%edx
		jbe    jump_3d1f5
		jmp    jump_3d205
	jump_3d290:
		cmp    $0x32,%edx
		jb     jump_3d23c
		jbe    jump_3d1f5
		cmp    $0x33,%edx
		jbe    jump_3d23c
		jmp    jump_3d225
	jump_3d2a2:
		cmp    $0x2a,%edx
		jb     jump_3d2c5
		jbe    jump_3d205
		cmp    $0x2d,%edx
		jb     jump_3d2bd
		jbe    jump_3d225
		jmp    jump_3d205
	jump_3d2bd:
		cmp    $0x2b,%edx
		jmp    jump_3d225
	jump_3d2c5:
		cmp    $0x26,%edx
		jb     jump_3d225
		jbe    jump_3d225
		cmp    $0x27,%edx
		jbe    jump_3d205
		cmp    $0x28,%edx
		je     jump_3d205
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret    $0x8
	jump_3d2ee:
		cmp    $0x18,%edx
		jb     jump_3d342
		jbe    jump_3d205
		cmp    $0x1e,%edx
		jb     jump_3d325
		jbe    jump_3d205
		cmp    $0x21,%edx
		jb     jump_3d317
		jbe    jump_3d23c
		cmp    $0x22,%edx
		jmp    jump_3d225
	jump_3d317:
		cmp    $0x1f,%edx
		jbe    jump_3d225
		jmp    jump_3d205
	jump_3d325:
		cmp    $0x1a,%edx
		jb     jump_3d205
		jbe    jump_3d205
		cmp    $0x1b,%edx
		jbe    jump_3d25f
		jmp    jump_3d225
	jump_3d342:
		cmp    $0xe,%edx
		jb     jump_3d368
		cmp    $0x10,%edx
		jbe    jump_3d225
		cmp    $0x14,%edx
		jb     jump_3d3a7
		cmp    $0x15,%edx
		jbe    jump_3d225
		cmp    $0x16,%edx
		jbe    jump_3d3a7
		jmp    jump_3d225
	jump_3d368:
		cmp    $0xb,%edx
		jb     jump_3d39f
		jbe    jump_3d205
		cmp    $0xc,%edx
		jbe    jump_3d205
		mov    $0x78,%edi
		mov    %bx,0x16(%eax)
		mov    (%esp),%edx
		mov    %cx,0x18(%eax)
		mov    %di,ingame__UserZoom
		mov    %dx,0x14(%eax)
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret    $0x8
	jump_3d39f:
		test   %edx,%edx
	jump_3d3a1:
		je     jump_3d1f5
	jump_3d3a7:
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret    $0x8


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_build_packet4)	/* 0x03D3B0 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    0x10(%esp),%edi
		mov    %dx,(%esp)
		movzbl EXPORT_SYMBOL(local_player_no),%esi
		lea    0x0(,%esi,8),%edx
		add    %esi,%edx
		shl    $0x3,%edx
		sub    %esi,%edx
		add    %edx,%edx
		mov    %edx,%esi
		shl    $0x2,%edx
		sub    %esi,%edx
		mov    %edx,%esi
		mov    (%esp),%dl
		mov    %dl,data_1a63a9(%esi)
		mov    (%esp),%edx
		and    $0x7f,%dh
		and    $0xffff,%edx
		cmp    $0x24,%edx
		jb     jump_3d52a
		jbe    jump_3d461
		cmp    $0x30,%edx
		jb     jump_3d4de
		jbe    jump_3d441
		cmp    $0x35,%edx
		jb     jump_3d4cc
		cmp    $0x36,%edx
		jbe    jump_3d431
		cmp    $0x39,%edx
		jb     jump_3d4be
		jbe    jump_3d441
		cmp    $0x3b,%edx
		jbe    jump_3d441
		cmp    $0xff,%edx
		jmp    jump_3d5dd
	jump_3d431:
		mov    (%esp),%edx
		mov    %bx,0x20(%eax)
		mov    %dx,0x1e(%eax)
		jmp    jump_3d5e3
	jump_3d441:
		mov    %bx,0x20(%eax)
		mov    %cx,0x22(%eax)
		mov    (%esp),%edx
		mov    %di,0x24(%eax)
		mov    %dx,0x1e(%eax)
		mov    0x14(%esp),%edx
		mov    %dx,0x26(%eax)
		jmp    jump_3d5e3
	jump_3d461:
		mov    %bx,0x20(%eax)
		mov    (%esp),%edx
		mov    %cx,0x22(%eax)
		mov    %dx,0x1e(%eax)
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret    $0x8
	jump_3d478:
		mov    %bx,0x20(%eax)
		mov    $0x78,%edx
		mov    %cx,0x22(%eax)
		mov    %dx,ingame__UserZoom
		mov    (%esp),%edx
		mov    %dx,0x1e(%eax)
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret    $0x8
	jump_3d49b:
		mov    $0x78,%esi
		mov    %bx,0x20(%eax)
		mov    (%esp),%edx
		mov    %cx,0x22(%eax)
		mov    %si,ingame__UserZoom
		mov    %dx,0x1e(%eax)
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret    $0x8
	jump_3d4be:
		cmp    $0x37,%edx
		jbe    jump_3d431
		jmp    jump_3d441
	jump_3d4cc:
		cmp    $0x32,%edx
		jb     jump_3d478
		jbe    jump_3d431
		cmp    $0x33,%edx
		jbe    jump_3d478
		jmp    jump_3d461
	jump_3d4de:
		cmp    $0x2a,%edx
		jb     jump_3d501
		jbe    jump_3d441
		cmp    $0x2d,%edx
		jb     jump_3d4f9
		jbe    jump_3d461
		jmp    jump_3d441
	jump_3d4f9:
		cmp    $0x2b,%edx
		jmp    jump_3d461
	jump_3d501:
		cmp    $0x26,%edx
		jb     jump_3d461
		jbe    jump_3d461
		cmp    $0x27,%edx
		jbe    jump_3d441
		cmp    $0x28,%edx
		je     jump_3d441
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret    $0x8
	jump_3d52a:
		cmp    $0x18,%edx
		jb     jump_3d57e
		jbe    jump_3d441
		cmp    $0x1e,%edx
		jb     jump_3d561
		jbe    jump_3d441
		cmp    $0x21,%edx
		jb     jump_3d553
		jbe    jump_3d478
		cmp    $0x22,%edx
		jmp    jump_3d461
	jump_3d553:
		cmp    $0x1f,%edx
		jbe    jump_3d461
		jmp    jump_3d441
	jump_3d561:
		cmp    $0x1a,%edx
		jb     jump_3d441
		jbe    jump_3d441
		cmp    $0x1b,%edx
		jbe    jump_3d49b
		jmp    jump_3d461
	jump_3d57e:
		cmp    $0xe,%edx
		jb     jump_3d5a4
		cmp    $0x10,%edx
		jbe    jump_3d461
		cmp    $0x14,%edx
		jb     jump_3d5e3
		cmp    $0x15,%edx
		jbe    jump_3d461
		cmp    $0x16,%edx
		jbe    jump_3d5e3
		jmp    jump_3d461
	jump_3d5a4:
		cmp    $0xb,%edx
		jb     jump_3d5db
		jbe    jump_3d441
		cmp    $0xc,%edx
		jbe    jump_3d441
		mov    $0x78,%edi
		mov    %bx,0x20(%eax)
		mov    (%esp),%edx
		mov    %cx,0x22(%eax)
		mov    %di,ingame__UserZoom
		mov    %dx,0x1e(%eax)
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret    $0x8
	jump_3d5db:
		test   %edx,%edx
	jump_3d5dd:
		je     jump_3d431
	jump_3d5e3:
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret    $0x8


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_change_brightness)	/* 0x03D5F0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x64,%esp
		mov    display_palette,%esi
		mov    %eax,%ebx
		xor    %eax,%eax
		mov    ingame__PalType,%al
		push   %eax
		mov    palette_fname_fmt,%edx
		push   %edx
		lea    0x8(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
		mov    %esp,%eax
		mov    display_palette,%edx
		call   ac_LbFileLoadAt
		add    %bx,palette_brightness
		mov    data_1a730e,%eax
		sar    $0x10,%eax
		mov    display_palette,%esi
		cmp    $0xffff8ad0,%eax
		jge    jump_3d64f
		movw   $0x8ad0,palette_brightness
	jump_3d64f:
		mov    data_1a730e,%eax
		sar    $0x10,%eax
		cmp    $0x7530,%eax
		jle    jump_3d667
		movw   $0x7530,palette_brightness
	jump_3d667:
		mov    $0x3f,%ebp
		xor    %ebx,%ebx
		xor    %edi,%edi
		jmp    jump_3d675
	jump_3d672:
		add    $0x3,%ebx
	jump_3d675:
		xor    %eax,%eax
		mov    %bx,%ax
		cmp    $0x300,%eax
		jge    jump_3d6cd
		mov    %edi,%edx
		jmp    jump_3d686
	jump_3d685:
		inc    %edx
	jump_3d686:
		xor    %eax,%eax
		mov    %dx,%ax
		cmp    $0x3,%eax
		jge    jump_3d672
		xor    %ecx,%ecx
		mov    %bx,%cx
		add    %ecx,%eax
		add    %esi,%eax
		mov    palette_brightness,%cl
		mov    (%eax),%ch
		add    %cl,%ch
		mov    %ch,(%eax)
		movsbl %ch,%ecx
		test   %ecx,%ecx
		jge    jump_3d6af
		movb   $0x0,(%eax)
	jump_3d6af:
		xor    %ecx,%ecx
		xor    %eax,%eax
		mov    %bx,%cx
		mov    %dx,%ax
		add    %ecx,%eax
		mov    %esi,%ecx
		add    %esi,%eax
		xor    %esi,%ecx
		mov    (%eax),%cl
		cmp    $0x3f,%ecx
		jle    jump_3d685
		movb   $0x3f,(%eax)
		jmp    jump_3d685
	jump_3d6cd:
		push   %esi
		mov    %esi,display_palette
		call   ac_LbPaletteSet
		mov    display_palette,%esi
		add    $0x4,%esp
		add    $0x64,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_set_default_brightness)	/* 0x03D6EC */
/*----------------------------------------------------------------*/
		mov    brightness,%ax
		mov    %ax,palette_brightness
		xor    %eax,%eax
		jmp    ac_change_brightness


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_read_palette_file)	/* 0x03D700 */
/*----------------------------------------------------------------*/
		push   %edx
		sub    $0x64,%esp
		push   $0x3
		mov    palette_fname_fmt,%edx
		push   %edx
		lea    0x8(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
		mov    %esp,%eax
		mov    display_palette,%edx
		call   ac_LbFileLoadAt
		add    $0x64,%esp
		pop    %edx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_func_3d904)	/* 0x3d904 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		xor    %esi,%esi
		jmp    jump_3d9be
	jump_3d914:
		call   ac_LbRandomAnyShort
		mov    %eax,%edi
		mov    gameturn,%edx
		and    $0xffff,%edi
		shr    $0x2,%edx
		add    %edx,%edi
		xor    %eax,%eax
		and    $0xffff,%edi
		mov    %di,%ax
		sar    $0x3,%eax
		mov    %eax,%edx
		xor    %ah,%dh
		and    $0x7,%dl
		and    $0xffff,%eax
		xor    %ecx,%ecx
		mov    EXPORT_SYMBOL(byte_1A7EE8)(%eax),%cl
		mov    $0x1,%ebp
		mov    %ecx,(%esp)
		mov    %edx,%ecx
		shl    %cl,%ebp
		mov    %ebp,%ecx
		test   %ecx,(%esp)
		jne    jump_3d9bd
		mov    %edi,%ecx
		mov    %di,EXPORT_SYMBOL(word_1A7330)(,%ebx,2)
		mov    EXPORT_SYMBOL(vec_tmap),%edi
		and    $0xffff,%ecx
		mov    (%ecx,%edi,1),%dh
		mov    %dh,EXPORT_SYMBOL(byte_1A7B00)(%ebx)
		movb   $0x3f,(%ecx,%edi,1)
		mov    %dl,%cl
		mov    $0x1,%dl
		shl    %cl,%dl
		or     %dl,EXPORT_SYMBOL(byte_1A7EE8)(%eax)
		jmp    jump_3d9bd
	jump_3d992:
		mov    $0x14d,%ecx
		mov    %ebx,%edx
		mov    %ebx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %eax,%edx
		mov    $0x3,%ecx
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %edx,%eax
		cmp    $0x1,%dx
		jae    jump_3d9bd
		test   %dx,%dx
		je     jump_3d914
	jump_3d9bd:
		inc    %esi
	jump_3d9be:
		xor    %ebx,%ebx
		mov    %si,%bx
		cmp    $0x3e7,%ebx
		jl     jump_3d992
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_game_process_sub08)	/* 0x3D9D8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		xor    %esi,%esi
		jmp    jump_3db78
	jump_3d9e5:
		mov    EXPORT_SYMBOL(word_1A7330)(%edx),%ax
		xor    %edx,%edx
		mov    %ax,%dx
		test   %edx,%edx
		je     jump_3da05
		mov    EXPORT_SYMBOL(vec_tmap),%ecx
		add    %edx,%ecx
		mov    EXPORT_SYMBOL(byte_1A7B00)(%ebx),%dl
		mov    %dl,(%ecx)
	jump_3da05:
		and    $0xffff,%eax
		sar    $0x3,%eax
		mov    $0x1,%dl
		mov    %eax,%ecx
		mov    %eax,%ebx
		xor    %eax,%eax
		and    $0x7,%bl
		mov    %cx,%ax
		mov    %bl,%cl
		shl    %cl,%dl
		not    %dl
		and    %dl,EXPORT_SYMBOL(byte_1A7EE8)(%eax)
		call   ac_LbRandomAnyShort
		mov    gameturn,%edx
		and    $0xffff,%eax
		shr    $0x2,%edx
		add    %edx,%eax
		and    $0xffff,%eax
		xor    %edx,%edx
		mov    %ax,%dx
		sar    $0x3,%edx
		mov    %edx,%ebx
		mov    %edx,%ecx
		xor    %dh,%bh
		xor    %edx,%edx
		and    $0x7,%bl
		mov    %cx,%dx
		mov    $0x1,%ebp
		mov    %ebx,%ecx
		movzbl EXPORT_SYMBOL(byte_1A7EE8)(%edx),%edi
		shl    %cl,%ebp
		test   %ebp,%edi
		jne    jump_3db77
		xor    %ecx,%ecx
		mov    %si,%cx
		mov    %ax,EXPORT_SYMBOL(word_1A7330)(,%ecx,2)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(vec_tmap),%edi
		mov    EXPORT_SYMBOL(word_1A7330)(,%ecx,2),%ax
		mov    (%edi,%eax,1),%bh
		mov    %bh,EXPORT_SYMBOL(byte_1A7B00)(%ecx)
		xor    %ecx,%ecx
		mov    %bh,%cl
		mov    EXPORT_SYMBOL(pixmap)+0x3200(%ecx),%bh # pixmap.fade_table[0x3200+?]
		mov    %bl,%cl
		mov    %bh,(%edi,%eax,1)
		mov    $0x1,%al
		mov    EXPORT_SYMBOL(byte_1A7EE8)(%edx),%bl
		shl    %cl,%al
		or     %al,%bl
		mov    %bl,EXPORT_SYMBOL(byte_1A7EE8)(%edx)
		jmp    jump_3db77
	jump_3dabb:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(word_1A7330)(%edx),%ax
		test   %eax,%eax
		je     jump_3db77
		mov    EXPORT_SYMBOL(vec_tmap),%edx
		add    %edx,%eax
		xor    %edx,%edx
		xor    %ecx,%ecx
		mov    EXPORT_SYMBOL(byte_1A7B00)(%ebx),%dl
		mov    (%eax),%cl
		shl    $0x8,%edx
		mov    EXPORT_SYMBOL(lbDisplay)+8,%ebx # lbDisplay.GlassMap
		add    %ecx,%edx
		mov    (%edx,%ebx,1),%dl
		mov    %dl,(%eax)
		jmp    jump_3db77
	jump_3daf5:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(word_1A7330)(%edx),%ax
		test   %eax,%eax
		je     jump_3db77
		mov    EXPORT_SYMBOL(vec_tmap),%edx
		add    %edx,%eax
		xor    %edx,%edx
		xor    %ecx,%ecx
		mov    EXPORT_SYMBOL(byte_1A7B00)(%ebx),%dl
		mov    (%eax),%cl
		shl    $0x8,%edx
		add    %edx,%ecx
		mov    EXPORT_SYMBOL(lbDisplay)+8,%edx # lbDisplay.GlassMap
		mov    (%ecx,%edx,1),%dl
		mov    %dl,(%eax)
		jmp    jump_3db77
	jump_3db2c:
		mov    $0x14d,%ecx
		mov    %ebx,%edx
		mov    %ebx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		xor    %edx,%edx
		mov    data_1a7314,%dx
		add    %eax,%edx
		mov    $0x3,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %edx,%eax
		lea    0x0(,%ebx,2),%edx
		cmp    $0x1,%ax
		jb     jump_3db6e
		jbe    jump_3dabb
		cmp    $0x2,%ax
		je     jump_3daf5
		jmp    jump_3db77
	jump_3db6e:
		test   %ax,%ax
		je     jump_3d9e5
	jump_3db77:
		inc    %esi
	jump_3db78:
		xor    %ebx,%ebx
		mov    %si,%bx
		cmp    $0x3e7,%ebx
		jl     jump_3db2c
		incw   data_1a7314
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_joy_input)	/* 0x3DC68 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		mov    $joy_Yaw,%eax
		xor    %edx,%edx
		call   ac_joy_func_065
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		cmpb   $0x0,data_1a63ae(%eax)
		je     jump_3dcad
		mov    EXPORT_SYMBOL(ingame)+0x000,%eax # ingame.GameMode
		sar    $0x10,%eax
		cmp    $0x37,%eax
		jne    jump_3dd15
	jump_3dcad:
		mov    joy_NumberOfDevices,%ecx
		xor    %edx,%edx
		xor    %ebx,%ebx
		test   %ecx,%ecx
		jle    jump_3dd6c
		xor    %eax,%eax
	jump_3dcc1:
		cmpb   $0x0,joy_Init(%edx)
		je     jump_3dd05
		mov    joy_Buttons,%esi
		mov    joy_Buttons(%eax),%ecx
		or     %ecx,%esi
		mov    %esi,joy_Buttons
		mov    joy_DigitalX,%edi
		mov    joy_DigitalX(%eax),%ecx
		or     %ecx,%edi
		mov    %edi,joy_DigitalX
		mov    joy_DigitalY,%ebp
		or     joy_DigitalY(%eax),%ebp
		inc    %ebx
		mov    %ebp,joy_DigitalY
	jump_3dd05:
		mov    joy_NumberOfDevices,%ecx
		add    $0x4,%eax
		inc    %edx
		cmp    %ecx,%ebx
		jge    jump_3dd6c
		jmp    jump_3dcc1
	jump_3dd15:
		cmp    $0x32,%eax
		jne    jump_3dd6c
		mov    joy_NumberOfDevices,%ebx
		xor    %edx,%edx
		xor    %eax,%eax
		test   %ebx,%ebx
		jle    jump_3dd6c
		xor    %ebx,%ebx
	jump_3dd2a:
		cmpb   $0x0,joy_Init(%edx)
		je     jump_3dd5e
		xor    %esi,%esi
		xor    %ecx,%ecx
		mov    EXPORT_SYMBOL(jskeys)+6,%si
		mov    EXPORT_SYMBOL(jskeys)+8,%cx
		mov    joy_Buttons(%ebx),%edi
		or     %esi,%ecx
		mov    joy_Buttons,%ebp
		and    %edi,%ecx
		or     %ecx,%ebp
		inc    %eax
		mov    %ebp,joy_Buttons
	jump_3dd5e:
		mov    joy_NumberOfDevices,%esi
		add    $0x4,%ebx
		inc    %edx
		cmp    %esi,%eax
		jl     jump_3dd2a
	jump_3dd6c:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_input)	/* 0x3DE08 */
/*----------------------------------------------------------------*/
		push   %edx
		mov    EXPORT_SYMBOL(lbShift),%dl
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+42
		jne    jump_3de21
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+54
		je     jump_3de26
	jump_3de21:
		or     $0x1,%dl
		jmp    jump_3de29
	jump_3de26:
		and    $0xfe,%dl
	jump_3de29:
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+29
		jne    jump_3de3b
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+157
		je     jump_3de40
	jump_3de3b:
		or     $0x2,%dl
		jmp    jump_3de43
	jump_3de40:
		and    $0xfd,%dl
	jump_3de43:
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+184
		jne    jump_3de55
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+56
		je     jump_3de5a
	jump_3de55:
		or     $0x4,%dl
		jmp    jump_3de5d
	jump_3de5a:
		and    $0xfb,%dl
	jump_3de5d:
		mov    %dl,EXPORT_SYMBOL(lbShift)
		pop    %edx
		ret


/*----------------------------------------------------------------*/
ASM_debug_check_unkn_sprite_size:	/* 0x03DF58 */
/*----------------------------------------------------------------*/
		mov    EXPORT_SYMBOL(sprite_over_16x16),%edx
		test   %edx,%edx
		jne    jump_3df8c
		mov    m_sprites,%eax
		mov    0x1b28(%eax),%dl
		cmp    $0x10,%edx
		jg     jump_3df82
		mov    0x1b29(%eax),%al
		and    $0xff,%eax
		cmp    $0x10,%eax
		jle    jump_3df8c
	jump_3df82:
		movl   $0x1,EXPORT_SYMBOL(sprite_over_16x16)
	jump_3df8c:
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_player_chat_message_add_key)	/* 0x3E580 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    %eax,%ebx
		xor    %eax,%eax
		mov    %bx,%ax
		cmpb   $0x0,player_unkn0C9(%eax)
		je     jump_3e5a8
		xor    %ch,%ch
		mov    %ch,player_unkn0C9(%eax)
		shl    $0x7,%eax
		mov    %ch,player_unknCC9(%eax)
	jump_3e5a8:
		xor    %esi,%esi
		mov    %bx,%si
		mov    %esi,%eax
		mov    $player_unknCC9,%edi
		shl    $0x7,%eax
		add    %eax,%edi
		mov    %eax,(%esp)
		sub    %ecx,%ecx
		dec    %ecx
		xor    %eax,%eax
		repnz scas %es:(%edi),%al
		not    %ecx
		dec    %ecx
		xor    %edi,%edi
		mov    %dx,%di
		mov    %ecx,%eax
		and    $0x100,%edi
		and    $0xfe,%dh
		and    $0xffff,%edx
		cmp    $0xe,%edx
		jne    jump_3e5fe
		test   %ecx,%ecx
		jle    jump_3e71e
		mov    (%esp),%esi
		lea    -0x1(%ecx),%eax
		add    %esi,%eax
		xor    %bh,%bh
		mov    %bh,player_unknCC9(%eax)
		jmp    jump_3e71e
	jump_3e5fe:
		cmp    $0x1c,%edx
		jne    jump_3e666
		test   %edi,%edi
		je     jump_3e61c
		xor    %ecx,%eax
		mov    EXPORT_SYMBOL(local_player_no),%al
		mov    EXPORT_SYMBOL(byte_1C5C30)(%esi),%cl
		cmp    EXPORT_SYMBOL(byte_1C5C30)(%eax),%cl
		jne    jump_3e623
	jump_3e61c:
		movb   $0x96,player_unkn0C9(%esi)
	jump_3e623:
		xor    %eax,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%al
		mov    %bx,%dx
		cmp    %eax,%edx
		jne    jump_3e71e
		lea    0x0(,%eax,8),%edx
		add    %eax,%edx
		shl    $0x3,%edx
		sub    %eax,%edx
		add    %edx,%edx
		mov    %edx,%eax
		shl    $0x2,%edx
		sub    %eax,%edx
		xor    %eax,%eax
		mov    mouser,%al
		xor    %bl,%bl
		mov    %bl,data_1a6390(%edx,%eax,1)
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_3e666:
		test   %edi,%edi
		je     jump_3e674
		xor    %ecx,%eax
		mov    EXPORT_SYMBOL(lbInkeyToAscii)+128(%edx),%al
		jmp    jump_3e67c
	jump_3e674:
		xor    %ecx,%eax
		mov    EXPORT_SYMBOL(lbInkeyToAscii)(%edx),%al
	jump_3e67c:
		call   ac_toupper
		mov    %eax,%edx
		cmp    $0x41,%edx
		jl     jump_3e691
		cmp    $0x5a,%edx
		jle    jump_3e700
	jump_3e691:
		cmp    $0x30,%edx
		jl     jump_3e69f
		cmp    $0x39,%edx
		jle    jump_3e700
	jump_3e69f:
		cmp    $0x2e,%edx
		je     jump_3e700
		cmp    $0x2c,%edx
		je     jump_3e700
		cmp    $0x2d,%edx
		je     jump_3e700
		cmp    $0x3d,%edx
		je     jump_3e700
		cmp    $0x21,%edx
		je     jump_3e700
		cmp    $0x22,%edx
		je     jump_3e700
		cmp    $0x3f,%edx
		je     jump_3e700
		cmp    $0x28,%edx
		je     jump_3e700
		cmp    $0x29,%edx
		je     jump_3e700
		cmp    $0x2a,%edx
		je     jump_3e700
		cmp    $0x23,%edx
		je     jump_3e700
		cmp    $0x7e,%edx
		je     jump_3e700
		cmp    $0x2b,%edx
		je     jump_3e700
		cmp    $0x3a,%edx
		je     jump_3e700
		cmp    $0x3b,%edx
		je     jump_3e700
		cmp    $0x27,%edx
		je     jump_3e700
		cmp    $0x20,%edx
		jne    jump_3e71e
	jump_3e700:
		cmp    $0x7f,%ecx
		jne    jump_3e706
		dec    %ecx
	jump_3e706:
		xor    %eax,%eax
		mov    %bx,%ax
		shl    $0x7,%eax
		mov    %dl,player_unknCC9(%ecx,%eax,1)
		xor    %dl,%dl
		mov    %dl,data_180cca(%ecx,%eax,1)
	jump_3e71e:
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_process_packets)	/* 0x3E728 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		mov    %esp,%ebp
		sub    $0x34,%esp
		movl   $packets,-0x30(%ebp)
		xor    %edx,%edx
		mov    pktrec_mode,%al
		mov    %dx,-0xc(%ebp)
		test   %al,%al
		jbe    jump_3e769
		cmp    $0x2,%al
		jbe    jump_3e772
	jump_3e74d:
		cmpb   $0x0,in_network_game
		je     jump_3e78c
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(net_players_num),%al
		cmp    $0x1,%eax
		jle    jump_3e78c
		call   ac_net_unkn_check_1
		jmp    jump_3e78c
	jump_3e769:
		movl   $0x4,-0x10(%ebp)
		jmp    jump_3e74d
	jump_3e772:
		movl   $0x1,-0x10(%ebp)
		jmp    jump_3e74d
	jump_3e77b:
		mov    -0x30(%ebp),%ebx
		mov    -0xc(%ebp),%esi
		add    $0x30,%ebx
		inc    %esi
		mov    %ebx,-0x30(%ebp)
		mov    %si,-0xc(%ebp)
	jump_3e78c:
		xor    %eax,%eax
		mov    -0xc(%ebp),%ax
		cmp    $0x8,%eax
		jge    jump_3fdbf
		mov    %eax,%ecx
		xor    %edx,%edx
		mov    $0x1,%eax
		mov    ingame__InNetGame_UNSURE,%dl
		shl    %cl,%eax
		test   %eax,%edx
		je     jump_3e77b
		mov    -0x30(%ebp),%edi
		mov    -0xc(%ebp),%cl
		mov    $0x1,%al
		xor    %ebx,%ebx
		shl    %cl,%al
		mov    %ebx,-0x24(%ebp)
		mov    %al,-0x4(%ebp)
		jmp    jump_3fd27
	jump_3e7c7:
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		andb   $0xf7,0xd(%edx,%eax,1)
	jump_3e7de:
		mov    (%edi),%ax
		and    $0x7f,%ah
		and    $0xffff,%eax
		cmp    $0x22,%eax
		jb     jump_3f9f3
		jbe    jump_3efc6
		cmp    $0x2f,%eax
		jb     jump_3f89c
		jbe    jump_3eab0
		cmp    $0x36,%eax
		jb     jump_3f714
		jbe    jump_3f342
		cmp    $0x39,%eax
		jb     jump_3f6d9
		jbe    jump_3eae2
		cmp    $0x3b,%eax
		jb     jump_3f3d2
		jbe    jump_3f41e
		cmp    $0xff,%eax
		je     jump_3f66b
		jmp    jump_3fd18
	jump_3e844:
		xor    %eax,%eax
		xor    %edx,%edx
		mov    -0xc(%ebp),%ax
		mov    0x2(%edi),%dx
		call   ac_player_chat_message_add_key
		jmp    jump_3fd18
	jump_3e85a:
		cmpb   $0x0,in_network_game
		je     jump_3e965
		xor    %eax,%eax
		mov    -0xc(%ebp),%ax
		xor    %edx,%edx
		call   ac_kill_my_players
		xor    %eax,%eax
		mov    net_host_player_no,%dl
		mov    -0xc(%ebp),%ax
		cmp    %eax,%edx
		je     jump_3e8a3
		xor    %eax,%eax
		xor    %edx,%edx
		mov    -0xc(%ebp),%ax
		mov    EXPORT_SYMBOL(local_player_no),%dl
		cmp    %edx,%eax
		je     jump_3e8a3
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(word_1811AE),%ax
		cmp    $0x1,%eax
		je     jump_3e8f9
	jump_3e8a3:
		mov    $0x37,%esi
		xor    %edx,%edx
		mov    %si,ingame__DisplayMode
		call   ac_StopCD
		call   ac_StopAllSamples
		mov    $0x64,%eax
		call   ac_SetMusicVolume
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(local_player_no),%al
		call   ac_LbNetworkSessionStop
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(word_1811AE),%ax
		cmp    $0x1,%eax
		je     jump_3fd18
		cmpb   $0x0,EXPORT_SYMBOL(byte_1C4A6F)
		je     jump_3fd18
		call   ac_LbNetworkHangUp
		jmp    jump_3fd18
	jump_3e8f9:
		mov    EXPORT_SYMBOL(gui_strings)+0xF00,%eax # gui_strings[GSTR_NET_LEFT_GAME]
		push   %eax
		xor    %eax,%eax
		mov    -0xc(%ebp),%ax
		mov    $unkn2_names,%edx
		shl    $0x4,%eax
		add    %edx,%eax
		push   %eax
		mov    $ascSS,%eax
		push   %eax
		xor    %eax,%eax
		mov    -0xc(%ebp),%ax
		mov    $player_unknCC9,%edx
		shl    $0x7,%eax
		mov    EXPORT_SYMBOL(net_players_num),%cl
		add    %edx,%eax
		dec    %cl
		push   %eax
		mov    %cl,EXPORT_SYMBOL(net_players_num)
		call   ac_sprintf
		xor    %eax,%eax
		mov    -0xc(%ebp),%ax
		movb   $0x96,player_unkn0C9(%eax)
		xor    %eax,%eax
		add    $0x10,%esp
		mov    -0xc(%ebp),%ax
		call   ac_LbNetworkSessionStop
		mov    -0x4(%ebp),%al
		not    %al
		and    %al,ingame__InNetGame_UNSURE
		jmp    jump_3fd18
	jump_3e965:
		movb   $0x1,exit_game
		jmp    jump_3fd18
	jump_3e971:
		xor    %edx,%edx
		xor    %eax,%eax
		mov    -0xc(%ebp),%dx
		mov    EXPORT_SYMBOL(local_player_no),%al
		cmp    %eax,%edx
		jne    jump_3e98c
		mov    $0x1,%eax
		call   ac_show_goto_point
	jump_3e98c:
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %edx,%eax
		andb   $0xfb,0x80(%eax)
		mov    0x6(%edi),%ecx
		xor    %edx,%edx
		mov    0x4(%edi),%ebx
		mov    -0xc(%ebp),%dx
		sar    $0x10,%ecx
		push   %edx
		mov    0x2(%edi),%edx
		sar    $0x10,%ebx
		sar    $0x10,%edx
		call   ac_thing_goto_point_fast
		jmp    jump_3fd18
	jump_3e9ca:
		xor    %edx,%edx
		xor    %eax,%eax
		mov    -0xc(%ebp),%dx
		mov    EXPORT_SYMBOL(local_player_no),%al
		cmp    %eax,%edx
		jne    jump_3e9e5
		mov    $0x1,%eax
		call   ac_show_goto_point
	jump_3e9e5:
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %edx,%eax
		andb   $0xfb,0x80(%eax)
		mov    0x6(%edi),%ecx
		mov    0x4(%edi),%ebx
		mov    0x2(%edi),%edx
		sar    $0x10,%ecx
		sar    $0x10,%ebx
		sar    $0x10,%edx
		call   ac_thing_goto_point
		jmp    jump_3fd18
	jump_3ea1c:
		xor    %edx,%edx
		xor    %eax,%eax
		mov    -0xc(%ebp),%dx
		mov    EXPORT_SYMBOL(local_player_no),%al
		cmp    %eax,%edx
		jne    jump_3ea37
		mov    $0x1,%eax
		call   ac_show_goto_point
	jump_3ea37:
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %edx,%eax
		mov    0x80(%eax),%ch
		xor    %edx,%edx
		and    $0xfb,%ch
		mov    -0xc(%ebp),%dx
		mov    %ch,0x80(%eax)
		push   %edx
		mov    0x4(%edi),%ecx
		mov    0x6(%edi),%ebx
		mov    0x2(%edi),%edx
		sar    $0x10,%ecx
		sar    $0x10,%ebx
		sar    $0x10,%edx
		call   ac_thing_goto_point_on_face_fast
		jmp    jump_3fd18
	jump_3ea7d:
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		mov    0x6(%edi),%ecx
		mov    0x4(%edi),%ebx
		add    %edx,%eax
		xor    %edx,%edx
		sar    $0x10,%ecx
		push   %edx
		mov    0x2(%edi),%edx
		sar    $0x10,%ebx
		sar    $0x10,%edx
		call   ac_thing_shoot_at_point
		jmp    jump_3fd18
	jump_3eab0:
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa8,%eax,%eax
		push   $0x1
		mov    things,%edx
		mov    0x6(%edi),%ecx
		mov    0x4(%edi),%ebx
		sar    $0x10,%ecx
		add    %edx,%eax
		mov    0x2(%edi),%edx
		sar    $0x10,%ebx
		sar    $0x10,%edx
		call   ac_thing_shoot_at_point
		jmp    jump_3fd18
	jump_3eae2:
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa8,%eax,%eax
		push   $0x3
		mov    things,%edx
		mov    0x6(%edi),%ecx
		mov    0x4(%edi),%ebx
		sar    $0x10,%ecx
		add    %edx,%eax
		mov    0x2(%edi),%edx
		sar    $0x10,%ebx
		sar    $0x10,%edx
		call   ac_thing_shoot_at_point
		jmp    jump_3fd18
	jump_3eb14:
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa8,%eax,%edx
		mov    0x6(%edi),%ecx
		mov    things,%eax
		mov    0x4(%edi),%ebx
		lea    (%eax,%edx,1),%esi
		sar    $0x10,%ecx
		xor    %eax,%eax
		sar    $0x10,%ebx
		mov    -0xc(%ebp),%ax
		mov    0x2(%edi),%edx
		push   %eax
		sar    $0x10,%edx
		mov    %esi,%eax
		call   ac_thing_goto_point_rel_fast
		jmp    jump_3fd18
	jump_3eb4d:
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa8,%eax,%eax
		mov    things,%ebx
		xor    %edx,%edx
		add    %eax,%ebx
		mov    -0xc(%ebp),%dx
		mov    %ebx,%eax
		call   ac_call_protect
		xor    %edx,%edx
		mov    %ebx,%eax
		mov    -0xc(%ebp),%dx
		call   ac_count_protect
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    -0xc(%ebp),%bx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		cmp    %edx,%ebx
		jne    jump_3fd18
		xor    %edx,%edx
		mov    %ax,%dx
		test   %edx,%edx
		jle    jump_3fd18
		mov    $0x3,%edx
		push   %edx
		xor    %edx,%edx
		push   %edx
		and    $0xffff,%eax
		lea    (%eax,%eax,4),%eax
		mov    $0x40,%ecx
		add    $0x5a,%eax
		mov    $0x7f,%ebx
		push   %eax
		mov    $0x3d,%edx
		xor    %eax,%eax
		call   ac_play_sample_using_heap
		jmp    jump_3fd18
	jump_3ebce:
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa8,%eax,%eax
		mov    things,%ecx
		xor    %ebx,%ebx
		xor    %edx,%edx
		add    %eax,%ecx
		mov    -0xc(%ebp),%dx
		mov    %ecx,%eax
		call   ac_call_unprotect
		xor    %edx,%edx
		mov    %ecx,%eax
		mov    -0xc(%ebp),%dx
		xor    %ebx,%ebx
		call   ac_count_protect
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%bl
		mov    -0xc(%ebp),%dx
		cmp    %ebx,%edx
		jne    jump_3fd18
		xor    %ebx,%edx
		mov    %ax,%dx
		test   %edx,%edx
		jle    jump_3fd18
		mov    $0x3,%edx
		push   %edx
		xor    %edx,%edx
		push   %edx
		and    $0xffff,%eax
		lea    (%eax,%eax,4),%eax
		mov    $0x40,%ecx
		add    $0x5a,%eax
		mov    $0x7f,%ebx
		push   %eax
		mov    $0x3d,%edx
		xor    %eax,%eax
		call   ac_play_sample_using_heap
		jmp    jump_3fd18
	jump_3ec51:
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa8,%eax,%eax
		mov    things,%ebx
		add    %eax,%ebx
		xor    %eax,%eax
		mov    0xa(%ebx),%ax
		cmp    $0x8,%eax
		je     jump_3fd18
		testb  $0x10,0x44(%ebx)
		jne    jump_3fd18
		xor    %eax,%eax
		mov    $0x1,%edx
		mov    0x2(%edi),%ax
		call   ac_select_new_weapon
		mov    %al,0x99(%ebx)
		mov    %ebx,%eax
		xor    %edx,%edx
		call   ac_peep_change_weapon
		mov    %ebx,%eax
		call   ac_gun_out_anim
		xor    %edx,%edx
		mov    0x8(%ebx),%dl
		imul   $0x2c,%edx,%edx
		mov    %al,0x6c(%ebx)
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		add    %eax,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    0x57(%ebx),%al
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		mov    %ax,0x24(%ebx)
		xor    %eax,%eax
		mov    0x8(%ebx),%al
		imul   $0x2c,%eax,%edx
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		dec    %eax
		mov    %ax,0x26(%ebx)
		mov    %ebx,%eax
		call   calc_person_speed
		mov    %ax,0x38(%ebx)
		xor    %eax,%eax
		mov    0x99(%ebx),%al
		xor    %edx,%edx
		mov    %ax,0x9e(%ebx)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(local_player_no),%dl
		mov    -0xc(%ebp),%ax
		cmp    %edx,%eax
		jne    jump_3fd18
		cmpb   $0x0,0x99(%ebx)
		je     jump_3fd18
		xor    %eax,%eax
		mov    background_type,%al
		cmp    $0x1,%eax
		jne    jump_3ed81
		mov    $0x3,%eax
		mov    $0x40,%ecx
		xor    %edx,%edx
		push   %eax
		xor    %eax,%eax
		mov    0x99(%ebx),%dl
		push   %eax
		mov    $0x64,%eax
		mov    EXPORT_SYMBOL(weapon_sound_z)(%edx),%dl
		push   %eax
		mov    $0x7f,%eax
		xor    %dh,%dh
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(local_player_no),%bl
		and    $0xffff,%edx
		movswl %bx,%esi
		mov    %eax,%ebx
		mov    %esi,%eax
		call   ac_play_disk_sample
		jmp    jump_3fd18
	jump_3ed81:
		mov    $0x3,%eax
		mov    $0x40,%ecx
		xor    %edx,%edx
		push   %eax
		xor    %eax,%eax
		mov    0x99(%ebx),%dl
		push   %eax
		mov    $0x64,%eax
		mov    EXPORT_SYMBOL(weapon_sound)(%edx),%dl
		push   %eax
		mov    $0x7f,%eax
		xor    %dh,%dh
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(local_player_no),%bl
		and    $0xffff,%edx
		movswl %bx,%esi
		mov    %eax,%ebx
		mov    %esi,%eax
		call   ac_play_disk_sample
		jmp    jump_3fd18
	jump_3edc9:
		mov    $0x3,%eax
		push   %eax
		xor    %eax,%eax
		push   %eax
		mov    $0x64,%eax
		push   %eax
		xor    %eax,%eax
		mov    0x99(%ecx),%al
		mov    $0x40,%edx
		mov    $0x7f,%ebx
		mov    EXPORT_SYMBOL(weapon_sound)(%eax),%al
		xor    %ah,%ah
		xor    %esi,%esi
		mov    %edx,%ecx
		mov    %ax,%si
		mov    EXPORT_SYMBOL(local_player_no),%al
		mov    %esi,%edx
		cwtl
		call   ac_play_disk_sample
		jmp    jump_3fd18
	jump_3ee0b:
		xor    %edx,%edx
		mov    %esi,%eax
		mov    0x99(%esi),%dl
		mov    -0x1c(%ebp),%ecx
		call   ac_stop_looped_weapon_sample
		cmp    $0x1,%ecx
		jne    jump_3ee92
		cmpb   $0x0,0x99(%esi)
		je     jump_3ee57
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		sar    $0x2,%eax
		imul   $0x1aa,%eax,%edx
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		add    %eax,%edx
		mov    0x99(%esi),%al
		mov    %al,data_1a638c(%edx)
		jmp    jump_3ee89
	jump_3ee57:
		xor    %eax,%eax
		mov    %ecx,%edx
		mov    0x16(%esi),%ax
		call   ac_find_nth_weapon_held
		xor    %edx,%edx
		mov    0x54(%esi),%dx
		sar    $0x2,%edx
		imul   $0x1aa,%edx,%ebx
		mov    0x54(%esi),%dx
		xor    %dh,%dh
		and    $0x3,%dl
		and    $0xffff,%edx
		mov    %al,data_1a638c(%edx,%ebx,1)
	jump_3ee89:
		movb   $0x0,0x99(%esi)
		jmp    jump_3eebb
	jump_3ee92:
		mov    0x9e(%esi),%cx
		test   %cx,%cx
		je     jump_3eeaf
		mov    -0x1c(%ebp),%ebx
		xor    %edx,%edx
		mov    %esi,%eax
		mov    %cx,%dx
		call   ac_thing_select_specific_weapon
		jmp    jump_3eebb
	jump_3eeaf:
		mov    $0x500,%edx
		mov    %esi,%eax
		call   ac_choose_best_weapon_for_range
	jump_3eebb:
		mov    %esi,%eax
		xor    %edx,%edx
		call   ac_gun_out_anim
		mov    %al,0x6c(%esi)
		xor    %eax,%eax
		mov    0x8(%esi),%al
		imul   $0x2c,%eax,%eax
		xor    %edx,%edx
		mov    0x6c(%esi),%dl
		mov    EXPORT_SYMBOL(people_frames)(%eax,%edx,2),%dx
		xor    %eax,%eax
		and    $0xffff,%edx
		mov    0x57(%esi),%al
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		xor    %edx,%edx
		mov    0x8(%esi),%dl
		imul   $0x2c,%edx,%edx
		mov    %ax,0x24(%esi)
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		dec    %eax
		mov    %ax,0x26(%esi)
		mov    %esi,%eax
		call   calc_person_speed
		mov    %ax,0x38(%esi)
		xor    %eax,%eax
		mov    0x99(%esi),%al
		mov    %ax,0x9e(%esi)
	jump_3ef2b:
		mov    -0x14(%ebp),%esi
		mov    -0x2c(%ebp),%eax
		add    $0x4,%esi
		inc    %eax
		mov    %esi,-0x14(%ebp)
		mov    %eax,-0x2c(%ebp)
	jump_3ef3b:
		xor    %eax,%eax
		mov    -0x2c(%ebp),%ebx
		mov    EXPORT_SYMBOL(playable_agents),%al
		cmp    %ebx,%eax
		jbe    jump_3fd18
		xor    %eax,%eax
		mov    -0xc(%ebp),%ax
		imul   $0x1aa,%eax,%eax
		mov    -0x14(%ebp),%esi
		mov    EXPORT_SYMBOL(players)+0x09C(%esi,%eax,1),%esi # players[0].MyAgent[0]
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0x2b,%eax
		jne    jump_3ef7b
		mov    -0x20(%ebp),%edx
		mov    0x3c(%esi),%ax
		cmp    0x16(%edx),%ax
		je     jump_3ef80
	jump_3ef7b:
		cmp    -0x20(%ebp),%esi
		jne    jump_3ef2b
	jump_3ef80:
		cmp    -0x34(%ebp),%esi
		je     jump_3ef2b
		mov    0x2(%edi),%ecx
		sar    $0x10,%ecx
		mov    $0x1,%eax
		dec    %ecx
		mov    0xa4(%esi),%edx
		shl    %cl,%eax
		test   %edx,%eax
		je     jump_3ee0b
		mov    -0x1c(%ebp),%ebx
		cmp    $0x1,%ebx
		je     jump_3ee0b
		mov    %esi,%eax
		call   ac_peep_change_weapon
		xor    %edx,%edx
		mov    %esi,%eax
		mov    0x4(%edi),%dx
		call   ac_thing_select_specific_weapon
		jmp    jump_3eebb
	jump_3efc6:
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa8,%eax,%eax
		mov    things,%ebx
		add    %eax,%ebx
		xor    %eax,%eax
		mov    0xa(%ebx),%ax
		cmp    $0x8,%eax
		je     jump_3fd18
		testb  $0x10,0x44(%ebx)
		jne    jump_3fd18
		mov    0x2(%edi),%edx
		xor    %eax,%eax
		sar    $0x10,%edx
		mov    0x99(%ebx),%al
		cmp    %eax,%edx
		jne    jump_3f053
		xor    %eax,%eax
		mov    0x8(%ebx),%al
		imul   $0x2c,%eax,%edx
		movb   $0x0,0x6c(%ebx)
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%dx
		xor    %eax,%eax
		and    $0xffff,%edx
		mov    0x57(%ebx),%al
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		mov    %ax,0x24(%ebx)
		xor    %eax,%eax
		mov    0x8(%ebx),%al
		imul   $0x2c,%eax,%eax
		xor    %edx,%edx
		mov    0x6c(%ebx),%dl
		mov    EXPORT_SYMBOL(people_frames)(%eax,%edx,2),%ax
		dec    %eax
		mov    %ax,0x26(%ebx)
	jump_3f053:
		xor    %eax,%eax
		mov    0xa(%ebx),%ax
		cmp    $0x2b,%eax
		jne    jump_3f062
		orb    $0x10,0x47(%ebx)
	jump_3f062:
		mov    0x2(%edi),%edx
		mov    %ebx,%eax
		sar    $0x10,%edx
		call   ac_person_init_drop
		mov    %ebx,%eax
		call   calc_person_speed
		mov    %ax,0x38(%ebx)
		jmp    jump_3fd18
	jump_3f07f:
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa8,%eax,%eax
		mov    things,%ebx
		add    %eax,%ebx
		cmpb   $0x0,0x99(%ebx)
		je     jump_3fd18
		xor    %eax,%eax
		mov    0xa(%ebx),%ax
		cmp    $0x8,%eax
		je     jump_3fd18
		testb  $0x10,0x44(%ebx)
		jne    jump_3fd18
		xor    %eax,%eax
		mov    0x8(%ebx),%al
		imul   $0x2c,%eax,%edx
		movb   $0x0,0x6c(%ebx)
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		add    %eax,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    0x57(%ebx),%al
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		mov    %ax,0x24(%ebx)
		xor    %eax,%eax
		mov    0x8(%ebx),%al
		imul   $0x2c,%eax,%edx
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		dec    %eax
		mov    %ax,0x26(%ebx)
		xor    %eax,%eax
		mov    0xa(%ebx),%ax
		cmp    $0x2b,%eax
		jne    jump_3f115
		orb    $0x10,0x47(%ebx)
	jump_3f115:
		mov    %ebx,%eax
		xor    %edx,%edx
		call   ac_person_init_drop
		mov    %ebx,%eax
		call   calc_person_speed
		mov    %ax,0x38(%ebx)
		jmp    jump_3fd18
	jump_3f12e:
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		test   %eax,%eax
		jl     jump_3fdbf
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		cmp    $0x3e8,%eax
		jg     jump_3fdbf
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa8,%eax,%eax
		mov    things,%ebx
		mov    0x2(%edi),%edx
		add    %eax,%ebx
		sar    $0x10,%edx
		mov    %ebx,%eax
		call   ac_limit_mood
		mov    %ax,0x4(%edi)
		mov    %ax,0x72(%ebx)
		mov    %ebx,%eax
		call   calc_person_speed
		mov    %ax,0x38(%ebx)
		jmp    jump_3fd18
	jump_3f186:
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa8,%eax,%edx
		mov    things,%ebx
		add    %edx,%ebx
		mov    %ebx,-0x28(%ebp)
		mov    %ebx,-0x18(%ebp)
		test   %eax,%eax
		jl     jump_3fdbf
		cmp    $0x3e8,%eax
		jg     jump_3fdbf
		xor    %eax,%eax
		mov    0xa(%ebx),%ax
		cmp    $0x2b,%eax
		jne    jump_3f1d5
		xor    %eax,%eax
		mov    0x3c(%ebx),%ax
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %eax,%edx
		mov    %edx,-0x18(%ebp)
	jump_3f1d5:
		mov    0x2(%edi),%edx
		mov    -0x28(%ebp),%eax
		sar    $0x10,%edx
		call   ac_limit_mood
		mov    -0x28(%ebp),%edx
		mov    %ax,0x4(%edi)
		xor    %ebx,%ebx
		mov    %ax,0x72(%edx)
		mov    %edx,%eax
		xor    %ecx,%ecx
		call   calc_person_speed
		mov    %ax,0x38(%edx)
		jmp    jump_3f203
	jump_3f1ff:
		add    $0x4,%ecx
		inc    %ebx
	jump_3f203:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(playable_agents),%al
		cmp    %eax,%ebx
		jae    jump_3fd18
		xor    %eax,%eax
		mov    -0xc(%ebp),%ax
		imul   $0x1aa,%eax,%eax
		mov    EXPORT_SYMBOL(players)+0x09C(%ecx,%eax,1),%esi # players[0].MyAgent[0]
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0x2b,%eax
		jne    jump_3f23d
		mov    0x3c(%esi),%ax
		mov    -0x18(%ebp),%edx
		cmp    0x16(%edx),%ax
		je     jump_3f242
	jump_3f23d:
		cmp    -0x18(%ebp),%esi
		jne    jump_3f1ff
	jump_3f242:
		cmp    -0x28(%ebp),%esi
		je     jump_3f1ff
		mov    0x4(%edi),%ax
		mov    things,%edx
		mov    %ax,-0x8(%ebp)
		cmp    %edx,%esi
		jb     jump_3fd18
		lea    0x29040(%edx),%eax
		cmp    %eax,%esi
		ja     jump_3fd18
		mov    -0xa(%ebp),%edx
		mov    %esi,%eax
		sar    $0x10,%edx
		call   ac_limit_mood
		mov    %ax,0x72(%esi)
		mov    %esi,%eax
		call   calc_person_speed
		mov    %ax,0x38(%esi)
		jmp    jump_3f1ff
	jump_3f28c:
		xor    %eax,%eax
		xor    %edx,%edx
		mov    -0xc(%ebp),%ax
		mov    EXPORT_SYMBOL(local_player_no),%dl
		cmp    %edx,%eax
		jne    jump_3f2bd
		mov    $0x3,%eax
		push   %eax
		xor    %eax,%eax
		push   %eax
		mov    $0x40,%ecx
		push   $0x64
		mov    $0x7f,%ebx
		mov    $0x2,%edx
		call   ac_play_sample_using_heap
	jump_3f2bd:
		xor    %edx,%edx
		mov    0x2(%edi),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %eax,%edx
		mov    things,%eax
		shl    $0x3,%edx
		add    %edx,%eax
		mov    0x7e(%eax),%dx
		mov    %dx,0x3a(%eax)
		mov    0xa7(%eax),%dh
		test   $0x4,%dh
		je     jump_3f316
		mov    %dh,%bh
		xor    %edx,%edx
		and    $0xfb,%bh
		mov    0x99(%eax),%dl
		mov    %bh,0xa7(%eax)
		cmp    $0x1b,%edx
		jne    jump_3fdbf
		movb   $0x0,0x99(%eax)
		jmp    jump_3fdbf
	jump_3f316:
		mov    %dh,%bl
		xor    %edx,%edx
		and    $0xf7,%bl
		mov    0x99(%eax),%dl
		mov    %bl,0xa7(%eax)
		cmp    $0x1c,%edx
		jne    jump_3fdbf
		movb   $0x0,0x99(%eax)
		mov    %ebp,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_3f342:
		xor    %edx,%edx
		xor    %eax,%eax
		mov    -0xc(%ebp),%dl
		mov    0x2(%edi),%al
		call   ac_unkn_player_group_add
		mov    %ebp,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_3f35a:
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %edx,%eax
		mov    0x2(%edi),%edx
		sar    $0x10,%edx
		call   ac_person_init_pickup
		jmp    jump_3fd18
	jump_3f37e:
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		xor    %ebx,%ebx
		add    %edx,%eax
		mov    0x2(%edi),%edx
		mov    -0xc(%ebp),%bx
		sar    $0x10,%edx
		call   ac_person_init_get_item_fast
		jmp    jump_3fd18
	jump_3f3a8:
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		xor    %ebx,%ebx
		add    %edx,%eax
		mov    0x2(%edi),%edx
		mov    -0xc(%ebp),%bx
		sar    $0x10,%edx
		call   ac_person_init_get_item
		jmp    jump_3fd18
	jump_3f3d2:
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    0xa(%eax),%dx
		cmp    $0x8,%edx
		je     jump_3fd18
		testb  $0x10,0x44(%eax)
		jne    jump_3fd18
		mov    0x4(%edi),%edx
		mov    0x6(%edi),%ecx
		sar    $0x10,%edx
		xor    %ebx,%ebx
		push   %edx
		mov    0x2(%edi),%edx
		sar    $0x10,%ecx
		sar    $0x10,%edx
		call   ac_person_init_plant_mine
		jmp    jump_3fd18
	jump_3f41e:
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    0xa(%eax),%dx
		cmp    $0x8,%edx
		je     jump_3fd18
		testb  $0x10,0x44(%eax)
		jne    jump_3fd18
		mov    0x4(%edi),%edx
		mov    0x6(%edi),%ecx
		sar    $0x10,%edx
		xor    %ebx,%ebx
		push   %edx
		mov    0x2(%edi),%edx
		sar    $0x10,%ecx
		sar    $0x10,%edx
		call   ac_person_init_plant_mine_fast
		jmp    jump_3fd18
	jump_3f46a:
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    0xa(%eax),%dx
		cmp    $0x8,%edx
		je     jump_3fd18
		testb  $0x10,0x44(%eax)
		jne    jump_3fd18
		mov    0x6(%edi),%ecx
		xor    %edx,%edx
		mov    0x4(%edi),%ebx
		push   %edx
		sar    $0x10,%ecx
		mov    0x2(%edi),%edx
		sar    $0x10,%ebx
		sar    $0x10,%edx
		call   ac_person_init_plant_mine
		jmp    jump_3fd18
	jump_3f4b6:
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		testb  $0x8,0x45(%edx,%eax,1)
		jne    jump_3fd18
		mov    0x2(%edi),%eax
		sar    $0x10,%eax
		imul   $0xa8,%eax,%eax
		add    %eax,%edx
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa8,%eax,%eax
		mov    things,%ebx
		add    %ebx,%eax
		call   ac_person_init_follow_person
		jmp    jump_3fd18
	jump_3f4ff:
		xor    %edx,%edx
		mov    0x2(%edi),%dx
		imul   $0xa8,%edx,%edx
		mov    things,%eax
		testb  $0x8,0x45(%edx,%eax,1)
		jne    jump_3fd18
		mov    0x2(%edi),%eax
		sar    $0x10,%eax
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %eax,%edx
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa8,%eax,%eax
		mov    things,%ebx
		add    %ebx,%eax
		call   ac_person_enter_vehicle
		jmp    jump_3fd18
	jump_3f54d:
		xor    %eax,%eax
		mov    -0xc(%ebp),%ax
		imul   $0x1aa,%eax,%edx
		mov    0x2(%edi),%ax
		mov    %ax,EXPORT_SYMBOL(players)+0x01e(%edx) # players[0].UserInput[0].ControlMode
		jmp    jump_3fd18
	jump_3f569:
		mov    0x2(%edi),%eax
		sar    $0x10,%eax
		imul   $0xa8,%eax,%eax
		xor    %ebx,%ebx
		mov    -0xc(%ebp),%bx
		imul   $0x1aa,%ebx,%ebx
		mov    things,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    mouser,%dl
		imul   $0xa8,EXPORT_SYMBOL(players)+0x088(%ebx,%edx,4),%ebx # players[0].DirectControl[0]
		mov    things,%edx
		add    %ebx,%edx
		cmp    %edx,%eax
		je     jump_3fd18
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    -0xc(%ebp),%bx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		cmp    %edx,%ebx
		jne    jump_3f5fc
		mov    $0x3,%edx
		mov    $0x40,%ecx
		push   %edx
		xor    %edx,%edx
		mov    $0x7f,%ebx
		push   %edx
		mov    $0x64,%edx
		mov    0x8(%eax),%al
		push   %edx
		and    $0xff,%eax
		cmp    $0x1,%eax
		jne    jump_3f5eb
		mov    $0x2c,%eax
		jmp    jump_3f5f0
	jump_3f5eb:
		mov    $0x2e,%eax
	jump_3f5f0:
		xor    %edx,%edx
		mov    %ax,%dx
		xor    %eax,%eax
		call   ac_play_disk_sample
	jump_3f5fc:
		xor    %edx,%edx
		mov    -0xc(%ebp),%dx
		imul   $0x1aa,%edx,%ebx
		mov    0x2(%edi),%eax
		sar    $0x10,%eax
		cmp    EXPORT_SYMBOL(players)+0x088(%ebx),%eax # players[0].DirectControl[0]
		je     jump_3fd18
		mov    0x2(%edi),%eax
		sar    $0x10,%eax
		call   ac_player_change_person
		jmp    jump_3fd18
	jump_3f62a:
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		testb  $0x8,0x45(%edx,%eax,1)
		jne    jump_3fd18
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa8,%eax,%eax
		xor    %edx,%edx
		mov    things,%ebx
		mov    -0xc(%ebp),%dx
		add    %ebx,%eax
		call   ac_person_shield_toggle
		jmp    jump_3fd18
	jump_3f66b:
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %edx,%eax
		testb  $0x8,0x45(%eax)
		jne    jump_3fd18
		call   ac_person_self_destruct
		jmp    jump_3fd18
	jump_3f693:
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa8,%eax,%edx
		mov    things,%eax
		testb  $0x8,0x45(%edx,%eax,1)
		jne    jump_3fd18
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa8,%eax,%eax
		mov    things,%ecx
		mov    0x6(%edi),%ebx
		mov    0x2(%edi),%edx
		sar    $0x10,%ebx
		sar    $0x10,%edx
		add    %ecx,%eax
		call   ac_make_peeps_scatter
		jmp    jump_3fd18
	jump_3f6d9:
		cmp    $0x37,%eax
		jbe    jump_3e844
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa8,%eax,%eax
		push   $0x2
		mov    things,%edx
		mov    0x6(%edi),%ecx
		mov    0x4(%edi),%ebx
		sar    $0x10,%ecx
		add    %edx,%eax
		mov    0x2(%edi),%edx
		sar    $0x10,%ebx
		sar    $0x10,%edx
		call   ac_thing_shoot_at_point
		jmp    jump_3fd18
	jump_3f714:
		cmp    $0x32,%eax
		jb     jump_3f746
		jbe    jump_3f28c
		cmp    $0x34,%eax
		jb     jump_3fd18
		jbe    jump_3f186
		xor    %edx,%edx
		xor    %eax,%eax
		mov    -0xc(%ebp),%dl
		mov    0x2(%edi),%al
		call   ac_unkn_player_group_prot
		mov    %ebp,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_3f746:
		cmp    $0x30,%eax
		jbe    jump_3f693
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %eax,%edx
		xor    %eax,%eax
		mov    0xa(%edx),%ax
		mov    %edx,-0x34(%ebp)
		cmp    $0x8,%eax
		je     jump_3fd18
		testb  $0x10,0x44(%edx)
		jne    jump_3fd18
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %eax,%edx
		mov    %edx,-0x20(%ebp)
		mov    -0x34(%ebp),%edx
		xor    %eax,%eax
		mov    0xa(%edx),%ax
		cmp    $0x2b,%eax
		jne    jump_3f7bb
		xor    %eax,%eax
		mov    0x3c(%edx),%ax
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %eax,%edx
		mov    %edx,-0x20(%ebp)
	jump_3f7bb:
		mov    -0x34(%ebp),%eax
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    0x4(%edi),%dx
		call   ac_thing_select_specific_weapon
		mov    %eax,-0x1c(%ebp)
		cmp    $0x1,%eax
		je     jump_3f7da
		movl   $0x2,-0x1c(%ebp)
	jump_3f7da:
		mov    -0x34(%ebp),%eax
		call   ac_peep_change_weapon
		xor    %edx,%edx
		mov    -0x34(%ebp),%eax
		call   ac_gun_out_anim
		mov    -0x34(%ebp),%edx
		mov    %al,0x6c(%edx)
		xor    %eax,%eax
		mov    0x8(%edx),%al
		imul   $0x2c,%eax,%edx
		mov    -0x34(%ebp),%ebx
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%dx
		xor    %eax,%eax
		and    $0xffff,%edx
		mov    0x57(%ebx),%al
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		mov    %ax,0x24(%ebx)
		xor    %eax,%eax
		mov    0x8(%ebx),%al
		imul   $0x2c,%eax,%edx
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		dec    %eax
		mov    %ax,0x26(%ebx)
		mov    %ebx,%eax
		call   calc_person_speed
		mov    %ax,0x38(%ebx)
		xor    %eax,%eax
		mov    %ebx,%edx
		mov    0x99(%ebx),%al
		xor    %ebx,%edx
		mov    %ax,0x9e(%ebx)
		xor    %eax,%eax
		mov    -0xc(%ebp),%dx
		mov    EXPORT_SYMBOL(local_player_no),%al
		cmp    %eax,%edx
		jne    jump_3f88f
		cmpb   $0x0,0x99(%ebx)
		je     jump_3f88f
		push   $0x3
		push   $0x0
		mov    $0x40,%ecx
		push   $0x64
		mov    $0x7f,%ebx
		mov    $0x2c,%edx
		call   ac_play_disk_sample
	jump_3f88f:
		xor    %eax,%eax
		mov    %eax,-0x2c(%ebp)
		mov    %eax,-0x14(%ebp)
		jmp    jump_3ef3b
	jump_3f89c:
		cmp    $0x28,%eax
		jb     jump_3f952
		jbe    jump_3e971
		cmp    $0x2c,%eax
		jb     jump_3f90b
		jbe    jump_3f37e
		cmp    $0x2d,%eax
		jbe    jump_3f62a
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    0xa(%eax),%dx
		cmp    $0x8,%edx
		je     jump_3fd18
		testb  $0x10,0x44(%eax)
		jne    jump_3fd18
		mov    0x6(%edi),%ecx
		xor    %edx,%edx
		mov    0x4(%edi),%ebx
		push   %edx
		sar    $0x10,%ecx
		mov    0x2(%edi),%edx
		sar    $0x10,%ebx
		sar    $0x10,%edx
		call   ac_person_init_plant_mine_fast
		jmp    jump_3fd18
	jump_3f90b:
		cmp    $0x2a,%eax
		jb     jump_3fd18
		jbe    jump_3ea1c
		mov    0x2(%edi),%eax
		sar    $0x10,%eax
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %eax,%edx
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa8,%eax,%eax
		xor    %ebx,%ebx
		mov    things,%ecx
		mov    -0xc(%ebp),%bx
		add    %ecx,%eax
		call   ac_person_go_enter_vehicle_fast
		jmp    jump_3fd18
	jump_3f952:
		cmp    $0x25,%eax
		jb     jump_3f9b8
		jbe    jump_3f4b6
		cmp    $0x26,%eax
		jbe    jump_3f54d
		xor    %edx,%edx
		xor    %eax,%eax
		mov    -0xc(%ebp),%dx
		mov    EXPORT_SYMBOL(local_player_no),%al
		cmp    %eax,%edx
		jne    jump_3f981
		mov    $0x1,%eax
		call   ac_show_goto_point
	jump_3f981:
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %edx,%eax
		andb   $0xfb,0x80(%eax)
		mov    0x4(%edi),%ecx
		mov    0x6(%edi),%ebx
		mov    0x2(%edi),%edx
		sar    $0x10,%ecx
		sar    $0x10,%ebx
		sar    $0x10,%edx
		call   ac_thing_goto_point_on_face
		jmp    jump_3fd18
	jump_3f9b8:
		cmp    $0x23,%eax
		jbe    jump_3f12e
		mov    0x2(%edi),%eax
		sar    $0x10,%eax
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %eax,%edx
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa8,%eax,%eax
		mov    things,%ebx
		add    %ebx,%eax
		call   ac_person_go_enter_vehicle
		jmp    jump_3fd18
	jump_3f9f3:
		cmp    $0x16,%eax
		jb     jump_3fcb6
		jbe    jump_3fd18
		cmp    $0x1c,%eax
		jb     jump_3fb82
		jbe    jump_3eb4d
		cmp    $0x1f,%eax
		jb     jump_3fb55
		jbe    jump_3f3a8
		cmp    $0x20,%eax
		jbe    jump_3f46a
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa8,%eax,%eax
		mov    things,%ecx
		add    %eax,%ecx
		xor    %eax,%eax
		mov    0xa(%ecx),%ax
		cmp    $0x8,%eax
		je     jump_3fd18
		testb  $0x10,0x44(%ecx)
		jne    jump_3fd18
		mov    %ecx,%eax
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    0x4(%edi),%dx
		call   ac_thing_select_specific_weapon
		mov    %ecx,%eax
		call   ac_peep_change_weapon
		xor    %edx,%edx
		mov    %ecx,%eax
		call   ac_gun_out_anim
		mov    %al,0x6c(%ecx)
		xor    %eax,%eax
		mov    0x8(%ecx),%al
		imul   $0x2c,%eax,%edx
		xor    %eax,%eax
		mov    0x6c(%ecx),%al
		add    %eax,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    0x57(%ecx),%al
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		mov    %ax,0x24(%ecx)
		xor    %eax,%eax
		mov    0x8(%ecx),%al
		imul   $0x2c,%eax,%eax
		xor    %edx,%edx
		mov    0x6c(%ecx),%dl
		mov    EXPORT_SYMBOL(people_frames)(%eax,%edx,2),%ax
		dec    %eax
		mov    %ax,0x26(%ecx)
		mov    %ecx,%eax
		call   calc_person_speed
		mov    %ax,0x38(%ecx)
		xor    %eax,%eax
		mov    0x99(%ecx),%al
		xor    %edx,%edx
		mov    %ax,0x9e(%ecx)
		xor    %eax,%eax
		mov    -0xc(%ebp),%dx
		mov    EXPORT_SYMBOL(local_player_no),%al
		cmp    %eax,%edx
		jne    jump_3fd18
		cmpb   $0x0,0x99(%ecx)
		je     jump_3fd18
		xor    %eax,%eax
		mov    background_type,%al
		cmp    $0x1,%eax
		jne    jump_3edc9
		mov    $0x3,%eax
		mov    $0x7f,%ebx
		xor    %edx,%edx
		push   %eax
		xor    %eax,%eax
		mov    0x99(%ecx),%dl
		push   %eax
		mov    $0x64,%eax
		mov    EXPORT_SYMBOL(weapon_sound_z)(%edx),%dl
		push   %eax
		mov    $0x40,%eax
		xor    %dh,%dh
		xor    %ecx,%ecx
		mov    EXPORT_SYMBOL(local_player_no),%cl
		and    $0xffff,%edx
		movswl %cx,%esi
		mov    %eax,%ecx
		mov    %esi,%eax
		call   ac_play_disk_sample
		jmp    jump_3fd18
	jump_3fb55:
		cmp    $0x1d,%eax
		jbe    jump_3ebce
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %edx,%eax
		mov    0x2(%edi),%edx
		sar    $0x10,%edx
		call   ac_thing_shoot_at_thing
		jmp    jump_3fd18
	jump_3fb82:
		cmp    $0x19,%eax
		jb     jump_3fcab
		jbe    jump_3eb14
		cmp    $0x1a,%eax
		jbe    jump_3ea7d
		xor    %ebx,%ebx
		mov    0x2(%edi),%bx
		imul   $0xa8,%ebx,%ebx
		mov    things,%eax
		add    %eax,%ebx
		xor    %eax,%eax
		mov    0xa(%ebx),%ax
		cmp    $0x8,%eax
		je     jump_3fd18
		testb  $0x10,0x44(%ebx)
		jne    jump_3fd18
		mov    %ebx,%eax
		call   ac_peep_change_weapon
		xor    %eax,%eax
		mov    $0xffffffff,%edx
		mov    0x2(%edi),%ax
		call   ac_select_new_weapon
		xor    %edx,%edx
		mov    %al,0x99(%ebx)
		mov    %ebx,%eax
		call   ac_gun_out_anim
		mov    %al,0x6c(%ebx)
		xor    %eax,%eax
		mov    0x8(%ebx),%al
		imul   $0x2c,%eax,%edx
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		add    %eax,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    0x57(%ebx),%al
		add    %edx,%eax
		lea    0x0(,%eax,2),%edx
		mov    nstart_ani,%eax
		mov    (%edx,%eax,1),%ax
		mov    %ax,0x24(%ebx)
		xor    %eax,%eax
		mov    0x8(%ebx),%al
		imul   $0x2c,%eax,%edx
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		dec    %eax
		mov    %ax,0x26(%ebx)
		mov    %ebx,%eax
		call   calc_person_speed
		mov    %ax,0x38(%ebx)
		xor    %eax,%eax
		mov    0x99(%ebx),%al
		xor    %edx,%edx
		mov    %ax,0x9e(%ebx)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(local_player_no),%dl
		mov    -0xc(%ebp),%ax
		cmp    %edx,%eax
		jne    jump_3fd18
		cmpb   $0x0,0x99(%ebx)
		je     jump_3fd18
		mov    $0x3,%eax
		push   %eax
		xor    %eax,%eax
		push   %eax
		mov    $0x64,%eax
		mov    $0x40,%ecx
		push   %eax
		xor    %eax,%eax
		mov    $0x7f,%ebx
		mov    EXPORT_SYMBOL(local_player_no),%al
		mov    $0x2c,%edx
		cwtl
		call   ac_play_disk_sample
		jmp    jump_3fd18
	jump_3fcab:
		cmp    $0x17,%eax
		jbe    jump_3f569
		jmp    jump_3fd18
	jump_3fcb6:
		cmp    $0xd,%eax
		jb     jump_3fd79
		jbe    jump_3ec51
		cmp    $0x11,%eax
		jb     jump_3fd06
		cmp    $0x13,%eax
		jbe    jump_3fd18
		cmp    $0x14,%eax
		jbe    jump_3f4ff
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		testb  $0x8,0x45(%edx,%eax,1)
		jne    jump_3fd18
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa8,%eax,%eax
		add    %edx,%eax
		call   ac_person_attempt_to_leave_vehicle
		jmp    jump_3fd18
	jump_3fd06:
		cmp    $0xe,%eax
		jbe    jump_3f07f
		cmp    $0x10,%eax
		je     jump_3f35a
	jump_3fd18:
		mov    -0x24(%ebp),%edx
		movw   $0x0,(%edi)
		inc    %edx
		add    $0xa,%edi
		mov    %edx,-0x24(%ebp)
	jump_3fd27:
		xor    %eax,%eax
		mov    -0x24(%ebp),%ecx
		mov    -0x10(%ebp),%ax
		cmp    %ecx,%eax
		jbe    jump_3e77b
		mov    -0xc(%ebp),%ecx
		xor    %edx,%edx
		mov    $0x1,%eax
		mov    ingame__InNetGame_UNSURE,%dl
		shl    %cl,%eax
		test   %eax,%edx
		jne    jump_3fd53
		movw   $0x0,(%edi)
	jump_3fd53:
		testb  $0x80,0x1(%edi)
		je     jump_3e7c7
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		orb    $0x8,0xd(%edx,%eax,1)
		jmp    jump_3e7de
	jump_3fd79:
		cmp    $0x2,%eax
		jb     jump_3fd18
		jbe    jump_3e85a
		cmp    $0xb,%eax
		jb     jump_3fd18
		jbe    jump_3e9ca
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		mov    0x6(%edi),%ecx
		mov    0x4(%edi),%ebx
		sar    $0x10,%ecx
		add    %edx,%eax
		mov    0x2(%edi),%edx
		sar    $0x10,%ebx
		sar    $0x10,%edx
		call   ac_thing_goto_point_rel
		jmp    jump_3fd18
	jump_3fdbf:
		mov    %ebp,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		nop
	jump_3fdc8:
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_net_unkn_check_1)	/* 0x03FF04 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xe0,%esp
		mov    $0x8,%ebx
		lea    0xd8(%esp),%eax
		xor    %edx,%edx
		call   ac_memset
		xor    %eax,%eax
		mov    pktrec_mode,%al
		cmp    $0x2,%eax
		jne    jump_3ff6e
		cmpb   $0x0,in_network_game
		je     jump_3ff6e
		xor    %edx,%edx
		jmp    jump_3ff3d
	jump_3ff3c:
		inc    %edx
	jump_3ff3d:
		xor    %ebx,%ebx
		mov    %dx,%bx
		cmp    $0x8,%ebx
		jge    jump_401ee
		mov    $0x1,%esi
		xor    %eax,%eax
		mov    %edx,%ecx
		mov    ingame__InNetGame_UNSURE,%al
		shl    %cl,%esi
		test   %esi,%eax
		je     jump_3ff3c
		imul   $0x30,%ebx,%eax
		add    $packets,%eax
		call   ac_PacketRecord_Read
		jmp    jump_3ff3c
	jump_3ff6e:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(word_1811AE),%ax
		cmp    $0x1,%eax
		je     jump_400a8
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(local_player_no),%bl
		lea    0x0(,%ebx,4),%edx
		sub    %ebx,%edx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		shl    $0x4,%edx
		sub    %ebx,%eax
		mov    packets(%edx),%bx
		mov    %bx,data_1aa214(%eax)
		mov    data_1a7032(%edx),%bx
		mov    %bx,data_1aa216(%eax)
		mov    data_1a7034(%edx),%bx
		mov    %bx,data_1aa218(%eax)
		mov    data_1a7036(%edx),%bx
		mov    data_1a7038(%edx),%dx
		mov    %bx,data_1aa21a(%eax)
		mov    %dx,data_1aa21c(%eax)
		mov    ingame__fld_unkC4B,%dl
		mov    %dl,data_1aa21e(%eax)
		mov    $0xb,%edx
		mov    $data_1aa214,%eax
		xor    %esi,%esi
		call   ac_LbNetworkExchange
		xor    %eax,%eax
		xor    %edx,%edx
		mov    %ax,%dx
		cmp    $0x8,%edx
		jl     jump_40015
		jmp    jump_401ee
	jump_40015:
		imul   $0xb,%edx,%ebx
		imul   $0x30,%edx,%edx
		mov    data_1aa214(%ebx),%cx
		mov    %cx,packets(%edx)
		mov    %si,data_1a703a(%edx)
		mov    %si,data_1a7044(%edx)
		mov    %si,data_1a704e(%edx)
		mov    data_1aa216(%ebx),%cx
		mov    %cx,data_1a7032(%edx)
		mov    data_1aa218(%ebx),%cx
		mov    %cx,data_1a7034(%edx)
		mov    data_1aa21a(%ebx),%cx
		mov    %cx,data_1a7036(%edx)
		mov    data_1aa21c(%ebx),%cx
		mov    %cx,data_1a7038(%edx)
		mov    EXPORT_SYMBOL(lbSeed),%ecx
		mov    data_1aa21e(%ebx),%bl
		mov    %ecx,data_1a7058(%edx)
		and    $0xff,%ebx
		inc    %eax
		mov    %ebx,data_1a705c(%edx)
		xor    %edx,%edx
		mov    %ax,%dx
		cmp    $0x8,%edx
		jl     jump_40015
		jmp    jump_401ee
	jump_400a8:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x4,%eax
		mov    EXPORT_SYMBOL(lbSeed),%edx
		mov    %edx,data_1a7058(%eax)
		mov    ingame__fld_unkC4B,%edx
		mov    %edx,data_1a705c(%eax)
		lea    0xc8(%esp),%eax
		mov    $0x30,%edx
		call   ASM_net_unkn_func_12
		mov    $packets,%eax
		call   ac_LbNetworkExchange
		mov    gameturn,%ebx
		mov    %eax,%edx
		cmp    $0x5,%ebx
		jne    jump_40106
		mov    $0xf,%eax
		call   ac_LbNetworkSetTimeoutSec
	jump_40106:
		cmp    $0xffffffff,%edx
		jne    jump_401c4
		lea    0xd0(%esp),%eax
		mov    $aYouHaveTimedOu,%edi
		call   ASM_net_unkn_func_12
		xor    %edx,%edx
		jmp    jump_40125
	jump_40124:
		inc    %edx
	jump_40125:
		xor    %ebx,%ebx
		mov    %dx,%bx
		cmp    $0x8,%ebx
		jge    jump_401ee
		mov    $0x1,%eax
		mov    %edx,%ecx
		movzbl ingame__InNetGame_UNSURE,%esi
		shl    %cl,%eax
		test   %eax,%esi
		je     jump_40124
		mov    0xc8(%esp,%ebx,1),%al
		cmp    0xd0(%esp,%ebx,1),%al
		je     jump_40124
		mov    %ebx,%eax
		shl    $0x4,%eax
		add    $unkn2_names,%eax
		push   %eax
		push   $aPlayerSHasTime
		lea    0x8(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
		mov    %esp,%eax
		mov    %dl,%cl
		call   show_message
		mov    $0x1,%al
		shl    %cl,%al
		mov    ingame__InNetGame_UNSURE,%ch
		not    %al
		and    %al,%ch
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(local_player_no),%al
		mov    %ch,ingame__InNetGame_UNSURE
		cmp    %eax,%ebx
		jne    jump_401b9
		mov    %edi,%eax
		mov    $0x37,%ebx
		call   show_message
		mov    %bx,ingame__DisplayMode
		call   ac_StopCD
		call   ac_StopAllSamples
	jump_401b9:
		decb   EXPORT_SYMBOL(net_players_num)
		jmp    jump_40124
	jump_401c4:
		cmp    $0xfffffff8,%edx
		jne    jump_401ee
		mov    $aHostConnection,%eax
		xor    %dl,%dl
		call   show_message
		mov    %dl,ingame__InNetGame_UNSURE
		movw   $0x37,ingame__DisplayMode
		call   ac_StopCD
		call   ac_StopAllSamples
	jump_401ee:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(word_1811AE),%ax
		cmp    $0x1,%eax
		je     jump_40209
		mov    ingame__fld_unkC4B,%edi
		and    $0xff,%edi
		jmp    jump_4020f
	jump_40209:
		mov    ingame__fld_unkC4B,%edi
	jump_4020f:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(word_1811AE),%ax
		cmp    $0x1,%eax
		jne    jump_4028a
		xor    %esi,%esi
		jmp    jump_40225
	jump_40224:
		inc    %esi
	jump_40225:
		xor    %eax,%eax
		mov    %si,%ax
		cmp    $0x8,%eax
		jge    jump_4028a
		mov    $0x1,%eax
		xor    %edx,%edx
		mov    %esi,%ecx
		mov    ingame__InNetGame_UNSURE,%dl
		shl    %cl,%eax
		test   %eax,%edx
		je     jump_40224
		xor    %eax,%eax
		jmp    jump_40249
	jump_40248:
		inc    %eax
	jump_40249:
		xor    %edx,%edx
		mov    %ax,%dx
		cmp    $0x8,%edx
		jge    jump_40224
		mov    $0x1,%ebp
		xor    %ebx,%ebx
		mov    %eax,%ecx
		mov    ingame__InNetGame_UNSURE,%bl
		shl    %cl,%ebp
		test   %ebp,%ebx
		je     jump_40248
		imul   $0x30,%edx,%ebx
		xor    %edx,%edx
		mov    %si,%dx
		imul   $0x30,%edx,%ecx
		mov    data_1a705c(%ebx),%ebx
		cmp    data_1a705c(%ecx),%ebx
		jne    jump_40248
		incb   0xd8(%esp,%edx,1)
		jmp    jump_40248
	jump_4028a:
		xor    %edx,%edx
		mov    $0x1,%esi
		jmp    jump_40294
	jump_40293:
		inc    %edx
	jump_40294:
		xor    %ebx,%ebx
		mov    %dx,%bx
		cmp    $0x8,%ebx
		jge    jump_403cc
		mov    %edx,%ecx
		xor    %eax,%eax
		mov    %esi,%ebp
		mov    ingame__InNetGame_UNSURE,%al
		shl    %cl,%ebp
		test   %ebp,%eax
		je     jump_40293
		xor    %eax,%eax
		mov    pktrec_mode,%al
		cmp    $0x1,%eax
		jne    jump_402e2
		cmpb   $0x0,in_network_game
		je     jump_402e2
		mov    net_host_player_no,%al
		cmp    EXPORT_SYMBOL(local_player_no),%al
		jne    jump_402e2
		imul   $0x30,%ebx,%eax
		add    $packets,%eax
		call   ac_PacketRecord_Write
	jump_402e2:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(word_1811AE),%ax
		cmp    $0x1,%eax
		jne    jump_40334
		xor    %ebx,%ebx
		mov    %dx,%bx
		xor    %eax,%eax
		mov    0xd8(%esp,%ebx,1),%al
		cmp    $0x1,%eax
		jne    jump_40334
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(net_players_num),%al
		cmp    $0x2,%eax
		jle    jump_40334
		mov    %ebx,%eax
		shl    $0x4,%eax
		add    $unkn2_names,%eax
		push   %eax
		push   $aPlayerSIsOutOf
		lea    0x6c(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
		lea    0x64(%esp),%eax
		call   show_message
	jump_40334:
		xor    %eax,%eax
		mov    %dx,%ax
		imul   $0x30,%eax,%eax
		cmp    data_1a705c(%eax),%edi
		je     jump_40293
		mov    $aCheckError,%eax
		call   show_message
		xor    %al,%al
		mov    %al,EXPORT_SYMBOL(lbKeyOn)+19
		movb   $0x2,in_network_game
		call   ac_StopCD
		mov    $0x1,%eax
		call   ac_test_missions
		mov    $0x1,%eax
		call   ac_init_level_3d
		mov    EXPORT_SYMBOL(word_1C8446),%eax
		sar    $0x10,%eax
		call   ac_change_current_map
		call   ac_map_lights_update
		mov    EXPORT_SYMBOL(ingame)-2,%eax
		sar    $0x10,%eax
		cmp    $0x2,%eax
		jne    jump_403a0
		xor    %dl,%dl
		mov    %dl,execute_commands
	jump_403a0:
		mov    $0x1,%eax
		mov    $0xd15c1234,%esi
		xor    %ecx,%ecx
		mov    $0x1,%dh
		mov    %ecx,engn_yc
		call   ac_init_game
		mov    %esi,%eax
		mov    %esi,EXPORT_SYMBOL(lbSeed)
		call   ac_srand
		mov    %dh,in_network_game
	jump_403cc:
		add    $0xe0,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_setup_color_lookups)	/* 0x4113C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		mov    $0x1,%edx
		mov    display_palette,%eax
		xor    %ecx,%ecx
		xor    %ebx,%ebx
		mov    %edx,EXPORT_SYMBOL(dword_1AA270)
		xor    %edx,%edx
		call   ac_LbPaletteFindColour
		mov    $0x3f,%ecx
		mov    %al,EXPORT_SYMBOL(colour_lookup)
		mov    display_palette,%eax
		mov    %ecx,%ebx
		mov    %ecx,%edx
		call   ac_LbPaletteFindColour
		mov    $0x3f,%edx
		mov    %al,EXPORT_SYMBOL(colour_lookup)+1
		xor    %ecx,%ecx
		xor    %ebx,%ebx
		mov    display_palette,%eax
		call   ac_LbPaletteFindColour
		mov    $0x3f,%ebx
		mov    %al,EXPORT_SYMBOL(colour_lookup)+2
		xor    %ecx,%ecx
		xor    %edx,%edx
		mov    display_palette,%eax
		call   ac_LbPaletteFindColour
		mov    $0x3f,%ecx
		mov    %al,EXPORT_SYMBOL(colour_lookup)+3
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    display_palette,%eax
		call   ac_LbPaletteFindColour
		mov    $0x3f,%ebx
		mov    %al,EXPORT_SYMBOL(colour_lookup)+4
		xor    %ecx,%ecx
		mov    display_palette,%eax
		mov    %ebx,%edx
		call   ac_LbPaletteFindColour
		mov    $0x3f,%ecx
		mov    %al,EXPORT_SYMBOL(colour_lookup)+0x05
		xor    %edx,%edx
		mov    display_palette,%eax
		mov    %ecx,%ebx
		call   ac_LbPaletteFindColour
		mov    %al,EXPORT_SYMBOL(colour_lookup)+0x06
		mov    $0x3f,%ecx
		mov    display_palette,%eax
		xor    %ebx,%ebx
		mov    %ecx,%edx
		call   ac_LbPaletteFindColour
		mov    $0x32,%ecx
		mov    %al,EXPORT_SYMBOL(colour_lookup)+7
		mov    display_palette,%eax
		mov    %ecx,%ebx
		mov    %ecx,%edx
		call   ac_LbPaletteFindColour
		mov    $0x1e,%ecx
		mov    %al,EXPORT_SYMBOL(colour_lookup)+0x08
		mov    display_palette,%eax
		mov    %ecx,%ebx
		mov    %ecx,%edx
		call   ac_LbPaletteFindColour
		mov    $0xa,%ecx
		mov    %al,EXPORT_SYMBOL(colour_lookup)+0x09
		mov    display_palette,%eax
		mov    %ecx,%ebx
		mov    %ecx,%edx
		call   ac_LbPaletteFindColour
		mov    EXPORT_SYMBOL(unkn_changing_color_counter1),%ecx
		inc    %ecx
		mov    %al,EXPORT_SYMBOL(colour_lookup)+0x0A
		mov    %ecx,EXPORT_SYMBOL(unkn_changing_color_counter1)
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(unkn_changing_color_counter1),%ah
		mov    %ebx,EXPORT_SYMBOL(dword_1AA270)
		test   $0x1,%ah
		je     jump_41276
		mov    EXPORT_SYMBOL(colour_lookup)+0x05,%al
		jmp    jump_4127b
	jump_41276:
		mov    EXPORT_SYMBOL(colour_lookup),%al
	jump_4127b:
		mov    EXPORT_SYMBOL(unkn_changing_color_counter1),%dl
		mov    %al,EXPORT_SYMBOL(colour_lookup)+0x0B
		test   $0x1,%dl
		je     jump_41292
		mov    EXPORT_SYMBOL(colour_lookup)+2,%al
		jmp    jump_41297
	jump_41292:
		mov    EXPORT_SYMBOL(colour_lookup)+1,%al
	jump_41297:
		mov    $0x3f,%ebx
		mov    %al,EXPORT_SYMBOL(colour_lookup)+0x0C
		xor    %ecx,%ecx
		xor    %edx,%edx
		mov    display_palette,%eax
		call   ac_LbPaletteFindColour
		mov    $0x3f,%ecx
		mov    $0x30,%ebx
		mov    $0x26,%edx
		mov    %al,EXPORT_SYMBOL(colour_mix_lookup)
		mov    display_palette,%eax
		call   ac_LbPaletteFindColour
		mov    $0x3f,%ecx
		mov    %al,EXPORT_SYMBOL(colour_mix_lookup)+1
		xor    %edx,%edx
		mov    display_palette,%eax
		mov    %ecx,%ebx
		call   ac_LbPaletteFindColour
		mov    $0x3f,%ebx
		mov    %al,EXPORT_SYMBOL(colour_mix_lookup)+2
		xor    %ecx,%ecx
		mov    display_palette,%eax
		mov    %ebx,%edx
		call   ac_LbPaletteFindColour
		mov    $0x3f,%ecx
		mov    %al,EXPORT_SYMBOL(colour_mix_lookup)+3
		xor    %ebx,%ebx
		mov    display_palette,%eax
		mov    %ecx,%edx
		call   ac_LbPaletteFindColour
		mov    $0x20,%ecx
		mov    $0x3f,%edx
		mov    %al,EXPORT_SYMBOL(colour_mix_lookup)+4
		mov    display_palette,%eax
		mov    %ecx,%ebx
		call   ac_LbPaletteFindColour
		mov    $0x20,%ecx
		mov    $0x3f,%ebx
		mov    %al,EXPORT_SYMBOL(colour_mix_lookup)+5
		mov    display_palette,%eax
		mov    %ecx,%edx
		call   ac_LbPaletteFindColour
		mov    %al,EXPORT_SYMBOL(colour_mix_lookup)+6
		mov    $0x3f,%ecx
		mov    $0x20,%ebx
		mov    display_palette,%eax
		mov    %ebx,%edx
		call   ac_LbPaletteFindColour
		mov    $0x20,%ecx
		mov    %al,EXPORT_SYMBOL(colour_mix_lookup)+7
		mov    display_palette,%eax
		mov    %ecx,%ebx
		mov    %ecx,%edx
		call   ac_LbPaletteFindColour
		mov    $0x3f,%ecx
		mov    $0x20,%edx
		mov    %al,EXPORT_SYMBOL(colour_mix_lookup)+8
		mov    display_palette,%eax
		mov    %ecx,%ebx
		call   ac_LbPaletteFindColour
		mov    $0x20,%ecx
		mov    $0x3f,%ebx
		mov    %al,EXPORT_SYMBOL(colour_mix_lookup)+9
		mov    display_palette,%eax
		mov    %ebx,%edx
		call   ac_LbPaletteFindColour
		mov    $0x3f,%ecx
		mov    $0x20,%ebx
		mov    %al,EXPORT_SYMBOL(colour_mix_lookup)+10
		mov    display_palette,%eax
		mov    %ecx,%edx
		call   ac_LbPaletteFindColour
		mov    $0x30,%ecx
		mov    %al,EXPORT_SYMBOL(colour_mix_lookup)+11
		mov    display_palette,%eax
		mov    %ecx,%ebx
		mov    %ecx,%edx
		call   ac_LbPaletteFindColour
		mov    $0x28,%ecx
		mov    %al,EXPORT_SYMBOL(colour_sel_grey)+0
		mov    display_palette,%eax
		mov    %ecx,%ebx
		mov    %ecx,%edx
		call   ac_LbPaletteFindColour
		mov    %al,EXPORT_SYMBOL(colour_sel_grey)+1
		mov    $0x20,%ecx
		mov    display_palette,%eax
		mov    %ecx,%ebx
		mov    %ecx,%edx
		call   ac_LbPaletteFindColour
		mov    $0x18,%ecx
		mov    %al,EXPORT_SYMBOL(colour_sel_grey)+2
		mov    display_palette,%eax
		mov    %ecx,%ebx
		mov    %ecx,%edx
		call   ac_LbPaletteFindColour
		mov    $0x30,%ebx
		mov    %al,EXPORT_SYMBOL(colour_sel_grey)+3
		xor    %ecx,%ecx
		xor    %edx,%edx
		mov    display_palette,%eax
		call   ac_LbPaletteFindColour
		mov    $0x28,%ebx
		mov    %al,EXPORT_SYMBOL(colour_sel_green)+0
		xor    %ecx,%ecx
		xor    %edx,%edx
		mov    display_palette,%eax
		call   ac_LbPaletteFindColour
		mov    $0x20,%ebx
		mov    %al,EXPORT_SYMBOL(colour_sel_green)+1
		xor    %ecx,%ecx
		xor    %edx,%edx
		mov    display_palette,%eax
		call   ac_LbPaletteFindColour
		mov    $0x18,%ebx
		mov    %al,EXPORT_SYMBOL(colour_sel_green)+2
		xor    %ecx,%ecx
		xor    %edx,%edx
		mov    display_palette,%eax
		call   ac_LbPaletteFindColour
		mov    $0x30,%ecx
		mov    %al,EXPORT_SYMBOL(colour_sel_green)+3
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    display_palette,%eax
		call   ac_LbPaletteFindColour
		mov    %al,EXPORT_SYMBOL(colour_sel_blue)+0
		mov    $0x28,%ecx
		mov    display_palette,%eax
		xor    %ebx,%ebx
		xor    %edx,%edx
		call   ac_LbPaletteFindColour
		mov    $0x20,%ecx
		mov    %al,EXPORT_SYMBOL(colour_sel_blue)+1
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    display_palette,%eax
		call   ac_LbPaletteFindColour
		mov    $0x18,%ecx
		mov    %al,EXPORT_SYMBOL(colour_sel_blue)+2
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    display_palette,%eax
		call   ac_LbPaletteFindColour
		mov    $0x30,%edx
		mov    %al,EXPORT_SYMBOL(colour_sel_blue)+3
		xor    %ecx,%ecx
		xor    %ebx,%ebx
		mov    display_palette,%eax
		call   ac_LbPaletteFindColour
		mov    $0x28,%edx
		mov    %al,EXPORT_SYMBOL(colour_sel_red)+0
		xor    %ecx,%ecx
		xor    %ebx,%ebx
		mov    display_palette,%eax
		call   ac_LbPaletteFindColour
		mov    $0x20,%edx
		mov    %al,EXPORT_SYMBOL(colour_sel_red)+1
		xor    %ecx,%ecx
		xor    %ebx,%ebx
		mov    display_palette,%eax
		call   ac_LbPaletteFindColour
		mov    $0x18,%edx
		mov    %al,EXPORT_SYMBOL(colour_sel_red)+2
		xor    %ecx,%ecx
		xor    %ebx,%ebx
		mov    display_palette,%eax
		call   ac_LbPaletteFindColour
		mov    %al,EXPORT_SYMBOL(colour_sel_red)+3
		mov    $0x30,%ecx
		mov    display_palette,%eax
		xor    %ebx,%ebx
		mov    %ecx,%edx
		call   ac_LbPaletteFindColour
		mov    $0x28,%ecx
		mov    %al,EXPORT_SYMBOL(colour_sel_purple)+0
		xor    %ebx,%ebx
		mov    display_palette,%eax
		mov    %ecx,%edx
		call   ac_LbPaletteFindColour
		mov    $0x20,%ecx
		mov    %al,EXPORT_SYMBOL(colour_sel_purple)+1
		xor    %ebx,%ebx
		mov    display_palette,%eax
		mov    %ecx,%edx
		call   ac_LbPaletteFindColour
		mov    $0x18,%ecx
		mov    %al,EXPORT_SYMBOL(colour_sel_purple)+2
		xor    %ebx,%ebx
		mov    display_palette,%eax
		mov    %ecx,%edx
		call   ac_LbPaletteFindColour
		mov    %al,EXPORT_SYMBOL(colour_sel_purple)+3
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
/* void load_texturemaps(void)
 */
GLOBAL_FUNC (ASM_load_texturemaps)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		sub    $0x20,%esp
		mov    EXPORT_SYMBOL(vec_tmap),%edx
		test   %edx,%edx
		jne    jump_41a27
		xor    %ebx,%ebx
		mov    $0x2,%ecx
	jump_4196d:
		push   %ebx
		push   $aDataTex02d_dat
		lea    0x8(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
		mov    %ecx,%edx
		mov    %esp,%eax
		call   ac_LbFileOpen
		lea    0x1(%ebx),%edx
		cmp    $0xffffffff,%eax
		je     jump_4199a
		call   ac_LbFileClose
		mov    %edx,%ebx
		jmp    jump_4196d
	jump_4199a:
		test   %ebx,%ebx
		je     jump_41a64
		mov    %edx,%eax
		shl    $0x10,%eax
		call   ac_LbMemoryAlloc
		test   %eax,%eax
		je     jump_41a17
		mov    %eax,ingame__Tmaps
		mov    %eax,EXPORT_SYMBOL(dword_1810D1)
		lea    0x10000(%eax),%ecx
		xor    %cx,%cx
		mov    %ecx,%edx
		sub    %eax,%edx
		mov    %edx,EXPORT_SYMBOL(dword_1810D5)
		test   %ecx,%ecx
		je     jump_41a64
		xor    %esi,%esi
		test   %ebx,%ebx
		jbe    jump_41a0d
		xor    %edi,%edi
	jump_419dd:
		push   %esi
		push   $aDataTex02d_d_0
		lea    0x8(%esp),%eax
		push   %eax
		mov    %ecx,%edx
		add    $0x4,%edi
		call   ac_sprintf
		add    $0xc,%esp
		mov    %esp,%eax
		inc    %esi
		call   ac_LbFileLoadAt
		mov    %ecx,data_1aa274(%edi)
		add    $0x10000,%ecx
		cmp    %ebx,%esi
		jb     jump_419dd
	jump_41a0d:
		dec    %bl
		mov    %bl,ingame__LastTmap
		jmp    jump_41a64
	jump_41a17:
		movb   $0x1,exit_game
		add    $0x20,%esp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_41a27:
		xor    %ebx,%ebx
		xor    %ecx,%ecx
		test   %edx,%edx
		je     jump_41a64
	jump_41a2f:
		cmp    $0x5,%ebx
		jae    jump_41a64
		push   %ebx
		push   $aDataTex02d_d_1
		lea    0x8(%esp),%eax
		push   %eax
		call   ac_sprintf
		lea    0xc(%esp),%eax
		add    $0xc,%esp
		mov    EXPORT_SYMBOL(vec_tmap)(%ecx),%edx
		add    $0x4,%ecx
		call   ac_LbFileLoadAt
		mov    EXPORT_SYMBOL(vec_tmap)(%ecx),%edi
		inc    %ebx
		test   %edi,%edi
		jne    jump_41a2f
	jump_41a64:
		add    $0x20,%esp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (free_texturemaps)
/*----------------------------------------------------------------*/
		mov    ingame__Tmaps,%eax
		jmp    ac_LbMemoryFree


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_veh_add)	/* 0x041A80 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    %eax,%ebp
		movswl %dx,%eax
		cmp    $0x12,%eax
		jne    jump_41be8
		call   ac_get_new_thing
		mov    %ax,0x4(%esp)
		mov    0x2(%esp),%ebx
		sar    $0x10,%ebx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    things,%ebx
		shl    $0x3,%eax
		add    %eax,%ebx
		movw   $0x0,0x5e(%ebx)
		movw   $0x0,0x94(%ebx)
		xor    %ecx,%ecx
		mov    0x52(%ebp),%eax
		mov    %ebx,(%esp)
		sar    $0x10,%eax
		mov    EXPORT_SYMBOL(next_local_mat),%bx
		lea    0x0(,%eax,8),%esi
		mov    %bx,%cx
		add    %eax,%esi
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		lea    EXPORT_SYMBOL(local_mats)(,%esi,4),%esi
		mov    $0x9,%ecx
		lea    EXPORT_SYMBOL(local_mats)(,%eax,4),%edi
		mov    (%esp),%eax
		rep movsl %ds:(%esi),%es:(%edi)
		mov    %bx,0x54(%eax)
		mov    %dx,0x26(%eax)
		mov    prim_unknprop01,%si
		mov    0x1c(%ebp),%eax
		xor    %ecx,%ecx
		sar    $0x8,%eax
		inc    %ebx
		add    $0x14,%eax
		xor    %dh,%dh
		mov    %ax,%cx
		mov    $0xffffffed,%eax
		mov    %bx,EXPORT_SYMBOL(next_local_mat)
		sub    %esi,%eax
		mov    %dh,EXPORT_SYMBOL(byte_1C83D1)
		movswl %ax,%ebx
		mov    0x20(%ebp),%eax
		xor    %edx,%edx
		sar    $0x8,%eax
		mov    %ax,%dx
		mov    0x18(%ebp),%eax
		sar    $0x8,%eax
		and    $0xffff,%eax
		call   ac_sub_6031C
		mov    (%esp),%eax
		movl   $0x0,0x18(%eax)
		movl   $0x2800,0x1c(%eax)
		movl   $0x0,0x20(%eax)
		mov    EXPORT_SYMBOL(next_object),%ax
		dec    %eax
		and    $0xffff,%eax
		call   ac_unkn_object_shift_03
		mov    (%esp),%eax
		mov    EXPORT_SYMBOL(next_object),%dx
		mov    $0xa8,%ebx
		dec    %edx
		movb   $0x21,0x9(%eax)
		mov    things,%esi
		mov    %dx,0x52(%eax)
		mov    (%esp),%edx
		mov    0x4(%esp),%eax
		sub    %esi,%edx
		mov    %ax,0x94(%ebp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,%ebx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(next_object),%ax
		lea    -0x1(%eax),%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    game_objects,%edx
		movb   $0x33,0x8(%ebp)
		mov    %bx,0xa(%edx,%eax,4)
		jmp    jump_41ea2
	jump_41be8:
		cmp    $0x1a,%eax
		jne    jump_41d41
		call   ac_get_new_thing
		mov    %ax,0x4(%esp)
		mov    0x2(%esp),%ebx
		sar    $0x10,%ebx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		add    %eax,%ebx
		mov    things,%eax
		shl    $0x3,%ebx
		add    %ebx,%eax
		movw   $0x0,0x5e(%eax)
		movw   $0x0,0x94(%eax)
		mov    %eax,(%esp)
		mov    0x52(%ebp),%eax
		xor    %ecx,%ecx
		sar    $0x10,%eax
		mov    EXPORT_SYMBOL(next_local_mat),%bx
		lea    0x0(,%eax,8),%esi
		mov    %bx,%cx
		add    %eax,%esi
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		lea    EXPORT_SYMBOL(local_mats)(,%esi,4),%esi
		mov    $0x9,%ecx
		lea    EXPORT_SYMBOL(local_mats)(,%eax,4),%edi
		mov    (%esp),%eax
		rep movsl %ds:(%esi),%es:(%edi)
		mov    %bx,0x54(%eax)
		mov    %dx,0x26(%eax)
		xor    %ecx,%ecx
		mov    0x1c(%ebp),%eax
		inc    %ebx
		sar    $0x8,%eax
		mov    %bx,EXPORT_SYMBOL(next_local_mat)
		add    $0x14,%eax
		mov    prim_unknprop01,%bx
		mov    %ax,%cx
		mov    $0xffffffe5,%eax
		xor    %dl,%dl
		sub    %ebx,%eax
		mov    %dl,EXPORT_SYMBOL(byte_1C83D1)
		movswl %ax,%ebx
		mov    0x20(%ebp),%eax
		xor    %edx,%edx
		sar    $0x8,%eax
		mov    %ax,%dx
		mov    0x18(%ebp),%eax
		sar    $0x8,%eax
		and    $0xffff,%eax
		call   ac_sub_6031C
		mov    (%esp),%eax
		movl   $0x0,0x18(%eax)
		movl   $0x1e00,0x1c(%eax)
		movl   $0x0,0x20(%eax)
		mov    EXPORT_SYMBOL(next_object),%ax
		dec    %eax
		and    $0xffff,%eax
		call   ac_unkn_object_shift_03
		mov    (%esp),%eax
		mov    EXPORT_SYMBOL(next_object),%dx
		mov    $0xa8,%ebx
		dec    %edx
		movb   $0x21,0x9(%eax)
		mov    things,%ecx
		mov    %dx,0x52(%eax)
		mov    (%esp),%edx
		mov    0x4(%esp),%eax
		sub    %ecx,%edx
		mov    %ax,0x94(%ebp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(next_object),%dx
		dec    %edx
		mov    %eax,%ebx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    game_objects,%edx
		movb   $0x33,0x8(%ebp)
		mov    %bx,0xa(%edx,%eax,4)
		jmp    jump_41ea2
	jump_41d41:
		cmp    $0x1d,%eax
		jne    jump_41e99
		call   ac_get_new_thing
		mov    %ax,0x4(%esp)
		mov    0x2(%esp),%ebx
		sar    $0x10,%ebx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    things,%ebx
		shl    $0x3,%eax
		add    %eax,%ebx
		movw   $0x0,0x5e(%ebx)
		movw   $0x0,0x94(%ebx)
		xor    %ecx,%ecx
		mov    0x52(%ebp),%eax
		mov    %ebx,(%esp)
		sar    $0x10,%eax
		mov    EXPORT_SYMBOL(next_local_mat),%bx
		lea    0x0(,%eax,8),%esi
		mov    %bx,%cx
		add    %eax,%esi
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		lea    EXPORT_SYMBOL(local_mats)(,%esi,4),%esi
		mov    $0x9,%ecx
		lea    EXPORT_SYMBOL(local_mats)(,%eax,4),%edi
		mov    (%esp),%eax
		rep movsl %ds:(%esi),%es:(%edi)
		mov    %bx,0x54(%eax)
		mov    %dx,0x26(%eax)
		xor    %ah,%ah
		mov    %ah,EXPORT_SYMBOL(byte_1C83D1)
		mov    0x1c(%ebp),%eax
		sar    $0x8,%eax
		xor    %ecx,%ecx
		add    $0x14,%eax
		mov    prim_unknprop01,%dx
		mov    %ax,%cx
		mov    $0xffffffe2,%eax
		inc    %ebx
		sub    %edx,%eax
		mov    %bx,EXPORT_SYMBOL(next_local_mat)
		movswl %ax,%ebx
		mov    0x20(%ebp),%eax
		xor    %edx,%edx
		sar    $0x8,%eax
		mov    %ax,%dx
		mov    0x18(%ebp),%eax
		sar    $0x8,%eax
		and    $0xffff,%eax
		call   ac_sub_6031C
		mov    (%esp),%eax
		movl   $0x0,0x18(%eax)
		movl   $0x1e00,0x1c(%eax)
		movl   $0x0,0x20(%eax)
		mov    EXPORT_SYMBOL(next_object),%ax
		dec    %eax
		and    $0xffff,%eax
		call   ac_unkn_object_shift_03
		mov    EXPORT_SYMBOL(next_object),%dx
		mov    (%esp),%eax
		dec    %edx
		movb   $0x21,0x9(%eax)
		mov    things,%ebx
		mov    %dx,0x52(%eax)
		mov    (%esp),%edx
		mov    0x4(%esp),%eax
		sub    %ebx,%edx
		mov    %ax,0x94(%ebp)
		mov    $0xa8,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,%ebx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(next_object),%ax
		lea    -0x1(%eax),%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    game_objects,%edx
		movb   $0x33,0x8(%ebp)
		mov    %bx,0xa(%edx,%eax,4)
		jmp    jump_41ea2
	jump_41e99:
		movw   $0x0,0x94(%ebp)
	jump_41ea2:
		movl   $0x0,0x98(%ebp)
		movl   $0x0,0x9c(%ebp)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
find_face_texture:	/* 0x041EC0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    EXPORT_SYMBOL(next_face_texture),%si
		mov    game_face_textures,%edi
		mov    %eax,%edx
		mov    $0x1,%ebx
		cmp    %bx,%si
		ja     jump_41ee6
		jmp    jump_41f2d
	jump_41ee0:
		inc    %ebx
		cmp    %si,%bx
		jae    jump_41f2d
	jump_41ee6:
		xor    %eax,%eax
		mov    %bx,%ax
		mov    %eax,%ecx
		shl    $0x4,%ecx
		lea    (%edi,%ecx,1),%eax
		mov    (%edx),%cl
		cmp    (%eax),%cl
		jne    jump_41ee0
		mov    0x2(%edx),%cl
		cmp    0x2(%eax),%cl
		jne    jump_41ee0
		mov    0x4(%edx),%cl
		cmp    0x4(%eax),%cl
		jne    jump_41ee0
		mov    0x1(%edx),%cl
		cmp    0x1(%eax),%cl
		jne    jump_41ee0
		mov    0x3(%edx),%cl
		cmp    0x3(%eax),%cl
		jne    jump_41ee0
		mov    0x5(%edx),%cl
		cmp    0x5(%eax),%cl
		jne    jump_41ee0
		mov    0x6(%edx),%cl
		cmp    0x6(%eax),%cl
		jne    jump_41ee0
		mov    %ebx,%ecx
		jmp    jump_41f2f
	jump_41f2d:
		xor    %ecx,%ecx
	jump_41f2f:
		mov    %ecx,%eax
		mov    %edi,game_face_textures
		mov    %si,EXPORT_SYMBOL(next_face_texture)
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_41f44:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    EXPORT_SYMBOL(next_floor_texture),%si
		mov    game_textures,%edi
		mov    %eax,%edx
		mov    $0x1,%ebx
		cmp    %bx,%si
		ja     jump_41f6d
		jmp    jump_41fc2
	jump_41f67:
		inc    %ebx
		cmp    %si,%bx
		jae    jump_41fc2
	jump_41f6d:
		xor    %eax,%eax
		mov    %bx,%ax
		imul   $0x12,%eax,%ecx
		lea    (%edi,%ecx,1),%eax
		mov    (%edx),%cl
		cmp    (%eax),%cl
		jne    jump_41f67
		mov    0x2(%edx),%cl
		cmp    0x2(%eax),%cl
		jne    jump_41f67
		mov    0x4(%edx),%cl
		cmp    0x4(%eax),%cl
		jne    jump_41f67
		mov    0x6(%edx),%cl
		cmp    0x6(%eax),%cl
		jne    jump_41f67
		mov    0x1(%edx),%cl
		cmp    0x1(%eax),%cl
		jne    jump_41f67
		mov    0x3(%edx),%cl
		cmp    0x3(%eax),%cl
		jne    jump_41f67
		mov    0x5(%edx),%cl
		cmp    0x5(%eax),%cl
		jne    jump_41f67
		mov    0x7(%edx),%cl
		cmp    0x7(%eax),%cl
		jne    jump_41f67
		mov    0x8(%edx),%cl
		cmp    0x8(%eax),%cl
		jne    jump_41f67
		mov    %ebx,%ecx
		jmp    jump_41fc4
	jump_41fc2:
		xor    %ecx,%ecx
	jump_41fc4:
		mov    %ecx,%eax
		mov    %edi,game_textures
		mov    %si,EXPORT_SYMBOL(next_floor_texture)
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_420f8:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x10,%esp
		mov    EXPORT_SYMBOL(next_normal),%cx
		mov    EXPORT_SYMBOL(mem_game)+194,%ebx
		xor    %edx,%edx
		dec    %ebx
		mov    %cx,%dx
		cmp    %ebx,%edx
		jl     jump_4211f
		xor    %eax,%eax
		jmp    jump_42198
	jump_4211f:
		mov    %esp,%edx
		and    $0xffff,%eax
		call   calc_normal4
		mov    EXPORT_SYMBOL(next_normal),%cx
		xor    %eax,%eax
		mov    %cx,%ax
		mov    %ecx,%edx
		cmp    $0x1,%eax
		jle    jump_4217a
		mov    $0x1,%edx
		cmp    %dx,%cx
		ja     jump_42152
		jmp    jump_4217a
	jump_4214a:
		inc    %edx
		cmp    %cx,%dx
		jb     jump_4215d
		jmp    jump_4217a
	jump_42152:
		mov    0x8(%esp),%ebp
		mov    0x4(%esp),%edi
		mov    (%esp),%esi
	jump_4215d:
		xor    %ebx,%ebx
		mov    %dx,%bx
		mov    game_normals,%eax
		shl    $0x4,%ebx
		add    %eax,%ebx
		cmp    (%ebx),%esi
		jne    jump_4214a
		cmp    0x4(%ebx),%edi
		jne    jump_4214a
		cmp    0x8(%ebx),%ebp
		jne    jump_4214a
	jump_4217a:
		cmp    %cx,%dx
		jne    jump_42196
		xor    %eax,%eax
		mov    %cx,%ax
		mov    game_normals,%edi
		shl    $0x4,%eax
		mov    %esp,%esi
		add    %eax,%edi
		inc    %ecx
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
	jump_42196:
		mov    %edx,%eax
	jump_42198:
		mov    %cx,EXPORT_SYMBOL(next_normal)
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_421ac:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x10,%esp
		mov    EXPORT_SYMBOL(next_normal),%cx
		mov    EXPORT_SYMBOL(mem_game)+194,%ebx
		xor    %edx,%edx
		dec    %ebx
		mov    %cx,%dx
		cmp    %ebx,%edx
		jl     jump_421d3
		xor    %eax,%eax
		jmp    jump_42249
	jump_421d3:
		mov    %esp,%edx
		and    $0xffff,%eax
		call   calc_normal
		mov    EXPORT_SYMBOL(next_normal),%cx
		xor    %eax,%eax
		mov    %cx,%ax
		mov    %ecx,%edx
		cmp    $0x1,%eax
		jle    jump_4222b
		xor    %ecx,%edx
		test   %cx,%cx
		ja     jump_42203
		jmp    jump_4222b
	jump_421fb:
		inc    %edx
		cmp    %cx,%dx
		jb     jump_4220e
		jmp    jump_4222b
	jump_42203:
		mov    0x8(%esp),%ebp
		mov    0x4(%esp),%edi
		mov    (%esp),%esi
	jump_4220e:
		xor    %ebx,%ebx
		mov    %dx,%bx
		mov    game_normals,%eax
		shl    $0x4,%ebx
		add    %eax,%ebx
		cmp    (%ebx),%esi
		jne    jump_421fb
		cmp    0x4(%ebx),%edi
		jne    jump_421fb
		cmp    0x8(%ebx),%ebp
		jne    jump_421fb
	jump_4222b:
		cmp    %cx,%dx
		jne    jump_42247
		xor    %eax,%eax
		mov    %cx,%ax
		mov    game_normals,%edi
		shl    $0x4,%eax
		mov    %esp,%esi
		add    %eax,%edi
		inc    %ecx
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
	jump_42247:
		mov    %edx,%eax
	jump_42249:
		mov    %cx,EXPORT_SYMBOL(next_normal)
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4225c:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		xor    %esi,%esi
		mov    %ax,%si
		lea    0x0(,%esi,8),%eax
		add    %esi,%eax
		mov    game_objects,%edi
		shl    $0x2,%eax
		add    %eax,%edi
		xor    %ecx,%ecx
		mov    0x18(%edi),%ax
		mov    0x1a(%edi),%di
		mov    %eax,%ebx
		cmp    %di,%ax
		jmp    jump_4228f
	jump_4228b:
		inc    %ebx
		cmp    %di,%bx
	jump_4228f:
		ja     jump_422f1
		xor    %esi,%esi
		mov    %bx,%si
		imul   $0xa,%esi,%esi
		mov    EXPORT_SYMBOL(game_object_points),%eax
		mov    0x4(%esi,%eax,1),%eax
		sar    $0x10,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %ecx,%eax
		jle    jump_422c1
		mov    EXPORT_SYMBOL(game_object_points),%eax
		mov    0x4(%esi,%eax,1),%eax
		sar    $0x10,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ecx
	jump_422c1:
		xor    %esi,%esi
		mov    %bx,%si
		imul   $0xa,%esi,%esi
		mov    EXPORT_SYMBOL(game_object_points),%eax
		mov    (%esi,%eax,1),%eax
		sar    $0x10,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %ecx,%eax
		jle    jump_4228b
		mov    EXPORT_SYMBOL(game_object_points),%eax
		mov    (%esi,%eax,1),%eax
		sar    $0x10,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ecx
		jmp    jump_4228b
	jump_422f1:
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		add    %eax,%eax
		mov    %eax,%ecx
		shl    $0x4,%eax
		add    %ecx,%eax
		sar    $0x8,%eax
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
calc_object_height:	/* 0x04230C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		mov    EXPORT_SYMBOL(game_object_points),%esi
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,8),%eax
		mov    game_objects,%ecx
		add    %edx,%eax
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    0x18(%ecx,%eax,4),%dx
		mov    0x1a(%ecx,%eax,4),%cx
		and    $0xffff,%ecx
		cmp    %ecx,%edx
		jg     jump_4236c
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    %ecx,%edx
		shl    $0x2,%ecx
		add    %edx,%ecx
		add    %eax,%eax
		add    %ecx,%ecx
	jump_42356:
		mov    %esi,%edx
		mov    0x2(%edx,%eax,1),%edx
		sar    $0x10,%edx
		cmp    %ebx,%edx
		jle    jump_42365
		mov    %edx,%ebx
	jump_42365:
		add    $0xa,%eax
		cmp    %ecx,%eax
		jle    jump_42356
	jump_4236c:
		mov    %ebx,%eax
		mov    %esi,EXPORT_SYMBOL(game_object_points)
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
update_texture_from_anim_tmap:	/* 0x042380 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    EXPORT_SYMBOL(next_floor_texture),%bx
		mov    game_textures,%ebp
		mov    %eax,(%esp)
		xor    %edx,%edx
		jmp    jump_4239e
	jump_4239d:
		inc    %edx
	jump_4239e:
		xor    %eax,%eax
		mov    %dx,%ax
		cmp    $0xa,%eax
		jge    jump_423ea
		xor    %esi,%esi
		mov    (%esp),%si
		imul   $0x36,%esi,%esi
		mov    game_anim_tmaps,%ecx
		add    %eax,%eax
		add    %esi,%ecx
		add    %ecx,%eax
		mov    0x2(%eax),%cx
		test   %cx,%cx
		je     jump_4239d
		xor    %esi,%esi
		mov    %cx,%si
		imul   $0x12,%esi,%esi
		xor    %ecx,%ecx
		mov    %bx,%cx
		imul   $0x12,%ecx,%ecx
		add    %ebp,%esi
		lea    (%ecx,%ebp,1),%edi
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsw  %ds:(%esi),%es:(%edi)
		mov    %ebx,%edi
		inc    %ebx
		mov    %di,0x2(%eax)
		jmp    jump_4239d
	jump_423ea:
		mov    %ebp,game_textures
		mov    %bx,EXPORT_SYMBOL(next_floor_texture)
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
draw_purple_rect:	/* 0x042574 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    %eax,%edi
		mov    %edx,%esi
		mov    EXPORT_SYMBOL(lbDisplay)+96,%ah # lbDisplay__DrawFlags
		and    $0xef,%ah
		lea    (%edi,%ebx,1),%ebp
		mov    %ah,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		lea    (%edx,%ecx,1),%eax
		sub    $0x2,%ebp
		sub    $0x2,%eax
		mov    0x14(%esp),%dl
		mov    %eax,(%esp)
		test   %dl,%dl
		jne    jump_425c2
		push   $0x10
		mov    %esi,%edx
		mov    %edi,%eax
		call   ac_LbDrawBox
		push   $0xe
		mov    %esi,%ecx
		mov    %ebp,%ebx
		mov    %esi,%edx
		mov    %edi,%eax
		call   ac_LbDrawLine
		push   $0xe
		jmp    jump_425de
	jump_425c2:
		push   $0xe
		mov    %esi,%edx
		mov    %edi,%eax
		call   ac_LbDrawBox
		push   $0xc
		mov    %esi,%ecx
		mov    %ebp,%ebx
		mov    %esi,%edx
		mov    %edi,%eax
		call   ac_LbDrawLine
		push   $0xc
	jump_425de:
		mov    0x4(%esp),%ecx
		mov    %edi,%ebx
		mov    %esi,%edx
		mov    %edi,%eax
		call   ac_LbDrawLine
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
point_unkn_func_03:	/* 0x042864 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		xor    %ebx,%ebx
		mov    (%eax),%ecx
		mov    unkn2_pos_x,%bx
		sar    $0x10,%ecx
		imul   %ebx,%ecx
		xor    %edx,%edx
		mov    0x2(%eax),%ebx
		mov    unkn2_pos_y,%dx
		sar    $0x10,%ebx
		imul   %edx,%ebx
		xor    %esi,%esi
		mov    0x4(%eax),%edx
		mov    unkn2_pos_z,%si
		sar    $0x10,%edx
		imul   %esi,%edx
		sar    $0x6,%ecx
		mov    %cx,0x2(%eax)
		sar    $0x6,%ebx
		mov    %bx,0x4(%eax)
		sar    $0x6,%edx
		mov    %dx,0x6(%eax)
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_map_things_unkn_func_04)	/* 0x0428B8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x28,%esp
		mov    things,%esi
		mov    %eax,%edi
		xor    %edx,%edx
		mov    $0x7fffffff,%ebx
		mov    %edx,0x4(%esp)
		mov    engn_xc,%edx
		mov    engn_zc,%eax
		sar    $0x8,%edx
		mov    %ebx,0x24(%esp)
		lea    -0x14(%edx),%ebx
		sar    $0x8,%eax
		mov    %ebx,0x18(%esp)
		add    $0x14,%edx
		lea    0x14(%eax),%ebx
		mov    %edx,0xc(%esp)
		sub    $0x14,%eax
		mov    0x18(%esp),%edx
		mov    %eax,0x14(%esp)
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    0xc(%esp),%ecx
		add    %eax,%eax
		mov    %ebx,(%esp)
		mov    %eax,0x10(%esp)
		cmp    %ecx,%edx
		jge    jump_42a6d
		xor    %ebp,%ebp
	jump_42925:
		mov    0x14(%esp),%eax
		mov    %eax,0x20(%esp)
		mov    %eax,%ecx
		imul   $0x900,%eax,%eax
		add    0x10(%esp),%eax
		mov    (%esp),%ebx
		mov    %eax,0x1c(%esp)
		cmp    %ebx,%ecx
		jmp    jump_42982
	jump_42944:
		mov    0x10(%esp),%eax
		mov    0x18(%esp),%edx
		mov    0xc(%esp),%ebx
		add    $0x12,%eax
		inc    %edx
		mov    %eax,0x10(%esp)
		mov    %edx,0x18(%esp)
		cmp    %ebx,%edx
		jge    jump_42a6d
		jmp    jump_42925
	jump_42966:
		mov    0x1c(%esp),%ecx
		mov    0x20(%esp),%eax
		mov    (%esp),%edx
		add    $0x900,%ecx
		inc    %eax
		mov    %ecx,0x1c(%esp)
		mov    %eax,0x20(%esp)
		cmp    %edx,%eax
	jump_42982:
		jge    jump_42944
		mov    0x18(%esp),%ebx
		cmp    $0x80,%ebx
		jge    jump_42966
		mov    0x20(%esp),%ecx
		cmp    $0x80,%ecx
		jge    jump_42966
		test   %ebx,%ebx
		jle    jump_42966
		test   %ecx,%ecx
		jle    jump_42966
		mov    0x1c(%esp),%ebx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %ebx,%eax
		mov    0x8(%eax),%ax
		test   %ax,%ax
		je     jump_42966
	jump_429b8:
		movswl %ax,%edx
		test   %edx,%edx
		jle    jump_42a52
		imul   $0xa8,%edx,%edx
		mov    %esi,%ebx
		add    %esi,%edx
		xor    %esi,%ebx
		mov    0x9(%edx),%bl
		cmp    $0x9,%ebx
		jne    jump_42a34
		xor    %ebx,%ebx
		mov    %di,%bx
		test   %ebx,%ebx
		je     jump_429f2
		test   %di,%di
		je     jump_42a34
		mov    0x8(%edx),%dl
		and    $0xff,%edx
		cmp    %ebx,%edx
		jne    jump_42a34
	jump_429f2:
		movswl %ax,%ebx
		imul   $0xa8,%ebx,%edx
		lea    (%esi,%edx,1),%ecx
		mov    0x18(%ecx),%edx
		sar    $0x8,%edx
		sub    engn_xc,%edx
		imul   %edx,%edx
		mov    0x20(%ecx),%ecx
		sar    $0x8,%ecx
		sub    engn_zc,%ecx
		mov    %edx,0x8(%esp)
		mov    %ecx,%edx
		imul   %ecx,%edx
		add    0x8(%esp),%edx
		cmp    0x24(%esp),%edx
		jae    jump_42a34
		mov    %edx,0x24(%esp)
		mov    %ebx,0x4(%esp)
	jump_42a34:
		movswl %ax,%edx
		imul   $0xa8,%edx,%edx
		mov    %esi,%eax
		mov    0x2(%edx,%eax,1),%ax
		test   %ax,%ax
		jne    jump_429b8
		jmp    jump_42966
	jump_42a52:
		imul   $0x3c,%edx,%edx
		mov    EXPORT_SYMBOL(sthings),%eax
		mov    0x2(%edx,%eax,1),%ax
		test   %ax,%ax
		jne    jump_429b8
		jmp    jump_42966
	jump_42a6d:
		mov    0x4(%esp),%eax
		mov    %esi,things
		add    $0x28,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
rotate_texture:	/* 0x042AB8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		sub    $0x4,%esp
		mov    %eax,%edx
		test   %ax,%ax
		je     jump_42b93
		and    $0x3f,%ah
		cwtl
		call   is_animating
		mov    %eax,%esi
		test   %ax,%ax
		je     jump_42b47
		xor    %edx,%edx
		jmp    jump_42b2a
	jump_42ade:
		mov    0x2(%ebx,%eax,2),%ax
		and    $0xffff,%eax
		imul   $0x12,%eax,%eax
		mov    game_textures,%ebx
		add    %ebx,%eax
		xor    %ebx,%ebx
		mov    0x1(%eax),%bl
		mov    %ebx,(%esp)
		mov    0x2(%eax),%bl
		mov    (%eax),%cl
		mov    %bl,(%eax)
		mov    0x3(%eax),%bl
		mov    %bl,0x1(%eax)
		mov    0x4(%eax),%bl
		mov    %bl,0x2(%eax)
		mov    0x5(%eax),%bl
		mov    %bl,0x3(%eax)
		mov    0x6(%eax),%bl
		mov    %bl,0x4(%eax)
		mov    %cl,0x6(%eax)
		mov    0x7(%eax),%bl
		mov    %bl,0x5(%eax)
		mov    (%esp),%bl
		inc    %edx
		mov    %bl,0x7(%eax)
	jump_42b2a:
		movswl %si,%eax
		imul   $0x36,%eax,%eax
		mov    game_anim_tmaps,%ebx
		add    %eax,%ebx
		mov    0x20(%ebx),%ecx
		movswl %dx,%eax
		sar    $0x18,%ecx
		cmp    %ecx,%eax
		jle    jump_42ade
		jmp    jump_42b93
	jump_42b47:
		movswl %dx,%ebx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		mov    game_textures,%ebx
		add    %eax,%eax
		add    %ebx,%eax
		mov    0x2(%eax),%dl
		mov    (%eax),%bl
		mov    %dl,(%eax)
		xor    %ecx,%ecx
		mov    0x3(%eax),%dl
		mov    0x1(%eax),%cl
		mov    %dl,0x1(%eax)
		mov    0x4(%eax),%dl
		mov    %dl,0x2(%eax)
		mov    0x5(%eax),%dl
		mov    %dl,0x3(%eax)
		mov    0x6(%eax),%dl
		mov    %dl,0x4(%eax)
		mov    %bl,0x6(%eax)
		mov    0x7(%eax),%dl
		mov    %ecx,(%esp)
		mov    %dl,0x5(%eax)
		mov    (%esp),%dl
		mov    %dl,0x7(%eax)
	jump_42b93:
		add    $0x4,%esp
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_apply_full_light)	/* 0x042BA0 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		sub    $0xc,%esp
		mov    EXPORT_SYMBOL(next_unkn_full_light),%di
		mov    0x18(%esp),%esi
		mov    %eax,0x8(%esp)
		mov    %edx,0x4(%esp)
		mov    %ebx,(%esp)
		test   %si,%si
		je     jump_42be2
		xor    %edx,%edx
		xor    %eax,%eax
		jmp    jump_42bca
	jump_42bc6:
		add    $0xa,%eax
		inc    %edx
	jump_42bca:
		xor    %ebx,%ebx
		mov    %di,%bx
		cmp    %ebx,%edx
		jge    jump_42be2
		cmp    data_19f9c4(%eax),%si
		je     jump_42cee
		jmp    jump_42bc6
	jump_42be2:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(render_area_a),%ax
		mov    engn_xc,%edx
		shl    $0x7,%eax
		mov    0x8(%esp),%ebx
		sub    %eax,%edx
		cmp    %ebx,%edx
		jge    jump_42cee
		mov    engn_xc,%edx
		add    %eax,%edx
		cmp    %ebx,%edx
		jle    jump_42cee
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(render_area_b),%dx
		mov    engn_zc,%ebx
		shl    $0x7,%edx
		sub    %edx,%ebx
		mov    %ebx,%edx
		mov    (%esp),%ebx
		cmp    %ebx,%edx
		jge    jump_42cee
		add    engn_zc,%eax
		cmp    %ebx,%eax
		jle    jump_42cee
		xor    %eax,%eax
		mov    %di,%ax
		cmp    $0xa,%eax
		jge    jump_42cee
		xor    %eax,%eax
		mov    data_17fa52,%ax
		test   %eax,%eax
		jne    jump_42cee
		testb  $0x2,EXPORT_SYMBOL(ingame)+0x92F # ingame.Flags+0
		je     jump_42cee
		xor    %eax,%eax
		mov    in_network_game,%al
		test   %eax,%eax
		jne    jump_42cee
		mov    -0x2(%esp),%ebx
		mov    0x2(%esp),%edx
		mov    0x6(%esp),%eax
		and    $0xffff,%ecx
		sar    $0x10,%ebx
		sar    $0x10,%edx
		sar    $0x10,%eax
		mov    %di,EXPORT_SYMBOL(next_unkn_full_light)
		call   quick_light_unkn_func_05
		mov    EXPORT_SYMBOL(next_unkn_full_light),%di
		xor    %edx,%edx
		mov    %di,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    0x8(%esp),%edx
		mov    %dx,data_19f9be(,%eax,2)
		mov    0x4(%esp),%edx
		mov    %dx,data_19f9c0(,%eax,2)
		mov    (%esp),%edx
		mov    %dx,data_19f9c2(,%eax,2)
		mov    EXPORT_SYMBOL(next_full_light),%dx
		mov    %si,data_19f9c4(,%eax,2)
		dec    %edx
		inc    %edi
		mov    %dx,EXPORT_SYMBOL(unkn_full_lights)(,%eax,2)
	jump_42cee:
		mov    %di,EXPORT_SYMBOL(next_unkn_full_light)
		add    $0xc,%esp
		pop    %edi
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
is_animating:	/* 0x042D00 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    EXPORT_SYMBOL(next_anim_tmap),%si
		mov    game_anim_tmaps,%edi
		mov    %eax,%ecx
		test   %ax,%ax
		je     jump_42d44
		mov    $0xa,%eax
		jmp    jump_42d21
	jump_42d20:
		inc    %eax
	jump_42d21:
		xor    %ebx,%ebx
		movswl %ax,%edx
		mov    %si,%bx
		cmp    %ebx,%edx
		jge    jump_42d42
		imul   $0x36,%edx,%edx
		mov    %edi,%ebx
		add    %edi,%edx
		xor    %edi,%ebx
		mov    (%edx),%bx
		movswl %cx,%edx
		cmp    %edx,%ebx
		jne    jump_42d20
		jmp    jump_42d44
	jump_42d42:
		xor    %eax,%eax
	jump_42d44:
		mov    %edi,game_anim_tmaps
		mov    %si,EXPORT_SYMBOL(next_anim_tmap)
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_element_unkn_func_05)	/* 0x042D58 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    melement_ani,%esi
		mov    %edx,%edi
		mov    %ebx,%ebp
		movw   $0x7d00,(%ecx)
		mov    (%ecx),%dx
		mov    %dx,(%edi)
		mov    0x18(%esp),%edx
		movw   $0x8300,(%edx)
		mov    (%edx),%dx
		mov    %dx,(%ebx)
		xor    %edx,%edx
		mov    %ax,%dx
		mov    frame,%eax
		shl    $0x3,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    (%eax),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		add    %eax,%eax
		add    %esi,%eax
		cmp    %esi,%eax
		ja     jump_42dc2
		jmp    jump_42e61
	jump_42dac:
		mov    0x8(%eax),%ax
		and    $0xffff,%eax
		imul   $0xa,%eax,%eax
		add    %esi,%eax
		cmp    %esi,%eax
		jbe    jump_42e61
	jump_42dc2:
		jb     jump_42dac
		cmp    mele_ani_end,%eax
		ja     jump_42dac
		xor    %edx,%edx
		mov    m_sprites,%ebx
		mov    (%eax),%dx
		add    %ebx,%edx
		cmp    %ebx,%edx
		jbe    jump_42dac
		xor    %ebx,%ebx
		mov    0x4(%edx),%bl
		mov    %bx,0x4(%esp)
		mov    0x5(%edx),%dl
		xor    %dh,%dh
		mov    %dx,(%esp)
		testb  $0xfe,0x7(%eax)
		jne    jump_42dac
		mov    (%eax),%edx
		mov    0x2(%esp),%ebx
		sar    $0x10,%edx
		sar    $0x10,%ebx
		sar    %edx
		add    %ebx,%edx
		movswl 0x0(%ebp),%ebx
		cmp    %ebx,%edx
		jle    jump_42e12
		mov    %dx,0x0(%ebp)
	jump_42e12:
		mov    (%eax),%edx
		sar    $0x10,%edx
		movswl (%edi),%ebx
		sar    %edx
		cmp    %ebx,%edx
		jge    jump_42e23
		mov    %dx,(%edi)
	jump_42e23:
		mov    0x2(%eax),%ebx
		mov    -0x2(%esp),%edx
		sar    $0x10,%ebx
		sar    $0x10,%edx
		sar    %ebx
		add    %ebx,%edx
		mov    0x18(%esp),%ebx
		movswl (%ebx),%ebx
		cmp    %ebx,%edx
		jle    jump_42e46
		mov    0x18(%esp),%ebx
		mov    %dx,(%ebx)
	jump_42e46:
		mov    0x2(%eax),%edx
		sar    $0x10,%edx
		movswl (%ecx),%ebx
		sar    %edx
		cmp    %ebx,%edx
		jge    jump_42dac
		mov    %dx,(%ecx)
		jmp    jump_42dac
	jump_42e61:
		mov    %esi,melement_ani
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_generate_shadows_for_multicolor_sprites)	/* 0x042E70 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x40,%esp
		mov    $0x100,%esi
		mov    $0x240,%edi
		mov    EXPORT_SYMBOL(lbDisplay)+28,%eax # lbDisplay.PhysicalScreenHeight
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay)+24,%ebx # lbDisplay.PhysicalScreenWidth
		mov    %dx,0x28(%esp)
		mov    %edx,0x30(%esp)
		mov    %dx,0x24(%esp)
		mov    %eax,0x8(%esp)
		mov    %si,EXPORT_SYMBOL(overall_scale)
		shl    $0x8,%ebx
		mov    %edi,0x14(%esp)
		mov    $0x100,%edx
		mov    EXPORT_SYMBOL(lbDisplay)+36,%eax # lbDisplay.GraphicsScreenHeight
		mov    $0x18,%esi
		mov    %eax,0xc(%esp)
		mov    %edx,EXPORT_SYMBOL(lbDisplay)+28 # lbDisplay.PhysicalScreenHeight
		mov    EXPORT_SYMBOL(lbDisplay)+52,%eax # lbDisplay.GraphicsWindowHeight
		mov    %edx,EXPORT_SYMBOL(lbDisplay)+36 # lbDisplay.GraphicsScreenHeight
		mov    %eax,0x10(%esp)
		mov    %edx,EXPORT_SYMBOL(lbDisplay)+52 # lbDisplay.GraphicsWindowHeight
		mov    EXPORT_SYMBOL(lbDisplay)+4,%eax # lbDisplay.WScreen
		xor    %edx,%edx
		mov    %esi,0x18(%esp)
		call   ac_memset
		jmp    jump_42f0f
	jump_42ef0:
		mov    0x18(%esp),%ebp
		mov    0x14(%esp),%eax
		sub    $0x2,%ebp
		sub    $0x30,%eax
		mov    %ebp,0x18(%esp)
		mov    %eax,0x14(%esp)
		cmp    $0xfffffffe,%ebp
		je     jump_4314b
	jump_42f0f:
		mov    0x14(%esp),%ebp
		xor    %edi,%edi
		mov    0x18(%esp),%eax
		mov    %edi,0x2c(%esp)
		mov    %eax,0x4(%esp)
		jmp    jump_42f27
	jump_42f23:
		incl   0x2c(%esp)
	jump_42f27:
		xor    %eax,%eax
		mov    0x2c(%esp),%ax
		cmp    $0x3,%eax
		jg     jump_42ef0
		mov    0x4(%esp),%ebx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(word_154F4C)(%ebx),%dx
		add    %eax,%edx
		mov    nstart_ani,%eax
		xor    %edi,%edi
		mov    (%eax,%edx,2),%si
		jmp    jump_42fba
	jump_42f4f:
		mov    %bh,EXPORT_SYMBOL(sprshadow_F388)(%ecx,%ebp,1)
		mov    %dl,EXPORT_SYMBOL(sprshadow_F118)(%ecx,%ebp,1)
		mov    %dh,EXPORT_SYMBOL(sprshadow_EEA8)(%ecx,%ebp,1)
		mov    %bl,EXPORT_SYMBOL(sprshadow_F5F8)(%ecx,%ebp,1)
		mov    %bh,data_17f389(%ecx,%ebp,1)
		mov    %dl,data_17f119(%ecx,%ebp,1)
		mov    %dh,data_17eea9(%ecx,%ebp,1)
		mov    %bl,data_17f5f9(%ecx,%ebp,1)
	jump_42f87:
		xor    %eax,%eax
		mov    %si,%ax
		lea    0x0(,%eax,8),%edx
		mov    frame,%eax
		mov    0x6(%edx,%eax,1),%si
		xor    %edx,%edx
		mov    %si,%dx
		mov    0x6(%eax,%edx,8),%si
		mov    0x38(%esp),%eax
		mov    0x28(%esp),%edx
		inc    %eax
		add    %eax,%edx
		add    $0x2,%edi
		mov    %dx,0x28(%esp)
	jump_42fba:
		xor    %eax,%eax
		mov    %di,%ax
		cmp    $0x6,%eax
		jge    jump_42f23
		lea    0x3c(%esp),%eax
		lea    0x34(%esp),%ecx
		lea    0x38(%esp),%ebx
		push   %eax
		xor    %eax,%eax
		lea    0x24(%esp),%edx
		mov    %si,%ax
		call   ac_element_unkn_func_05
		mov    0x36(%esp),%edx
		mov    0x1e(%esp),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		sub    %eax,%edx
		mov    %edx,%eax
		mov    0x26(%esp),%edx
		inc    %eax
		sar    $0x10,%edx
		add    %edx,%eax
		cmp    $0xff,%eax
		jle    jump_43020
		mov    0x24(%esp),%eax
		xor    %ebx,%ebx
		mov    0x30(%esp),%edx
		mov    %bx,0x28(%esp)
		add    %eax,%edx
		mov    %bx,0x24(%esp)
		mov    %edx,0x30(%esp)
	jump_43020:
		mov    0x3a(%esp),%edx
		mov    0x32(%esp),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		sub    %eax,%edx
		mov    %edx,%eax
		mov    0x22(%esp),%edx
		inc    %eax
		sar    $0x10,%edx
		cmp    %edx,%eax
		jle    jump_4304c
		mov    0x3c(%esp),%eax
		sub    0x34(%esp),%eax
		inc    %eax
		mov    %ax,0x24(%esp)
	jump_4304c:
		mov    0x20(%esp),%eax
		mov    0x28(%esp),%ebx
		sub    %eax,%ebx
		mov    0x34(%esp),%ecx
		mov    %bx,0x28(%esp)
		mov    0x30(%esp),%eax
		mov    0x26(%esp),%edx
		sub    %ecx,%eax
		mov    $0xa,%ecx
		mov    %ax,0x1c(%esp)
		sar    $0x10,%edx
		mov    0x1a(%esp),%ebx
		xor    %eax,%eax
		sar    $0x10,%ebx
		mov    %si,%ax
		call   ac_draw_sorted_sprite1a
		mov    0x20(%esp),%bh
		add    0x28(%esp),%bh
		xor    %eax,%eax
		mov    0x2c(%esp),%ax
		mov    %eax,(%esp)
		imul   $0x6,%eax,%eax
		mov    0x34(%esp),%dl
		xor    %ecx,%ecx
		mov    0x1c(%esp),%dh
		mov    %di,%cx
		add    %ebp,%eax
		add    %dh,%dl
		mov    %bh,EXPORT_SYMBOL(sprshadow_EE90)(%ecx,%eax,1)
		mov    %dl,EXPORT_SYMBOL(sprshadow_F100)(%ecx,%eax,1)
		mov    0x38(%esp),%dh
		add    0x28(%esp),%dh
		mov    0x3c(%esp),%bl
		mov    %dh,EXPORT_SYMBOL(sprshadow_F370)(%ecx,%eax,1)
		mov    %dl,data_17f101(%ecx,%eax,1)
		add    0x1c(%esp),%bl
		mov    %dh,data_17f371(%ecx,%eax,1)
		mov    %bl,EXPORT_SYMBOL(sprshadow_F5E0)(%ecx,%eax,1)
		mov    %bh,data_17ee91(%ecx,%eax,1)
		mov    %bl,data_17f5e1(%ecx,%eax,1)
		cmpw   $0x0,0x2c(%esp)
		je     jump_42f4f
		mov    $0x8,%eax
		sub    (%esp),%eax
		imul   $0x6,%eax,%eax
		add    %ebp,%eax
		mov    %bh,EXPORT_SYMBOL(sprshadow_F370)(%ecx,%eax,1)
		mov    %dl,EXPORT_SYMBOL(sprshadow_F100)(%ecx,%eax,1)
		mov    %dh,EXPORT_SYMBOL(sprshadow_EE90)(%ecx,%eax,1)
		mov    %bl,EXPORT_SYMBOL(sprshadow_F5E0)(%ecx,%eax,1)
		mov    %bh,data_17f371(%ecx,%eax,1)
		mov    %dl,data_17f101(%ecx,%eax,1)
		mov    %dh,data_17ee91(%ecx,%eax,1)
		mov    %bl,data_17f5e1(%ecx,%eax,1)
		jmp    jump_42f87
	jump_4314b:
		xor    %eax,%eax
		mov    ingame__LastTmap,%al
		mov    $0xffffff80,%esi
		mov    $0x7f,%ebp
		mov    EXPORT_SYMBOL(vec_tmap)(,%eax,4),%eax
		xor    %ebx,%ebx
		call   ac_copy_from_screen_ani
		jmp    jump_43180
	jump_4316c:
		xor    %ecx,%ecx
		mov    %bx,%cx
		mov    %dl,EXPORT_SYMBOL(sprshadow_F850)(,%ecx,2)
		inc    %ebx
		mov    %al,data_17f851(,%ecx,2)
	jump_43180:
		xor    %eax,%eax
		mov    %bx,%ax
		cmp    $0x100,%eax
		jge    jump_431bf
		shl    $0x5,%eax
		mov    EXPORT_SYMBOL(lbSinTable)(%eax),%edx
		mov    EXPORT_SYMBOL(lbSinTable)+2048(%eax),%eax
		sar    $0x9,%edx
		sar    $0x9,%eax
		cmp    $0x7f,%edx
		jle    jump_431a8
		mov    %ebp,%edx
	jump_431a8:
		cmp    $0xffffff80,%edx
		jge    jump_431af
		mov    %esi,%edx
	jump_431af:
		cmp    $0x7f,%eax
		jle    jump_431b6
		mov    %ebp,%eax
	jump_431b6:
		cmp    $0xffffff80,%eax
		jge    jump_4316c
		mov    %esi,%eax
		jmp    jump_4316c
	jump_431bf:
		mov    0x8(%esp),%eax
		mov    %eax,EXPORT_SYMBOL(lbDisplay)+28 # lbDisplay.PhysicalScreenHeight
		mov    0xc(%esp),%eax
		mov    %eax,EXPORT_SYMBOL(lbDisplay)+36 # lbDisplay.GraphicsScreenHeight
		mov    0x10(%esp),%eax
		mov    %eax,EXPORT_SYMBOL(lbDisplay)+52 # lbDisplay.GraphicsWindowHeight
		add    $0x40,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
light_cmd_unkn_func_05:	/* 0x043410 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		mov    game_full_lights,%esi
		mov    EXPORT_SYMBOL(next_full_light),%di
		mov    %edx,%ecx
		cwtl
		test   %eax,%eax
		jge    jump_43474
		mov    %eax,%edx
		shl    $0x4,%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(sthings),%edx
		mov    0x30(%edx,%eax,4),%ax
		movswl %ax,%edx
		test   %edx,%edx
		je     jump_4348f
	jump_43441:
		test   %ax,%ax
		je     jump_4348f
		xor    %edx,%edx
		cwtl
		mov    %di,%dx
		cmp    %edx,%eax
		jg     jump_4348f
		test   %eax,%eax
		jl     jump_4348f
		shl    $0x5,%eax
		mov    %esi,%edx
		add    %esi,%eax
		xor    %esi,%edx
		mov    (%eax),%ebx
		mov    %cx,%dx
		sar    $0x10,%ebx
		imul   %ebx,%edx
		sar    $0x8,%edx
		mov    %dx,(%eax)
		mov    0x6(%eax),%ax
		jmp    jump_43441
	jump_43474:
		mov    %eax,%edx
		shl    $0x5,%edx
		lea    (%esi,%edx,1),%eax
		mov    (%eax),%ebx
		xor    %edx,%edx
		sar    $0x10,%ebx
		mov    %cx,%dx
		imul   %ebx,%edx
		sar    $0x8,%edx
		mov    %dx,(%eax)
	jump_4348f:
		mov    %di,EXPORT_SYMBOL(next_full_light)
		mov    %esi,game_full_lights
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
light_cmd_unkn_func_06:	/* 0x0434A4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x14,%esp
		mov    %eax,%edi
		xor    %edx,%edx
		mov    %edx,(%esp)
		xor    %edx,%edx
		mov    (%eax),%al
		mov    %edx,0x10(%esp)
		or     $0x20,%al
		je     jump_434d0
		decb   0x14(%edi)
		mov    0x11(%edi),%eax
		sar    $0x18,%eax
		test   %eax,%eax
		jg     jump_434d0
		andb   $0xdf,(%edi)
	jump_434d0:
		mov    0x11(%edi),%eax
		sar    $0x18,%eax
		test   %eax,%eax
		jg     jump_435cb
		xor    %ecx,%ecx
		mov    0xc(%edi),%cl
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		add    %eax,%eax
		lea    0x48000(%eax),%edx
		mov    %edx,0x4(%esp)
		mov    %eax,0x8(%esp)
		jmp    jump_43515
	jump_434fe:
		mov    0x4(%esp),%esi
		mov    0x8(%esp),%ebp
		inc    %ecx
		add    $0x12,%esi
		add    $0x12,%ebp
		mov    %esi,0x4(%esp)
		mov    %ebp,0x8(%esp)
	jump_43515:
		xor    %eax,%eax
		mov    0xe(%edi),%al
		cmp    %eax,%ecx
		jge    jump_4359f
		xor    %edx,%edx
		mov    0xd(%edi),%dl
		imul   $0x900,%edx,%eax
		mov    0x8(%esp),%ebx
		mov    0x4(%esp),%ebp
		mov    %ebx,0xc(%esp)
		add    %ebx,%eax
		jmp    jump_43543
	jump_4353d:
		add    $0x900,%eax
		inc    %edx
	jump_43543:
		xor    %ebx,%ebx
		mov    0xf(%edi),%bl
		cmp    %ebx,%edx
		jge    jump_434fe
		test   %ecx,%ecx
		jl     jump_435cb
		cmp    $0x80,%ecx
		jge    jump_435cb
		cmp    0xc(%esp),%eax
		jl     jump_435cb
		cmp    %ebp,%eax
		jge    jump_435cb
		mov    EXPORT_SYMBOL(game_my_big_map),%ebx
		mov    0x8(%ebx,%eax,1),%bx
		movswl %bx,%ebx
		test   %ebx,%ebx
		jle    jump_4353d
		imul   $0xa8,%ebx,%esi
		mov    things,%ebx
		mov    0x9(%esi,%ebx,1),%bl
		and    $0xff,%ebx
		cmp    $0x3,%ebx
		jne    jump_4353d
		movl   $0x1,0x10(%esp)
	jump_4359f:
		cmpw   $0x0,0x10(%esp)
		je     jump_435ba
		mov    (%esp),%al
		mov    (%edi),%bl
		movb   $0x14,0x14(%edi)
		and    $0xdf,%bl
		mov    %al,0x9(%edi)
		mov    %bl,(%edi)
		jmp    jump_435cb
	jump_435ba:
		mov    (%esp),%al
		mov    (%edi),%dh
		movb   $0x4,0x14(%edi)
		or     $0x20,%dh
		mov    %al,0x9(%edi)
		mov    %dh,(%edi)
	jump_435cb:
		add    $0x14,%esp
		pop    %ebp
	jump_435cf:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret

vtable_435d8:
		.long   func_438d6
		.long   func_439c9
		.long   func_436a5
		.long   func_436a5
		.long   func_436a5
		.long   func_4360e
		.long   func_43729
		.long   func_436a5


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_unkn_update_lights)	/* 0x0435F8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    $0x1,%edi
		cmp    EXPORT_SYMBOL(next_light_command),%di
		jmp    jump_436ce


/*----------------------------------------------------------------*/
func_4360e:
/*----------------------------------------------------------------*/
		mov    (%ebx),%ah
		test   $0x4,%ah
		je     jump_4365b
		mov    0x2(%ebx),%al
		dec    %al
		mov    %al,0x2(%ebx)
		movsbl %al,%eax
		test   %eax,%eax
		jge    func_436a5
		mov    0x6(%ebx),%al
		mov    %al,0x8(%ebx)
		mov    %al,0x2(%ebx)
		movsbl %al,%eax
		test   %eax,%eax
		jle    jump_43648
		mov    0x10(%ebx),%eax
		xor    %edx,%edx
		sar    $0x10,%eax
		mov    0x3(%ebx),%dl
		call   light_cmd_unkn_func_05
	jump_43648:
		mov    (%ebx),%ah
		and    $0xf9,%ah
		mov    %ah,%dl
		mov    %ah,(%ebx)
		or     $0x2,%dl
		mov    %dl,(%ebx)
		jmp    func_436a5
	jump_4365b:
		test   $0x2,%ah
		je     func_436a5
		mov    0x2(%ebx),%dh
		dec    %dh
		movsbl %dh,%eax
		mov    %dh,0x2(%ebx)
		test   %eax,%eax
		jge    func_436a5
		mov    0x5(%ebx),%al
		mov    %al,0x7(%ebx)
		mov    %al,0x2(%ebx)
		movsbl %al,%eax
		test   %eax,%eax
		jle    jump_43697
		mov    0x10(%ebx),%eax
		xor    %edx,%edx
		sar    $0x10,%eax
		mov    0x4(%ebx),%dl
		call   light_cmd_unkn_func_05
	jump_43697:
		mov    (%ebx),%cl
		and    $0xf9,%cl
		mov    %cl,(%ebx)
		mov    %cl,%ch
		or     $0x4,%ch
		mov    %ch,(%ebx)


/*----------------------------------------------------------------*/
func_436a5:
/*----------------------------------------------------------------*/
		testb  $0x10,(%ebx)
		je     jump_436b1
		mov    %ebx,%eax
		call   light_cmd_unkn_func_06
	jump_436b1:
		testb  $0x20,(%ebx)
		je     jump_436c3
		mov    0x10(%ebx),%eax
		xor    %edx,%edx
		sar    $0x10,%eax
		call   light_cmd_unkn_func_05
	jump_436c3:
		mov    EXPORT_SYMBOL(next_light_command),%bx
		inc    %edi
		cmp    %bx,%di
	jump_436ce:
		jae    jump_435cf
		test   %di,%di
		je     jump_436c3
		xor    %eax,%eax
		mov    %di,%ax
		imul   $0x24,%eax,%eax
		mov    game_light_commands,%ebx
		add    %eax,%ebx
		mov    0x10(%ebx),%edx
		sar    $0x10,%edx
		xor    %eax,%eax
		test   %edx,%edx
		jle    jump_4370a
		mov    game_full_lights,%ecx
		shl    $0x5,%edx
		cmp    0x4(%ecx,%edx,1),%di
		je     jump_4370a
		mov    $0x1,%eax
	jump_4370a:
		test   %ax,%ax
		jne    func_436a5
		mov    0x1(%ebx),%al
		dec    %al
		cmp    $0x7,%al
		ja     jump_43a56
		and    $0xff,%eax
		jmp    *%cs:vtable_435d8(,%eax,4)


/*----------------------------------------------------------------*/
func_43729:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    0xe(%ebx),%edx
		mov    EXPORT_SYMBOL(next_anim_tmap),%ax
		sar    $0x10,%edx
		cmp    %eax,%edx
		jl     jump_43741
		movw   $0x0,0x10(%ebx)
	jump_43741:
		cmpw   $0x0,0x10(%ebx)
		je     jump_43803
		mov    (%ebx),%ah
		test   $0x4,%ah
		je     jump_437a4
		mov    0xe(%ebx),%eax
		sar    $0x10,%eax
		imul   $0x36,%eax,%eax
		mov    game_anim_tmaps,%edx
		mov    0x22(%edx,%eax,1),%al
		and    $0xff,%eax
		xor    %edx,%edx
		inc    %eax
		mov    0x6(%ebx),%dl
		cmp    %edx,%eax
		je     jump_43782
		xor    %edx,%edx
		mov    0x5(%ebx),%dl
		cmp    %edx,%eax
		jne    func_436a5
	jump_43782:
		mov    0x10(%ebx),%eax
		xor    %edx,%edx
		sar    $0x10,%eax
		mov    0x3(%ebx),%dl
		call   light_cmd_unkn_func_05
		mov    (%ebx),%ch
		and    $0xf9,%ch
		mov    %ch,%al
		mov    %ch,(%ebx)
		or     $0x2,%al
		mov    %al,(%ebx)
		jmp    func_436a5
	jump_437a4:
		test   $0x2,%ah
		je     func_436a5
		mov    0xe(%ebx),%eax
		sar    $0x10,%eax
		imul   $0x36,%eax,%eax
		mov    game_anim_tmaps,%edx
		mov    0x22(%edx,%eax,1),%al
		and    $0xff,%eax
		xor    %edx,%edx
		inc    %eax
		mov    0x6(%ebx),%dl
		cmp    %edx,%eax
		je     func_436a5
		xor    %edx,%edx
		mov    0x5(%ebx),%dl
		cmp    %edx,%eax
		je     func_436a5
		mov    0x10(%ebx),%eax
		xor    %edx,%edx
		sar    $0x10,%eax
		mov    0x4(%ebx),%dl
		call   light_cmd_unkn_func_05
		mov    (%ebx),%dh
		and    $0xf9,%dh
		mov    %dh,%cl
		mov    %dh,(%ebx)
		or     $0x4,%cl
		mov    %cl,(%ebx)
		jmp    func_436a5
	jump_43803:
		mov    0x10(%ebx),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		jge    jump_43825
		imul   $0x3c,%edx,%eax
		mov    EXPORT_SYMBOL(sthings),%edx
		add    %edx,%eax
		mov    0x22(%eax),%dx
		shl    $0x7,%edx
		mov    0x1a(%eax),%ax
		jmp    jump_43847
	jump_43825:
		mov    %edx,%eax
		mov    game_full_lights,%edx
		shl    $0x5,%eax
		add    %edx,%eax
		mov    0xa(%eax),%edx
		sar    $0x10,%edx
		mov    0x6(%eax),%eax
		sar    $0x8,%edx
		sar    $0x10,%eax
		shl    $0x7,%edx
		sar    $0x8,%eax
	jump_43847:
		add    %edx,%eax
		cwtl
		imul   $0x12,%eax,%edx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		mov    (%edx,%eax,1),%ax
		and    $0x3f,%ah
		mov    %eax,%esi
		test   %ax,%ax
		je     jump_43893
		mov    $0xa,%eax
		jmp    jump_43868
	jump_43867:
		inc    %eax
	jump_43868:
		xor    %ecx,%ecx
		movswl %ax,%edx
		mov    EXPORT_SYMBOL(next_anim_tmap),%cx
		cmp    %ecx,%edx
		jge    jump_43891
		imul   $0x36,%edx,%ecx
		mov    game_anim_tmaps,%edx
		add    %ecx,%edx
		xor    %ecx,%ecx
		mov    (%edx),%cx
		movswl %si,%edx
		cmp    %edx,%ecx
		jne    jump_43867
		jmp    jump_43893
	jump_43891:
		xor    %eax,%eax
	jump_43893:
		mov    %ax,0x10(%ebx)
		test   %ax,%ax
		jne    func_436a5
		mov    0x10(%ebx),%edx
		sar    $0x10,%edx
		movb   $0x8,0x1(%ebx)
		test   %edx,%edx
		jge    jump_438c2
		imul   $0x3c,%edx,%edx
		mov    EXPORT_SYMBOL(sthings),%eax
		movw   $0x0,0x30(%edx,%eax,1)
		jmp    func_436a5
	jump_438c2:
		mov    game_full_lights,%eax
		shl    $0x5,%edx
		movw   $0x0,0x4(%edx,%eax,1)
		jmp    func_436a5


/*----------------------------------------------------------------*/
func_438d6:
/*----------------------------------------------------------------*/
		mov    (%ebx),%al
		test   $0x4,%al
		je     jump_43950
		mov    0x2(%ebx),%al
		dec    %al
		mov    %al,0x2(%ebx)
		movsbl %al,%eax
		test   %eax,%eax
		jge    func_436a5
		mov    0x5(%ebx),%al
		mov    0x6(%ebx),%ah
		cmp    %ah,%al
		jne    jump_438fe
		mov    %ah,0x8(%ebx)
		jmp    jump_43927
	jump_438fe:
		xor    %eax,%eax
		xor    %ecx,%ecx
		mov    0x5(%ebx),%al
		mov    0x6(%ebx),%cl
		sub    %ecx,%eax
		xor    %edx,%edx
		mov    %eax,%ecx
		call   ac_LbRandomAnyShort
		mov    %ax,%dx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		xor    %eax,%eax
		mov    0x6(%ebx),%al
		add    %eax,%edx
		mov    %dl,0x8(%ebx)
	jump_43927:
		mov    0x8(%ebx),%al
		mov    %al,0x2(%ebx)
		xor    %edx,%edx
		mov    0x10(%ebx),%eax
		mov    0x3(%ebx),%dl
		sar    $0x10,%eax
		call   light_cmd_unkn_func_05
		mov    (%ebx),%dl
		and    $0xf9,%dl
		mov    %dl,(%ebx)
		mov    %dl,%dh
		or     $0x2,%dh
		mov    %dh,(%ebx)
		jmp    func_436a5
	jump_43950:
		test   $0x2,%al
		je     func_436a5
		mov    0x2(%ebx),%dl
		dec    %dl
		movsbl %dl,%eax
		mov    %dl,0x2(%ebx)
		test   %eax,%eax
		jge    func_436a5
		mov    0x5(%ebx),%al
		mov    0x6(%ebx),%dh
		cmp    %dh,%al
		jne    jump_4397a
		mov    %dh,0x7(%ebx)
		jmp    jump_439a2
	jump_4397a:
		xor    %ecx,%ecx
		xor    %eax,%eax
		mov    %dh,%cl
		mov    0x5(%ebx),%al
		sub    %ecx,%eax
		xor    %edx,%edx
		mov    %eax,%ecx
		call   ac_LbRandomAnyShort
		mov    %ax,%dx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		xor    %eax,%eax
		mov    0x6(%ebx),%al
		add    %edx,%eax
		mov    %al,0x7(%ebx)
	jump_439a2:
		mov    0x10(%ebx),%eax
		xor    %edx,%edx
		sar    $0x10,%eax
		mov    0x4(%ebx),%dl
		movb   $0x0,0x2(%ebx)
		call   light_cmd_unkn_func_05
		mov    (%ebx),%cl
		and    $0xf9,%cl
		mov    %cl,(%ebx)
		mov    %cl,%ch
		or     $0x4,%ch
		mov    %ch,(%ebx)
		jmp    func_436a5


/*----------------------------------------------------------------*/
func_439c9:
/*----------------------------------------------------------------*/
		testb  $0x8,(%ebx)
		je     jump_43a12
		xor    %eax,%eax
		mov    0xa(%ebx),%cx
		mov    0x6(%ebx),%al
		add    %eax,%ecx
		mov    %cx,0xa(%ebx)
		xor    %eax,%eax
		mov    0x8(%ebx),%edx
		mov    0x3(%ebx),%al
		sar    $0x10,%edx
		cmp    %eax,%edx
		jl     jump_439fc
		xor    %eax,%eax
		mov    (%ebx),%ch
		mov    0x3(%ebx),%al
		and    $0xf7,%ch
		mov    %ax,0xa(%ebx)
		mov    %ch,(%ebx)
	jump_439fc:
		mov    0x10(%ebx),%eax
		xor    %edx,%edx
		sar    $0x10,%eax
		mov    0xa(%ebx),%dx
		call   light_cmd_unkn_func_05
		jmp    func_436a5
	jump_43a12:
		xor    %eax,%eax
		mov    0xa(%ebx),%dx
		mov    0x5(%ebx),%al
		sub    %eax,%edx
		mov    %dx,0xa(%ebx)
		xor    %eax,%eax
		mov    0x8(%ebx),%edx
		mov    0x4(%ebx),%al
		sar    $0x10,%edx
		cmp    %eax,%edx
		jg     jump_43a40
		xor    %eax,%eax
		mov    (%ebx),%cl
		mov    0x4(%ebx),%al
		or     $0x8,%cl
		mov    %ax,0xa(%ebx)
		mov    %cl,(%ebx)
	jump_43a40:
		mov    0x10(%ebx),%eax
		xor    %edx,%edx
		sar    $0x10,%eax
		mov    0xa(%ebx),%dx
		call   light_cmd_unkn_func_05
		jmp    func_436a5
	jump_43a56:
		mov    0x10(%ebx),%eax
		mov    $0x100,%edx
		sar    $0x10,%eax
		call   light_cmd_unkn_func_05
		jmp    func_436a5


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_quick_light_unkn_func_04)	/* 0x043B68 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x10,%esp
		mov    EXPORT_SYMBOL(sthings),%ebp
		mov    %ecx,%edi
		cwtl
		sar    $0x8,%eax
		mov    %ax,0x8(%esp)
		movswl %bx,%eax
		mov    $0xfffffff9,%edx
		sar    $0x8,%eax
		mov    %dx,0xc(%esp)
		mov    %ax,0x4(%esp)
		jmp    jump_43b9b
	jump_43b96:
		incw   0xc(%esp)
	jump_43b9b:
		mov    0xa(%esp),%eax
		sar    $0x10,%eax
		cmp    $0x7,%eax
		jge    jump_43d18
		movw   $0xfff9,(%esp)
		jmp    jump_43c12
	jump_43bb3:
		xor    %edx,%edx
		mov    0x52(%eax),%ax
		mov    %di,%dx
		add    %ecx,%eax
		and    $0xffff,%eax
		call   quick_light_unkn_func_07
		inc    %ecx
	jump_43bc9:
		movswl %bx,%eax
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %edx,%eax
		movswl %cx,%edx
		movzbl 0x56(%eax),%esi
		cmp    %esi,%edx
		jl     jump_43bb3
	jump_43be5:
		movswl %bx,%edx
		imul   $0xa8,%edx,%edx
		mov    things,%eax
		mov    EXPORT_SYMBOL(sthings),%ebp
		jmp    jump_43c00
	jump_43bfb:
		imul   $0x3c,%eax,%eax
		mov    %ebp,%edx
	jump_43c00:
		mov    0x2(%edx,%eax,1),%bx
		test   %bx,%bx
		jne    jump_43cbd
	jump_43c0e:
		incw   (%esp)
	jump_43c12:
		mov    -0x2(%esp),%edx
		sar    $0x10,%edx
		cmp    $0x7,%edx
		jge    jump_43b96
		mov    0x6(%esp),%esi
		mov    0xa(%esp),%eax
		sar    $0x10,%esi
		sar    $0x10,%eax
		add    %esi,%eax
		test   %eax,%eax
		jle    jump_43c0e
		cmp    $0x80,%eax
		jge    jump_43c0e
		mov    0x2(%esp),%esi
		sar    $0x10,%esi
		add    %esi,%edx
		test   %edx,%edx
		jle    jump_43c0e
		cmp    $0x80,%edx
		jge    jump_43c0e
		shl    $0x7,%edx
		add    %edx,%eax
		imul   $0x12,%eax,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		add    %edx,%eax
		mov    0x2(%eax),%si
		mov    %ebp,EXPORT_SYMBOL(sthings)
		test   %si,%si
		je     jump_43c7b
		xor    %edx,%edx
		mov    %di,%dx
		call   quick_light_unkn_func_09
	jump_43c7b:
		mov    0x2(%esp),%esi
		mov    -0x2(%esp),%edx
		sar    $0x10,%esi
		sar    $0x10,%edx
		mov    0x6(%esp),%eax
		add    %edx,%esi
		mov    0xa(%esp),%edx
		sar    $0x10,%eax
		sar    $0x10,%edx
		shl    $0x7,%esi
		add    %edx,%eax
		add    %esi,%eax
		imul   $0x12,%eax,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0x8(%edx,%eax,1),%bx
		mov    EXPORT_SYMBOL(sthings),%ebp
		test   %bx,%bx
		je     jump_43c0e
	jump_43cbd:
		movswl %bx,%eax
		test   %eax,%eax
		jle    jump_43bfb
		imul   $0xa8,%eax,%edx
		mov    things,%eax
		mov    0x9(%edx,%eax,1),%al
		and    $0xff,%eax
		mov    %ebp,EXPORT_SYMBOL(sthings)
		cmp    $0x9,%eax
		je     jump_43cf0
		cmp    $0x37,%eax
		jne    jump_43be5
	jump_43cf0:
		movswl %bx,%eax
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		mov    0x8(%edx,%eax,1),%al
		and    $0xff,%eax
		cmp    $0x20,%eax
		je     jump_43be5
		xor    %ecx,%ecx
		jmp    jump_43bc9
	jump_43d18:
		decw   EXPORT_SYMBOL(next_full_light)
		mov    %ebp,EXPORT_SYMBOL(sthings)
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
quick_light_unkn_func_05:	/* 0x043D2C */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x28,%esp
		mov    %ax,0x1c(%esp)
		mov    %dx,0x10(%esp)
		mov    %bx,0x4(%esp)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(next_full_light),%ax
		mov    %eax,%edx
		mov    game_full_lights,%eax
		shl    $0x5,%edx
		add    %edx,%eax
		movw   $0x0,0x10(%eax)
		movw   $0x0,0x12(%eax)
		mov    %cx,(%eax)
		mov    %cx,0x2(%eax)
		mov    %cx,0xe(%eax)
		mov    0x1c(%esp),%edx
		mov    %bx,0xc(%eax)
		mov    %dx,0x8(%eax)
		mov    0x10(%esp),%edx
		mov    %dx,0xa(%eax)
		mov    0x1a(%esp),%eax
		sar    $0x10,%eax
		sar    $0x8,%eax
		mov    %ax,0x24(%esp)
		mov    0x2(%esp),%eax
		sar    $0x10,%eax
		sar    $0x8,%eax
		mov    %ax,0x14(%esp)
		mov    0x24(%esp),%eax
		mov    $0xfffffff9,%edx
		add    $0xfff9,%eax
		mov    %dx,0x20(%esp)
		mov    %eax,0x18(%esp)
		jmp    jump_43dca
	jump_43db7:
		mov    0x18(%esp),%ecx
		mov    0x20(%esp),%esi
		inc    %ecx
		inc    %esi
		mov    %ecx,0x18(%esp)
		mov    %si,0x20(%esp)
	jump_43dca:
		mov    0x1e(%esp),%eax
		sar    $0x10,%eax
		cmp    $0x7,%eax
		jge    jump_43f7a
		mov    0x18(%esp),%eax
		mov    %eax,(%esp)
		mov    0x14(%esp),%eax
		mov    $0xfffffff9,%ebx
		add    $0xfff9,%eax
		mov    %bx,0x8(%esp)
		mov    %eax,0xc(%esp)
		jmp    jump_43ead
	jump_43dfd:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(next_full_light),%dx
		mov    0x6(%esp),%ecx
		push   %edx
		mov    0x16(%esp),%edx
		sar    $0x10,%ecx
		sar    $0x10,%edx
		mov    0x12(%esp),%ebx
		add    %ecx,%edx
		mov    0x52(%eax),%ax
		shl    $0x8,%edx
		mov    0x26(%esp),%ecx
		push   %edx
		mov    0x26(%esp),%edx
		sar    $0x10,%ecx
		sar    $0x10,%edx
		sar    $0x10,%ebx
		add    %ecx,%edx
		add    %edi,%eax
		shl    $0x8,%edx
		mov    0xa(%esp),%ecx
		push   %edx
		mov    0x26(%esp),%edx
		sar    $0x10,%ecx
		sar    $0x10,%edx
		and    $0xffff,%eax
		call   quick_light_unkn_func_06
		inc    %edi
	jump_43e55:
		movswl %si,%eax
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %edx,%eax
		xor    %edx,%edx
		movswl %di,%ecx
		mov    0x56(%eax),%dl
		cmp    %edx,%ecx
		jl     jump_43dfd
	jump_43e72:
		movswl %si,%eax
		imul   $0xa8,%eax,%eax
		mov    things,%esi
		jmp    jump_43e8c
	jump_43e83:
		imul   $0x3c,%eax,%eax
		mov    EXPORT_SYMBOL(sthings),%esi
	jump_43e8c:
		mov    0x2(%esi,%eax,1),%si
		test   %si,%si
		jne    jump_43f3b
	jump_43e9a:
		mov    0xc(%esp),%edi
		mov    0x8(%esp),%eax
		inc    %edi
		inc    %eax
		mov    %edi,0xc(%esp)
		mov    %ax,0x8(%esp)
	jump_43ead:
		mov    0x6(%esp),%esi
		sar    $0x10,%esi
		cmp    $0x7,%esi
		jge    jump_43db7
		mov    0x1e(%esp),%eax
		mov    0x22(%esp),%ebp
		sar    $0x10,%eax
		sar    $0x10,%ebp
		add    %eax,%ebp
		test   %ebp,%ebp
		jle    jump_43e9a
		cmp    $0x80,%ebp
		jge    jump_43e9a
		mov    0x12(%esp),%eax
		sar    $0x10,%eax
		add    %eax,%esi
		test   %esi,%esi
		jle    jump_43e9a
		cmp    $0x80,%esi
		jge    jump_43e9a
		shl    $0x7,%esi
		add    %ebp,%esi
		imul   $0x12,%esi,%esi
		mov    0xe(%esp),%ecx
		xor    %eax,%eax
		mov    0x1a(%esp),%ebx
		mov    EXPORT_SYMBOL(next_full_light),%ax
		xor    %edx,%edx
		push   %eax
		mov    0x6(%esp),%eax
		mov    0x10(%esp),%dx
		sar    $0x10,%eax
		sar    $0x10,%ecx
		push   %eax
		xor    %eax,%eax
		sar    $0x10,%ebx
		mov    0x8(%esp),%ax
		call   quick_light_unkn_func_08
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		mov    0x8(%esi,%eax,1),%si
		test   %si,%si
		je     jump_43e9a
	jump_43f3b:
		movswl %si,%eax
		test   %eax,%eax
		jle    jump_43e83
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x9(%eax),%dl
		cmp    $0x9,%edx
		jne    jump_43e72
		mov    0x8(%eax),%al
		and    $0xff,%eax
		cmp    $0x20,%eax
		je     jump_43e72
		xor    %edi,%edi
		jmp    jump_43e55
	jump_43f7a:
		incw   EXPORT_SYMBOL(next_full_light)
		add    $0x28,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
quick_light_unkn_func_06:	/* 0x043F88 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x58,%esp
		mov    EXPORT_SYMBOL(next_quick_light),%si
		mov    0x70(%esp),%edi
		mov    %edx,0x2c(%esp)
		mov    %ebx,0x38(%esp)
		mov    %ecx,0x28(%esp)
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    game_objects,%edx
		shl    $0x2,%eax
		add    %edx,%eax
		mov    0x4(%eax),%dx
		mov    %edx,0x40(%esp)
		mov    0x6(%eax),%dx
		mov    %edx,0x48(%esp)
		mov    0x8(%eax),%dx
		mov    %edx,0x54(%esp)
		mov    (%eax),%dx
		mov    %edx,0x4c(%esp)
		mov    0x2(%eax),%dx
		mov    %edx,0x50(%esp)
		mov    0x12(%eax),%edx
		sar    $0x10,%edx
		mov    %edx,0x30(%esp)
		mov    0xc(%eax),%edx
		sar    $0x10,%edx
		mov    0x38(%esp),%ecx
		mov    %edx,0x34(%esp)
		mov    0x30(%esp),%ebx
		mov    0x34(%esp),%ebp
		mov    0x2c(%esp),%edx
		sub    %ebp,%ecx
		sub    %ebx,%edx
		mov    %ecx,%ebx
		imul   %ecx,%ebx
		mov    0x14(%eax),%eax
		sar    $0x10,%eax
		mov    0x28(%esp),%ebp
		mov    %eax,0x24(%esp)
		sub    %eax,%ebp
		mov    %edx,%eax
		imul   %edx,%eax
		add    %eax,%ebx
		mov    %ebp,%eax
		imul   %ebp,%eax
		add    %ebx,%eax
		call   ac_LbSqrL
		mov    %eax,%ebx
		test   %eax,%eax
		jne    jump_44040
		mov    $0x1,%ebx
	jump_44040:
		neg    %edx
		shl    $0x8,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %ecx,%edx
		neg    %edx
		shl    $0x8,%edx
		mov    %eax,0x18(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %ebp,%edx
		neg    %edx
		shl    $0x8,%edx
		mov    %eax,0x1c(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    EXPORT_SYMBOL(next_quick_light),%si
		mov    0x50(%esp),%ebx
		mov    %eax,0x20(%esp)
		xor    %edx,%edx
		test   %bx,%bx
		jbe    jump_440f7
		mov    0x4c(%esp),%ecx
	jump_4408e:
		xor    %eax,%eax
		xor    %ebx,%ebx
		mov    0x4c(%esp),%ax
		mov    %dx,%bx
		add    %ebx,%eax
		mov    game_object_faces,%ebx
		shl    $0x5,%eax
		add    %eax,%ebx
		xor    %eax,%eax
		mov    0x1a(%ebx),%ax
		mov    %si,EXPORT_SYMBOL(next_quick_light)
		cmp    $0x1,%eax
		jl     jump_440c0
		cmp    $0x2710,%eax
		jl     jump_440ce
	jump_440c0:
		xor    %eax,%eax
		mov    %cx,%ax
		call   func_421ac
		mov    %ax,0x1a(%ebx)
	jump_440ce:
		mov    EXPORT_SYMBOL(next_quick_light),%si
		xor    %eax,%eax
		mov    0x1a(%ebx),%ax
		mov    game_normals,%ebx
		shl    $0x4,%eax
		inc    %edx
		movl   $0xffffffff,0xc(%ebx,%eax,1)
		mov    0x50(%esp),%eax
		inc    %ecx
		cmp    %ax,%dx
		jb     jump_4408e
	jump_440f7:
		mov    0x54(%esp),%ebx
		xor    %edx,%edx
		test   %bx,%bx
		jbe    jump_44172
		mov    0x48(%esp),%ecx
	jump_4410a:
		xor    %ebx,%ebx
		xor    %eax,%eax
		mov    0x48(%esp),%bx
		mov    %dx,%ax
		add    %ebx,%eax
		imul   $0x28,%eax,%eax
		mov    game_object_faces4,%ebx
		add    %eax,%ebx
		movzwl 0x20(%ebx),%ebp
		mov    %si,EXPORT_SYMBOL(next_quick_light)
		cmp    $0x1,%ebp
		jl     jump_4413b
		cmp    $0x2710,%ebp
		jl     jump_44149
	jump_4413b:
		xor    %eax,%eax
		mov    %cx,%ax
		call   func_420f8
		mov    %ax,0x20(%ebx)
	jump_44149:
		mov    EXPORT_SYMBOL(next_quick_light),%si
		xor    %eax,%eax
		mov    0x20(%ebx),%ax
		mov    game_normals,%ebx
		shl    $0x4,%eax
		inc    %edx
		movl   $0xffffffff,0xc(%ebx,%eax,1)
		mov    0x54(%esp),%eax
		inc    %ecx
		cmp    %ax,%dx
		jb     jump_4410a
	jump_44172:
		xor    %edx,%edx
		mov    0x50(%esp),%ebx
		mov    %edx,0x44(%esp)
		test   %bx,%bx
		ja     jump_4419c
		jmp    jump_4446f
	jump_44186:
		mov    0x44(%esp),%ecx
		inc    %ecx
		mov    0x50(%esp),%edx
		mov    %ecx,0x44(%esp)
		cmp    %dx,%cx
		jae    jump_4446f
	jump_4419c:
		xor    %eax,%eax
		mov    %si,%ax
		cmp    $0xfa00,%eax
		jge    jump_44838
		xor    %edx,%edx
		xor    %eax,%eax
		mov    0x4c(%esp),%dx
		mov    0x44(%esp),%ax
		add    %edx,%eax
		mov    game_object_faces,%ecx
		shl    $0x5,%eax
		add    %eax,%ecx
		xor    %eax,%eax
		mov    0x1a(%ecx),%ax
		mov    game_normals,%ebx
		shl    $0x4,%eax
		add    %eax,%ebx
		mov    (%ebx),%eax
		mov    0x4(%ebx),%edx
		mov    %eax,0x10(%esp)
		mov    0x8(%ebx),%eax
		mov    0xc(%ebx),%ebp
		mov    %eax,(%esp)
		cmp    $0xffffffff,%ebp
		jne    jump_4421a
		mov    0x10(%esp),%eax
		imul   0x18(%esp),%eax
		imul   0x1c(%esp),%edx
		mov    0x20(%esp),%ebp
		add    %edx,%eax
		mov    (%esp),%edx
		imul   %ebp,%edx
		lea    (%eax,%edx,1),%ebp
		sar    $0x8,%ebp
		test   %ebp,%ebp
		jl     jump_44186
		mov    %ebp,0xc(%ebx)
	jump_4421a:
		xor    %eax,%eax
		mov    (%ecx),%ax
		imul   $0xa,%eax,%eax
		mov    EXPORT_SYMBOL(game_object_points),%edx
		add    %eax,%edx
		mov    (%edx),%eax
		mov    0x30(%esp),%ebx
		sar    $0x10,%eax
		add    %ebx,%eax
		mov    0x2c(%esp),%ebx
		sub    %ebx,%eax
		mov    %eax,0xc(%esp)
		mov    0x2(%edx),%eax
		mov    0x34(%esp),%ebx
		sar    $0x10,%eax
		add    %ebx,%eax
		sub    0x38(%esp),%eax
		imul   %eax,%eax
		mov    0x4(%edx),%edx
		sar    $0x10,%edx
		add    0x24(%esp),%edx
		sub    0x28(%esp),%edx
		mov    0xc(%esp),%ebx
		imul   %ebx,%ebx
		add    %ebx,%eax
		mov    %edx,%ebx
		imul   %edx,%ebx
		add    %eax,%ebx
		sar    $0x8,%ebx
		test   %ebx,%ebx
		jne    jump_4427c
		mov    $0x1,%ebx
	jump_4427c:
		mov    %ebp,%edx
		shl    $0x8,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,%ebx
		xor    %eax,%eax
		mov    %di,%ax
		mov    game_full_lights,%edx
		shl    $0x5,%eax
		add    %edx,%eax
		movswl (%eax),%eax
		imul   %ebx,%eax
		sar    $0x8,%eax
		cmp    $0x3,%eax
		jle    jump_442dc
		xor    %eax,%eax
		mov    %si,%ax
		imul   $0x6,%eax,%eax
		mov    game_quick_lights,%edx
		add    %edx,%eax
		mov    %edx,0x4(%esp)
		mov    0x14(%ecx),%dx
		mov    %dx,0x4(%eax)
		mov    %si,0x14(%ecx)
		mov    %di,0x2(%eax)
		xor    %eax,%eax
		mov    %si,%ax
		imul   $0x6,%eax,%eax
		add    0x4(%esp),%eax
		inc    %esi
		mov    %bx,(%eax)
	jump_442dc:
		xor    %eax,%eax
		mov    0x2(%ecx),%ax
		imul   $0xa,%eax,%eax
		mov    EXPORT_SYMBOL(game_object_points),%edx
		add    %eax,%edx
		mov    (%edx),%eax
		mov    0x30(%esp),%ebx
		sar    $0x10,%eax
		add    %ebx,%eax
		mov    0x2c(%esp),%ebx
		sub    %ebx,%eax
		mov    %eax,0xc(%esp)
		mov    0x2(%edx),%eax
		mov    0x34(%esp),%ebx
		sar    $0x10,%eax
		add    %ebx,%eax
		mov    0x38(%esp),%ebx
		sub    %ebx,%eax
		mov    %eax,%ebx
		imul   %ebx,%ebx
		mov    0x4(%edx),%edx
		sar    $0x10,%edx
		add    0x24(%esp),%edx
		sub    0x28(%esp),%edx
		imul   %edx,%edx
		mov    0xc(%esp),%eax
		imul   %eax,%eax
		add    %eax,%ebx
		add    %edx,%ebx
		sar    $0x8,%ebx
		test   %ebx,%ebx
		jne    jump_44341
		mov    $0x1,%ebx
	jump_44341:
		mov    %ebp,%edx
		shl    $0x8,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,%ebx
		xor    %eax,%eax
		mov    %di,%ax
		mov    game_full_lights,%edx
		shl    $0x5,%eax
		add    %edx,%eax
		movswl (%eax),%eax
		imul   %ebx,%eax
		sar    $0x8,%eax
		cmp    $0x3,%eax
		jle    jump_443a0
		xor    %edx,%edx
		mov    %si,%dx
		imul   $0x6,%edx,%edx
		mov    game_quick_lights,%eax
		add    %eax,%edx
		mov    %eax,0x4(%esp)
		mov    0x16(%ecx),%ax
		mov    %ax,0x4(%edx)
		xor    %eax,%eax
		mov    %si,%ax
		imul   $0x6,%eax,%eax
		mov    %si,0x16(%ecx)
		mov    %di,0x2(%edx)
		add    0x4(%esp),%eax
		inc    %esi
		mov    %bx,(%eax)
	jump_443a0:
		xor    %eax,%eax
		mov    0x4(%ecx),%ax
		imul   $0xa,%eax,%eax
		mov    EXPORT_SYMBOL(game_object_points),%edx
		add    %eax,%edx
		mov    (%edx),%eax
		mov    0x30(%esp),%ebx
		sar    $0x10,%eax
		add    %ebx,%eax
		sub    0x2c(%esp),%eax
		imul   %eax,%eax
		mov    0x2(%edx),%ebx
		sar    $0x10,%ebx
		mov    %ebx,0x4(%esp)
		mov    0x34(%esp),%ebx
		add    0x4(%esp),%ebx
		sub    0x38(%esp),%ebx
		mov    %ebx,0xc(%esp)
		mov    %eax,0x4(%esp)
		mov    0xc(%esp),%eax
		imul   %eax,%eax
		mov    0x4(%edx),%edx
		sar    $0x10,%edx
		add    0x24(%esp),%edx
		sub    0x28(%esp),%edx
		imul   %edx,%edx
		mov    0x4(%esp),%ebx
		add    %eax,%ebx
		add    %edx,%ebx
		sar    $0x8,%ebx
		test   %ebx,%ebx
		jne    jump_4440d
		mov    $0x1,%ebx
	jump_4440d:
		mov    %ebp,%edx
		shl    $0x8,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,%ebx
		xor    %eax,%eax
		mov    %di,%ax
		mov    game_full_lights,%edx
		shl    $0x5,%eax
		movswl (%edx,%eax,1),%eax
		imul   %ebx,%eax
		sar    $0x8,%eax
		cmp    $0x3,%eax
		jle    jump_44186
		xor    %eax,%eax
		mov    %si,%ax
		imul   $0x6,%eax,%eax
		mov    game_quick_lights,%ebp
		lea    (%eax,%ebp,1),%edx
		mov    0x18(%ecx),%ax
		mov    %ax,0x4(%edx)
		xor    %eax,%eax
		mov    %si,%ax
		imul   $0x6,%eax,%eax
		mov    %si,0x18(%ecx)
		mov    %di,0x2(%edx)
		inc    %esi
		mov    %bx,(%eax,%ebp,1)
		jmp    jump_44186
	jump_4446f:
		xor    %ebx,%ebx
		mov    0x54(%esp),%ecx
		mov    %ebx,0x3c(%esp)
		test   %cx,%cx
		ja     jump_44499
		jmp    jump_44838
	jump_44483:
		mov    0x3c(%esp),%eax
		inc    %eax
		mov    0x54(%esp),%edx
		mov    %eax,0x3c(%esp)
		cmp    %dx,%ax
		jae    jump_44838
	jump_44499:
		xor    %eax,%eax
		mov    %si,%ax
		cmp    $0xfa00,%eax
		jge    jump_44838
		xor    %edx,%edx
		xor    %eax,%eax
		mov    0x48(%esp),%dx
		mov    0x3c(%esp),%ax
		add    %edx,%eax
		imul   $0x28,%eax,%eax
		mov    game_object_faces4,%ecx
		add    %eax,%ecx
		xor    %ebx,%ebx
		mov    0x20(%ecx),%bx
		mov    game_normals,%eax
		shl    $0x4,%ebx
		add    %eax,%ebx
		mov    0x4(%ebx),%edx
		mov    (%ebx),%eax
		mov    %edx,0x8(%esp)
		mov    0x8(%ebx),%edx
		mov    0xc(%ebx),%ebp
		mov    %edx,0x14(%esp)
		cmp    $0xffffffff,%ebp
		jne    jump_44515
		imul   0x18(%esp),%eax
		mov    0x8(%esp),%edx
		imul   0x1c(%esp),%edx
		mov    0x20(%esp),%ebp
		add    %eax,%edx
		imul   0x14(%esp),%ebp
		add    %edx,%ebp
		sar    $0x8,%ebp
		test   %ebp,%ebp
		jl     jump_44483
		mov    %ebp,0xc(%ebx)
	jump_44515:
		xor    %edx,%edx
		mov    (%ecx),%dx
		imul   $0xa,%edx,%edx
		mov    EXPORT_SYMBOL(game_object_points),%eax
		add    %eax,%edx
		mov    (%edx),%eax
		mov    0x30(%esp),%ebx
		sar    $0x10,%eax
		add    %ebx,%eax
		mov    0x2c(%esp),%ebx
		sub    %ebx,%eax
		mov    %eax,%ebx
		imul   %ebx,%ebx
		mov    0x2(%edx),%eax
		sar    $0x10,%eax
		mov    %eax,0xc(%esp)
		mov    0x34(%esp),%eax
		add    0xc(%esp),%eax
		mov    0x4(%edx),%edx
		sub    0x38(%esp),%eax
		sar    $0x10,%edx
		mov    %eax,0xc(%esp)
		mov    0x24(%esp),%eax
		add    %edx,%eax
		sub    0x28(%esp),%eax
		mov    0xc(%esp),%edx
		imul   %edx,%edx
		add    %ebx,%edx
		mov    %eax,%ebx
		imul   %eax,%ebx
		add    %edx,%ebx
		sar    $0x8,%ebx
		test   %ebx,%ebx
		jne    jump_44580
		mov    $0x1,%ebx
	jump_44580:
		mov    %ebp,%edx
		shl    $0x8,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,%ebx
		xor    %eax,%eax
		mov    %di,%ax
		mov    game_full_lights,%edx
		shl    $0x5,%eax
		add    %edx,%eax
		movswl (%eax),%eax
		imul   %ebx,%eax
		sar    $0x8,%eax
		cmp    $0x3,%eax
		jle    jump_445e0
		xor    %eax,%eax
		mov    %si,%ax
		imul   $0x6,%eax,%eax
		mov    game_quick_lights,%edx
		mov    %edx,0xc(%esp)
		add    %eax,%edx
		mov    0x18(%ecx),%ax
		mov    %ax,0x4(%edx)
		xor    %eax,%eax
		mov    %si,%ax
		imul   $0x6,%eax,%eax
		mov    %si,0x18(%ecx)
		mov    %di,0x2(%edx)
		add    0xc(%esp),%eax
		inc    %esi
		mov    %bx,(%eax)
	jump_445e0:
		xor    %eax,%eax
		mov    0x2(%ecx),%ax
		imul   $0xa,%eax,%eax
		mov    EXPORT_SYMBOL(game_object_points),%edx
		add    %eax,%edx
		mov    (%edx),%eax
		mov    0x30(%esp),%ebx
		sar    $0x10,%eax
		add    %ebx,%eax
		mov    0x2c(%esp),%ebx
		sub    %ebx,%eax
		mov    %eax,%ebx
		imul   %ebx,%ebx
		mov    0x2(%edx),%eax
		sar    $0x10,%eax
		mov    %eax,0xc(%esp)
		mov    0x34(%esp),%eax
		add    0xc(%esp),%eax
		mov    0x4(%edx),%edx
		sub    0x38(%esp),%eax
		sar    $0x10,%edx
		mov    %eax,0xc(%esp)
		add    0x24(%esp),%edx
		sub    0x28(%esp),%edx
		imul   %edx,%edx
		mov    0xc(%esp),%eax
		imul   %eax,%eax
		add    %eax,%ebx
		add    %edx,%ebx
		sar    $0x8,%ebx
		test   %ebx,%ebx
		jne    jump_44649
		mov    $0x1,%ebx
	jump_44649:
		mov    %ebp,%edx
		shl    $0x8,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,%ebx
		xor    %eax,%eax
		mov    %di,%ax
		mov    game_full_lights,%edx
		shl    $0x5,%eax
		add    %edx,%eax
		movswl (%eax),%eax
		imul   %ebx,%eax
		sar    $0x8,%eax
		cmp    $0x3,%eax
		jle    jump_446a9
		xor    %eax,%eax
		mov    %si,%ax
		imul   $0x6,%eax,%eax
		mov    game_quick_lights,%edx
		add    %edx,%eax
		mov    %edx,0xc(%esp)
		mov    0x1a(%ecx),%dx
		mov    %dx,0x4(%eax)
		mov    %si,0x1a(%ecx)
		mov    %di,0x2(%eax)
		xor    %eax,%eax
		mov    %si,%ax
		imul   $0x6,%eax,%eax
		add    0xc(%esp),%eax
		inc    %esi
		mov    %bx,(%eax)
	jump_446a9:
		xor    %eax,%eax
		mov    0x4(%ecx),%ax
		imul   $0xa,%eax,%eax
		mov    EXPORT_SYMBOL(game_object_points),%edx
		add    %eax,%edx
		mov    (%edx),%eax
		mov    0x30(%esp),%ebx
		sar    $0x10,%eax
		add    %ebx,%eax
		sub    0x2c(%esp),%eax
		imul   %eax,%eax
		mov    0x2(%edx),%ebx
		sar    $0x10,%ebx
		mov    %ebx,0xc(%esp)
		mov    0x34(%esp),%ebx
		add    0xc(%esp),%ebx
		mov    0x4(%edx),%edx
		sub    0x38(%esp),%ebx
		sar    $0x10,%edx
		mov    %ebx,0xc(%esp)
		add    0x24(%esp),%edx
		sub    0x28(%esp),%edx
		imul   %edx,%edx
		mov    0xc(%esp),%ebx
		imul   %ebx,%ebx
		add    %eax,%ebx
		add    %edx,%ebx
		sar    $0x8,%ebx
		test   %ebx,%ebx
		jne    jump_4470e
		mov    $0x1,%ebx
	jump_4470e:
		mov    %ebp,%edx
		shl    $0x8,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,%ebx
		xor    %eax,%eax
		mov    %di,%ax
		mov    game_full_lights,%edx
		shl    $0x5,%eax
		add    %edx,%eax
		movswl (%eax),%eax
		imul   %ebx,%eax
		sar    $0x8,%eax
		cmp    $0x3,%eax
		jle    jump_4476e
		xor    %eax,%eax
		mov    %si,%ax
		imul   $0x6,%eax,%eax
		mov    game_quick_lights,%edx
		mov    %edx,0xc(%esp)
		add    %eax,%edx
		mov    0x1c(%ecx),%ax
		mov    %ax,0x4(%edx)
		xor    %eax,%eax
		mov    %si,%ax
		imul   $0x6,%eax,%eax
		mov    %si,0x1c(%ecx)
		mov    %di,0x2(%edx)
		add    0xc(%esp),%eax
		inc    %esi
		mov    %bx,(%eax)
	jump_4476e:
		xor    %edx,%edx
		mov    0x6(%ecx),%dx
		imul   $0xa,%edx,%edx
		mov    EXPORT_SYMBOL(game_object_points),%eax
		add    %eax,%edx
		mov    (%edx),%eax
		mov    0x30(%esp),%ebx
		sar    $0x10,%eax
		add    %ebx,%eax
		mov    0x2c(%esp),%ebx
		sub    %ebx,%eax
		mov    %eax,%ebx
		imul   %ebx,%ebx
		mov    0x2(%edx),%eax
		sar    $0x10,%eax
		mov    %eax,0xc(%esp)
		mov    0x34(%esp),%eax
		add    0xc(%esp),%eax
		mov    0x4(%edx),%edx
		sub    0x38(%esp),%eax
		sar    $0x10,%edx
		mov    %eax,0xc(%esp)
		add    0x24(%esp),%edx
		sub    0x28(%esp),%edx
		imul   %edx,%edx
		mov    0xc(%esp),%eax
		imul   %eax,%eax
		add    %eax,%ebx
		add    %edx,%ebx
		sar    $0x8,%ebx
		test   %ebx,%ebx
		jne    jump_447d6
		mov    $0x1,%ebx
	jump_447d6:
		mov    %ebp,%edx
		shl    $0x8,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,%ebx
		xor    %eax,%eax
		mov    %di,%ax
		mov    game_full_lights,%edx
		shl    $0x5,%eax
		movswl (%edx,%eax,1),%eax
		imul   %ebx,%eax
		sar    $0x8,%eax
		cmp    $0x3,%eax
		jle    jump_44483
		xor    %eax,%eax
		mov    %si,%ax
		imul   $0x6,%eax,%eax
		mov    game_quick_lights,%ebp
		lea    (%eax,%ebp,1),%edx
		mov    0x1e(%ecx),%ax
		mov    %ax,0x4(%edx)
		xor    %eax,%eax
		mov    %si,%ax
		imul   $0x6,%eax,%eax
		mov    %si,0x1e(%ecx)
		mov    %di,0x2(%edx)
		inc    %esi
		mov    %bx,(%eax,%ebp,1)
		jmp    jump_44483
	jump_44838:
		mov    0x40(%esp),%ecx
		mov    %ecx,%eax
		mov    %si,EXPORT_SYMBOL(next_quick_light)
		add    $0x58,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0xc


/*----------------------------------------------------------------*/
quick_light_unkn_func_07:	/* 0x044850 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x60,%esp
		mov    game_quick_lights,%ebx
		mov    EXPORT_SYMBOL(next_quick_light),%cx
		mov    %eax,0x48(%esp)
		movzwl %ax,%ebp
		lea    0x0(,%ebp,8),%eax
		add    %eax,%ebp
		mov    game_objects,%eax
		shl    $0x2,%ebp
		mov    0x4(%eax,%ebp,1),%si
		mov    %esi,0x44(%esp)
		mov    (%eax,%ebp,1),%si
		mov    %esi,0x4c(%esp)
		mov    0x2(%eax,%ebp,1),%ax
		xor    %esi,%esi
		mov    %eax,0x58(%esp)
		mov    %esi,0x5c(%esp)
		test   %ax,%ax
		jbe    jump_44a9c
		jmp    jump_44a10
	jump_448ab:
		imul   $0x6,%edi,%edi
		lea    (%ebx,%edi,1),%ebp
		mov    0x4(%eax),%di
		mov    %di,0x4(%ebp)
		movw   $0x0,0x2(%eax)
		jmp    jump_448c5
	jump_448c1:
		mov    %esi,0x8(%esp)
	jump_448c5:
		xor    %eax,%eax
		mov    %si,%ax
		imul   $0x6,%eax,%eax
		mov    %ebx,%ebp
		mov    0x4(%eax,%ebp,1),%si
		test   %si,%si
		jne    jump_44a44
	jump_448dd:
		xor    %eax,%eax
		mov    (%esp),%esi
		mov    %eax,0x10(%esp)
		mov    0x16(%esi),%si
		mov    %eax,0x2c(%esp)
		test   %si,%si
		je     jump_44969
	jump_448f7:
		xor    %eax,%eax
		mov    0x2c(%esp),%ax
		mov    %eax,%edi
		inc    %edi
		mov    %edi,0x2c(%esp)
		cmp    $0xc9,%eax
		jge    jump_44969
		xor    %eax,%eax
		mov    %si,%ax
		imul   $0x6,%eax,%eax
		add    %ebx,%eax
		mov    0x2(%eax),%di
		cmp    %di,%dx
		jne    jump_44951
		movzwl 0x10(%esp),%ebp
		dec    %ecx
		test   %ebp,%ebp
		jne    jump_4493c
		mov    (%esp),%ebp
		mov    0x4(%eax),%di
		mov    %di,0x16(%ebp)
		movw   $0x0,0x2(%eax)
		jmp    jump_44955
	jump_4493c:
		imul   $0x6,%ebp,%ebp
		add    %ebx,%ebp
		mov    0x4(%eax),%di
		mov    %di,0x4(%ebp)
		movw   $0x0,0x2(%eax)
		jmp    jump_44955
	jump_44951:
		mov    %esi,0x10(%esp)
	jump_44955:
		xor    %eax,%eax
		mov    %si,%ax
		imul   $0x6,%eax,%eax
		mov    %ebx,%ebp
		mov    0x4(%eax,%ebp,1),%si
		test   %si,%si
		jne    jump_448f7
	jump_44969:
		xor    %eax,%eax
		mov    (%esp),%esi
		mov    %eax,0x14(%esp)
		mov    0x18(%esi),%si
		mov    %eax,0x30(%esp)
		test   %si,%si
		je     jump_449fa
	jump_44983:
		xor    %eax,%eax
		mov    0x30(%esp),%ax
		mov    %eax,%edi
		inc    %edi
		mov    %edi,0x30(%esp)
		cmp    $0xc9,%eax
		jge    jump_449fa
		xor    %eax,%eax
		mov    %si,%ax
		imul   $0x6,%eax,%eax
		add    %ebx,%eax
		mov    0x2(%eax),%di
		mov    %ebx,%ebp
		cmp    %di,%dx
		jne    jump_449e2
		xor    %edi,%edi
		mov    0x14(%esp),%di
		dec    %ecx
		test   %edi,%edi
		jne    jump_449cc
		mov    (%esp),%ebp
		mov    0x4(%eax),%di
		mov    %di,0x18(%ebp)
		movw   $0x0,0x2(%eax)
		jmp    jump_449e6
	jump_449cc:
		imul   $0x6,%edi,%edi
		lea    (%ebx,%edi,1),%ebp
		mov    0x4(%eax),%di
		mov    %di,0x4(%ebp)
		movw   $0x0,0x2(%eax)
		jmp    jump_449e6
	jump_449e2:
		mov    %esi,0x14(%esp)
	jump_449e6:
		xor    %eax,%eax
		mov    %si,%ax
		imul   $0x6,%eax,%eax
		mov    %ebx,%ebp
		mov    0x4(%eax,%ebp,1),%si
		test   %si,%si
		jne    jump_44983
	jump_449fa:
		mov    0x5c(%esp),%eax
		inc    %eax
		mov    0x58(%esp),%esi
		mov    %eax,0x5c(%esp)
		cmp    %si,%ax
		jae    jump_44a9c
	jump_44a10:
		xor    %eax,%eax
		movzwl 0x4c(%esp),%ebp
		mov    0x5c(%esp),%ax
		xor    %esi,%esi
		add    %eax,%ebp
		mov    game_object_faces,%eax
		shl    $0x5,%ebp
		xor    %edi,%edi
		add    %ebp,%eax
		mov    %esi,0x8(%esp)
		mov    %edi,0xc(%esp)
		mov    0x14(%eax),%si
		mov    %eax,(%esp)
		test   %si,%si
		je     jump_448dd
	jump_44a44:
		xor    %eax,%eax
		mov    0xc(%esp),%ax
		mov    %eax,%edi
		inc    %edi
		mov    %edi,0xc(%esp)
		cmp    $0xc9,%eax
		jge    jump_448dd
		xor    %eax,%eax
		mov    %si,%ax
		imul   $0x6,%eax,%eax
		add    %ebx,%eax
		mov    0x2(%eax),%di
		mov    %ebx,%ebp
		cmp    %di,%dx
		jne    jump_448c1
		xor    %edi,%edi
		mov    0x8(%esp),%di
		dec    %ecx
		test   %edi,%edi
		jne    jump_448ab
		mov    (%esp),%ebp
		mov    0x4(%eax),%di
		mov    %di,0x14(%ebp)
		movw   $0x0,0x2(%eax)
		jmp    jump_448c5
	jump_44a9c:
		movzwl 0x48(%esp),%ebp
		lea    0x0(,%ebp,8),%eax
		xor    %edi,%edi
		add    %ebp,%eax
		mov    game_objects,%ebp
		mov    %edi,0x1c(%esp)
		mov    0x6(%ebp,%eax,4),%si
		mov    0x8(%ebp,%eax,4),%ax
		mov    %esi,0x50(%esp)
		mov    %eax,0x54(%esp)
		test   %ax,%ax
		jbe    jump_44d59
		jmp    jump_44cd1
	jump_44ad6:
		imul   $0x6,%ebp,%ebp
		add    %ebx,%ebp
		mov    0x4(%eax),%di
		mov    %di,0x4(%ebp)
		movw   $0x0,0x2(%eax)
		jmp    jump_44aef
	jump_44aeb:
		mov    %esi,0x20(%esp)
	jump_44aef:
		xor    %eax,%eax
		mov    %si,%ax
		imul   $0x6,%eax,%eax
		mov    %ebx,%ebp
		mov    0x4(%eax,%ebp,1),%si
		test   %si,%si
		jne    jump_44d04
	jump_44b07:
		xor    %eax,%eax
		mov    0x4(%esp),%esi
		mov    %eax,0x28(%esp)
		mov    0x1a(%esi),%si
		mov    %eax,0x40(%esp)
		test   %si,%si
		je     jump_44b9a
	jump_44b22:
		xor    %eax,%eax
		mov    0x40(%esp),%ax
		mov    %eax,%edi
		inc    %edi
		mov    %edi,0x40(%esp)
		cmp    $0xc9,%eax
		jge    jump_44b9a
		xor    %eax,%eax
		mov    %si,%ax
		imul   $0x6,%eax,%eax
		add    %ebx,%eax
		mov    0x2(%eax),%di
		mov    %ebx,%ebp
		cmp    %di,%dx
		jne    jump_44b82
		xor    %edi,%edi
		mov    0x28(%esp),%di
		dec    %ecx
		test   %edi,%edi
		jne    jump_44b6c
		mov    0x4(%esp),%ebp
		mov    0x4(%eax),%di
		mov    %di,0x1a(%ebp)
		movw   $0x0,0x2(%eax)
		jmp    jump_44b86
	jump_44b6c:
		imul   $0x6,%edi,%edi
		lea    (%ebx,%edi,1),%ebp
		mov    0x4(%eax),%di
		mov    %di,0x4(%ebp)
		movw   $0x0,0x2(%eax)
		jmp    jump_44b86
	jump_44b82:
		mov    %esi,0x28(%esp)
	jump_44b86:
		xor    %eax,%eax
		mov    %si,%ax
		imul   $0x6,%eax,%eax
		mov    %ebx,%ebp
		mov    0x4(%eax,%ebp,1),%si
		test   %si,%si
		jne    jump_44b22
	jump_44b9a:
		xor    %eax,%eax
		mov    0x4(%esp),%esi
		mov    %eax,0x18(%esp)
		mov    0x1c(%esi),%si
		mov    %eax,0x38(%esp)
		test   %si,%si
		je     jump_44c2d
	jump_44bb5:
		xor    %eax,%eax
		mov    0x38(%esp),%ax
		mov    %eax,%edi
		inc    %edi
		mov    %edi,0x38(%esp)
		cmp    $0xc9,%eax
		jge    jump_44c2d
		xor    %eax,%eax
		mov    %si,%ax
		imul   $0x6,%eax,%eax
		add    %ebx,%eax
		mov    0x2(%eax),%di
		mov    %ebx,%ebp
		cmp    %di,%dx
		jne    jump_44c15
		xor    %edi,%edi
		mov    0x18(%esp),%di
		dec    %ecx
		test   %edi,%edi
		jne    jump_44bff
		mov    0x4(%esp),%ebp
		mov    0x4(%eax),%di
		mov    %di,0x1c(%ebp)
		movw   $0x0,0x2(%eax)
		jmp    jump_44c19
	jump_44bff:
		imul   $0x6,%edi,%edi
		lea    (%ebx,%edi,1),%ebp
		mov    0x4(%eax),%di
		mov    %di,0x4(%ebp)
		movw   $0x0,0x2(%eax)
		jmp    jump_44c19
	jump_44c15:
		mov    %esi,0x18(%esp)
	jump_44c19:
		xor    %eax,%eax
		mov    %si,%ax
		imul   $0x6,%eax,%eax
		mov    %ebx,%ebp
		mov    0x4(%eax,%ebp,1),%si
		test   %si,%si
		jne    jump_44bb5
	jump_44c2d:
		xor    %eax,%eax
		mov    0x4(%esp),%esi
		mov    %eax,0x24(%esp)
		mov    0x1e(%esi),%si
		mov    %eax,0x3c(%esp)
		test   %si,%si
		je     jump_44cbb
	jump_44c48:
		xor    %eax,%eax
		mov    0x3c(%esp),%ax
		mov    %eax,%edi
		inc    %edi
		mov    %edi,0x3c(%esp)
		cmp    $0xc9,%eax
		jge    jump_44cbb
		xor    %eax,%eax
		mov    %si,%ax
		imul   $0x6,%eax,%eax
		add    %ebx,%eax
		mov    0x2(%eax),%di
		cmp    %di,%dx
		jne    jump_44ca3
		movzwl 0x24(%esp),%ebp
		dec    %ecx
		test   %ebp,%ebp
		jne    jump_44c8e
		mov    0x4(%esp),%ebp
		mov    0x4(%eax),%di
		mov    %di,0x1e(%ebp)
		movw   $0x0,0x2(%eax)
		jmp    jump_44ca7
	jump_44c8e:
		imul   $0x6,%ebp,%ebp
		add    %ebx,%ebp
		mov    0x4(%eax),%di
		mov    %di,0x4(%ebp)
		movw   $0x0,0x2(%eax)
		jmp    jump_44ca7
	jump_44ca3:
		mov    %esi,0x24(%esp)
	jump_44ca7:
		xor    %eax,%eax
		mov    %si,%ax
		imul   $0x6,%eax,%eax
		mov    %ebx,%ebp
		mov    0x4(%eax,%ebp,1),%si
		test   %si,%si
		jne    jump_44c48
	jump_44cbb:
		mov    0x1c(%esp),%eax
		inc    %eax
		mov    0x54(%esp),%esi
		mov    %eax,0x1c(%esp)
		cmp    %si,%ax
		jae    jump_44d59
	jump_44cd1:
		xor    %eax,%eax
		movzwl 0x50(%esp),%ebp
		mov    0x1c(%esp),%ax
		add    %ebp,%eax
		imul   $0x28,%eax,%ebp
		mov    game_object_faces4,%eax
		xor    %edi,%edi
		add    %ebp,%eax
		mov    %edi,0x20(%esp)
		mov    %edi,0x34(%esp)
		mov    0x18(%eax),%si
		mov    %eax,0x4(%esp)
		test   %si,%si
		je     jump_44b07
	jump_44d04:
		xor    %eax,%eax
		mov    0x34(%esp),%ax
		mov    %eax,%edi
		inc    %edi
		mov    %edi,0x34(%esp)
		cmp    $0xc9,%eax
		jge    jump_44b07
		xor    %eax,%eax
		mov    %si,%ax
		imul   $0x6,%eax,%eax
		add    %ebx,%eax
		mov    0x2(%eax),%di
		cmp    %di,%dx
		jne    jump_44aeb
		movzwl 0x20(%esp),%ebp
		dec    %ecx
		test   %ebp,%ebp
		jne    jump_44ad6
		mov    0x4(%esp),%ebp
		mov    0x4(%eax),%di
		mov    %di,0x18(%ebp)
		movw   $0x0,0x2(%eax)
		jmp    jump_44aef
	jump_44d59:
		mov    0x44(%esp),%eax
		mov    %cx,EXPORT_SYMBOL(next_quick_light)
		mov    %ebx,game_quick_lights
		add    $0x60,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
quick_light_unkn_func_08:	/* 0x044D74 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		sub    $0x8,%esp
		mov    %eax,0x4(%esp)
		mov    %edx,(%esp)
		mov    %ebx,%edi
		mov    %ecx,%esi
		xor    %ecx,%ecx
		mov    %dx,%cx
		xor    %edx,%edx
		mov    %ecx,%eax
		mov    0x4(%esp),%dx
		shl    $0x7,%eax
		add    %edx,%eax
		shl    $0x8,%edx
		sub    %edx,%edi
		mov    %edi,%edx
		imul   %edi,%edx
		lea    0x0(,%eax,8),%ebx
		add    %eax,%ebx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		mov    0x4(%eax,%ebx,2),%ebx
		sar    $0x10,%ebx
		shl    $0x3,%ebx
		sub    %ebx,%esi
		mov    %esi,%ebx
		shl    $0x4,%ebx
		mov    %ebx,%eax
		imul   %ebx,%eax
		shl    $0x8,%ecx
		mov    0x14(%esp),%esi
		sub    %ecx,%esi
		mov    %esi,%ecx
		imul   %esi,%ecx
		add    %edx,%eax
		add    %eax,%ecx
		cmp    $0x4640000,%ecx
		jg     jump_44ef3
		mov    %ecx,%eax
		call   ac_LbSqrL
		mov    %eax,%ecx
		test   %eax,%eax
		jne    jump_44df5
		mov    $0x1,%ecx
	jump_44df5:
		mov    %ebx,%edx
		shl    $0x8,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(next_quick_light),%dx
		cmp    $0xfa00,%edx
		jge    jump_44ef9
		imul   %edi,%edi
		imul   %esi,%esi
		sar    $0x3,%ebx
		imul   %ebx,%ebx
		add    %edi,%ebx
		add    %esi,%ebx
		sar    $0x8,%ebx
		test   %ebx,%ebx
		jne    jump_44e32
		mov    $0x1,%ebx
	jump_44e32:
		shl    $0x8,%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		idiv   %ebx
		cmp    $0x100,%eax
		jle    jump_44e48
		mov    $0x100,%eax
	jump_44e48:
		xor    %edx,%edx
		mov    0x18(%esp),%dx
		mov    %edx,%ebx
		mov    game_full_lights,%edx
		shl    $0x5,%ebx
		movswl (%edx,%ebx,1),%edx
		imul   %eax,%edx
		sar    $0x8,%edx
		cmp    $0x3,%edx
		jle    jump_44ef9
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    (%esp),%dx
		mov    0x4(%esp),%bx
		shl    $0x7,%edx
		add    %ebx,%edx
		lea    0x0(,%edx,8),%ebx
		mov    EXPORT_SYMBOL(game_my_big_map),%esi
		add    %edx,%ebx
		xor    %edx,%edx
		add    %ebx,%ebx
		mov    EXPORT_SYMBOL(next_quick_light),%dx
		add    %ebx,%esi
		lea    0x0(,%edx,4),%ebx
		sub    %edx,%ebx
		mov    game_quick_lights,%ecx
		add    %ebx,%ebx
		lea    (%ecx,%ebx,1),%edx
		mov    0x2(%esi),%bx
		mov    %bx,0x4(%edx)
		mov    EXPORT_SYMBOL(next_quick_light),%bx
		mov    %bx,0x2(%esi)
		mov    0x18(%esp),%ebx
		xor    %esi,%esi
		mov    %bx,0x2(%edx)
		mov    EXPORT_SYMBOL(next_quick_light),%dx
		mov    %dx,%si
		lea    0x0(,%esi,4),%ebx
		inc    %edx
		sub    %esi,%ebx
		mov    %dx,EXPORT_SYMBOL(next_quick_light)
		mov    %ax,(%ecx,%ebx,2)
		add    $0x8,%esp
		pop    %edi
		pop    %esi
		ret    $0x8
	jump_44ef3:
		incl   data_176d6c
	jump_44ef9:
		add    $0x8,%esp
		pop    %edi
		pop    %esi
		ret    $0x8


/*----------------------------------------------------------------*/
quick_light_unkn_func_09:	/* 0x044F04 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    game_quick_lights,%edi
		mov    %eax,%ebp
		mov    %edx,(%esp)
		mov    0x2(%eax),%dx
		xor    %esi,%esi
		test   %dx,%dx
		je     jump_44f83
	jump_44f22:
		xor    %eax,%eax
		mov    %dx,%ax
		imul   $0x6,%eax,%eax
		add    %edi,%eax
		mov    0x2(%eax),%cx
		mov    %edi,%ebx
		cmp    (%esp),%cx
		jne    jump_44f6d
		xor    %ecx,%ecx
		mov    %si,%cx
		decw   EXPORT_SYMBOL(next_quick_light)
		test   %ecx,%ecx
		jne    jump_44f58
		mov    0x4(%eax),%bx
		mov    %bx,0x2(%ebp)
		movw   $0x0,0x2(%eax)
		jmp    jump_44f6f
	jump_44f58:
		imul   $0x6,%ecx,%ecx
		add    %edi,%ecx
		mov    0x4(%eax),%bx
		mov    %bx,0x4(%ecx)
		movw   $0x0,0x2(%eax)
		jmp    jump_44f6f
	jump_44f6d:
		mov    %edx,%esi
	jump_44f6f:
		xor    %eax,%eax
		mov    %dx,%ax
		imul   $0x6,%eax,%ebx
		mov    %edi,%eax
		mov    0x4(%ebx,%eax,1),%dx
		test   %dx,%dx
		jne    jump_44f22
	jump_44f83:
		mov    %edi,game_quick_lights
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret

vtable_45010:
		.long   func_452c3
		.long   func_45367
		.long   func_4540c
		.long   func_454b0


/*----------------------------------------------------------------*/
unkn_obj_faces4_lights_func_10:	/* 0x045020 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x28,%esp
		mov    EXPORT_SYMBOL(next_quick_light),%cx
		mov    game_quick_lights,%esi
		mov    %ax,0x1c(%esp)
		mov    %edx,0xc(%esp)
		mov    %ebx,(%esp)
		test   %ebx,%ebx
		jge    jump_45049
		xor    %ebx,%ebx
		mov    %ebx,(%esp)
	jump_45049:
		cmpl   $0x100,(%esp)
		jle    jump_45059
		movl   $0x100,(%esp)
	jump_45059:
		mov    (%esp),%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sar    $0x8,%eax
		mov    %eax,(%esp)
		mov    0x1a(%esp),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jg     jump_45275
		mov    0x1a(%esp),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jl     jump_45555
	jump_45091:
		mov    %esi,game_quick_lights
		mov    %cx,EXPORT_SYMBOL(next_quick_light)
		add    $0x28,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_450a6:
		mov    game_object_faces,%edx
		mov    0x14(%edx,%eax,1),%ax
		mov    (%esp),%edx
		mov    %dx,0x4(%esp)
		cmp    %cx,%ax
		jae    jump_45108
	jump_450be:
		test   %ax,%ax
		je     jump_45108
		cmp    %cx,%ax
		jae    jump_45108
		xor    %edx,%edx
		mov    %ax,%dx
		imul   $0x6,%edx,%ebx
		lea    (%esi,%ebx,1),%edx
		xor    %edi,%edi
		mov    0x2(%esp),%ebx
		mov    (%edx),%di
		sar    $0x10,%ebx
		imul   %edi,%ebx
		sar    $0x8,%ebx
		mov    %bx,(%edx)
		mov    0x4(%edx),%bx
		cmp    %cx,%bx
		jb     jump_450f7
		movw   $0x0,0x4(%edx)
	jump_450f7:
		xor    %edx,%edx
		mov    %ax,%dx
		imul   $0x6,%edx,%eax
		mov    %esi,%edx
		mov    0x4(%edx,%eax,1),%ax
		jmp    jump_450be
	jump_45108:
		mov    0x1a(%esp),%edx
		sar    $0x10,%edx
		mov    game_object_faces,%eax
		shl    $0x5,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    (%esp),%ebp
		mov    0xe(%eax),%dx
		imul   %ebp,%edx
		sar    $0x8,%edx
		mov    %dx,0xe(%eax)
		mov    0x1a(%esp),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jl     jump_45555
		jmp    jump_45091
	jump_45140:
		mov    game_object_faces,%edx
		mov    0x16(%edx,%eax,1),%ax
		mov    (%esp),%edx
		mov    %dx,0x18(%esp)
		cmp    %cx,%ax
		jae    jump_451a1
	jump_45158:
		test   %ax,%ax
		je     jump_451a1
		cmp    %cx,%ax
		jae    jump_451a1
		xor    %edx,%edx
		mov    %ax,%dx
		imul   $0x6,%edx,%edx
		mov    0x16(%esp),%ebx
		xor    %edi,%edi
		add    %esi,%edx
		sar    $0x10,%ebx
		mov    (%edx),%di
		imul   %edi,%ebx
		sar    $0x8,%ebx
		mov    %bx,(%edx)
		mov    0x4(%edx),%bx
		cmp    %cx,%bx
		jb     jump_45190
		movw   $0x0,0x4(%edx)
	jump_45190:
		xor    %edx,%edx
		mov    %ax,%dx
		imul   $0x6,%edx,%edx
		mov    %esi,%ebx
		mov    0x4(%edx,%ebx,1),%ax
		jmp    jump_45158
	jump_451a1:
		mov    0x1a(%esp),%eax
		sar    $0x10,%eax
		mov    game_object_faces,%edx
		shl    $0x5,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    (%esp),%edi
		mov    0x10(%eax),%dx
		imul   %edi,%edx
		sar    $0x8,%edx
		mov    %dx,0x10(%eax)
		mov    0x1a(%esp),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jl     jump_45555
		jmp    jump_45091
	jump_451da:
		mov    game_object_faces,%edx
		mov    0x18(%edx,%eax,1),%ax
		mov    (%esp),%edx
		mov    %dx,0x14(%esp)
		cmp    %cx,%ax
		jae    jump_4523c
	jump_451f2:
		test   %ax,%ax
		je     jump_4523c
		cmp    %cx,%ax
		jae    jump_4523c
		xor    %ebx,%ebx
		mov    %ax,%bx
		imul   $0x6,%ebx,%ebx
		lea    (%esi,%ebx,1),%edx
		xor    %edi,%edi
		mov    0x12(%esp),%ebx
		mov    (%edx),%di
		sar    $0x10,%ebx
		imul   %edi,%ebx
		sar    $0x8,%ebx
		mov    %bx,(%edx)
		mov    0x4(%edx),%bx
		cmp    %cx,%bx
		jb     jump_4522b
		movw   $0x0,0x4(%edx)
	jump_4522b:
		and    $0xffff,%eax
		imul   $0x6,%eax,%edx
		mov    %esi,%eax
		mov    0x4(%edx,%eax,1),%ax
		jmp    jump_451f2
	jump_4523c:
		mov    0x1a(%esp),%eax
		sar    $0x10,%eax
		mov    game_object_faces,%edx
		shl    $0x5,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    (%esp),%ebx
		mov    0x12(%eax),%dx
		imul   %ebx,%edx
		sar    $0x8,%edx
		mov    %dx,0x12(%eax)
		mov    0x1a(%esp),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jl     jump_45555
		jmp    jump_45091
	jump_45275:
		mov    0xc(%esp),%edx
		shl    $0x5,%eax
		cmp    $0x1,%dx
		jb     jump_452a6
		jbe    jump_45140
		cmp    $0x2,%dx
		je     jump_451da
		mov    0x1a(%esp),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jl     jump_45555
		jmp    jump_45091
	jump_452a6:
		test   %dx,%dx
		je     jump_450a6
		mov    0x1a(%esp),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jl     jump_45555
		jmp    jump_45091


/*----------------------------------------------------------------*/
func_452c3:
/*----------------------------------------------------------------*/
		mov    0x1a(%esp),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    game_object_faces4,%edx
		mov    0x18(%edx,%eax,8),%ax
		mov    (%esp),%edx
		mov    %dx,0x8(%esp)
		cmp    %cx,%ax
		jae    jump_45334
	jump_452eb:
		test   %ax,%ax
		je     jump_45334
		cmp    %cx,%ax
		jae    jump_45334
		xor    %edx,%edx
		mov    %ax,%dx
		imul   $0x6,%edx,%edx
		mov    0x6(%esp),%ebx
		xor    %edi,%edi
		add    %esi,%edx
		sar    $0x10,%ebx
		mov    (%edx),%di
		imul   %edi,%ebx
		sar    $0x8,%ebx
		mov    %bx,(%edx)
		mov    0x4(%edx),%bx
		cmp    %cx,%bx
		jb     jump_45323
		movw   $0x0,0x4(%edx)
	jump_45323:
		and    $0xffff,%eax
		imul   $0x6,%eax,%eax
		mov    %esi,%edx
		mov    0x4(%edx,%eax,1),%ax
		jmp    jump_452eb
	jump_45334:
		mov    0x1a(%esp),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    game_object_faces4,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    (%esp),%ebx
		mov    0x10(%eax),%dx
		imul   %ebx,%edx
		sar    $0x8,%edx
		mov    %dx,0x10(%eax)
		jmp    jump_45091


/*----------------------------------------------------------------*/
func_45367:
/*----------------------------------------------------------------*/
		mov    0x1a(%esp),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    game_object_faces4,%edx
		mov    0x1a(%edx,%eax,8),%ax
		mov    (%esp),%edx
		mov    %dx,0x24(%esp)
		cmp    %cx,%ax
		jae    jump_453d9
	jump_4538f:
		test   %ax,%ax
		je     jump_453d9
		cmp    %cx,%ax
		jae    jump_453d9
		xor    %edx,%edx
		mov    %ax,%dx
		imul   $0x6,%edx,%ebx
		mov    0x22(%esp),%edi
		lea    (%esi,%ebx,1),%edx
		xor    %ebx,%ebx
		sar    $0x10,%edi
		mov    (%edx),%bx
		imul   %edi,%ebx
		sar    $0x8,%ebx
		mov    %bx,(%edx)
		mov    0x4(%edx),%bx
		cmp    %cx,%bx
		jb     jump_453c8
		movw   $0x0,0x4(%edx)
	jump_453c8:
		xor    %edx,%edx
		mov    %ax,%dx
		imul   $0x6,%edx,%edx
		mov    %esi,%ebx
		mov    0x4(%edx,%ebx,1),%ax
		jmp    jump_4538f
	jump_453d9:
		mov    0x1a(%esp),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    game_object_faces4,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    (%esp),%ebp
		mov    0x12(%eax),%dx
		imul   %ebp,%edx
		sar    $0x8,%edx
		mov    %dx,0x12(%eax)
		jmp    jump_45091


/*----------------------------------------------------------------*/
func_4540c:
/*----------------------------------------------------------------*/
		mov    0x1a(%esp),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    game_object_faces4,%edx
		mov    0x1c(%edx,%eax,8),%ax
		mov    (%esp),%edx
		mov    %dx,0x20(%esp)
		cmp    %cx,%ax
		jae    jump_4547d
	jump_45434:
		test   %ax,%ax
		je     jump_4547d
		cmp    %cx,%ax
		jae    jump_4547d
		xor    %edx,%edx
		mov    %ax,%dx
		imul   $0x6,%edx,%edx
		mov    0x1e(%esp),%ebx
		xor    %edi,%edi
		add    %esi,%edx
		sar    $0x10,%ebx
		mov    (%edx),%di
		imul   %edi,%ebx
		sar    $0x8,%ebx
		mov    %bx,(%edx)
		mov    0x4(%edx),%bx
		cmp    %cx,%bx
		jb     jump_4546c
		movw   $0x0,0x4(%edx)
	jump_4546c:
		and    $0xffff,%eax
		imul   $0x6,%eax,%eax
		mov    %esi,%edx
		mov    0x4(%edx,%eax,1),%ax
		jmp    jump_45434
	jump_4547d:
		mov    0x1a(%esp),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    game_object_faces4,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    (%esp),%edi
		mov    0x14(%eax),%dx
		imul   %edi,%edx
		sar    $0x8,%edx
		mov    %dx,0x14(%eax)
		jmp    jump_45091


/*----------------------------------------------------------------*/
func_454b0:
/*----------------------------------------------------------------*/
		mov    0x1a(%esp),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    game_object_faces4,%edx
		mov    0x1e(%edx,%eax,8),%ax
		mov    (%esp),%edx
		mov    %dx,0x10(%esp)
		cmp    %cx,%ax
		jae    jump_45523
	jump_454d8:
		test   %ax,%ax
		je     jump_45523
		cmp    %cx,%ax
		jae    jump_45523
		xor    %edx,%edx
		mov    %ax,%dx
		imul   $0x6,%edx,%edx
		mov    %esi,%ebx
		mov    0xe(%esp),%edi
		xor    %esi,%ebx
		add    %esi,%edx
		sar    $0x10,%edi
		mov    (%edx),%bx
		imul   %edi,%ebx
		sar    $0x8,%ebx
		mov    %bx,(%edx)
		mov    0x4(%edx),%bx
		cmp    %cx,%bx
		jb     jump_45512
		movw   $0x0,0x4(%edx)
	jump_45512:
		and    $0xffff,%eax
		imul   $0x6,%eax,%eax
		mov    %esi,%edx
		mov    0x4(%edx,%eax,1),%ax
		jmp    jump_454d8
	jump_45523:
		mov    0x1a(%esp),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %eax,%edx
		mov    game_object_faces4,%eax
		shl    $0x3,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    (%esp),%ebx
		mov    0x16(%eax),%dx
		imul   %ebx,%edx
		sar    $0x8,%edx
		mov    %dx,0x16(%eax)
		jmp    jump_45091
	jump_45555:
		mov    0x1c(%esp),%ebx
		neg    %ebx
		mov    0xc(%esp),%edi
		mov    %bx,0x1c(%esp)
		cmp    $0x3,%di
		ja     jump_45091
		xor    %eax,%eax
		mov    %di,%ax
		jmp    *%cs:vtable_45010(,%eax,4)


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_map_lights_update)	/* 0x04557C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x10,%esp
		mov    $0xffffffba,%ebx
		xor    %edx,%edx
		mov    $0x100,%ebp
		mov    %edx,(%esp)
		mov    %ebx,0x4(%esp)
		jmp    jump_455ac
	jump_4559a:
		mov    0x4(%esp),%esi
		mov    (%esp),%edi
		add    $0x46,%esi
		inc    %edi
		mov    %esi,0x4(%esp)
		mov    %edi,(%esp)
	jump_455ac:
		xor    %eax,%eax
		mov    (%esp),%ax
		cmp    $0x6,%eax
		jge    jump_4565d
		mov    0x4(%esp),%edi
		xor    %esi,%esi
		jmp    jump_455eb
	jump_455c3:
		and    $0xffff,%eax
		imul   $0x6,%eax,%eax
		mov    game_quick_lights,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    (%eax),%dx
		imul   %ebx,%edx
		sar    $0x8,%edx
		mov    %dx,(%eax)
		mov    0x4(%eax),%ax
	jump_455e5:
		test   %ax,%ax
		jne    jump_45647
	jump_455ea:
		inc    %esi
	jump_455eb:
		xor    %eax,%eax
		mov    %si,%ax
		cmp    $0x80,%eax
		jge    jump_4559a
		xor    %edx,%edx
		shl    $0x7,%eax
		mov    (%esp),%dx
		add    %edx,%eax
		imul   $0x12,%eax,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		add    %edx,%eax
		movswl %di,%edx
		mov    %edi,%ecx
		test   %edx,%edx
		jge    jump_45618
		xor    %edi,%ecx
	jump_45618:
		movswl %cx,%edx
		cmp    $0x100,%edx
		jle    jump_45628
		mov    $0x100,%ecx
	jump_45628:
		xor    %ebx,%ebx
		movswl %cx,%edx
		mov    0xc(%eax),%bx
		imul   %ebx,%edx
		sar    $0x8,%edx
		mov    %dx,0xc(%eax)
		mov    0x2(%eax),%ax
		test   %ax,%ax
		je     jump_455ea
		movswl %cx,%ebx
	jump_45647:
		mov    EXPORT_SYMBOL(next_quick_light),%dx
		cmp    %dx,%ax
		jae    jump_455ea
		jbe    jump_455c3
		xor    %eax,%eax
		jmp    jump_455e5
	jump_4565d:
		mov    $0x8c,%ecx
		mov    $0x7b,%esi
		mov    %ecx,0x8(%esp)
		mov    $0x100,%ebp
		jmp    jump_4567e
	jump_45672:
		mov    0x8(%esp),%ecx
		sub    $0x46,%ecx
		inc    %esi
		mov    %ecx,0x8(%esp)
	jump_4567e:
		xor    %eax,%eax
		mov    %si,%ax
		cmp    $0x80,%eax
		jge    jump_45715
		mov    0x8(%esp),%ecx
		xor    %ebx,%ebx
		jmp    jump_45697
	jump_45696:
		inc    %ebx
	jump_45697:
		xor    %eax,%eax
		mov    %bx,%ax
		cmp    $0x80,%eax
		jge    jump_45672
		xor    %edx,%edx
		shl    $0x7,%eax
		mov    %si,%dx
		add    %edx,%eax
		imul   $0x12,%eax,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		movswl %cx,%edi
		add    %eax,%edx
		mov    %ecx,%eax
		test   %edi,%edi
		jge    jump_456c3
		xor    %ecx,%eax
	jump_456c3:
		movswl %ax,%edi
		cmp    $0x100,%edi
		jle    jump_456d3
		mov    $0x100,%eax
	jump_456d3:
		xor    %edi,%edi
		cwtl
		mov    0xc(%edx),%di
		imul   %edi,%eax
		sar    $0x8,%eax
		mov    %ax,0xc(%edx)
		mov    0x2(%edx),%ax
		test   %ax,%ax
		je     jump_45696
	jump_456ed:
		cmp    EXPORT_SYMBOL(next_quick_light),%ax
		jae    jump_45696
		and    $0xffff,%eax
		imul   $0x6,%eax,%edx
		mov    game_quick_lights,%eax
		movw   $0x0,(%edx,%eax,1)
		mov    0x4(%edx,%eax,1),%ax
		test   %ax,%ax
		jne    jump_456ed
		jmp    jump_45696
	jump_45715:
		xor    %ecx,%ecx
		xor    %ebp,%ebp
		mov    %ebp,%esi
		jmp    jump_4571e
	jump_4571d:
		inc    %ecx
	jump_4571e:
		xor    %eax,%eax
		mov    %cx,%ax
		cmp    $0x80,%eax
		jge    jump_457c3
		mov    $0x7a,%ebx
		jmp    jump_45736
	jump_45735:
		inc    %ebx
	jump_45736:
		xor    %eax,%eax
		mov    %bx,%ax
		cmp    $0x80,%eax
		jge    jump_4571d
		xor    %edx,%edx
		shl    $0x7,%eax
		mov    %cx,%dx
		add    %edx,%eax
		imul   $0x12,%eax,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		add    %eax,%edx
		mov    %ebx,%eax
		mov    $0x5,%edi
		sub    $0x79,%eax
		sub    %eax,%edi
		imul   $0x46,%edi,%eax
		movswl %ax,%edi
		test   %edi,%edi
		jge    jump_4576f
		mov    %esi,%eax
	jump_4576f:
		movswl %ax,%edi
		cmp    $0x100,%edi
		jle    jump_4577f
		mov    $0x100,%eax
	jump_4577f:
		xor    %edi,%edi
		cwtl
		mov    0xc(%edx),%di
		imul   %edi,%eax
		sar    $0x8,%eax
		mov    %ax,0xc(%edx)
		mov    0x2(%edx),%ax
		test   %ax,%ax
		je     jump_45735
	jump_45799:
		cmp    EXPORT_SYMBOL(next_quick_light),%ax
		jae    jump_45735
		and    $0xffff,%eax
		imul   $0x6,%eax,%eax
		mov    game_quick_lights,%edx
		mov    %si,(%edx,%eax,1)
		mov    0x4(%edx,%eax,1),%ax
		test   %ax,%ax
		jne    jump_45799
		jmp    jump_45735
	jump_457c3:
		mov    $0x100,%ebp
		xor    %esi,%esi
		xor    %ecx,%ecx
		jmp    jump_457cf
	jump_457ce:
		inc    %esi
	jump_457cf:
		xor    %eax,%eax
		mov    %si,%ax
		cmp    $0x80,%eax
		jge    jump_45868
		mov    %ecx,%ebx
		jmp    jump_457e4
	jump_457e3:
		inc    %ebx
	jump_457e4:
		xor    %eax,%eax
		mov    %bx,%ax
		cmp    $0x6,%eax
		jge    jump_457ce
		mov    %eax,%edx
		xor    %eax,%eax
		shl    $0x7,%edx
		mov    %si,%ax
		add    %edx,%eax
		imul   $0x12,%eax,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		add    %eax,%edx
		mov    %ebx,%eax
		dec    %eax
		imul   $0x46,%eax,%eax
		movswl %ax,%edi
		test   %edi,%edi
		jge    jump_45814
		mov    %ecx,%eax
	jump_45814:
		movswl %ax,%edi
		cmp    $0x100,%edi
		jle    jump_45824
		mov    $0x100,%eax
	jump_45824:
		xor    %edi,%edi
		cwtl
		mov    0xc(%edx),%di
		imul   %edi,%eax
		sar    $0x8,%eax
		mov    %ax,0xc(%edx)
		mov    0x2(%edx),%ax
		test   %ax,%ax
		je     jump_457e3
	jump_4583e:
		cmp    EXPORT_SYMBOL(next_quick_light),%ax
		jae    jump_457e3
		and    $0xffff,%eax
		imul   $0x6,%eax,%eax
		mov    game_quick_lights,%edx
		mov    %cx,(%edx,%eax,1)
		mov    0x4(%edx,%eax,1),%ax
		test   %ax,%ax
		jne    jump_4583e
		jmp    jump_457e3
	jump_45868:
		mov    $0x1,%esi
		cmp    EXPORT_SYMBOL(next_object_face),%si
		jmp    jump_45881
	jump_45876:
		mov    EXPORT_SYMBOL(next_object_face),%cx
		inc    %esi
		cmp    %cx,%si
	jump_45881:
		jae    jump_459c0
		xor    %eax,%eax
		mov    %si,%ax
		mov    game_object_faces,%edx
		shl    $0x5,%eax
		mov    0xc(%edx,%eax,1),%ax
		and    $0xffff,%eax
		imul   $0x24,%eax,%edx
		mov    game_objects,%eax
		mov    0xa(%edx,%eax,1),%ax
		cwtl
		test   %eax,%eax
		jle    jump_45876
		cmp    $0x3e8,%eax
		jge    jump_45876
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x9(%eax),%dl
		cmp    $0x9,%edx
		jne    jump_45876
		mov    0x8(%eax),%al
		and    $0xff,%eax
		cmp    $0x20,%eax
		je     jump_45876
		xor    %ecx,%ecx
		jmp    jump_458e2
	jump_458e1:
		inc    %ecx
	jump_458e2:
		xor    %edx,%edx
		mov    %cx,%dx
		cmp    $0x3,%edx
		jge    jump_45876
		xor    %eax,%eax
		mov    %si,%ax
		mov    %eax,%ebx
		mov    game_object_faces,%eax
		shl    $0x5,%ebx
		add    %ebx,%eax
		mov    (%eax,%edx,2),%dx
		and    $0xffff,%edx
		imul   $0xa,%edx,%edx
		mov    EXPORT_SYMBOL(game_object_points),%ebx
		add    %ebx,%edx
		mov    (%edx),%ebp
		mov    0xc(%eax),%ax
		sar    $0x10,%ebp
		and    $0xffff,%eax
		imul   $0x24,%eax,%eax
		mov    game_objects,%ebx
		mov    0x4(%edx),%edx
		add    %ebx,%eax
		sar    $0x10,%edx
		mov    0x12(%eax),%ebx
		mov    0x14(%eax),%edi
		sar    $0x10,%ebx
		sar    $0x10,%edi
		add    %ebx,%ebp
		add    %edx,%edi
		cmp    $0x600,%ebp
		jge    jump_4595a
		lea    -0x100(%ebp),%ebx
		movswl %si,%eax
		movswl %cx,%edx
		call   unkn_obj_faces4_lights_func_10
	jump_4595a:
		cmp    $0x7a00,%ebp
		jle    jump_4597c
		mov    $0x500,%eax
		lea    -0x7900(%ebp),%ebx
		sub    %ebx,%eax
		movswl %cx,%edx
		mov    %eax,%ebx
		movswl %si,%eax
		call   unkn_obj_faces4_lights_func_10
	jump_4597c:
		cmp    $0x600,%edi
		jge    jump_45995
		lea    -0x100(%edi),%ebx
		movswl %cx,%edx
		movswl %si,%eax
		call   unkn_obj_faces4_lights_func_10
	jump_45995:
		cmp    $0x7a00,%edi
		jle    jump_458e1
		mov    $0x500,%eax
		lea    -0x7900(%edi),%ebx
		sub    %ebx,%eax
		movswl %cx,%edx
		mov    %eax,%ebx
		movswl %si,%eax
		call   unkn_obj_faces4_lights_func_10
		jmp    jump_458e1
	jump_459c0:
		mov    $0x1,%esi
		cmp    EXPORT_SYMBOL(next_object_face4),%si
		jmp    jump_459d8
	jump_459ce:
		mov    EXPORT_SYMBOL(next_object_face4),%ax
		inc    %esi
		cmp    %ax,%si
	jump_459d8:
		jae    jump_45b2e
		xor    %eax,%eax
		mov    %si,%ax
		imul   $0x28,%eax,%edx
		mov    game_object_faces4,%eax
		mov    0xe(%edx,%eax,1),%ax
		and    $0xffff,%eax
		imul   $0x24,%eax,%eax
		mov    game_objects,%edx
		mov    0xa(%edx,%eax,1),%ax
		cwtl
		test   %eax,%eax
		jle    jump_459ce
		cmp    $0x3e8,%eax
		jge    jump_459ce
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x9(%eax),%dl
		cmp    $0x9,%edx
		jne    jump_459ce
		mov    0x8(%eax),%al
		and    $0xff,%eax
		cmp    $0x20,%eax
		je     jump_459ce
		xor    %ecx,%ecx
		jmp    jump_45a39
	jump_45a38:
		inc    %ecx
	jump_45a39:
		xor    %eax,%eax
		mov    %cx,%ax
		cmp    $0x4,%eax
		jge    jump_459ce
		xor    %edx,%edx
		mov    %si,%dx
		imul   $0x28,%edx,%edx
		mov    game_object_faces4,%ebx
		add    %ebx,%edx
		mov    (%edx,%eax,2),%ax
		and    $0xffff,%eax
		imul   $0xa,%eax,%eax
		mov    EXPORT_SYMBOL(game_object_points),%ebx
		add    %ebx,%eax
		mov    (%eax),%edi
		mov    0xe(%edx),%dx
		sar    $0x10,%edi
		and    $0xffff,%edx
		imul   $0x24,%edx,%edx
		mov    game_objects,%ebx
		mov    0x12(%edx,%ebx,1),%ebp
		sar    $0x10,%ebp
		add    %edi,%ebp
		mov    0x4(%eax),%edi
		mov    0x14(%edx,%ebx,1),%eax
		sar    $0x10,%edi
		sar    $0x10,%eax
		add    %eax,%edi
		cmp    $0x600,%ebp
		jge    jump_45ac2
		mov    %esi,%eax
		mov    %si,0xc(%esp)
		neg    %eax
		mov    %ax,0xc(%esp)
		mov    0xa(%esp),%eax
		lea    -0x100(%ebp),%ebx
		sar    $0x10,%eax
		movswl %cx,%edx
		call   unkn_obj_faces4_lights_func_10
	jump_45ac2:
		cmp    $0x7a00,%ebp
		jle    jump_45ae6
		mov    $0x500,%eax
		lea    -0x7900(%ebp),%ebx
		sub    %ebx,%eax
		mov    %eax,%ebx
		mov    %esi,%eax
		neg    %eax
		movswl %cx,%edx
		cwtl
		call   unkn_obj_faces4_lights_func_10
	jump_45ae6:
		cmp    $0x600,%edi
		jge    jump_45b01
		mov    %esi,%eax
		lea    -0x100(%edi),%ebx
		neg    %eax
		movswl %cx,%edx
		cwtl
		call   unkn_obj_faces4_lights_func_10
	jump_45b01:
		cmp    $0x7a00,%edi
		jle    jump_45a38
		mov    $0x500,%eax
		lea    -0x7900(%edi),%ebx
		sub    %ebx,%eax
		mov    %eax,%ebx
		mov    %esi,%eax
		neg    %eax
		movswl %cx,%edx
		cwtl
		call   unkn_obj_faces4_lights_func_10
		jmp    jump_45a38
	jump_45b2e:
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (LbRandomAnyShort_TODEL)	/* 0x45B40 */
/*----------------------------------------------------------------*/
		push   %edx
		mov    EXPORT_SYMBOL(lbSeed),%edx
		imul   $0xbb40e62d,%edx,%edx
		add    $0xd15c,%edx
		mov    %edx,%eax
		shr    $0x8,%eax
		mov    %edx,EXPORT_SYMBOL(lbSeed)
		and    $0xffff,%eax
		pop    %edx
		ret


/*----------------------------------------------------------------*/
calc_normal:	/* 0x045B84 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x14,%esp
		mov    %edx,0x4(%esp)
		and    $0xffff,%eax
		mov    game_object_faces,%esi
		shl    $0x5,%eax
		add    %eax,%esi
		xor    %eax,%eax
		mov    (%esi),%ax
		lea    0x0(,%eax,4),%ebx
		mov    EXPORT_SYMBOL(game_object_points),%edi
		add    %eax,%ebx
		xor    %eax,%eax
		add    %ebx,%ebx
		mov    0x2(%esi),%ax
		lea    (%edi,%ebx,1),%ecx
		lea    0x0(,%eax,4),%ebx
		add    %eax,%ebx
		add    %ebx,%ebx
		xor    %eax,%eax
		lea    (%edi,%ebx,1),%edx
		mov    0x4(%esi),%ax
		mov    (%edx),%esi
		lea    0x0(,%eax,4),%ebx
		sar    $0x10,%esi
		add    %eax,%ebx
		mov    (%ecx),%eax
		add    %ebx,%ebx
		sar    $0x10,%eax
		add    %edi,%ebx
		mov    %esi,%edi
		sub    %eax,%edi
		mov    %edi,0xc(%esp)
		mov    0x2(%edx),%eax
		mov    0x2(%ecx),%edi
		sar    $0x10,%eax
		sar    $0x10,%edi
		mov    %eax,(%esp)
		sub    %edi,%eax
		mov    %eax,%edi
		mov    0x4(%edx),%eax
		mov    0x4(%ecx),%ebp
		sar    $0x10,%eax
		sar    $0x10,%ebp
		mov    %eax,%edx
		sub    %ebp,%edx
		mov    %edx,%ebp
		mov    (%ebx),%edx
		sar    $0x10,%edx
		sub    %esi,%edx
		mov    %edx,%esi
		mov    0x2(%ebx),%edx
		mov    (%esp),%ecx
		sar    $0x10,%edx
		sub    %ecx,%edx
		mov    0x4(%ebx),%ecx
		sar    $0x10,%ecx
		sub    %eax,%ecx
		mov    0xc(%esp),%eax
		mov    %edx,0x10(%esp)
		test   %eax,%eax
		jne    jump_45c47
		test   %edi,%edi
		jne    jump_45c47
		test   %ebp,%ebp
		je     jump_45c56
	jump_45c47:
		test   %esi,%esi
		jne    jump_45c73
		cmpl   $0x0,0x10(%esp)
		jne    jump_45c73
		test   %ecx,%ecx
		jne    jump_45c73
	jump_45c56:
		mov    0x4(%esp),%eax
		movl   $0x0,(%eax)
		movl   $0xff,0x4(%eax)
		movl   $0x0,0x8(%eax)
		jmp    jump_45dc8
	jump_45c73:
		mov    0xc(%esp),%edx
		imul   %edx,%edx
		mov    %edi,%eax
		imul   %edi,%eax
		mov    %ebp,%ebx
		imul   %ebp,%ebx
		add    %edx,%eax
		add    %ebx,%eax
		call   ac_LbSqrL
		mov    %eax,%ebx
		test   %eax,%eax
		jne    jump_45c98
		mov    $0x1,%ebx
	jump_45c98:
		mov    0xc(%esp),%edx
		shl    $0x8,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %edi,%edx
		shl    $0x8,%edx
		mov    %eax,0xc(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %ebp,%edx
		shl    $0x8,%edx
		mov    %eax,%edi
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    0x10(%esp),%edx
		imul   %edx,%edx
		mov    %eax,%ebp
		mov    %esi,%eax
		imul   %esi,%eax
		add    %eax,%edx
		mov    %ecx,%eax
		imul   %ecx,%eax
		add    %edx,%eax
		call   ac_LbSqrL
		mov    %eax,%ebx
		test   %eax,%eax
		jne    jump_45ceb
		mov    $0x1,%ebx
	jump_45ceb:
		mov    %esi,%edx
		shl    $0x8,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    0x10(%esp),%edx
		shl    $0x8,%edx
		mov    %eax,%esi
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %ecx,%edx
		shl    $0x8,%edx
		mov    %eax,0x10(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %edi,%edx
		imul   %eax,%edx
		mov    %eax,%ecx
		mov    0x10(%esp),%eax
		imul   %ebp,%eax
		imul   %esi,%ebp
		sub    %eax,%edx
		mov    %edx,%eax
		sar    $0x8,%eax
		mov    %eax,0x8(%esp)
		mov    0xc(%esp),%eax
		imul   %eax,%ecx
		imul   %edi,%esi
		imul   0x10(%esp),%eax
		mov    0x8(%esp),%edx
		imul   %edx,%edx
		sub    %ecx,%ebp
		mov    %ebp,%ecx
		sub    %esi,%eax
		sar    $0x8,%ecx
		mov    %eax,%esi
		mov    %ecx,%eax
		imul   %ecx,%eax
		sar    $0x8,%esi
		add    %eax,%edx
		mov    %esi,%eax
		imul   %esi,%eax
		add    %edx,%eax
		call   ac_LbSqrL
		mov    %eax,%ebx
		test   %eax,%eax
		jne    jump_45d75
		mov    $0x1,%ebx
	jump_45d75:
		mov    0x8(%esp),%edx
		shl    $0x8,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %ecx,%edx
		shl    $0x8,%edx
		mov    %eax,0x8(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %esi,%edx
		shl    $0x8,%edx
		mov    %eax,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    0x8(%esp),%edi
		mov    %eax,%esi
		test   %edi,%edi
		jne    jump_45db8
		test   %ecx,%ecx
		jne    jump_45db8
		test   %eax,%eax
		jne    jump_45db8
		mov    $0xff,%ecx
	jump_45db8:
		mov    0x4(%esp),%edx
		mov    0x8(%esp),%eax
		mov    %eax,(%edx)
		mov    %ecx,0x4(%edx)
		mov    %esi,0x8(%edx)
	jump_45dc8:
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
calc_normal4:	/* 0x045DD4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x14,%esp
		mov    %edx,0x4(%esp)
		and    $0xffff,%eax
		lea    0x0(,%eax,4),%ebx
		add    %eax,%ebx
		mov    game_object_faces4,%eax
		shl    $0x3,%ebx
		add    %ebx,%eax
		xor    %edx,%edx
		mov    (%eax),%dx
		lea    0x0(,%edx,4),%ebx
		mov    EXPORT_SYMBOL(game_object_points),%ecx
		add    %edx,%ebx
		xor    %edx,%edx
		add    %ebx,%ebx
		mov    0x2(%eax),%dx
		lea    (%ecx,%ebx,1),%esi
		lea    0x0(,%edx,4),%ebx
		add    %edx,%ebx
		add    %ebx,%ebx
		mov    0x4(%eax),%ax
		lea    (%ecx,%ebx,1),%edx
		and    $0xffff,%eax
		lea    0x0(,%eax,4),%ebx
		add    %eax,%ebx
		add    %ebx,%ebx
		mov    0x2(%esi),%edi
		lea    (%ecx,%ebx,1),%eax
		mov    (%edx),%ebx
		mov    (%esi),%ecx
		sar    $0x10,%ebx
		sar    $0x10,%ecx
		mov    %ebx,(%esp)
		sub    %ecx,%ebx
		sar    $0x10,%edi
		mov    %ebx,%ecx
		mov    0x2(%edx),%ebx
		mov    0x4(%esi),%esi
		sar    $0x10,%ebx
		sar    $0x10,%esi
		mov    %ebx,%ebp
		mov    0x4(%edx),%edx
		sub    %edi,%ebp
		sar    $0x10,%edx
		mov    %ebp,%edi
		mov    %edx,%ebp
		sub    %esi,%ebp
		mov    (%eax),%esi
		sar    $0x10,%esi
		sub    (%esp),%esi
		mov    %esi,0xc(%esp)
		mov    0x2(%eax),%esi
		mov    0x4(%eax),%eax
		sar    $0x10,%esi
		sar    $0x10,%eax
		sub    %edx,%eax
		sub    %ebx,%esi
		mov    %eax,0x10(%esp)
		test   %ecx,%ecx
		jne    jump_45e9b
		test   %edi,%edi
		jne    jump_45e9b
		test   %ebp,%ebp
		je     jump_45ead
	jump_45e9b:
		cmpl   $0x0,0xc(%esp)
		jne    jump_45eca
		test   %esi,%esi
		jne    jump_45eca
		cmpl   $0x0,0x10(%esp)
		jne    jump_45eca
	jump_45ead:
		mov    0x4(%esp),%eax
		movl   $0x0,(%eax)
		movl   $0xff,0x4(%eax)
		movl   $0x0,0x8(%eax)
		jmp    jump_46017
	jump_45eca:
		mov    %ecx,%edx
		imul   %ecx,%edx
		mov    %edi,%eax
		imul   %edi,%eax
		mov    %ebp,%ebx
		imul   %ebp,%ebx
		add    %edx,%eax
		add    %ebx,%eax
		call   ac_LbSqrL
		mov    %eax,%ebx
		test   %eax,%eax
		jne    jump_45eed
		mov    $0x1,%ebx
	jump_45eed:
		mov    %ecx,%edx
		shl    $0x8,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %edi,%edx
		shl    $0x8,%edx
		mov    %eax,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %ebp,%edx
		shl    $0x8,%edx
		mov    %eax,%edi
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    0xc(%esp),%edx
		imul   %edx,%edx
		mov    %eax,%ebp
		mov    %esi,%eax
		imul   %esi,%eax
		add    %eax,%edx
		mov    0x10(%esp),%eax
		imul   %eax,%eax
		add    %edx,%eax
		call   ac_LbSqrL
		mov    %eax,%ebx
		test   %eax,%eax
		jne    jump_45f3e
		mov    $0x1,%ebx
	jump_45f3e:
		mov    0xc(%esp),%edx
		shl    $0x8,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %esi,%edx
		shl    $0x8,%edx
		mov    %eax,0xc(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    0x10(%esp),%edx
		shl    $0x8,%edx
		mov    %eax,%esi
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,0x10(%esp)
		imul   %edi,%eax
		mov    %ebp,%edx
		imul   %esi,%edx
		sub    %edx,%eax
		imul   0xc(%esp),%edi
		sar    $0x8,%eax
		mov    %eax,0x8(%esp)
		imul   0xc(%esp),%ebp
		mov    0x8(%esp),%edx
		imul   %edx,%edx
		mov    0x10(%esp),%eax
		imul   %ecx,%eax
		imul   %esi,%ecx
		sub    %eax,%ebp
		sar    $0x8,%ebp
		mov    %ebp,%eax
		imul   %ebp,%eax
		sub    %edi,%ecx
		sar    $0x8,%ecx
		add    %edx,%eax
		mov    %ecx,%edx
		imul   %ecx,%edx
		add    %edx,%eax
		call   ac_LbSqrL
		mov    %eax,%ebx
		test   %eax,%eax
		jne    jump_45fc4
		mov    $0x1,%ebx
	jump_45fc4:
		mov    0x8(%esp),%edx
		shl    $0x8,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %ebp,%edx
		shl    $0x8,%edx
		mov    %eax,0x8(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %ecx,%edx
		shl    $0x8,%edx
		mov    %eax,%ebp
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    0x8(%esp),%esi
		mov    %eax,%ecx
		test   %esi,%esi
		jne    jump_46007
		test   %ebp,%ebp
		jne    jump_46007
		test   %eax,%eax
		jne    jump_46007
		mov    $0xff,%ebp
	jump_46007:
		mov    0x4(%esp),%edx
		mov    0x8(%esp),%eax
		mov    %eax,(%edx)
		mov    %ebp,0x4(%edx)
		mov    %ecx,0x8(%edx)
	jump_46017:
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret

vtable_46020:
		.long   func_462e7
		.long   func_462ed
		.long   func_462f3
		.long   func_462f9


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_unkn_object_shift_03)	/* 0x046030 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4c,%esp
		mov    EXPORT_SYMBOL(next_normal),%bx
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    game_objects,%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0x2(%edx),%ax
		mov    %eax,0x3c(%esp)
		mov    (%edx),%ax
		mov    %eax,0x2c(%esp)
		mov    0x8(%edx),%ax
		mov    %ebx,0x28(%esp)
		mov    %eax,0x38(%esp)
		mov    0x6(%edx),%ax
		mov    %edx,0x18(%esp)
		mov    %eax,0x40(%esp)
		mov    0x18(%edx),%ax
		mov    0x1a(%edx),%cx
		mov    %eax,0x34(%esp)
		cmp    %cx,%ax
		jmp    jump_46327
	jump_46094:
		mov    0x44(%esp),%edx
		inc    %edx
		mov    %edx,0x44(%esp)
		mov    %edx,%eax
		cmp    0x3c(%esp),%ax
		jae    jump_46122
		xor    %eax,%eax
		jmp    jump_460af
	jump_460ae:
		inc    %eax
	jump_460af:
		xor    %edx,%edx
		mov    %ax,%dx
		cmp    $0x3,%edx
		jge    jump_46094
		movzwl 0x2c(%esp),%ebp
		mov    %ebp,0x20(%esp)
		movzwl 0x44(%esp),%ebp
		mov    %ebp,0xc(%esp)
		mov    0x20(%esp),%ebp
		add    0xc(%esp),%ebp
		shl    $0x5,%ebp
		mov    %ebp,0x8(%esp)
		mov    game_object_faces,%ebp
		add    0x8(%esp),%ebp
		add    %edx,%edx
		mov    %ebp,0x10(%esp)
		add    %edx,%ebp
		mov    0x34(%esp),%edx
		cmp    0x0(%ebp),%dx
		jne    jump_460ae
		mov    0x10(%esp),%ebp
		xor    %edx,%edx
		mov    0x1a(%ebp),%dx
		mov    game_normals,%ebp
		shl    $0x4,%edx
		add    %ebp,%edx
		add    (%edx),%si
		add    0x4(%edx),%cx
		add    0x8(%edx),%di
		mov    0x30(%esp),%edx
		inc    %edx
		mov    %dx,0x30(%esp)
		jmp    jump_460ae
	jump_46122:
		xor    %eax,%eax
		mov    0x38(%esp),%edx
		mov    %eax,0x48(%esp)
		test   %dx,%dx
		jbe    jump_461c8
		xor    %eax,%eax
		jmp    jump_46154
	jump_46139:
		mov    0x48(%esp),%eax
		inc    %eax
		mov    0x38(%esp),%edx
		mov    %eax,0x48(%esp)
		cmp    %dx,%ax
		jae    jump_461c8
		xor    %eax,%eax
		jmp    jump_46154
	jump_46153:
		inc    %eax
	jump_46154:
		xor    %edx,%edx
		mov    %ax,%dx
		cmp    $0x4,%edx
		jge    jump_46139
		movzwl 0x40(%esp),%ebp
		mov    %ebp,0x1c(%esp)
		movzwl 0x48(%esp),%ebp
		mov    %ebp,(%esp)
		mov    0x1c(%esp),%ebp
		add    (%esp),%ebp
		imul   $0x28,%ebp,%ebp
		mov    %ebp,0x4(%esp)
		mov    game_object_faces4,%ebp
		add    0x4(%esp),%ebp
		add    %edx,%edx
		mov    %ebp,0x24(%esp)
		add    %edx,%ebp
		mov    0x34(%esp),%edx
		cmp    0x0(%ebp),%dx
		jne    jump_46153
		mov    0x24(%esp),%ebp
		xor    %edx,%edx
		mov    0x20(%ebp),%dx
		shl    $0x4,%edx
		mov    %edx,0x14(%esp)
		mov    0x14(%esp),%ebp
		mov    game_normals,%edx
		add    %ebp,%edx
		add    (%edx),%si
		add    0x4(%edx),%cx
		add    0x8(%edx),%di
		incw   0x30(%esp)
		jmp    jump_46153
	jump_461c8:
		mov    0x2e(%esp),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jle    jump_46313
		mov    %esi,%eax
		mov    0x30(%esp),%esi
		cwtd
		idiv   %si
		mov    %eax,%esi
		mov    %ecx,%eax
		mov    0x30(%esp),%ecx
		cwtd
		idiv   %cx
		mov    %eax,%ecx
		mov    %edi,%eax
		mov    0x30(%esp),%edi
		cwtd
		idiv   %di
		mov    %eax,%edi
		xor    %edx,%edx
		movswl %si,%eax
		mov    %bx,%dx
		mov    game_normals,%esi
		shl    $0x4,%edx
		movswl %cx,%ecx
		mov    %eax,(%edx,%esi,1)
		mov    %ecx,0x4(%edx,%esi,1)
		movswl %di,%eax
		mov    %eax,0x8(%edx,%esi,1)
		mov    0x3c(%esp),%eax
		xor    %esi,%esi
		test   %ax,%ax
		jbe    jump_46298
		mov    0x34(%esp),%edi
	jump_46233:
		xor    %ecx,%ecx
		xor    %edx,%edx
		mov    0x2c(%esp),%cx
		mov    %si,%dx
		add    %ecx,%edx
		mov    game_object_faces,%ecx
		shl    $0x5,%edx
		xor    %eax,%eax
		add    %ecx,%edx
		jmp    jump_4625d
	jump_46250:
		mov    0x3c(%esp),%ecx
		inc    %esi
		cmp    %cx,%si
		jae    jump_46298
		jmp    jump_46233
	jump_4625c:
		inc    %eax
	jump_4625d:
		xor    %ecx,%ecx
		mov    %ax,%cx
		cmp    $0x3,%ecx
		jge    jump_46250
		cmp    (%edx,%ecx,2),%di
		je     jump_46281
		jmp    jump_4625c
	jump_4626f:
		mov    %bx,0xe(%edx)
		jmp    jump_4625c
	jump_46275:
		mov    %bx,0x10(%edx)
		jmp    jump_4625c
	jump_4627b:
		mov    %bx,0x12(%edx)
		jmp    jump_4625c
	jump_46281:
		cmp    $0x1,%ax
		jb     jump_46291
		jbe    jump_46275
		cmp    $0x2,%ax
		je     jump_4627b
		jmp    jump_4625c
	jump_46291:
		test   %ax,%ax
		je     jump_4626f
		jmp    jump_4625c
	jump_46298:
		mov    0x38(%esp),%edi
		xor    %esi,%esi
		test   %di,%di
		jbe    jump_46312
		mov    0x34(%esp),%edi
	jump_462ab:
		xor    %edx,%edx
		xor    %ecx,%ecx
		mov    0x40(%esp),%dx
		mov    %si,%cx
		add    %ecx,%edx
		imul   $0x28,%edx,%ecx
		mov    game_object_faces4,%edx
		xor    %eax,%eax
		add    %ecx,%edx
		jmp    jump_462d5
	jump_462c8:
		mov    0x38(%esp),%eax
		inc    %esi
		cmp    %ax,%si
		jae    jump_46312
		jmp    jump_462ab
	jump_462d4:
		inc    %eax
	jump_462d5:
		xor    %ecx,%ecx
		mov    %ax,%cx
		cmp    $0x4,%ecx
		jge    jump_462c8
		cmp    (%edx,%ecx,2),%di
		je     jump_462ff
		jmp    jump_462d4


/*----------------------------------------------------------------*/
func_462e7:
/*----------------------------------------------------------------*/
		mov    %bx,0x10(%edx)
		jmp    jump_462d4


/*----------------------------------------------------------------*/
func_462ed:
/*----------------------------------------------------------------*/
		mov    %bx,0x12(%edx)
		jmp    jump_462d4


/*----------------------------------------------------------------*/
func_462f3:
/*----------------------------------------------------------------*/
		mov    %bx,0x14(%edx)
		jmp    jump_462d4


/*----------------------------------------------------------------*/
func_462f9:
/*----------------------------------------------------------------*/
		mov    %bx,0x16(%edx)
		jmp    jump_462d4
	jump_462ff:
		cmp    $0x3,%ax
		ja     jump_462d4
		xor    %ecx,%ecx
		mov    %ax,%cx
		jmp    *%cs:vtable_46020(,%ecx,4)
	jump_46312:
		inc    %ebx
	jump_46313:
		mov    0x34(%esp),%esi
		mov    0x18(%esp),%edx
		inc    %esi
		mov    0x1a(%edx),%di
		mov    %esi,0x34(%esp)
		cmp    %di,%si
	jump_46327:
		jae    jump_4634e
		xor    %eax,%eax
		xor    %edi,%edi
		xor    %ecx,%ecx
		mov    %ax,0x30(%esp)
		mov    %eax,0x44(%esp)
		mov    0x3c(%esp),%eax
		xor    %esi,%esi
		test   %ax,%ax
		jbe    jump_46122
		xor    %eax,%eax
		jmp    jump_460af
	jump_4634e:
		mov    0x18(%esp),%ecx
		mov    0x28(%esp),%edx
		mov    %dx,0xc(%ecx)
		mov    %bx,0xe(%ecx)
		mov    %bx,EXPORT_SYMBOL(next_normal)
		add    $0x4c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_unkn_object_shift_02)	/* 0x046370 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		mov    %eax,%ecx
		mov    %edx,(%esp)
		xor    %edx,%edx
		mov    %bx,%dx
		lea    0x0(,%edx,8),%eax
		add    %eax,%edx
		mov    game_objects,%eax
		shl    $0x2,%edx
		lea    (%eax,%edx,1),%ebp
		mov    (%esp),%edx
		mov    0x2(%ebp),%ax
		mov    0x0(%ebp),%si
		mov    0x6(%ebp),%di
		mov    %eax,0x4(%esp)
		mov    0x8(%ebp),%ax
		sub    %ecx,%edx
		mov    %eax,0x8(%esp)
		test   %si,%si
		je     jump_463ed
		mov    0x4(%esp),%ecx
		xor    %ebx,%ebx
		test   %cx,%cx
		jbe    jump_463ed
	jump_463c2:
		xor    %ecx,%ecx
		xor    %eax,%eax
		mov    %si,%cx
		mov    %bx,%ax
		add    %eax,%ecx
		mov    game_object_faces,%eax
		shl    $0x5,%ecx
		sub    %dx,0xe(%ecx,%eax,1)
		sub    %dx,0x10(%ecx,%eax,1)
		inc    %ebx
		sub    %dx,0x12(%ecx,%eax,1)
		cmp    0x4(%esp),%bx
		jb     jump_463c2
	jump_463ed:
		test   %di,%di
		je     jump_46435
		mov    0x8(%esp),%ecx
		xor    %ebx,%ebx
		test   %cx,%cx
		jbe    jump_46435
	jump_463fd:
		xor    %ecx,%ecx
		xor    %eax,%eax
		mov    %di,%cx
		mov    %bx,%ax
		add    %ecx,%eax
		imul   $0x28,%eax,%eax
		mov    game_object_faces4,%ecx
		sub    %dx,0x10(%ecx,%eax,1)
		sub    %dx,0x12(%ecx,%eax,1)
		sub    %dx,0x14(%ecx,%eax,1)
		mov    0x16(%ecx,%eax,1),%si
		sub    %edx,%esi
		inc    %ebx
		mov    %si,0x16(%ecx,%eax,1)
		cmp    0x8(%esp),%bx
		jb     jump_463fd
	jump_46435:
		mov    (%esp),%eax
		cmp    EXPORT_SYMBOL(next_normal),%ax
		jae    jump_4646a
	jump_46441:
		xor    %ecx,%ecx
		mov    %ax,%cx
		mov    game_normals,%ebx
		mov    %ecx,%edi
		mov    %ecx,%esi
		sub    %edx,%edi
		shl    $0x4,%esi
		shl    $0x4,%edi
		add    %ebx,%esi
		add    %ebx,%edi
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		inc    %eax
		cmp    EXPORT_SYMBOL(next_normal),%ax
		jb     jump_46441
	jump_4646a:
		mov    EXPORT_SYMBOL(next_normal),%di
		mov    0xc(%ebp),%bx
		mov    0xe(%ebp),%cx
		sub    %edx,%edi
		sub    %edx,%ebx
		sub    %edx,%ecx
		mov    %bx,0xc(%ebp)
		mov    %di,EXPORT_SYMBOL(next_normal)
		mov    %cx,0xe(%ebp)
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_matrix_identity_fill)	/* 0x046498 */
/*----------------------------------------------------------------*/
		movl   $0x4000,(%eax)
		movl   $0x0,0x4(%eax)
		movl   $0x0,0x8(%eax)
		movl   $0x0,0xc(%eax)
		movl   $0x4000,0x10(%eax)
		movl   $0x0,0x14(%eax)
		movl   $0x0,0x18(%eax)
		movl   $0x0,0x1c(%eax)
		movl   $0x4000,0x20(%eax)
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_matrix_transform)	/* 0x0464D8 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		mov    0x4(%ebx),%ecx
		mov    0x4(%edx),%esi
		imul   %ecx,%esi
		mov    (%edx),%edi
		mov    (%ebx),%ecx
		imul   %edi,%ecx
		mov    0x8(%edx),%ebp
		add    %ecx,%esi
		mov    0x8(%ebx),%ecx
		imul   %ebp,%ecx
		add    %ecx,%esi
		mov    %esi,(%eax)
		mov    0x4(%ebx),%ecx
		mov    0x10(%edx),%esi
		imul   %ecx,%esi
		mov    0xc(%edx),%edi
		mov    (%ebx),%ecx
		imul   %edi,%ecx
		mov    0x14(%edx),%ebp
		add    %ecx,%esi
		mov    0x8(%ebx),%ecx
		imul   %ebp,%ecx
		add    %ecx,%esi
		mov    %esi,0x4(%eax)
		mov    0x4(%ebx),%ecx
		mov    0x1c(%edx),%esi
		imul   %ecx,%esi
		mov    0x18(%edx),%edi
		mov    (%ebx),%ecx
		imul   %edi,%ecx
		mov    0x20(%edx),%ebp
		mov    0x8(%ebx),%ebx
		imul   %ebp,%ebx
		add    %esi,%ecx
		add    %ebx,%ecx
		mov    %ecx,0x8(%eax)
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_object_vec_normalisation)	/* 0x0466B0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		xor    %ebx,%ebx
		mov    %dl,%bl
		shl    $0x2,%ebx
		add    %eax,%ebx
		mov    (%ebx),%edx
		mov    %edx,%edi
		imul   %edx,%edi
		mov    0xc(%ebx),%esi
		mov    %esi,%eax
		imul   %esi,%eax
		mov    0x18(%ebx),%ecx
		add    %edi,%eax
		mov    %ecx,%edi
		imul   %ecx,%edi
		add    %edi,%eax
		shl    $0xe,%edx
		call   ac_LbSqrL
		lea    0x1(%eax),%edi
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %edi
		mov    %esi,%edx
		shl    $0xe,%edx
		mov    %eax,(%ebx)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %edi
		mov    %ecx,%edx
		shl    $0xe,%edx
		mov    %eax,0xc(%ebx)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %edi
		mov    %eax,0x18(%ebx)
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_vec_cross_prod)	/* 0x046710 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		mov    0x4(%edx),%ecx
		mov    0x8(%ebx),%esi
		imul   %ecx,%esi
		mov    0x4(%ebx),%edi
		mov    0x8(%edx),%ecx
		imul   %edi,%ecx
		sub    %ecx,%esi
		mov    %esi,(%eax)
		mov    0x8(%edx),%esi
		imul   (%ebx),%esi
		mov    (%edx),%ecx
		imul   0x8(%ebx),%ecx
		sub    %ecx,%esi
		mov    %esi,0x4(%eax)
		mov    (%edx),%ecx
		imul   0x4(%ebx),%ecx
		mov    (%ebx),%esi
		mov    0x4(%edx),%edx
		imul   %esi,%edx
		sub    %edx,%ecx
		mov    %ecx,0x8(%eax)
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_rotate_object_axis)	/* 0x046754 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x24,%esp
		mov    %eax,%esi
		test   %dx,%dx
		jne    jump_4676f
		test   %bx,%bx
		jne    jump_4676f
		test   %cx,%cx
		je     jump_46965
	jump_4676f:
		test   %dx,%dx
		je     jump_467d4
		mov    (%esi),%eax
		sub    0x8(%esi),%eax
		movswl %dx,%edi
		imul   %edi,%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		shl    $0x9,%edx
		sbb    %edx,%eax
		sar    $0x9,%eax
		mov    0x8(%esi),%ebp
		mov    0x14(%esi),%edx
		add    %eax,%ebp
		mov    0xc(%esi),%eax
		sub    %edx,%eax
		imul   %edi,%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		shl    $0x9,%edx
		sbb    %edx,%eax
		sar    $0x9,%eax
		mov    %ebp,0x8(%esi)
		mov    0x14(%esi),%ebp
		mov    0x20(%esi),%edx
		add    %eax,%ebp
		mov    0x18(%esi),%eax
		sub    %edx,%eax
		imul   %edi,%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		shl    $0x9,%edx
		sbb    %edx,%eax
		sar    $0x9,%eax
		mov    0x20(%esi),%edi
		mov    %ebp,0x14(%esi)
		add    %eax,%edi
		mov    %edi,0x20(%esi)
	jump_467d4:
		test   %bx,%bx
		je     jump_46838
		mov    0x4(%esi),%edx
		mov    0x8(%esi),%ebp
		movswl %bx,%ebx
		sub    %ebp,%edx
		imul   %ebx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x9,%edx
		sbb    %edx,%eax
		sar    $0x9,%eax
		lea    (%eax,%ebp,1),%edx
		mov    %edx,0x8(%esi)
		mov    0x14(%esi),%edi
		mov    0x10(%esi),%edx
		sub    %edi,%edx
		imul   %ebx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x9,%edx
		sbb    %edx,%eax
		sar    $0x9,%eax
		mov    0x20(%esi),%edx
		lea    (%edi,%eax,1),%ebp
		mov    0x1c(%esi),%eax
		sub    %edx,%eax
		imul   %ebx,%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		shl    $0x9,%edx
		sbb    %edx,%eax
		sar    $0x9,%eax
		mov    0x20(%esi),%ebx
		mov    %ebp,0x14(%esi)
		add    %eax,%ebx
		mov    %ebx,0x20(%esi)
	jump_46838:
		test   %cx,%cx
		je     jump_4689a
		mov    0x4(%esi),%edx
		mov    (%esi),%edi
		movswl %cx,%ebx
		sub    %edi,%edx
		imul   %ebx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x9,%edx
		sbb    %edx,%eax
		sar    $0x9,%eax
		mov    0xc(%esi),%edx
		lea    (%edi,%eax,1),%ebp
		mov    0x10(%esi),%eax
		sub    %edx,%eax
		imul   %ebx,%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		shl    $0x9,%edx
		sbb    %edx,%eax
		sar    $0x9,%eax
		mov    0x18(%esi),%edi
		mov    0x1c(%esi),%edx
		sub    %edi,%edx
		imul   %ebx,%edx
		mov    0xc(%esi),%ecx
		add    %eax,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x9,%edx
		sbb    %edx,%eax
		sar    $0x9,%eax
		mov    %ebp,(%esi)
		mov    %ecx,0xc(%esi)
		lea    (%edi,%eax,1),%ebp
		mov    %ebp,0x18(%esi)
	jump_4689a:
		mov    $0x2,%edx
		mov    %esi,%eax
		call   ac_object_vec_normalisation
		mov    0x8(%esi),%eax
		mov    %eax,(%esp)
		mov    0x14(%esi),%eax
		mov    %eax,0x4(%esp)
		mov    0x20(%esi),%eax
		mov    %eax,0x8(%esp)
		mov    (%esi),%eax
		mov    %eax,0xc(%esp)
		mov    0xc(%esi),%eax
		mov    %eax,0x10(%esp)
		lea    0xc(%esp),%ebx
		mov    0x18(%esi),%eax
		mov    %esp,%edx
		mov    %eax,0x14(%esp)
		lea    0x18(%esp),%eax
		call   ac_vec_cross_prod
		mov    0x18(%esp),%eax
		sar    $0xe,%eax
		mov    %eax,0x4(%esi)
		mov    0x1c(%esp),%eax
		sar    $0xe,%eax
		mov    %eax,0x10(%esi)
		mov    0x20(%esp),%eax
		sar    $0xe,%eax
		mov    $0x1,%edx
		mov    %eax,0x1c(%esi)
		mov    %esi,%eax
		call   ac_object_vec_normalisation
		mov    0x8(%esi),%eax
		mov    %eax,(%esp)
		mov    0x14(%esi),%eax
		mov    %eax,0x4(%esp)
		mov    0x20(%esi),%eax
		mov    %eax,0x8(%esp)
		mov    0x4(%esi),%eax
		mov    %eax,0xc(%esp)
		mov    0x10(%esi),%eax
		mov    %eax,0x10(%esp)
		mov    %esp,%ebx
		mov    0x1c(%esi),%eax
		lea    0xc(%esp),%edx
		mov    %eax,0x14(%esp)
		lea    0x18(%esp),%eax
		call   ac_vec_cross_prod
		mov    0x18(%esp),%eax
		sar    $0xe,%eax
		mov    %eax,(%esi)
		mov    0x1c(%esp),%eax
		sar    $0xe,%eax
		mov    %eax,0xc(%esi)
		mov    0x20(%esp),%eax
		sar    $0xe,%eax
		xor    %edx,%edx
		mov    %eax,0x18(%esi)
		mov    %esi,%eax
		call   ac_object_vec_normalisation
	jump_46965:
		add    $0x24,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
rotate_obj:	/* 0x04696C */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x28,%esp
		mov    %eax,%esi
		mov    %edx,%eax
		mov    %ebx,%edx
		and    $0x7ff,%esi
		and    $0x7,%ah
		and    $0x7,%dh
		movswl %si,%esi
		movswl %dx,%edi
		mov    EXPORT_SYMBOL(lbSinTable)(,%esi,4),%ebx
		mov    EXPORT_SYMBOL(lbSinTable)(,%edi,4),%edx
		sar    %ebx
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%esi,4),%esi
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%edi,4),%edi
		mov    %ebx,(%esp)
		sar    %esi
		sar    %edi
		movswl %ax,%ebx
		mov    %edi,0x4(%esp)
		mov    EXPORT_SYMBOL(lbSinTable)(,%ebx,4),%eax
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%ebx,4),%ebx
		mov    %esi,%edi
		sar    %ebx
		imul   %ebx,%edi
		mov    %edi,0x1c(%esp)
		mov    0x4(%esp),%edi
		imul   %ebx,%edi
		mov    %edi,0x20(%esp)
		mov    0x4(%esp),%edi
		imul   %esi,%edi
		sar    %edx
		mov    %edi,0x8(%esp)
		mov    %esi,%edi
		imul   %edx,%edi
		sar    %eax
		imul   %eax,%esi
		sar    $0xf,%esi
		imul   %edx,%esi
		mov    (%esp),%ebp
		mov    %edi,0x24(%esp)
		mov    0x4(%esp),%edi
		imul   %ebp,%edi
		imul   %ebx,%ebp
		mov    %esi,0x18(%esp)
		mov    %edi,%esi
		sar    $0xf,%esi
		imul   %eax,%esi
		imul   %edx,%ebx
		mov    %ebx,0xc(%esp)
		mov    (%esp),%ebx
		imul   %edx,%ebx
		mov    %ebp,0x14(%esp)
		mov    %ebx,%ebp
		sar    $0xf,%ebp
		imul   %eax,%ebp
		mov    %ebp,0x10(%esp)
		mov    0x8(%esp),%ebp
		sar    $0xf,%ebp
		imul   %eax,%ebp
		mov    0x20(%esp),%edx
		sar    $0x10,%edx
		mov    %edx,(%ecx)
		mov    0xc(%esp),%edx
		neg    %edx
		sar    %eax
		sar    $0x10,%edx
		mov    %eax,0x8(%ecx)
		mov    0x24(%esp),%eax
		mov    %edx,0x4(%ecx)
		add    %esi,%eax
		mov    0x10(%esp),%edx
		sar    $0x10,%eax
		mov    %eax,0xc(%ecx)
		mov    0x8(%esp),%eax
		sub    %ebp,%ebx
		sub    %edx,%eax
		mov    0x18(%esp),%ebp
		sar    $0x10,%eax
		sar    $0x10,%ebx
		mov    %eax,0x10(%ecx)
		mov    0x14(%esp),%eax
		add    %ebp,%edi
		neg    %eax
		mov    %ebx,0x18(%ecx)
		sar    $0x10,%eax
		sar    $0x10,%edi
		mov    %eax,0x14(%ecx)
		mov    0x1c(%esp),%eax
		mov    %edi,0x1c(%ecx)
		sar    $0x10,%eax
		mov    %eax,0x20(%ecx)
		add    $0x28,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_add_node_thing)	/* 0x046C80 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		mov    %eax,%ebx
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%esi
		shl    $0x3,%eax
		add    %esi,%eax
		mov    0x18(%eax),%edx
		sar    $0x8,%edx
		movw   $0x0,(%eax)
		test   %edx,%edx
		jl     jump_46d39
		cmp    $0x8000,%edx
		jge    jump_46d39
		mov    0x20(%eax),%edx
		sar    $0x8,%edx
		test   %edx,%edx
		jl     jump_46d39
		cmp    $0x8000,%edx
		jge    jump_46d39
		mov    0x20(%eax),%edx
		mov    0x18(%eax),%ecx
		sar    $0x10,%edx
		sar    $0x10,%ecx
		shl    $0x7,%edx
		add    %edx,%ecx
		lea    0x0(,%ecx,8),%edx
		add    %ecx,%edx
		mov    EXPORT_SYMBOL(game_my_big_map),%ecx
		add    %edx,%edx
		add    %edx,%ecx
		mov    0x8(%ecx),%dx
		mov    %dx,0x2(%eax)
		mov    (%eax),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jle    jump_46d1c
		mov    %eax,%edx
		shl    $0x2,%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    %bx,(%esi,%eax,8)
		jmp    jump_46d35
	jump_46d1c:
		jge    jump_46d35
		mov    %eax,%edx
		shl    $0x4,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		mov    EXPORT_SYMBOL(sthings),%eax
		mov    %bx,(%edx,%eax,1)
	jump_46d35:
		mov    %bx,0x8(%ecx)
	jump_46d39:
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_add_node_sthing)	/* 0x046D40 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		mov    %eax,%ebx
		movswl %ax,%edx
		mov    %edx,%eax
		shl    $0x4,%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(sthings),%esi
		shl    $0x2,%eax
		lea    (%esi,%eax,1),%edx
		mov    0x20(%edx),%eax
		mov    0x18(%edx),%ecx
		sar    $0x10,%eax
		sar    $0x10,%ecx
		shl    $0x7,%eax
		add    %eax,%ecx
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%ecx
		add    %eax,%eax
		add    %eax,%ecx
		mov    0x18(%edx),%eax
		sar    $0x8,%eax
		movw   $0x0,(%edx)
		test   %eax,%eax
		jl     jump_46de3
		cmp    $0x8000,%eax
		jge    jump_46de3
		mov    0x20(%edx),%eax
		sar    $0x8,%eax
		test   %eax,%eax
		jl     jump_46de3
		cmp    $0x8000,%eax
		jge    jump_46de3
		mov    0x8(%ecx),%ax
		mov    %ax,0x2(%edx)
		mov    (%edx),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jle    jump_46dd2
		mov    %eax,%edx
		shl    $0x2,%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %eax,%edx
		mov    things,%eax
		shl    $0x3,%edx
		mov    %bx,(%edx,%eax,1)
		jmp    jump_46ddf
	jump_46dd2:
		jge    jump_46ddf
		mov    %eax,%edx
		shl    $0x4,%eax
		sub    %edx,%eax
		mov    %bx,(%esi,%eax,4)
	jump_46ddf:
		mov    %bx,0x8(%ecx)
	jump_46de3:
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		nop
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_delete_node)	/* 0x046DEC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		mov    0x18(%eax),%edx
		sar    $0x8,%edx
		test   %edx,%edx
		jl     jump_46ee6
		cmp    $0x8000,%edx
		jge    jump_46ee6
		mov    0x20(%eax),%edx
		sar    $0x8,%edx
		test   %edx,%edx
		jl     jump_46ee6
		cmp    $0x8000,%edx
		jge    jump_46ee6
		movswl (%eax),%edx
		test   %edx,%edx
		jle    jump_46e4b
		mov    %edx,%ebx
		shl    $0x2,%edx
		add    %ebx,%edx
		shl    $0x2,%edx
		add    %ebx,%edx
		mov    things,%ecx
		shl    $0x3,%edx
		add    %edx,%ecx
		mov    0x2(%eax),%dx
		mov    %dx,0x2(%ecx)
		jmp    jump_46e95
	jump_46e4b:
		jge    jump_46e69
		mov    %edx,%ebx
		shl    $0x4,%edx
		sub    %ebx,%edx
		mov    EXPORT_SYMBOL(sthings),%ecx
		shl    $0x2,%edx
		add    %edx,%ecx
		mov    0x2(%eax),%dx
		mov    %dx,0x2(%ecx)
		jmp    jump_46e95
	jump_46e69:
		mov    0x20(%eax),%ebx
		mov    0x18(%eax),%edx
		sar    $0x10,%ebx
		sar    $0x10,%edx
		shl    $0x7,%ebx
		add    %edx,%ebx
		lea    0x0(,%ebx,8),%edx
		add    %ebx,%edx
		mov    EXPORT_SYMBOL(game_my_big_map),%ecx
		add    %edx,%edx
		add    %edx,%ecx
		mov    0x2(%eax),%dx
		mov    %dx,0x8(%ecx)
	jump_46e95:
		mov    (%eax),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		jle    jump_46ebd
		mov    %edx,%ebx
		shl    $0x2,%edx
		add    %ebx,%edx
		shl    $0x2,%edx
		add    %ebx,%edx
		mov    things,%ebx
		shl    $0x3,%edx
		add    %ebx,%edx
		mov    (%eax),%bx
		mov    %bx,(%edx)
		jmp    jump_46edb
	jump_46ebd:
		jge    jump_46edb
		mov    %edx,%ebx
		shl    $0x4,%edx
		sub    %ebx,%edx
		lea    0x0(,%edx,4),%ebx
		mov    EXPORT_SYMBOL(sthings),%edx
		add    %edx,%ebx
		mov    (%eax),%dx
		mov    %dx,(%ebx)
	jump_46edb:
		movw   $0x0,(%eax)
		movw   $0x0,0x2(%eax)
	jump_46ee6:
		xor    %eax,%eax
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_delete_snode)	/* 0x046EEC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		mov    %eax,%edx
		movswl (%eax),%eax
		test   %eax,%eax
		jle    jump_46f19
		mov    %eax,%ebx
		shl    $0x2,%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    things,%ebx
		shl    $0x3,%eax
		add    %eax,%ebx
		mov    0x2(%edx),%ax
		mov    %ax,0x2(%ebx)
		jmp    jump_46f63
	jump_46f19:
		jge    jump_46f37
		mov    %eax,%ebx
		shl    $0x4,%eax
		sub    %ebx,%eax
		mov    EXPORT_SYMBOL(sthings),%ebx
		shl    $0x2,%eax
		add    %eax,%ebx
		mov    0x2(%edx),%ax
		mov    %ax,0x2(%ebx)
		jmp    jump_46f63
	jump_46f37:
		mov    0x20(%edx),%eax
		mov    0x18(%edx),%ebx
		sar    $0x10,%eax
		sar    $0x10,%ebx
		shl    $0x7,%eax
		add    %eax,%ebx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%ecx
		add    %eax,%eax
		add    %eax,%ecx
		mov    0x2(%edx),%ax
		mov    %ax,0x8(%ecx)
	jump_46f63:
		mov    (%edx),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jle    jump_46f8b
		mov    %eax,%ebx
		shl    $0x2,%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    things,%ebx
		shl    $0x3,%eax
		add    %eax,%ebx
		mov    (%edx),%ax
		mov    %ax,(%ebx)
		jmp    jump_46fa7
	jump_46f8b:
		jge    jump_46fa7
		mov    %eax,%ebx
		shl    $0x4,%eax
		sub    %ebx,%eax
		lea    0x0(,%eax,4),%ebx
		mov    EXPORT_SYMBOL(sthings),%eax
		mov    (%edx),%dx
		mov    %dx,(%ebx,%eax,1)
	jump_46fa7:
		xor    %eax,%eax
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_move_mapwho)	/* 0x046FB0 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		sub    $0x8,%esp
		mov    %eax,%esi
		mov    %edx,0x4(%esp)
		mov    %ebx,%edi
		mov    %ecx,(%esp)
		mov    %edx,%ebx
		sar    $0x8,%ebx
		cmp    $0x8000,%ebx
		jge    jump_470f6
		mov    %ecx,%eax
		sar    $0x8,%eax
		cmp    $0x8000,%eax
		jge    jump_470f6
		test   %ebx,%ebx
		jl     jump_470f6
		test   %eax,%eax
		jl     jump_470f6
		mov    %edx,%eax
		sar    $0x10,%eax
		cmp    $0x80,%eax
		jge    jump_47012
		mov    %ecx,%ebx
		sar    $0x10,%ebx
		cmp    $0x80,%ebx
		jge    jump_47012
		test   %eax,%eax
		jl     jump_47012
		test   %ebx,%ebx
		jge    jump_4702e
	jump_47012:
		mov    0x6(%esp),%edx
		mov    0x2(%esp),%ebx
		xor    %dh,%dh
		xor    %bh,%bh
		and    $0x7f,%dl
		and    $0x7f,%bl
		mov    %dx,0x6(%esp)
		mov    %bx,0x2(%esp)
	jump_4702e:
		testb  $0x1,0x47(%esi)
		jne    jump_470e6
		mov    0x6(%esp),%eax
		cmp    0x1a(%esi),%ax
		jne    jump_47050
		mov    0x2(%esp),%eax
		cmp    0x22(%esi),%ax
		je     jump_470e6
	jump_47050:
		xor    %eax,%eax
		mov    0x9(%esi),%al
		cmp    $0x3,%eax
		jne    jump_47061
		mov    %esi,%eax
		call   nullsub_3
	jump_47061:
		mov    0x2(%esp),%ecx
		mov    0x6(%esp),%ebx
		shl    $0x7,%ecx
		add    %ebx,%ecx
		xor    %ebx,%ebx
		mov    %esi,%eax
		mov    %cx,%bx
		call   ac_delete_node
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%ebx
		mov    0x8(%ebx,%eax,2),%ax
		mov    %ax,0x2(%esi)
		cwtl
		mov    0x16(%esi),%dx
		test   %eax,%eax
		jle    jump_470b5
		mov    %eax,%ebx
		shl    $0x2,%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		add    %eax,%ebx
		mov    things,%eax
		shl    $0x3,%ebx
		mov    %dx,(%ebx,%eax,1)
		jmp    jump_470c8
	jump_470b5:
		jge    jump_470c8
		mov    %eax,%ebx
		shl    $0x4,%eax
		sub    %ebx,%eax
		mov    EXPORT_SYMBOL(sthings),%ebx
		mov    %dx,(%ebx,%eax,4)
	jump_470c8:
		xor    %ebx,%ebx
		mov    %cx,%bx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%ebx
		movw   $0x0,(%esi)
		mov    %dx,0x8(%ebx,%eax,2)
	jump_470e6:
		mov    0x4(%esp),%eax
		mov    %edi,0x1c(%esi)
		mov    %eax,0x18(%esi)
		mov    (%esp),%eax
		mov    %eax,0x20(%esi)
	jump_470f6:
		add    $0x8,%esp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
move_smapwho:	/* 0x0470FC */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    %eax,%esi
		mov    %ebx,%ebp
		mov    (%edx),%eax
		sar    $0x10,%eax
		cmp    $0x80,%eax
		jge    jump_47127
		mov    (%ecx),%edi
		sar    $0x10,%edi
		cmp    $0x80,%edi
		jge    jump_47127
		test   %eax,%eax
		jl     jump_47127
		test   %edi,%edi
		jge    jump_47139
	jump_47127:
		mov    0x2(%edx),%bx
		xor    %bh,%bh
		and    $0x7f,%bl
		mov    %bx,0x2(%edx)
		andw   $0x7f,0x2(%ecx)
	jump_47139:
		mov    0x2(%edx),%ax
		cmp    0x1a(%esi),%ax
		jne    jump_47151
		mov    0x2(%ecx),%ax
		cmp    0x22(%esi),%ax
		je     jump_471ee
	jump_47151:
		mov    %esi,%eax
		call   ac_delete_snode
		mov    0x2(%ecx),%ax
		mov    0x2(%edx),%di
		shl    $0x7,%eax
		add    %eax,%edi
		mov    %edi,0x4(%esp)
		xor    %edi,%edi
		mov    0x4(%esp),%di
		lea    0x0(,%edi,8),%eax
		add    %edi,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edi
		add    %eax,%eax
		add    %edi,%eax
		mov    0x8(%eax),%ax
		mov    0x16(%esi),%bx
		mov    %ax,0x2(%esi)
		cwtl
		test   %eax,%eax
		jle    jump_471ab
		mov    %eax,%edi
		shl    $0x2,%eax
		add    %edi,%eax
		shl    $0x2,%eax
		add    %edi,%eax
		mov    things,%edi
		shl    $0x3,%eax
		jmp    jump_471c6
	jump_471ab:
		jge    jump_471cb
		mov    %eax,(%esp)
		mov    (%esp),%edi
		shl    $0x4,%eax
		sub    %edi,%eax
		shl    $0x2,%eax
		mov    %eax,(%esp)
		mov    (%esp),%edi
		mov    EXPORT_SYMBOL(sthings),%eax
	jump_471c6:
		add    %edi,%eax
		mov    %bx,(%eax)
	jump_471cb:
		xor    %edi,%edi
		mov    0x4(%esp),%di
		lea    0x0(,%edi,8),%eax
		add    %edi,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edi
		add    %eax,%eax
		add    %edi,%eax
		movw   $0x0,(%esi)
		mov    %bx,0x8(%eax)
	jump_471ee:
		mov    (%edx),%eax
		mov    %eax,0x18(%esi)
		mov    (%ecx),%eax
		mov    %eax,0x20(%esi)
		mov    %ebp,0x1c(%esi)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_gun_out_anim)	/* 0x047210 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    %eax,%ebx
		testb  $0x2,0xc(%eax)
		je     jump_4728a
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		pop    %ebx
		ret
	jump_47224:
		xor    %eax,%eax
		mov    0x8(%ebx),%al
		cmp    $0x1,%eax
		jne    jump_47232
		movb   $0x0,0x77(%ebx)
	jump_47232:
		xor    %eax,%eax
		mov    %dl,%al
		cmp    $0x2,%eax
		jne    jump_47242
		mov    $0x6,%eax
		pop    %ebx
		ret
	jump_47242:
		cmp    $0x1,%eax
		jne    jump_4724e
		mov    $0xe,%eax
		pop    %ebx
		ret
	jump_4724e:
		mov    $0x1,%eax
		pop    %ebx
		ret
	jump_47255:
		xor    %eax,%eax
		mov    0x8(%ebx),%al
		cmp    $0x1,%eax
		jne    jump_47263
		movb   $0x1,0x77(%ebx)
	jump_47263:
		xor    %eax,%eax
		mov    %dl,%al
		cmp    $0x2,%eax
		jne    jump_47273
		mov    $0x7,%eax
		pop    %ebx
		ret
	jump_47273:
		cmp    $0x1,%eax
		jne    jump_4727f
		mov    $0xf,%eax
		pop    %ebx
		ret
	jump_4727f:
		mov    $0x2,%eax
		pop    %ebx
		ret
	jump_47286:
		xor    %eax,%eax
		pop    %ebx
		ret
	jump_4728a:
		mov    0x99(%ebx),%al
		cmp    $0x8,%al
		jb     jump_472bc
		jbe    jump_47255
		cmp    $0x14,%al
		jb     jump_472b0
		jbe    jump_47255
		cmp    $0x16,%al
		jb     jump_472de
		jbe    jump_47224
		cmp    $0x18,%al
		jb     jump_472de
		cmp    $0x19,%al
		jbe    jump_47224
		jmp    jump_472de
	jump_472b0:
		cmp    $0xf,%al
		jb     jump_472de
		jbe    jump_47255
		cmp    $0x11,%al
		je     jump_47255
		jmp    jump_472de
	jump_472bc:
		cmp    $0x2,%al
		jb     jump_472d6
		cmp    $0x4,%al
		jbe    jump_47255
		cmp    $0x5,%al
		jbe    jump_47224
		cmp    $0x7,%al
		je     jump_47224
		jmp    jump_472de
	jump_472d6:
		cmp    $0x1,%al
		je     jump_47224
	jump_472de:
		xor    %eax,%eax
		mov    0x8(%ebx),%al
		cmp    $0x1,%eax
		jne    jump_472ec
		movb   $0x0,0x77(%ebx)
	jump_472ec:
		xor    %eax,%eax
		mov    0xa(%ebx),%ax
		cmp    $0x5,%eax
		jne    jump_47286
		mov    $0x15,%eax
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_get_weapon_range)	/* 0x047300 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		mov    %eax,%edx
		testb  $0x10,0xf(%eax)
		je     jump_47355
		mov    0x5c(%edx),%ebx
		sar    $0x10,%ebx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		add    %eax,%ebx
		mov    things,%eax
		shl    $0x3,%ebx
		mov    0x8(%ebx,%eax,1),%al
		and    $0xff,%eax
		cmp    $0x33,%eax
		jne    jump_47342
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(weapon_defs)+125,%ax # sizeof(struct WeaponDef) * 5
		shl    $0x9,%eax
		pop    %edx
		pop    %ebx
		ret
	jump_47342:
		cmp    $0x3b,%eax
		jne    jump_47355
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(weapon_defs)+125,%ax # sizeof(struct WeaponDef) * 5
		shl    $0x9,%eax
		pop    %edx
		pop    %ebx
		ret
	jump_47355:
		xor    %eax,%eax
		mov    0x99(%edx),%al
		cmp    $0x6,%eax
		je     jump_4736c
		cmp    $0xa,%eax
		je     jump_4736c
		cmp    $0xb,%eax
		jne    jump_473ba
	jump_4736c:
		xor    %ebx,%ebx
		mov    0x99(%edx),%bl
		imul   $0x19,%ebx,%eax # sizeof(struct WeaponDef)
		mov    EXPORT_SYMBOL(weapon_defs)(%eax),%ax
		mov    0x70(%edx),%dx
		and    $0xffff,%eax
		shl    $0xa,%edx
		shl    $0x8,%eax
		shr    $0xd,%dx
		and    $0xffff,%edx
		add    $0x3,%edx
		imul   %eax,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    %eax,%edx
		shl    $0x4,%eax
		add    %edx,%eax
		sar    $0x8,%eax
		pop    %edx
		pop    %ebx
		ret
	jump_473ba:
		imul   $0x19,%eax,%eax # sizeof(struct WeaponDef)
		mov    EXPORT_SYMBOL(weapon_defs)(%eax),%ax
		and    $0xffff,%eax
		shl    $0x8,%eax
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_choose_best_weapon_for_range)	/* 0x0473D4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		mov    %eax,(%esp)
		mov    %edx,%ebp
		xor    %edx,%edx
		mov    $0xffffd8f0,%esi
		mov    %dx,0x4(%esp)
		mov    %dx,0x8(%esp)
		mov    %esi,%ecx
		mov    0xa4(%eax),%edx
		mov    0xe(%eax),%ah
		and    $0xf29d799f,%edx
		test   $0x8,%ah
		je     jump_4740b
		and    $0xfe,%dh
	jump_4740b:
		xor    %eax,%eax
		jmp    jump_47412
	jump_4740f:
		shr    %edx
		inc    %eax
	jump_47412:
		xor    %ebx,%ebx
		mov    %ax,%bx
		cmp    $0x20,%ebx
		jge    jump_47471
		test   %edx,%edx
		je     jump_47471
		test   $0x1,%dl
		je     jump_4740f
		inc    %ebx
		imul   $0x19,%ebx,%ebx # sizeof(struct WeaponDef)
		mov    EXPORT_SYMBOL(weapon_defs)(%ebx),%bx
		and    $0xffff,%ebx
		cmp    %esi,%ebx
		jle    jump_47444
		mov    %eax,%edi
		inc    %edi
		mov    %ebx,%esi
		mov    %di,0x4(%esp)
	jump_47444:
		shl    $0x8,%ebx
		cmp    %ebp,%ebx
		jle    jump_4740f
		xor    %ebx,%ebx
		mov    %ax,%bx
		inc    %ebx
		imul   $0x19,%ebx,%ebx # sizeof(struct WeaponDef)
		mov    EXPORT_SYMBOL(weapon_defs)+2(%ebx),%bx
		and    $0xffff,%ebx
		cmp    %ecx,%ebx
		jle    jump_4740f
		mov    %ebx,%ecx
		mov    %eax,%ebx
		inc    %ebx
		mov    %bx,0x8(%esp)
		jmp    jump_4740f
	jump_47471:
		cmpw   $0x0,0x8(%esp)
		je     jump_47482
		mov    (%esp),%edx
		mov    0x8(%esp),%al
		jmp    jump_47491
	jump_47482:
		cmpw   $0x0,0x4(%esp)
		je     jump_47497
		mov    (%esp),%edx
		mov    0x4(%esp),%al
	jump_47491:
		mov    %al,0x99(%edx)
	jump_47497:
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
calc_person_speed:	/* 0x0474A0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		mov    %eax,%ebx
		xor    %edx,%edx
		mov    0x8(%eax),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(peep_type_stats)+12(,%eax,4),%ax
		mov    0x70(%ebx),%edx
		sar    $0x10,%edx
		and    $0xffff,%eax
		test   %edx,%edx
		jge    jump_474cd
		neg    %edx
	jump_474cd:
		lea    0x0(,%edx,2),%esi
		mov    0x70(%ebx),%dx
		xor    %dh,%dh
		xor    %ecx,%ecx
		and    $0x7,%dl
		mov    %dx,%cx
		lea    0x0(,%ecx,4),%edx
		sub    %ecx,%edx
		shl    $0x3,%edx
		add    %ecx,%edx
		shl    $0x2,%edx
		add    %esi,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x99(%ebx),%dl
		cmp    $0x8,%edx
		jne    jump_47506
		sar    %eax
	jump_47506:
		testb  $0x8,0xe(%ebx)
		je     jump_47511
		add    $0xfa,%eax
	jump_47511:
		testb  $0x8,0x46(%ebx)
		je     jump_4751c
		add    $0x200,%eax
	jump_4751c:
		cmp    $0x800,%eax
		jle    jump_47528
		mov    $0x800,%eax
	jump_47528:
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_check_weapon)	/* 0x047530 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    %eax,%ebx
		xor    %eax,%eax
		mov    0xa(%ebx),%ax
		cmp    $0x24,%eax
		je     jump_475dd
		cmpb   $0x0,0x99(%ebx)
		jne    jump_475dd
		mov    $0x500,%edx
		mov    %ebx,%eax
		call   ac_choose_best_weapon_for_range
		cmpb   $0x0,0x99(%ebx)
		je     jump_475dd
		mov    %ebx,%eax
		xor    %edx,%edx
		call   ac_gun_out_anim
		xor    %edx,%edx
		mov    0x8(%ebx),%dl
		mov    %al,0x6c(%ebx)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		add    %eax,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    0x57(%ebx),%al
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		xor    %edx,%edx
		mov    0x8(%ebx),%dl
		mov    %ax,0x24(%ebx)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		dec    %eax
		mov    %ax,0x26(%ebx)
	jump_475dd:
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_set_person_animmode_walk)	/* 0x0475E0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		mov    %eax,%ebx
		xor    %eax,%eax
		mov    0xa(%ebx),%ax
		cmp    $0x24,%eax
		je     jump_4769b
		testb  $0x2,0xc(%ebx)
		jne    jump_4769b
		mov    %ebx,%eax
		xor    %edx,%edx
		call   ac_gun_out_anim
		xor    %edx,%edx
		mov    0x8(%ebx),%dl
		mov    %al,0x6c(%ebx)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		xor    %edx,%edx
		dec    %eax
		mov    0x8(%ebx),%dl
		mov    %ax,0x26(%ebx)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		add    %eax,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    0x57(%ebx),%al
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		movw   $0x30,0x28(%ebx)
		movw   $0x30,0x2a(%ebx)
		mov    0x46(%ebx),%dx
		mov    %ax,0x24(%ebx)
		and    $0x7ff7,%edx
		mov    %ebx,%eax
		mov    %dx,0x46(%ebx)
		call   calc_person_speed
		mov    %ax,0x38(%ebx)
	jump_4769b:
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_set_person_animmode_run)	/* 0x0476A0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		mov    %eax,%edx
		xor    %eax,%eax
		mov    0xa(%edx),%ax
		cmp    $0x24,%eax
		je     jump_47762
		testb  $0x2,0xc(%edx)
		jne    jump_47762
		testb  $0x10,0x44(%edx)
		jne    jump_47762
		xor    %eax,%eax
		mov    0x6c(%edx),%al
		cmp    $0x13,%eax
		je     jump_47742
		xor    %ebx,%ebx
		mov    0x8(%edx),%bl
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		sub    %ebx,%eax
		lea    0x0(,%eax,4),%ebx
		movb   $0x13,0x6c(%edx)
		xor    %eax,%eax
		mov    0x6c(%edx),%al
		mov    EXPORT_SYMBOL(people_frames)(%ebx,%eax,2),%ax
		xor    %ebx,%ebx
		dec    %eax
		mov    0x8(%edx),%bl
		mov    %ax,0x26(%edx)
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		sub    %ebx,%eax
		lea    0x0(,%eax,4),%ebx
		xor    %eax,%eax
		mov    0x6c(%edx),%al
		add    %eax,%eax
		add    %ebx,%eax
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%bx
		xor    %eax,%eax
		mov    0x57(%edx),%al
		add    %ebx,%eax
		mov    nstart_ani,%ebx
		mov    (%ebx,%eax,2),%ax
		mov    %ax,0x24(%edx)
	jump_47742:
		movw   $0x30,0x28(%edx)
		mov    0x46(%edx),%bh
		movw   $0x30,0x2a(%edx)
		or     $0x8,%bh
		mov    %edx,%eax
		mov    %bh,0x46(%edx)
		call   calc_person_speed
		mov    %ax,0x38(%edx)
	jump_47762:
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_check_person_within)	/* 0x047768 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		mov    %edx,%ecx
		xor    %dl,%dl
		testb  $0x8,0x18(%eax)
		je     jump_47776
		mov    $0x1,%dl
	jump_47776:
		testb  $0x10,0x18(%eax)
		je     jump_477a6
		mov    0x2(%eax),%esi
		sar    $0x10,%esi
		cmp    %esi,%ecx
		jle    jump_477ce
		mov    0xc(%eax),%esi
		sar    $0x10,%esi
		cmp    %esi,%ecx
		jge    jump_477ce
		mov    0x6(%eax),%ecx
		sar    $0x10,%ecx
		cmp    %ecx,%ebx
		jle    jump_477ce
		mov    0x10(%eax),%eax
		sar    $0x10,%eax
		cmp    %eax,%ebx
		jge    jump_477ce
		jmp    jump_477d5
	jump_477a6:
		mov    0x2(%eax),%esi
		sar    $0x10,%esi
		sub    %esi,%ecx
		imul   %ecx,%ecx
		mov    0x6(%eax),%esi
		mov    0xc(%eax),%eax
		sar    $0x10,%eax
		imul   %eax,%eax
		sar    $0x10,%esi
		sub    %esi,%ebx
		imul   %ebx,%ebx
		shl    $0xc,%eax
		add    %ecx,%ebx
		cmp    %eax,%ebx
		jle    jump_477d5
	jump_477ce:
		test   %dl,%dl
		setne  %al
		jmp    jump_477da
	jump_477d5:
		test   %dl,%dl
		sete   %al
	jump_477da:
		and    $0xff,%eax
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
change_player_angle:	/* 0x0477E4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		mov    %eax,%ebx
		xor    %ecx,%ecx
		xor    %eax,%eax
		mov    %dx,%cx
		mov    0x57(%ebx),%al
		cmp    %eax,%ecx
		je     jump_47839
		mov    %dl,0x57(%ebx)
		xor    %edx,%edx
		mov    0x8(%ebx),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		xor    %edx,%edx
		and    $0xffff,%eax
		mov    %cl,%dl
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		mov    %ax,0x24(%ebx)
	jump_47839:
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
set_interrupt_target:	/* 0x04783C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		mov    %eax,%ebx
		mov    %edx,%ecx
		mov    things,%edx
		cmp    %edx,%ecx
		jb     jump_479bc
		lea    0x29040(%edx),%eax
		cmp    %eax,%ecx
		ja     jump_479bc
		testb  $0x10,0xd(%ebx)
		je     jump_4786f
		testb  $0x8,0x44(%ebx)
		je     jump_479bc
	jump_4786f:
		testb  $0x20,0xd(%ebx)
		je     jump_478b5
		mov    0x70(%ebx),%eax
		sar    $0x10,%eax
		cmp    $0xfffffff6,%eax
		jl     jump_478b5
		cmp    $0x14,%eax
		jg     jump_478b5
		xor    %eax,%eax
		mov    0xa(%ebx),%ax
		cmp    $0x2b,%eax
		jne    jump_478b5
		xor    %edx,%edx
		mov    0x3c(%ebx),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		testb  $0x10,0xd(%edx,%eax,8)
		jne    jump_479bc
	jump_478b5:
		testb  $0x80,0x47(%ebx)
		jne    jump_479bc
		testl  $0x283ceff,0xa4(%ebx)
		je     jump_479bc
		xor    %eax,%eax
		mov    0xa(%ebx),%ax
		cmp    $0x2b,%eax
		jne    jump_478e5
		cmpw   $0x0,0x58(%ebx)
		jne    jump_479bc
	jump_478e5:
		cmpw   $0x0,0x8e(%ebx)
		je     jump_478f5
		cmpl   $0x0,0x40(%ebx)
		jne    jump_47927
	jump_478f5:
		testl  $0x10002000,0xc(%ebx)
		jne    jump_47927
		testb  $0x8,0x44(%ebx)
		jne    jump_47927
		mov    0x18(%ebx),%eax
		shl    $0x8,%eax
		xor    %ax,%ax
		mov    %eax,0x30(%ebx)
		mov    0x20(%ebx),%eax
		sar    $0x8,%eax
		mov    0x30(%ebx),%edx
		and    $0xffff,%eax
		or     %eax,%edx
		mov    %edx,0x30(%ebx)
		orb    $0x80,0xc(%ebx)
	jump_47927:
		mov    0x8c(%ebx),%eax
		xor    %edx,%edx
		sar    $0x10,%eax
		mov    0x16(%ecx),%dx
		cmp    %edx,%eax
		je     jump_479bc
		mov    $0x500,%edx
		mov    %ebx,%eax
		call   ac_check_weapon
		mov    0x8c(%ebx),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_4796e
		mov    0x40(%ebx),%esi
		test   %esi,%esi
		je     jump_47968
		mov    0x16(%esi),%ax
		mov    %ax,0x4a(%ebx)
		jmp    jump_4796e
	jump_47968:
		movw   $0x0,0x4a(%ebx)
	jump_4796e:
		mov    %ecx,0x40(%ebx)
		mov    0x16(%ecx),%ax
		mov    0xd(%ebx),%dh
		mov    %ax,0x8e(%ebx)
		test   $0x20,%dh
		jne    jump_47992
		cmpw   $0x0,0x4c(%ebx)
		je     jump_47992
		mov    %ebx,%eax
		call   ac_remove_path
	jump_47992:
		mov    0xd(%ebx),%cl
		movw   $0xffff,0x66(%ebx)
		test   $0x20,%cl
		jne    jump_479bc
		mov    %ebx,%eax
		call   ac_get_weapon_range
		sar    $0x6,%eax
		dec    %eax
		mov    %al,0x5b(%ebx)
		xor    %eax,%eax
		mov    0x5b(%ebx),%al
		cmp    $0x64,%eax
		jle    jump_479bc
		movb   $0x2,0x5b(%ebx)
	jump_479bc:
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
person_drops_weapons:	/* 0x0479C0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x10,%esp
		mov    %eax,%esi
		mov    0x1c(%eax),%eax
		sar    $0x8,%eax
		mov    %eax,0x4(%esp)
		mov    0xa4(%esi),%eax
		and    $0xffbfffff,%eax
		mov    %eax,0x8(%esp)
		xor    %eax,%eax
		mov    0x8(%esi),%al
		cmp    $0x2,%eax
		je     jump_479f3
		cmp    $0xc,%eax
		jne    jump_479f8
	jump_479f3:
		andb   $0xfe,0x8(%esp)
	jump_479f8:
		xor    %edx,%edx
		mov    %edx,(%esp)
	jump_479fd:
		mov    (%esp),%cl
		mov    $0x1,%eax
		mov    0x8(%esp),%ebx
		shl    %cl,%eax
		test   %ebx,%eax
		je     jump_47a2f
		mov    (%esp),%eax
		inc    %eax
		cmp    $0xd,%eax
		je     jump_47a1d
		cmp    $0xc,%eax
		jne    jump_47a40
	jump_47a1d:
		mov    (%esp),%eax
		inc    %eax
		mov    %ax,0x9e(%esi)
		mov    %esi,%eax
		call   plant_mine
	jump_47a2f:
		mov    (%esp),%edi
		inc    %edi
		mov    %edi,(%esp)
		cmp    $0x20,%edi
		jl     jump_479fd
		jmp    jump_47b71
	jump_47a40:
		cmp    $0x1,%eax
		jne    jump_47a54
		testb  $0x20,0xd(%esi)
		jne    jump_47a54
		cmpb   $0x0,in_network_game
		jne    jump_47a2f
	jump_47a54:
		cmpb   $0x0,in_network_game
		je     jump_47aa9
		testb  $0x8,unkn_flags_08
		je     jump_47aa9
		testb  $0x20,0xd(%esi)
		je     jump_47aa9
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		sar    $0x2,%eax
		imul   $0x1aa,%eax,%eax
		mov    0x54(%esi),%dx
		xor    %dh,%dh
		and    $0x3,%dl
		and    $0xffff,%edx
		shl    $0x2,%edx
		mov    (%esp),%cl
		add    %eax,%edx
		mov    $0x1,%eax
		shl    %cl,%eax
		mov    0x8(%esp),%ecx
		mov    data_1a63b0(%edx),%edi
		and    %ecx,%eax
		test   %edi,%eax
		jne    jump_47a2f
	jump_47aa9:
		xor    %edx,%edx
		mov    %dx,0xc(%esp)
	jump_47ab0:
		mov    0xc(%esp),%ebx
		mov    0xa(%esp),%eax
		inc    %ebx
		sar    $0x10,%eax
		mov    %bx,0xc(%esp)
		cmp    $0x1e,%eax
		jg     jump_47b71
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    %ax,%dx
		call   ac_LbRandomAnyShort
		sub    $0x7f,%edx
		mov    0x18(%esi),%ebp
		xor    %ah,%ah
		mov    0x20(%esi),%edi
		mov    %ax,%bx
		sar    $0x8,%ebp
		sar    $0x8,%edi
		sub    $0x7f,%ebx
		add    %edx,%ebp
		add    %ebx,%edi
		test   %ebp,%ebp
		jl     jump_47ab0
		cmp    $0x8000,%ebp
		jge    jump_47ab0
		test   %edi,%edi
		jl     jump_47ab0
		cmp    $0x8000,%edi
		jge    jump_47ab0
		mov    %edi,%eax
		mov    %ebp,%ecx
		sar    $0x8,%eax
		sar    $0x8,%ecx
		shl    $0x7,%eax
		add    %ecx,%eax
		imul   $0x12,%eax,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%ecx
		add    %ecx,%eax
		testb  $0x1,0xf(%eax)
		jne    jump_47ab0
		mov    %esi,%eax
		call   ac_vector_in_way
		test   %al,%al
		je     jump_47ab0
		mov    (%esp),%al
		inc    %al
		mov    $0x3ec,%ecx
		and    $0xff,%eax
		mov    0x4(%esp),%edx
		push   %eax
		mov    %edi,%ebx
		mov    %ebp,%eax
		call   create_item
		test   %eax,%eax
		je     jump_47a2f
		mov    0x6e(%esi),%dx
		mov    %dx,0x34(%eax)
		jmp    jump_47a2f
	jump_47b71:
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
scare_civs:	/* 0x047BD4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x10,%esp
		mov    %eax,%edi
		mov    0x18(%eax),%edx
		sar    $0x10,%edx
		mov    0x20(%eax),%eax
		mov    %edx,%esi
		sar    $0x10,%eax
		sub    $0x5,%esi
		lea    0x5(%eax),%ebp
		add    $0x5,%edx
		mov    %si,0x8(%esp)
		sub    $0x5,%eax
		mov    %edx,(%esp)
		mov    %eax,0xc(%esp)
		jmp    jump_47c0c
	jump_47c07:
		incw   0x8(%esp)
	jump_47c0c:
		mov    0x6(%esp),%eax
		mov    (%esp),%edx
		sar    $0x10,%eax
		cmp    %edx,%eax
		jge    jump_47b71
		mov    0xc(%esp),%eax
		mov    %ax,0x4(%esp)
		jmp    jump_47cd2
	jump_47c2c:
		xor    %ah,%ah
		mov    0x8(%esi),%al
	jump_47c31:
		xor    %edx,%edx
		mov    0x9(%esi),%dl
		cmp    $0x3,%edx
		jne    jump_47cb4
		testl  $0x90002,0xc(%esi)
		jne    jump_47cb4
		and    $0xffff,%eax
		cmp    $0x4,%eax
		je     jump_47c65
		cmp    $0x5,%eax
		je     jump_47c65
		cmp    $0xd,%eax
		je     jump_47c65
		cmp    $0xe,%eax
		jne    jump_47cb4
	jump_47c65:
		testb  $0x80,0x47(%esi)
		jne    jump_47cb4
		mov    0x70(%esi),%ax
		shl    $0x4,%eax
		shr    $0xd,%ax
		and    $0xffff,%eax
		cmp    $0x3,%eax
		jge    jump_47cb4
		mov    $0x1,%ecx
		mov    $0x400000,%ebx
		mov    %edi,%edx
		mov    %esi,%eax
		call   ac_can_i_see_thing
		test   %eax,%eax
		je     jump_47cb4
		mov    0x20(%esi),%edx
		mov    0x20(%edi),%ecx
		mov    0x18(%esi),%eax
		mov    0x18(%edi),%ebx
		sub    %ecx,%edx
		sub    %ebx,%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		mov    %esi,%ebx
		call   make_peep_flee
	jump_47cb4:
		mov    0x2(%esi),%ax
		jmp    jump_47cc8
	jump_47cba:
		imul   $0x3c,%eax,%eax
		mov    EXPORT_SYMBOL(sthings),%edx
		mov    0x2(%edx,%eax,1),%ax
	jump_47cc8:
		test   %ax,%ax
		jne    jump_47d16
	jump_47ccd:
		incw   0x4(%esp)
	jump_47cd2:
		mov    0x2(%esp),%eax
		sar    $0x10,%eax
		cmp    %ebp,%eax
		jge    jump_47c07
		mov    0x6(%esp),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		jl     jump_47ccd
		cmp    $0x80,%edx
		jge    jump_47ccd
		test   %eax,%eax
		jl     jump_47ccd
		cmp    $0x80,%eax
		jge    jump_47ccd
		shl    $0x7,%eax
		add    %eax,%edx
		imul   $0x12,%edx,%edx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		mov    0x8(%edx,%eax,1),%ax
		test   %ax,%ax
		je     jump_47ccd
	jump_47d16:
		cwtl
		test   %eax,%eax
		jle    jump_47cba
		imul   $0xa8,%eax,%eax
		mov    things,%esi
		add    %eax,%esi
		testb  $0x40,0x46(%esi)
		je     jump_47c2c
		xor    %ah,%ah
		mov    0x81(%esi),%al
		jmp    jump_47c31


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_alert_peeps)	/* 0x047D40 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x18,%esp
		mov    %eax,(%esp)
		mov    %ebx,0x8(%esp)
		mov    %ecx,%edi
		mov    %eax,%edx
		sar    $0x8,%edx
		mov    %edx,(%esp)
		mov    (%esp),%eax
		sar    $0x8,%ebx
		sub    $0x4,%eax
		mov    %ebx,0x8(%esp)
		mov    %ax,0x14(%esp)
		mov    0x8(%esp),%eax
		sub    $0x4,%eax
		mov    %eax,0xc(%esp)
		lea    0x4(%edx),%eax
		lea    0x4(%ebx),%ebp
		mov    %eax,0x4(%esp)
		jmp    jump_47d85
	jump_47d80:
		incw   0x14(%esp)
	jump_47d85:
		mov    0x12(%esp),%eax
		mov    0x4(%esp),%ecx
		sar    $0x10,%eax
		cmp    %ecx,%eax
		jge    jump_47f1b
		mov    0xc(%esp),%eax
		mov    %ax,0x10(%esp)
		jmp    jump_47eac
	jump_47da6:
		xor    %eax,%eax
		mov    0x8(%esi),%al
	jump_47dab:
		xor    %edx,%edx
		mov    0x9(%esi),%dl
		cmp    $0x3,%edx
		jne    jump_47e8e
		testw  $0x2002,0xc(%esi)
		jne    jump_47e8e
		cwtl
		cmp    $0x4,%eax
		je     jump_47dda
		cmp    $0x5,%eax
		je     jump_47dda
		cmp    $0xd,%eax
		je     jump_47dda
		cmp    $0xe,%eax
		jne    jump_47e45
	jump_47dda:
		testb  $0x80,0x47(%esi)
		jne    jump_47e8e
		mov    0x70(%esi),%ax
		shl    $0x4,%eax
		shr    $0xd,%ax
		and    $0xffff,%eax
		cmp    $0x3,%eax
		jge    jump_47e8e
		mov    0x51(%esi),%al
		and    $0x1f,%al
		and    $0xff,%eax
		imul   $0x28,%eax,%edx
		mov    0x51(%edi),%cl
		and    $0x1f,%cl
		mov    $0x1,%eax
		mov    war_flags__Truce(%edx),%ebx
		shl    %cl,%eax
		test   %ebx,%eax
		jne    jump_47e8e
		mov    0x8(%esp),%ecx
		mov    (%esp),%ebx
		mov    0x20(%esi),%edx
		mov    0x18(%esi),%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		sub    %ecx,%edx
		sub    %ebx,%eax
		mov    %esi,%ebx
		call   make_peep_flee
		jmp    jump_47e8e
	jump_47e45:
		mov    0x51(%esi),%al
		xor    %edx,%edx
		and    $0x1f,%al
		mov    %al,%dl
		mov    0x51(%edi),%al
		xor    %ecx,%ecx
		and    $0x1f,%al
		mov    %al,%cl
		cmp    %ecx,%edx
		je     jump_47e8e
		imul   $0x28,%edx,%edx
		mov    $0x1,%eax
		shl    %cl,%eax
		test   %eax,war_flags__Truce(%edx)
		jne    jump_47e8e
		test   %eax,EXPORT_SYMBOL(war_flags)(%edx)
		jne    jump_47e85
		test   %eax,data_19eca0(%edx)
		jne    jump_47e85
		test   %eax,data_19ec9c(%edx)
		je     jump_47e8e
	jump_47e85:
		mov    %edi,%edx
		mov    %esi,%eax
		call   set_interrupt_target
	jump_47e8e:
		mov    0x2(%esi),%ax
		jmp    jump_47ea2
	jump_47e94:
		imul   $0x3c,%eax,%eax
		mov    EXPORT_SYMBOL(sthings),%edx
		mov    0x2(%edx,%eax,1),%ax
	jump_47ea2:
		test   %ax,%ax
		jne    jump_47ef1
	jump_47ea7:
		incw   0x10(%esp)
	jump_47eac:
		mov    0xe(%esp),%eax
		sar    $0x10,%eax
		cmp    %ebp,%eax
		jge    jump_47d80
		mov    0x12(%esp),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		jl     jump_47ea7
		cmp    $0x80,%edx
		jge    jump_47ea7
		test   %eax,%eax
		jl     jump_47ea7
		cmp    $0x80,%eax
		jge    jump_47ea7
		shl    $0x7,%eax
		add    %edx,%eax
		imul   $0x12,%eax,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0x8(%edx,%eax,1),%ax
		test   %ax,%ax
		je     jump_47ea7
	jump_47ef1:
		cwtl
		test   %eax,%eax
		jle    jump_47e94
		imul   $0xa8,%eax,%eax
		mov    things,%esi
		add    %eax,%esi
		testb  $0x40,0x46(%esi)
		je     jump_47da6
		xor    %eax,%eax
		mov    0x81(%esi),%al
		jmp    jump_47dab
	jump_47f1b:
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_peep_change_weapon)	/* 0x047F24 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		mov    %eax,%ebx
		testb  $0x4,0xd(%eax)
		je     jump_47f4e
		xor    %eax,%eax
		mov    $0x7,%edx
		mov    0x16(%ebx),%ax
		call   ac_stop_sample_using_heap
		xor    %eax,%eax
		mov    $0x34,%edx
		mov    0x16(%ebx),%ax
		call   ac_stop_sample_using_heap
	jump_47f4e:
		testb  $0x2,0x45(%ebx)
		je     jump_47fb8
		testb  $0x20,0xd(%ebx)
		jne    jump_47f5e
		xor    %eax,%eax
		jmp    jump_47f6b
	jump_47f5e:
		mov    0x54(%ebx),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
	jump_47f6b:
		add    $0x50,%eax
		movswl %ax,%edx
		xor    %eax,%eax
		mov    0x16(%ebx),%ax
		call   ac_ReleaseLoopedSample
		testb  $0x20,0xd(%ebx)
		jne    jump_47f86
		xor    %eax,%eax
		jmp    jump_47f93
	jump_47f86:
		mov    0x54(%ebx),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
	jump_47f93:
		add    $0x54,%eax
		movswl %ax,%edx
		xor    %eax,%eax
		mov    0x16(%ebx),%ax
		call   ac_ReleaseLoopedSample
		xor    %eax,%eax
		mov    $0xe,%edx
		mov    0x16(%ebx),%ax
		call   ac_ReleaseLoopedSample
		andb   $0xfd,0x45(%ebx)
	jump_47fb8:
		testb  $0x20,0xd(%ebx)
		je     jump_48002
		cmpb   $0x0,0x99(%ebx)
		je     jump_48002
		xor    %eax,%eax
		mov    0x54(%ebx),%ax
		sar    $0x2,%eax
		mov    %eax,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    0x54(%ebx),%dx
		xor    %dh,%dh
		and    $0x3,%dl
		and    $0xffff,%edx
		add    %edx,%eax
		mov    0x99(%ebx),%dl
		mov    %dl,data_1a638c(%eax)
	jump_48002:
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_stop_looped_weapon_sample)	/* 0x048008 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		mov    %eax,%esi
		testb  $0x2,0x45(%eax)
		jne    jump_480bc
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_4801b:
		testb  $0x20,0xd(%esi)
		jne    jump_48025
		xor    %eax,%eax
		jmp    jump_48032
	jump_48025:
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
	jump_48032:
		add    $0x50,%eax
		movswl %ax,%edx
		xor    %eax,%eax
		mov    0x16(%esi),%ax
		call   ac_ReleaseLoopedSample
		andb   $0xfd,0x45(%esi)
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_4804b:
		testb  $0x20,0xd(%esi)
		jne    jump_48055
		xor    %eax,%eax
		jmp    jump_48062
	jump_48055:
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
	jump_48062:
		add    $0x54,%eax
		movswl %ax,%edx
		xor    %eax,%eax
		mov    0x16(%esi),%ax
		mov    $0x40,%ecx
		call   ac_ReleaseLoopedSample
		push   $0x1
		mov    0x54(%esi),%ax
		mov    $0x7f,%ebx
		xor    %ah,%ah
		push   $0x0
		and    $0x3,%al
		xor    %edx,%edx
		add    $0x58,%eax
		push   $0x64
		mov    %ax,%dx
		mov    %esi,%eax
		call   ac_play_dist_sample
		andb   $0xfd,0x45(%esi)
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_480a4:
		xor    %eax,%eax
		mov    $0xe,%edx
		mov    0x16(%esi),%ax
		call   ac_ReleaseLoopedSample
		andb   $0xfd,0x45(%esi)
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_480bc:
		cmp    $0x2,%dx
		jb     jump_480ce
		jbe    jump_4804b
		cmp    $0x8,%dx
		je     jump_480a4
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_480ce:
		cmp    $0x1,%dx
		je     jump_4801b
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_set_person_dead)	/* 0x0480DC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    %eax,%esi
		mov    %dx,(%esp)
		xor    %eax,%eax
		mov    %dx,%ax
		cmp    $0x12,%eax
		jne    jump_48100
		movb   $0x0,0x74(%esi)
		movb   $0x0,0x78(%esi)
		movb   $0x0,0x77(%esi)
	jump_48100:
		xor    %eax,%eax
		mov    0x9(%esi),%al
		cmp    $0x3,%eax
		jne    jump_4855e
		testb  $0x2,0xc(%esi)
		jne    jump_4855e
		testb  $0x1,0x44(%esi)
		je     jump_48125
		mov    %esi,%eax
		call   ac_finalise_razor_wire
	jump_48125:
		testb  $0x3,0x80(%esi)
		je     jump_48197
		mov    0x8e(%esi),%dx
		xor    %eax,%eax
		test   %dx,%dx
		je     jump_48160
		mov    0x8c(%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		jmp    jump_48169
	jump_48160:
		mov    0x40(%esi),%edx
		test   %edx,%edx
		je     jump_48169
		mov    %edx,%eax
	jump_48169:
		test   %eax,%eax
		je     jump_48197
		andb   $0xfc,0x80(%esi)
		mov    0x51(%eax),%al
		and    $0x1f,%al
		and    $0xff,%eax
		shl    $0x4,%eax
		mov    data_19f1a6(%eax),%bx
		test   %bx,%bx
		je     jump_48197
		mov    %ebx,%ecx
		dec    %ecx
		mov    %cx,data_19f1a6(%eax)
	jump_48197:
		mov    0xc(%esi),%bh
		or     $0x2,%bh
		mov    0xd(%esi),%cl
		mov    %bh,0xc(%esi)
		test   $0x4,%cl
		je     jump_481c8
		xor    %eax,%eax
		mov    $0x7,%edx
		mov    0x16(%esi),%ax
		call   ac_stop_sample_using_heap
		xor    %eax,%eax
		mov    $0x34,%edx
		mov    0x16(%esi),%ax
		call   ac_stop_sample_using_heap
	jump_481c8:
		testb  $0x10,0xd(%esi)
		je     jump_48217
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		sar    $0x2,%eax
		and    $0x7,%eax
		mov    %eax,%edi
		xor    %eax,%eax
		jmp    jump_481e1
	jump_481e0:
		inc    %eax
	jump_481e1:
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(playable_agents),%bl
		mov    %ax,%dx
		cmp    %ebx,%edx
		jge    jump_48217
		xor    %ebx,%ebx
		mov    %di,%bx
		imul   $0x1aa,%ebx,%ecx
		mov    EXPORT_SYMBOL(players)+0x09C(%ecx,%edx,4),%edx # players[0].MyAgent[0]
		testb  $0x2,0xc(%edx)
		jne    jump_481e0
		mov    0x14(%edx),%eax
		sar    $0x10,%eax
		mov    %ebx,%edx
		call   ac_player_change_person
	jump_48217:
		mov    %esi,%eax
		call   scare_civs
		testb  $0x2,0x45(%esi)
		jne    jump_482f1
		testb  $0x20,0xd(%esi)
		jne    jump_48328
		jmp    jump_48370
	jump_48237:
		testb  $0x20,0xd(%esi)
		jne    jump_48241
		xor    %eax,%eax
		jmp    jump_4824e
	jump_48241:
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
	jump_4824e:
		add    $0x50,%eax
		movswl %ax,%edx
		xor    %eax,%eax
		mov    0x16(%esi),%ax
		call   ac_ReleaseLoopedSample
		andb   $0xfd,0x45(%esi)
		testb  $0x20,0xd(%esi)
		jne    jump_48328
		jmp    jump_48370
	jump_48272:
		testb  $0x20,0xd(%esi)
		jne    jump_4827c
		xor    %eax,%eax
		jmp    jump_48289
	jump_4827c:
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
	jump_48289:
		add    $0x54,%eax
		movswl %ax,%edx
		xor    %eax,%eax
		mov    0x16(%esi),%ax
		mov    $0x40,%ecx
		call   ac_ReleaseLoopedSample
		push   $0x1
		mov    0x54(%esi),%ax
		mov    $0x7f,%ebx
		xor    %ah,%ah
		push   $0x0
		and    $0x3,%al
		xor    %edx,%edx
		add    $0x58,%eax
		push   $0x64
		mov    %ax,%dx
		mov    %esi,%eax
		call   ac_play_dist_sample
		andb   $0xfd,0x45(%esi)
		testb  $0x20,0xd(%esi)
		jne    jump_48328
		jmp    jump_48370
	jump_482d2:
		xor    %eax,%eax
		mov    $0xe,%edx
		mov    0x16(%esi),%ax
		call   ac_ReleaseLoopedSample
		andb   $0xfd,0x45(%esi)
		testb  $0x20,0xd(%esi)
		jne    jump_48328
		jmp    jump_48370
	jump_482f1:
		mov    0x99(%esi),%al
		cmp    $0x2,%al
		jb     jump_4830d
		jbe    jump_48272
		cmp    $0x8,%al
		je     jump_482d2
		testb  $0x20,0xd(%esi)
		jne    jump_48328
		jmp    jump_48370
	jump_4830d:
		cmp    $0x1,%al
		je     jump_48237
		testb  $0x20,0xd(%esi)
		jne    jump_48328
		jmp    jump_48370
	jump_4831d:
		inc    %eax
		add    $0x4,%edx
		cmp    $0x4,%eax
		jb     jump_4832c
		jmp    jump_48370
	jump_48328:
		xor    %eax,%eax
		xor    %edx,%edx
	jump_4832c:
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(local_player_no),%bl
		imul   $0x1aa,%ebx,%ecx
		cmp    EXPORT_SYMBOL(players)+0x09C(%ecx,%edx,1),%esi # players[0].MyAgent[0]
		jne    jump_4831d
		cmpb   $0x0,in_network_game
		jne    jump_48360
		mov    EXPORT_SYMBOL(open_brief)-2,%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		jmp    jump_48369
	jump_48360:
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
	jump_48369:
		incb   data_19984e(,%eax,8)
	jump_48370:
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0xc,%eax
		je     jump_4855e
		testb  $0x40,0x46(%esi)
		je     jump_4838e
		mov    0x81(%esi),%al
		mov    %al,0x8(%esi)
	jump_4838e:
		cmpw   $0x0,0x4c(%esi)
		je     jump_4839c
		mov    %esi,%eax
		call   ac_remove_path
	jump_4839c:
		mov    (%esp),%al
		mov    %al,0x6d(%esi)
		mov    0xe(%esi),%bl
		mov    %al,0x6c(%esi)
		test   $0x8,%bl
		je     jump_483b4
		mov    %esi,%eax
		call   stop_being_persuaded
	jump_483b4:
		xor    %edx,%edx
		mov    0x8(%esi),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		xor    %edx,%edx
		mov    0x6c(%esi),%dl
		add    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,4),%ax
		xor    %edx,%edx
		and    $0xffff,%eax
		mov    0x57(%esi),%dl
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		xor    %edx,%edx
		mov    0x8(%esi),%dl
		mov    %ax,0x24(%esi)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		movw   $0x10,0x28(%esi)
		movw   $0x10,0x2a(%esi)
		movb   $0x0,0x7d(%esi)
		movw   $0xc,0xa(%esi)
		movw   $0x0,0x48(%esi)
		movb   $0x0,0x79(%esi)
		movb   $0x0,0x7a(%esi)
		movb   $0x0,0x7b(%esi)
		movb   $0x0,0x7c(%esi)
		movb   $0x0,0x5c(%esi)
		movb   $0x0,0x77(%esi)
		movb   $0x0,0x78(%esi)
		dec    %eax
		mov    0xc(%esi),%ebp
		mov    %ax,0x26(%esi)
		and    $0xfff0bdff,%ebp
		mov    0x44(%esi),%eax
		mov    %ebp,0xc(%esi)
		and    $0xeff7fff7,%eax
		mov    0xe(%esi),%bh
		mov    %eax,0x44(%esi)
		test   $0x80,%bh
		je     jump_48494
		xor    %edx,%edx
		mov    0x3c(%esi),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %eax,%edx
		mov    things,%eax
		shl    $0x3,%edx
		andb   $0xbf,0xe(%edx,%eax,1)
	jump_48494:
		testb  $0x4,0xd(%esi)
		je     jump_484ba
		xor    %eax,%eax
		mov    $0x7,%edx
		mov    0x16(%esi),%ax
		call   ac_stop_sample_using_heap
		xor    %eax,%eax
		mov    $0x34,%edx
		mov    0x16(%esi),%ax
		call   ac_stop_sample_using_heap
	jump_484ba:
		movl   $0x0,0x40(%esi)
		mov    %esi,%eax
		movw   $0x0,0x8e(%esi)
		call   ac_remove_path
		xor    %eax,%eax
		mov    0x8(%esi),%al
		cmp    $0x7,%eax
		jne    jump_485d9
		xor    %eax,%eax
		mov    $0x4f,%edx
		mov    0x16(%esi),%ax
		call   ac_stop_sample_using_heap
		push   $0x3
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x25,%edx
		mov    %esi,%eax
		call   ac_play_dist_sample
		mov    $0x14,%ecx
		mov    0x20(%esi),%ebx
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		call   ASM_bang_new4
		mov    0x18(%esi),%eax
		mov    0x20(%esi),%edx
		xor    %ebx,%ebx
		sar    $0x10,%eax
		sar    $0x10,%edx
		call   ac_quick_crater
		xor    %eax,%eax
		mov    0xf(%esi),%dl
		mov    0x50(%esi),%al
		or     $0x2,%dl
		shl    $0x4,%eax
		mov    %dl,0xf(%esi)
		decw   data_19f1a2(%eax)
		xor    %eax,%eax
		mov    0x50(%esi),%al
		shl    $0x4,%eax
		incw   data_19f1a0(%eax)
		movw   $0xd,0xa(%esi)
	jump_4855e:
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_48567:
		push   $0x3
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x39,%edx
		mov    %esi,%eax
		call   ac_play_dist_sample
	jump_48583:
		mov    %esi,%eax
		call   person_drops_weapons
		mov    0x44(%esi),%al
		test   $0x10,%al
		je     jump_4855e
		mov    %al,%ah
		and    $0xef,%ah
		mov    %ah,0x44(%esi)
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		cmp    $0xb,%eax
		je     jump_485a8
		cmp    $0x12,%eax
		jne    jump_4855e
	jump_485a8:
		xor    %eax,%eax
		mov    frame,%edx
		mov    0x24(%esi),%ax
		mov    0x6(%edx,%eax,8),%ax
	jump_485b9:
		xor    %edx,%edx
		mov    %ax,%dx
		mov    frame,%ebx
		shl    $0x3,%edx
		add    %ebx,%edx
		testb  $0x1,0x5(%edx)
		jne    jump_4855e
		mov    %ax,0x24(%esi)
		mov    0x6(%edx),%ax
		jmp    jump_485b9
	jump_485d9:
		mov    0x6c(%esi),%al
		cmp    $0xc,%al
		je     jump_48567
		push   $0x3
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x19,%edx
		mov    %esi,%eax
		call   ac_play_dist_sample
		jmp    jump_48583


/*----------------------------------------------------------------*/
init_recoil:	/* 0x048600 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		mov    0xc(%esp),%ebx
		mov    %eax,%esi
		mov    %edx,%edi
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0x24,%eax
		je     jump_487dd
		xor    %eax,%eax
		mov    0x8(%esi),%al
		cmp    $0x7,%eax
		je     jump_487dd
		cmpb   $0x0,0x7d(%esi)
		jne    jump_487dd
		testb  $0x1,0xc(%esi)
		je     jump_486b4
		andb   $0xfe,0xc(%esi)
		xor    %edx,%edx
		mov    0x6d(%esi),%al
		mov    0x8(%esi),%dl
		mov    %al,0x6c(%esi)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		add    %eax,%eax
		add    %edx,%eax
		movw   $0x0,0xa(%esi)
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    0x57(%esi),%al
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		xor    %edx,%edx
		mov    0x8(%esi),%dl
		mov    %ax,0x24(%esi)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		dec    %eax
		mov    %ax,0x26(%esi)
	jump_486b4:
		movswl %cx,%edx
		movswl %di,%eax
		neg    %edx
		call   ac_arctan
		and    $0xffff,%eax
		mov    %eax,%ecx
		add    $0x400,%eax
		mov    0xa6(%esi),%dl
		and    $0x7ff,%eax
		sar    $0x3,%ecx
		sar    $0x8,%eax
		test   $0x40,%dl
		je     jump_4871a
		mov    0x80(%esi),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		jle    jump_4871a
		push   $0x3
		mov    $0x40,%ecx
		mov    $0x1e,%edx
		mov    0xe(%esi),%bh
		push   $0x0
		mov    %esi,%eax
		or     $0x20,%bh
		push   $0x64
		mov    %bh,0xe(%esi)
		mov    $0x7f,%ebx
		call   ac_play_dist_sample
		pop    %edi
		pop    %esi
		ret    $0x4
	jump_4871a:
		testb  $0x1,0xe(%esi)
		jne    jump_487dd
		mov    %cl,0x98(%esi)
		cmp    $0x7,%bx
		jb     jump_48750
		jbe    jump_4873e
		cmp    $0x8,%bx
		jne    jump_4874a
		movb   $0x7,0x7d(%esi)
		jmp    jump_48758
	jump_4873e:
		movb   $0x4,0x7d(%esi)
		jmp    jump_48758
	jump_48744:
		movb   $0x3,0x7d(%esi)
		jmp    jump_48758
	jump_4874a:
		movb   $0x5,0x7d(%esi)
		jmp    jump_48758
	jump_48750:
		cmp    $0x1,%bx
		je     jump_48744
		jmp    jump_4874a
	jump_48758:
		mov    %al,0x57(%esi)
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		cmp    $0x10,%eax
		je     jump_48768
		mov    %al,0x6d(%esi)
	jump_48768:
		xor    %edx,%edx
		mov    0x8(%esi),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		movb   $0x10,0x6c(%esi)
		sub    %edx,%eax
		xor    %edx,%edx
		mov    0xe(%esi),%bl
		mov    0x6c(%esi),%dl
		or     $0x1,%bl
		add    %edx,%edx
		mov    %bl,0xe(%esi)
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,4),%ax
		xor    %edx,%edx
		and    $0xffff,%eax
		mov    0x57(%esi),%dl
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		xor    %edx,%edx
		mov    0x8(%esi),%dl
		mov    %ax,0x24(%esi)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		dec    %eax
		mov    %ax,0x26(%esi)
	jump_487dd:
		pop    %edi
		pop    %esi
		ret    $0x4

vtable_487e4:
		.long   func_48d72
		.long   func_48d89
		.long   func_48d89
		.long   func_48d89
		.long   func_48db9
		.long   func_48db9
		.long   func_48d72
		.long   func_48d72
		.long   func_48da0
		.long   func_48d89

vtable_4880c:
		.long   func_48fde
		.long   func_48fde
		.long   func_48fde
		.long   func_48fec
		.long   func_48fd0
		.long   func_48fec
		.long   func_48fd0
		.long   func_48fec
		.long   func_48fde

vtable_48830:
		.long   func_4904e
		.long   func_4904e
		.long   func_4904e
		.long   func_4906d
		.long   func_4906d
		.long   func_4908c
		.long   func_4908c
		.long   func_4908c
		.long   func_4904e
		.long   func_4906d
		.long   func_4906d
		.long   func_4904e
		.long   func_4906d
		.long   func_4906d


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_hit_by_bullet)	/* 0x048868 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x10,%esp
		mov    0x24(%esp),%ebp
		mov    %eax,%esi
		mov    %edx,%edi
		mov    %bx,0x8(%esp)
		mov    %cx,0xc(%esp)
		testb  $0x40,0xf(%eax)
		je     jump_48890
		mov    $0x1,%eax
		jmp    jump_491e7
	jump_48890:
		xor    %eax,%eax
		mov    0x9(%esi),%al
		cmp    $0x5,%eax
		jne    jump_488bd
		sub    %dx,0x36(%esi)
		mov    0x34(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jg     jump_488af
		mov    %esi,%eax
		call   ac_set_static_on_fire
	jump_488af:
		mov    $0x64,%eax
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0xc
	jump_488bd:
		cmp    $0x3,%eax
		jne    jump_491b3
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0x24,%eax
		jne    jump_488df
		mov    $0x1,%eax
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0xc
	jump_488df:
		testb  $0x10,0xf(%esi)
		je     jump_48912
		mov    0x5c(%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%esi
		shl    $0x3,%eax
		add    %eax,%esi
		xor    %eax,%eax
		mov    0x9(%esi),%al
		cmp    $0x2,%eax
		jne    jump_491e5
	jump_48912:
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0xd,%eax
		jne    jump_48a6b
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		cmp    $0x14,%eax
		jne    jump_48a5d
		xor    %eax,%eax
		mov    0x28(%esp),%ax
		cmp    $0x6,%eax
		jne    jump_489d8
		xor    %edx,%edx
		mov    0x8(%esi),%dl
		movw   $0x10,0x28(%esi)
		lea    0x0(,%edx,4),%eax
		movw   $0x10,0x2a(%esi)
		sub    %edx,%eax
		movb   $0x1a,0x3f(%esi)
		shl    $0x2,%eax
		movb   $0xa,0x6c(%esi)
		sub    %edx,%eax
		xor    %edx,%edx
		mov    0x6c(%esi),%dl
		shl    $0x2,%eax
		add    %edx,%edx
		movb   $0x0,0x78(%esi)
		add    %edx,%eax
		movb   $0x0,0x77(%esi)
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    0x57(%esi),%al
		add    %edx,%eax
		lea    0x0(,%eax,2),%edx
		mov    nstart_ani,%eax
		mov    (%edx,%eax,1),%ax
		xor    %edx,%edx
		mov    0x8(%esi),%dl
		mov    %ax,0x24(%esi)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		dec    %eax
		mov    %ax,0x26(%esi)
		mov    $0x1,%eax
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0xc
	jump_489d8:
		cmp    $0x1,%eax
		je     jump_489ec
		cmp    $0x7,%eax
		je     jump_489ec
		cmp    $0x8,%eax
		je     jump_489ec
		cmp    $0x9,%eax
		jne    jump_48a0f
	jump_489ec:
		xor    %eax,%eax
		mov    frame,%edx
		mov    0x24(%esi),%ax
		mov    0x6(%edx,%eax,8),%ax
		mov    %ax,0x24(%esi)
		mov    $0x1,%eax
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0xc
	jump_48a0f:
		movw   $0x10,0x28(%esi)
		movw   $0x10,0x2a(%esi)
		push   $0x3
		movb   $0x1a,0x3f(%esi)
		mov    $0x40,%ecx
		movb   $0x0,0x78(%esi)
		mov    $0x7f,%ebx
		movb   $0x0,0x77(%esi)
		mov    nstart_ani,%eax
		movb   $0xc,0x6c(%esi)
		push   $0x0
		mov    $0x39,%edx
		mov    0x856(%eax),%ax
		push   $0x64
		mov    %ax,0x24(%esi)
		mov    %esi,%eax
		movw   $0x42a,0x26(%esi)
		call   ac_play_dist_sample
	jump_48a5d:
		mov    $0x1,%eax
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0xc
	jump_48a6b:
		testb  $0x2,0xc(%esi)
		je     jump_48a7f
		mov    $0x1,%eax
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0xc
	jump_48a7f:
		testb  $0x40,0xf(%esi)
		je     jump_491b3
		mov    $0x1,%eax
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0xc
	jump_48a97:
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0xd,%eax
		je     jump_491e5
		sub    %di,0x3a(%esi)
		mov    0x38(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jg     jump_491e5
		push   $0x3
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x25,%edx
		mov    %esi,%eax
		call   ac_play_dist_sample
		mov    $0x14,%ecx
		mov    0x20(%esi),%ebx
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		call   ASM_bang_new4
		movw   $0xd,0xa(%esi)
		mov    0xc(%esi),%bh
		movw   $0x42d,0x26(%esi)
		or     $0x2,%bh
		mov    %bh,0xc(%esi)
		mov    nstart_ani,%eax
		mov    0x38(%esi),%edx
		mov    0x85a(%eax),%ax
		sar    $0x10,%edx
		mov    %ax,0x24(%esi)
		movswl %di,%eax
		add    %edx,%eax
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0xc
	jump_48b20:
		test   %al,0xc(%esi)
		jne    jump_491e5
		mov    0xf(%esi),%ch
		xor    %eax,%eax
		or     $0x1,%ch
		mov    0x8(%esi),%al
		mov    %ch,0xf(%esi)
		cmp    $0x33,%eax
		jne    jump_48b3f
		sar    %di
	jump_48b3f:
		xor    %eax,%eax
		mov    0x8(%esi),%al
		cmp    $0x3b,%eax
		jne    jump_48b4d
		sar    $0x2,%di
	jump_48b4d:
		push   $0x1
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x41,%edx
		mov    %esi,%eax
		call   ac_play_dist_sample
		xor    %eax,%eax
		mov    0x28(%esp),%ax
		cmp    $0x1,%eax
		je     jump_48b7a
		cmp    $0x7,%eax
		jne    jump_48b7d
	jump_48b7a:
		sar    %di
	jump_48b7d:
		movswl %di,%edi
		mov    0x38(%esi),%eax
		sar    %edi
		sar    $0x10,%eax
		sub    %edi,%eax
		mov    %ax,0x3a(%esi)
		mov    0x38(%esi),%eax
		sar    $0x10,%eax
		movw   $0x5,0x84(%esi)
		test   %eax,%eax
		jg     jump_48c07
		mov    0x16(%ebp),%ax
		mov    %ax,0x4a(%esi)
		xor    %eax,%eax
		mov    0x8(%esi),%al
		cmp    $0x3b,%eax
		jne    jump_48bcf
		orb    $0x2,0xc(%esi)
		mov    %esi,%eax
		call   init_mech_explode
		mov    0x38(%esi),%eax
		sar    $0x10,%eax
		add    %edi,%eax
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0xc
	jump_48bcf:
		orb    $0x2,0xc(%esi)
		mov    %esi,%eax
		call   ac_start_crashing
		push   $0x1
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x5f,%edx
		mov    %esi,%eax
		call   ac_play_dist_sample
		mov    0x38(%esi),%eax
		sar    $0x10,%eax
		add    %edi,%eax
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0xc
	jump_48c07:
		mov    %edi,%eax
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0xc
	jump_48c12:
		test   %ebp,%ebp
		je     jump_48c1d
		orb    $0x40,0x80(%ebp)
	jump_48c1d:
		xor    %eax,%eax
		mov    0x8(%esi),%al
		cmp    $0x20,%eax
		je     jump_48c8d
		mov    0xc(%esi),%ah
		mov    %esi,%ebp
		test   $0x2,%ah
		jne    jump_48c81
		push   $0x1
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x41,%edx
		mov    %esi,%eax
		call   ac_play_dist_sample
		mov    0x38(%esi),%edx
		movswl %di,%eax
		sar    $0x10,%edx
		sar    %eax
		sub    %eax,%edx
		mov    %edx,(%esp)
		test   %edx,%edx
		jge    jump_48c7a
		mov    %esi,%ecx
		mov    0x20(%esi),%ebx
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		sar    $0x8,%ebx
		sar    $0x8,%edx
		sar    $0x8,%eax
		call   ac_collapse_building
	jump_48c7a:
		mov    (%esp),%eax
		mov    %ax,0x3a(%ebp)
	jump_48c81:
		movswl %di,%eax
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0xc
	jump_48c8d:
		mov    0xf(%esi),%ch
		sar    %di
		or     $0x1,%ch
		mov    0xc(%esi),%al
		mov    %ch,0xf(%esi)
		test   $0x2,%al
		jne    jump_491e5
		movswl %di,%edx
		mov    0x38(%esi),%eax
		sar    %edx
		sar    $0x10,%eax
		sub    %edx,%eax
		mov    %ax,0x3a(%esi)
		mov    0x38(%esi),%eax
		sar    $0x10,%eax
		movw   $0x5,0x84(%esi)
		test   %eax,%eax
		jg     jump_491e5
		mov    %esi,%eax
		call   init_mgun_explode
		mov    0x38(%esi),%eax
		sar    $0x10,%eax
		add    %edx,%eax
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0xc
	jump_48ce4:
		test   %ebp,%ebp
		je     jump_48d5a
		mov    0x51(%ebp),%al
		xor    %edx,%edx
		and    $0x1f,%al
		mov    %al,%dl
		mov    $0x1,%ebx
		lea    0x0(,%edx,4),%eax
		mov    0x51(%esi),%cl
		add    %eax,%edx
		and    $0x7f,%cl
		shl    $0x3,%edx
		shl    %cl,%ebx
		test   %ebx,war_flags__Truce(%edx)
		je     jump_48d24
		mov    $0x1,%eax
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0xc
	jump_48d24:
		testb  $0x20,0xd(%ebp)
		je     jump_48d5a
		cmp    0x40(%ebp),%esi
		jne    jump_48d5a
		xor    %eax,%eax
		mov    0x8(%esi),%al
		cmp    $0x4,%eax
		je     jump_48d5a
		cmp    $0x5,%eax
		je     jump_48d5a
		cmp    $0xd,%eax
		je     jump_48d5a
		cmp    $0xe,%eax
		je     jump_48d5a
		or     %ebx,EXPORT_SYMBOL(war_flags)(%edx)
	jump_48d5a:
		mov    0x28(%esp),%eax
		dec    %eax
		cmp    $0x9,%ax
		ja     func_48db9
		and    $0xffff,%eax
		jmp    *%cs:vtable_487e4(,%eax,4)


/*----------------------------------------------------------------*/
func_48d72:
/*----------------------------------------------------------------*/
		mov    0x70(%esi),%ax
		shr    $0xc,%ax
		and    $0xffff,%eax
		cmp    $0x1,%eax
		jne    func_48db9
		sar    %di
		jmp    func_48db9


/*----------------------------------------------------------------*/
func_48d89:
/*----------------------------------------------------------------*/
		mov    0x70(%esi),%ax
		shr    $0xc,%ax
		and    $0xffff,%eax
		cmp    $0x3,%eax
		jne    func_48db9
		sar    %di
		jmp    func_48db9


/*----------------------------------------------------------------*/
func_48da0:
/*----------------------------------------------------------------*/
		mov    0x70(%esi),%ax
		shr    $0xc,%ax
		and    $0xffff,%eax
		cmp    $0x1,%eax
		jne    func_48db9
		sar    $0x2,%di
		imul   $0x3,%edi,%edi


/*----------------------------------------------------------------*/
func_48db9:
/*----------------------------------------------------------------*/
		test   %ebp,%ebp
		je     jump_48dea
		xor    %eax,%eax
		mov    0x28(%esp),%ax
		cmp    $0xa,%eax
		je     jump_48dea
		testb  $0x10,0xd(%esi)
		jne    jump_48dea
		testb  $0x2,0xc(%esi)
		jne    jump_48dea
		testb  $0x1,0x47(%ebp)
		jne    jump_48dea
		testb  $0x10,0x44(%esi)
		jne    jump_48dea
		mov    %ebp,%edx
		mov    %esi,%eax
		call   set_interrupt_target
	jump_48dea:
		testb  $0x2,0xc(%esi)
		je     jump_48dfe
		mov    $0x1,%eax
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0xc
	jump_48dfe:
		test   %ebp,%ebp
		je     jump_48ebe
		xor    %eax,%eax
		mov    0x28(%esp),%ax
		cmp    $0xa,%eax
		je     jump_48ebe
		mov    0x51(%ebp),%al
		xor    %edx,%edx
		and    $0x1f,%al
		mov    %al,%dl
		lea    0x0(,%edx,4),%eax
		mov    0x51(%esi),%cl
		add    %eax,%edx
		and    $0x7f,%cl
		shl    $0x3,%edx
		mov    $0x1,%eax
		mov    war_flags__Truce(%edx),%ebx
		shl    %cl,%eax
		test   %ebx,%eax
		jne    jump_48ebe
		testb  $0x10,0xd(%ebp)
		jne    jump_48e5b
		cmp    0x40(%ebp),%esi
		jne    jump_48ebe
		testb  $0x1,0x47(%ebp)
		jne    jump_48ebe
	jump_48e5b:
		mov    0x51(%esi),%dl
		xor    %eax,%eax
		mov    0x51(%ebp),%dh
		mov    %dl,%al
		cmp    $0x63,%eax
		jg     jump_48ebe
		xor    %ebx,%ebx
		mov    %dh,%bl
		cmp    $0x63,%ebx
		jg     jump_48ebe
		cmp    %dh,%dl
		je     jump_48ebe
		testb  $0x8,0xe(%esi)
		jne    jump_48e96
		mov    %eax,%ebx
		shl    $0x2,%eax
		mov    %dh,%cl
		add    %ebx,%eax
		mov    $0x1,%ebx
		shl    %cl,%ebx
		mov    %ebx,%ecx
		or     %ecx,EXPORT_SYMBOL(war_flags)(,%eax,8)
	jump_48e96:
		testb  $0x8,0xe(%esi)
		jne    jump_48ebe
		and    $0xff,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		cmpb   $0x0,data_19eca8(,%eax,8)
		je     jump_48ebe
		mov    %ebp,%edx
		mov    %esi,%eax
		call   find_and_alert_guardian
	jump_48ebe:
		xor    %ecx,%ecx
		mov    0xe(%esi),%dh
		mov    %ecx,0x4(%esp)
		test   $0x20,%dh
		je     jump_48f2b
		sub    %di,0x82(%esi)
		mov    0x80(%esi),%eax
		sar    $0x10,%eax
		movb   $0x4,0x84(%esi)
		test   %eax,%eax
		jl     jump_48f00
		cmp    $0x400,%eax
		jle    jump_491e5
		movw   $0x400,0x82(%esi)
		jmp    jump_491e5
	jump_48f00:
		mov    0x82(%esi),%ax
		mov    0x3a(%esi),%dx
		add    %eax,%edx
		mov    0x80(%esi),%eax
		sar    $0x10,%eax
		mov    %eax,%ecx
		mov    %eax,0x4(%esp)
		neg    %ecx
		mov    %dx,0x3a(%esi)
		mov    %ecx,0x4(%esp)
		jmp    jump_48fc1
	jump_48f2b:
		xor    %eax,%eax
		mov    0x7d(%esi),%al
		cmp    $0x1,%eax
		jg     jump_48fa7
		mov    $0x1,%eax
		xor    %edx,%edx
		mov    0x8(%esi),%cl
		mov    EXPORT_SYMBOL(female_peep),%dx
		shl    %cl,%eax
		test   %eax,%edx
		je     jump_48f77
		push   $0x2
		mov    $0x40,%ecx
		xor    %eax,%eax
		mov    gameturn,%ebx
		mov    0x16(%esi),%ax
		push   $0x0
		add    %ebx,%eax
		xor    %edx,%edx
		and    $0x1,%eax
		push   $0x64
		mov    $0x7f,%ebx
		mov    sfx_woman_shot(%eax),%dl
		jmp    jump_48fa0
	jump_48f77:
		push   $0x2
		mov    $0x40,%ecx
		xor    %eax,%eax
		mov    gameturn,%edx
		mov    0x16(%esi),%ax
		mov    $0x7f,%ebx
		add    %edx,%eax
		push   $0x0
		and    $0x7,%eax
		xor    %edx,%edx
		push   $0x64
		mov    sfx_man_shot(%eax),%dl
	jump_48fa0:
		mov    %esi,%eax
		call   ac_play_dist_sample
	jump_48fa7:
		mov    0x3a(%esi),%bx
		mov    0x82(%esi),%cx
		sub    %edi,%ebx
		sub    %edi,%ecx
		mov    %bx,0x3a(%esi)
		mov    %cx,0x82(%esi)
	jump_48fc1:
		mov    0x38(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jle    jump_48ffa
		jmp    jump_4917e


/*----------------------------------------------------------------*/
func_48fd0:
/*----------------------------------------------------------------*/
		mov    $0xa,%edx
		mov    %esi,%eax
		call   ac_set_person_dead
		jmp    jump_49023


/*----------------------------------------------------------------*/
func_48fde:
/*----------------------------------------------------------------*/
		mov    $0xc,%edx
		mov    %esi,%eax
		call   ac_set_person_dead
		jmp    jump_49023


/*----------------------------------------------------------------*/
func_48fec:
/*----------------------------------------------------------------*/
		mov    $0xb,%edx
		mov    %esi,%eax
		call   ac_set_person_dead
		jmp    jump_49023
	jump_48ffa:
		movswl %di,%edx
		mov    0x4(%esp),%edi
		add    %edx,%eax
		add    %eax,%edi
		mov    0x28(%esp),%eax
		sub    $0x2,%eax
		mov    %edi,0x4(%esp)
		cmp    $0x8,%ax
		ja     func_48fec
		and    $0xffff,%eax
		jmp    *%cs:vtable_4880c(,%eax,4)
	jump_49023:
		test   %ebp,%ebp
		je     jump_49171
		cmpb   $0x0,in_network_game
		jne    jump_490c5
		mov    ingame__TrainMode,%eax
		xor    %edx,%edx
		sar    $0x10,%eax
		mov    0x51(%ebp),%dl
		cmp    %eax,%edx
		je     jump_490ab
		jmp    jump_49171


/*----------------------------------------------------------------*/
func_4904e:
/*----------------------------------------------------------------*/
		mov    EXPORT_SYMBOL(open_brief)-2,%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		incw   data_199840(,%eax,8)
		jmp    jump_49171


/*----------------------------------------------------------------*/
func_4906d:
/*----------------------------------------------------------------*/
		mov    EXPORT_SYMBOL(open_brief)-2,%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		incw   data_199838(,%eax,8)
		jmp    jump_49171


/*----------------------------------------------------------------*/
func_4908c:
/*----------------------------------------------------------------*/
		mov    EXPORT_SYMBOL(open_brief)-2,%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		incw   data_19983c(,%eax,8)
		jmp    jump_49171
	jump_490ab:
		mov    0x8(%esi),%al
		dec    %al
		cmp    $0xd,%al
		ja     jump_49171
		and    $0xff,%eax
		jmp    *%cs:vtable_48830(,%eax,4)
	jump_490c5:
		testb  $0x20,0xd(%esi)
		je     jump_49171
		mov    0xd(%ebp),%ch
		xor    %edx,%edx
		test   $0x20,%ch
		je     jump_490dd
		mov    %ebp,%edx
		jmp    jump_4913f
	jump_490dd:
		testb  $0x8,0xe(%ebp)
		je     jump_4910c
		xor    %edi,%edi
		mov    0x3c(%ebp),%di
		lea    0x0(,%edi,4),%eax
		add    %edi,%eax
		shl    $0x2,%eax
		add    %edi,%eax
		mov    things,%ebx
		shl    $0x3,%eax
		add    %ebx,%eax
		testb  $0x20,0xd(%eax)
		je     jump_4910c
		mov    %eax,%edx
		jmp    jump_4913f
	jump_4910c:
		xor    %eax,%eax
		mov    0x9(%ebp),%al
		cmp    $0xf,%eax
		jne    jump_4913f
		xor    %eax,%eax
		mov    0x8(%ebp),%al
		cmp    $0x30,%eax
		jne    jump_4913f
		xor    %edx,%edx
		mov    0x3c(%ebp),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		add    %eax,%edx
	jump_4913f:
		test   %edx,%edx
		je     jump_49171
		testb  $0x20,0xd(%edx)
		je     jump_49171
		xor    %eax,%eax
		mov    0x54(%edx),%ax
		sar    $0x2,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		add    %edx,%eax
		shl    $0x3,%eax
		add    $mission_status,%eax
		lea    0x10(%eax),%edx
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		sar    $0x2,%eax
		incw   (%edx,%eax,2)
	jump_49171:
		mov    0x4(%esp),%eax
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0xc
	jump_4917e:
		testb  $0x10,0x44(%esi)
		jne    jump_491e5
		mov    0x1e(%esp),%ecx
		mov    0xa(%esp),%ebx
		xor    %eax,%eax
		mov    0x6(%esp),%edx
		mov    0x28(%esp),%ax
		sar    $0x10,%ecx
		sar    $0x10,%ebx
		push   %eax
		sar    $0x10,%edx
		mov    %esi,%eax
		call   init_recoil
		xor    %eax,%eax
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0xc
	jump_491b3:
		mov    0x9(%esi),%al
		cmp    $0x3,%al
		jb     jump_491dd
		jbe    jump_48ce4
		cmp    $0x9,%al
		jb     jump_491e5
		jbe    jump_48c12
		cmp    $0xf,%al
		je     jump_48a97
		xor    %eax,%eax
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0xc
	jump_491dd:
		cmp    $0x2,%al
		je     jump_48b20
	jump_491e5:
		xor    %eax,%eax
	jump_491e7:
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0xc


/*----------------------------------------------------------------*/
snap_razor_wire:	/* 0x0491F0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		mov    %eax,%esi
		mov    0x22(%eax),%eax
		push   $0x2
		sar    $0x10,%eax
		push   %eax
		mov    0x32(%esi),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0x30(%esi),%ax
		shl    $0x3,%eax
		add    $0x3c,%eax
		cwtl
		push   %eax
		mov    0x2c(%esi),%ax
		add    $0x32,%eax
		movswl %ax,%ecx
		mov    0x20(%esi),%eax
		sar    $0x8,%eax
		movswl %ax,%ebx
		mov    0x1c(%esi),%eax
		sar    $0x5,%eax
		add    $0x3c,%eax
		movswl %ax,%edx
		mov    0x18(%esi),%eax
		sar    $0x8,%eax
		cwtl
		call   delete_vect
		xor    %eax,%eax
		mov    0x16(%esi),%ax
		call   ac_remove_thing
		mov    %esi,%eax
		call   ac_delete_node
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		nop
		ret

vtable_4925c:
		.long   func_4974d
		.long   func_4974d
		.long   func_4974d
		.long   func_49775
		.long   func_49775
		.long   func_4979d
		.long   func_4979d
		.long   func_4979d
		.long   func_4974d
		.long   func_49775
		.long   func_49775
		.long   func_4974d
		.long   func_49775
		.long   func_49775


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_hit_razor_wire)	/* 0x049294 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    %eax,%edi
		xor    %ah,%ah
		movswl %dx,%edx
		mov    %ah,0x4(%esp)
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%esi
		shl    $0x3,%eax
		add    %eax,%esi
		mov    0x51(%edi),%dl
		mov    0x50(%esi),%al
		cmp    %dl,%al
		je     jump_4984a
		xor    %edx,%edx
		mov    %al,%dl
		lea    0x0(,%edx,4),%eax
		mov    0x51(%edi),%cl
		add    %eax,%edx
		and    $0x1f,%cl
		shl    $0x3,%edx
		mov    $0x1,%eax
		mov    war_flags__Truce(%edx),%ebx
		shl    %cl,%eax
		test   %ebx,%eax
		jne    jump_4984a
		mov    0x3a(%esi),%ax
		movswl %ax,%edx
		dec    %eax
		mov    %ax,0x3a(%esi)
		test   %edx,%edx
		jge    jump_49374
		mov    0x22(%esi),%eax
		push   $0x2
		sar    $0x10,%eax
		push   %eax
		mov    0x32(%esi),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0x30(%esi),%ax
		shl    $0x3,%eax
		add    $0x3c,%eax
		cwtl
		push   %eax
		mov    0x2c(%esi),%ax
		add    $0x32,%eax
		movswl %ax,%ecx
		mov    0x20(%esi),%eax
		sar    $0x8,%eax
		movswl %ax,%ebx
		mov    0x1c(%esi),%eax
		sar    $0x5,%eax
		add    $0x3c,%eax
		movswl %ax,%edx
		mov    0x18(%esi),%eax
		sar    $0x8,%eax
		mov    %eax,0x10(%esp)
		mov    0x10(%esp),%eax
		cwtl
		call   delete_vect
		xor    %eax,%eax
		mov    0x16(%esi),%ax
		mov    $0x1,%dh
		call   ac_remove_thing
		mov    %esi,%eax
		mov    %dh,0x4(%esp)
		call   ac_delete_node
	jump_49374:
		mov    0x1c(%esi),%eax
		mov    0x30(%esi),%ebp
		sar    $0x8,%eax
		sub    %eax,%ebp
		mov    0x18(%esi),%eax
		mov    0x2c(%esi),%edx
		sar    $0x8,%eax
		sub    %eax,%edx
		mov    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebx
		mov    0x20(%esi),%eax
		mov    0x34(%esi),%edx
		sar    $0x8,%eax
		sub    %eax,%edx
		mov    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%ebx
		jle    jump_493c5
		mov    0x20(%esi),%eax
		mov    0x34(%esi),%edx
		sar    $0x8,%eax
		sub    %eax,%edx
		mov    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebx
		mov    0x18(%esi),%eax
		mov    0x2c(%esi),%edx
		jmp    jump_493df
	jump_493c5:
		mov    0x18(%esi),%eax
		mov    0x2c(%esi),%edx
		sar    $0x8,%eax
		sub    %eax,%edx
		mov    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebx
		mov    0x20(%esi),%eax
		mov    0x34(%esi),%edx
	jump_493df:
		sar    $0x8,%eax
		sub    %eax,%edx
		mov    %edx,%eax
		sar    %ebx
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		add    %ebx,%eax
		mov    %eax,%ebx
		jne    jump_493f8
		mov    $0x1,%ebx
	jump_493f8:
		mov    0x18(%edi),%eax
		sub    0x18(%esi),%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ecx
		mov    0x20(%esi),%edx
		mov    0x20(%edi),%eax
		sub    %edx,%eax
		sar    $0x8,%ecx
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		sar    $0x8,%eax
		cmp    %eax,%ecx
		jle    jump_49431
		mov    0x20(%edi),%eax
		sub    0x20(%esi),%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ecx
		mov    0x18(%esi),%edx
		mov    0x18(%edi),%eax
		jmp    jump_49444
	jump_49431:
		mov    0x18(%edi),%eax
		sub    0x18(%esi),%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ecx
		mov    0x20(%esi),%edx
		mov    0x20(%edi),%eax
	jump_49444:
		sub    %edx,%eax
		sar    $0x9,%ecx
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		sar    $0x8,%eax
		add    %ecx,%eax
		mov    %ebp,%edx
		imul   %eax,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    0x1c(%esi),%edx
		sar    $0x8,%edx
		add    %eax,%edx
		mov    0x1c(%edi),%eax
		sar    $0x8,%eax
		sub    %eax,%edx
		test   %edx,%edx
		jl     jump_4984a
		cmp    $0x1a00,%edx
		jg     jump_4984a
		cmpb   $0x0,0x8(%esi)
		je     jump_495b0
		mov    $0xf,%ecx
		mov    0x20(%edi),%ebx
		mov    0x1c(%edi),%edx
		mov    0x18(%edi),%eax
		call   ASM_bang_new4
		mov    0x3c(%esi),%ax
		test   %ax,%ax
		je     jump_494e0
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		mov    $0x400,%ecx
		add    %edx,%eax
		mov    0x20(%edi),%ebx
		push   %eax
		sar    $0x8,%ebx
		mov    0x1c(%edi),%edx
		push   $0x3e8
		mov    0x18(%edi),%eax
		jmp    jump_494f8
	jump_494e0:
		push   $0x0
		mov    $0x400,%ecx
		mov    0x20(%edi),%ebx
		mov    0x1c(%edi),%edx
		mov    0x18(%edi),%eax
		push   $0x3e8
		sar    $0x8,%ebx
	jump_494f8:
		sar    $0x8,%edx
		sar    $0x8,%eax
		call   do_shockwave
		testb  $0x7,gameturn
		je     jump_49578
		cmpb   $0x0,0x4(%esp)
		jne    jump_49578
		mov    0x22(%esi),%eax
		push   $0x2
		sar    $0x10,%eax
		push   %eax
		mov    0x32(%esi),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0x30(%esi),%ax
		shl    $0x3,%eax
		add    $0x3c,%eax
		cwtl
		push   %eax
		mov    0x2c(%esi),%ax
		add    $0x32,%eax
		movswl %ax,%ecx
		mov    0x20(%esi),%eax
		sar    $0x8,%eax
		movswl %ax,%ebx
		mov    0x1c(%esi),%eax
		sar    $0x5,%eax
		add    $0x3c,%eax
		movswl %ax,%edx
		mov    0x18(%esi),%eax
		sar    $0x8,%eax
		mov    %eax,0x10(%esp)
		mov    0x10(%esp),%eax
		cwtl
		call   delete_vect
		xor    %eax,%eax
		mov    0x16(%esi),%ax
		call   ac_remove_thing
		mov    %esi,%eax
		call   ac_delete_node
	jump_49578:
		push   $0x0
		mov    $0x25,%ecx
		mov    0x20(%edi),%ebx
		mov    0x1c(%edi),%edx
		mov    0x18(%edi),%eax
		push   $0x7f
		sar    $0x8,%ebx
		sar    $0x8,%edx
		sar    $0x8,%eax
		call   ac_create_sound_effect
		testb  $0x2,0xc(%edi)
		je     jump_4984a
	jump_495a2:
		mov    $0x1,%eax
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_495b0:
		xor    %edx,%edx
		mov    0x8(%edi),%dl
		cmp    $0x7,%edx
		jne    jump_4961c
		mov    0x22(%esi),%eax
		push   $0x2
		sar    $0x10,%eax
		push   %eax
		mov    0x32(%esi),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0x30(%esi),%ax
		shl    $0x3,%eax
		add    $0x3c,%eax
		cwtl
		push   %eax
		mov    0x2c(%esi),%ax
		add    $0x32,%eax
		movswl %ax,%ecx
		mov    0x20(%esi),%eax
		sar    $0x8,%eax
		movswl %ax,%ebx
		mov    0x1c(%esi),%eax
		sar    $0x5,%eax
		add    $0x3c,%eax
		movswl %ax,%edx
		mov    0x18(%esi),%eax
		sar    $0x8,%eax
		cwtl
		call   delete_vect
		xor    %eax,%eax
		mov    0x16(%esi),%ax
		call   ac_remove_thing
		mov    %esi,%eax
		call   ac_delete_node
		jmp    jump_4984a
	jump_4961c:
		lea    0x14(%eax),%edx
		mov    0x20(%edi),%ebx
		mov    0x18(%edi),%eax
		sar    $0x8,%ebx
		sar    $0x8,%eax
		call   init_spark
		test   %eax,%eax
		je     jump_4965b
		mov    0x2c(%eax),%dx
		mov    0x2e(%eax),%bx
		mov    0x30(%eax),%cx
		movw   $0xd,0x28(%eax)
		sar    %dx
		sar    %bx
		mov    %dx,0x2c(%eax)
		sar    %cx
		mov    %bx,0x2e(%eax)
		mov    %cx,0x30(%eax)
	jump_4965b:
		testb  $0x7,gameturn
		jne    jump_496e2
		call   ac_LbRandomAnyShort
		test   $0x1,%al
		jne    jump_496e2
		mov    $0x1,%edx
		xor    %eax,%eax
		mov    0x8(%edi),%cl
		mov    EXPORT_SYMBOL(female_peep),%ax
		shl    %cl,%edx
		test   %edx,%eax
		je     jump_496b2
		push   $0x2
		mov    $0x7f,%ebx
		xor    %eax,%eax
		mov    gameturn,%ecx
		mov    0x16(%edi),%ax
		push   $0x0
		add    %ecx,%eax
		xor    %edx,%edx
		and    $0x1,%eax
		push   $0x64
		mov    $0x40,%ecx
		mov    sfx_woman_shot(%eax),%dl
		jmp    jump_496db
	jump_496b2:
		push   $0x2
		mov    $0x40,%ecx
		xor    %eax,%eax
		mov    gameturn,%ebx
		mov    0x16(%edi),%ax
		push   $0x0
		add    %ebx,%eax
		xor    %edx,%edx
		and    $0x7,%eax
		push   $0x64
		mov    $0x7f,%ebx
		mov    sfx_man_shot(%eax),%dl
	jump_496db:
		mov    %edi,%eax
		call   ac_play_dist_sample
	jump_496e2:
		xor    %eax,%eax
		mov    0x70(%edi),%dx
		mov    EXPORT_SYMBOL(weapon_defs)+452,%ax # sizeof(struct WeaponDef) * 18 + 2
		shr    $0xc,%dx
		and    $0xffff,%edx
		cmp    $0x1,%edx
		jne    jump_496ff
		shr    %eax
	jump_496ff:
		sub    %ax,0x3a(%edi)
		mov    0x38(%edi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jg     jump_4984a
		mov    $0xb,%edx
		mov    %edi,%eax
		call   ac_set_person_dead
		cmpb   $0x0,in_network_game
		jne    jump_497df
		mov    ingame__TrainMode,%eax
		xor    %edx,%edx
		sar    $0x10,%eax
		mov    0x50(%esi),%dl
		cmp    %eax,%edx
		je     jump_497c5
		mov    $0x1,%eax
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4974d:
/*----------------------------------------------------------------*/
		mov    EXPORT_SYMBOL(open_brief)-2,%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		incw   data_199840(,%eax,8)
		mov    $0x1,%eax
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_49775:
/*----------------------------------------------------------------*/
		mov    EXPORT_SYMBOL(open_brief)-2,%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		incw   data_199838(,%eax,8)
		mov    $0x1,%eax
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4979d:
/*----------------------------------------------------------------*/
		mov    EXPORT_SYMBOL(open_brief)-2,%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		incw   data_19983c(,%eax,8)
		mov    $0x1,%eax
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_497c5:
		mov    0x8(%edi),%al
		dec    %al
		cmp    $0xd,%al
		ja     jump_495a2
		and    $0xff,%eax
		jmp    *%cs:vtable_4925c(,%eax,4)
	jump_497df:
		testb  $0x20,0xd(%edi)
		je     jump_495a2
		xor    %eax,%eax
		xor    %edx,%edx
		jmp    jump_497ff
	jump_497ef:
		inc    %eax
		add    $0x1aa,%edx
		cmp    $0x8,%eax
		jae    jump_495a2
	jump_497ff:
		mov    $0x1,%ebp
		xor    %ebx,%ebx
		mov    %al,%cl
		mov    ingame__InNetGame_UNSURE,%bl
		shl    %cl,%ebp
		test   %ebp,%ebx
		je     jump_497ef
		mov    EXPORT_SYMBOL(players)+0x09C(%edx),%ebx # players[0].MyAgent[0]
		mov    0x50(%esi),%cl
		cmp    0x50(%ebx),%cl
		jne    jump_497ef
		mov    0x54(%ebx),%bx
		and    $0xffff,%ebx
		sar    $0x2,%ebx
		imul   $0x28,%ebx,%ebx
		xor    %ecx,%ecx
		mov    0x54(%edi),%cx
		add    $mission_status,%ebx
		sar    $0x2,%ecx
		add    $0x10,%ebx
		incw   (%ebx,%ecx,2)
		jmp    jump_497ef
	jump_4984a:
		xor    %eax,%eax
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_bul_hit_vector)	/* 0x0498DC */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		movswl %cx,%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    game_col_vects_list,%esi
		add    %eax,%eax
		add    %eax,%esi
		xor    %edx,%edx
		mov    (%esi),%ax
		mov    %ax,%dx
		lea    0x0(,%edx,8),%eax
		sub    %edx,%eax
		mov    game_col_vects,%edx
		mov    0xc(%edx,%eax,2),%ax
		cwtl
		test   %eax,%eax
		je     jump_49993
		mov    0x2(%esi),%esi
		sar    $0x10,%esi
		lea    0x0(,%esi,4),%eax
		add    %esi,%eax
		shl    $0x2,%eax
		add    %esi,%eax
		mov    things,%esi
		shl    $0x3,%eax
		add    %eax,%esi
		mov    0xc(%esi),%ah
		mov    %esi,%ebp
		test   $0x2,%ah
		jne    jump_49993
		push   $0x1
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		mov    $0x41,%edx
		push   $0x0
		mov    0x16(%esp),%edi
		mov    %esi,%eax
		push   $0x64
		sar    $0x10,%edi
		call   ac_play_dist_sample
		mov    0x38(%esi),%eax
		sar    %edi
		sar    $0x10,%eax
		sub    %edi,%eax
		mov    %eax,%edi
		test   %eax,%eax
		jge    jump_4998f
		mov    %esi,%ecx
		mov    0x20(%esi),%ebx
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		sar    $0x8,%ebx
		sar    $0x8,%edx
		sar    $0x8,%eax
		call   ac_collapse_building
	jump_4998f:
		mov    %di,0x3a(%ebp)
	jump_49993:
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x8


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_do_move_colide)	/* 0x04999C */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xd0,%esp
		mov    %eax,%edi
		mov    %edx,0xac(%esp)
		mov    %ebx,0xa8(%esp)
		xor    %edx,%edx
		mov    %ecx,%ebx
		mov    %edx,0xc4(%esp)
		sub    EXPORT_SYMBOL(game_my_big_map),%ebx
		mov    $0x900,%esi
		mov    %ebx,%eax
		xor    %edx,%edx
		div    %esi
		movswl %ax,%ebp
		mov    %ebp,%edx
		shl    $0x7,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		add    %eax,%eax
		sub    %eax,%ebx
		xor    %edx,%edx
		mov    %ebx,%eax
		mov    $0x12,%ebx
		div    %ebx
		cmp    $0x80,%ebp
		jge    jump_49a04
		movswl %ax,%esi
		cmp    $0x80,%esi
		jl     jump_49a0e
	jump_49a04:
		mov    $0xffffffff,%edx
		jmp    jump_49e99
	jump_49a0e:
		mov    0xa(%ecx),%ax
		xor    %ebx,%ebx
		mov    %eax,0xc0(%esp)
		mov    %bx,EXPORT_SYMBOL(word_1AA394)
		test   %ax,%ax
		je     jump_49b11
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(debug_hud_collision),%al
		cmp    $0x1,%eax
		jne    jump_49b11
		xor    %eax,%eax
		mov    0xc0(%esp),%ax
		push   %eax
		push   $aD_0
		lea    0x8(%esp),%eax
		shl    $0x8,%ebp
		push   %eax
		shl    $0x8,%esi
		call   ac_sprintf
		add    $0xc,%esp
		lea    0x80(%ebp),%eax
		mov    0x20(%edi),%ecx
		mov    0x18(%edi),%ebx
		push   $0x4f
		sar    $0x8,%ecx
		sar    $0x8,%ebx
		mov    %eax,0xa8(%esp)
		lea    0x80(%esi),%eax
		mov    0xa8(%esp),%edx
		mov    %eax,0xa4(%esp)
		call   ac_draw_line_transformed_at_ground
		push   $0x63
		lea    0x100(%esi),%eax
		mov    %ebp,%ecx
		mov    %ebp,%edx
		mov    %eax,0x9c(%esp)
		mov    %eax,%ebx
		mov    %esi,%eax
		call   ac_draw_line_transformed_at_ground
		push   $0x63
		lea    0x100(%ebp),%eax
		mov    0x9c(%esp),%ebx
		mov    %eax,0xb4(%esp)
		mov    %eax,%ecx
		mov    %ebp,%edx
		mov    %ebx,%eax
		call   ac_draw_line_transformed_at_ground
		push   $0x63
		mov    0xb4(%esp),%ecx
		mov    0x9c(%esp),%ebx
		mov    %esi,%eax
		mov    %ecx,%edx
		call   ac_draw_line_transformed_at_ground
		push   $0x63
		mov    0xb4(%esp),%edx
		mov    %ebp,%ecx
		mov    %esi,%ebx
		mov    %esi,%eax
		call   ac_draw_line_transformed_at_ground
		mov    %esp,%ebx
		mov    0xa4(%esp),%edx
		mov    0xa0(%esp),%eax
		call   ac_draw_text_transformed_at_ground
	jump_49b11:
		xor    %esi,%esi
		mov    0xc0(%esp),%eax
		mov    %esi,0xc8(%esp)
		test   %ax,%ax
		je     jump_49e92
		mov    0xa8(%esp),%eax
		sar    $0x8,%eax
		mov    %eax,0xb8(%esp)
		mov    0xac(%esp),%eax
		sar    $0x8,%eax
		mov    %eax,0xb4(%esp)
		mov    0xac(%esp),%eax
		mov    0xa8(%esp),%ebp
		sar    $0x7,%eax
		sar    $0x7,%ebp
		mov    %eax,0xbc(%esp)
	jump_49b67:
		xor    %eax,%eax
		mov    0xc8(%esp),%ax
		cmp    $0x1e,%eax
		jge    jump_49e92
		xor    %eax,%eax
		mov    0xc0(%esp),%ax
		imul   $0x6,%eax,%eax
		mov    game_col_vects_list,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    (%eax),%dx
		imul   $0xe,%edx,%edx
		mov    0xc8(%esp),%ebx
		mov    game_col_vects,%esi
		inc    %ebx
		add    %edx,%esi
		mov    0x3(%eax),%dl
		mov    %ebx,0xc8(%esp)
		test   $0x80,%dl
		jne    jump_49e67
		mov    0x1c(%edi),%eax
		mov    (%esi),%edx
		sar    $0x5,%eax
		sar    $0x10,%edx
		sub    %eax,%edx
		movswl %dx,%eax
		test   %eax,%eax
		jge    jump_49bd0
		neg    %eax
	jump_49bd0:
		cmp    $0xd0,%eax
		jge    jump_49e67
		mov    0x18(%edi),%eax
		mov    0x20(%edi),%edx
		movswl (%esi),%ebx
		sar    $0x8,%eax
		sar    $0x8,%edx
		cmp    %ebx,%eax
		jne    jump_49bfc
		mov    0x2(%esi),%ebx
		sar    $0x10,%ebx
		cmp    %ebx,%edx
		je     jump_49e67
	jump_49bfc:
		mov    0x4(%esi),%ebx
		sar    $0x10,%ebx
		cmp    %ebx,%eax
		jne    jump_49c14
		mov    0x8(%esi),%eax
		sar    $0x10,%eax
		cmp    %eax,%edx
		je     jump_49e67
	jump_49c14:
		mov    0x20(%edi),%eax
		sar    $0x8,%eax
		lea    (%eax,%ebp,1),%edx
		push   %edx
		mov    0x18(%edi),%edx
		mov    0xc0(%esp),%ebx
		sar    $0x8,%edx
		add    %edx,%ebx
		push   %ebx
		mov    0x8(%esi),%ecx
		push   %eax
		sar    $0x10,%ecx
		mov    0x4(%esi),%ebx
		push   %edx
		sar    $0x10,%ebx
		mov    0x2(%esi),%edx
		movswl (%esi),%eax
		sar    $0x10,%edx
		call   ac_two4_line_intersection
		test   %al,%al
		je     jump_49e67
		mov    0xc0(%esp),%eax
		mov    %ax,EXPORT_SYMBOL(word_1AA38E)
		mov    %eax,0xcc(%esp)
		xor    %eax,%eax
		mov    0xc0(%esp),%ax
		imul   $0x6,%eax,%eax
		mov    game_col_vects_list,%edx
		add    %edx,%eax
		mov    (%eax),%dx
		mov    0x2(%eax),%eax
		sar    $0x10,%eax
		mov    %edx,0xc4(%esp)
		test   %eax,%eax
		jl     jump_49e40
		xor    %eax,%eax
		mov    %dx,%ax
		imul   $0xe,%eax,%edx
		mov    game_col_vects,%eax
		mov    0xa(%edx,%eax,1),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_49e40
		neg    %eax
		imul   $0x28,%eax,%edx
		mov    game_object_faces4,%eax
		testb  $0x10,0xa(%edx,%eax,1)
		je     jump_49e40
		testb  $0x20,0x47(%edi)
		je     jump_49d40
		mov    0x20(%edi),%eax
		mov    0xbc(%esp),%ebx
		sar    $0x8,%eax
		mov    0x8(%esi),%edx
		add    %ebp,%eax
		mov    0x2(%esi),%ecx
		mov    %eax,0x98(%esp)
		mov    0x18(%edi),%eax
		sar    $0x10,%edx
		sar    $0x8,%eax
		sar    $0x10,%ecx
		add    %eax,%ebx
		mov    0x4(%esi),%eax
		mov    %ecx,0x9c(%esp)
		sar    $0x10,%eax
		movswl (%esi),%esi
		sub    %eax,%ebx
		mov    %eax,%ecx
		mov    %ebx,%eax
		sub    %esi,%ecx
		mov    0x9c(%esp),%esi
		mov    %edx,%ebx
		sub    %esi,%ebx
		imul   %ebx,%eax
		mov    0x98(%esp),%esi
		sub    %edx,%esi
		mov    %esi,%edx
		imul   %ecx,%edx
		sub    %eax,%edx
		test   %edx,%edx
		jge    jump_49df4
		movw   $0x1,EXPORT_SYMBOL(word_1AA394)
		jmp    jump_49df4
	jump_49d40:
		mov    0x20(%edi),%eax
		mov    0xb8(%esp),%edx
		sar    $0x8,%eax
		add    %eax,%edx
		push   %edx
		mov    0x18(%edi),%edx
		mov    0xb8(%esp),%ebx
		sar    $0x8,%edx
		add    %edx,%ebx
		push   %ebx
		mov    0x8(%esi),%ecx
		push   %eax
		sar    $0x10,%ecx
		mov    0x4(%esi),%ebx
		push   %edx
		sar    $0x10,%ebx
		mov    0x2(%esi),%edx
		movswl (%esi),%eax
		sar    $0x10,%edx
		call   ac_two4_line_intersection
		test   %al,%al
		je     jump_49df4
		mov    0xbc(%esp),%ecx
		mov    0x20(%edi),%eax
		mov    0x18(%edi),%ebx
		mov    0x4(%esi),%edx
		sar    $0x8,%eax
		sar    $0x8,%ebx
		sar    $0x10,%edx
		add    %ebp,%eax
		add    %ecx,%ebx
		mov    %eax,0x9c(%esp)
		mov    0x2(%esi),%ecx
		sub    %edx,%ebx
		mov    0x8(%esi),%eax
		sar    $0x10,%ecx
		sar    $0x10,%eax
		mov    %ecx,0x98(%esp)
		movswl (%esi),%esi
		mov    %edx,%ecx
		mov    %eax,%edx
		sub    %esi,%ecx
		sub    0x98(%esp),%edx
		mov    0x9c(%esp),%esi
		sub    %eax,%esi
		imul   %esi,%ecx
		mov    %edx,%eax
		imul   %ebx,%eax
		sub    %eax,%ecx
		test   %ecx,%ecx
		jge    jump_49deb
		movw   $0x1,EXPORT_SYMBOL(word_1AA394)
		jmp    jump_49df4
	jump_49deb:
		movw   $0xffff,EXPORT_SYMBOL(word_1AA394)
	jump_49df4:
		mov    0xc4(%esp),%eax
		mov    %ax,EXPORT_SYMBOL(word_1AA392)
		mov    0xc0(%esp),%eax
		mov    0xcc(%esp),%edx
		mov    %ax,EXPORT_SYMBOL(word_1AA390)
		test   %dx,%dx
		je     jump_49e40
		xor    %eax,%eax
		mov    %dx,%ax
		imul   $0x6,%eax,%eax
		mov    game_col_vects_list,%edx
		mov    (%edx,%eax,1),%ax
		mov    %eax,0xc4(%esp)
		mov    0xcc(%esp),%eax
		mov    %ax,EXPORT_SYMBOL(word_1AA38E)
	jump_49e40:
		mov    0xc4(%esp),%ebx
		test   %bx,%bx
		je     jump_49e67
		cmpw   $0x0,EXPORT_SYMBOL(word_1AA392)
		je     jump_49e67
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(word_1AA390),%eax
		mov    %bx,%dx
		sar    $0x10,%eax
		cmp    %eax,%edx
		jne    jump_49e92
	jump_49e67:
		xor    %eax,%eax
		mov    0xc0(%esp),%ax
		imul   $0x6,%eax,%eax
		mov    game_col_vects_list,%edx
		mov    0x2(%edx,%eax,1),%ax
		and    $0x7f,%ah
		mov    %eax,0xc0(%esp)
		test   %ax,%ax
		jne    jump_49b67
	jump_49e92:
		mov    0xc4(%esp),%edx
	jump_49e99:
		mov    %edx,%eax
		add    $0xd0,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
check_for_people:	/* 0x049EA8 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x18,%esp
		mov    %eax,%edi
		mov    %edx,(%esp)
		mov    %ebx,%ebp
		mov    %cx,0x14(%esp)
		sar    $0x10,%eax
		mov    %ax,0x4(%esp)
		mov    %ebx,%eax
		mov    $0xffffffff,%edx
		sar    $0x10,%eax
		mov    %dx,0xc(%esp)
		mov    %ax,0x8(%esp)
		jmp    jump_49edd
	jump_49ed8:
		incw   0xc(%esp)
	jump_49edd:
		mov    0xa(%esp),%eax
		sar    $0x10,%eax
		cmp    $0x2,%eax
		jge    jump_4a00d
		movw   $0xffff,0x10(%esp)
		jmp    jump_49f32
	jump_49ef6:
		sar    %ecx
	jump_49ef8:
		add    %ecx,%eax
		mov    0x12(%esp),%edx
		xor    %ecx,%ecx
		sar    $0x10,%edx
		mov    0x14(%ebx),%cx
		add    %edx,%ecx
		cmp    %ecx,%eax
		jge    jump_49f14
		mov    %ebx,%eax
		jmp    jump_4a00f
	jump_49f14:
		mov    0x2(%ebx),%ax
		jmp    jump_49f28
	jump_49f1a:
		imul   $0x3c,%eax,%eax
		mov    EXPORT_SYMBOL(sthings),%edx
		mov    0x2(%edx,%eax,1),%ax
	jump_49f28:
		test   %ax,%ax
		jne    jump_49f87
	jump_49f2d:
		incw   0x10(%esp)
	jump_49f32:
		mov    0xe(%esp),%edx
		sar    $0x10,%edx
		cmp    $0x2,%edx
		jge    jump_49ed8
		mov    0x2(%esp),%eax
		mov    0xa(%esp),%ebx
		sar    $0x10,%eax
		sar    $0x10,%ebx
		add    %ebx,%eax
		test   %eax,%eax
		jl     jump_49f2d
		cmp    $0x80,%eax
		jge    jump_49f2d
		mov    0x6(%esp),%ebx
		sar    $0x10,%ebx
		add    %ebx,%edx
		test   %edx,%edx
		jl     jump_49f2d
		cmp    $0x80,%edx
		jge    jump_49f2d
		shl    $0x7,%edx
		add    %edx,%eax
		imul   $0x12,%eax,%edx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		mov    0x8(%edx,%eax,1),%ax
		xor    %esi,%esi
		test   %ax,%ax
		je     jump_49f2d
	jump_49f87:
		xor    %edx,%edx
		mov    %si,%dx
		cmp    $0x190,%edx
		jge    jump_49f2d
		cwtl
		inc    %esi
		test   %eax,%eax
		jle    jump_49f1a
		imul   $0xa8,%eax,%eax
		mov    things,%ebx
		add    %eax,%ebx
		xor    %eax,%eax
		mov    0x9(%ebx),%al
		cmp    $0x3,%eax
		jne    jump_49f14
		xor    %eax,%eax
		mov    0xa(%ebx),%ax
		cmp    $0xd,%eax
		je     jump_49f14
		mov    (%esp),%edx
		mov    0x1c(%ebx),%eax
		sub    %edx,%eax
		sar    $0x8,%eax
		cmp    $0x19,%eax
		jge    jump_49f14
		cmp    $0xffffffe7,%eax
		jle    jump_49f14
		mov    0x18(%ebx),%eax
		sub    %edi,%eax
		sar    $0x8,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ecx
		mov    0x20(%ebx),%eax
		sub    %ebp,%eax
		sar    $0x8,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%ecx
		jle    jump_49ef6
		sar    %eax
		jmp    jump_49ef8
	jump_4a00d:
		xor    %eax,%eax
	jump_4a00f:
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
should_i_get_item:	/* 0x04A018 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		mov    %eax,%ecx
		mov    %edx,%esi
		testb  $0x8,0x47(%eax)
		jne    jump_4a111
		cmpw   $0x0,0x2c(%edx)
		jne    jump_4a034
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_4a034:
		mov    0xa4(%ecx),%eax
		xor    %ebx,%ebx
		xor    %edx,%edx
		and    $0xffbfffff,%eax
	jump_4a043:
		test   %eax,%eax
		je     jump_4a054
		test   $0x1,%al
		je     jump_4a04c
		inc    %ebx
	jump_4a04c:
		inc    %edx
		shr    %eax
		cmp    $0x20,%edx
		jl     jump_4a043
	jump_4a054:
		xor    %eax,%eax
		mov    %bx,%ax
		cmp    $0x6,%eax
		jge    jump_4a111
		xor    %eax,%eax
		mov    0x8(%ecx),%al
		cmp    $0xa,%eax
		je     jump_4a111
		xor    %eax,%eax
		mov    0x2c(%esi),%ax
		cmp    $0x9,%eax
		je     jump_4a111
		cmp    $0x1f,%eax
		je     jump_4a111
		testb  $0x8,0xe(%ecx)
		je     jump_4a0ad
		testl  $0x283ceff,0xa4(%ecx)
		jne    jump_4a111
		cmp    $0x4,%eax
		jle    jump_4a0ad
		cmp    $0xf,%eax
		je     jump_4a0ad
		cmp    $0x11,%eax
		jne    jump_4a111
	jump_4a0ad:
		xor    %edx,%edx
		mov    %ecx,%eax
		mov    0x2c(%esi),%dx
		call   do_i_have_weapon
		test   %eax,%eax
		jne    jump_4a111
		mov    0x47(%ecx),%dh
		movw   $0x2c,0xa(%ecx)
		or     $0x8,%dh
		mov    %dh,0x47(%ecx)
		mov    0x18(%esi),%eax
		sar    $0x8,%eax
		mov    %ax,0x9a(%ecx)
		mov    0x20(%esi),%eax
		sar    $0x8,%eax
		mov    %ax,0x9c(%ecx)
		mov    0x16(%esi),%ax
		movw   $0xffff,0x66(%ecx)
		movb   $0x0,0x3f(%ecx)
		movb   $0x0,0x5b(%ecx)
		mov    %ax,0x48(%ecx)
		mov    0x4c(%ecx),%bx
		mov    %ax,0x5e(%ecx)
		test   %bx,%bx
		je     jump_4a111
		mov    %ecx,%eax
		call   ac_remove_path
	jump_4a111:
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_check_for_other_people)	/* 0x04A118 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x34,%esp
		mov    %eax,0x2c(%esp)
		mov    %edx,0x24(%esp)
		mov    %ebx,0x28(%esp)
		mov    %ecx,%esi
		mov    0xf(%ecx),%ah
		mov    0x2c(%esp),%edx
		and    $0xf6,%ah
		xor    %edi,%edi
		mov    %ah,0xf(%ecx)
		test   %edx,%edx
		jl     jump_4a153
		cmp    $0x800000,%edx
		jge    jump_4a153
		test   %ebx,%ebx
		jl     jump_4a153
		cmp    $0x800000,%ebx
		jl     jump_4a15d
	jump_4a153:
		mov    $0x1,%eax
		jmp    jump_4a635
	jump_4a15d:
		mov    %edx,%eax
		sar    $0x10,%eax
		mov    %eax,0xc(%esp)
		mov    %ebx,%eax
		sar    $0x10,%eax
		mov    %eax,0x14(%esp)
		mov    $0xffffffff,%eax
		mov    0x14(%esp),%edx
		mov    %eax,0x10(%esp)
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x8,%eax
		mov    %eax,(%esp)
		jmp    jump_4a19f
	jump_4a18d:
		mov    0x10(%esp),%edx
		inc    %edx
		mov    %edx,0x10(%esp)
		cmp    $0x2,%edx
		jge    jump_4a633
	jump_4a19f:
		mov    0xc(%esp),%eax
		mov    0x10(%esp),%ebp
		add    %ebp,%eax
		mov    %eax,0x1c(%esp)
		imul   $0x12,%eax,%eax
		mov    (%esp),%ebx
		sub    $0x900,%eax
		mov    $0xffffffff,%ecx
		add    %ebx,%eax
		mov    %ecx,0x4(%esp)
		mov    %eax,0x18(%esp)
		jmp    jump_4a4fc
	jump_4a1cc:
		sar    %ebp
		add    %eax,%ebp
	jump_4a1d0:
		xor    %eax,%eax
		xor    %edx,%edx
		mov    0x14(%ebx),%ax
		mov    0x14(%esi),%dx
		add    %ebp,%ebp
		add    %edx,%eax
		cmp    %eax,%ebp
		jge    jump_4a2c2
		testb  $0x8,0xe(%esi)
		je     jump_4a1f6
		cmp    %ebx,%esi
		jb     jump_4a2c2
	jump_4a1f6:
		mov    0x5c(%esi),%dl
		test   %dl,%dl
		je     jump_4a201
		mov    %dl,%al
		jmp    jump_4a204
	jump_4a201:
		mov    0x57(%esi),%al
	jump_4a204:
		inc    %al
		mov    %al,0x5c(%ebx)
		xor    %edi,%edi
		mov    0x16(%ebx),%di
		mov    0x2(%ebx),%cx
		jmp    jump_4a423
	jump_4a218:
		cmp    $0x2,%eax
		jne    jump_4a2c2
		xor    %eax,%eax
		mov    0x8(%ebx),%al
		cmp    $0x1d,%eax
		je     jump_4a2c2
		mov    0x24(%esp),%edx
		mov    0x1c(%ebx),%eax
		sub    %edx,%eax
		sar    $0x8,%eax
		cmp    $0x19,%eax
		jge    jump_4a2c2
		cmp    $0xffffffe7,%eax
		jle    jump_4a2c2
		mov    0x2c(%esp),%ecx
		mov    0x18(%ebx),%eax
		sub    %ecx,%eax
		sar    $0x8,%eax
		mov    0x28(%esp),%ebp
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ecx
		mov    0x20(%ebx),%eax
		sub    %ebp,%eax
		sar    $0x8,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%ecx
		jle    jump_4a279
		sar    %eax
		jmp    jump_4a27b
	jump_4a279:
		sar    %ecx
	jump_4a27b:
		add    %ecx,%eax
		xor    %ecx,%ecx
		mov    0x14(%ebx),%cx
		mov    %ecx,%edx
		sar    $0x2,%edx
		sub    %edx,%ecx
		xor    %edx,%edx
		mov    0x14(%esi),%dx
		add    %ecx,%edx
		cmp    %edx,%eax
		jge    jump_4a2c2
		mov    0xf(%esi),%cl
		mov    %ebx,%edx
		and    $0xf6,%cl
		mov    0x16(%ebx),%ax
		mov    %cl,0xf(%esi)
		mov    %cl,%ch
		mov    %ax,0x5e(%esi)
		or     $0x1,%ch
		mov    %esi,%eax
		mov    %ch,0xf(%esi)
		call   ac_can_i_enter_vehicle
		test   %al,%al
		jne    jump_4a2c2
		xor    %edi,%edi
		mov    0x16(%ebx),%di
	jump_4a2c2:
		mov    0x2(%ebx),%cx
		jmp    jump_4a423
	jump_4a2cb:
		imul   $0x3c,%eax,%eax
		mov    EXPORT_SYMBOL(sthings),%ebx
		add    %eax,%ebx
		xor    %eax,%eax
		mov    0x9(%ebx),%al
		cmp    $0x19,%eax
		jne    jump_4a375
		testb  $0x8,0xe(%esi)
		je     jump_4a2f3
		mov    %ebx,%edx
		mov    %esi,%eax
		call   should_i_get_item
	jump_4a2f3:
		mov    0x24(%esp),%ebp
		mov    0x1c(%ebx),%eax
		sub    %ebp,%eax
		sar    $0x8,%eax
		cmp    $0x19,%eax
		jge    jump_4a413
		cmp    $0xffffffe7,%eax
		jle    jump_4a413
		mov    0x2c(%esp),%edx
		mov    0x18(%ebx),%eax
		sub    %edx,%eax
		sar    $0x8,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    0x28(%esp),%edx
		mov    %eax,%ebp
		mov    0x20(%ebx),%eax
		sub    %edx,%eax
		sar    $0x8,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%ebp
		jle    jump_4a33d
		sar    %eax
		jmp    jump_4a33f
	jump_4a33d:
		sar    %ebp
	jump_4a33f:
		add    %ebp,%eax
		xor    %edx,%edx
		mov    0x14(%ebx),%dx
		mov    %edx,0x8(%esp)
		xor    %edx,%edx
		mov    0x8(%esp),%ebp
		mov    0x14(%esi),%dx
		add    %ebp,%edx
		cmp    %edx,%eax
		jge    jump_4a413
		mov    0xf(%esi),%dh
		mov    0x16(%ebx),%ax
		or     $0x8,%dh
		mov    %ax,0x5e(%esi)
		mov    %dh,0xf(%esi)
		jmp    jump_4a413
	jump_4a375:
		cmp    $0x5,%eax
		jne    jump_4a413
		test   %edi,%edi
		jne    jump_4a413
		xor    %eax,%eax
		mov    0x8(%ebx),%al
		cmp    $0x1,%eax
		je     jump_4a413
		xor    %eax,%eax
		mov    0x5d(%esi),%al
		cmp    $0x2,%eax
		jge    jump_4a413
		mov    0x24(%esp),%edx
		mov    0x1c(%ebx),%eax
		sub    %edx,%eax
		sar    $0x8,%eax
		cmp    $0x19,%eax
		jge    jump_4a413
		cmp    $0xffffffe7,%eax
		jle    jump_4a413
		mov    0x2c(%esp),%ebp
		mov    0x18(%ebx),%eax
		sub    %ebp,%eax
		sar    $0x8,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    0x28(%esp),%edx
		mov    %eax,%ebp
		mov    0x20(%ebx),%eax
		sub    %edx,%eax
		sar    $0x8,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%ebp
		jle    jump_4a3e4
		sar    %eax
		jmp    jump_4a3e6
	jump_4a3e4:
		sar    %ebp
	jump_4a3e6:
		add    %eax,%ebp
		xor    %eax,%eax
		mov    0x26(%ebx),%ax
		mov    EXPORT_SYMBOL(static_radii)-1998(,%eax,2),%ax # would be prudent to check if StartFrame is in range
		and    $0xffff,%eax
		sar    %eax
		test   %eax,%eax
		je     jump_4a413
		xor    %edx,%edx
		mov    0x14(%esi),%dx
		add    %edx,%eax
		cmp    %eax,%ebp
		jge    jump_4a413
		mov    0x14(%ebx),%edi
		sar    $0x10,%edi
	jump_4a413:
		movswl %cx,%eax
		imul   $0x3c,%eax,%edx
		mov    EXPORT_SYMBOL(sthings),%eax
		mov    0x2(%edx,%eax,1),%cx
	jump_4a423:
		test   %cx,%cx
		jne    jump_4a540
	jump_4a42c:
		cmpl   $0x190,0x20(%esp)
		jl     jump_4a4dc
		movw   $0x100,0x30(%esp)
		jmp    jump_4a476
	jump_4a443:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+1,%al
		push   %eax
		mov    0x20(%esi),%eax
		sar    $0x8,%eax
		movswl %ax,%ebx
		mov    0x1c(%esi),%eax
		sar    $0x8,%eax
		movswl %ax,%edx
		mov    0x18(%esi),%eax
		sar    $0x8,%eax
		mov    %eax,0xc(%esp)
		mov    0xc(%esp),%eax
		cwtl
		call   ac_draw_map_flat_circle
		addb   $0x3,0x31(%esp)
	jump_4a476:
		xor    %ecx,%ecx
		mov    0x30(%esp),%cx
		cmp    $0x5dc0,%ecx
		jl     jump_4a443
		mov    0x18(%esi),%eax
		sar    $0x8,%eax
		mov    %eax,engn_xc
		mov    0x20(%esi),%eax
		sar    $0x8,%eax
		mov    0x18(%esp),%ebx
		mov    %eax,engn_zc
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %ebx,%eax
		mov    0x8(%eax),%ax
		xor    %ebx,%ebx
		test   %ax,%ax
		je     jump_4a4dc
	jump_4a4b1:
		cmp    $0x64,%ebx
		jge    jump_4a4dc
		cwtl
		test   %eax,%eax
		jle    jump_4a4c9
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		jmp    jump_4a4d1
	jump_4a4c9:
		imul   $0x3c,%eax,%edx
		mov    EXPORT_SYMBOL(sthings),%eax
	jump_4a4d1:
		mov    0x2(%edx,%eax,1),%ax
		inc    %ebx
		test   %ax,%ax
		jne    jump_4a4b1
	jump_4a4dc:
		mov    0x18(%esp),%ecx
		mov    0x4(%esp),%ebp
		add    $0x900,%ecx
		inc    %ebp
		mov    %ecx,0x18(%esp)
		mov    %ebp,0x4(%esp)
		cmp    $0x2,%ebp
		jge    jump_4a18d
	jump_4a4fc:
		mov    0x1c(%esp),%edx
		test   %edx,%edx
		jle    jump_4a4dc
		cmp    $0x80,%edx
		jge    jump_4a4dc
		mov    0x14(%esp),%eax
		add    0x4(%esp),%eax
		test   %eax,%eax
		jle    jump_4a4dc
		cmp    $0x80,%eax
		jge    jump_4a4dc
		shl    $0x7,%eax
		add    %edx,%eax
		imul   $0x12,%eax,%edx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		mov    0x8(%edx,%eax,1),%cx
		xor    %eax,%eax
		mov    %eax,0x20(%esp)
		test   %cx,%cx
		je     jump_4a42c
	jump_4a540:
		mov    0x20(%esp),%edx
		cmp    $0x19a,%edx
		jge    jump_4a42c
		lea    0x1(%edx),%ebp
		movswl %cx,%eax
		mov    %ebp,0x20(%esp)
		test   %eax,%eax
		jle    jump_4a2cb
		imul   $0xa8,%eax,%eax
		mov    things,%ebx
		add    %eax,%ebx
		xor    %eax,%eax
		mov    0x9(%ebx),%al
		cmp    $0x3,%eax
		jne    jump_4a218
		testw  $0x2004,0xc(%ebx)
		jne    jump_4a2c2
		mov    0xc(%esi),%edx
		mov    0xc(%ebx),%eax
		and    $0x80000,%edx
		and    $0x80000,%eax
		cmp    %eax,%edx
		jne    jump_4a2c2
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0x3,%eax
		je     jump_4a2c2
		testb  $0x20,0xd(%esi)
		jne    jump_4a2c2
		cmp    %esi,%ebx
		je     jump_4a2c2
		xor    %eax,%eax
		mov    0xa(%ebx),%ax
		cmp    $0xd,%eax
		je     jump_4a2c2
		test   %edi,%edi
		jne    jump_4a2c2
		mov    0x24(%esp),%edx
		mov    0x1c(%ebx),%eax
		sub    %edx,%eax
		sar    $0x8,%eax
		cmp    $0x19,%eax
		jge    jump_4a2c2
		cmp    $0xffffffe7,%eax
		jle    jump_4a2c2
		mov    0x2c(%esp),%ecx
		mov    0x18(%ebx),%eax
		sub    %ecx,%eax
		sar    $0x8,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    0x28(%esp),%edx
		mov    %eax,%ecx
		mov    %eax,%ebp
		mov    0x20(%ebx),%eax
		sub    %edx,%eax
		sar    $0x8,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		cmp    %eax,%ecx
		jle    jump_4a1cc
		sar    %edx
		lea    (%ecx,%edx,1),%ebp
		jmp    jump_4a1d0
	jump_4a633:
		mov    %edi,%eax
	jump_4a635:
		add    $0x34,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_calc_lighting)	/* 0x04A700 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		mov    %eax,%edx
		mov    0x20(%eax),%eax
		mov    0x18(%edx),%ecx
		sar    $0x10,%eax
		sar    $0x10,%ecx
		shl    $0x7,%eax
		add    %eax,%ecx
		lea    0x0(,%ecx,8),%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%ebx
		add    %ecx,%eax
		mov    0x4(%ebx,%eax,2),%al
		xor    %ah,%ah
		lea    0x1(%ecx),%esi
		mov    %ax,0x4(%esp)
		lea    0x0(,%esi,8),%eax
		add    %esi,%eax
		lea    0x80(%ecx),%esi
		movzbw 0x4(%ebx,%eax,2),%di
		lea    0x0(,%esi,8),%eax
		add    %esi,%eax
		add    $0x81,%ecx
		movzbw 0x4(%ebx,%eax,2),%si
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		mov    0x4(%ebx,%eax,2),%al
		xor    %ah,%ah
		xor    %ebx,%ebx
		xor    %ecx,%ecx
		mov    0x19(%edx),%bl
		mov    0x21(%edx),%cl
		mov    %ax,(%esp)
		lea    (%ebx,%ecx,1),%eax
		cmp    $0x100,%eax
		jge    jump_4a7b0
		mov    0x2(%esp),%eax
		movswl %di,%edi
		sar    $0x10,%eax
		sub    %eax,%edi
		imul   %edi,%ebx
		sar    $0x8,%ebx
		lea    (%eax,%ebx,1),%edi
		movswl %si,%ebx
		sub    %eax,%ebx
		mov    %ebx,%eax
		imul   %ecx,%eax
		sar    $0x8,%eax
		add    %edi,%eax
		jmp    jump_4a7e3
	jump_4a7b0:
		mov    -0x2(%esp),%eax
		mov    $0x100,%ebp
		sar    $0x10,%eax
		sub    %ebx,%ebp
		movswl %si,%ebx
		sub    %eax,%ebx
		imul   %ebp,%ebx
		mov    $0x100,%esi
		sub    %ecx,%esi
		mov    %esi,%ecx
		movswl %di,%esi
		sar    $0x8,%ebx
		sub    %eax,%esi
		add    %eax,%ebx
		mov    %esi,%eax
		imul   %ecx,%eax
		sar    $0x8,%eax
		add    %ebx,%eax
	jump_4a7e3:
		mov    %ax,0x8(%esp)
		mov    0x8(%esp),%al
		mov    %al,0x5a(%edx)
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx


/*----------------------------------------------------------------*/
nullsub_3:	/* 0x04A7F8 */
/*----------------------------------------------------------------*/
		ret


/*----------------------------------------------------------------*/
unkn_update_thing_to_light:	/* 0x04A7FC */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		sub    $0x4,%esp
		mov    %edx,%ecx
		mov    %bl,(%esp)
		and    $0xffff,%eax
		mov    game_full_lights,%esi
		shl    $0x5,%eax
		add    %eax,%esi
		mov    0x18(%edx),%eax
		mov    0x6(%esi),%ebx
		sar    $0x8,%eax
		sar    $0x10,%ebx
		mov    0xa(%esi),%esi
		sub    %eax,%ebx
		mov    0x20(%edx),%eax
		sar    $0x10,%esi
		sar    $0x8,%eax
		sub    %eax,%esi
		mov    %esi,%edx
		mov    %ebx,%eax
		neg    %edx
		call   ac_arctan
		mov    %eax,%edx
		mov    %ebx,%eax
		imul   %ebx,%eax
		mov    %esi,%ebx
		imul   %esi,%ebx
		add    %ebx,%eax
		add    $0x4,%edx
		call   ac_LbSqrL
		mov    %eax,%ebx
		xor    %eax,%eax
		sar    $0x3,%dx
		mov    (%esp),%al
		shr    $0x3,%ebx
		mov    %dl,0x79(%ecx,%eax,1)
		mov    %bl,0x7a(%ecx,%eax,1)
		add    $0x4,%esp
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_lighting_unkn1)	/* 0x04A870 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    %eax,%ebp
		xor    %edx,%edx
		mov    %dx,(%esp)
		mov    %edx,0x4(%esp)
		mov    0xc(%eax),%dl
		xor    %ecx,%ecx
		test   $0x2,%dl
		jne    jump_4a968
		mov    0x20(%eax),%ebx
		sar    $0x10,%ebx
		mov    0x18(%eax),%eax
		shl    $0x7,%ebx
		sar    $0x10,%eax
		add    %eax,%ebx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%ebx
		add    %eax,%eax
		add    %ebx,%eax
		mov    %ebp,%ebx
		movb   $0x0,0x79(%ebx)
		movb   $0x0,0x7a(%ebx)
		movb   $0x0,0x7b(%ebx)
		movb   $0x0,0x7c(%ebx)
		mov    0x2(%eax),%ax
		xor    %edx,%edx
		test   %ax,%ax
		je     jump_4a930
		mov    game_full_lights,%edi
	jump_4a8da:
		movswl %dx,%ebx
		cmp    $0x190,%ebx
		jge    jump_4a930
		xor    %esi,%esi
		mov    %ax,%si
		imul   $0x6,%esi,%esi
		mov    game_quick_lights,%ebx
		add    %esi,%ebx
		xor    %esi,%esi
		mov    0x2(%ebx),%si
		inc    %edx
		shl    $0x5,%esi
		mov    (%ebx),%bx
		movswl (%edi,%esi,1),%esi
		and    $0xffff,%ebx
		imul   %esi,%ebx
		cmp    %ecx,%ebx
		jle    jump_4a919
		mov    %eax,0x4(%esp)
		mov    %ebx,%ecx
	jump_4a919:
		and    $0xffff,%eax
		imul   $0x6,%eax,%ebx
		mov    game_quick_lights,%eax
		mov    0x4(%ebx,%eax,1),%ax
		test   %ax,%ax
		jne    jump_4a8da
	jump_4a930:
		cmpw   $0x0,0x4(%esp)
		je     jump_4a968
		mov    (%esp),%al
		xor    %ebx,%ebx
		xor    %ecx,%ecx
		mov    0x4(%esp),%bx
		mov    %al,%cl
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		mov    game_quick_lights,%ebx
		mov    0x2(%ebx,%eax,2),%ax
		and    $0xffff,%eax
		mov    %ecx,%ebx
		mov    %ebp,%edx
		call   unkn_update_thing_to_light
	jump_4a968:
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_create_intelligent_door)	/* 0x04A974 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		mov    %eax,%ebx
		mov    EXPORT_SYMBOL(word_1AA38E),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    game_col_vects_list,%edx
		mov    0x2(%edx,%eax,2),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		testb  $0x8,0xd(%edx,%eax,8)
		jne    jump_4ab24
		movswl %bx,%edx
		lea    0x0(,%edx,8),%esi
		sub    %edx,%esi
		mov    game_col_vects,%ecx
		add    %esi,%esi
		add    %esi,%ecx
		mov    0xa(%ecx),%edx
		sar    $0x10,%edx
		neg    %edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    game_object_faces4,%ebx
		shl    $0x3,%eax
		add    %ebx,%eax
		cmpw   $0x0,0x22(%eax)
		je     jump_4aa3a
		mov    0x20(%eax),%edx
		sar    $0x10,%edx
		mov    %edx,%eax
		shl    $0x4,%eax
		mov    EXPORT_SYMBOL(sthings),%esi
		sub    %edx,%eax
		orb    $0x1,0xc(%esi,%eax,4)
		mov    0xa(%ecx),%edx
		sar    $0x10,%edx
		neg    %edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    0x20(%ebx,%eax,8),%edx
		sar    $0x10,%edx
		mov    %edx,%eax
		shl    $0x4,%eax
		sub    %edx,%eax
		testb  $0x2,0xc(%esi,%eax,4)
		je     jump_4ab24
		mov    $0x1,%al
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_4aa3a:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(sthings_used),%ax
		cmp    $0x5d7,%eax
		jg     jump_4ab24
		call   ac_get_new_sthing
		mov    %eax,%ebx
		test   %ax,%ax
		je     jump_4ab24
		movswl %ax,%ecx
		cmp    $0xffffffff,%ecx
		jg     jump_4ab24
		cmp    $0xfffffa24,%ecx
		jl     jump_4ab24
		mov    game_col_vects,%edx
		add    %esi,%edx
		mov    0xa(%edx),%esi
		sar    $0x10,%esi
		neg    %esi
		lea    0x0(,%esi,4),%eax
		add    %eax,%esi
		mov    game_object_faces4,%eax
		shl    $0x3,%esi
		mov    %bx,0x22(%esi,%eax,1)
		mov    0x4(%edx),%eax
		movswl (%edx),%ebx
		sar    $0x10,%eax
		add    %eax,%ebx
		mov    %ecx,%eax
		shl    $0x4,%eax
		sub    %ecx,%eax
		mov    EXPORT_SYMBOL(sthings),%ecx
		shl    $0x2,%eax
		add    %ecx,%eax
		shl    $0x7,%ebx
		mov    %ebx,0x18(%eax)
		mov    0x2(%edx),%ecx
		mov    0x8(%edx),%ebx
		sar    $0x10,%ecx
		sar    $0x10,%ebx
		add    %ecx,%ebx
		shl    $0x7,%ebx
		push   $0x1
		mov    %ebx,0x20(%eax)
		push   $0x0
		mov    (%edx),%ebx
		mov    0x6(%edx),%ecx
		sar    $0x10,%ebx
		sar    $0x10,%ecx
		movw   $0x0,0x24(%eax)
		add    %ecx,%ebx
		movw   $0x0,0x26(%eax)
		shl    $0x7,%ebx
		push   $0x64
		mov    %ebx,0x1c(%eax)
		mov    $0x40,%ecx
		mov    0xc(%edx),%dx
		movw   $0x0,0x2(%eax)
		neg    %edx
		movb   $0x14,0x9(%eax)
		mov    $0x7f,%ebx
		mov    %dx,(%eax)
		mov    $0x32,%edx
		movw   $0x1,0xa(%eax)
		call   ac_play_dist_ssample
	jump_4ab24:
		xor    %al,%al
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_random_speech)	/* 0x04AB2C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		mov    %eax,%esi
		call   ac_LbRandomAnyShort
		cmpw   $0x0,ingame__TrackThing
		jne    jump_4ab60
		testb  $0x1,0x47(%esi)
		jne    jump_4ab60
		testb  $0x8,0xe(%esi)
		jne    jump_4ab60
		test   %dl,%dl
		je     jump_4abf7
	jump_4ab60:
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_4ab64:
		xor    %edx,%edx
		mov    %ax,%dx
		mov    $0x3,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		push   $0x3
		push   $0x0
		push   $0x64
		add    $0x39,%edx
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		and    $0xffff,%edx
		mov    %esi,%eax
		call   ac_play_dist_speech
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_4ab99:
		xor    %edx,%edx
		mov    %ax,%dx
		mov    $0x2,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		push   $0x3
		push   $0x0
		push   $0x64
		add    $0x3c,%edx
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		and    $0xffff,%edx
		mov    %esi,%eax
		call   ac_play_dist_speech
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_4abce:
		push   $0x3
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		xor    %ah,%ah
		push   $0x0
		and    $0x3,%al
		xor    %edx,%edx
		add    $0x32,%eax
		push   $0x64
		mov    %ax,%dx
		mov    %esi,%eax
		call   ac_play_dist_speech
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_4abf7:
		mov    0x8(%esi),%dl
		cmp    $0x8,%dl
		jb     jump_4ac0a
		jbe    jump_4abce
		cmp    $0xa,%dl
		je     jump_4ab99
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_4ac0a:
		cmp    $0x6,%dl
		je     jump_4ab64
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_move)	/* 0x04AC18 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x44,%esp
		mov    %eax,%esi
		mov    $0x2,%edx
		xor    %eax,%eax
		mov    gameturn,%ebx
		mov    0x16(%esi),%ax
		mov    %edx,0x34(%esp)
		shl    $0x5,%eax
		xor    %edx,%edx
		add    %ebx,%eax
		mov    %dx,EXPORT_SYMBOL(word_1AA390)
		test   $0x7f,%al
		jne    jump_4ac53
		mov    %esi,%eax
		xor    %edx,%edx
		call   ac_process_random_speech
	jump_4ac53:
		xor    %eax,%eax
		mov    0x8(%esi),%al
		cmp    $0x7,%eax
		jne    jump_4ac8f
		mov    $0x4f,%edx
		xor    %eax,%eax
		xor    %ebx,%ebx
		mov    0x16(%esi),%ax
		call   ac_IsSamplePlaying
		test   %al,%al
		jne    jump_4ac8f
		push   $0x3
		push   $0xffffffff
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x4f,%edx
		mov    %esi,%eax
		call   ac_play_dist_sample
	jump_4ac8f:
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		cmp    $0x15,%eax
		jne    jump_4ad0a
		xor    %edx,%edx
		mov    0x8(%esi),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		movb   $0x0,0x6c(%esi)
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		xor    %edx,%edx
		dec    %eax
		mov    0x8(%esi),%dl
		mov    %ax,0x26(%esi)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		add    %eax,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    0x57(%esi),%al
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		mov    %ax,0x24(%esi)
	jump_4ad0a:
		testl  $0x10004000,0xc(%esi)
		je     jump_4ad1d
		mov    $0x1,%eax
		jmp    jump_4ba8c
	jump_4ad1d:
		mov    0x70(%esi),%ax
		shl    $0x7,%eax
		xor    %ebx,%ebx
		shr    $0xd,%ax
		mov    %ax,%bx
		mov    0x70(%esi),%eax
		sar    $0x10,%eax
		sar    $0x5,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		sub    %ebx,%eax
		lea    0xa0(%esi),%ebx
		test   %eax,%eax
		jge    jump_4ad4b
		xor    %edx,%edx
		jmp    jump_4ad6d
	jump_4ad4b:
		mov    0x70(%esi),%ax
		shl    $0x7,%eax
		xor    %ecx,%ecx
		shr    $0xd,%ax
		mov    %ax,%cx
		mov    0x70(%esi),%eax
		sar    $0x10,%eax
		sar    $0x5,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		sub    %ecx,%edx
	jump_4ad6d:
		movswl (%ebx),%eax
		sub    %edx,%eax
		mov    %ax,(%ebx)
		testb  $0x8,0x46(%esi)
		je     jump_4ae72
		testb  $0x20,0xd(%esi)
		je     jump_4adad
		mov    0x70(%esi),%ax
		xor    %ah,%ah
		and    $0x7,%al
		and    $0xffff,%eax
		mov    $0x7,%edx
		add    %eax,%eax
		sub    %eax,%edx
		mov    0x9e(%esi),%eax
		sar    $0x10,%eax
		sub    %edx,%eax
		mov    %ax,0xa0(%esi)
	jump_4adad:
		mov    0xa0(%esi),%eax
		mov    0x9e(%esi),%edx
		sar    $0x10,%eax
		sar    $0x10,%edx
		sar    $0x2,%eax
		cmp    %eax,%edx
		jge    jump_4ae72
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0x24,%eax
		je     jump_4ae72
		mov    %esi,%eax
		xor    %edx,%edx
		call   ac_gun_out_anim
		xor    %edx,%edx
		mov    0x8(%esi),%dl
		mov    %al,0x6c(%esi)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		xor    %edx,%edx
		dec    %eax
		mov    0x8(%esi),%dl
		mov    %ax,0x26(%esi)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		add    %eax,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    0x57(%esi),%al
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		movw   $0x30,0x28(%esi)
		movw   $0x30,0x2a(%esi)
		mov    0x46(%esi),%dh
		mov    %ax,0x24(%esi)
		and    $0xf7,%dh
		mov    %esi,%eax
		mov    %dh,0x46(%esi)
		call   calc_person_speed
		mov    %ax,0x38(%esi)
	jump_4ae72:
		mov    0x38(%esi),%ax
		mov    0x2c(%esi),%edi
		cwtl
		imul   %eax,%edi
		mov    0x34(%esi),%ebp
		imul   %eax,%ebp
		mov    0x45(%esi),%bl
		and    $0xfe,%bl
		sar    $0x4,%edi
		mov    0x18(%esi),%eax
		mov    %bl,0x45(%esi)
		add    %edi,%eax
		mov    %eax,(%esp)
		mov    0x1c(%esi),%eax
		sar    $0x4,%ebp
		mov    %eax,0xc(%esp)
		mov    0x20(%esi),%eax
		add    %ebp,%eax
		mov    %eax,0x4(%esp)
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0x3,%eax
		jne    jump_4aebb
		xor    %eax,%eax
		mov    %eax,0x34(%esp)
	jump_4aebb:
		cmpw   $0x0,0x6e(%esi)
		je     jump_4b35c
		xor    %edx,%edx
		mov    %edx,0x34(%esp)
		jmp    jump_4b35c
	jump_4aed1:
		mov    0x3e(%esp),%eax
		sar    $0x10,%eax
		imul   $0xe,%eax,%eax
		mov    0x34(%esp),%edx
		mov    game_col_vects,%ecx
		dec    %edx
		add    %eax,%ecx
		mov    %edx,0x34(%esp)
		mov    0x4(%ecx),%edx
		movswl (%ecx),%eax
		sar    $0x10,%edx
		sub    %eax,%edx
		shl    $0x8,%edx
		mov    0x8(%ecx),%eax
		mov    %edx,0x2c(%esp)
		mov    0x2(%ecx),%edx
		sar    $0x10,%eax
		sar    $0x10,%edx
		sub    %edx,%eax
		shl    $0x8,%eax
		mov    %eax,0x30(%esp)
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebx
		mov    0x2c(%esp),%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x7,%edx
		mov    %edx,0x10(%esp)
		mov    %ebx,%edx
		sar    $0x7,%edx
		mov    %edx,0x28(%esp)
		cmp    %ebx,%eax
		jge    jump_4af5f
		mov    %ebx,%edx
		sar    $0x5,%edx
		sub    %edx,%ebx
		sub    0x28(%esp),%ebx
		mov    %eax,%edx
		sar    $0x2,%edx
		add    %edx,%ebx
		mov    %eax,%edx
		sar    $0x3,%edx
		sar    $0x6,%eax
		add    %ebx,%edx
		add    %edx,%eax
		mov    0x10(%esp),%edx
		add    %edx,%eax
		jmp    jump_4af8d
	jump_4af5f:
		mov    %eax,%edx
		sar    $0x5,%edx
		sub    %edx,%eax
		mov    0x10(%esp),%edx
		sub    %edx,%eax
		mov    %eax,0x8(%esp)
		mov    %ebx,%eax
		mov    0x8(%esp),%edx
		sar    $0x2,%eax
		add    %eax,%edx
		mov    %ebx,%eax
		sar    $0x3,%eax
		sar    $0x6,%ebx
		add    %edx,%eax
		add    %ebx,%eax
		mov    0x28(%esp),%ebx
		add    %ebx,%eax
	jump_4af8d:
		mov    %eax,0x24(%esp)
		cmp    $0xa,%eax
		jge    jump_4af9e
		movl   $0xa,0x24(%esp)
	jump_4af9e:
		mov    0x24(%esp),%ebx
		mov    0x2c(%esp),%edx
		mov    %edx,%eax
		shl    $0x10,%eax
		sar    $0x10,%edx
		idiv   %ebx
		mov    0x24(%esp),%ebx
		mov    0x30(%esp),%edx
		mov    %eax,0x38(%esp)
		mov    %edx,%eax
		shl    $0x10,%eax
		sar    $0x10,%edx
		idiv   %ebx
		mov    %eax,0x1c(%esp)
		mov    %edi,%ebx
		mov    0x38(%esp),%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    %eax,%edi
		mov    %ebp,%ebx
		mov    0x1c(%esp),%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		lea    (%edi,%eax,1),%ebp
		mov    0x38(%esp),%ebx
		mov    %ebp,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    0x1c(%esp),%ebx
		mov    %eax,%edi
		mov    %ebp,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    %eax,%ebp
		movswl (%ecx),%eax
		mov    0x18(%esi),%edx
		shl    $0x8,%eax
		sub    %eax,%edx
		mov    %edx,%eax
		mov    0x2(%ecx),%edx
		sar    $0x10,%edx
		mov    0x20(%esi),%ebx
		shl    $0x8,%edx
		mov    %eax,%ecx
		sub    %edx,%ebx
		mov    0x38(%esp),%eax
		mov    %ebx,%edx
		mov    0x1c(%esp),%ebx
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_4b04a
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_4b04a:
		movsbl %al,%eax
		test   %eax,%eax
		jle    jump_4b063
		mov    0x1c(%esp),%eax
		mov    0x38(%esp),%ebx
		neg    %eax
		sar    $0x5,%ebx
		sar    $0x5,%eax
		jmp    jump_4b07b
	jump_4b063:
		jge    jump_4b077
		mov    0x38(%esp),%ebx
		mov    0x1c(%esp),%eax
		neg    %ebx
		sar    $0x5,%eax
		sar    $0x5,%ebx
		jmp    jump_4b07b
	jump_4b077:
		xor    %eax,%eax
		xor    %ebx,%ebx
	jump_4b07b:
		add    %eax,%edi
		mov    0x18(%esi),%eax
		add    %edi,%eax
		mov    %eax,(%esp)
		add    %ebx,%ebp
		mov    0x20(%esi),%eax
		add    %ebp,%eax
		mov    %eax,0x4(%esp)
		jmp    jump_4b35c
	jump_4b095:
		mov    0x4(%esp),%ecx
		test   %ecx,%ecx
		jl     jump_4b0a9
		mov    %ecx,%eax
		sar    $0x8,%eax
		cmp    $0x8000,%eax
		jl     jump_4b0b8
	jump_4b0a9:
		mov    $0x1,%eax
		add    $0x44,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_4b0b8:
		testb  $0x14,0xc(%esi)
		je     jump_4b0f9
		mov    0x4(%esp),%ebx
		mov    0xc(%esp),%edx
		mov    (%esp),%eax
		mov    %esi,%ecx
		call   ac_check_for_other_people
		test   %ax,%ax
		jne    jump_4b0db
		andb   $0xeb,0xc(%esi)
		jmp    jump_4b11d
	jump_4b0db:
		incb   0x5d(%esi)
		testb  $0x10,0xc(%esi)
		jne    jump_4b11d
		testb  $0x1,0xf(%esi)
		je     jump_4b11d
		mov    $0x1,%eax
		add    $0x44,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_4b0f9:
		mov    0x4(%esp),%ebx
		mov    0xc(%esp),%edx
		mov    (%esp),%eax
		mov    %esi,%ecx
		call   ac_check_for_other_people
		test   %ax,%ax
		je     jump_4b11d
		incb   0x5d(%esi)
		add    $0x44,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_4b11d:
		mov    0x62(%esi),%cx
		test   %cx,%cx
		je     jump_4b16c
		mov    0x4(%esp),%ebx
		xor    %eax,%eax
		mov    (%esp),%edx
		mov    %cx,%ax
		add    %ebp,%ebx
		add    %edi,%edx
		mov    game_commands,%ecx
		sar    $0x8,%ebx
		shl    $0x5,%eax
		sar    $0x8,%edx
		add    %ecx,%eax
		call   ac_check_person_within
		test   %al,%al
		jne    jump_4b168
		mov    0x44(%esi),%dh
		or     $0x80,%dh
		mov    $0x1,%eax
		mov    %dh,0x44(%esi)
		add    $0x44,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_4b168:
		andb   $0x7f,0x44(%esi)
	jump_4b16c:
		mov    0x18(%esi),%eax
		mov    (%esp),%edx
		sar    $0x10,%eax
		sar    $0x10,%edx
		sub    %eax,%edx
		mov    0x4(%esp),%ebx
		mov    %edx,0x3c(%esp)
		mov    0x20(%esi),%edx
		sar    $0x10,%ebx
		sar    $0x10,%edx
		sub    %edx,%ebx
		shl    $0x7,%edx
		add    %edx,%eax
		imul   $0x12,%eax,%edx
		mov    %ebx,0x14(%esp)
		xor    %ebx,%ebx
		mov    %bx,EXPORT_SYMBOL(word_1AA394)
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		mov    %bx,EXPORT_SYMBOL(word_1AA392)
		add    %edx,%eax
		mov    %ebp,%ebx
		mov    %eax,0x18(%esp)
		mov    %eax,%ecx
		mov    %edi,%edx
		mov    %esi,%eax
		call   ac_do_move_colide
		mov    %ax,0x40(%esp)
		test   %ax,%ax
		je     jump_4b21f
		testb  $0x8,0xe(%esi)
		jne    jump_4b21f
		cmpl   $0x0,0x34(%esp)
		je     jump_4b21f
		mov    data_1aa38c,%edx
		sar    $0x10,%edx
		imul   $0x6,%edx,%edx
		mov    game_col_vects_list,%ebx
		mov    0x2(%edx,%ebx,1),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		jl     jump_4b21f
		cwtl
		imul   $0xe,%eax,%eax
		mov    game_col_vects,%edx
		mov    0xa(%edx,%eax,1),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_4b21f
		neg    %eax
		imul   $0x28,%eax,%edx
		mov    game_object_faces4,%eax
		testb  $0x14,0xa(%edx,%eax,1)
		je     jump_4aed1
	jump_4b21f:
		mov    0x14(%esp),%ebx
		test   %ebx,%ebx
		je     jump_4b303
		cmpw   $0x0,0x40(%esp)
		jne    jump_4b303
		mov    0x6c(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_4b28b
		imul   $0x900,%ebx,%eax
		add    0x18(%esp),%eax
		testb  $0x5,0xf(%eax)
		je     jump_4b28b
		cmpl   $0x0,0x34(%esp)
		je     jump_4b274
		testb  $0x8,0xe(%esi)
		jne    jump_4b274
		mov    0x18(%esi),%eax
		add    %edi,%eax
		mov    %eax,(%esp)
		mov    0x20(%esi),%eax
		xor    %ebp,%ebp
		mov    %eax,0x4(%esp)
		jmp    jump_4b358
	jump_4b274:
		mov    0x5d(%esi),%cl
		inc    %cl
		mov    $0x1,%eax
		mov    %cl,0x5d(%esi)
		add    $0x44,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_4b28b:
		imul   $0x900,0x14(%esp),%ecx
		mov    0x18(%esp),%eax
		mov    %edi,%edx
		mov    %ebp,%ebx
		add    %eax,%ecx
		mov    %esi,%eax
		call   ac_do_move_colide
		mov    %ax,0x40(%esp)
		test   %ax,%ax
		je     jump_4b303
		testb  $0x8,0xe(%esi)
		jne    jump_4b303
		cmpl   $0x0,0x34(%esp)
		je     jump_4b303
		mov    data_1aa38c,%edx
		sar    $0x10,%edx
		imul   $0x6,%edx,%edx
		mov    game_col_vects_list,%ebx
		mov    0x2(%edx,%ebx,1),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		jl     jump_4b303
		cwtl
		imul   $0xe,%eax,%eax
		mov    game_col_vects,%edx
		mov    0xa(%edx,%eax,1),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_4b303
		neg    %eax
		imul   $0x28,%eax,%eax
		mov    game_object_faces4,%edx
		testb  $0x14,0xa(%edx,%eax,1)
		je     jump_4aed1
	jump_4b303:
		mov    0x3c(%esp),%ecx
		test   %ecx,%ecx
		je     jump_4b3f7
		cmpw   $0x0,0x40(%esp)
		jne    jump_4b3f7
		mov    0x6c(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_4b382
		imul   $0x12,%ecx,%eax
		add    0x18(%esp),%eax
		testb  $0x5,0xf(%eax)
		je     jump_4b382
		cmpl   $0x0,0x34(%esp)
		je     jump_4b274
		testb  $0x8,0xe(%esi)
		jne    jump_4b274
		mov    0x18(%esi),%eax
		mov    %eax,(%esp)
		mov    0x20(%esi),%eax
		add    %ebp,%eax
		xor    %edi,%edi
		mov    %eax,0x4(%esp)
	jump_4b358:
		decl   0x34(%esp)
	jump_4b35c:
		mov    (%esp),%ebx
		test   %ebx,%ebx
		jl     jump_4b373
		mov    %ebx,%eax
		sar    $0x8,%eax
		cmp    $0x8000,%eax
		jl     jump_4b095
	jump_4b373:
		mov    $0x1,%eax
		add    $0x44,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_4b382:
		imul   $0x12,0x3c(%esp),%ecx
		mov    0x18(%esp),%edx
		mov    %ebp,%ebx
		mov    %esi,%eax
		add    %edx,%ecx
		mov    %edi,%edx
		call   ac_do_move_colide
		mov    %ax,0x40(%esp)
		test   %ax,%ax
		je     jump_4b3f7
		testb  $0x8,0xe(%esi)
		jne    jump_4b3f7
		cmpl   $0x0,0x34(%esp)
		je     jump_4b3f7
		mov    data_1aa38c,%edx
		sar    $0x10,%edx
		imul   $0x6,%edx,%edx
		mov    game_col_vects_list,%ebx
		mov    0x2(%edx,%ebx,1),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		jl     jump_4b3f7
		cwtl
		imul   $0xe,%eax,%eax
		mov    game_col_vects,%edx
		mov    0xa(%edx,%eax,1),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_4b3f7
		neg    %eax
		imul   $0x28,%eax,%eax
		mov    game_object_faces4,%edx
		testb  $0x14,0xa(%edx,%eax,1)
		je     jump_4aed1
	jump_4b3f7:
		cmpl   $0x0,0x14(%esp)
		je     jump_4b4d2
		cmpl   $0x0,0x3c(%esp)
		je     jump_4b4d2
		cmpw   $0x0,0x40(%esp)
		jne    jump_4b4d2
		mov    0x6c(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_4b456
		imul   $0x12,0x3c(%esp),%eax
		mov    0x18(%esp),%edx
		mov    0x14(%esp),%ebx
		add    %edx,%eax
		imul   $0x900,%ebx,%edx
		testb  $0x5,0xf(%edx,%eax,1)
		je     jump_4b456
		mov    0x5d(%esi),%bh
		inc    %bh
		mov    $0x1,%eax
		mov    %bh,0x5d(%esi)
		add    $0x44,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_4b456:
		imul   $0x900,0x14(%esp),%eax
		imul   $0x12,0x3c(%esp),%ecx
		add    0x18(%esp),%eax
		mov    %edi,%edx
		mov    %ebp,%ebx
		add    %eax,%ecx
		mov    %esi,%eax
		call   ac_do_move_colide
		mov    %ax,0x40(%esp)
		test   %ax,%ax
		je     jump_4b4d2
		testb  $0x8,0xe(%esi)
		jne    jump_4b4d2
		cmpl   $0x0,0x34(%esp)
		je     jump_4b4d2
		mov    data_1aa38c,%edx
		sar    $0x10,%edx
		imul   $0x6,%edx,%edx
		mov    game_col_vects_list,%ebx
		mov    0x2(%edx,%ebx,1),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		jl     jump_4b4d2
		cwtl
		imul   $0xe,%eax,%edx
		mov    game_col_vects,%eax
		mov    0xa(%edx,%eax,1),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_4b4d2
		neg    %eax
		imul   $0x28,%eax,%eax
		mov    game_object_faces4,%edx
		testb  $0x14,0xa(%edx,%eax,1)
		je     jump_4aed1
	jump_4b4d2:
		cmpb   $0x0,EXPORT_SYMBOL(debug_hud_collision)
		jne    jump_4b4e4
		cmpb   $0x0,EXPORT_SYMBOL(byte_1C844F)
		je     jump_4b508
	jump_4b4e4:
		push   $0xe6
		mov    %ebp,%ecx
		mov    %edi,%ebx
		mov    0x20(%esi),%edx
		mov    0x18(%esi),%eax
		sar    $0x8,%edx
		sar    $0x7,%ecx
		sar    $0x7,%ebx
		sar    $0x8,%eax
		add    %eax,%ebx
		add    %edx,%ecx
		call   ac_draw_line_transformed_at_ground
	jump_4b508:
		mov    0x3e(%esp),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_4b522
		mov    $0x1,%eax
		add    $0x44,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_4b522:
		cmpw   $0x0,0x40(%esp)
		je     jump_4b5ae
		mov    data_1aa38c,%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    game_col_vects_list,%edx
		add    %eax,%eax
		add    %eax,%edx
		mov    0x2(%edx),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_4b5ae
		sar    $0x3,%edi
		mov    0x18(%esi),%eax
		add    %edi,%eax
		mov    %eax,(%esp)
		sar    $0x3,%ebp
		mov    0x20(%esi),%eax
		add    %ebp,%eax
		mov    %eax,0x4(%esp)
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0xc,%eax
		je     jump_4b5a7
		cmp    $0xd,%eax
		je     jump_4b5a7
		cmp    $0x24,%eax
		je     jump_4b5a7
		testb  $0x2,0xc(%esi)
		jne    jump_4b5a7
		mov    0x4(%edx),%ax
		neg    %eax
		movswl %ax,%edx
		mov    %esi,%eax
		call   ac_person_hit_razor_wire
		test   %ax,%ax
		je     jump_4b5a7
		xor    %eax,%eax
		add    $0x44,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_4b5a7:
		xor    %edi,%edi
		mov    %di,0x40(%esp)
	jump_4b5ae:
		cmpw   $0x0,EXPORT_SYMBOL(word_1AA392)
		je     jump_4b619
		orb    $0x40,0x47(%esi)
		mov    EXPORT_SYMBOL(word_1AA390),%eax
		sar    $0x10,%eax
		call   ac_create_intelligent_door
		and    $0xff,%eax
		cmp    $0x1,%eax
		jne    jump_4b604
		mov    EXPORT_SYMBOL(word_1AA394),%bx
		xor    %edx,%edx
		movw   $0x7d00,0x64(%esi)
		mov    %dx,0x40(%esp)
		test   %bx,%bx
		je     jump_4b619
		mov    EXPORT_SYMBOL(word_1AA392),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jle    jump_4b5fe
		andb   $0xdf,0x47(%esi)
		jmp    jump_4b619
	jump_4b5fe:
		orb    $0x20,0x47(%esi)
		jmp    jump_4b619
	jump_4b604:
		mov    $0x1,%eax
		movw   $0x7d00,0x64(%esi)
		add    $0x44,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_4b619:
		mov    0x6e(%esi),%cx
		test   %cx,%cx
		je     jump_4b818
		mov    0x6c(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jle    jump_4b726
		mov    0x4(%esp),%ebx
		mov    (%esp),%edx
		xor    %ecx,%ecx
		mov    %esi,%eax
		mov    0x6e(%esi),%cx
		call   ac_set_thing_height_on_face_tri
		test   %ax,%ax
		je     jump_4b677
		mov    0x4(%esp),%ecx
		mov    (%esp),%edx
		mov    %esi,%eax
		mov    0x1c(%esi),%ebx
		call   ac_move_mapwho
		mov    0x45(%esi),%cl
		movb   $0x0,0x5c(%esi)
		or     $0x1,%cl
		xor    %eax,%eax
		mov    %cl,0x45(%esi)
		add    $0x44,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_4b677:
		mov    0x4(%esp),%ebx
		mov    (%esp),%edx
		mov    0x6c(%esi),%ecx
		mov    %esi,%eax
		sar    $0x10,%ecx
		call   ac_find_and_set_connected_face
		test   %ax,%ax
		jne    jump_4b6e6
		cmpw   $0x0,0x40(%esp)
		je     jump_4b6bb
		mov    0x3e(%esp),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,8),%eax
		sub    %edx,%eax
		lea    (%eax,%eax,1),%edx
		mov    game_col_vects,%eax
		mov    0x6e(%esi),%bx
		cmp    0xc(%edx,%eax,1),%bx
		je     jump_4b6ca
	jump_4b6bb:
		mov    $0x1,%eax
		add    $0x44,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_4b6ca:
		mov    0x80(%esi),%dh
		xor    %ecx,%ecx
		and    $0x7f,%dh
		mov    %cx,0x6e(%esi)
		mov    %cx,0x40(%esp)
		mov    %dh,0x80(%esi)
		jmp    jump_4b6ed
	jump_4b6e6:
		xor    %edi,%edi
		mov    %di,0x40(%esp)
	jump_4b6ed:
		mov    0x3e(%esp),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_4b974
		mov    0x4(%esp),%ecx
		mov    (%esp),%edx
		mov    %esi,%eax
		mov    0x1c(%esi),%ebx
		call   ac_move_mapwho
		mov    0x45(%esi),%bh
		movb   $0x0,0x5c(%esi)
		or     $0x1,%bh
		xor    %eax,%eax
		mov    %bh,0x45(%esi)
		add    $0x44,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_4b726:
		mov    %ecx,%eax
		mov    0x4(%esp),%ebx
		neg    %eax
		xor    %ecx,%ecx
		mov    (%esp),%edx
		mov    %ax,%cx
		mov    %esi,%eax
		call   ac_set_thing_height_on_face_quad
		test   %ax,%ax
		je     jump_4b76c
		mov    0x4(%esp),%ecx
		mov    (%esp),%edx
		mov    %esi,%eax
		mov    0x1c(%esi),%ebx
		call   ac_move_mapwho
		mov    0x45(%esi),%dl
		movb   $0x0,0x5c(%esi)
		or     $0x1,%dl
		xor    %eax,%eax
		mov    %dl,0x45(%esi)
		add    $0x44,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_4b76c:
		mov    0x4(%esp),%ebx
		mov    (%esp),%edx
		mov    0x6c(%esi),%ecx
		mov    %esi,%eax
		sar    $0x10,%ecx
		call   ac_find_and_set_connected_face
		test   %ax,%ax
		jne    jump_4b7d8
		cmpw   $0x0,0x40(%esp)
		je     jump_4b7ae
		mov    0x3e(%esp),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,8),%eax
		sub    %edx,%eax
		mov    game_col_vects,%edx
		mov    0x6e(%esi),%cx
		cmp    0xc(%edx,%eax,2),%cx
		je     jump_4b7bd
	jump_4b7ae:
		mov    $0x1,%eax
		add    $0x44,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_4b7bd:
		mov    0x80(%esi),%al
		xor    %edi,%edi
		and    $0x7f,%al
		mov    %di,0x6e(%esi)
		mov    %di,0x40(%esp)
		mov    %al,0x80(%esi)
		jmp    jump_4b7df
	jump_4b7d8:
		xor    %eax,%eax
		mov    %ax,0x40(%esp)
	jump_4b7df:
		mov    0x3e(%esp),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_4b974
		mov    0x45(%esi),%ah
		movb   $0x0,0x5c(%esi)
		or     $0x1,%ah
		mov    %ah,0x45(%esi)
		mov    0x1c(%esi),%ebx
		mov    0x4(%esp),%ecx
		mov    (%esp),%edx
		mov    %esi,%eax
		call   ac_move_mapwho
		xor    %eax,%eax
		add    $0x44,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_4b818:
		cmpw   $0x0,0x40(%esp)
		je     jump_4b8c4
		mov    0x3e(%esp),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,8),%edi
		sub    %edx,%edi
		mov    game_col_vects,%edx
		add    %edi,%edi
		add    %edi,%edx
		mov    0xa(%edx),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jle    jump_4b8c4
		mov    game_object_faces,%ebx
		shl    $0x5,%eax
		testb  $0x4,0x8(%ebx,%eax,1)
		je     jump_4b8ad
		mov    0x4(%esp),%ebx
		xor    %ecx,%ecx
		mov    %esi,%eax
		mov    0xc(%edx),%cx
		mov    (%esp),%edx
		call   ac_set_thing_height_on_face_tri
		test   %ax,%ax
		je     jump_4b8ba
		mov    game_col_vects,%eax
		mov    0x45(%esi),%ch
		mov    0xc(%edi,%eax,1),%ax
		movb   $0x0,0x5c(%esi)
		or     $0x1,%ch
		mov    %ax,0x6e(%esi)
		mov    %ch,0x45(%esi)
		mov    0x1c(%esi),%ebx
		mov    0x4(%esp),%ecx
		mov    (%esp),%edx
		mov    %esi,%eax
		call   ac_move_mapwho
		xor    %eax,%eax
		add    $0x44,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_4b8ad:
		cmpw   $0x0,0x6e(%esi)
		je     jump_4b974
		xor    %eax,%eax
	jump_4b8ba:
		mov    %ax,0x40(%esp)
		jmp    jump_4b974
	jump_4b8c4:
		cmpw   $0x0,0x40(%esp)
		je     jump_4b974
		mov    0x3e(%esp),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,8),%edi
		sub    %edx,%edi
		mov    game_col_vects,%edx
		add    %edi,%edi
		add    %edi,%edx
		mov    0xa(%edx),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_4b974
		neg    %eax
		mov    %eax,%ebx
		shl    $0x2,%eax
		add    %eax,%ebx
		mov    game_object_faces4,%eax
		shl    $0x3,%ebx
		testb  $0x4,0xa(%ebx,%eax,1)
		je     jump_4b966
		mov    0x4(%esp),%ebx
		mov    0xc(%edx),%ax
		xor    %ecx,%ecx
		neg    %eax
		mov    (%esp),%edx
		mov    %ax,%cx
		mov    %esi,%eax
		call   ac_set_thing_height_on_face_quad
		test   %ax,%ax
		je     jump_4b8ba
		mov    game_col_vects,%eax
		mov    0x45(%esi),%ch
		mov    0xc(%edi,%eax,1),%ax
		movb   $0x0,0x5c(%esi)
		or     $0x1,%ch
		mov    %ax,0x6e(%esi)
		mov    %ch,0x45(%esi)
		mov    0x1c(%esi),%ebx
		mov    0x4(%esp),%ecx
		mov    (%esp),%edx
		mov    %esi,%eax
		call   ac_move_mapwho
		xor    %eax,%eax
		add    $0x44,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_4b966:
		cmpw   $0x0,0x6e(%esi)
		je     jump_4b974
		xor    %ebx,%ebx
		mov    %bx,0x40(%esp)
	jump_4b974:
		cmpw   $0x0,0x40(%esp)
		jne    jump_4ba66
		mov    0x6c(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_4ba66
		mov    0x4(%esp),%ebx
		mov    (%esp),%eax
		sar    $0x10,%ebx
		sar    $0x10,%eax
		shl    $0x7,%ebx
		add    %eax,%ebx
		lea    0x0(,%ebx,8),%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		add    %ebx,%eax
		lea    0x1(%ebx),%edi
		mov    0x4(%edx,%eax,2),%ecx
		lea    0x0(,%edi,8),%eax
		add    %edi,%eax
		mov    0x4(%edx,%eax,2),%eax
		sar    $0x10,%eax
		lea    0x80(%ebx),%edi
		mov    %eax,0x20(%esp)
		lea    0x0(,%edi,8),%eax
		add    %edi,%eax
		add    $0x81,%ebx
		mov    0x4(%edx,%eax,2),%edi
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		sar    $0x10,%ecx
		mov    0x4(%edx,%eax,2),%ebx
		xor    %edx,%edx
		xor    %eax,%eax
		mov    0x1(%esp),%dl
		mov    0x5(%esp),%al
		sar    $0x10,%edi
		lea    (%edx,%eax,1),%ebp
		sar    $0x10,%ebx
		cmp    $0x100,%ebp
		jge    jump_4ba2b
		sub    %ecx,%edi
		imul   %edi,%eax
		mov    0x20(%esp),%ebx
		sub    %ecx,%ebx
		imul   %ebx,%edx
		sar    $0x8,%edx
		sar    $0x8,%eax
		add    %ecx,%edx
		lea    (%edx,%eax,1),%ebx
		jmp    jump_4ba55
	jump_4ba2b:
		mov    $0x100,%ecx
		sub    %edx,%ecx
		sub    %ebx,%edi
		mov    %ecx,%edx
		imul   %edi,%edx
		mov    $0x100,%ecx
		sub    %eax,%ecx
		mov    0x20(%esp),%eax
		sar    $0x8,%edx
		sub    %ebx,%eax
		add    %ebx,%edx
		mov    %eax,%ebx
		imul   %ecx,%ebx
		sar    $0x8,%ebx
		add    %edx,%ebx
	jump_4ba55:
		shl    $0x8,%ebx
		mov    0x4(%esp),%ecx
		mov    (%esp),%edx
		mov    %esi,%eax
		call   ac_move_mapwho
	jump_4ba66:
		cmpw   $0x0,0x40(%esp)
		je     jump_4ba7d
		mov    $0x1,%eax
		add    $0x44,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_4ba7d:
		mov    0x45(%esi),%bl
		movb   $0x0,0x5c(%esi)
		or     $0x1,%bl
		xor    %eax,%eax
		mov    %bl,0x45(%esi)
	jump_4ba8c:
		add    $0x44,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_wander_and_fly)	/* 0x04BA98 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    %eax,%ebp
		mov    %edx,(%esp)
		mov    (%esp),%eax
		xor    %edx,%edx
		mov    0xa(%eax),%dx
		xor    %ecx,%ecx
		cmp    $0x21,%edx
		je     jump_4bae4
		test   %edx,%edx
		je     jump_4bae4
		cmp    $0x3b,%edx
		je     jump_4bae4
		mov    %ebp,%eax
		mov    0x68(%eax),%ax
		mov    %ebp,%ebx
		movswl %ax,%edx
		dec    %eax
		mov    %ax,0x68(%ebx)
		test   %edx,%edx
		jl     jump_4bae4
		mov    (%esp),%ebx
		xor    %edx,%edx
		mov    0xa(%ebx),%dx
		cmp    $0x41,%edx
		jne    jump_4bb81
	jump_4bae4:
		mov    0x18(%ebp),%edx
		mov    0x20(%ebp),%edi
		call   ac_LbRandomAnyShort
		xor    %ebx,%ebx
		sar    $0x8,%edx
		and    $0x7,%ah
		mov    %edx,0x4(%esp)
		mov    %ax,%bx
		sar    $0x8,%edi
		mov    0x4(%esp),%esi
	jump_4bb05:
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%ebx,4),%edx
		mov    EXPORT_SYMBOL(lbSinTable)(,%ebx,4),%ebx
		sar    $0x4,%edx
		sar    $0x4,%ebx
		add    %esi,%edx
		add    %edi,%ebx
		test   %edx,%edx
		jl     jump_4bb35
		cmp    $0x8000,%edx
		jge    jump_4bb35
		test   %ebx,%ebx
		jl     jump_4bb35
		cmp    $0x8000,%ebx
		jl     jump_4bb51
	jump_4bb35:
		xor    %esi,%esi
		mov    %cx,%si
		cmp    $0xa,%esi
		jge    jump_4bb51
		add    $0x2,%ah
		xor    %ebx,%ebx
		and    $0x7,%ah
		mov    %ax,%bx
		mov    0x4(%esp),%esi
		inc    %ecx
		jmp    jump_4bb05
	jump_4bb51:
		xor    %esi,%esi
		mov    %cx,%si
		cmp    $0xa,%esi
		jge    jump_4bb81
		test   %edx,%edx
		jl     jump_4bb81
		cmp    $0x8000,%edx
		jge    jump_4bb81
		test   %ebx,%ebx
		jl     jump_4bb81
		cmp    $0x8000,%ebx
		jge    jump_4bb81
		mov    (%esp),%eax
		call   ac_start_goto_vehicle
		movw   $0x5dc,0x68(%ebp)
	jump_4bb81:
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_wander)	/* 0x04BB8C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x2c,%esp
		mov    %eax,%edi
		testb  $0x10,0xf(%eax)
		je     jump_4bbef
		mov    0x5c(%edi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		add    %eax,%edx
		xor    %eax,%eax
		mov    0x8(%edx),%al
		cmp    $0x32,%eax
		jne    jump_4bbcd
		mov    %edi,%eax
		call   ac_process_wander_and_fly
	jump_4bbcd:
		mov    %edi,%edx
		xor    %eax,%eax
		xor    %ebx,%ebx
		mov    0x54(%edi),%ax
		call   ac_conditional_command_state_true
		test   %al,%al
		je     jump_4bfe1
		movw   $0x0,0xa(%edi)
		jmp    jump_4bfe1
	jump_4bbef:
		testb  $0x8,0x46(%edi)
		je     jump_4bbfc
		mov    %edi,%eax
		call   ac_set_person_animmode_walk
	jump_4bbfc:
		xor    %eax,%eax
		mov    0x6c(%edi),%al
		cmp    $0xe,%eax
		je     jump_4bc0b
		cmp    $0xf,%eax
		jne    jump_4bc84
	jump_4bc0b:
		mov    %edi,%eax
		xor    %edx,%edx
		call   ac_gun_out_anim
		xor    %edx,%edx
		mov    0x8(%edi),%dl
		mov    %al,0x6c(%edi)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%edi),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		xor    %edx,%edx
		dec    %eax
		mov    0x8(%edi),%dl
		mov    %ax,0x26(%edi)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%edi),%al
		add    %eax,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    0x57(%edi),%al
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		mov    %ax,0x24(%edi)
	jump_4bc84:
		cmpb   $0x0,0x7d(%edi)
		jne    jump_4bfe1
		mov    0xc(%edi),%bl
		xor    %eax,%eax
		or     $0x4,%bl
		mov    0x57(%edi),%al
		mov    %bl,0xc(%edi)
		mov    data_15335a(,%eax,4),%eax
		sar    $0x10,%eax
		mov    %eax,0x2c(%edi)
		xor    %eax,%eax
		mov    0x57(%edi),%al
		mov    EXPORT_SYMBOL(angle_direction)(,%eax,4),%eax
		sar    $0x10,%eax
		mov    %eax,0x34(%edi)
		mov    %edi,%eax
		call   ac_person_move
		test   %ax,%ax
		je     jump_4bd73
		testb  $0x40,0x47(%edi)
		je     jump_4bd0b
		mov    EXPORT_SYMBOL(word_1AA38E),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    game_col_vects_list,%edx
		mov    0x2(%edx,%eax,2),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		testb  $0x8,0xd(%edx,%eax,8)
		je     jump_4bd6f
	jump_4bd0b:
		mov    0x57(%edi),%al
		mov    0x57(%edi),%ch
		xor    %edx,%edx
		inc    %ch
		add    $0x9,%al
		mov    %ch,0x57(%edi)
		and    $0x7,%al
		mov    0x8(%edi),%dl
		mov    %al,0x57(%edi)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%edi),%al
		add    %eax,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    0x57(%edi),%al
		add    %eax,%edx
		mov    nstart_ani,%eax
		mov    (%eax,%edx,2),%ax
		mov    %ax,0x24(%edi)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3,%al
		add    $0x6,%eax
		mov    %ax,0x68(%edi)
	jump_4bd6f:
		andb   $0xbf,0x47(%edi)
	jump_4bd73:
		testb  $0x2,0xc(%edi)
		jne    jump_4bfe1
		mov    $0x1,%ebx
		xor    %eax,%eax
		mov    %edi,%edx
		mov    0x54(%edi),%ax
		call   ac_conditional_command_state_true
		test   %al,%al
		je     jump_4bd99
		movw   $0x0,0xa(%edi)
	jump_4bd99:
		mov    EXPORT_SYMBOL(fifties_per_gameturn),%ax
		sub    %ax,0x28(%edi)
		mov    0x26(%edi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_4bdca
		mov    0x2a(%edi),%ax
		mov    %ax,0x28(%edi)
		xor    %eax,%eax
		mov    frame,%edx
		mov    0x24(%edi),%ax
		mov    0x6(%edx,%eax,8),%ax
		mov    %ax,0x24(%edi)
	jump_4bdca:
		mov    0x68(%edi),%ax
		movswl %ax,%edx
		dec    %eax
		mov    %ax,0x68(%edi)
		test   %edx,%edx
		jge    jump_4bfe1
		xor    %ah,%ah
		mov    0x57(%edi),%al
		mov    %eax,0x28(%esp)
		call   ac_LbRandomAnyShort
		mov    %eax,%edx
		xor    %ah,%dh
		and    $0x7,%dl
		mov    0x6a(%edi),%ax
		add    %edx,%eax
		mov    0x20(%edi),%edx
		mov    %ax,0x68(%edi)
		sar    $0x10,%edx
		mov    0x18(%edi),%eax
		shl    $0x7,%edx
		sar    $0x10,%eax
		add    %eax,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%ecx
		add    %eax,%eax
		add    %eax,%ecx
		mov    0xf(%ecx),%dl
		xor    %ebx,%ebx
		test   $0x10,%dl
		je     jump_4be73
		xor    %edx,%edx
		xor    %eax,%eax
		mov    0xf(%ecx),%dl
		mov    0x57(%edi),%al
		sar    $0x5,%edx
		sub    %edx,%eax
		cmp    $0x4,%eax
		jle    jump_4be42
		sub    $0x8,%eax
	jump_4be42:
		cmp    $0xfffffffc,%eax
		jge    jump_4be4a
		add    $0x8,%eax
	jump_4be4a:
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0x2,%eax
		jg     jump_4be61
		xor    %edx,%edx
		mov    0xf(%ecx),%dl
		inc    %ebx
		sar    $0x5,%edx
		mov    %dl,-0x1(%esp,%ebx,1)
	jump_4be61:
		cmp    $0x1,%eax
		jg     jump_4be73
		xor    %eax,%eax
		mov    0xf(%ecx),%al
		inc    %ebx
		sar    $0x5,%eax
		mov    %al,-0x1(%esp,%ebx,1)
	jump_4be73:
		test   %ebx,%ebx
		jne    jump_4bf46
		movl   $0xffffffff,0x24(%esp)
		mov    $0x1,%ebp
		mov    $0xffffffff,%esi
		jmp    jump_4bead
	jump_4be8f:
		mov    0x24(%esp),%ecx
		inc    %ecx
		mov    %ecx,0x24(%esp)
		cmp    %ecx,%ebp
		jl     jump_4bf46
		mov    $0xffffffff,%esi
		jmp    jump_4bead
	jump_4bea7:
		inc    %esi
		cmp    $0x1,%esi
		jg     jump_4be8f
	jump_4bead:
		mov    0x18(%edi),%edx
		mov    0x24(%esp),%eax
		sar    $0x10,%edx
		add    %eax,%edx
		test   %edx,%edx
		jl     jump_4bea7
		cmp    $0x80,%edx
		jge    jump_4bea7
		mov    0x20(%edi),%eax
		sar    $0x10,%eax
		add    %esi,%eax
		test   %eax,%eax
		jl     jump_4bea7
		cmp    $0x80,%eax
		jge    jump_4bea7
		shl    $0x7,%eax
		add    %edx,%eax
		imul   $0x12,%eax,%ecx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %eax,%ecx
		testb  $0x10,0xf(%ecx)
		je     jump_4bea7
		xor    %edx,%edx
		xor    %eax,%eax
		mov    0xf(%ecx),%dl
		mov    0x57(%edi),%al
		sar    $0x5,%edx
		sub    %edx,%eax
		cmp    $0x4,%eax
		jle    jump_4bf04
		sub    $0x8,%eax
	jump_4bf04:
		cmp    $0xfffffffc,%eax
		jge    jump_4bf0c
		add    $0x8,%eax
	jump_4bf0c:
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0x2,%eax
		jg     jump_4bf2b
		xor    %edx,%edx
		mov    0xf(%ecx),%dl
		sar    $0x5,%edx
		mov    %edx,0x20(%esp)
		inc    %ebx
		mov    0x20(%esp),%dl
		mov    %dl,-0x1(%esp,%ebx,1)
	jump_4bf2b:
		cmp    $0x1,%eax
		jg     jump_4bea7
		xor    %eax,%eax
		mov    0xf(%ecx),%al
		inc    %ebx
		sar    $0x5,%eax
		mov    %al,-0x1(%esp,%ebx,1)
		jmp    jump_4bea7
	jump_4bf46:
		test   %ebx,%ebx
		jne    jump_4bf9b
		xor    %eax,%eax
		mov    gameturn,%edx
		mov    0x16(%edi),%ax
		add    %eax,%edx
		test   $0x3,%dl
		je     jump_4bf83
		jmp    jump_4bfb4
	jump_4bf5f:
		mov    0x57(%edi),%cl
		inc    %cl
		mov    %cl,0x57(%edi)
		mov    %cl,%ch
		and    $0x7,%ch
		mov    %ch,0x57(%edi)
		jmp    jump_4bfb4
	jump_4bf71:
		mov    0x57(%edi),%bl
		dec    %bl
		mov    %bl,0x57(%edi)
		mov    %bl,%bh
		and    $0x7,%bh
		mov    %bh,0x57(%edi)
		jmp    jump_4bfb4
	jump_4bf83:
		mov    gameturn,%edx
		shr    %edx
		add    %edx,%eax
		and    $0xf,%eax
		test   %eax,%eax
		jbe    jump_4bf5f
		cmp    $0x1,%eax
		je     jump_4bf71
		jmp    jump_4bfb4
	jump_4bf9b:
		xor    %edx,%edx
		call   ac_LbRandomAnyShort
		mov    %ax,%dx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    (%esp,%edx,1),%al
		and    $0x7,%al
		mov    %al,0x57(%edi)
	jump_4bfb4:
		xor    %edx,%edx
		xor    %eax,%eax
		mov    0x28(%esp),%dx
		mov    0x57(%edi),%al
		cmp    %eax,%edx
		je     jump_4bfe1
		xor    %edx,%edx
		mov    0x26(%edi),%dx
		add    %edx,%eax
		lea    0x0(,%eax,2),%edx
		mov    nstart_ani,%eax
		mov    0x2(%edx,%eax,1),%ax
		mov    %ax,0x24(%edi)
	jump_4bfe1:
		add    $0x2c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret

vtable_4bfec:
		.long   func_4c0c3
		.long   func_4c0eb
		.long   func_4c0eb
		.long   func_4c0c8


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_set_angle_to_avoid_group)	/* 0x04BFFC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    %eax,%esi
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		mov    game_commands,%edx
		shl    $0x5,%eax
		mov    0x2(%edx,%eax,1),%dx
		and    $0xffff,%edx
		mov    %esi,%eax
		xor    %ebx,%ebx
		call   ac_find_nearest_from_group
		movswl %ax,%ebx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    things,%ebx
		shl    $0x3,%eax
		add    %eax,%ebx
		mov    0x18(%esi),%edx
		mov    0x18(%ebx),%eax
		sub    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ecx
		mov    0x20(%esi),%edi
		mov    0x20(%ebx),%eax
		sub    %edi,%eax
		sar    $0x8,%ecx
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		sar    $0x8,%eax
		cmp    %eax,%ecx
		jle    jump_4c073
		sar    %eax
		lea    (%ecx,%eax,1),%edi
		jmp    jump_4c078
	jump_4c073:
		sar    %ecx
		lea    (%eax,%ecx,1),%edi
	jump_4c078:
		cmp    $0x1e00,%edi
		jge    jump_4c0cd
		mov    0x20(%esi),%ecx
		mov    0x18(%esi),%edx
		mov    0x20(%ebx),%ebp
		mov    0x18(%ebx),%eax
		sar    $0x8,%ecx
		sar    $0x8,%edx
		sar    $0x8,%ebp
		sar    $0x8,%eax
		mov    %edx,%ebx
		mov    %ebp,%edx
		call   ac_angle_between_points
		mov    %ax,(%esp)
		cwtl
		add    $0x80,%eax
		sar    $0x8,%eax
		mov    %ax,(%esp)
		cmp    $0xc00,%edi
		jge    jump_4c102
		mov    %esi,%eax
		call   ac_set_person_animmode_run
		jmp    jump_4c102


/*----------------------------------------------------------------*/
func_4c0c3:
/*----------------------------------------------------------------*/
		decb   0x57(%esi)
		jmp    func_4c0eb


/*----------------------------------------------------------------*/
func_4c0c8:
/*----------------------------------------------------------------*/
		incb   0x57(%esi)
		jmp    func_4c0eb
	jump_4c0cd:
		xor    %eax,%eax
		mov    gameturn,%ebp
		mov    0x16(%esi),%ax
		add    %ebp,%eax
		and    $0x3,%eax
		cmp    $0x3,%eax
		ja     func_4c0eb
		jmp    *%cs:vtable_4bfec(,%eax,4)


/*----------------------------------------------------------------*/
func_4c0eb:
/*----------------------------------------------------------------*/
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0xf,%al
		and    $0xffff,%eax
		sar    %eax
		add    $0x32,%eax
		mov    %ax,0x68(%esi)
	jump_4c102:
		mov    (%esp),%al
		add    $0x8,%al
		and    $0x7,%al
		xor    %edx,%edx
		mov    %al,0x57(%esi)
		xor    %eax,%eax
		mov    0x26(%esi),%dx
		mov    0x57(%esi),%al
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    0x2(%edx,%eax,2),%ax
		mov    %ax,0x24(%esi)
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_avoid_group)	/* 0x04C134 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		mov    %eax,%edx
		cmpb   $0x0,0x7d(%eax)
		jne    jump_4c20a
		xor    %eax,%eax
		mov    0x57(%edx),%al
		mov    data_15335a(,%eax,4),%eax
		sar    $0x10,%eax
		mov    %eax,0x2c(%edx)
		xor    %eax,%eax
		mov    0x57(%edx),%al
		mov    EXPORT_SYMBOL(angle_direction)(,%eax,4),%eax
		sar    $0x10,%eax
		mov    %eax,0x34(%edx)
		mov    %edx,%eax
		call   ac_person_move
		test   %ax,%ax
		je     jump_4c1a0
		mov    0x57(%edx),%al
		mov    0x57(%edx),%bl
		add    $0x9,%al
		inc    %bl
		and    $0x7,%al
		mov    %bl,0x57(%edx)
		xor    %ebx,%ebx
		mov    %al,0x57(%edx)
		xor    %eax,%eax
		mov    0x26(%edx),%bx
		mov    0x57(%edx),%al
		add    %ebx,%eax
		mov    nstart_ani,%ebx
		mov    0x2(%ebx,%eax,2),%ax
		mov    %ax,0x24(%edx)
	jump_4c1a0:
		testb  $0x2,0xc(%edx)
		jne    jump_4c20a
		mov    EXPORT_SYMBOL(fifties_per_gameturn),%ax
		sub    %ax,0x28(%edx)
		mov    0x26(%edx),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_4c1d7
		mov    0x2a(%edx),%ax
		mov    %ax,0x28(%edx)
		xor    %eax,%eax
		mov    frame,%ebx
		mov    0x24(%edx),%ax
		mov    0x6(%ebx,%eax,8),%ax
		mov    %ax,0x24(%edx)
	jump_4c1d7:
		mov    0x68(%edx),%ax
		movswl %ax,%ebx
		dec    %eax
		mov    %ax,0x68(%edx)
		test   %ebx,%ebx
		jge    jump_4c20a
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0xf,%al
		and    $0xffff,%eax
		mov    0x68(%edx),%ebx
		sar    %eax
		sar    $0x10,%ebx
		add    %ebx,%eax
		mov    %ax,0x68(%edx)
		mov    %edx,%eax
		call   ac_set_angle_to_avoid_group
	jump_4c20a:
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_get_weapon_out)	/* 0x04C210 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		mov    %eax,%ebx
		cmpb   $0x0,0x99(%eax)
		jne    jump_4c308
		mov    $0x500,%edx
		mov    %ebx,%eax
		call   ac_choose_best_weapon_for_range
		cmpb   $0x0,0x99(%ebx)
		je     jump_4c308
		xor    %edx,%edx
		mov    0x8(%ebx),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%dx
		xor    %eax,%eax
		and    $0xffff,%edx
		mov    0x57(%ebx),%al
		add    %edx,%eax
		lea    0x0(,%eax,2),%edx
		mov    nstart_ani,%eax
		mov    (%edx,%eax,1),%ax
		mov    0x24(%ebx),%dx
		sub    %eax,%edx
		mov    %ebx,%eax
		mov    %dx,0x24(%ebx)
		xor    %edx,%edx
		call   ac_gun_out_anim
		xor    %edx,%edx
		mov    0x8(%ebx),%dl
		mov    %al,0x6c(%ebx)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		add    %eax,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    0x57(%ebx),%al
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		xor    %edx,%edx
		mov    0x24(%ebx),%cx
		mov    0x8(%ebx),%dl
		add    %eax,%ecx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		mov    %cx,0x24(%ebx)
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		dec    %eax
		mov    %ax,0x26(%ebx)
	jump_4c308:
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_find_peep_in_area)	/* 0x04C374 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    %eax,(%esp)
		mov    %edx,%ebp
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(same_type_head)+2,%di
		mov    %edx,0x4(%esp)
		test   %di,%di
		je     jump_4c41e
	jump_4c397:
		xor    %edx,%edx
		mov    0x4(%esp),%dx
		cmp    $0x3e8,%edx
		jge    jump_4c41e
		xor    %edx,%edx
		mov    %di,%dx
		imul   $0xa8,%edx,%edx
		mov    things,%esi
		add    %edx,%esi
		testb  $0x2,0xc(%esi)
		jne    jump_4c408
		mov    (%esp),%edx
		mov    0x50(%esi),%al
		cmp    0x50(%edx),%al
		je     jump_4c408
		mov    (%esp),%ebx
		xor    %edx,%edx
		mov    0x50(%ebx),%dl
		imul   $0x28,%edx,%ebx
		mov    %al,%cl
		and    $0x1f,%cl
		mov    $0x1,%edx
		shl    %cl,%edx
		test   %edx,war_flags__Truce(%ebx)
		jne    jump_4c408
		mov    %ebp,%eax
		mov    0x20(%esi),%ebx
		mov    0x18(%esi),%edx
		sar    $0x8,%ebx
		sar    $0x8,%edx
		call   ac_check_person_within
		test   %al,%al
		je     jump_4c408
		mov    %edi,%eax
		jmp    jump_4c420
	jump_4c408:
		mov    0x4(%esp),%ebx
		inc    %ebx
		mov    0x10(%esi),%di
		mov    %ebx,0x4(%esp)
		test   %di,%di
		jne    jump_4c397
	jump_4c41e:
		xor    %eax,%eax
	jump_4c420:
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
find_bezier_nav_point:	/* 0x04C42C */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x10,%esp
		mov    things,%esi
		mov    %edx,%edi
		mov    %ebx,0x4(%esp)
		cwtl
		test   %eax,%eax
		jle    jump_4c453
		mov    game_object_faces,%edx
		shl    $0x5,%eax
		mov    0xc(%edx,%eax,1),%dx
		jmp    jump_4c467
	jump_4c453:
		neg    %eax
		mov    %eax,%edx
		shl    $0x2,%eax
		add    %edx,%eax
		mov    game_object_faces4,%edx
		mov    0xe(%edx,%eax,8),%dx
	jump_4c467:
		and    $0xffff,%edx
		lea    0x0(,%edx,8),%eax
		add    %eax,%edx
		mov    game_objects,%eax
		shl    $0x2,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    0xa(%eax),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		shl    $0x3,%eax
		lea    (%esi,%eax,1),%edx
		mov    %edx,%ebx
		mov    0x4c(%ebx),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jg     jump_4c4a8
		jmp    jump_4c4c6
	jump_4c4a8:
		imul   $0xa8,%eax,%eax
		lea    (%esi,%eax,1),%ebx
		mov    0x4c(%ebx),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jg     jump_4c4a8
		jmp    jump_4c4c6
	jump_4c4bd:
		imul   $0xa8,%eax,%eax
		lea    (%esi,%eax,1),%edx
	jump_4c4c6:
		mov    0x4a(%edx),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jg     jump_4c4bd
		mov    0x18(%ebx),%eax
		mov    %eax,0x8(%esp)
		mov    0x18(%edx),%eax
		mov    0x8(%esp),%ebp
		mov    %eax,0xc(%esp)
		mov    0x20(%edx),%eax
		mov    0x18(%edi),%edx
		sub    %ebp,%edx
		sar    $0x9,%edx
		imul   %edx,%edx
		mov    0x20(%ebx),%ebx
		mov    %eax,(%esp)
		mov    0x20(%edi),%eax
		sub    %ebx,%eax
		sar    $0x9,%eax
		imul   %eax,%eax
		lea    (%edx,%eax,1),%ebp
		mov    0xc(%esp),%eax
		mov    0x18(%edi),%edx
		sub    %eax,%edx
		sar    $0x9,%edx
		imul   %edx,%edx
		mov    0x20(%edi),%edi
		mov    (%esp),%eax
		sub    %eax,%edi
		mov    %edi,%eax
		sar    $0x9,%eax
		imul   %eax,%eax
		add    %edx,%eax
		cmp    %eax,%ebp
		jge    jump_4c542
		mov    0xc(%esp),%eax
		mov    0x4(%esp),%edx
		sar    $0x8,%eax
		mov    %ax,(%edx)
		mov    (%esp),%eax
		sar    $0x8,%eax
		mov    %ax,(%ecx)
		jmp    jump_4c556
	jump_4c542:
		mov    0x8(%esp),%eax
		mov    0x4(%esp),%edx
		sar    $0x8,%eax
		sar    $0x8,%ebx
		mov    %ax,(%edx)
		mov    %bx,(%ecx)
	jump_4c556:
		mov    %esi,things
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret

vtable_4c564:
		.long   func_4c8bd
		.long   func_4d9ad
		.long   func_4cdfe
		.long   func_4d03c
		.long   func_4d06f
		.long   func_4d0ee
		.long   func_4d225
		.long   func_4d2da
		.long   func_4d32c
		.long   func_4d395
		.long   func_4d3fe
		.long   func_4d450
		.long   func_4d4a9
		.long   func_4d516
		.long   func_4d547
		.long   func_4d9ad
		.long   func_4d649
		.long   func_4d594
		.long   func_4d634
		.long   func_4d9ad
		.long   func_4d009
		.long   func_4cc2d
		.long   func_4d9ad
		.long   func_4d6b4
		.long   func_4d73b
		.long   func_4ccb4
		.long   func_4d755
		.long   func_4d7ab
		.long   func_4d61f
		.long   func_4d9ad
		.long   func_4ccf9
		.long   func_4cb21
		.long   func_4cd89
		.long   func_4cc0e
		.long   func_4d4da
		.long   func_4cdfe
		.long   func_4d19d
		.long   func_4cb02
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4cf5a
		.long   func_4cf5a
		.long   func_4cf5a
		.long   func_4cf5a
		.long   func_4cf5a
		.long   func_4cf5a
		.long   func_4cf5a
		.long   func_4cf5a
		.long   func_4cf5a
		.long   func_4cf5a
		.long   func_4cf5a
		.long   func_4cf5a
		.long   func_4cf5a
		.long   func_4cf5a
		.long   func_4cf5a
		.long   func_4cf5a
		.long   func_4cf54
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4cf7b
		.long   func_4cf7b
		.long   func_4cf7b
		.long   func_4cf7b
		.long   func_4cf7b
		.long   func_4cf7b
		.long   func_4cf7b
		.long   func_4cf7b
		.long   func_4cf7b
		.long   func_4cf7b
		.long   func_4cf7b
		.long   func_4cf7b
		.long   func_4cf7b
		.long   func_4cf7b
		.long   func_4cf7b
		.long   func_4cf7b
		.long   func_4cf75
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4cee3
		.long   func_4d9ad
		.long   func_4ceff
		.long   func_4cf39
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4cd72
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4d9ad
		.long   func_4cf5a
		.long   func_4cf7b
		.long   func_4d9ad
		.long   func_4cabb
		.long   func_4cace
		.long   func_4d7da
		.long   func_4d807
		.long   func_4d57c
		.long   func_4d836
		.long   func_4d9ad
		.long   func_4cbf5
		.long   func_4cb87
		.long   func_4c9ff
		.long   func_4ca80
		.long   func_4c97a
		.long   func_4cae3
		.long   func_4d827
		.long   func_4c9ca


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_init_command)	/* 0x04C7AC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    %eax,%ebp
	jump_4c7b6:
		mov    0xd(%ebp),%ah
		and    $0xf7,%ah
		mov    0x54(%ebp),%cx
		mov    %ah,0xd(%ebp)
		xor    %eax,%eax
		mov    game_commands,%esi
		mov    %cx,%ax
		movw   $0x0,0x8e(%ebp)
		shl    $0x5,%eax
		mov    0xc(%ebp),%dl
		add    %eax,%esi
		test   $0x2,%dl
		je     jump_4c7ef
		movw   $0xd,0xa(%ebp)
		jmp    func_4d9ad
	jump_4c7ef:
		test   %cx,%cx
		je     jump_4d97b
		testb  $0x4,0x18(%esi)
		je     jump_4c826
	jump_4c7fe:
		mov    (%esi),%ax
		mov    %eax,%ecx
		mov    %ax,0x54(%ebp)
		test   %ax,%ax
		je     func_4d9ad
		xor    %eax,%eax
		mov    %cx,%ax
		mov    game_commands,%esi
		shl    $0x5,%eax
		add    %eax,%esi
		testb  $0x4,0x18(%esi)
		jne    jump_4c7fe
	jump_4c826:
		testb  $0x2,0x18(%esi)
		je     jump_4d967
		xor    %edx,%edx
		mov    (%esi),%ax
		mov    %edx,0x4(%esp)
		xor    %edx,%edx
		mov    %ax,%dx
		mov    game_commands,%edi
		shl    $0x5,%edx
		add    %edx,%edi
		mov    0x18(%edi),%dh
		mov    %ebp,(%esp)
		test   $0x4,%dh
		je     jump_4c892
	jump_4c854:
		test   %ax,%ax
		je     jump_4c892
		mov    $0x3,%ebx
		mov    (%esp),%edx
		and    $0xffff,%eax
		call   ac_conditional_command_state_true
		test   %al,%al
		je     jump_4c877
		movl   $0x1,0x4(%esp)
	jump_4c877:
		mov    (%edi),%ax
		xor    %edi,%edi
		mov    %ax,%di
		mov    %edi,%edx
		mov    game_commands,%edi
		shl    $0x5,%edx
		add    %edx,%edi
		testb  $0x4,0x18(%edi)
		jne    jump_4c854
	jump_4c892:
		cmpw   $0x0,0x4(%esp)
		jne    jump_4c89f
		mov    $0xffffffff,%eax
	jump_4c89f:
		movswl %ax,%edx
		test   %edx,%edx
		jl     jump_4d967
		movw   $0x3a,0xa(%ebp)
		mov    %ax,0x54(%ebp)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4c8bd:
/*----------------------------------------------------------------*/
		testb  $0x10,0xf(%ebp)
		je     jump_4c93d
		mov    0x5c(%ebp),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		mov    0x8(%edx,%eax,8),%al
		and    $0xff,%eax
		cmp    $0x28,%eax
		jne    jump_4c933
		mov    0x5c(%ebp),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		testb  $0x2,0xc(%edx,%eax,8)
		jne    jump_4c933
		mov    0x5c(%ebp),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %eax,%edx
		mov    things,%eax
		shl    $0x3,%edx
		movw   $0x11,0xa(%edx,%eax,1)
	jump_4c933:
		movb   $0x57,0x3f(%ebp)
		movw   $0xffff,0x66(%ebp)
	jump_4c93d:
		movw   $0x3,0xa(%ebp)
		movb   $0x57,0x3f(%ebp)
		movw   $0x270f,0x66(%ebp)
		movw   $0xa,0x68(%ebp)
		movw   $0xa,0x6a(%ebp)
		movw   $0x30,0x28(%ebp)
		movw   $0x30,0x2a(%ebp)
		movw   $0x5,0x68(%ebp)
		movw   $0x32,0x6a(%ebp)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4c97a:
/*----------------------------------------------------------------*/
		testb  $0x8,0x18(%esi)
		je     jump_4c99e
		push   $0x1
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x0
		mov    (%esi),%edx
		xor    %eax,%eax
		push   $0x64
		sar    $0x10,%edx
		call   ac_play_sample_using_heap
		jmp    jump_4c9bb
	jump_4c99e:
		push   $0x1
		mov    $0x40,%ecx
		push   $0x0
		mov    $0x7f,%ebx
		xor    %edx,%edx
		push   $0x64
		mov    %ebp,%eax
		mov    0x2(%esi),%dx
		call   ac_play_dist_sample
	jump_4c9bb:
		movw   $0x0,0xa(%ebp)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4c9ca:
/*----------------------------------------------------------------*/
		testb  $0x8,0x18(%esi)
		je     jump_4c9e2
		xor    %edx,%edx
		mov    %dx,ingame__fld_unkCA6
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_4c9e2:
		mov    0x2(%esi),%ax
		mov    %ax,ingame__fld_unkCA6
		mov    0xe(%esi),%ax
		mov    %ax,ingame__fld_unkCA8
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4c9ff:
/*----------------------------------------------------------------*/
		testb  $0x8,0x18(%esi)
		je     jump_4ca67
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(players)+0x088(%eax),%edx # players[0].DirectControl[0]
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		xor    %ebx,%ebx
		add    %edx,%eax
		mov    %bx,ingame__TrackThing
		mov    0x18(%eax),%edx
		mov    0x20(%eax),%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		mov    %dx,ingame__TrackX
		mov    %ax,ingame__TrackZ
		jmp    jump_4ca71
	jump_4ca67:
		mov    0x2(%esi),%ax
		mov    %ax,ingame__TrackThing
	jump_4ca71:
		movw   $0x0,0xa(%ebp)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4ca80:
/*----------------------------------------------------------------*/
		xor    %edx,%edx
		mov    0x50(%ebp),%dl
		mov    (%esi),%ecx
		lea    0x0(,%edx,4),%eax
		sar    $0x10,%ecx
		add    %edx,%eax
		mov    $0x1,%edx
		shl    %cl,%edx
		mov    war_flags__Truce(,%eax,8),%ebx
		not    %edx
		and    %edx,%ebx
		mov    %ebx,war_flags__Truce(,%eax,8)
		movw   $0x0,0xa(%ebp)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4cabb:
/*----------------------------------------------------------------*/
		movw   $0x0,0xa(%ebp)
		mov    %cx,0x62(%ebp)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4cace:
/*----------------------------------------------------------------*/
		movw   $0x0,0x62(%ebp)
		movw   $0x0,0xa(%ebp)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4cae3:
/*----------------------------------------------------------------*/
		testb  $0x8,0x18(%esi)
		je     jump_4caef
		andb   $0x7f,0x47(%ebp)
		jmp    jump_4caf3
	jump_4caef:
		orb    $0x80,0x47(%ebp)
	jump_4caf3:
		movw   $0x0,0xa(%ebp)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4cb02:
/*----------------------------------------------------------------*/
		testb  $0x8,0x18(%esi)
		je     jump_4cb0e
		andb   $0xf7,0xc(%ebp)
		jmp    jump_4cb12
	jump_4cb0e:
		orb    $0x8,0xc(%ebp)
	jump_4cb12:
		movw   $0x0,0xa(%ebp)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4cb21:
/*----------------------------------------------------------------*/
		testb  $0x8,0x18(%esi)
		je     jump_4cb3f
		mov    %ebp,%eax
		call   ac_on_mapwho
		test   %al,%al
		je     jump_4cb39
		mov    %ebp,%eax
		call   ac_delete_node
	jump_4cb39:
		orb    $0x1,0x47(%ebp)
		jmp    jump_4cb78
	jump_4cb3f:
		mov    0x47(%ebp),%ch
		test   $0x1,%ch
		je     jump_4cb78
		mov    %ch,%al
		and    $0xfe,%al
		mov    %al,0x47(%ebp)
		testb  $0x10,0xf(%ebp)
		jne    jump_4cb78
		xor    %eax,%eax
		mov    0x9(%ebp),%al
		cmp    $0x3,%eax
		jne    jump_4cb6d
		xor    %eax,%eax
		mov    0x50(%ebp),%al
		shl    $0x4,%eax
		incw   data_19f1a2(%eax)
	jump_4cb6d:
		xor    %eax,%eax
		mov    0x16(%ebp),%ax
		call   ac_add_node_thing
	jump_4cb78:
		movw   $0x0,0xa(%ebp)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4cb87:
/*----------------------------------------------------------------*/
		mov    (%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		mov    0x18(%esi),%bl
		add    %eax,%edx
		test   $0x8,%bl
		je     jump_4cbc5
		mov    %edx,%eax
		call   ac_on_mapwho
		test   %al,%al
		je     jump_4cbbf
		mov    %edx,%eax
		call   ac_delete_node
	jump_4cbbf:
		orb    $0x1,0x47(%edx)
		jmp    jump_4cbe6
	jump_4cbc5:
		mov    0x47(%edx),%bh
		test   $0x1,%bh
		je     jump_4cbe6
		mov    %bh,%cl
		and    $0xfe,%cl
		mov    %cl,0x47(%edx)
		testb  $0x10,0xf(%edx)
		jne    jump_4cbe6
		xor    %eax,%eax
		mov    0x16(%edx),%ax
		call   ac_add_node_thing
	jump_4cbe6:
		movw   $0x0,0xa(%ebp)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4cbf5:
/*----------------------------------------------------------------*/
		mov    $0x1,%eax
		call   ac_update_danger_music
		movw   $0x0,0xa(%ebp)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4cc0e:
/*----------------------------------------------------------------*/
		andw   $0xfe3f,0x70(%ebp)
		mov    0x70(%ebp),%bl
		or     $0xc0,%bl
		mov    %ebp,%eax
		mov    %bl,0x70(%ebp)
		call   ac_person_self_destruct
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4cc2d:
/*----------------------------------------------------------------*/
		movw   $0x33,0xa(%ebp)
		movw   $0xffff,0x66(%ebp)
		mov    (%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %eax,%edx
		mov    things,%eax
		shl    $0x3,%edx
		add    %edx,%eax
		mov    %eax,0x40(%ebp)
		mov    0x2(%esi),%ax
		mov    %ax,0x48(%ebp)
		mov    %ebp,%eax
		call   ac_get_weapon_range
		movw   $0xa,0x68(%ebp)
		movw   $0xa,0x6a(%ebp)
		sar    $0x6,%eax
		movb   $0x0,0x3f(%ebp)
		mov    %al,0x5b(%ebp)
		mov    0x4(%esi),%ax
		mov    %ax,0x9a(%ebp)
		mov    0x8(%esi),%ax
		mov    0x4c(%ebp),%di
		mov    %ax,0x9c(%ebp)
		test   %di,%di
		je     jump_4cca4
		mov    %ebp,%eax
		call   ac_remove_path
	jump_4cca4:
		mov    %ebp,%eax
		call   ac_get_weapon_out
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4ccb4:
/*----------------------------------------------------------------*/
		movw   $0x31,0xa(%ebp)
		mov    0x4c(%ebp),%cx
		movw   $0xffff,0x66(%ebp)
		test   %cx,%cx
		je     jump_4ccd0
		mov    %ebp,%eax
		call   ac_remove_path
	jump_4ccd0:
		mov    (%esi),%edx
		mov    %ebp,%eax
		sar    $0x10,%edx
		call   ac_build_navigate_path_to_face
		movb   $0x0,0x5b(%ebp)
		movw   $0xa,0x68(%ebp)
		movw   $0xa,0x6a(%ebp)
		movb   $0x0,0x3f(%ebp)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4ccf9:
/*----------------------------------------------------------------*/
		movw   $0x38,0xa(%ebp)
		movw   $0xffff,0x66(%ebp)
		movb   $0x1,0x5b(%ebp)
		movb   $0x0,0x3f(%ebp)
		mov    (%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		mov    things,%ebx
		add    %edx,%eax
		mov    0x18(%ebx,%eax,8),%eax
		sar    $0x8,%eax
		mov    %ax,0x9a(%ebp)
		mov    (%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    0x20(%ebx,%eax,8),%eax
		sar    $0x8,%eax
		mov    0x4c(%ebp),%bx
		mov    %ax,0x9c(%ebp)
		test   %bx,%bx
		je     func_4d9ad
		mov    %ebp,%eax
		call   ac_remove_path
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4cd72:
/*----------------------------------------------------------------*/
		mov    0x2(%esi),%ax
		movw   $0x3a,0xa(%ebp)
		mov    %ax,0x54(%ebp)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4cd89:
/*----------------------------------------------------------------*/
		testb  $0x10,0xf(%ebp)
		jne    func_4d9ad
		cmpw   $0x0,0x4c(%ebp)
		je     jump_4cda1
		mov    %ebp,%eax
		call   ac_remove_path
	jump_4cda1:
		mov    0x6(%esi),%ecx
		mov    0x2(%esi),%ebx
		mov    0x2(%esi),%ax
		sar    $0x10,%ecx
		neg    %eax
		sar    $0x10,%ebx
		movswl %ax,%edx
		mov    %ebp,%eax
		call   ac_build_navigate_path_to_face_xz
		movw   $0x1,0xa(%ebp)
		mov    0x4(%esi),%ax
		mov    %ax,0x9a(%ebp)
		mov    0x8(%esi),%ax
		movw   $0xffff,0x66(%ebp)
		movb   $0x0,0x3f(%ebp)
		mov    %ax,0x9c(%ebp)
		mov    0xe(%esi),%al
		movw   $0x30,0x28(%ebp)
		movw   $0x30,0x2a(%ebp)
		mov    %al,0x5b(%ebp)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4cdfe:
/*----------------------------------------------------------------*/
		testb  $0x10,0xf(%ebp)
		je     jump_4ce46
		mov    0x5c(%ebp),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %eax,%edx
		mov    things,%eax
		shl    $0x3,%edx
		add    %edx,%eax
		andb   $0xdf,0xd(%eax)
		mov    0x6(%esi),%ebx
		mov    0x2(%esi),%edx
		sar    $0x10,%ebx
		sar    $0x10,%edx
		call   ac_start_goto_vehicle
		movw   $0x2f,0xa(%ebp)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_4ce46:
		cmpw   $0x0,0x4c(%ebp)
		je     jump_4ce54
		mov    %ebp,%eax
		call   ac_remove_path
	jump_4ce54:
		mov    0xc(%esi),%eax
		sar    $0x10,%eax
		imul   %eax,%eax
		mov    0x6(%esi),%ecx
		mov    0x4(%esi),%ebx
		mov    0x2(%esi),%edx
		sar    $0x10,%ecx
		shl    $0xc,%eax
		sar    $0x10,%ebx
		push   %eax
		mov    0x14(%ebp),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		call   ac_thing_arrived_at_obj_radius
		test   %al,%al
		je     jump_4ce91
	jump_4ce82:
		movw   $0x0,0xa(%ebp)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_4ce91:
		xor    %eax,%eax
		mov    0xa(%esi),%al
		cmp    $0x23,%eax
		jne    jump_4cea2
		mov    %ebp,%eax
		call   ac_set_person_animmode_run
	jump_4cea2:
		movw   $0x1,0xa(%ebp)
		mov    0x4(%esi),%ax
		mov    %ax,0x9a(%ebp)
		mov    0x8(%esi),%ax
		movw   $0xffff,0x66(%ebp)
		movb   $0x0,0x3f(%ebp)
		mov    %ax,0x9c(%ebp)
		mov    0xe(%esi),%al
		movw   $0x30,0x28(%ebp)
		movw   $0x30,0x2a(%ebp)
		mov    %al,0x5b(%ebp)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4cee3:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    0x54(%ebp),%ax
		mov    game_commands,%edx
		shl    $0x5,%eax
		mov    (%edx,%eax,1),%ax
		mov    %ax,0x54(%ebp)
		jmp    jump_4c7b6


/*----------------------------------------------------------------*/
func_4ceff:
/*----------------------------------------------------------------*/
		push   $0xa
		mov    $0x384,%ecx
		mov    0x6(%esi),%ebx
		mov    0x4(%esi),%edx
		mov    0x2(%esi),%eax
		sar    $0x10,%ebx
		sar    $0x10,%edx
		sar    $0x10,%eax
		call   ac_add_static
		xor    %eax,%eax
		mov    0x54(%ebp),%ax
		mov    game_commands,%edx
		shl    $0x5,%eax
		mov    (%edx,%eax,1),%ax
		mov    %ax,0x54(%ebp)
		jmp    jump_4c7b6


/*----------------------------------------------------------------*/
func_4cf39:
/*----------------------------------------------------------------*/
		mov    0x12(%esi),%ax
		movw   $0x5,0xa(%ebp)
		movb   $0x0,0x3f(%ebp)
		mov    %ax,0x66(%ebp)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4cf54:
/*----------------------------------------------------------------*/
		movw   $0x0,0xe(%esi)


/*----------------------------------------------------------------*/
func_4cf5a:
/*----------------------------------------------------------------*/
		movw   $0x5,0xa(%ebp)
		mov    0xa(%esi),%al
		movw   $0xffff,0x66(%ebp)
		mov    %al,0x3f(%ebp)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4cf75:
/*----------------------------------------------------------------*/
		movw   $0x0,0xe(%esi)


/*----------------------------------------------------------------*/
func_4cf7b:
/*----------------------------------------------------------------*/
		testb  $0x10,0xf(%ebp)
		je     jump_4cfd6
		mov    0x5c(%ebp),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %eax,%edx
		mov    things,%eax
		shl    $0x3,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x8(%eax),%dl
		cmp    $0x28,%edx
		jne    jump_4cfb5
		testb  $0x2,0xc(%eax)
		jne    jump_4cfb5
		movw   $0x11,0xa(%eax)
	jump_4cfb5:
		movw   $0x3,0xa(%ebp)
		mov    0xa(%esi),%al
		movw   $0xffff,0x66(%ebp)
		movw   $0xffff,0x68(%ebp)
		mov    %al,0x3f(%ebp)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_4cfd6:
		movw   $0x3,0xa(%ebp)
		mov    0xa(%esi),%al
		movw   $0xffff,0x66(%ebp)
		movw   $0xa,0x68(%ebp)
		movw   $0xa,0x6a(%ebp)
		movw   $0x30,0x28(%ebp)
		movw   $0x30,0x2a(%ebp)
		mov    %al,0x3f(%ebp)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4d009:
/*----------------------------------------------------------------*/
		movw   $0x39,0xa(%ebp)
		mov    0xa(%esi),%al
		movw   $0xffff,0x66(%ebp)
		movw   $0x5,0x68(%ebp)
		movw   $0x5,0x6a(%ebp)
		movw   $0x30,0x28(%ebp)
		movw   $0x30,0x2a(%ebp)
		mov    %al,0x3f(%ebp)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4d03c:
/*----------------------------------------------------------------*/
		movw   $0x10,0xa(%ebp)
		movw   $0xffff,0x66(%ebp)
		mov    0x2(%esi),%ax
		mov    %ax,0x48(%ebp)
		mov    0xe(%esi),%al
		movw   $0x32,0x68(%ebp)
		movw   $0x32,0x6a(%ebp)
		movb   $0x0,0x3f(%ebp)
		mov    %al,0x5b(%ebp)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4d06f:
/*----------------------------------------------------------------*/
		mov    0x47(%ebp),%bh
		and    $0x7f,%bh
		mov    $0x500,%edx
		mov    %bh,%cl
		mov    %bh,0x47(%ebp)
		and    $0x7f,%cl
		mov    %ebp,%eax
		mov    %cl,0x47(%ebp)
		call   ac_check_weapon
		movw   $0x1b,0xa(%ebp)
		movw   $0xffff,0x66(%ebp)
		mov    (%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		add    %eax,%edx
		mov    %edx,0x40(%ebp)
		mov    0x2(%esi),%ax
		mov    %ax,0x48(%ebp)
		mov    %ebp,%eax
		call   ac_get_weapon_range
		movw   $0xa,0x68(%ebp)
		sar    $0x6,%eax
		movw   $0xa,0x6a(%ebp)
		mov    %al,0x5b(%ebp)
		mov    %ebp,%eax
		movb   $0x0,0x3f(%ebp)
		call   ac_get_weapon_out
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4d0ee:
/*----------------------------------------------------------------*/
		mov    0x47(%ebp),%ah
		xor    %ebx,%ebx
		and    $0x7f,%ah
		xor    %edx,%edx
		mov    %ah,0x47(%ebp)
		mov    %ebp,%eax
		mov    0x2(%esi),%dx
		call   ac_find_nearest_from_group
		mov    %ax,0x48(%ebp)
		test   %ax,%ax
		je     jump_4d189
		mov    $0x500,%edx
		mov    %ebp,%eax
		call   ac_check_weapon
		mov    0x5c(%ebp),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %eax,%edx
		mov    things,%eax
		shl    $0x3,%edx
		orb    $0x20,0xd(%edx,%eax,1)
		mov    0x46(%ebp),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		movw   $0x1b,0xa(%ebp)
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		movw   $0xffff,0x66(%ebp)
		add    %eax,%edx
		mov    %ebp,%eax
		mov    %edx,0x40(%ebp)
		call   ac_get_weapon_range
		movw   $0xa,0x68(%ebp)
		movw   $0xa,0x6a(%ebp)
		sar    $0x6,%eax
		movb   $0x0,0x3f(%ebp)
		mov    %al,0x5b(%ebp)
		jmp    jump_4d18d
	jump_4d189:
		mov    %ax,0xa(%ebp)
	jump_4d18d:
		mov    %ebp,%eax
		call   ac_get_weapon_out
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4d19d:
/*----------------------------------------------------------------*/
		mov    0x47(%ebp),%dh
		and    $0x7f,%dh
		mov    %ebp,%eax
		mov    %dh,0x47(%ebp)
		mov    %esi,%edx
		call   ac_find_peep_in_area
		mov    %ax,0x48(%ebp)
		test   %ax,%ax
		je     jump_4d211
		mov    $0x500,%edx
		mov    %ebp,%eax
		call   ac_check_weapon
		mov    0x46(%ebp),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		movw   $0x1b,0xa(%ebp)
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		movw   $0xffff,0x66(%ebp)
		add    %eax,%edx
		mov    %ebp,%eax
		mov    %edx,0x40(%ebp)
		call   ac_get_weapon_range
		movw   $0xa,0x68(%ebp)
		movw   $0xa,0x6a(%ebp)
		sar    $0x6,%eax
		movb   $0x0,0x3f(%ebp)
		mov    %al,0x5b(%ebp)
		jmp    jump_4d215
	jump_4d211:
		mov    %ax,0xa(%ebp)
	jump_4d215:
		mov    %ebp,%eax
		call   ac_get_weapon_out
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4d225:
/*----------------------------------------------------------------*/
		mov    0x47(%ebp),%al
		xor    %ebx,%ebx
		and    $0x7f,%al
		xor    %edx,%edx
		mov    %al,0x47(%ebp)
		mov    %ebp,%eax
		mov    0x2(%esi),%dx
		call   ac_find_nearest_from_group
		mov    %ax,0x48(%ebp)
		mov    0x50(%ebp),%al
		xor    %edx,%edx
		and    $0x1f,%al
		mov    %al,%dl
		mov    (%esi),%ecx
		lea    0x0(,%edx,4),%eax
		sar    $0x10,%ecx
		add    %edx,%eax
		mov    $0x1,%edx
		shl    %cl,%edx
		or     %edx,EXPORT_SYMBOL(war_flags)(,%eax,8)
		mov    0x48(%ebp),%bx
		test   %bx,%bx
		je     jump_4d2c6
		mov    $0x500,%edx
		mov    %ebp,%eax
		call   ac_check_weapon
		mov    0x46(%ebp),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %eax,%edx
		mov    things,%eax
		shl    $0x3,%edx
		movw   $0x1b,0xa(%ebp)
		add    %edx,%eax
		mov    %eax,0x40(%ebp)
		mov    %ebp,%eax
		movw   $0xffff,0x66(%ebp)
		call   ac_get_weapon_range
		movw   $0xa,0x68(%ebp)
		movw   $0xa,0x6a(%ebp)
		sar    $0x6,%eax
		movb   $0x0,0x3f(%ebp)
		mov    %al,0x5b(%ebp)
		jmp    jump_4d2ca
	jump_4d2c6:
		mov    %bx,0xa(%ebp)
	jump_4d2ca:
		mov    %ebp,%eax
		call   ac_get_weapon_out
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4d2da:
/*----------------------------------------------------------------*/
		movw   $0x28,0xa(%ebp)
		movw   $0xffff,0x66(%ebp)
		mov    (%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		add    %eax,%edx
		mov    %edx,0x40(%ebp)
		mov    0x2(%esi),%ax
		movb   $0xa,0x5b(%ebp)
		movw   $0xa,0x68(%ebp)
		movw   $0xa,0x6a(%ebp)
		movb   $0x0,0x3f(%ebp)
		mov    %ax,0x48(%ebp)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4d32c:
/*----------------------------------------------------------------*/
		mov    $0x1,%ebx
		xor    %edx,%edx
		mov    %ebp,%eax
		mov    0x2(%esi),%dx
		call   ac_find_nearest_from_group
		mov    %ax,0x48(%ebp)
		test   %ax,%ax
		je     func_4d9ad
		mov    0x46(%ebp),%edx
		movw   $0x28,0xa(%ebp)
		sar    $0x10,%edx
		movw   $0xffff,0x66(%ebp)
		lea    0x0(,%edx,4),%eax
		movb   $0xa,0x5b(%ebp)
		add    %edx,%eax
		movw   $0xa,0x68(%ebp)
		shl    $0x2,%eax
		movw   $0xa,0x6a(%ebp)
		add    %eax,%edx
		mov    things,%eax
		shl    $0x3,%edx
		movb   $0x0,0x3f(%ebp)
		add    %edx,%eax
		mov    %eax,0x40(%ebp)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4d395:
/*----------------------------------------------------------------*/
		mov    $0x1,%ebx
		xor    %edx,%edx
		mov    %ebp,%eax
		mov    0x2(%esi),%dx
		call   ac_find_nearest_from_group
		mov    %ax,0x48(%ebp)
		test   %ax,%ax
		je     func_4d9ad
		mov    0x46(%ebp),%edx
		movw   $0x28,0xa(%ebp)
		sar    $0x10,%edx
		movw   $0xffff,0x66(%ebp)
		lea    0x0(,%edx,4),%eax
		movb   $0xa,0x5b(%ebp)
		add    %edx,%eax
		movw   $0xa,0x68(%ebp)
		shl    $0x2,%eax
		movw   $0xa,0x6a(%ebp)
		add    %eax,%edx
		mov    things,%eax
		shl    $0x3,%edx
		movb   $0x0,0x3f(%ebp)
		add    %edx,%eax
		mov    %eax,0x40(%ebp)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4d3fe:
/*----------------------------------------------------------------*/
		movw   $0x1c,0xa(%ebp)
		movw   $0xffff,0x66(%ebp)
		mov    (%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		add    %eax,%edx
		mov    %edx,0x40(%ebp)
		mov    0x2(%esi),%ax
		movb   $0x2,0x5b(%ebp)
		movw   $0x14,0x68(%ebp)
		movw   $0x14,0x6a(%ebp)
		movb   $0x0,0x3f(%ebp)
		mov    %ax,0x48(%ebp)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4d450:
/*----------------------------------------------------------------*/
		movw   $0x1d,0xa(%ebp)
		movw   $0xffff,0x66(%ebp)
		mov    (%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		add    %eax,%edx
		mov    %edx,0x40(%ebp)
		mov    0x2(%esi),%ax
		movb   $0x2,0x5b(%ebp)
		movw   $0x32,0x68(%ebp)
		movw   $0x32,0x6a(%ebp)
		mov    %ax,0x48(%ebp)
		mov    %ebp,%eax
		movb   $0x0,0x3f(%ebp)
		call   ac_get_weapon_out
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4d4a9:
/*----------------------------------------------------------------*/
		movw   $0x29,0xa(%ebp)
		movw   $0xffff,0x66(%ebp)
		mov    0x2(%esi),%ax
		movb   $0x0,0x5b(%ebp)
		movw   $0x32,0x68(%ebp)
		movw   $0x32,0x6a(%ebp)
		movb   $0x0,0x3f(%ebp)
		mov    %ax,0x48(%ebp)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4d4da:
/*----------------------------------------------------------------*/
		movw   $0x2b,0xa(%ebp)
		mov    %ebp,%eax
		movw   $0xffff,0x66(%ebp)
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    0x2(%esi),%dx
		call   ac_find_nearest_from_group
		movb   $0x8,0x5b(%ebp)
		movw   $0x32,0x68(%ebp)
		movw   $0x32,0x6a(%ebp)
		movb   $0x0,0x3f(%ebp)
		mov    %ax,0x48(%ebp)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4d516:
/*----------------------------------------------------------------*/
		movw   $0x2a,0xa(%ebp)
		movw   $0xffff,0x66(%ebp)
		mov    0x2(%esi),%ax
		movb   $0x3,0x5b(%ebp)
		movw   $0x32,0x68(%ebp)
		movw   $0x32,0x6a(%ebp)
		movb   $0x0,0x3f(%ebp)
		mov    %ax,0x48(%ebp)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4d547:
/*----------------------------------------------------------------*/
		movw   $0x2b,0xa(%ebp)
		movw   $0xffff,0x66(%ebp)
		mov    0x2(%esi),%ax
		movb   $0x8,0x5b(%ebp)
		movw   $0x32,0x68(%ebp)
		movw   $0x32,0x6a(%ebp)
		movb   $0x0,0x3f(%ebp)
		mov    %ax,0x48(%ebp)
		mov    %ax,0x3c(%ebp)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4d57c:
/*----------------------------------------------------------------*/
		mov    0x2(%esi),%al
		movw   $0x0,0xa(%ebp)
		mov    %al,0x99(%ebp)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4d594:
/*----------------------------------------------------------------*/
		mov    (%esi),%edx
		sar    $0x10,%edx
		imul   $0x19,%edx,%eax # sizeof(struct WeaponDef)
		mov    EXPORT_SYMBOL(weapon_defs)+8(%eax),%ax
		mov    0x94(%ebp),%edx
		and    $0xffff,%eax
		sar    $0x10,%edx
		inc    %eax
		cmp    %eax,%edx
		jge    jump_4d5db
		mov    (%esi),%edx
		sar    $0x10,%edx
		imul   $0x19,%edx,%eax # sizeof(struct WeaponDef)
		mov    EXPORT_SYMBOL(weapon_defs)+8(%eax),%ax
		inc    %eax
		mov    %ax,0x96(%ebp)
	jump_4d5db:
		mov    0x2(%esi),%al
		mov    %al,0x99(%ebp)
		mov    0x57(%ebp),%al
		shl    $0x5,%al
		push   $0x0
		mov    %al,0x85(%ebp)
		mov    %ebp,%eax
		mov    0x6(%esi),%ecx
		mov    0x4(%esi),%ebx
		mov    0x2(%esi),%edx
		sar    $0x10,%ecx
		sar    $0x10,%ebx
		sar    $0x10,%edx
		call   ac_thing_shoot_at_point
		mov    %ebp,%eax
		call   ac_process_weapon
		andb   $0xf7,0xd(%ebp)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4d61f:
/*----------------------------------------------------------------*/
		mov    (%esi),%edx
		mov    %ebp,%eax
		sar    $0x10,%edx
		call   ac_person_init_drop
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4d634:
/*----------------------------------------------------------------*/
		mov    (%esi),%edx
		mov    %ebp,%eax
		sar    $0x10,%edx
		call   ac_person_init_drop_special
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4d649:
/*----------------------------------------------------------------*/
		movw   $0x2c,0xa(%ebp)
		mov    (%esi),%edx
		sar    $0x10,%edx
		mov    %edx,%eax
		shl    $0x4,%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(sthings),%edx
		mov    0x18(%edx,%eax,4),%eax
		sar    $0x8,%eax
		mov    %ax,0x9a(%ebp)
		mov    (%esi),%edx
		sar    $0x10,%edx
		mov    %edx,%eax
		shl    $0x4,%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(sthings),%edx
		mov    0x20(%edx,%eax,4),%eax
		sar    $0x8,%eax
		mov    %ax,0x9c(%ebp)
		mov    0x2(%esi),%ax
		movw   $0x0,0x5e(%ebp)
		movw   $0xffff,0x66(%ebp)
		movb   $0x0,0x3f(%ebp)
		movb   $0x0,0x5b(%ebp)
		mov    %ax,0x48(%ebp)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4d6b4:
/*----------------------------------------------------------------*/
		movw   $0x2d,0xa(%ebp)
		movw   $0xffff,0x66(%ebp)
		mov    0x2(%esi),%ax
		movb   $0x1,0x5b(%ebp)
		movb   $0x0,0x3f(%ebp)
		mov    %ax,0x48(%ebp)
		mov    (%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		mov    0x18(%edx,%eax,8),%eax
		sar    $0x8,%eax
		mov    %ax,0x9a(%ebp)
		mov    (%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		mov    0x20(%edx,%eax,8),%eax
		sar    $0x8,%eax
		mov    0x4c(%ebp),%si
		mov    %ax,0x9c(%ebp)
		test   %si,%si
		je     func_4d9ad
		mov    %ebp,%eax
		call   ac_remove_path
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4d73b:
/*----------------------------------------------------------------*/
		testb  $0x10,0xf(%ebp)
		je     jump_4ce82
		mov    %ebp,%eax
		call   ac_person_attempt_to_leave_vehicle
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4d755:
/*----------------------------------------------------------------*/
		mov    (%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %eax,%edx
		mov    things,%eax
		shl    $0x3,%edx
		mov    0x8(%edx,%eax,1),%al
		and    $0xff,%eax
		cmp    $0x18,%eax
		jne    jump_4d79c
		mov    (%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		orb    $0x40,0xc(%edx,%eax,8)
	jump_4d79c:
		movw   $0x0,0xa(%ebp)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4d7ab:
/*----------------------------------------------------------------*/
		mov    (%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %eax,%edx
		mov    things,%eax
		shl    $0x3,%edx
		orb    $0x80,0xc(%edx,%eax,1)
		movw   $0x0,0xa(%ebp)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4d7da:
/*----------------------------------------------------------------*/
		mov    (%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		orb    $0x8,0xd(%edx,%eax,8)
		movw   $0x0,0xa(%ebp)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4d807:
/*----------------------------------------------------------------*/
		mov    (%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %eax,%edx
		mov    things,%eax
		shl    $0x3,%edx
		andb   $0xf7,0xd(%edx,%eax,1)


/*----------------------------------------------------------------*/
func_4d827:
/*----------------------------------------------------------------*/
		movw   $0x0,0xa(%ebp)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4d836:
/*----------------------------------------------------------------*/
		mov    EXPORT_SYMBOL(peep_type_stats)+26,%ax
		mov    %ax,0x96(%ebp)
		mov    EXPORT_SYMBOL(peep_type_stats)+22,%ax
		mov    %ax,0x82(%ebp)
		mov    EXPORT_SYMBOL(peep_type_stats)+20,%ax
		mov    %ax,0x3a(%ebp)
		mov    0x70(%ebp),%ax
		shl    $0x7,%eax
		xor    %edx,%edx
		shr    $0xd,%ax
		mov    %ax,%dx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(peep_type_stats)+26,%ax
		imul   %eax,%edx
		mov    0x94(%ebp),%eax
		sar    %edx
		sar    $0x10,%eax
		add    %edx,%eax
		mov    %ax,0x96(%ebp)
		mov    0x70(%ebp),%ax
		shl    $0x4,%eax
		shr    $0xd,%ax
		xor    %edx,%edx
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(peep_type_stats)+22,%dx
		imul   %eax,%edx
		mov    0x80(%ebp),%eax
		sar    %edx
		sar    $0x10,%eax
		add    %edx,%eax
		mov    %ax,0x82(%ebp)
		mov    0x70(%ebp),%ax
		shl    $0x7,%eax
		shr    $0xd,%ax
		and    $0xffff,%eax
		lea    0x0(,%eax,2),%edx
		mov    0x70(%ebp),%ax
		xor    %ah,%ah
		and    $0x7,%al
		and    $0xffff,%eax
		add    %eax,%edx
		mov    0x70(%ebp),%ax
		shl    $0xa,%eax
		shr    $0xd,%ax
		and    $0xffff,%eax
		add    %eax,%edx
		mov    0x70(%ebp),%ax
		shl    $0x4,%eax
		shr    $0xd,%ax
		and    $0xffff,%eax
		add    %eax,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(peep_type_stats)+20,%dx
		imul   %eax,%edx
		mov    0x38(%ebp),%eax
		sar    $0x3,%edx
		sar    $0x10,%eax
		movw   $0x0,0xa(%ebp)
		add    %edx,%eax
		mov    %ax,0x3a(%ebp)
		mov    EXPORT_SYMBOL(peep_type_stats)+24,%ax
		mov    %ax,0xa0(%ebp)
		mov    %ax,0xa2(%ebp)
		mov    0x3a(%ebp),%ax
		mov    %ax,0x7e(%ebp)
		mov    0x96(%ebp),%ax
		mov    %ax,0x94(%ebp)
		mov    0x82(%ebp),%ax
		mov    %ax,0x90(%ebp)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_4d967:
		mov    0xa(%esi),%al
		cmp    $0x91,%al
		ja     func_4d9ad
		and    $0xff,%eax
		jmp    *%cs:vtable_4c564(,%eax,4)
	jump_4d97b:
		mov    0x45(%ebp),%dh
		test   $0x8,%dh
		je     func_4d9ad
		mov    %dh,%bl
		and    $0xf7,%bl
		mov    %ebp,%eax
		mov    %bl,0x45(%ebp)
		mov    EXPORT_SYMBOL(ingame)+0x930,%bh # ingame.Flags+1
		movw   $0x5,0xa(%ebp)
		and    $0xfe,%bh
		movw   $0x32,0x66(%ebp)
		mov    %bh,EXPORT_SYMBOL(ingame)+0x930 # ingame.Flags+1
		call   ac_set_peep_comcur


/*----------------------------------------------------------------*/
func_4d9ad:
/*----------------------------------------------------------------*/
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_goto_point_rel)	/* 0x04D9B8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		sub    $0x4,%esp
		mov    %eax,%ebx
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		cmp    $0xe,%eax
		je     jump_4d9cf
		cmp    $0xf,%eax
		jne    jump_4da48
	jump_4d9cf:
		mov    %ebx,%eax
		xor    %edx,%edx
		call   ac_gun_out_anim
		xor    %edx,%edx
		mov    0x8(%ebx),%dl
		mov    %al,0x6c(%ebx)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		xor    %edx,%edx
		dec    %eax
		mov    0x8(%ebx),%dl
		mov    %ax,0x26(%ebx)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		add    %eax,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    0x57(%ebx),%al
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		mov    %ax,0x24(%ebx)
	jump_4da48:
		mov    0x34(%ebx),%edx
		mov    0x2c(%ebx),%eax
		neg    %edx
		call   ac_arctan
		and    $0xffff,%eax
		add    $0x80,%eax
		and    $0x7ff,%eax
		sar    $0x8,%eax
		xor    %ecx,%ecx
		mov    %ax,(%esp)
		xor    %eax,%eax
		mov    0x57(%ebx),%cl
		mov    (%esp),%ax
		cmp    %ecx,%eax
		je     jump_4db01
		xor    %edx,%edx
		mov    0x8(%ebx),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		and    $0xffff,%eax
		add    %ecx,%eax
		mov    nstart_ani,%ecx
		mov    0x24(%ebx),%dx
		mov    (%ecx,%eax,2),%ax
		sub    %eax,%edx
		mov    %dx,0x24(%ebx)
		xor    %edx,%edx
		mov    (%esp),%al
		mov    0x8(%ebx),%dl
		mov    %al,0x57(%ebx)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		xor    %edx,%edx
		and    $0xffff,%eax
		mov    0x57(%ebx),%dl
		add    %edx,%eax
		mov    (%ecx,%eax,2),%ax
		add    %ax,0x24(%ebx)
	jump_4db01:
		xor    %edx,%edx
		mov    0x8(%ebx),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		dec    %eax
		mov    %ax,0x26(%ebx)
		mov    0xf(%ebx),%ah
		test   $0x10,%ah
		jne    jump_4dbb1
		test   $0x10,%ah
		jne    jump_4dbb1
		mov    %ebx,%eax
		call   ac_person_move
		testb  $0x2,0xc(%ebx)
		jne    jump_4dbb1
		mov    EXPORT_SYMBOL(fifties_per_gameturn),%ax
		sub    %ax,0x28(%ebx)
		mov    0x26(%ebx),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_4db80
		mov    0x2a(%ebx),%ax
		mov    %ax,0x28(%ebx)
		xor    %eax,%eax
		mov    frame,%edx
		mov    0x24(%ebx),%ax
		mov    0x6(%edx,%eax,8),%ax
		mov    %ax,0x24(%ebx)
	jump_4db80:
		testb  $0x20,0xd(%ebx)
		jne    jump_4dbab
		xor    %eax,%eax
		mov    0x54(%ebx),%ax
		mov    game_commands,%edx
		shl    $0x5,%eax
		mov    (%edx,%eax,1),%ax
		mov    $0x3,%edx
		mov    %ax,0x54(%ebx)
		mov    %ebx,%eax
		call   ac_person_init_command
		jmp    jump_4dbb1
	jump_4dbab:
		movw   $0x5,0xa(%ebx)
	jump_4dbb1:
		add    $0x4,%esp
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
do_person_gotothingindex:	/* 0x04DC14 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    %eax,%esi
		testb  $0x2,0xe(%eax)
		je     jump_4dc2b
		movw   $0x7d00,0x64(%esi)
	jump_4dc2b:
		cmpw   $0x0,0x4c(%esi)
		je     jump_4dc3e
		mov    $0x1,%edx
		mov    %esi,%eax
		call   ac_unkn_path_func_001
	jump_4dc3e:
		cmpw   $0x0,0x4c(%esi)
		je     jump_4dd3e
		mov    0x4a(%esi),%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,4),%ebx
		add    %eax,%ebx
		shl    $0x2,%ebx
		sub    %eax,%ebx
		mov    0x3e(%esi),%al
		and    $0x3,%al
		mov    0x18(%esi),%ecx
		and    $0xff,%eax
		sar    $0x8,%ecx
		mov    EXPORT_SYMBOL(my_paths)-0x01(%ebx,%eax,2),%edx
		mov    EXPORT_SYMBOL(my_paths)+0x07(%ebx,%eax,2),%eax
		mov    0x20(%esi),%ebx
		sar    $0x10,%eax
		sar    $0x8,%ebx
		sar    $0x10,%edx
		sub    %ebx,%eax
		sub    %ecx,%edx
		mov    %eax,%ebx
		mov    %edx,%eax
		mov    %edx,%ecx
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%edi
		mov    %ebx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%edi
		jle    jump_4dcb9
		mov    %ebx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebx
		mov    %ecx,%eax
		sar    %ebx
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		add    %ebx,%eax
		jmp    jump_4dccd
	jump_4dcb9:
		mov    %ecx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ecx
		mov    %ebx,%eax
		sar    %ecx
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		add    %ecx,%eax
	jump_4dccd:
		mov    0x4a(%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%ecx
		mov    %eax,%ebx
		add    %edx,%ecx
		xor    %eax,%eax
		shl    $0x2,%ecx
		mov    0x3e(%esi),%al
		sub    %edx,%ecx
		xor    %edx,%edx
		inc    %eax
		mov    EXPORT_SYMBOL(my_paths)(%ecx),%dl
		cmp    %edx,%eax
		jl     jump_4dcff
		xor    %edx,%edx
		mov    0x5b(%esi),%dl
		shl    $0x6,%edx
		jmp    jump_4dd04
	jump_4dcff:
		mov    $0x14,%edx
	jump_4dd04:
		cmp    $0x14,%edx
		jge    jump_4dd0e
		mov    $0x14,%edx
	jump_4dd0e:
		testb  $0x40,0x45(%esi)
		je     jump_4dd1c
		movw   $0x7d00,0x64(%esi)
		jmp    jump_4dd3e
	jump_4dd1c:
		cmp    %edx,%ebx
		jl     jump_4dd34
		mov    0x36(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jle    jump_4dd3a
		xor    %eax,%eax
		mov    0x64(%esi),%ax
		cmp    %eax,%ebx
		jle    jump_4dd3a
	jump_4dd34:
		movw   $0xff9c,0x66(%esi)
	jump_4dd3a:
		mov    %bx,0x64(%esi)
	jump_4dd3e:
		testb  $0x40,0x45(%esi)
		jne    jump_4ddeb
		xor    %eax,%eax
		mov    gameturn,%edx
		mov    0x16(%esi),%ax
		add    %edx,%eax
		test   $0x7,%al
		jne    jump_4ddeb
		mov    0x46(%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%ebx
		add    %edx,%ebx
		shl    $0x2,%ebx
		mov    0x20(%esi),%eax
		add    %edx,%ebx
		mov    things,%edx
		shl    $0x3,%ebx
		sar    $0x10,%eax
		add    %ebx,%edx
		mov    0x18(%esi),%ebx
		shl    $0x7,%eax
		sar    $0x10,%ebx
		add    %ebx,%eax
		lea    0x0(,%eax,8),%ebx
		mov    EXPORT_SYMBOL(game_my_big_map),%ecx
		add    %eax,%ebx
		mov    0xe(%ecx,%ebx,2),%al
		mov    %al,(%esp)
		xor    %eax,%eax
		mov    (%esp),%al
		test   %eax,%eax
		je     jump_4ddd7
		mov    0x20(%edx),%ebx
		mov    0x18(%edx),%eax
		sar    $0x10,%ebx
		sar    $0x10,%eax
		shl    $0x7,%ebx
		add    %ebx,%eax
		lea    0x0(,%eax,8),%ebx
		add    %eax,%ebx
		mov    (%esp),%al
		cmp    0xe(%ecx,%ebx,2),%al
		jne    jump_4ddd7
		mov    $0x1,%eax
		jmp    jump_4ddd9
	jump_4ddd7:
		xor    %eax,%eax
	jump_4ddd9:
		test   %ax,%ax
		je     jump_4ddeb
		mov    %esi,%eax
		movw   $0xffff,0x66(%esi)
		call   ac_remove_path
	jump_4ddeb:
		mov    0x64(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_4e0a2
		mov    0xe(%esi),%dl
		mov    0x4a(%esi),%eax
		and    $0xfd,%dl
		sar    $0x10,%eax
		mov    %dl,0xe(%esi)
		test   %eax,%eax
		jne    jump_4de66
		mov    0x46(%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%ebx
		add    %edx,%ebx
		shl    $0x2,%ebx
		add    %edx,%ebx
		mov    things,%edx
		shl    $0x3,%ebx
		add    %ebx,%edx
		testb  $0x40,0xd(%edx)
		jne    jump_4de37
		testb  $0x40,0x45(%esi)
		je     jump_4de54
	jump_4de37:
		mov    %esi,%eax
		mov    0x9a(%edx),%ebx
		xor    %ecx,%ecx
		mov    0x98(%edx),%edx
		sar    $0x10,%ebx
		sar    $0x10,%edx
		call   ac_build_navigate_path
		jmp    jump_4de5b
	jump_4de54:
		mov    %esi,%eax
		call   ac_build_navigate_path_to_person
	jump_4de5b:
		and    $0xffff,%eax
		je     jump_4e16d
	jump_4de66:
		mov    0x4a(%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%ebx
		add    %edx,%ebx
		mov    0x3e(%esi),%al
		shl    $0x2,%ebx
		and    $0x3,%al
		sub    %edx,%ebx
		and    $0xff,%eax
		mov    0x18(%esi),%edx
		mov    0x20(%esi),%edi
		sar    $0x8,%edx
		mov    EXPORT_SYMBOL(my_paths)-0x01(%ebx,%eax,2),%ecx
		mov    EXPORT_SYMBOL(my_paths)+0x07(%ebx,%eax,2),%eax
		sar    $0x8,%edi
		sar    $0x10,%eax
		sar    $0x10,%ecx
		sub    %edi,%eax
		sub    %edx,%ecx
		mov    %eax,%edi
		mov    %ecx,%eax
		imul   %ecx,%eax
		mov    %edi,%edx
		imul   %edi,%edx
		add    %edx,%eax
		call   ac_LbSqrL
		mov    %eax,%ebx
		test   %eax,%eax
		jne    jump_4dec6
		mov    $0x1,%ebx
	jump_4dec6:
		mov    0x64(%esi),%eax
		sar    $0x10,%eax
		cmp    $0xffffff9c,%eax
		jne    jump_4df45
		mov    %esi,%eax
		movw   $0x7d00,0x64(%esi)
		call   do_next_navigate_index
		test   %al,%al
		je     jump_4def0
		movw   $0x0,0x4c(%esi)
		movw   $0x0,0xa(%esi)
		jmp    jump_4df45
	jump_4def0:
		mov    0x4a(%esi),%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,4),%ebx
		add    %eax,%ebx
		shl    $0x2,%ebx
		sub    %eax,%ebx
		mov    0x3e(%esi),%al
		and    $0x3,%al
		and    $0xff,%eax
		mov    0x18(%esi),%edx
		mov    EXPORT_SYMBOL(my_paths)-0x01(%ebx,%eax,2),%ecx
		sar    $0x8,%edx
		sar    $0x10,%ecx
		sub    %edx,%ecx
		mov    %ecx,%edx
		imul   %ecx,%edx
		mov    EXPORT_SYMBOL(my_paths)+0x07(%ebx,%eax,2),%edi
		mov    0x20(%esi),%eax
		sar    $0x10,%edi
		sar    $0x8,%eax
		sub    %eax,%edi
		mov    %edi,%eax
		imul   %edi,%eax
		add    %edx,%eax
		call   ac_LbSqrL
		mov    %eax,%ebx
	jump_4df45:
		test   %ebx,%ebx
		jne    jump_4df4e
		mov    $0x1,%ebx
	jump_4df4e:
		mov    %ecx,%edx
		shl    $0x8,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %edi,%edx
		shl    $0x8,%edx
		mov    %eax,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,%edi
		mov    0x36(%esi),%eax
		sar    $0x10,%eax
		cmp    $0x10,%eax
		jge    jump_4df7d
		movw   $0xa,0x66(%esi)
		jmp    jump_4df8f
	jump_4df7d:
		mov    %eax,%ebp
		mov    %ebx,%edx
		sar    $0x4,%ebp
		mov    %ebx,%eax
		sar    $0x1f,%edx
		idiv   %ebp
		mov    %ax,0x66(%esi)
	jump_4df8f:
		mov    %ecx,0x2c(%esi)
		mov    0xd(%esi),%al
		mov    %edi,0x34(%esi)
		test   $0x20,%al
		je     jump_4dfbb
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0x2b,%eax
		jne    jump_4dfbb
		cmpl   $0x0,0x40(%esi)
		jne    jump_4e07b
		testb  $0x20,0xf(%esi)
		jne    jump_4e07b
	jump_4dfbb:
		testb  $0x8,0xe(%esi)
		je     jump_4dfde
		mov    0xc(%esi),%eax
		and    $0x20000800,%eax
		cmp    $0x20000800,%eax
		je     jump_4e07b
		cmpl   $0x0,0x40(%esi)
		jne    jump_4e07b
	jump_4dfde:
		mov    %edi,%edx
		mov    %ecx,%eax
		neg    %edx
		call   ac_arctan
		and    $0xffff,%eax
		add    $0x80,%eax
		xor    %ecx,%ecx
		and    $0x7ff,%eax
		xor    %edx,%edx
		sar    $0x8,%eax
		mov    0x57(%esi),%cl
		mov    %ax,%dx
		cmp    %ecx,%edx
		je     jump_4e07b
		xor    %edx,%edx
		mov    0x8(%esi),%dl
		lea    0x0(,%edx,4),%ebx
		sub    %edx,%ebx
		shl    $0x2,%ebx
		sub    %edx,%ebx
		xor    %edx,%edx
		mov    0x6c(%esi),%dl
		add    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%edx,%ebx,4),%dx
		and    $0xffff,%edx
		add    %ecx,%edx
		mov    nstart_ani,%ecx
		mov    0x24(%esi),%di
		sub    (%ecx,%edx,2),%di
		xor    %edx,%edx
		mov    0x8(%esi),%dl
		mov    %al,0x57(%esi)
		lea    0x0(,%edx,4),%ebx
		xor    %eax,%eax
		sub    %edx,%ebx
		mov    0x6c(%esi),%al
		shl    $0x2,%ebx
		add    %eax,%eax
		sub    %edx,%ebx
		mov    %di,0x24(%esi)
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax,%ebx,4),%dx
		xor    %eax,%eax
		mov    0x57(%esi),%al
		add    %edx,%eax
		mov    (%ecx,%eax,2),%ax
		add    %ax,0x24(%esi)
	jump_4e07b:
		xor    %eax,%eax
		mov    0x8(%esi),%al
		lea    0x0(,%eax,4),%ebx
		sub    %eax,%ebx
		shl    $0x2,%ebx
		sub    %eax,%ebx
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		add    %eax,%eax
		mov    EXPORT_SYMBOL(people_frames)(%eax,%ebx,4),%dx
		dec    %edx
		mov    %dx,0x26(%esi)
	jump_4e0a2:
		mov    0x66(%esi),%bx
		dec    %ebx
		mov    %esi,%eax
		mov    %bx,0x66(%esi)
		call   ac_person_move
		cwtl
		test   %eax,%eax
		je     jump_4e136
		testb  $0x2,0xc(%esi)
		jne    jump_4e16d
		mov    0xe(%esi),%bl
		test   $0x2,%bl
		je     jump_4e0e5
		mov    0x2c(%esi),%edx
		mov    0x34(%esi),%ebx
		movw   $0x3,0x66(%esi)
		neg    %edx
		neg    %ebx
		mov    %edx,0x2c(%esi)
		mov    %ebx,0x34(%esi)
		jmp    jump_4e136
	jump_4e0e5:
		cmpw   $0x0,EXPORT_SYMBOL(word_1AA392)
		jne    jump_4e136
		testb  $0x80,0x44(%esi)
		jne    jump_4e136
		mov    %bl,%cl
		or     $0x2,%cl
		mov    %cl,0xe(%esi)
		incb   0x5d(%esi)
		test   %eax,%eax
		jge    jump_4e11b
		mov    0x34(%esi),%eax
		sar    $0x2,%eax
		mov    0x2c(%esi),%dx
		mov    %eax,0x2c(%esi)
		movswl %dx,%eax
		neg    %eax
		sar    $0x2,%eax
		jmp    jump_4e12d
	jump_4e11b:
		mov    0x34(%esi),%eax
		mov    0x2c(%esi),%dx
		mov    %eax,0x2c(%esi)
		movswl %dx,%eax
		mov    %eax,0x34(%esi)
		neg    %eax
	jump_4e12d:
		mov    %eax,0x34(%esi)
		movw   $0x3,0x66(%esi)
	jump_4e136:
		testb  $0x2,0xc(%esi)
		jne    jump_4e16d
		mov    EXPORT_SYMBOL(fifties_per_gameturn),%ax
		sub    %ax,0x28(%esi)
		mov    0x26(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_4e16d
		mov    0x2a(%esi),%ax
		mov    %ax,0x28(%esi)
		xor    %eax,%eax
		mov    frame,%edx
		mov    0x24(%esi),%ax
		mov    0x6(%edx,%eax,8),%ax
		mov    %ax,0x24(%esi)
	jump_4e16d:
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_goto_point)	/* 0x04E178 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		mov    %eax,%esi
		testb  $0x2,0xe(%eax)
		je     jump_4e18c
		movw   $0x7d00,0x64(%esi)
	jump_4e18c:
		cmpw   $0x0,0x4c(%esi)
		je     jump_4e19f
		mov    $0x1,%edx
		mov    %esi,%eax
		call   ac_unkn_path_func_001
	jump_4e19f:
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		cmp    $0xe,%eax
		je     jump_4e1ae
		cmp    $0xf,%eax
		jne    jump_4e21a
	jump_4e1ae:
		mov    %esi,%eax
		xor    %edx,%edx
		call   ac_gun_out_anim
		mov    %al,0x6c(%esi)
		xor    %eax,%eax
		mov    0x8(%esi),%al
		lea    0x0(,%eax,4),%edi
		sub    %eax,%edi
		shl    $0x2,%edi
		sub    %eax,%edi
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		add    %eax,%eax
		mov    EXPORT_SYMBOL(people_frames)(%eax,%edi,4),%ax
		dec    %eax
		mov    %ax,0x26(%esi)
		xor    %eax,%eax
		mov    0x8(%esi),%al
		lea    0x0(,%eax,4),%edi
		sub    %eax,%edi
		shl    $0x2,%edi
		sub    %eax,%edi
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		add    %eax,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax,%edi,4),%dx
		xor    %eax,%eax
		mov    0x57(%esi),%al
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		mov    %ax,0x24(%esi)
	jump_4e21a:
		cmpw   $0x0,0x4c(%esi)
		je     jump_4e300
		mov    0x4a(%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		mov    0x3e(%esi),%al
		and    $0x3,%al
		and    $0xff,%eax
		mov    0x18(%esi),%ebx
		add    %eax,%eax
		mov    0x20(%esi),%ecx
		add    %edx,%eax
		sar    $0x8,%ebx
		mov    EXPORT_SYMBOL(my_paths)-0x01(%eax),%edx
		mov    EXPORT_SYMBOL(my_paths)+0x07(%eax),%eax
		sar    $0x8,%ecx
		sar    $0x10,%eax
		sar    $0x10,%edx
		sub    %ecx,%eax
		sub    %ebx,%edx
		mov    %eax,%ecx
		mov    %edx,%eax
		mov    %edx,%ebx
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%edi
		mov    %ecx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%edi
		jle    jump_4e290
		mov    %ecx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%edi
		mov    %ebx,%eax
		jmp    jump_4e29b
	jump_4e290:
		mov    %ebx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%edi
		mov    %ecx,%eax
	jump_4e29b:
		sar    %edi
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		add    %edi,%eax
		mov    0x4a(%esi),%edx
		sar    $0x10,%edx
		mov    %eax,%edi
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(my_paths)(%eax),%dl
		xor    %eax,%eax
		mov    0x3e(%esi),%al
		inc    %eax
		cmp    %edx,%eax
		jl     jump_4e2d9
		xor    %eax,%eax
		mov    0x5b(%esi),%al
		shl    $0x6,%eax
		cmp    $0x1e,%eax
		jge    jump_4e2de
	jump_4e2d9:
		mov    $0x1e,%eax
	jump_4e2de:
		cmp    %eax,%edi
		jl     jump_4e2f6
		mov    0x36(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jle    jump_4e2fc
		xor    %eax,%eax
		mov    0x64(%esi),%ax
		cmp    %eax,%edi
		jl     jump_4e2fc
	jump_4e2f6:
		movw   $0xff9c,0x66(%esi)
	jump_4e2fc:
		mov    %di,0x64(%esi)
	jump_4e300:
		mov    0x64(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_4e550
		mov    0xe(%esi),%dl
		mov    0x4a(%esi),%eax
		and    $0xfd,%dl
		sar    $0x10,%eax
		mov    %dl,0xe(%esi)
		test   %eax,%eax
		jne    jump_4e384
		mov    %esi,%eax
		mov    0x9a(%esi),%ebx
		mov    0x98(%esi),%edx
		xor    %ecx,%ecx
		sar    $0x10,%ebx
		sar    $0x10,%edx
		call   ac_build_navigate_path
		mov    0x4a(%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		mov    0x3e(%esi),%al
		and    $0x3,%al
		and    $0xff,%eax
		add    %eax,%eax
		mov    0x18(%esi),%ebx
		add    %edx,%eax
		sar    $0x8,%ebx
		mov    EXPORT_SYMBOL(my_paths)-0x01(%eax),%edx
		mov    EXPORT_SYMBOL(my_paths)+0x07(%eax),%ecx
		sar    $0x10,%edx
		sar    $0x10,%ecx
		mov    0x20(%esi),%eax
		sub    %ebx,%edx
		sar    $0x8,%eax
		mov    %edx,%ebx
		sub    %eax,%ecx
	jump_4e384:
		mov    %ebx,%edx
		imul   %ebx,%edx
		mov    %ecx,%eax
		imul   %ecx,%eax
		add    %edx,%eax
		call   ac_LbSqrL
		mov    %eax,%edi
		test   %eax,%eax
		jne    jump_4e3a0
		mov    $0x1,%edi
	jump_4e3a0:
		mov    0x64(%esi),%eax
		sar    $0x10,%eax
		cmp    $0xffffff9c,%eax
		jne    jump_4e427
		mov    %esi,%eax
		movw   $0x7d00,0x64(%esi)
		call   do_next_navigate_index
		test   %al,%al
		je     jump_4e3ce
		movw   $0x0,0x4c(%esi)
		movw   $0x0,0xa(%esi)
		jmp    jump_4e427
	jump_4e3ce:
		mov    0x4a(%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		mov    0x3e(%esi),%al
		and    $0x3,%al
		and    $0xff,%eax
		add    %eax,%eax
		add    %edx,%eax
		mov    0x18(%esi),%ebx
		mov    EXPORT_SYMBOL(my_paths)-0x01(%eax),%edx
		sar    $0x8,%ebx
		sar    $0x10,%edx
		sub    %ebx,%edx
		mov    %edx,%ebx
		imul   %edx,%edx
		mov    0x20(%esi),%ecx
		mov    EXPORT_SYMBOL(my_paths)+0x07(%eax),%eax
		sar    $0x8,%ecx
		sar    $0x10,%eax
		sub    %ecx,%eax
		mov    %eax,%ecx
		imul   %eax,%eax
		add    %edx,%eax
		call   ac_LbSqrL
		mov    %eax,%edi
	jump_4e427:
		test   %edi,%edi
		jne    jump_4e430
		mov    $0x1,%edi
	jump_4e430:
		mov    %ebx,%edx
		shl    $0x8,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %edi
		mov    %ecx,%edx
		shl    $0x8,%edx
		mov    %eax,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %edi
		mov    %eax,%ecx
		mov    0x36(%esi),%eax
		sar    $0x10,%eax
		cmp    $0x10,%eax
		jge    jump_4e45f
		movw   $0xa,0x66(%esi)
		jmp    jump_4e471
	jump_4e45f:
		mov    %eax,%ebp
		mov    %edi,%edx
		sar    $0x4,%ebp
		mov    %edi,%eax
		sar    $0x1f,%edx
		idiv   %ebp
		mov    %ax,0x66(%esi)
	jump_4e471:
		mov    %ecx,%edx
		mov    %ebx,%eax
		mov    %ebx,0x2c(%esi)
		neg    %edx
		mov    %ecx,0x34(%esi)
		call   ac_arctan
		and    $0xffff,%eax
		add    $0x80,%eax
		and    $0x7ff,%eax
		sar    $0x8,%eax
		xor    %edx,%edx
		mov    %eax,%ecx
		xor    %eax,%eax
		mov    0x57(%esi),%dl
		mov    %cx,%ax
		cmp    %edx,%eax
		je     jump_4e529
		xor    %eax,%eax
		mov    0x8(%esi),%al
		lea    0x0(,%eax,4),%ebx
		sub    %eax,%ebx
		shl    $0x2,%ebx
		sub    %eax,%ebx
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		add    %eax,%eax
		mov    EXPORT_SYMBOL(people_frames)(%eax,%ebx,4),%ax
		and    $0xffff,%eax
		add    %eax,%edx
		lea    0x0(,%edx,2),%eax
		mov    nstart_ani,%edx
		mov    0x24(%esi),%bx
		sub    (%edx,%eax,1),%bx
		xor    %eax,%eax
		mov    0x8(%esi),%al
		mov    %bx,0x24(%esi)
		lea    0x0(,%eax,4),%ebx
		sub    %eax,%ebx
		shl    $0x2,%ebx
		sub    %eax,%ebx
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		shl    $0x2,%ebx
		add    %eax,%eax
		add    %ebx,%eax
		mov    %cl,0x57(%esi)
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%bx
		xor    %eax,%eax
		mov    %cl,%al
		add    %ebx,%eax
		mov    0x24(%esi),%cx
		mov    (%edx,%eax,2),%ax
		add    %eax,%ecx
		mov    %cx,0x24(%esi)
	jump_4e529:
		xor    %eax,%eax
		mov    0x8(%esi),%al
		lea    0x0(,%eax,4),%ebx
		sub    %eax,%ebx
		shl    $0x2,%ebx
		sub    %eax,%ebx
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		add    %eax,%eax
		mov    EXPORT_SYMBOL(people_frames)(%eax,%ebx,4),%ax
		dec    %eax
		mov    %ax,0x26(%esi)
	jump_4e550:
		mov    0x66(%esi),%di
		dec    %edi
		mov    %esi,%eax
		mov    %di,0x66(%esi)
		call   ac_person_move
		cwtl
		test   %eax,%eax
		je     jump_4e647
		testb  $0x2,0xc(%esi)
		jne    jump_4e68f
		mov    0xe(%esi),%bl
		test   $0x2,%bl
		je     jump_4e5bd
		testb  $0x1,0xf(%esi)
		je     jump_4e5a2
		testb  $0x1,gameturn
		je     jump_4e5a2
		mov    0x2c(%esi),%eax
		mov    0x34(%esi),%edx
		movw   $0x2,0x66(%esi)
		add    %eax,%eax
		add    %edx,%edx
		mov    %eax,0x2c(%esi)
		jmp    jump_4e644
	jump_4e5a2:
		mov    0x2c(%esi),%edi
		mov    0x34(%esi),%ebp
		movw   $0x3,0x66(%esi)
		neg    %edi
		neg    %ebp
		mov    %edi,0x2c(%esi)
		mov    %ebp,0x34(%esi)
		jmp    jump_4e647
	jump_4e5bd:
		cmpw   $0x0,EXPORT_SYMBOL(word_1AA392)
		jne    jump_4e647
		testb  $0x80,0x44(%esi)
		jne    jump_4e647
		mov    %bl,%cl
		or     $0x2,%cl
		mov    %cl,0xe(%esi)
		mov    0x5d(%esi),%ch
		movw   $0x3,0x66(%esi)
		inc    %ch
		mov    0xf(%esi),%dl
		mov    %ch,0x5d(%esi)
		test   $0x1,%dl
		je     jump_4e614
		testb  $0x1,gameturn
		je     jump_4e614
		mov    0x2c(%esi),%ebx
		mov    0x34(%esi),%ecx
		movw   $0x5,0x66(%esi)
		neg    %ebx
		neg    %ecx
		mov    %ebx,0x2c(%esi)
		mov    %ecx,0x34(%esi)
		jmp    jump_4e647
	jump_4e614:
		test   %eax,%eax
		jge    jump_4e632
		mov    0x34(%esi),%eax
		sar    $0x2,%eax
		mov    0x2c(%esi),%dx
		mov    %eax,0x2c(%esi)
		movswl %dx,%eax
		neg    %eax
		sar    $0x2,%eax
		mov    %eax,0x34(%esi)
		jmp    jump_4e647
	jump_4e632:
		mov    0x2c(%esi),%ax
		mov    0x34(%esi),%edx
		cwtl
		mov    %edx,0x2c(%esi)
		mov    %eax,%edx
		mov    %eax,0x34(%esi)
		neg    %edx
	jump_4e644:
		mov    %edx,0x34(%esi)
	jump_4e647:
		mov    EXPORT_SYMBOL(fifties_per_gameturn),%ax
		sub    %ax,0x28(%esi)
		mov    0x26(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_4e678
		mov    0x2a(%esi),%ax
		mov    %ax,0x28(%esi)
		xor    %eax,%eax
		mov    frame,%edx
		mov    0x24(%esi),%ax
		mov    0x6(%edx,%eax,8),%ax
		mov    %ax,0x24(%esi)
	jump_4e678:
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		test   %eax,%eax
		jne    jump_4e68f
		testb  $0x1,0x44(%esi)
		je     jump_4e68f
		mov    %esi,%eax
		call   ac_finalise_razor_wire
	jump_4e68f:
		pop    %ebp
	jump_4e690:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_wait)	/* 0x04E698 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		mov    %eax,%ecx
		testb  $0x8,0x46(%eax)
		je     jump_4e740
		mov    %ecx,%eax
		xor    %edx,%edx
		call   ac_gun_out_anim
		xor    %edx,%edx
		mov    0x8(%ecx),%dl
		mov    %al,0x6c(%ecx)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%ecx),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		xor    %edx,%edx
		dec    %eax
		mov    0x8(%ecx),%dl
		mov    %ax,0x26(%ecx)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%ecx),%al
		add    %eax,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    0x57(%ecx),%al
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		movw   $0x30,0x28(%ecx)
		movw   $0x30,0x2a(%ecx)
		mov    0x46(%ecx),%dl
		mov    %ax,0x24(%ecx)
		and    $0xf7,%dl
		mov    %ecx,%eax
		mov    %dl,0x46(%ecx)
		call   calc_person_speed
		mov    %ax,0x38(%ecx)
	jump_4e740:
		xor    %eax,%eax
		mov    0x6c(%ecx),%al
		cmp    $0x15,%eax
		je     jump_4e7cb
		xor    %eax,%eax
		mov    0x99(%ecx),%al
		test   %eax,%eax
		jne    jump_4e7cb
		xor    %edx,%edx
		mov    0x8(%ecx),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		movb   $0x15,0x6c(%ecx)
		xor    %eax,%eax
		mov    0x6c(%ecx),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		xor    %edx,%edx
		dec    %eax
		mov    0x8(%ecx),%dl
		mov    %ax,0x26(%ecx)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%ecx),%al
		add    %eax,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    0x57(%ecx),%al
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		mov    %ax,0x24(%ecx)
	jump_4e7cb:
		mov    0xc(%ecx),%dh
		and    $0xfe,%dh
		mov    0xd(%ecx),%bl
		mov    %dh,0xc(%ecx)
		test   $0x4,%bl
		jne    jump_4e7e3
		cmpw   $0x0,0x58(%ecx)
		je     jump_4e825
	jump_4e7e3:
		xor    %eax,%eax
		mov    0x6c(%ecx),%al
		cmp    $0xe,%eax
		je     jump_4e7f2
		cmp    $0xf,%eax
		jne    jump_4e843
	jump_4e7f2:
		mov    EXPORT_SYMBOL(fifties_per_gameturn),%ax
		sub    %ax,0x28(%ecx)
		mov    0x26(%ecx),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_4e843
		mov    0x2a(%ecx),%ax
		mov    %ax,0x28(%ecx)
		xor    %eax,%eax
		mov    frame,%edx
		mov    0x24(%ecx),%ax
		mov    0x6(%edx,%eax,8),%ax
		mov    %ax,0x24(%ecx)
		jmp    jump_4e843
	jump_4e825:
		xor    %eax,%eax
		mov    0x16(%ecx),%ax
		mov    gameturn,%edx
		shl    $0x5,%eax
		add    %edx,%eax
		test   $0x7f,%al
		jne    jump_4e843
		mov    %ecx,%eax
		xor    %edx,%edx
		call   ac_process_random_speech
	jump_4e843:
		testb  $0x20,0xd(%ecx)
		je     jump_4e84f
		testb  $0x8,0x45(%ecx)
		je     jump_4e872
	jump_4e84f:
		cmpw   $0x0,0x52(%ecx)
		je     jump_4e872
		mov    $0x2,%ebx
		xor    %eax,%eax
		mov    %ecx,%edx
		mov    0x54(%ecx),%ax
		call   ac_conditional_command_state_true
		test   %al,%al
		je     jump_4e872
		movw   $0x0,0xa(%ecx)
	jump_4e872:
		testb  $0x80,0xb(%ecx)
		je     jump_4e88d
		xor    %eax,%eax
		mov    frame,%edx
		mov    0x24(%ecx),%ax
		mov    0x6(%edx,%eax,8),%ax
		mov    %ax,0x24(%ecx)
	jump_4e88d:
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_dieing)	/* 0x04E894 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		mov    %eax,%edx
		movw   $0x28,0x14(%eax)
		mov    EXPORT_SYMBOL(fifties_per_gameturn),%ax
		sub    %ax,0x28(%edx)
		mov    0x26(%edx),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_4e9c9
		mov    0x2a(%edx),%ax
		mov    %ax,0x28(%edx)
		xor    %eax,%eax
		mov    0x24(%edx),%ax
		lea    0x0(,%eax,8),%ebx
		mov    frame,%eax
		xor    %ecx,%ecx
		mov    0x6(%ebx,%eax,1),%bx
		mov    %bx,%cx
		testb  $0x1,0x5(%eax,%ecx,8)
		je     jump_4e9c5
		xor    %eax,%eax
		mov    0x50(%edx),%al
		shl    $0x4,%eax
		movw   $0xd,0xa(%edx)
		decw   data_19f1a2(%eax)
		xor    %eax,%eax
		mov    0x50(%edx),%al
		shl    $0x4,%eax
		incw   data_19f1a0(%eax)
		testb  $0x8,0xe(%edx)
		je     jump_4e917
		mov    %edx,%eax
		call   stop_being_persuaded
	jump_4e917:
		mov    0xe(%edx),%bl
		movw   $0x32,0x68(%edx)
		xor    %eax,%eax
		and    $0xf7,%bl
		mov    0x6c(%edx),%al
		mov    %bl,0xe(%edx)
		cmp    $0xc,%eax
		jne    jump_4e934
		orb    $0x2,0xf(%edx)
	jump_4e934:
		xor    %eax,%eax
		mov    0x6c(%edx),%al
		cmp    $0xb,%eax
		jne    jump_4e9c9
		xor    %ebx,%ebx
		mov    0x8(%edx),%bl
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		sub    %ebx,%eax
		lea    0x0(,%eax,4),%ebx
		movb   $0x14,0x6c(%edx)
		xor    %eax,%eax
		mov    0x6c(%edx),%al
		mov    EXPORT_SYMBOL(people_frames)(%ebx,%eax,2),%ax
		xor    %ebx,%ebx
		dec    %eax
		mov    0x8(%edx),%bl
		mov    %ax,0x26(%edx)
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		sub    %ebx,%eax
		lea    0x0(,%eax,4),%ebx
		xor    %eax,%eax
		mov    0x6c(%edx),%al
		add    %eax,%eax
		add    %ebx,%eax
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%bx
		xor    %eax,%eax
		mov    0x57(%edx),%al
		add    %ebx,%eax
		lea    0x0(,%eax,2),%ebx
		mov    nstart_ani,%eax
		mov    (%ebx,%eax,1),%ax
		movb   $0x1,0x77(%edx)
		movb   $0x0,0x78(%edx)
		mov    %ax,0x24(%edx)
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_4e9c5:
		mov    %bx,0x24(%edx)
	jump_4e9c9:
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_dead)	/* 0x04EA2C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    %eax,%edi
		xor    %eax,%eax
		mov    0x3f(%edi),%al
		cmp    $0x1a,%eax
		jne    jump_4ea8e
		mov    EXPORT_SYMBOL(fifties_per_gameturn),%ax
		sub    %ax,0x28(%edi)
		mov    0x26(%edi),%eax
		sar    $0x10,%eax
		movw   $0x28,0x14(%edi)
		test   %eax,%eax
		jge    jump_4ea8e
		xor    %ebx,%ebx
		mov    0x2a(%edi),%ax
		mov    0x24(%edi),%bx
		mov    %ax,0x28(%edi)
		mov    frame,%eax
		xor    %ecx,%ecx
		mov    0x6(%eax,%ebx,8),%bx
		mov    %bx,%cx
		testb  $0x1,0x5(%eax,%ecx,8)
		je     jump_4ea8a
		mov    0xf(%edi),%dh
		movb   $0x0,0x3f(%edi)
		or     $0x2,%dh
		mov    %dh,0xf(%edi)
		jmp    jump_4ea8e
	jump_4ea8a:
		mov    %bx,0x24(%edi)
	jump_4ea8e:
		cmpb   $0x0,in_network_game
		je     jump_4e690
		testb  $0x4,unkn_flags_08
		je     jump_4e690
		testb  $0x10,0xd(%edi)
		je     jump_4e690
		xor    %esi,%esi
		jmp    jump_4eab7
	jump_4eab6:
		inc    %esi
	jump_4eab7:
		xor    %ebx,%ebx
		mov    %si,%bx
		cmp    $0x8,%ebx
		jge    jump_4e690
		mov    $0x1,%edx
		xor    %eax,%eax
		mov    %esi,%ecx
		mov    ingame__InNetGame_UNSURE,%al
		shl    %cl,%edx
		test   %edx,%eax
		je     jump_4eab6
		imul   $0x1aa,%ebx,%eax
		andb   $0xef,0xd(%edi)
		xor    %ecx,%ecx
		mov    0x16(%edi),%cx
		cmp    EXPORT_SYMBOL(players)+0x088(%eax),%ecx # players[0].DirectControl[0]
		jne    jump_4eab6
		mov    EXPORT_SYMBOL(players)+0x09C(%eax),%eax # players[0].MyAgent[0]
		mov    0x50(%eax),%al
		and    $0xff,%eax
		xor    %edx,%edx
		mov    %ebx,%eax
		call   ac_place_default_player
		jmp    jump_4eab6


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_pickup)	/* 0x04EB0C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    %eax,%esi
		mov    EXPORT_SYMBOL(fifties_per_gameturn),%ax
		sub    %ax,0x28(%esi)
		mov    0x26(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_4ed5a
		mov    0x2a(%esi),%ax
		mov    %ax,0x28(%esi)
		xor    %eax,%eax
		mov    frame,%edx
		mov    0x24(%esi),%ax
		mov    0x68(%esi),%bx
		mov    0x6(%edx,%eax,8),%ax
		dec    %ebx
		mov    %ax,0x24(%esi)
		mov    %bx,0x68(%esi)
		mov    0x66(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_4ec14
		mov    0x5c(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_4ec0e
		mov    %eax,%edi
		shl    $0x4,%edi
		sub    %eax,%edi
		mov    EXPORT_SYMBOL(sthings),%eax
		shl    $0x2,%edi
		add    %eax,%edi
		xor    %eax,%eax
		mov    0x9(%edi),%al
		cmp    $0x19,%eax
		jne    jump_4ec14
		xor    %edx,%edx
		mov    %esi,%eax
		mov    0x2c(%edi),%dx
		call   do_i_have_weapon
		test   %eax,%eax
		jne    jump_4ec0e
		push   $0x1
		push   %eax
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x45,%edx
		mov    %esi,%eax
		call   ac_play_dist_sample
		xor    %eax,%eax
		mov    0x9(%edi),%al
		cmp    $0x1a,%eax
		je     jump_4ec0e
		mov    %edi,%eax
		call   ac_delete_snode
		movb   $0x1a,0x9(%edi)
		mov    0x16(%esi),%ax
		mov    0x2c(%edi),%cx
		mov    %ax,0x32(%edi)
		test   %cx,%cx
		je     jump_4ec08
		mov    $0x1,%ebx
		mov    %esi,%eax
		mov    0x14(%edi),%ecx
		xor    %edx,%edx
		sar    $0x10,%ecx
		mov    0x2c(%edi),%dx
		call   ac_give_take_me_weapon
		mov    0x14(%edi),%eax
		sar    $0x10,%eax
		call   ac_remove_sthing
		decw   ingame__fld_unkCB7
	jump_4ec08:
		movw   $0x0,0x5e(%esi)
	jump_4ec0e:
		movw   $0x32,0x68(%esi)
	jump_4ec14:
		xor    %eax,%eax
		mov    frame,%edx
		mov    0x24(%esi),%ax
		testb  $0x1,0x5(%edx,%eax,8)
		je     jump_4ed5a
		mov    0x6d(%esi),%al
		mov    %al,0x6c(%esi)
		xor    %eax,%eax
		mov    0x8(%esi),%al
		lea    0x0(,%eax,4),%edi
		sub    %eax,%edi
		shl    $0x2,%edi
		sub    %eax,%edi
		xor    %eax,%eax
		mov    0xc(%esi),%bh
		mov    0x6c(%esi),%al
		and    $0xfe,%bh
		add    %eax,%eax
		xor    %edx,%edx
		mov    %bh,0xc(%esi)
		mov    EXPORT_SYMBOL(people_frames)(%eax,%edi,4),%dx
		xor    %eax,%eax
		mov    0x57(%esi),%al
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		mov    %ax,0x24(%esi)
		xor    %eax,%eax
		mov    0x8(%esi),%al
		lea    0x0(,%eax,4),%edi
		sub    %eax,%edi
		shl    $0x2,%edi
		sub    %eax,%edi
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		add    %eax,%eax
		mov    EXPORT_SYMBOL(people_frames)(%eax,%edi,4),%di
		dec    %edi
		mov    0x47(%esi),%cl
		mov    %di,0x26(%esi)
		test   $0x8,%cl
		je     jump_4ecb5
		mov    %cl,%dh
		movw   $0x0,0xa(%esi)
		and    $0xf7,%dh
		mov    %dh,0x47(%esi)
		jmp    jump_4ed5a
	jump_4ecb5:
		testb  $0x20,0xd(%esi)
		jne    jump_4ecd9
		cmpw   $0x0,0x54(%esi)
		je     jump_4ecd9
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		mov    game_commands,%edx
		shl    $0x5,%eax
		mov    (%edx,%eax,1),%ax
		mov    %ax,0x54(%esi)
	jump_4ecd9:
		testb  $0x10,0x47(%esi)
		je     jump_4ed3c
		mov    0x3c(%esi),%ax
		mov    %ax,0x48(%esi)
		xor    %eax,%eax
		mov    0x3c(%esi),%ax
		lea    0x0(,%eax,4),%edi
		add    %eax,%edi
		shl    $0x2,%edi
		add    %eax,%edi
		mov    things,%eax
		movw   $0x2b,0xa(%esi)
		mov    0x54(%eax,%edi,8),%ax
		xor    %ah,%ah
		and    $0x3,%al
		mov    0x54(%esi),%dx
		xor    %dh,%dh
		and    $0xffff,%eax
		and    $0x3,%dl
		and    $0xffff,%edx
		mov    EXPORT_SYMBOL(follow_dist)(%edx,%eax,4),%al
		mov    0x47(%esi),%dl
		mov    %al,0x5b(%esi)
		and    $0xef,%dl
		mov    %dl,0x47(%esi)
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_4ed3c:
		testb  $0x20,0xd(%esi)
		je     jump_4ed4e
		movw   $0x0,0xa(%esi)
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_4ed4e:
		mov    $0x6,%edx
		mov    %esi,%eax
		call   ac_person_init_command
	jump_4ed5a:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret

vtable_4ed88:
		.long   func_4ee96
		.long   func_4ee00
		.long   func_4ee00
		.long   func_4ee00
		.long   func_4efca
		.long   func_4ef7d
		.long   func_4eee3
		.long   func_4ef30


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_init_pickup)	/* 0x04EDA8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    %eax,%ebx
		mov    %edx,%edi
		testl  $0x40010202,0xc(%eax)
		jne    jump_4ee8e
		movswl %di,%edx
		mov    %edx,%eax
		shl    $0x4,%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(sthings),%esi
		shl    $0x2,%eax
		add    %eax,%esi
		mov    0x2c(%esi),%ax
		test   %ax,%ax
		je     jump_4ee08
		xor    %edx,%edx
		mov    %ax,%dx
		mov    %ebx,%eax
		mov    $0x1,%cl
		call   do_i_have_weapon
		test   %eax,%eax
		je     jump_4edf6
		xor    %cl,%cl
	jump_4edf6:
		testb  $0x20,0xd(%ebx)
		jne    jump_4f017


/*----------------------------------------------------------------*/
func_4ee00:
/*----------------------------------------------------------------*/
		test   %cl,%cl
		je     jump_4ee8e
	jump_4ee08:
		xor    %eax,%eax
		mov    0x9(%esi),%al
		cmp    $0x1a,%eax
		je     jump_4ee8e
		orb    $0x1,0xc(%ebx)
		xor    %edx,%edx
		mov    0x8(%ebx),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)+0x1A(,%eax,4),%dx
		xor    %eax,%eax
		mov    0x57(%ebx),%al
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		xor    %edx,%edx
		mov    0x8(%ebx),%dl
		mov    %ax,0x24(%ebx)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(people_frames)+0x1A(,%eax,4),%ax
		movw   $0x7,0xa(%ebx)
		movw   $0x30,0x28(%ebx)
		movw   $0x3,0x68(%ebx)
		movw   $0x30,0x2a(%ebx)
		dec    %eax
		mov    %di,0x5e(%ebx)
		mov    %ax,0x26(%ebx)
		mov    0x6c(%ebx),%al
		movb   $0xd,0x6c(%ebx)
		mov    %al,0x6d(%ebx)
	jump_4ee8e:
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4ee96:
/*----------------------------------------------------------------*/
		test   %cl,%cl
		jne    jump_4eed5
		testb  $0x20,0xa4(%ebx)
		je     jump_4eedc
		xor    %edx,%edx
		mov    %al,%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		mov    %ch,%al
		mov    data_1a63ee(%edx,%eax,1),%al
		and    $0xff,%eax
		cmp    $0x4,%eax
		je     jump_4eedc
	jump_4eed5:
		mov    $0x1,%cl
		jmp    func_4ee00
	jump_4eedc:
		xor    %cl,%cl
		jmp    func_4ee00


/*----------------------------------------------------------------*/
func_4eee3:
/*----------------------------------------------------------------*/
		test   %cl,%cl
		jne    jump_4ef22
		testb  $0x8,0xa5(%ebx)
		je     jump_4ef29
		xor    %edx,%edx
		mov    %al,%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		mov    %ch,%al
		mov    data_1a63e6(%edx,%eax,1),%al
		and    $0xff,%eax
		cmp    $0x4,%eax
		je     jump_4ef29
	jump_4ef22:
		mov    $0x1,%cl
		jmp    func_4ee00
	jump_4ef29:
		xor    %cl,%cl
		jmp    func_4ee00


/*----------------------------------------------------------------*/
func_4ef30:
/*----------------------------------------------------------------*/
		test   %cl,%cl
		jne    jump_4ef6f
		testb  $0x10,0xa5(%ebx)
		je     jump_4ef76
		xor    %edx,%edx
		mov    %al,%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		mov    %ch,%al
		mov    data_1a63ea(%edx,%eax,1),%al
		and    $0xff,%eax
		cmp    $0x4,%eax
		je     jump_4ef76
	jump_4ef6f:
		mov    $0x1,%cl
		jmp    func_4ee00
	jump_4ef76:
		xor    %cl,%cl
		jmp    func_4ee00


/*----------------------------------------------------------------*/
func_4ef7d:
/*----------------------------------------------------------------*/
		test   %cl,%cl
		jne    jump_4efbc
		testb  $0x4,0xa5(%ebx)
		je     jump_4efc3
		xor    %edx,%edx
		mov    %al,%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		mov    %ch,%al
		mov    data_1a63f6(%edx,%eax,1),%al
		and    $0xff,%eax
		cmp    $0x4,%eax
		je     jump_4efc3
	jump_4efbc:
		mov    $0x1,%cl
		jmp    func_4ee00
	jump_4efc3:
		xor    %cl,%cl
		jmp    func_4ee00


/*----------------------------------------------------------------*/
func_4efca:
/*----------------------------------------------------------------*/
		test   %cl,%cl
		jne    jump_4f009
		testb  $0x2,0xa5(%ebx)
		je     jump_4f010
		xor    %edx,%edx
		mov    %al,%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		mov    %ch,%al
		mov    data_1a63f2(%edx,%eax,1),%al
		and    $0xff,%eax
		cmp    $0x4,%eax
		je     jump_4f010
	jump_4f009:
		mov    $0x1,%cl
		jmp    func_4ee00
	jump_4f010:
		xor    %cl,%cl
		jmp    func_4ee00
	jump_4f017:
		mov    0x54(%ebx),%ch
		mov    0x2c(%esi),%dx
		xor    %eax,%eax
		and    $0x3,%ch
		mov    0x54(%ebx),%ax
		sub    $0x6,%edx
		sar    $0x2,%eax
		mov    %edx,(%esp)
		cmp    $0x7,%dx
		ja     func_4ee00
		xor    %edx,%edx
		mov    (%esp),%dx
		jmp    *%cs:vtable_4ed88(,%edx,4)


/*----------------------------------------------------------------*/
person_unkn_start_get_item:	/* 0x04F048 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x14,%esp
		mov    %eax,%ebx
		mov    %dx,0xc(%esp)
		movl   $0xffffffff,0x8(%esp)
		xor    %edx,%edx
		mov    %edx,0x10(%esp)
		mov    0xa(%esp),%edx
		sar    $0x10,%edx
		mov    %edx,%eax
		shl    $0x4,%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(sthings),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		xor    %eax,%eax
		mov    0x2c(%edx),%ax
		mov    %edx,(%esp)
		test   %eax,%eax
		je     jump_4f1ff
		xor    %eax,%eax
		mov    0x50(%ebx),%al
		mov    EXPORT_SYMBOL(same_type_head)+512(,%eax,2),%di
		test   %di,%di
		je     jump_4f186
	jump_4f0a5:
		movswl %di,%eax
		imul   $0xa8,%eax,%eax
		mov    things,%esi
		add    %eax,%esi
		testb  $0x8,0xe(%esi)
		je     jump_4f179
		testb  $0x2,0xc(%esi)
		jne    jump_4f179
		mov    (%esp),%eax
		mov    0x18(%esi),%ebx
		mov    0x18(%eax),%eax
		sub    %ebx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebx
		mov    (%esp),%eax
		mov    0x20(%esi),%ecx
		mov    0x20(%eax),%eax
		sub    %ecx,%eax
		sar    $0x8,%ebx
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		sar    $0x8,%eax
		cmp    %eax,%ebx
		jle    jump_4f0fa
		sar    %eax
		jmp    jump_4f0fc
	jump_4f0fa:
		sar    %ebx
	jump_4f0fc:
		add    %ebx,%eax
		mov    0x8(%esp),%ebp
		mov    %eax,0x4(%esp)
		cmp    %ebp,%eax
		jae    jump_4f179
		movswl %di,%eax
		imul   $0xa8,%eax,%eax
		mov    things,%ebp
		add    %eax,%ebp
		testl  $0x12004000,0xc(%ebp)
		jne    jump_4f179
		mov    0xa4(%ebp),%eax
		xor    %ebx,%ebx
		xor    %edx,%edx
		and    $0xffbfffff,%eax
	jump_4f137:
		test   %eax,%eax
		je     jump_4f148
		test   $0x1,%al
		je     jump_4f140
		inc    %ebx
	jump_4f140:
		inc    %edx
		shr    %eax
		cmp    $0x20,%edx
		jl     jump_4f137
	jump_4f148:
		xor    %eax,%eax
		mov    %bx,%ax
		cmp    $0x6,%eax
		jge    jump_4f179
		mov    (%esp),%eax
		xor    %ecx,%ecx
		mov    0x2c(%eax),%cx
		mov    $0x1,%eax
		dec    %ecx
		mov    0xa4(%ebp),%edx
		shl    %cl,%eax
		test   %edx,%eax
		jne    jump_4f179
		mov    0x4(%esp),%eax
		mov    %edi,0x10(%esp)
		mov    %eax,0x8(%esp)
	jump_4f179:
		mov    0x12(%esi),%di
		test   %di,%di
		jne    jump_4f0a5
	jump_4f186:
		mov    0x10(%esp),%ebx
		test   %bx,%bx
		je     jump_4f1ff
		xor    %edx,%edx
		mov    %bx,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		orb    $0x8,0x47(%eax)
		mov    (%esp),%edx
		movw   $0x2c,0xa(%eax)
		mov    0x18(%edx),%edx
		sar    $0x8,%edx
		mov    %dx,0x9a(%eax)
		mov    (%esp),%edx
		mov    0x20(%edx),%edx
		movw   $0xffff,0x66(%eax)
		movb   $0x0,0x3f(%eax)
		sar    $0x8,%edx
		movb   $0x0,0x5b(%eax)
		mov    %dx,0x9c(%eax)
		mov    0xc(%esp),%edx
		mov    %dx,0x48(%eax)
		mov    0x4c(%eax),%cx
		mov    %dx,0x5e(%eax)
		test   %cx,%cx
		je     jump_4f1ff
		call   ac_remove_path
	jump_4f1ff:
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
set_get_item:	/* 0x04F208 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		mov    %eax,%esi
		movswl %dx,%ebx
		movw   $0x2c,0xa(%eax)
		mov    %ebx,%eax
		shl    $0x4,%eax
		sub    %ebx,%eax
		lea    0x0(,%eax,4),%ebx
		mov    EXPORT_SYMBOL(sthings),%eax
		add    %ebx,%eax
		mov    0x18(%eax),%ebx
		sar    $0x8,%ebx
		mov    %bx,0x9a(%esi)
		mov    0x20(%eax),%eax
		movw   $0xffff,0x66(%esi)
		movb   $0x0,0x3f(%esi)
		movb   $0x0,0x5b(%esi)
		mov    %dx,0x48(%esi)
		sar    $0x8,%eax
		mov    0x4c(%esi),%bx
		mov    %ax,0x9c(%esi)
		test   %bx,%bx
		je     jump_4f267
		mov    %esi,%eax
		call   ac_remove_path
	jump_4f267:
		movswl %dx,%edx
		mov    %edx,%eax
		movw   $0x0,0x4c(%esi)
		shl    $0x4,%eax
		mov    0x44(%esi),%ebx
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(sthings),%edx
		shl    $0x2,%eax
		and    $0xfffdffbf,%ebx
		add    %eax,%edx
		mov    %ebx,0x44(%esi)
		cmpw   $0x0,0x34(%edx)
		jne    jump_4f2b4
		mov    %esi,%eax
		mov    0x9a(%esi),%ebx
		mov    0x98(%esi),%edx
		xor    %ecx,%ecx
		sar    $0x10,%ebx
		sar    $0x10,%edx
		call   ac_build_navigate_path
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_4f2b4:
		mov    0x9a(%esi),%ecx
		mov    0x98(%esi),%ebx
		mov    0x34(%edx),%ax
		sar    $0x10,%ecx
		neg    %eax
		sar    $0x10,%ebx
		movswl %ax,%edx
		mov    %esi,%eax
		call   ac_build_navigate_path_to_face_xz
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret

vtable_4f2dc:
		.long   func_4f38b
		.long   func_4f555
		.long   func_4f555
		.long   func_4f555
		.long   func_4f4f8
		.long   func_4f499
		.long   func_4f3e7
		.long   func_4f43c


/*----------------------------------------------------------------*/
do_i_have_weapon:	/* 0x04F2FC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		mov    %eax,%esi
		mov    %edx,%ecx
		test   %edx,%edx
		jne    jump_4f310
	jump_4f309:
		xor    %eax,%eax
		jmp    jump_4f58f
	jump_4f310:
		cmp    $0x1f,%edx
		jne    jump_4f326
		testb  $0xf0,0x71(%eax)
		je     jump_4f309
		mov    $0x1,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_4f326:
		testb  $0x20,0xd(%eax)
		jne    jump_4f331
		jmp    jump_4f579
	jump_4f331:
		mov    0xa4(%esi),%eax
		xor    %ebx,%ebx
		xor    %edx,%edx
		and    $0xffbfffff,%eax
	jump_4f340:
		test   %eax,%eax
		je     jump_4f355
		test   $0x1,%al
		je     jump_4f34d
		inc    %ebx
	jump_4f34d:
		inc    %edx
		shr    %eax
		cmp    $0x20,%edx
		jl     jump_4f340
	jump_4f355:
		mov    0x54(%esi),%ax
		xor    %edx,%edx
		xor    %ah,%ah
		mov    %bx,%dx
		and    $0x3,%al
		xor    %ebx,%ebx
		mov    %ax,%bx
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x1c,%al
		and    $0xffff,%eax
		lea    -0x6(%ecx),%edi
		sar    $0x2,%eax
		cmp    $0x7,%edi
		ja     func_4f555
		jmp    *%cs:vtable_4f2dc(,%edi,4)


/*----------------------------------------------------------------*/
func_4f38b:
/*----------------------------------------------------------------*/
		mov    %eax,%edi
		shl    $0x3,%eax
		add    %edi,%eax
		shl    $0x3,%eax
		sub    %edi,%eax
		add    %eax,%eax
		mov    %eax,%edi
		shl    $0x2,%eax
		sub    %edi,%eax
		mov    data_1a63ee(%ebx,%eax,1),%al
		and    $0xff,%eax
		cmp    $0x4,%eax
		jne    jump_4f3bb
		mov    $0x1,%ecx
		jmp    jump_4f58d
	jump_4f3bb:
		mov    $0x1,%eax
		dec    %ecx
		shl    %cl,%eax
		test   %eax,0xa4(%esi)
		jne    jump_4f3dd
		cmp    $0x6,%edx
		jne    jump_4f3dd
		mov    $0x1,%ecx
		mov    %ecx,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_4f3dd:
		xor    %ecx,%ecx
		mov    %ecx,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4f3e7:
/*----------------------------------------------------------------*/
		mov    %eax,%edi
		shl    $0x3,%eax
		add    %edi,%eax
		shl    $0x3,%eax
		sub    %edi,%eax
		add    %eax,%eax
		mov    %eax,%edi
		shl    $0x2,%eax
		sub    %edi,%eax
		add    %eax,%ebx
		xor    %eax,%eax
		mov    data_1a63e6(%ebx),%al
		cmp    $0x4,%eax
		jne    jump_4f418
		mov    $0x1,%ecx
		mov    %ecx,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_4f418:
		mov    $0x1,%eax
		dec    %ecx
		mov    0xa4(%esi),%edi
		shl    %cl,%eax
		test   %edi,%eax
		jne    jump_4f3dd
		cmp    $0x6,%edx
		jne    jump_4f3dd
		mov    $0x1,%ecx
		mov    %ecx,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4f43c:
/*----------------------------------------------------------------*/
		mov    %eax,%edi
		shl    $0x3,%eax
		add    %edi,%eax
		shl    $0x3,%eax
		sub    %edi,%eax
		add    %eax,%eax
		mov    %eax,%edi
		shl    $0x2,%eax
		sub    %edi,%eax
		mov    data_1a63ea(%ebx,%eax,1),%al
		and    $0xff,%eax
		cmp    $0x4,%eax
		jne    jump_4f46f
		mov    $0x1,%ecx
		mov    %ecx,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_4f46f:
		mov    $0x1,%eax
		dec    %ecx
		shl    %cl,%eax
		test   %eax,0xa4(%esi)
		jne    jump_4f3dd
		cmp    $0x6,%edx
		jne    jump_4f3dd
		mov    $0x1,%ecx
		mov    %ecx,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4f499:
/*----------------------------------------------------------------*/
		mov    %eax,%edi
		shl    $0x3,%eax
		add    %edi,%eax
		shl    $0x3,%eax
		sub    %edi,%eax
		add    %eax,%eax
		mov    %eax,%edi
		shl    $0x2,%eax
		sub    %edi,%eax
		mov    data_1a63f6(%ebx,%eax,1),%al
		and    $0xff,%eax
		cmp    $0x4,%eax
		jne    jump_4f4cc
		mov    $0x1,%ecx
		mov    %ecx,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_4f4cc:
		mov    $0x1,%eax
		dec    %ecx
		mov    0xa4(%esi),%ebp
		shl    %cl,%eax
		test   %ebp,%eax
		jne    jump_4f3dd
		cmp    $0x6,%edx
		jne    jump_4f3dd
		mov    $0x1,%ecx
		mov    %ecx,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4f4f8:
/*----------------------------------------------------------------*/
		mov    %eax,%edi
		shl    $0x3,%eax
		add    %edi,%eax
		shl    $0x3,%eax
		sub    %edi,%eax
		add    %eax,%eax
		mov    %eax,%edi
		shl    $0x2,%eax
		sub    %edi,%eax
		add    %eax,%ebx
		xor    %eax,%eax
		mov    data_1a63f2(%ebx),%al
		cmp    $0x4,%eax
		jne    jump_4f529
		mov    $0x1,%ecx
		mov    %ecx,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_4f529:
		mov    $0x1,%eax
		dec    %ecx
		mov    0xa4(%esi),%ebx
		shl    %cl,%eax
		test   %ebx,%eax
		jne    jump_4f3dd
		cmp    $0x6,%edx
		jne    jump_4f3dd
		mov    $0x1,%ecx
		mov    %ecx,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_4f555:
/*----------------------------------------------------------------*/
		mov    $0x1,%eax
		dec    %ecx
		shl    %cl,%eax
		mov    0xa4(%esi),%ebx
		mov    %eax,%ecx
		and    %ebx,%ecx
		cmp    $0x6,%edx
		jl     jump_4f58d
		mov    $0x1,%ecx
		mov    %ecx,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_4f579:
		mov    $0x1,%eax
		lea    -0x1(%edx),%ecx
		shl    %cl,%eax
		mov    0xa4(%esi),%edx
		mov    %eax,%ecx
		and    %edx,%ecx
	jump_4f58d:
		mov    %ecx,%eax
	jump_4f58f:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret

vtable_4f598:
		.long   func_4f631
		.long   func_4f834
		.long   func_4f834
		.long   func_4f834
		.long   func_4f7f0
		.long   func_4f7a8
		.long   func_4f6fc
		.long   func_4f764


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_give_take_me_weapon)	/* 0x04F5B8 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    %eax,%esi
		mov    %edx,%edi
		mov    %cx,(%esp)
		xor    %ch,%ch
		test   %edx,%edx
		je     jump_4f9ea
		cmp    $0x1f,%edx
		jne    jump_4f607
		mov    -0x2(%esp),%edx
		sar    $0x10,%edx
		mov    %edx,%eax
		shl    $0x4,%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(sthings),%edx
		mov    0x30(%edx,%eax,4),%ax
		mov    0x71(%esi),%dl
		xor    %ah,%ah
		and    $0xf,%dl
		and    $0xf,%al
		mov    %dl,0x71(%esi)
		shl    $0xc,%eax
		or     %ax,0x70(%esi)
		jmp    jump_4f9ea
	jump_4f607:
		testb  $0x20,0xd(%eax)
		jne    jump_4f850
		mov    $0x1,%eax
		lea    -0x1(%edx),%ecx
		shl    %cl,%eax
		cmp    $0x1,%ebx
		jne    jump_4f9e2
		or     %eax,0xa4(%esi)
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
func_4f631:
/*----------------------------------------------------------------*/
		mov    %eax,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		add    %bl,data_1a63ee(%eax,%ebp,1)
		xor    %edx,%edx
		mov    $0x1,%ch
		mov    data_1a63ee(%eax,%ebp,1),%dl
		lea    -0x1(%edi),%eax
		mov    %al,%cl
		mov    $0x1,%eax
		shl    %cl,%eax
		test   %edx,%edx
		jne    jump_4f845
		not    %eax
		and    %eax,0xa4(%esi)
	jump_4f674:
		test   %ebx,%ebx
		jge    jump_4f934
		test   %ch,%ch
		je     jump_4f87d
		mov    $0x1,%eax
		lea    -0x1(%edi),%ecx
		mov    0xa4(%esi),%ebx
		shl    %cl,%eax
		test   %ebx,%eax
		jne    jump_4f9ea
		testb  $0x20,0xd(%esi)
		je     jump_4f6ee
		testb  $0x8,0x45(%esi)
		jne    jump_4f6ee
		xor    %eax,%eax
		mov    $0x1,%edx
		mov    0x16(%esi),%ax
		call   ac_find_nth_weapon_held
		mov    %al,%bl
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		sar    $0x2,%eax
		mov    %eax,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		mov    %bl,data_1a638c(%edx,%eax,1)
	jump_4f6ee:
		movb   $0x0,0x99(%esi)
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
func_4f6fc:
/*----------------------------------------------------------------*/
		mov    %eax,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		add    %bl,data_1a63e6(%eax,%ebp,1)
		xor    %edx,%edx
		mov    $0x1,%ch
		mov    data_1a63e6(%eax,%ebp,1),%dl
		lea    -0x1(%edi),%eax
		mov    %al,%cl
		mov    $0x1,%eax
		shl    %cl,%eax
		test   %edx,%edx
		jne    jump_4f740
		not    %eax
		and    %eax,0xa4(%esi)
		jmp    jump_4f674
	jump_4f740:
		mov    0xa4(%esi),%ebp
		or     %eax,%ebp
		mov    -0x2(%esp),%eax
		mov    $0x26,%edx
		sar    $0x10,%eax
		mov    %ebp,0xa4(%esi)
		call   ac_stop_sample_using_heap
		jmp    jump_4f674


/*----------------------------------------------------------------*/
func_4f764:
/*----------------------------------------------------------------*/
		mov    %eax,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		add    %bl,data_1a63ea(%eax,%ebp,1)
		xor    %edx,%edx
		mov    $0x1,%ch
		mov    data_1a63ea(%eax,%ebp,1),%dl
		lea    -0x1(%edi),%eax
		mov    %al,%cl
		mov    $0x1,%eax
		shl    %cl,%eax
		test   %edx,%edx
		jne    jump_4f740
		not    %eax
		and    %eax,0xa4(%esi)
		jmp    jump_4f674


/*----------------------------------------------------------------*/
func_4f7a8:
/*----------------------------------------------------------------*/
		mov    %eax,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    $0x1,%ch
		mov    data_1a63f6(%eax,%ebp,1),%cl
		add    %bl,%cl
		xor    %edx,%edx
		mov    %cl,data_1a63f6(%eax,%ebp,1)
		lea    -0x1(%edi),%eax
		mov    %cl,%dl
		mov    %al,%cl
		mov    $0x1,%eax
		shl    %cl,%eax
		test   %edx,%edx
		jne    jump_4f845
		not    %eax
		and    %eax,0xa4(%esi)
		jmp    jump_4f674


/*----------------------------------------------------------------*/
func_4f7f0:
/*----------------------------------------------------------------*/
		mov    %eax,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		add    %bl,data_1a63f2(%eax,%ebp,1)
		xor    %edx,%edx
		mov    $0x1,%ch
		mov    data_1a63f2(%eax,%ebp,1),%dl
		lea    -0x1(%edi),%eax
		mov    %al,%cl
		mov    $0x1,%eax
		shl    %cl,%eax
		test   %edx,%edx
		jne    jump_4f845
	jump_4f827:
		not    %eax
		and    %eax,0xa4(%esi)
		jmp    jump_4f674


/*----------------------------------------------------------------*/
func_4f834:
/*----------------------------------------------------------------*/
		lea    -0x1(%edi),%eax
		mov    %al,%cl
		mov    $0x1,%eax
		shl    %cl,%eax
		cmp    $0x1,%ebx
		jne    jump_4f827
	jump_4f845:
		or     %eax,0xa4(%esi)
		jmp    jump_4f674
	jump_4f850:
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		movzwl %ax,%ebp
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x1c,%al
		and    $0xffff,%eax
		sub    $0x6,%edx
		sar    $0x2,%eax
		cmp    $0x7,%edx
		ja     func_4f834
		shl    $0x2,%edx
		jmp    *%cs:vtable_4f598(%edx)
	jump_4f87d:
		testb  $0x20,0xd(%esi)
		je     jump_4f916
		testb  $0x8,0x45(%esi)
		jne    jump_4f916
		xor    %edx,%edx
		mov    0x54(%esi),%dx
		sar    $0x2,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		mov    data_1a638c(%edx,%eax,1),%al
		and    $0xff,%eax
		cmp    %eax,%edi
		jne    jump_4f916
		xor    %eax,%eax
		mov    $0x1,%edx
		mov    0x16(%esi),%ax
		call   ac_find_nth_weapon_held
		mov    %al,%dl
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		sar    $0x2,%eax
		mov    %eax,%ebx
		shl    $0x3,%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		sub    %ebx,%eax
		add    %eax,%eax
		mov    %eax,%ebx
		shl    $0x2,%eax
		sub    %ebx,%eax
		mov    %eax,%ebx
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		mov    %dl,data_1a638c(%ebx,%eax,1)
	jump_4f916:
		xor    %eax,%eax
		mov    0x99(%esi),%al
		cmp    %edi,%eax
		jne    jump_4f9ea
		movb   $0x0,0x99(%esi)
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_4f934:
		jle    jump_4f9ea
		testb  $0x20,0xd(%esi)
		je     jump_4f9ea
		testb  $0x8,0x45(%esi)
		jne    jump_4f9ea
		xor    %eax,%eax
		mov    0x99(%esi),%al
		test   %eax,%eax
		jne    jump_4f9ea
		mov    0x54(%esi),%ax
		sar    $0x2,%eax
		mov    %eax,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		mov    data_1a638c(%edx,%eax,1),%al
		and    $0xff,%eax
		jne    jump_4f9ea
		mov    $0x1,%edx
		mov    0x16(%esi),%ax
		call   ac_find_nth_weapon_held
		mov    %al,%bl
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		sar    $0x2,%eax
		mov    %eax,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		mov    %bl,data_1a638c(%edx,%eax,1)
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_4f9e2:
		not    %eax
		and    %eax,0xa4(%esi)
	jump_4f9ea:
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
send_another_player_peep:	/* 0x04F9F4 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x18,%esp
		mov    %eax,0x4(%esp)
		mov    %dx,0x14(%esp)
		mov    %ebx,0xc(%esp)
		movl   $0x7fffffff,0x8(%esp)
		xor    %edx,%edx
		mov    %dx,0x10(%esp)
		mov    0x12(%esp),%edx
		sar    $0x10,%edx
		mov    %edx,%eax
		shl    $0x4,%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(sthings),%esi
		shl    $0x2,%eax
		add    %eax,%esi
		xor    %edx,%edx
		mov    0x2c(%esi),%dx
		test   %edx,%edx
		jne    jump_4fa41
		xor    %eax,%eax
		jmp    jump_4fbbc
	jump_4fa41:
		mov    0x4(%esp),%eax
		call   do_i_have_weapon
		test   %eax,%eax
		jne    jump_4fa58
		xor    %eax,%eax
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_4fa58:
		xor    %edi,%edi
		xor    %ebp,%ebp
		jmp    jump_4fb00
	jump_4fa61:
		testb  $0x2,0xc(%ecx)
		jne    jump_4faff
		xor    %eax,%eax
		mov    0xa(%ecx),%ax
		cmp    $0x2b,%eax
		je     jump_4fa7b
		jmp    jump_4faff
	jump_4fa7b:
		mov    %ebp,%ebx
		mov    0xa4(%ecx),%eax
		mov    %ebp,%edx
		and    $0xffbfffff,%eax
	jump_4fa8a:
		test   %eax,%eax
		je     jump_4fa9b
		test   $0x1,%al
		je     jump_4fa93
		inc    %ebx
	jump_4fa93:
		inc    %edx
		shr    %eax
		cmp    $0x20,%edx
		jl     jump_4fa8a
	jump_4fa9b:
		xor    %eax,%eax
		mov    %bx,%ax
		cmp    $0x6,%eax
		jge    jump_4faff
		xor    %edx,%edx
		mov    %ecx,%eax
		mov    0x2c(%esi),%dx
		call   do_i_have_weapon
		test   %eax,%eax
		jne    jump_4faff
		mov    0x18(%ecx),%eax
		mov    0x18(%esi),%edx
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x8,%edx
		imul   %edx,%edx
		mov    0x1c(%esi),%ebx
		mov    0x1c(%ecx),%eax
		sub    %ebx,%eax
		mov    %eax,%ebx
		mov    0x20(%ecx),%eax
		sub    0x20(%esi),%eax
		sar    $0x8,%eax
		imul   %eax,%eax
		sar    $0x8,%ebx
		mov    %edx,(%esp)
		mov    %ebx,%edx
		imul   %ebx,%edx
		add    (%esp),%edx
		add    %edx,%eax
		cmp    0x8(%esp),%eax
		jge    jump_4faff
		mov    0x16(%ecx),%dx
		mov    %eax,0x8(%esp)
		mov    %dx,0x10(%esp)
	jump_4faff:
		inc    %edi
	jump_4fb00:
		xor    %edx,%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(playable_agents),%dl
		mov    %di,%ax
		cmp    %edx,%eax
		jge    jump_4fb69
		xor    %edx,%edx
		mov    0xc(%esp),%dx
		imul   $0x1aa,%edx,%edx
		mov    0x4(%esp),%ebx
		mov    EXPORT_SYMBOL(players)+0x09C(%edx,%eax,4),%ecx # players[0].MyAgent[0]
		cmp    %ebx,%ecx
		je     jump_4faff
		mov    0x14(%esp),%edx
		cmp    0x48(%ecx),%dx
		jne    jump_4fb42
		xor    %eax,%eax
		mov    0xa(%ecx),%ax
		cmp    $0x2c,%eax
		je     jump_4fb5f
	jump_4fb42:
		mov    0x14(%esp),%ebx
		cmp    0x5e(%ecx),%bx
		jne    jump_4fa61
		xor    %eax,%eax
		mov    0xa(%ecx),%ax
		cmp    $0x7,%eax
		jne    jump_4fa61
	jump_4fb5f:
		xor    %eax,%eax
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_4fb69:
		cmpw   $0x0,0x10(%esp)
		je     jump_4fbb7
		mov    0xe(%esp),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%ebx
		shl    $0x3,%eax
		add    %eax,%ebx
		mov    0x12(%esp),%edx
		mov    %ebx,%eax
		sar    $0x10,%edx
		call   ac_set_person_animmode_run
		mov    %ebx,%eax
		call   set_get_item
		orb    $0x10,0x47(%ebx)
		mov    $0x1,%eax
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_4fbb7:
		mov    $0xffff,%eax
	jump_4fbbc:
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret

vtable_4fbc4:
		.long   func_4fce0
		.long   func_4fc9e
		.long   func_4fc9e
		.long   func_4fc9e
		.long   func_4fe16
		.long   func_4fdc8
		.long   func_4fd2e
		.long   func_4fd7a


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_init_get_item_fast)	/* 0x04FBE4 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    %eax,%esi
		mov    %dx,(%esp)
		mov    %ebx,%edi
		mov    -0x2(%esp),%ecx
		sar    $0x10,%ecx
		mov    %ecx,%eax
		shl    $0x4,%eax
		mov    EXPORT_SYMBOL(sthings),%ebp
		sub    %ecx,%eax
		xor    %ebx,%ebx
		shl    $0x2,%eax
		mov    %ecx,%edx
		add    %eax,%ebp
		mov    %esi,%eax
		mov    %di,%bx
		call   person_unkn_start_get_item
		mov    %ecx,%edx
		mov    %esi,%eax
		call   send_another_player_peep
		test   %ax,%ax
		jne    jump_4fcd8
		testw  $0x202,0xc(%esi)
		jne    jump_4fcd8
		mov    0x2c(%ebp),%bx
		test   %bx,%bx
		jne    jump_4fc46
		jmp    jump_4fca2
	jump_4fc46:
		mov    %ebx,%ecx
		mov    0xa4(%esi),%eax
		xor    %edx,%edx
		and    $0xffbfffff,%eax
		xor    %ebx,%ebx
	jump_4fc57:
		test   %eax,%eax
		je     jump_4fc68
		test   $0x1,%al
		je     jump_4fc60
		inc    %ebx
	jump_4fc60:
		inc    %edx
		shr    %eax
		cmp    $0x20,%edx
		jl     jump_4fc57
	jump_4fc68:
		xor    %eax,%eax
		mov    %bx,%ax
		cmp    $0x6,%eax
		jge    jump_4fc8e
		and    $0xffff,%ecx
		mov    $0x1,%eax
		dec    %ecx
		mov    0xa4(%esi),%edx
		shl    %cl,%eax
		test   %edx,%eax
		jne    jump_4fc8e
		mov    $0x1,%al
		jmp    jump_4fc90
	jump_4fc8e:
		xor    %al,%al
	jump_4fc90:
		mov    0xd(%esi),%dl
		mov    %al,%ah
		test   $0x20,%dl
		jne    jump_4fe64


/*----------------------------------------------------------------*/
func_4fc9e:
/*----------------------------------------------------------------*/
		test   %ah,%ah
		je     jump_4fcd8
	jump_4fca2:
		mov    -0x2(%esp),%edx
		sar    $0x10,%edx
		mov    %edx,%eax
		shl    $0x4,%eax
		mov    EXPORT_SYMBOL(sthings),%ebx
		sub    %edx,%eax
		mov    0x9(%ebx,%eax,4),%al
		and    $0xff,%eax
		cmp    $0x19,%eax
		jne    jump_4fcd8
		mov    %esi,%eax
		call   set_get_item
		testb  $0x40,0x44(%esi)
		jne    jump_4fcd8
		mov    %esi,%eax
		call   ac_set_person_animmode_run
	jump_4fcd8:
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
func_4fce0:
/*----------------------------------------------------------------*/
		test   %al,%al
		jne    jump_4fd20
		testb  $0x20,0xa4(%esi)
		je     jump_4fd27
		xor    %edx,%edx
		mov    %di,%dx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		mov    %bl,%al
		mov    data_1a63ee(%edx,%eax,1),%al
		and    $0xff,%eax
		cmp    $0x4,%eax
		je     jump_4fd27
	jump_4fd20:
		mov    $0x1,%ah
		jmp    func_4fc9e
	jump_4fd27:
		xor    %ah,%ah
		jmp    func_4fc9e


/*----------------------------------------------------------------*/
func_4fd2e:
/*----------------------------------------------------------------*/
		test   %al,%al
		jne    jump_4fd6c
		testb  $0x8,0xa5(%esi)
		je     jump_4fd73
		xor    %edx,%edx
		mov    %di,%dx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		xor    %edx,%edx
		mov    %bl,%dl
		mov    data_1a63e6(%edx,%eax,1),%al
		and    $0xff,%eax
		cmp    $0x4,%eax
		je     jump_4fd73
	jump_4fd6c:
		mov    $0x1,%ah
		jmp    func_4fc9e
	jump_4fd73:
		xor    %ah,%ah
		jmp    func_4fc9e


/*----------------------------------------------------------------*/
func_4fd7a:
/*----------------------------------------------------------------*/
		test   %al,%al
		jne    jump_4fdba
		testb  $0x10,0xa5(%esi)
		je     jump_4fdc1
		xor    %edx,%edx
		mov    %di,%dx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		mov    %bl,%al
		mov    data_1a63ea(%edx,%eax,1),%al
		and    $0xff,%eax
		cmp    $0x4,%eax
		je     jump_4fdc1
	jump_4fdba:
		mov    $0x1,%ah
		jmp    func_4fc9e
	jump_4fdc1:
		xor    %ah,%ah
		jmp    func_4fc9e


/*----------------------------------------------------------------*/
func_4fdc8:
/*----------------------------------------------------------------*/
		test   %al,%al
		jne    jump_4fe08
		testb  $0x4,0xa5(%esi)
		je     jump_4fe0f
		xor    %edx,%edx
		mov    %di,%dx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		mov    %bl,%al
		mov    data_1a63f6(%edx,%eax,1),%al
		and    $0xff,%eax
		cmp    $0x4,%eax
		je     jump_4fe0f
	jump_4fe08:
		mov    $0x1,%ah
		jmp    func_4fc9e
	jump_4fe0f:
		xor    %ah,%ah
		jmp    func_4fc9e


/*----------------------------------------------------------------*/
func_4fe16:
/*----------------------------------------------------------------*/
		test   %al,%al
		jne    jump_4fe56
		testb  $0x2,0xa5(%esi)
		je     jump_4fe5d
		xor    %edx,%edx
		mov    %di,%dx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		mov    %bl,%al
		mov    data_1a63f2(%edx,%eax,1),%al
		and    $0xff,%eax
		cmp    $0x4,%eax
		je     jump_4fe5d
	jump_4fe56:
		mov    $0x1,%ah
		jmp    func_4fc9e
	jump_4fe5d:
		xor    %ah,%ah
		jmp    func_4fc9e
	jump_4fe64:
		mov    -0x2(%esp),%ecx
		sar    $0x10,%ecx
		mov    %ecx,%edx
		shl    $0x4,%edx
		sub    %ecx,%edx
		lea    0x0(,%edx,4),%ecx
		mov    EXPORT_SYMBOL(sthings),%edx
		mov    0x2c(%ecx,%edx,1),%dx
		mov    0x54(%esi),%bl
		sub    $0x6,%edx
		and    $0x3,%bl
		cmp    $0x7,%dx
		ja     func_4fc9e
		and    $0xffff,%edx
		jmp    *%cs:vtable_4fbc4(,%edx,4)

vtable_4fea8:
		.long   func_4ff68
		.long   func_4ff34
		.long   func_4ff34
		.long   func_4ff34
		.long   func_5009a
		.long   func_5004c
		.long   func_4ffb0
		.long   func_4fffe


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_init_get_item)	/* 0x04FEC8 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		mov    %eax,%ecx
		mov    %edx,%edi
		mov    %ebx,%esi
		movswl %dx,%edx
		mov    %edx,%eax
		mov    EXPORT_SYMBOL(sthings),%ebp
		shl    $0x4,%eax
		mov    %edx,%ebx
		sub    %edx,%eax
		xor    %edx,%ebx
		shl    $0x2,%eax
		mov    %si,%bx
		add    %eax,%ebp
		mov    %ecx,%eax
		call   send_another_player_peep
		test   %ax,%ax
		jne    jump_4ff63
		testw  $0x202,0xc(%ecx)
		jne    jump_4ff63
		cmpw   $0x0,0x2c(%ebp)
		je     jump_4ff38
		xor    %edx,%edx
		mov    %ecx,%eax
		mov    0x2c(%ebp),%dx
		mov    $0x1,%bl
		call   do_i_have_weapon
		test   %eax,%eax
		je     jump_4ff2a
		xor    %bl,%bl
	jump_4ff2a:
		testb  $0x20,0xd(%ecx)
		jne    jump_500e8


/*----------------------------------------------------------------*/
func_4ff34:
/*----------------------------------------------------------------*/
		test   %bl,%bl
		je     jump_4ff63
	jump_4ff38:
		movswl %di,%edx
		mov    %edx,%eax
		shl    $0x4,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%ebx
		mov    EXPORT_SYMBOL(sthings),%eax
		mov    0x9(%ebx,%eax,1),%al
		and    $0xff,%eax
		cmp    $0x19,%eax
		jne    jump_4ff63
		mov    %ecx,%eax
		call   set_get_item
	jump_4ff63:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
func_4ff68:
/*----------------------------------------------------------------*/
		test   %bl,%bl
		jne    jump_4ffa8
		testb  $0x20,0xa4(%ecx)
		je     jump_4ffac
		xor    %edx,%edx
		mov    %si,%dx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		mov    %bh,%al
		mov    data_1a63ee(%edx,%eax,1),%al
		and    $0xff,%eax
		cmp    $0x4,%eax
		je     jump_4ffac
	jump_4ffa8:
		mov    $0x1,%bl
		jmp    func_4ff34
	jump_4ffac:
		xor    %bl,%bl
		jmp    func_4ff34


/*----------------------------------------------------------------*/
func_4ffb0:
/*----------------------------------------------------------------*/
		test   %bl,%bl
		jne    jump_4fff0
		testb  $0x8,0xa5(%ecx)
		je     jump_4fff7
		xor    %edx,%edx
		mov    %si,%dx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		mov    %bh,%al
		mov    data_1a63e6(%edx,%eax,1),%al
		and    $0xff,%eax
		cmp    $0x4,%eax
		je     jump_4fff7
	jump_4fff0:
		mov    $0x1,%bl
		jmp    func_4ff34
	jump_4fff7:
		xor    %bl,%bl
		jmp    func_4ff34


/*----------------------------------------------------------------*/
func_4fffe:
/*----------------------------------------------------------------*/
		test   %bl,%bl
		jne    jump_5003e
		testb  $0x10,0xa5(%ecx)
		je     jump_50045
		xor    %edx,%edx
		mov    %si,%dx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		mov    %bh,%al
		mov    data_1a63ea(%edx,%eax,1),%al
		and    $0xff,%eax
		cmp    $0x4,%eax
		je     jump_50045
	jump_5003e:
		mov    $0x1,%bl
		jmp    func_4ff34
	jump_50045:
		xor    %bl,%bl
		jmp    func_4ff34


/*----------------------------------------------------------------*/
func_5004c:
/*----------------------------------------------------------------*/
		test   %bl,%bl
		jne    jump_5008c
		testb  $0x4,0xa5(%ecx)
		je     jump_50093
		xor    %edx,%edx
		mov    %si,%dx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		mov    %bh,%al
		mov    data_1a63f6(%edx,%eax,1),%al
		and    $0xff,%eax
		cmp    $0x4,%eax
		je     jump_50093
	jump_5008c:
		mov    $0x1,%bl
		jmp    func_4ff34
	jump_50093:
		xor    %bl,%bl
		jmp    func_4ff34


/*----------------------------------------------------------------*/
func_5009a:
/*----------------------------------------------------------------*/
		test   %bl,%bl
		jne    jump_500da
		testb  $0x2,0xa5(%ecx)
		je     jump_500e1
		xor    %edx,%edx
		mov    %si,%dx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		mov    %bh,%al
		mov    data_1a63f2(%edx,%eax,1),%al
		and    $0xff,%eax
		cmp    $0x4,%eax
		je     jump_500e1
	jump_500da:
		mov    $0x1,%bl
		jmp    func_4ff34
	jump_500e1:
		xor    %bl,%bl
		jmp    func_4ff34
	jump_500e8:
		mov    0x2c(%ebp),%ax
		mov    0x54(%ecx),%bh
		sub    $0x6,%eax
		and    $0x3,%bh
		cmp    $0x7,%ax
		ja     func_4ff34
		and    $0xffff,%eax
		jmp    *%cs:vtable_4fea8(,%eax,4)


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_init_plant_mine_fast)	/* 0x05010C */
/*----------------------------------------------------------------*/
		push   %esi
		mov    %eax,%esi
		testb  $0x1,0xc(%eax)
		jne    jump_5013a
		mov    0x6(%esp),%eax
		movswl %cx,%ecx
		sar    $0x10,%eax
		movswl %bx,%ebx
		push   %eax
		movswl %dx,%edx
		mov    %esi,%eax
		call   ac_person_init_plant_mine
		testb  $0x40,0x44(%esi)
		jne    jump_5013a
		mov    %esi,%eax
		call   ac_set_person_animmode_run
	jump_5013a:
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_init_plant_mine)	/* 0x050140 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    %eax,%esi
		mov    %edx,%edi
		mov    %cx,(%esp)
		mov    0x10(%esp),%edx
		testb  $0x1,0xc(%eax)
		jne    jump_501e7
		testw  $0x202,0xc(%esi)
		jne    jump_501e7
		mov    0x44(%esi),%ebx
		and    $0xfffdffbf,%ebx
		mov    0x4c(%esi),%cx
		mov    %ebx,0x44(%esi)
		test   %cx,%cx
		je     jump_50183
		mov    %esi,%eax
		call   ac_remove_path
	jump_50183:
		test   %dx,%dx
		je     jump_501a0
		mov    -0x2(%esp),%ecx
		movswl %di,%ebx
		neg    %edx
		mov    %esi,%eax
		sar    $0x10,%ecx
		movswl %dx,%edx
		call   ac_build_navigate_path_to_face_xz
		jmp    jump_501b3
	jump_501a0:
		mov    -0x2(%esp),%ebx
		movswl %di,%edx
		mov    %esi,%eax
		xor    %ecx,%ecx
		sar    $0x10,%ebx
		call   ac_build_navigate_path
	jump_501b3:
		testb  $0x40,0x44(%esi)
		jne    jump_501e7
		movw   $0x35,0xa(%esi)
		movw   $0xffff,0x66(%esi)
		movb   $0x0,0x3f(%esi)
		movb   $0x1,0x5b(%esi)
		mov    0x46(%esi),%dh
		mov    %di,0x9a(%esi)
		or     $0x80,%dh
		mov    %dh,0x46(%esi)
		mov    (%esp),%edx
		mov    %dx,0x9c(%esi)
	jump_501e7:
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
plant_mine:	/* 0x0501F0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		mov    %eax,%esi
		mov    $0x3ec,%ecx
		mov    0x20(%esi),%ebx
		xor    %eax,%eax
		mov    0x1c(%esi),%edx
		mov    0x9e(%esi),%al
		sar    $0x8,%ebx
		push   %eax
		mov    0x18(%esi),%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		call   create_item
		mov    %eax,%ebx
		mov    %eax,%edi
		test   %eax,%eax
		je     jump_502f1
		mov    things,%ecx
		mov    %esi,%edx
		sub    %ecx,%edx
		mov    $0xa8,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		movw   $0x8c,0x28(%ebx)
		movw   $0x8c,0x2a(%ebx)
		mov    %ax,0x38(%ebx)
		mov    0x14(%ebx),%ecx
		mov    0x6e(%esi),%ax
		movw   $0x7,0x30(%ebx)
		sar    $0x10,%ecx
		mov    %ax,0x34(%ebx)
		mov    $0xffffffff,%ebx
		mov    0x9c(%esi),%edx
		mov    %esi,%eax
		sar    $0x10,%edx
		call   ac_give_take_me_weapon
		xor    %ecx,%ecx
		mov    0x99(%esi),%cl
		mov    $0x1,%eax
		dec    %ecx
		mov    0xa4(%esi),%ebp
		shl    %cl,%eax
		test   %ebp,%eax
		jne    jump_502eb
		testb  $0x20,0xd(%esi)
		je     jump_502e4
		testb  $0x8,0x45(%esi)
		jne    jump_502e4
		xor    %eax,%eax
		mov    $0x1,%edx
		mov    0x16(%esi),%ax
		call   ac_find_nth_weapon_held
		mov    %al,%dl
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		sar    $0x2,%eax
		mov    %eax,%ebx
		shl    $0x3,%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		sub    %ebx,%eax
		add    %eax,%eax
		mov    %eax,%ebx
		shl    $0x2,%eax
		sub    %ebx,%eax
		mov    %eax,%ebx
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		mov    %dl,data_1a638c(%ebx,%eax,1)
	jump_502e4:
		movb   $0x0,0x99(%esi)
	jump_502eb:
		movw   $0x32,0x14(%edi)
	jump_502f1:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_drop_item)	/* 0x0502F8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		mov    %eax,%esi
		testw  $0x202,0xc(%eax)
		jne    jump_505a9
		mov    EXPORT_SYMBOL(fifties_per_gameturn),%ax
		sub    %ax,0x28(%esi)
		mov    0x26(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_505a9
		mov    0x2a(%esi),%ax
		mov    %ax,0x28(%esi)
		xor    %eax,%eax
		mov    frame,%edx
		mov    0x24(%esi),%ax
		mov    0x68(%esi),%cx
		mov    0x6(%edx,%eax,8),%ax
		dec    %ecx
		mov    %ax,0x24(%esi)
		mov    %cx,0x68(%esi)
		mov    0x66(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_504af
		push   $0x1
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    %esi,%eax
		mov    %ecx,%edx
		call   ac_play_dist_sample
		mov    0x46(%esi),%ah
		test   $0x1,%ah
		je     jump_503ca
		mov    0x9c(%esi),%edx
		sar    $0x10,%edx
		mov    %ah,%bl
		mov    %edx,%eax
		shl    $0x4,%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(sthings),%edx
		shl    $0x2,%eax
		and    $0xfe,%bl
		add    %eax,%edx
		mov    %bl,0x46(%esi)
		xor    %eax,%eax
		mov    0x9(%edx),%al
		cmp    $0x19,%eax
		je     jump_504af
		mov    0x14(%edx),%eax
		sar    $0x10,%eax
		movb   $0x19,0x9(%edx)
		call   ac_add_node_sthing
		mov    0x6e(%esi),%ax
		mov    %ax,0x34(%edx)
		movw   $0x32,0x68(%esi)
		jmp    jump_504af
	jump_503ca:
		mov    0x9c(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_503e6
		xor    %eax,%eax
		mov    0x99(%esi),%al
		mov    %ax,0x9e(%esi)
	jump_503e6:
		testb  $0x80,0x46(%esi)
		je     jump_50415
		mov    0x9c(%esi),%eax
		sar    $0x10,%eax
		cmp    $0xc,%eax
		je     jump_503ff
		cmp    $0xd,%eax
		jne    jump_5040c
	jump_503ff:
		mov    %esi,%eax
		call   plant_mine
		movw   $0x32,0x68(%esi)
	jump_5040c:
		andb   $0x7f,0x46(%esi)
		jmp    jump_504af
	jump_50415:
		mov    $0x3ec,%ecx
		mov    0x20(%esi),%ebx
		xor    %eax,%eax
		mov    0x1c(%esi),%edx
		mov    0x9e(%esi),%al
		sar    $0x8,%ebx
		push   %eax
		mov    0x18(%esi),%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		call   create_item
		mov    %eax,%edx
		movw   $0x32,0x68(%esi)
		test   %eax,%eax
		je     jump_504af
		mov    0x6e(%esi),%bx
		mov    %bx,0x34(%eax)
		mov    0x9c(%esi),%edx
		sar    $0x10,%edx
		cmp    $0xc,%edx
		je     jump_50461
		cmp    $0xd,%edx
		jne    jump_50473
	jump_50461:
		movw   $0x32,0x14(%eax)
		movw   $0x3e7,0x28(%eax)
		movw   $0x3e7,0x2a(%eax)
	jump_50473:
		mov    $0xffffffff,%ebx
		mov    0x14(%eax),%ecx
		mov    0x9c(%esi),%edx
		sar    $0x10,%ecx
		sar    $0x10,%edx
		mov    %esi,%eax
		call   ac_give_take_me_weapon
		xor    %ecx,%ecx
		mov    0x99(%esi),%cl
		mov    $0x1,%eax
		dec    %ecx
		mov    0xa4(%esi),%edx
		shl    %cl,%eax
		test   %edx,%eax
		jne    jump_504af
		movb   $0x0,0x99(%esi)
	jump_504af:
		xor    %eax,%eax
		mov    frame,%edx
		mov    0x24(%esi),%ax
		testb  $0x1,0x5(%edx,%eax,8)
		je     jump_505a9
		testb  $0x10,0x47(%esi)
		je     jump_50525
		mov    0x3c(%esi),%ax
		xor    %edx,%edx
		mov    %ax,%dx
		mov    %ax,0x48(%esi)
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %eax,%edx
		mov    things,%eax
		shl    $0x3,%edx
		movw   $0x2b,0xa(%esi)
		mov    0x54(%edx,%eax,1),%ax
		xor    %ah,%ah
		xor    %edx,%edx
		and    $0x3,%al
		mov    %ax,%dx
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		mov    0x47(%esi),%ch
		mov    EXPORT_SYMBOL(follow_dist)(%eax,%edx,4),%al
		and    $0xef,%ch
		mov    %al,0x5b(%esi)
		mov    %ch,0x47(%esi)
		jmp    jump_5052b
	jump_50525:
		movw   $0x0,0xa(%esi)
	jump_5052b:
		andb   $0xfe,0xc(%esi)
		xor    %edx,%edx
		mov    0x6d(%esi),%al
		mov    0x8(%esi),%dl
		mov    %al,0x6c(%esi)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		xor    %edx,%edx
		mov    0x6c(%esi),%dl
		add    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,4),%dx
		xor    %eax,%eax
		and    $0xffff,%edx
		mov    0x57(%esi),%al
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		xor    %edx,%edx
		mov    0x8(%esi),%dl
		mov    %ax,0x24(%esi)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		dec    %eax
		mov    %ax,0x26(%esi)
		mov    %esi,%eax
		call   calc_person_speed
		mov    %ax,0x38(%esi)
	jump_505a9:
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_init_drop)	/* 0x0505B0 */
/*----------------------------------------------------------------*/
		push   %ebx
		testl  $0x40010202,0xc(%eax)
		jne    jump_50632
		mov    %dx,0x9e(%eax)
		mov    0xc(%eax),%dl
		xor    %ebx,%ebx
		or     $0x1,%dl
		mov    0x8(%eax),%bl
		mov    %dl,0xc(%eax)
		lea    0x0(,%ebx,4),%edx
		sub    %ebx,%edx
		shl    $0x2,%edx
		sub    %ebx,%edx
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(people_frames)+0x1A(,%edx,4),%bx
		xor    %edx,%edx
		mov    0x57(%eax),%dl
		add    %ebx,%edx
		mov    nstart_ani,%ebx
		mov    (%ebx,%edx,2),%dx
		xor    %ebx,%ebx
		mov    0x8(%eax),%bl
		mov    %dx,0x24(%eax)
		lea    0x0(,%ebx,4),%edx
		sub    %ebx,%edx
		shl    $0x2,%edx
		sub    %ebx,%edx
		mov    EXPORT_SYMBOL(people_frames)+0x1A(,%edx,4),%dx
		movw   $0x8,0xa(%eax)
		dec    %edx
		movw   $0x3,0x68(%eax)
		mov    %dx,0x26(%eax)
		mov    0x6c(%eax),%dl
		movb   $0xd,0x6c(%eax)
		mov    %dl,0x6d(%eax)
	jump_50632:
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_init_drop_special)	/* 0x050634 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		mov    %edx,%ebx
		testl  $0x40010202,0xc(%eax)
		jne    jump_506ea
		movswl %bx,%ecx
		mov    %ecx,%edx
		shl    $0x4,%edx
		sub    %ecx,%edx
		mov    EXPORT_SYMBOL(sthings),%ecx
		mov    0x32(%ecx,%edx,4),%dx
		cmp    0x16(%eax),%dx
		je     jump_50669
		movw   $0x0,0xa(%eax)
		pop    %ecx
		pop    %ebx
		ret
	jump_50669:
		mov    0xc(%eax),%dl
		mov    %bx,0x9e(%eax)
		or     $0x1,%dl
		mov    %dl,0xc(%eax)
		mov    0x46(%eax),%dh
		xor    %ebx,%ebx
		or     $0x1,%dh
		mov    0x8(%eax),%bl
		mov    %dh,0x46(%eax)
		lea    0x0(,%ebx,4),%edx
		sub    %ebx,%edx
		shl    $0x2,%edx
		sub    %ebx,%edx
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(people_frames)+0x1A(,%edx,4),%bx
		xor    %edx,%edx
		mov    0x57(%eax),%dl
		add    %ebx,%edx
		mov    nstart_ani,%ebx
		mov    (%ebx,%edx,2),%dx
		xor    %ebx,%ebx
		mov    0x8(%eax),%bl
		mov    %dx,0x24(%eax)
		lea    0x0(,%ebx,4),%edx
		sub    %ebx,%edx
		shl    $0x2,%edx
		sub    %ebx,%edx
		mov    EXPORT_SYMBOL(people_frames)+0x1A(,%edx,4),%dx
		movw   $0x8,0xa(%eax)
		dec    %edx
		movw   $0x3,0x68(%eax)
		mov    %dx,0x26(%eax)
		mov    0x6c(%eax),%dl
		movb   $0xd,0x6c(%eax)
		mov    %dl,0x6d(%eax)
	jump_506ea:
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_save_victim)	/* 0x05084C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		mov    %eax,%ebx
		xor    %eax,%eax
		mov    0xa(%ebx),%ax
		cmp    $0xe,%eax
		jne    jump_50895
		mov    $0x500,%edx
		mov    %ebx,%eax
		call   ac_check_weapon
		mov    0xc(%ebx),%ah
		movw   $0x1b,0xa(%ebx)
		or     $0x40,%ah
		mov    %ah,0xc(%ebx)
		mov    %ebx,%eax
		movw   $0xffff,0x66(%ebx)
		call   ac_get_weapon_range
		movw   $0x32,0x68(%ebx)
		sar    $0x6,%eax
		movw   $0x32,0x6a(%ebx)
		mov    %al,0x5b(%ebx)
	jump_50895:
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_goto_person_nav)	/* 0x050898 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		mov    %eax,%ebx
		mov    0x46(%eax),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%ecx
		shl    $0x3,%eax
		add    %eax,%ecx
		testb  $0x40,0xd(%ecx)
		je     jump_508d5
		mov    0xc(%ebx),%dl
		or     $0x4,%dl
		mov    $0x800000,%esi
		mov    %dl,0xc(%ebx)
		jmp    jump_508f6
	jump_508d5:
		mov    0x18(%ebx),%eax
		mov    0x18(%ecx),%edx
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x8,%edx
		imul   %edx,%edx
		mov    0x20(%ecx),%esi
		mov    0x20(%ebx),%eax
		sub    %esi,%eax
		sar    $0x8,%eax
		imul   %eax,%eax
		lea    (%edx,%eax,1),%esi
	jump_508f6:
		testb  $0x8,0xe(%ebx)
		je     jump_50922
		cmpw   $0x0,0x6e(%ebx)
		je     jump_5090f
		cmpw   $0x0,0x6e(%ecx)
		jne    jump_5090f
		mov    $0x800000,%esi
	jump_5090f:
		cmpw   $0x0,0x6e(%ebx)
		jne    jump_50922
		cmpw   $0x0,0x6e(%ecx)
		je     jump_50922
		mov    $0x800000,%esi
	jump_50922:
		testb  $0x2,0x46(%ebx)
		jne    jump_50ccb
		xor    %eax,%eax
		mov    0x5b(%ebx),%al
		imul   %eax,%eax
		mov    0xc(%ecx),%dl
		shl    $0xc,%eax
		test   $0x2,%dl
		je     jump_5095e
		cmp    $0x400000,%esi
		jge    jump_5095e
		mov    %ebx,%eax
		movw   $0x0,0xa(%ebx)
		call   ac_remove_path
		mov    $0x1,%eax
		jmp    jump_50ccd
	jump_5095e:
		cmp    %eax,%esi
		jge    jump_50a3e
		testb  $0x1,0x45(%ebx)
		jne    jump_50993
		mov    0x18(%ecx),%eax
		sar    $0x8,%eax
		mov    %ax,0x9a(%ebx)
		mov    0x20(%ecx),%eax
		sar    $0x8,%eax
		mov    %ax,0x9c(%ebx)
		mov    %ebx,%eax
		call   ac_remove_path
		movw   $0xffff,0x66(%ebx)
	jump_50993:
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		cmp    $0xe,%eax
		je     jump_50ccb
		cmp    $0xf,%eax
		je     jump_50ccb
		mov    $0x1,%edx
		mov    %ebx,%eax
		call   ac_gun_out_anim
		xor    %edx,%edx
		mov    %eax,%ecx
		mov    0x6c(%ebx),%dl
		and    $0xffff,%eax
		cmp    %edx,%eax
		je     jump_50ccb
		xor    %edx,%edx
		mov    0x8(%ebx),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    %cl,%al
		add    %eax,%eax
		add    %edx,%eax
		mov    %cl,0x6c(%ebx)
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    0x57(%ebx),%al
		xor    %ecx,%ecx
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    0x8(%ebx),%cl
		mov    (%edx,%eax,2),%ax
		lea    0x0(,%ecx,4),%edx
		sub    %ecx,%edx
		mov    %ax,0x24(%ebx)
		shl    $0x2,%edx
		xor    %eax,%eax
		sub    %ecx,%edx
		mov    0x6c(%ebx),%al
		shl    $0x2,%edx
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		dec    %eax
		mov    %ax,0x26(%ebx)
		mov    %esi,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_50a3e:
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		cmp    $0xe,%eax
		je     jump_50a4d
		cmp    $0xf,%eax
		jne    jump_50ac7
	jump_50a4d:
		mov    %ebx,%eax
		xor    %edx,%edx
		call   ac_gun_out_anim
		xor    %edx,%edx
		mov    0x8(%ebx),%dl
		mov    %al,0x6c(%ebx)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		xor    %edx,%edx
		dec    %eax
		mov    0x8(%ebx),%dl
		mov    %ax,0x26(%ebx)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%dx
		xor    %eax,%eax
		and    $0xffff,%edx
		mov    0x57(%ebx),%al
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		mov    %ax,0x24(%ebx)
	jump_50ac7:
		mov    %ebx,%eax
		call   calc_person_speed
		mov    0xf(%ebx),%dh
		mov    %ax,0x38(%ebx)
		test   $0x10,%dh
		je     jump_50bdd
		mov    0x5c(%ebx),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %eax,%edx
		mov    things,%eax
		shl    $0x3,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x8(%eax),%dl
		cmp    $0x32,%edx
		jne    jump_50b18
		mov    0xa2(%eax),%dx
		cmp    0x3a(%eax),%dx
		je     jump_50b18
		subw   $0x19,0x66(%ebx)
	jump_50b18:
		mov    0x3a(%eax),%dx
		mov    %dx,0xa2(%eax)
		mov    0x66(%ebx),%ax
		movswl %ax,%edx
		dec    %eax
		mov    %ax,0x66(%ebx)
		test   %edx,%edx
		jge    jump_50ccb
		call   ac_LbRandomAnyShort
		mov    0x5c(%ebx),%edx
		and    $0x7,%ah
		sar    $0x10,%edx
		mov    %eax,%edi
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		mov    0x8(%edx,%eax,8),%al
		and    $0xff,%eax
		cmp    $0x3b,%eax
		je     jump_50b71
		movw   $0x14,0x66(%ebx)
		jmp    jump_50b83
	jump_50b71:
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3f,%al
		add    $0x5a,%eax
		mov    %ax,0x66(%ebx)
	jump_50b83:
		xor    %eax,%eax
		mov    0x20(%ecx),%edx
		mov    %di,%ax
		sar    $0x8,%edx
		mov    0x18(%ecx),%ecx
		mov    EXPORT_SYMBOL(lbSinTable)(,%eax,4),%edi
		sar    $0x8,%ecx
		sar    $0x6,%edi
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%eax,4),%eax
		add    %edx,%edi
		mov    0x5c(%ebx),%edx
		sar    $0x6,%eax
		sar    $0x10,%edx
		add    %eax,%ecx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		mov    %edi,%ebx
		add    %edx,%eax
		mov    %ecx,%edx
		call   ac_start_goto_vehicle
		mov    %esi,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_50bdd:
		xor    %eax,%eax
		mov    0x3f(%ebx),%al
		test   %eax,%eax
		jne    jump_50c04
		movb   $0x1,0x3f(%ebx)
		mov    0x18(%ecx),%eax
		sar    $0x8,%eax
		mov    %ax,0x9a(%ebx)
		mov    0x20(%ecx),%eax
		sar    $0x8,%eax
		mov    %ax,0x9c(%ebx)
	jump_50c04:
		mov    %ebx,%eax
		mov    0xa(%ebx),%dx
		call   do_person_gotothingindex
		xor    %eax,%eax
		mov    0xa(%ebx),%ax
		test   %eax,%eax
		jne    jump_50c6c
		mov    0x18(%ebx),%esi
		sub    0x18(%ecx),%esi
		sar    $0x8,%esi
		imul   %esi,%esi
		mov    0x20(%ebx),%eax
		sub    0x20(%ecx),%eax
		sar    $0x8,%eax
		imul   %eax,%eax
		xor    %ecx,%ecx
		mov    0x5b(%ebx),%cl
		imul   %ecx,%ecx
		shl    $0xc,%ecx
		add    %esi,%eax
		cmp    %ecx,%eax
		jge    jump_50c5b
		testb  $0x20,0xd(%ebx)
		je     jump_50ccd
		movb   $0x0,0x3f(%ebx)
		mov    %dx,0xa(%ebx)
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_50c5b:
		movb   $0x0,0x3f(%ebx)
		xor    %eax,%eax
		mov    %dx,0xa(%ebx)
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_50c6c:
		mov    0x64(%ebx),%eax
		sar    $0x10,%eax
		cmp    $0x1,%eax
		jne    jump_50ccb
		mov    0x18(%ecx),%edi
		mov    0x98(%ebx),%eax
		sar    $0x8,%edi
		sar    $0x10,%eax
		sub    %edi,%eax
		imul   %eax,%eax
		mov    0x9a(%ebx),%ebp
		mov    0x20(%ecx),%edx
		sar    $0x10,%ebp
		sar    $0x8,%edx
		sub    %edx,%ebp
		mov    %ebp,%edx
		imul   %ebp,%edx
		add    %edx,%eax
		cmp    $0x40000,%eax
		jle    jump_50ccb
		mov    %di,0x9a(%ebx)
		mov    0x20(%ecx),%eax
		sar    $0x8,%eax
		mov    %ax,0x9c(%ebx)
		mov    %ebx,%eax
		call   ac_remove_path
		movw   $0xffff,0x66(%ebx)
	jump_50ccb:
		mov    %esi,%eax
	jump_50ccd:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_persuade_person)	/* 0x050CD4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		sub    $0x8,%esp
		mov    %eax,%ecx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(weapon_defs)+175,%dx # sizeof(struct WeaponDef) * 7
		shl    $0x8,%edx
		imul   %edx,%edx
		xor    %ah,%ah
		mov    0xd(%ecx),%bl
		mov    %ah,0x4(%esp)
		test   $0xc,%bl
		je     jump_50d0f
		mov    0x8a(%ecx),%eax
		sar    $0x10,%eax
		cmp    $0x5,%eax
		jle    jump_50d0f
		mov    %bl,%bh
		and    $0xf7,%bh
		mov    %bh,0xd(%ecx)
	jump_50d0f:
		mov    0x46(%ecx),%ebx
		sar    $0x10,%ebx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		add    %eax,%ebx
		mov    things,%eax
		shl    $0x3,%ebx
		add    %ebx,%eax
		mov    0x46(%ecx),%ebx
		sar    $0x10,%ebx
		mov    %eax,0x40(%ecx)
		test   %ebx,%ebx
		jne    jump_50d45
		movw   $0x0,0xa(%ecx)
		jmp    jump_50e02
	jump_50d45:
		testb  $0x8,0xe(%eax)
		je     jump_50d58
		movw   $0x0,0xa(%ecx)
		add    $0x8,%esp
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_50d58:
		mov    %ecx,%eax
		call   ac_person_goto_person_nav
		test   %eax,%eax
		je     jump_50d6c
		cmp    %edx,%eax
		jge    jump_50d6c
		movb   $0x1,0x4(%esp)
	jump_50d6c:
		cmpb   $0x0,0x4(%esp)
		je     jump_50dcd
		mov    %esp,%ebx
		mov    %ecx,%eax
		xor    %edx,%edx
		call   ac_process_persuadertron
		test   %ax,%ax
		je     jump_50dbb
		mov    0x46(%ecx),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		add    %eax,%edx
		mov    %ecx,%eax
		mov    %edx,0x40(%ecx)
		xor    %edx,%edx
		call   ac_person_becomes_persuaded
		movw   $0x0,0xa(%ecx)
		add    $0x8,%esp
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_50dbb:
		subb   $0x2,0x5b(%ecx)
		xor    %eax,%eax
		mov    0x5b(%ecx),%al
		cmp    $0x2,%eax
		jge    jump_50dcd
		movb   $0x2,0x5b(%ecx)
	jump_50dcd:
		xor    %eax,%eax
		mov    0xa(%ecx),%ax
		test   %eax,%eax
		jne    jump_50de6
		mov    0xd(%ecx),%dl
		movw   $0x28,0xa(%ecx)
		and    $0xf7,%dl
		mov    %dl,0xd(%ecx)
	jump_50de6:
		mov    0x40(%ecx),%edx
		test   %edx,%edx
		je     jump_50e02
		testb  $0x2,0xc(%edx)
		je     jump_50e02
		mov    0xd(%ecx),%bl
		movw   $0x0,0xa(%ecx)
		and    $0xf7,%bl
		mov    %bl,0xd(%ecx)
	jump_50e02:
		add    $0x8,%esp
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
peep_return_to_point:	/* 0x050E0C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		mov    %eax,%edx
		mov    0xc(%eax),%ah
		and    $0x7f,%ah
		mov    0x4c(%edx),%bx
		mov    %ah,0xc(%edx)
		test   %bx,%bx
		je     jump_50e29
		mov    %edx,%eax
		call   ac_remove_path
	jump_50e29:
		testb  $0x20,0xd(%edx)
		jne    jump_50e75
		movw   $0x1,0xa(%edx)
		movw   $0xffff,0x66(%edx)
		movb   $0x0,0x3f(%edx)
		movb   $0x1,0x5b(%edx)
		movw   $0x30,0x28(%edx)
		movw   $0x30,0x2a(%edx)
		mov    0x30(%edx),%eax
		mov    0xc(%edx),%bh
		sar    $0x10,%eax
		or     $0x40,%bh
		and    $0xffff,%eax
		mov    %bh,0xc(%edx)
		mov    %ax,0x9a(%edx)
		mov    0x30(%edx),%ax
		mov    %ax,0x9c(%edx)
	jump_50e75:
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_kill_target2)	/* 0x050E78 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x18,%esp
		mov    %eax,%esi
		xor    %ah,%ah
		xor    %edx,%edx
		mov    %ah,0x10(%esp)
		mov    %edx,0x8(%esp)
		mov    %ah,0x14(%esp)
		xor    %eax,%eax
		mov    gameturn,%edx
		mov    0x16(%esi),%ax
		add    %edx,%eax
		test   $0x7f,%al
		je     jump_50ed8
		jmp    jump_50ee5
	jump_50ea7:
		movswl %ax,%edx
		mov    $0x3,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		push   $0x3
		push   $0x0
		push   $0x64
		add    $0x36,%edx
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		and    $0xffff,%edx
		mov    %esi,%eax
		call   ac_play_dist_speech
		jmp    jump_50ee5
	jump_50ed8:
		call   ac_LbRandomAnyShort
		mov    0x8(%esi),%dl
		cmp    $0x8,%dl
		je     jump_50ea7
	jump_50ee5:
		mov    0xf(%esi),%dh
		test   $0x20,%dh
		je     jump_50ef5
		mov    %dh,%bl
		and    $0xdf,%bl
		mov    %bl,0xf(%esi)
	jump_50ef5:
		mov    0x8c(%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%ebx
		shl    $0x3,%eax
		lea    (%ebx,%eax,1),%edi
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0x2b,%eax
		jne    jump_50fb7
		mov    0x46(%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		shl    $0x3,%eax
		add    %eax,%ebx
		testb  $0x80,0x47(%ebx)
		je     jump_50f5f
		movw   $0x0,0x8e(%esi)
		movl   $0x0,0x40(%esi)
		orb    $0x80,0x47(%ebx)
		jmp    jump_51586
	jump_50f5f:
		testb  $0x1,0xd(%ebx)
		je     jump_50f86
		movw   $0x0,0x8e(%esi)
		movl   $0x0,0x40(%esi)
		orl    $0x200100,0xc(%ebx)
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_50f86:
		mov    0x70(%esi),%eax
		sar    $0x10,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0x20,%eax
		jge    jump_50fb7
		cmpl   $0x0,0x40(%ebx)
		je     jump_50fb7
		cmpw   $0x0,0x58(%ebx)
		je     jump_50fb7
		mov    0x40(%ebx),%eax
		mov    0x16(%eax),%ax
		mov    %ax,0x8e(%esi)
		mov    0x40(%ebx),%eax
		mov    %eax,0x40(%esi)
	jump_50fb7:
		mov    0x51(%esi),%al
		cmp    0x51(%edi),%al
		je     jump_50fc5
		testb  $0x80,0x47(%esi)
		je     jump_50fd8
	jump_50fc5:
		movw   $0x0,0x8e(%esi)
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_50fd8:
		mov    0xa(%esi),%ax
		mov    %eax,0x4(%esp)
		mov    0x48(%esi),%ax
		mov    %eax,0xc(%esp)
		mov    0x8e(%esi),%ax
		mov    %ax,0x48(%esi)
		mov    %esi,%eax
		call   ac_get_weapon_range
		mov    0xf(%esi),%dh
		mov    %eax,%ebp
		test   $0x10,%dh
		je     jump_51069
		mov    0x5c(%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%ecx
		shl    $0x3,%eax
		add    %eax,%ecx
		xor    %eax,%eax
		mov    0x8(%ecx),%al
		cmp    $0x28,%eax
		jne    jump_51069
		movl   $0x1,0x8(%esp)
		call   ac_LbRandomAnyShort
		mov    0x5e(%ecx),%ax
		mov    0x16(%esi),%dx
		cmp    %dx,%ax
		jne    jump_51069
		xor    %eax,%eax
		mov    %dx,%ax
		add    gameturn,%eax
		test   $0x7f,%al
		jne    jump_51069
		mov    %ecx,%eax
		mov    0x20(%edi),%ebx
		mov    0x18(%edi),%edx
		sar    $0x8,%ebx
		sar    $0x8,%edx
		call   ac_start_goto_vehicle
	jump_51069:
		testb  $0x1,0x80(%esi)
		je     jump_510f4
		testb  $0xff,gameturn
		je     jump_5109a
		mov    0x51(%edi),%al
		and    $0x1f,%al
		and    $0xff,%eax
		shl    $0x4,%eax
		mov    data_19f1a4(%eax),%eax
		sar    $0x10,%eax
		cmp    $0x5,%eax
		jle    jump_510f0
	jump_5109a:
		mov    0x80(%esi),%ch
		and    $0xfc,%ch
		mov    %ch,%al
		mov    %ch,0x80(%esi)
		or     $0x2,%al
		mov    %al,0x80(%esi)
		mov    0x70(%esi),%ax
		shl    $0x4,%eax
		xor    %ebx,%ebx
		shr    $0xd,%ax
		mov    %ax,%bx
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		xor    %edx,%edx
		and    $0x3,%al
		mov    %ax,%dx
		lea    0x1(%ebx),%eax
		cmp    %eax,%edx
		jge    jump_510df
		mov    %esi,%eax
		call   ac_set_person_animmode_run
	jump_510df:
		testb  $0x20,0xd(%edi)
		je     jump_510f4
		movw   $0x1,ingame__fld_unkC8B
		jmp    jump_510f4
	jump_510f0:
		andb   $0xfb,0xc(%esi)
	jump_510f4:
		testb  $0x2,0x80(%esi)
		je     jump_51101
		orb    $0x4,0xc(%esi)
	jump_51101:
		testb  $0x20,0xd(%esi)
		je     jump_51114
		testb  $0x8,0x80(%esi)
		je     jump_511f5
	jump_51114:
		cmpw   $0x0,0x8(%esp)
		jne    jump_511f5
		testb  $0x1,0x80(%esi)
		jne    jump_511f5
		mov    0xf(%esi),%ch
		test   $0x10,%ch
		je     jump_5115f
		test   $0x10,%ch
		je     jump_511a1
		mov    0x5c(%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		mov    0x5e(%edx,%eax,8),%ax
		cmp    0x16(%esi),%ax
		jne    jump_511a1
	jump_5115f:
		mov    0x8e(%esi),%ax
		cmp    0x48(%esi),%ax
		je     jump_51197
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(colour_lookup),%al
		push   %eax
		mov    0x20(%esi),%eax
		sar    $0x8,%eax
		movswl %ax,%ebx
		mov    0x1c(%esi),%eax
		sar    $0x8,%eax
		movswl %ax,%edx
		mov    0x18(%esi),%eax
		sar    $0x8,%eax
		mov    $0x140,%ecx
		cwtl
		call   ac_draw_map_flat_circle
	jump_51197:
		mov    %esi,%eax
		call   ac_person_goto_person_nav
		mov    %eax,(%esp)
	jump_511a1:
		cmpw   $0x0,0x62(%esi)
		je     jump_51257
		testb  $0x80,0x44(%esi)
		je     jump_51257
		mov    0x4(%esp),%eax
		mov    0x44(%esi),%dl
		movw   $0x0,0x8e(%esi)
		and    $0x7f,%dl
		mov    %ax,0xa(%esi)
		mov    %dl,0x44(%esi)
		mov    0xc(%esp),%eax
		mov    0xc(%esi),%dh
		mov    %ax,0x48(%esi)
		test   $0x80,%dh
		je     jump_51586
		mov    %esi,%eax
		call   peep_return_to_point
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_511f5:
		mov    0x18(%esi),%edx
		sub    0x18(%edi),%edx
		sar    $0x8,%edx
		imul   %edx,%edx
		mov    0x20(%esi),%eax
		sub    0x20(%edi),%eax
		sar    $0x8,%eax
		imul   %eax,%eax
		add    %eax,%edx
		mov    %ebp,%eax
		imul   %ebp,%eax
		mov    %edx,(%esp)
		cmp    %edx,%eax
		jge    jump_51257
		testb  $0x80,0xe(%esi)
		jne    jump_51257
		mov    0x4(%esp),%eax
		movw   $0x0,0x8e(%esi)
		mov    %ax,0xa(%esi)
		mov    0xc(%esp),%eax
		mov    0xc(%esi),%bh
		mov    %ax,0x48(%esi)
		test   $0x80,%bh
		je     jump_51586
		mov    %esi,%eax
		call   peep_return_to_point
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_51257:
		testb  $0x2,0xc(%esi)
		jne    jump_51586
		imul   %ebp,%ebp
		mov    (%esp),%ebx
		test   %ebx,%ebx
		je     jump_51276
		cmp    %ebx,%ebp
		jle    jump_51276
		movb   $0x1,0x10(%esp)
		jmp    jump_5127a
	jump_51276:
		andb   $0xf7,0xd(%esi)
	jump_5127a:
		cmpb   $0x0,0x10(%esp)
		je     jump_51456
		mov    0x56(%esi),%eax
		sar    $0x10,%eax
		cmp    $0x1,%eax
		jg     jump_51456
		xor    %eax,%eax
		mov    0xa(%edi),%ax
		cmp    $0xc,%eax
		je     jump_51456
		testb  $0x2,0xc(%edi)
		jne    jump_51456
		mov    %esi,%eax
		call   ac_get_weapon_range
		mov    %eax,%ebp
		imul   %eax,%ebp
		mov    $0x1,%ecx
		mov    %edi,%edx
		mov    %ebp,%ebx
		mov    %esi,%eax
		call   ac_can_i_see_thing
		mov    %eax,(%esp)
		test   %eax,%eax
		jle    jump_5134d
		andl   $0xffdff6ff,0xc(%esi)
		mov    0xd(%esi),%bh
		or     $0x8,%bh
		mov    0xf(%esi),%cl
		mov    %bh,0xd(%esi)
		test   $0x10,%cl
		je     jump_5130b
		mov    0x5c(%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		orb    $0x1,0xf(%edx,%eax,8)
	jump_5130b:
		testb  $0x10,0x80(%esi)
		je     jump_5132f
		mov    0x51(%edi),%al
		and    $0x1f,%al
		and    $0xff,%eax
		shl    $0x4,%eax
		orb    $0x40,data_19f1a7(%eax)
		andb   $0xef,0x80(%esi)
	jump_5132f:
		testb  $0x20,0xd(%esi)
		jne    jump_5135c
		mov    0x5b(%esi),%bh
		xor    %eax,%eax
		add    $0x2,%bh
		mov    %bh,%al
		mov    %bh,0x5b(%esi)
		cmp    $0x14,%eax
		jle    jump_5135c
		movb   $0x14,0x5b(%esi)
		jmp    jump_5135c
	jump_5134d:
		mov    0xd(%esi),%dh
		xor    %bl,%bl
		and    $0xf7,%dh
		mov    %bl,0x10(%esp)
		mov    %dh,0xd(%esi)
	jump_5135c:
		testb  $0x20,0xd(%esi)
		jne    jump_5142e
		mov    0x80(%esi),%ch
		test   $0x40,%ch
		jne    jump_51388
		xor    %eax,%eax
		mov    0x10(%esp),%al
		test   %eax,%eax
		jne    jump_51456
		test   $0x1,%ch
		jne    jump_51456
	jump_51388:
		testb  $0x2,0x80(%esi)
		je     jump_513b0
		mov    0x5b(%esi),%cl
		xor    %eax,%eax
		sub    $0x2,%cl
		mov    %cl,%al
		mov    %cl,0x5b(%esi)
		cmp    $0x2,%eax
		jge    jump_51456
		movb   $0x2,0x5b(%esi)
		jmp    jump_51456
	jump_513b0:
		mov    0x4a(%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(my_paths)(%eax),%dl
		xor    %eax,%eax
		mov    0x3e(%esi),%al
		sub    %eax,%edx
		movswl %dx,%eax
		cmp    $0x2,%eax
		je     jump_513e9
		cmp    $0x3,%eax
		jne    jump_51416
		testb  $0x7,gameturn
		jne    jump_51416
	jump_513e9:
		orb    $0x1,0x80(%esi)
		mov    0x51(%edi),%al
		and    $0x1f,%al
		and    $0xff,%eax
		shl    $0x4,%eax
		incw   data_19f1a6(%eax)
		mov    0xc(%esi),%bh
		or     $0x4,%bh
		mov    %esi,%eax
		mov    %bh,0xc(%esi)
		call   ac_set_person_animmode_walk
		jmp    jump_51456
	jump_51416:
		mov    0x5b(%esi),%dh
		xor    %eax,%eax
		sub    $0x2,%dh
		mov    %dh,%al
		mov    %dh,0x5b(%esi)
		cmp    $0x2,%eax
		jge    jump_51456
		movb   $0x2,0x5b(%esi)
		jmp    jump_51456
	jump_5142e:
		mov    0x10(%esp),%ch
		test   %ch,%ch
		je     jump_51444
		test   $0x3,%ch
		jne    jump_51456
		andb   $0xf7,0x80(%esi)
		jmp    jump_51456
	jump_51444:
		testb  $0xf,gameturn
		jne    jump_51456
		movw   $0x0,0x8e(%esi)
	jump_51456:
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		test   %eax,%eax
		jne    jump_51464
		andb   $0xf7,0xd(%esi)
	jump_51464:
		testb  $0x2,0xc(%edi)
		jne    jump_5149a
		testl  $0x20040,0x44(%esi)
		jne    jump_5149a
		lea    0x0(,%ebp,4),%eax
		mov    (%esp),%ebx
		sub    %ebp,%eax
		cmp    %ebx,%eax
		jge    jump_5148f
		xor    %eax,%eax
		mov    0x4(%esp),%ax
		cmp    $0x1b,%eax
		jne    jump_5149a
	jump_5148f:
		cmpb   $0x0,0x14(%esp)
		je     jump_51570
	jump_5149a:
		mov    0x80(%esi),%cl
		test   $0x3,%cl
		je     jump_514c4
		mov    %cl,%ch
		and    $0xfc,%ch
		mov    %ch,0x80(%esi)
		mov    0x51(%edi),%al
		and    $0x1f,%al
		and    $0xff,%eax
		shl    $0x4,%eax
		decw   data_19f1a6(%eax)
	jump_514c4:
		andb   $0xbf,0x44(%esi)
		xor    %eax,%eax
		mov    0x4(%esp),%ax
		movw   $0x0,0x8e(%esi)
		cmp    $0x1b,%eax
		jne    jump_514f4
		mov    0x40(%esi),%ecx
		test   %ecx,%ecx
		je     jump_514f4
		testb  $0x2,0xc(%ecx)
		je     jump_514f4
		xor    %ecx,%ecx
		mov    %ecx,0x4(%esp)
		mov    %cx,0xa(%esi)
	jump_514f4:
		xor    %eax,%eax
		mov    0x4(%esp),%ax
		cmp    $0x1b,%eax
		je     jump_51526
		mov    0x48(%esi),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		je     jump_51523
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		add    %eax,%edx
	jump_51523:
		mov    %edx,0x40(%esi)
	jump_51526:
		mov    0xd(%esi),%dh
		and    $0xf7,%dh
		mov    %esi,%eax
		mov    %dh,0xd(%esi)
		call   ac_remove_path
		testb  $0x20,0xd(%esi)
		jne    jump_51570
		cmpw   $0x0,0x54(%esi)
		je     jump_51570
		testb  $0x80,0xc(%esi)
		je     jump_5155a
		mov    %esi,%eax
		call   peep_return_to_point
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_5155a:
		mov    $0x8,%edx
		mov    %esi,%eax
		call   ac_person_init_command
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_51570:
		testb  $0x2,0xc(%esi)
		jne    jump_5157e
		mov    0x4(%esp),%eax
		mov    %ax,0xa(%esi)
	jump_5157e:
		mov    0xc(%esp),%eax
		mov    %ax,0x48(%esi)
	jump_51586:
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_kill_person)	/* 0x051590 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    %eax,%edx
		testb  $0x2,0xc(%eax)
		jne    jump_5176f
		xor    %eax,%eax
		mov    0xa(%edx),%ax
		cmp    $0xd,%eax
		je     jump_5176f
		cmp    $0xc,%eax
		je     jump_5176f
		xor    %ebx,%ebx
		mov    gameturn,%ecx
		mov    0x16(%edx),%bx
		add    %ecx,%ebx
		test   $0xf,%bl
		jne    jump_5160e
		xor    %eax,%eax
		mov    0x54(%edx),%ax
		mov    %eax,%ecx
		mov    game_commands,%eax
		shl    $0x5,%ecx
		add    %ecx,%eax
		xor    %ecx,%ecx
		mov    0xa(%eax),%cl
		cmp    $0x6,%ecx
		jne    jump_5160e
		mov    0x40(%edx),%esi
		test   %esi,%esi
		je     jump_5160e
		mov    0x51(%esi),%cl
		mov    (%eax),%eax
		and    $0xff,%ecx
		sar    $0x10,%eax
		cmp    %eax,%ecx
		jne    jump_51760
		test   $0x7f,%bl
		je     jump_51760
	jump_5160e:
		mov    0x40(%edx),%edi
		test   %edi,%edi
		jne    jump_51620
		movw   $0x0,0xa(%edx)
		jmp    jump_5176f
	jump_51620:
		mov    0xc(%edi),%bl
		mov    %edi,%eax
		test   $0x2,%bl
		je     jump_51636
		movw   $0x0,0xa(%edx)
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_51636:
		mov    0x16(%edi),%ax
		mov    %ax,0x8e(%edx)
		mov    %edx,%eax
		call   ac_person_kill_target2
		testb  $0x40,0x44(%edx)
		je     jump_5169f
		testb  $0x80,0xe(%edx)
		je     jump_5169f
		xor    %ebx,%ebx
		mov    0x3c(%edx),%bx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		add    %eax,%ebx
		mov    things,%eax
		shl    $0x3,%ebx
		andb   $0xbf,0xe(%ebx,%eax,1)
		mov    0xc(%edx),%ecx
		movw   $0x0,0xa(%edx)
		and    $0xff7fffbf,%ecx
		mov    %ecx,0xc(%edx)
		mov    0xc(%edx),%ch
		movw   $0x0,0x8e(%edx)
		or     $0x40,%ch
		mov    %ch,0xc(%edx)
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_5169f:
		testb  $0x2,0xc(%edx)
		jne    jump_5176f
		mov    0x8e(%edx),%bx
		test   %bx,%bx
		jne    jump_51706
		testb  $0x20,0xd(%edx)
		jne    jump_516fa
		testb  $0x80,0xe(%edx)
		je     jump_51706
		xor    %ebx,%ebx
		mov    0x3c(%edx),%bx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		add    %eax,%ebx
		mov    things,%eax
		shl    $0x3,%ebx
		andb   $0xbf,0xe(%ebx,%eax,1)
		andl   $0xff7fffbf,0xc(%edx)
		mov    0xc(%edx),%ch
		movw   $0x0,0xa(%edx)
		or     $0x40,%ch
		mov    %ch,0xc(%edx)
		jmp    jump_51706
	jump_516fa:
		mov    0xd(%edx),%al
		mov    %bx,0xa(%edx)
		and    $0xf7,%al
		mov    %al,0xd(%edx)
	jump_51706:
		mov    0x40(%edx),%eax
		test   %eax,%eax
		je     jump_51713
		testb  $0x2,0xc(%eax)
		je     jump_51766
	jump_51713:
		mov    0xd(%edx),%bh
		movw   $0x0,0x8e(%edx)
		test   $0x20,%bh
		jne    jump_51760
		testb  $0x80,0xe(%edx)
		je     jump_51766
		xor    %ebx,%ebx
		mov    0x3c(%edx),%bx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    things,%ebx
		andb   $0xbf,0xe(%ebx,%eax,8)
		andl   $0xff7fffbf,0xc(%edx)
		mov    0xc(%edx),%al
		movw   $0x0,0xa(%edx)
		or     $0x40,%al
		mov    %al,0xc(%edx)
		jmp    jump_51766
	jump_51760:
		movw   $0x0,0xa(%edx)
	jump_51766:
		movw   $0x0,0x8e(%edx)
	jump_5176f:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_destroy_building)	/* 0x051778 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		sub    $0x4,%esp
		mov    %eax,%esi
		xor    %ah,%ah
		mov    0xd(%esi),%dl
		mov    %ah,(%esp)
		test   $0xc,%dl
		je     jump_517a4
		mov    0x8a(%esi),%eax
		sar    $0x10,%eax
		cmp    $0x5,%eax
		jle    jump_517a4
		mov    %dl,%dh
		and    $0xf7,%dh
		mov    %dh,0xd(%esi)
	jump_517a4:
		mov    0x18(%esi),%eax
		mov    0x98(%esi),%edx
		sar    $0x8,%eax
		sar    $0x10,%edx
		sub    %edx,%eax
		imul   %eax,%eax
		mov    0x20(%esi),%ebx
		mov    0x9a(%esi),%edx
		sar    $0x8,%ebx
		sar    $0x10,%edx
		sub    %edx,%ebx
		mov    %ebx,%edx
		imul   %ebx,%edx
		add    %eax,%edx
		xor    %eax,%eax
		mov    0x5b(%esi),%al
		imul   %eax,%eax
		shl    $0xc,%eax
		cmp    %eax,%edx
		jge    jump_517e5
		movb   $0x1,(%esp)
		jmp    jump_517ec
	jump_517e5:
		mov    %esi,%eax
		call   ac_person_goto_point
	jump_517ec:
		mov    0x40(%esi),%edx
		test   %edx,%edx
		jne    jump_51807
		mov    0xd(%esi),%bl
		movw   $0x0,0xa(%esi)
		and    $0xf7,%bl
		mov    %bl,0xd(%esi)
		jmp    jump_51911
	jump_51807:
		cmpb   $0x0,(%esp)
		je     jump_518e0
		mov    0x56(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_518e0
		testb  $0x2,0xc(%edx)
		jne    jump_518e0
		mov    %esi,%eax
		call   ac_get_weapon_range
		mov    %eax,%ebx
		imul   %eax,%ebx
		mov    0x46(%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		mov    $0x1,%ecx
		add    %eax,%edx
		mov    %esi,%eax
		call   ac_can_i_see_building
		test   %eax,%eax
		jle    jump_518b5
		andl   $0xffdff6ff,0xc(%esi)
		mov    0xd(%esi),%ah
		or     $0x8,%ah
		mov    0xf(%esi),%dl
		mov    %ah,0xd(%esi)
		test   $0x10,%dl
		je     jump_5189d
		mov    0x5c(%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %eax,%edx
		mov    things,%eax
		shl    $0x3,%edx
		orb    $0x1,0xf(%edx,%eax,1)
	jump_5189d:
		mov    0x5b(%esi),%bh
		xor    %eax,%eax
		add    $0x2,%bh
		mov    %bh,%al
		mov    %bh,0x5b(%esi)
		cmp    $0x14,%eax
		jle    jump_518c3
		movb   $0x14,0x5b(%esi)
		jmp    jump_518c3
	jump_518b5:
		mov    0xd(%esi),%ch
		xor    %al,%al
		and    $0xf7,%ch
		mov    %al,(%esp)
		mov    %ch,0xd(%esi)
	jump_518c3:
		xor    %eax,%eax
		mov    (%esp),%al
		test   %eax,%eax
		jne    jump_518e0
		mov    0x5b(%esi),%cl
		sub    $0x2,%cl
		mov    %cl,%al
		mov    %cl,0x5b(%esi)
		cmp    $0x2,%eax
		jge    jump_518e0
		movb   $0x2,0x5b(%esi)
	jump_518e0:
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		test   %eax,%eax
		jne    jump_518f9
		mov    0xd(%esi),%ch
		movw   $0x33,0xa(%esi)
		and    $0xf7,%ch
		mov    %ch,0xd(%esi)
	jump_518f9:
		mov    0x40(%esi),%eax
		testb  $0x2,0xc(%eax)
		je     jump_51911
		mov    0xd(%esi),%dh
		movw   $0x0,0xa(%esi)
		and    $0xf7,%dh
		mov    %dh,0xd(%esi)
	jump_51911:
		add    $0x4,%esp
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_im_shoved)	/* 0x051A2C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		mov    %eax,%edx
		mov    0x2c(%eax),%bx
		mov    0x34(%eax),%cx
		xor    %eax,%eax
		mov    0x5c(%edx),%al
		add    $0x7,%eax
		and    $0x7,%eax
		mov    data_15335a(,%eax,4),%eax
		sar    $0x10,%eax
		sar    $0x4,%eax
		mov    %eax,0x2c(%edx)
		xor    %eax,%eax
		mov    0x5c(%edx),%al
		add    $0x7,%eax
		and    $0x7,%eax
		mov    EXPORT_SYMBOL(angle_direction)(,%eax,4),%eax
		sar    $0x10,%eax
		sar    $0x4,%eax
		mov    %eax,0x34(%edx)
		mov    %edx,%eax
		call   ac_person_move
		test   %ax,%ax
		je     jump_51a80
		decb   0x5c(%edx)
		jmp    jump_51a84
	jump_51a80:
		movb   $0x0,0x5c(%edx)
	jump_51a84:
		movswl %bx,%eax
		mov    %eax,0x2c(%edx)
		movswl %cx,%eax
		mov    %eax,0x34(%edx)
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_limit_mood)	/* 0x051C04 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		mov    %eax,%ebx
		mov    %edx,%ecx
		mov    things,%edx
		cmp    %edx,%eax
		jb     jump_51c1f
		lea    0x29040(%edx),%eax
		cmp    %eax,%ebx
		jbe    jump_51c25
	jump_51c1f:
		xor    %eax,%eax
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_51c25:
		mov    0xa0(%ebx),%esi
		sar    $0x10,%esi
		test   %esi,%esi
		jne    jump_51c38
		xor    %eax,%eax
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_51c38:
		mov    0x9e(%ebx),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		shl    $0x3,%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		idiv   %esi
		movswl %cx,%edx
		cmp    %eax,%edx
		jle    jump_51c62
		mov    %eax,%ecx
	jump_51c62:
		mov    0x9e(%ebx),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,8),%edx
		mov    0xa0(%ebx),%ebx
		neg    %edx
		sar    $0x10,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		movswl %cx,%edx
		cmp    %eax,%edx
		jge    jump_51c9b
		mov    %eax,%ecx
	jump_51c9b:
		movswl %cx,%eax
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_stamina)	/* 0x051CA4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		mov    %eax,%ebx
		xor    %eax,%eax
		mov    0x9(%ebx),%al
		cmp    $0x3,%eax
		jne    jump_51d55
		mov    0x9e(%ebx),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    0xa0(%ebx),%esi
		lea    0x0(,%eax,8),%edx
		sar    $0x10,%esi
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %esi
		mov    0x70(%ebx),%ecx
		sar    $0x10,%ecx
		cmp    %eax,%ecx
		jle    jump_51cf6
		mov    %ax,0x72(%ebx)
		jmp    jump_51d0a
	jump_51cf6:
		mov    %eax,%edx
		neg    %edx
		cmp    %edx,%ecx
		jge    jump_51d0a
		mov    %eax,%edx
		mov    %ax,0x72(%ebx)
		neg    %edx
		mov    %dx,0x72(%ebx)
	jump_51d0a:
		mov    0xa0(%ebx),%ax
		cmp    0xa2(%ebx),%ax
		jge    jump_51d3f
		mov    0x70(%ebx),%ax
		shl    $0x7,%eax
		xor    %edx,%edx
		shr    $0xd,%ax
		mov    %ax,%dx
		mov    0x9e(%ebx),%eax
		add    $0x2,%edx
		sar    $0x10,%eax
		add    %edx,%eax
		mov    %ax,0xa0(%ebx)
	jump_51d3f:
		mov    0x9e(%ebx),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_51d55
		movw   $0x0,0xa0(%ebx)
	jump_51d55:
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_check_persons_target)	/* 0x051D5C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		mov    %eax,%ebx
		call   ac_get_weapon_range
		lea    0x100(%eax),%esi
		cmp    $0x400,%esi
		jl     jump_51e54
		mov    0x40(%ebx),%edx
		test   %edx,%edx
		je     jump_51d88
		mov    %edx,%eax
		testb  $0x2,0xc(%edx)
		je     jump_51db1
	jump_51d88:
		xor    %eax,%eax
		mov    0x9(%ebx),%al
		cmp    $0xf,%eax
		jne    jump_51d99
		movl   $0x0,0x40(%ebx)
	jump_51d99:
		mov    0xd(%ebx),%al
		test   $0x10,%al
		jne    jump_51e54
		mov    %al,%ah
		and    $0xf7,%ah
		mov    %ah,0xd(%ebx)
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_51db1:
		mov    0x51(%eax),%cl
		xor    %edx,%edx
		and    $0x7f,%cl
		mov    %cl,%dl
		mov    0x51(%ebx),%cl
		and    $0x7f,%cl
		and    $0xff,%ecx
		cmp    %edx,%ecx
		jne    jump_51df7
		mov    0x51(%eax),%al
		and    $0xff,%eax
		cmp    $0x20,%eax
		jge    jump_51df7
		xor    %eax,%eax
		mov    0x51(%ebx),%al
		cmp    $0x20,%eax
		jge    jump_51df7
		mov    0xd(%ebx),%ch
		movl   $0x0,0x40(%ebx)
		and    $0xf7,%ch
		mov    %ch,0xd(%ebx)
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_51df7:
		mov    0x40(%ebx),%ecx
		mov    0x18(%ebx),%eax
		sub    0x18(%ecx),%eax
		sar    $0x8,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    0x40(%ebx),%edx
		mov    %eax,%ecx
		mov    0x20(%ebx),%eax
		sub    0x20(%edx),%eax
		sar    $0x8,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%ecx
		jle    jump_51e23
		sar    %eax
		jmp    jump_51e25
	jump_51e23:
		sar    %ecx
	jump_51e25:
		add    %ecx,%eax
		cmp    %esi,%eax
		jle    jump_51e54
		xor    %eax,%eax
		mov    0x9(%ebx),%al
		cmp    $0xf,%eax
		jne    jump_51e3c
		movl   $0x0,0x40(%ebx)
	jump_51e3c:
		mov    0xd(%ebx),%dh
		mov    0x80(%ebx),%cl
		and    $0xf7,%dh
		or     $0x40,%cl
		mov    %dh,0xd(%ebx)
		mov    %cl,0x80(%ebx)
	jump_51e54:
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_check_persons_target2)	/* 0x051EC8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		mov    %eax,%ebx
		mov    0x8c(%eax),%ecx
		sar    $0x10,%ecx
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		shl    $0x2,%eax
		add    %ecx,%eax
		mov    things,%ecx
		shl    $0x3,%eax
		add    %eax,%ecx
		mov    %ebx,%eax
		call   ac_get_weapon_range
		lea    0x80(%eax),%edi
		cmp    $0x400,%edi
		jl     jump_51f9d
		test   %ecx,%ecx
		je     jump_51f15
		testb  $0x2,0xc(%ecx)
		je     jump_51f1e
	jump_51f15:
		andb   $0xf7,0xd(%ebx)
		jmp    jump_51f9d
	jump_51f1e:
		mov    0x51(%ebx),%al
		and    $0x7f,%al
		mov    0x51(%ecx),%dl
		and    $0x7f,%dl
		and    $0xff,%eax
		movzbl %dl,%esi
		cmp    %esi,%eax
		jne    jump_51f62
		xor    %esi,%eax
		mov    0x51(%ecx),%al
		cmp    $0x20,%eax
		jge    jump_51f62
		xor    %eax,%eax
		mov    0x51(%ebx),%al
		cmp    $0x20,%eax
		jge    jump_51f62
		mov    0xd(%ebx),%cl
		movw   $0x0,0x8e(%ebx)
		and    $0xf7,%cl
		mov    %cl,0xd(%ebx)
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_51f62:
		mov    0x18(%ebx),%eax
		sub    0x18(%ecx),%eax
		sar    $0x8,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%esi
		mov    0x20(%ecx),%ebp
		mov    0x20(%ebx),%eax
		sub    %ebp,%eax
		sar    $0x8,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%esi
		jle    jump_51f8a
		sar    %eax
		jmp    jump_51f8c
	jump_51f8a:
		sar    %esi
	jump_51f8c:
		add    %esi,%eax
		cmp    %edi,%eax
		jle    jump_51f9d
		andb   $0xf7,0xd(%ebx)
		orb    $0x40,0x80(%ebx)
	jump_51f9d:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_get_soul)	/* 0x051FA4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		mov    %eax,%ebx
		mov    %edx,%ecx
		call   ac_get_new_sthing
		test   %ax,%ax
		je     jump_5201c
		mov    0x47(%ebx),%dl
		or     $0x4,%dl
		cwtl
		mov    %dl,0x47(%ebx)
		mov    %eax,%edx
		shl    $0x4,%edx
		sub    %eax,%edx
		lea    0x0(,%edx,4),%esi
		mov    EXPORT_SYMBOL(sthings),%edx
		add    %esi,%edx
		mov    0x18(%ebx),%esi
		mov    %esi,0x18(%edx)
		mov    0x1c(%ebx),%esi
		mov    %esi,0x1c(%edx)
		mov    0x20(%ebx),%ebx
		movb   $0x25,0x9(%edx)
		movw   $0x0,0xa(%edx)
		mov    %ebx,0x20(%edx)
		mov    0x16(%ecx),%bx
		movw   $0x0,0x2c(%edx)
		movw   $0x0,0x2e(%edx)
		movw   $0x0,0x30(%edx)
		mov    %bx,0x38(%edx)
		call   ac_add_node_sthing
		movw   $0xf,0x28(%edx)
		movw   $0x32,0x2a(%edx)
	jump_5201c:
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_soul)	/* 0x052020 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x14,%esp
		mov    %eax,%esi
		mov    0x18(%eax),%eax
		mov    %eax,(%esp)
		mov    0x20(%esi),%eax
		mov    0x1c(%esi),%ebp
		mov    %eax,0x4(%esp)
		mov    0xa(%esi),%ax
		test   %ax,%ax
		jbe    jump_52067
		cmp    $0x1,%ax
		je     jump_520f7
	jump_5204e:
		lea    0x4(%esp),%ecx
		mov    %esp,%edx
		mov    %ebp,%ebx
		mov    %esi,%eax
		call   move_smapwho
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_52067:
		mov    0x2c(%esi),%eax
		sar    $0x10,%eax
		add    %eax,%ebp
		mov    gameturn,%eax
		shl    $0x5,%eax
		lea    0x780(%eax),%edx
		and    $0x7ff,%edx
		and    $0x7ff,%eax
		lea    0x0(,%edx,4),%ebx
		lea    0x0(,%eax,4),%edx
		mov    EXPORT_SYMBOL(lbSinTable)(%ebx),%ecx
		mov    EXPORT_SYMBOL(lbSinTable)(%edx),%eax
		sub    %ecx,%eax
		mov    (%esp),%edi
		sar    %eax
		add    %eax,%edi
		mov    EXPORT_SYMBOL(lbSinTable)+2048(%edx),%eax
		sub    EXPORT_SYMBOL(lbSinTable)+2048(%ebx),%eax
		mov    0x4(%esp),%ebx
		sar    %eax
		add    %eax,%ebx
		mov    %edi,(%esp)
		mov    %ebx,0x4(%esp)
		mov    0x2f(%esi),%dh
		add    $0x2,%dh
		mov    0x28(%esi),%ax
		mov    %dh,0x2f(%esi)
		movswl %ax,%edx
		dec    %eax
		mov    %ax,0x28(%esi)
		test   %edx,%edx
		jne    jump_5204e
		mov    0xa(%esi),%bx
		movw   $0x0,0x28(%esi)
		inc    %ebx
		mov    %bx,0xa(%esi)
		jmp    jump_5204e
	jump_520f7:
		xor    %edx,%edx
		mov    0x38(%esi),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		mov    things,%edi
		add    %edx,%eax
		mov    0x28(%esi),%dx
		shl    $0x3,%eax
		inc    %edx
		add    %eax,%edi
		mov    %dx,0x28(%esi)
		mov    0x18(%edi),%eax
		sub    0x18(%esi),%eax
		sar    $0x8,%eax
		mov    0x1c(%esi),%ebx
		mov    %eax,0xc(%esp)
		mov    0x1c(%edi),%eax
		sub    %ebx,%eax
		mov    0x20(%esi),%ecx
		mov    %eax,%ebx
		mov    0x20(%edi),%eax
		sub    %ecx,%eax
		mov    %eax,%ecx
		mov    0xc(%esp),%eax
		imul   %eax,%eax
		sar    $0x8,%ecx
		mov    %eax,0x8(%esp)
		mov    %ecx,%eax
		imul   %ecx,%eax
		mov    0x8(%esp),%edx
		sar    $0x8,%ebx
		add    %eax,%edx
		mov    %ebx,%eax
		imul   %ebx,%eax
		add    %edx,%eax
		call   ac_LbSqrL
		mov    %eax,0x10(%esp)
		test   %eax,%eax
		jne    jump_52178
		movl   $0x1,0x10(%esp)
	jump_52178:
		mov    0xc(%esp),%edx
		shl    $0x8,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idivl  0x10(%esp)
		mov    %ebx,%edx
		mov    %eax,0xc(%esp)
		shl    $0x8,%edx
		mov    0x10(%esp),%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %ecx,%edx
		mov    %eax,%ebx
		shl    $0x8,%edx
		mov    0x10(%esp),%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %bx,0x2e(%esi)
		mov    %eax,%ecx
		mov    0xc(%esp),%eax
		mov    %ax,0x2c(%esi)
		mov    0x10(%esp),%eax
		mov    %cx,0x30(%esi)
		cmp    $0x80,%eax
		jge    jump_52247
		testb  $0x10,0x44(%edi)
		jne    jump_521eb
		push   $0x1
		mov    0xe(%esp),%edx
		movswl %cx,%ecx
		movswl %bx,%ebx
		mov    %edi,%eax
		sar    $0x10,%edx
		call   init_recoil
	jump_521eb:
		mov    0x3b(%edi),%dl
		inc    %dl
		xor    %eax,%eax
		mov    %dl,0x3b(%edi)
		mov    0x7e(%edi),%ax
		mov    0x38(%edi),%edx
		add    %eax,%eax
		sar    $0x10,%edx
		cmp    %eax,%edx
		jle    jump_5220f
		mov    0x7e(%edi),%ax
		add    %eax,%eax
		mov    %ax,0x3a(%edi)
	jump_5220f:
		push   $0x1
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x37,%edx
		mov    %edi,%eax
		call   ac_play_dist_sample
		mov    %esi,%eax
		call   ac_delete_snode
		mov    0x14(%esi),%eax
		sar    $0x10,%eax
		call   ac_remove_sthing
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_52247:
		mov    0x2a(%esi),%edx
		mov    0x26(%esi),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		imul   %edx,%eax
		mov    (%esp),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    %edx,(%esp)
		mov    0x2c(%esi),%edx
		mov    0x26(%esi),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		imul   %eax,%edx
		shl    $0x2,%edx
		add    %edx,%ebp
		mov    0x2e(%esi),%edx
		sar    $0x10,%edx
		imul   %edx,%eax
		mov    0x4(%esp),%ebx
		shl    $0x2,%eax
		add    %eax,%ebx
		mov    %ebx,0x4(%esp)
		jmp    jump_5204e


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_player_weapon_time)	/* 0x052290 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		mov    %eax,%ebp
		testb  $0x8,0x45(%eax)
		je     jump_522a5
		xor    %eax,%eax
		jmp    jump_5237a
	jump_522a5:
		xor    %eax,%eax
		mov    0x54(%ebp),%si
		mov    0x54(%ebp),%ax
		xor    %edx,%edx
		sar    $0x2,%eax
		and    $0x3,%esi
		mov    %eax,%edi
		jmp    jump_522bc
	jump_522bb:
		inc    %edx
	jump_522bc:
		xor    %eax,%eax
		mov    %dx,%ax
		cmp    $0x1f,%eax
		jge    jump_522f3
		xor    %ebx,%ebx
		mov    %di,%bx
		imul   $0x1aa,%ebx,%ebx
		xor    %ecx,%ecx
		mov    %si,%cx
		shl    $0x5,%ecx
		add    %ecx,%ebx
		add    %ebx,%eax
		mov    data_1a63fa(%eax),%bl
		test   %bl,%bl
		je     jump_522bb
		mov    %bl,%bh
		dec    %bh
		mov    %bh,data_1a63fa(%eax)
		jmp    jump_522bb
	jump_522f3:
		testb  $0x10,0xf(%ebp)
		je     jump_52341
		mov    0x5c(%ebp),%ebx
		sar    $0x10,%ebx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    things,%ebx
		mov    0x8(%ebx,%eax,8),%al
		and    $0xff,%eax
		cmp    $0x33,%eax
		je     jump_52326
		cmp    $0x3b,%eax
		jne    jump_52341
	jump_52326:
		mov    0x56(%ebp),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jle    jump_52338
		dec    %eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_52338:
		xor    %eax,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_52341:
		xor    %ebx,%ebx
		mov    %di,%bx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		sub    %ebx,%eax
		add    %eax,%eax
		mov    %eax,%ebx
		shl    $0x2,%eax
		sub    %ebx,%eax
		mov    %eax,%ebx
		xor    %eax,%eax
		mov    %si,%ax
		shl    $0x5,%eax
		add    %eax,%ebx
		xor    %eax,%eax
		mov    0x99(%ebp),%al
		mov    data_1a63fa(%ebx,%eax,1),%al
		xor    %ah,%ah
	jump_5237a:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_set_player_weapon_turn)	/* 0x052384 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		mov    %eax,%ebx
		mov    %edx,%ecx
		testb  $0x8,0x45(%eax)
		je     jump_52395
		xor    %eax,%eax
		pop    %ecx
		pop    %ebx
		ret
	jump_52395:
		xor    %edx,%edx
		mov    0x54(%ebx),%dx
		sar    $0x2,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    0x54(%ebx),%dx
		xor    %dh,%dh
		and    $0x3,%dl
		and    $0xffff,%edx
		shl    $0x5,%edx
		add    %eax,%edx
		xor    %eax,%eax
		mov    0x99(%ebx),%al
		mov    %cl,data_1a63fa(%edx,%eax,1)
		xor    %eax,%eax
		mov    %cx,0x58(%ebx)
		pop    %ecx
		pop    %ebx
		ret

vtable_5246c:
		.long   func_52d2b
		.long   func_52d31
		.long   func_52d37
		.long   func_52d3d


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_weapon)	/* 0x05247C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x48,%esp
		mov    %eax,%esi
		testb  $0x10,0xd(%eax)
		je     jump_52527
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(local_player_no),%bl
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		sub    %ebx,%eax
		add    %eax,%eax
		lea    0x0(,%eax,4),%edx
		sub    %eax,%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(players)+0x088(%edx),%ebx # players[0].DirectControl[0]
		mov    0x16(%esi),%ax
		cmp    %ebx,%eax
		jne    jump_52527
		mov    0x94(%esi),%eax
		sar    $0x10,%eax
		cmp    $0x32,%eax
		jge    jump_52500
		mov    $0x5d,%edx
		xor    %ebx,%ebx
		xor    %eax,%eax
		call   ac_IsSamplePlaying
		test   %al,%al
		jne    jump_52527
		push   $0x3
		push   $0xffffffff
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x5d,%edx
		xor    %eax,%eax
		call   ac_play_sample_using_heap
		jmp    jump_52527
	jump_52500:
		testb  $0x7,gameturn
		jne    jump_52527
		mov    $0x5d,%edx
		xor    %ebx,%ebx
		xor    %eax,%eax
		call   ac_IsSamplePlaying
		test   %al,%al
		je     jump_52527
		mov    $0x5d,%edx
		xor    %eax,%eax
		call   ac_stop_sample_using_heap
	jump_52527:
		mov    0x80(%esi),%dh
		and    $0xbf,%dh
		mov    0xd(%esi),%bl
		mov    %dh,0x80(%esi)
		test   $0x8,%bl
		je     jump_52705
		mov    0x99(%esi),%bh
		test   %bh,%bh
		je     jump_52609
		xor    %eax,%eax
		mov    %bh,%al
		cmp    $0x12,%eax
		je     jump_52609
		cmp    $0x1d,%eax
		je     jump_52609
		testb  $0x8,0x46(%esi)
		je     jump_52609
		mov    %esi,%eax
		xor    %edx,%edx
		call   ac_gun_out_anim
		xor    %edx,%edx
		mov    0x8(%esi),%dl
		mov    %al,0x6c(%esi)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		xor    %edx,%edx
		dec    %eax
		mov    0x8(%esi),%dl
		mov    %ax,0x26(%esi)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		add    %eax,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    0x57(%esi),%al
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		movw   $0x30,0x28(%esi)
		mov    0x46(%esi),%ch
		movw   $0x30,0x2a(%esi)
		and    $0xf7,%ch
		mov    %ax,0x24(%esi)
		mov    %esi,%eax
		mov    %ch,0x46(%esi)
		call   calc_person_speed
		mov    %ax,0x38(%esi)
	jump_52609:
		testb  $0x10,0xf(%esi)
		je     jump_52641
		mov    0x5c(%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		mov    0xa(%edx,%eax,8),%ax
		and    $0xffff,%eax
		cmp    $0x45,%eax
		jne    jump_52641
		andb   $0xf7,0xd(%esi)
		jmp    jump_52705
	jump_52641:
		testb  $0x20,0xf(%esi)
		jne    jump_5264e
		mov    %esi,%eax
		call   ac_check_persons_target
	jump_5264e:
		cmpw   $0x0,0x8e(%esi)
		je     jump_52664
		mov    %esi,%eax
		call   ac_check_persons_target2
		jmp    jump_52705
	jump_52664:
		xor    %eax,%eax
		mov    0x9(%esi),%al
		cmp    $0xf,%eax
		je     jump_52705
		testb  $0x20,0xd(%esi)
		jne    jump_52705
		mov    0x40(%esi),%ecx
		test   %ecx,%ecx
		je     jump_52705
		mov    0x18(%ecx),%eax
		mov    0x20(%ecx),%edx
		mov    0x20(%esi),%ebp
		mov    0x18(%esi),%edi
		sub    %ebp,%edx
		sub    %edi,%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		neg    %edx
		call   ac_arctan
		cwtl
		add    $0x80,%eax
		and    $0x7ff,%eax
		xor    %edx,%edx
		sar    $0x8,%eax
		mov    0x57(%esi),%dl
		mov    %eax,%ebx
		and    $0xffff,%eax
		cmp    %edx,%eax
		je     jump_52705
		xor    %edx,%edx
		mov    0x8(%esi),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		add    %eax,%eax
		add    %edx,%eax
		mov    %bl,0x57(%esi)
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    %bl,%al
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		mov    %ax,0x24(%esi)
	jump_52705:
		testb  $0x8,0xe(%esi)
		jne    jump_52716
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0x2b,%eax
		jne    jump_5275d
	jump_52716:
		xor    %edx,%edx
		mov    0x3c(%esi),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		mov    0x40(%eax),%edx
		test   %edx,%edx
		je     jump_5275d
		xor    %ebx,%ebx
		mov    0xa(%edx),%bx
		cmp    $0xd,%ebx
		jne    jump_5275d
		testb  $0xc,0xd(%eax)
		je     jump_5275d
		orb    $0x8,0xd(%esi)
		mov    0xf(%esi),%ch
		mov    %edx,0x40(%esi)
		and    $0xdf,%ch
		mov    %ch,0xf(%esi)
	jump_5275d:
		testb  $0x8,0xa7(%esi)
		je     jump_527ac
		xor    %eax,%eax
		mov    0x38(%esi),%edx
		mov    0x7e(%esi),%ax
		sar    $0x10,%edx
		sar    $0x3,%eax
		cmp    %eax,%edx
		jge    jump_527ac
		push   $0x1
		mov    $0x40,%ecx
		mov    0x7e(%esi),%ax
		mov    $0x7f,%ebx
		mov    %ax,0x3a(%esi)
		push   $0x0
		mov    0xa7(%esi),%ah
		mov    $0x2,%edx
		and    $0xf7,%ah
		push   $0x64
		mov    %ah,0xa7(%esi)
		mov    %esi,%eax
		call   ac_play_dist_sample
	jump_527ac:
		mov    0x56(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_52862
		testb  $0x2,0x45(%esi)
		jne    jump_5284e
		jmp    jump_52862
	jump_527c9:
		testb  $0x20,0xd(%esi)
		jne    jump_527d3
		xor    %eax,%eax
		jmp    jump_527e0
	jump_527d3:
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
	jump_527e0:
		add    $0x50,%eax
		movswl %ax,%edx
		xor    %eax,%eax
		mov    0x16(%esi),%ax
		call   ac_ReleaseLoopedSample
		andb   $0xfd,0x45(%esi)
		jmp    jump_52862
	jump_527f7:
		testb  $0x20,0xd(%esi)
		jne    jump_52801
		xor    %eax,%eax
		jmp    jump_5280e
	jump_52801:
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
	jump_5280e:
		add    $0x54,%eax
		movswl %ax,%edx
		xor    %eax,%eax
		mov    0x16(%esi),%ax
		mov    $0x40,%ecx
		call   ac_ReleaseLoopedSample
		push   $0x1
		mov    0x54(%esi),%ax
		mov    $0x7f,%ebx
		xor    %ah,%ah
		push   $0x0
		and    $0x3,%al
		xor    %edx,%edx
		add    $0x58,%eax
		push   $0x64
		mov    %ax,%dx
		mov    %esi,%eax
		call   ac_play_dist_sample
		andb   $0xfd,0x45(%esi)
		jmp    jump_52862
	jump_5284e:
		mov    0x99(%esi),%al
		cmp    $0x1,%al
		jb     jump_52862
		jbe    jump_527c9
		cmp    $0x2,%al
		je     jump_527f7
	jump_52862:
		cmpw   $0x0,0xa2(%esi)
		je     jump_52873
		mov    %esi,%eax
		call   ac_process_stamina
	jump_52873:
		mov    0x96(%esi),%ax
		cmp    0x94(%esi),%ax
		jge    jump_528a5
		testb  $0x1,0x47(%esi)
		je     jump_52892
		mov    0x94(%esi),%ax
		jmp    jump_5289e
	jump_52892:
		cmpw   $0x0,0x58(%esi)
		jne    jump_528a5
		add    $0x2,%eax
	jump_5289e:
		mov    %ax,0x96(%esi)
	jump_528a5:
		xor    %edx,%edx
		mov    0x99(%esi),%dl
		imul   $0x19,%edx,%eax # sizeof(struct WeaponDef)
		mov    $EXPORT_SYMBOL(weapon_defs),%edi
		add    %eax,%edi
		testb  $0x20,0xd(%esi)
		je     jump_528cf
		mov    $0x1,%eax
		jmp    jump_528d4
	jump_528cf:
		mov    $0x7,%eax
	jump_528d4:
		mov    0x70(%esi),%dx
		shl    $0x7,%edx
		shr    $0xd,%dx
		and    $0xffff,%edx
		cmp    $0x4,%edx
		jne    jump_528f6
		movw   $0x7d00,0x3a(%esi)
		movw   $0x7d00,0x7e(%esi)
	jump_528f6:
		test   %eax,gameturn
		jne    jump_5297a
		mov    0x38(%esi),%edx
		xor    %eax,%eax
		sar    $0x10,%edx
		mov    0x7e(%esi),%ax
		cmp    %eax,%edx
		jge    jump_5297a
		mov    0x70(%esi),%ax
		shl    $0x7,%eax
		shr    $0xd,%ax
		and    $0xffff,%eax
		shl    $0x2,%eax
		add    $0x4,%eax
		mov    %al,%bl
		mov    0x70(%esi),%eax
		sar    $0x10,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0x20,%eax
		jle    jump_5293f
		shr    $0x2,%bl
		jmp    jump_52951
	jump_5293f:
		mov    0x70(%esi),%eax
		sar    $0x10,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0x10,%eax
		jle    jump_52951
		shr    %bl
	jump_52951:
		mov    0x70(%esi),%eax
		sar    $0x10,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0x40,%eax
		jle    jump_5296c
		testb  $0x2,gameturn
		je     jump_5296c
		xor    %bl,%bl
	jump_5296c:
		xor    %eax,%eax
		mov    0x3a(%esi),%dx
		mov    %bl,%al
		add    %eax,%edx
		mov    %dx,0x3a(%esi)
	jump_5297a:
		mov    0xd(%esi),%bl
		mov    0x58(%esi),%dx
		test   $0x20,%bl
		je     jump_52991
		mov    %esi,%eax
		call   ac_player_weapon_time
		mov    %ax,0x58(%esi)
	jump_52991:
		test   %dx,%dx
		je     jump_52b79
		testb  $0x20,0xd(%esi)
		jne    jump_529a4
		decw   0x58(%esi)
	jump_529a4:
		mov    0x56(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_52b79
		mov    0x6c(%esi),%al
		cmp    $0xe,%eax
		je     jump_529c3
		cmp    $0xf,%eax
		jne    jump_52a45
	jump_529c3:
		xor    %eax,%eax
		mov    0x9(%esi),%al
		cmp    $0xf,%eax
		je     jump_52a45
		mov    %esi,%eax
		xor    %edx,%edx
		call   ac_gun_out_anim
		xor    %edx,%edx
		mov    0x8(%esi),%dl
		mov    %al,0x6c(%esi)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		add    %eax,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    0x57(%esi),%al
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		xor    %edx,%edx
		mov    0x8(%esi),%dl
		mov    %ax,0x24(%esi)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		xor    %edx,%edx
		mov    0x6c(%esi),%dl
		add    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,4),%ax
		dec    %eax
		mov    %ax,0x26(%esi)
	jump_52a45:
		mov    0x99(%esi),%al
		cmp    $0x2,%al
		jb     jump_52b71
		jbe    jump_52b01
		cmp    $0x8,%al
		jne    jump_52b79
		mov    0x94(%esi),%edx
		xor    %eax,%eax
		sar    $0x10,%edx
		mov    0x8(%edi),%ax
		cmp    %eax,%edx
		jle    jump_52a7e
		testb  $0x8,0xd(%esi)
		jne    jump_52b79
	jump_52a7e:
		xor    %eax,%eax
		mov    $0xe,%edx
		mov    0x16(%esi),%ax
		call   ac_stop_sample_using_heap
		push   $0x2
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0xf,%edx
		mov    %esi,%eax
		call   ac_play_dist_sample
		andb   $0xfd,0x45(%esi)
		jmp    jump_52b79
	jump_52ab3:
		mov    0x94(%esi),%edx
		xor    %eax,%eax
		sar    $0x10,%edx
		mov    0x8(%edi),%ax
		cmp    %eax,%edx
		jle    jump_52ad0
		testb  $0x8,0xd(%esi)
		jne    jump_52b79
	jump_52ad0:
		testb  $0x20,0xd(%esi)
		jne    jump_52ada
		xor    %eax,%eax
		jmp    jump_52ae7
	jump_52ada:
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
	jump_52ae7:
		add    $0x50,%eax
		movswl %ax,%edx
		xor    %eax,%eax
		mov    0x16(%esi),%ax
		call   ac_ReleaseLoopedSample
		andb   $0xfd,0x45(%esi)
		jmp    jump_52b79
	jump_52b01:
		mov    0x94(%esi),%eax
		xor    %edx,%edx
		sar    $0x10,%eax
		mov    0x8(%edi),%dx
		cmp    %edx,%eax
		jle    jump_52b1a
		testb  $0x8,0xd(%esi)
		jne    jump_52b79
	jump_52b1a:
		testb  $0x20,0xd(%esi)
		jne    jump_52b24
		xor    %eax,%eax
		jmp    jump_52b31
	jump_52b24:
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
	jump_52b31:
		add    $0x54,%eax
		movswl %ax,%edx
		xor    %eax,%eax
		mov    0x16(%esi),%ax
		mov    $0x40,%ecx
		call   ac_ReleaseLoopedSample
		push   $0x1
		mov    0x54(%esi),%ax
		mov    $0x7f,%ebx
		xor    %ah,%ah
		push   $0x0
		and    $0x3,%al
		xor    %edx,%edx
		add    $0x58,%eax
		push   $0x64
		mov    %ax,%dx
		mov    %esi,%eax
		call   ac_play_dist_sample
		andb   $0xfd,0x45(%esi)
		jmp    jump_52b79
	jump_52b71:
		cmp    $0x1,%al
		je     jump_52ab3

	jump_52b79:
		mov    0xf(%esi),%cl
		test   $0x40,%cl /* (p_person->Flag & TngF_Unkn40000000) */
		jne    jump_536c0
		test   $0x10,%cl
		je     jump_52bd9
		mov    0x5c(%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %eax,%edx
		mov    things,%eax
		shl    $0x3,%edx
		add    %edx,%eax
		testb  $0x2,0x44(%eax)
		jne    jump_536c0
		xor    %edx,%edx
		mov    0x8(%eax),%dl
		cmp    $0x33,%edx
		jne    jump_52bc8
		mov    %esi,%edx
		call   ac_process_vehicle_weapon
		jmp    jump_536c0
	jump_52bc8:
		cmp    $0x3b,%edx
		jne    jump_52bd9
		mov    %esi,%edx
		call   ac_process_mech_weapon
		jmp    jump_536c0
	jump_52bd9:
		xor    %eax,%eax
		mov    0x99(%esi),%al
		cmp    $0x18,%eax
		jne    jump_52c41
		xor    %eax,%eax
		mov    gameturn,%edx
		mov    0x16(%esi),%ax
		add    %edx,%eax
		test   $0x7,%al
		jne    jump_536c0
		lea    0x40(%esp),%ebx
		mov    $0x2,%edx
		mov    %esi,%eax
		call   ac_process_persuadertron
		movswl %ax,%edx
		test   %edx,%edx
		jle    jump_536c0
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		mov    %esi,%edx
		call   ac_get_soul
		add    $0x48,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_52c41:
		cmp    $0x7,%eax
		jne    jump_52c8f
		lea    0x3c(%esp),%ebx
		mov    %esi,%eax
		xor    %edx,%edx
		call   ac_process_persuadertron
		movswl %ax,%edx
		test   %edx,%edx
		jle    jump_536c0
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		xor    %ebx,%ebx
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		mov    0x3c(%esp),%bx
		add    %edx,%eax
		mov    %esi,%edx
		call   ac_set_person_persuaded
		add    $0x48,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_52c8f:
		cmp    $0x15,%eax
		jne    jump_52cdf
		lea    0x44(%esp),%ebx
		mov    $0x1,%edx
		mov    %esi,%eax
		call   ac_process_persuadertron
		movswl %ax,%edx
		test   %edx,%edx
		jle    jump_536c0
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		xor    %ebx,%ebx
		add    %eax,%edx
		mov    things,%eax
		shl    $0x3,%edx
		mov    0x44(%esp),%bx
		add    %edx,%eax
		mov    %esi,%edx
		call   ac_set_person_persuaded
		add    $0x48,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_52cdf:
		cmp    $0x9,%eax
		jne    jump_52cf0
		mov    %esi,%eax
		call   ac_init_taser
		jmp    jump_52db7
	jump_52cf0:
		cmp    $0x1e,%eax
		jne    jump_52db7
		testb  $0x40,0x46(%esi)
		jne    jump_52db7
		mov    0x8(%esi),%al
		movb   $0x0,0x6c(%esi)
		mov    %al,0x81(%esi)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3,%al

		and    $0xffff,%eax  /* switch */
		cmp    $0x3,%eax
		ja     jump_52d41
		jmp    *%cs:vtable_5246c(,%eax,4)
func_52d2b: /* case 0 */
		movb   $0x4,0x8(%esi)
		jmp    jump_52d41
func_52d31:  /* case 1 */
		movb   $0x5,0x8(%esi)
		jmp    jump_52d41
func_52d37:  /* case 2 */
		movb   $0xd,0x8(%esi)
		jmp    jump_52d41
func_52d3d:  /* case 3 */
		movb   $0xe,0x8(%esi)
	jump_52d41: /* end of switch */

		xor    %edx,%edx
		mov    0x8(%esi),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		add    %eax,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    0x57(%esi),%al
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		xor    %edx,%edx
		mov    0x8(%esi),%dl
		mov    %ax,0x24(%esi)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		mov    0x46(%esi),%bl
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		or     $0x40,%bl
		dec    %eax
		mov    %bl,0x46(%esi)
		mov    %ax,0x26(%esi)

	jump_52db7: /* inlined init_clone_disguise() */
		testb  $0x40,0x46(%esi)
		je     jump_52e96
		cmpb   $0x0,in_network_game
		je     jump_52de9
		xor    %edx,%edx
		mov    0x94(%esi),%eax
		mov    EXPORT_SYMBOL(weapon_defs)+758,%dx # sizeof(struct WeaponDef) * 30 + 8
		sar    $0x10,%eax
		sar    %edx
		sub    %edx,%eax
		mov    %ax,0x96(%esi)
		jmp    jump_52df6
	jump_52de9:
		mov    EXPORT_SYMBOL(weapon_defs)+758,%ax # sizeof(struct WeaponDef) * 30 + 8
		sub    %ax,0x96(%esi)
	jump_52df6:
		testb  $0x20,0xd(%esi)
		je     jump_52e10
		mov    0x94(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_52e10
		movb   $0x0,0x99(%esi)
	jump_52e10:
		xor    %eax,%eax
		mov    0x99(%esi),%al
		cmp    $0x1e,%eax
		je     jump_52e96
		andb   $0xbf,0x46(%esi)
		xor    %edx,%edx
		mov    0x81(%esi),%al
		mov    %al,%dl
		mov    %al,0x8(%esi)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		xor    %edx,%edx
		and    $0xffff,%eax
		mov    0x57(%esi),%dl
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		xor    %edx,%edx
		mov    0x8(%esi),%dl
		mov    %ax,0x24(%esi)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		dec    %eax
		mov    %ax,0x26(%esi)
        /* end of inlined init_clone_disguise() */

	jump_52e96:
		mov    0x56(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		je     jump_52ead
		xor    %edx,%edx
		mov    0x4(%edi),%dx
		sub    $0x6,%edx /* wdef->ReFireDelay - 6 */
		cmp    %edx,%eax
		jge    jump_52eb1
	jump_52ead:
		movb   $0x0,0x78(%esi)
	jump_52eb1:
		xor    %eax,%eax
		mov    0x99(%esi),%al
		cmp    $0x1d,%eax /* CurrentWeapon == WEP_EXPLWIRE */
		jne    jump_52f04
		mov    0x44(%esi),%cl
		test   $0x1,%cl /* if (person->Flag2 & 0x01) */
		je     jump_52ee9
		testb  $0x8,0xd(%esi)
		jne    jump_52ed1
		test   $0x4,%cl
		je     jump_52edd
	jump_52ed1:
		mov    %esi,%eax
		call   ac_update_razor_wire
		jmp    jump_53294
	jump_52edd:
		mov    %esi,%eax
		call   ac_finalise_razor_wire
		jmp    jump_53294
	jump_52ee9:
		testb  $0x8,0xd(%esi)
		je     jump_53294
		mov    $0x1,%edx
		mov    %esi,%eax
		call   ac_init_razor_wire
		jmp    jump_53294
	jump_52f04:
		cmp    $0x12,%eax
		jne    jump_52f40
		mov    0x44(%esi),%dl
		test   $0x1,%dl
		je     jump_52f28
		testb  $0x8,0xd(%esi)
		jne    jump_52f1c
		test   $0x4,%dl
		je     jump_52edd
	jump_52f1c:
		mov    %esi,%eax
		call   ac_update_razor_wire
		jmp    jump_53294
	jump_52f28:
		testb  $0x8,0xd(%esi)
		je     jump_53294
		mov    %esi,%eax
		xor    %edx,%edx
		call   ac_init_razor_wire
		jmp    jump_53294
	jump_52f40:
		cmp    $0x8,%eax
		jne    jump_52fe2
		mov    0x56(%esi),%eax
		sar    $0x10,%eax
		cmp    $0x1,%eax
		jne    jump_52f64
		mov    0xd(%esi),%bh
		test   $0x20,%bh
		jne    jump_52f64
		mov    %bh,%cl
		and    $0xf7,%cl
		mov    %cl,0xd(%esi)
	jump_52f64:
		mov    0x56(%esi),%eax
		sar    $0x10,%eax
		cmp    $0x1,%eax
		jg     jump_5328d
		testb  $0x8,0xd(%esi)
		je     jump_52fd1
		test   %eax,%eax
		jne    jump_52fbf
		testb  $0x4,0x45(%esi)
		jne    jump_52fbf
		push   $0x2
		push   $0xffffffff
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0xe,%edx
		mov    %esi,%eax
		call   ac_play_dist_sample
		push   $0x2
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0xd,%edx
		mov    %esi,%eax
		call   ac_play_dist_sample
		orb    $0x2,0x45(%esi)
	jump_52fbf:
		mov    %esi,%eax
		call   ac_init_fire_weapon
		movw   $0x5,0x58(%esi)
		jmp    jump_53294
	jump_52fd1:
		mov    0x57(%esi),%al
		shl    $0x5,%al
		mov    %al,0x85(%esi)
		jmp    jump_53294
	jump_52fe2:
		testb  $0x8,0xd(%esi)
		je     jump_53294
		test   %al,%al
		je     jump_53294
		mov    0x56(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_53294
		testb  $0x4,0xd(%esi)
		jne    jump_53294
		testb  $0x8,0x45(%esi)
		jne    jump_530e5
		mov    0xc(%esi),%eax
		and    $0x20002000,%eax
		cmp    $0x20002000,%eax
		jne    jump_530e5
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		sar    $0x2,%eax
		mov    %eax,%ebx
		shl    $0x3,%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		sub    %ebx,%eax
		add    %eax,%eax
		lea    0x0(,%eax,4),%edx
		sub    %eax,%edx
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		mov    data_1a647a(%edx,%eax,2),%ax
		and    $0xffff,%eax
		mov    %eax,0x2c(%esi)
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		sar    $0x2,%eax
		mov    %eax,%ebx
		shl    $0x3,%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		sub    %ebx,%eax
		mov    0x54(%esi),%dx
		add    %eax,%eax
		xor    %dh,%dh
		mov    %eax,%ebx
		shl    $0x2,%eax
		and    $0x3,%dl
		sub    %ebx,%eax
		and    $0xffff,%edx
		mov    data_1a63c6(%eax,%edx,2),%eax
		sar    $0x10,%eax
		mov    %eax,0x30(%esi)
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		sar    $0x2,%eax
		mov    %eax,%ebx
		shl    $0x3,%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		sub    %ebx,%eax
		mov    0x54(%esi),%dx
		add    %eax,%eax
		xor    %dh,%dh
		mov    %eax,%ebx
		shl    $0x2,%eax
		and    $0x3,%dl
		sub    %ebx,%eax
		and    $0xffff,%edx
		mov    data_1a6482(%eax,%edx,2),%ax
		and    $0xffff,%eax
		movw   $0xffff,0x66(%esi)
		jmp    jump_5328a
	jump_530e5:
		mov    0xc(%esi),%eax
		and    $0x20080000,%eax
		cmp    $0x20080000,%eax
		jne    jump_5328d
		xor    %edx,%edx
		mov    0x3c(%esi),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		mov    0x54(%edx,%eax,8),%ax
		mov    %eax,%ebx
		and    $0xffff,%ebx
		sar    $0x2,%ebx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		sub    %ebx,%eax
		add    %eax,%eax
		mov    %eax,%ebx
		shl    $0x2,%eax
		sub    %ebx,%eax
		mov    data_1a63ce(%eax),%edx
		sar    $0x10,%edx
		mov    %edx,0x2c(%esp)
		mov    data_1a63d0(%eax),%edx
		mov    data_1a63d2(%eax),%eax
		sar    $0x10,%eax
		mov    %eax,0x30(%esp)
		mov    %esi,%eax
		sar    $0x10,%edx
		call   ac_get_weapon_range
		mov    %eax,0x34(%esp)
		mov    0x18(%esi),%ebp
		mov    0x2c(%esp),%eax
		sar    $0x8,%ebp
		mov    0x1c(%esi),%edi
		sub    %ebp,%eax
		sar    $0x8,%edi
		mov    %eax,%ebp
		mov    %edx,%eax
		mov    0x20(%esi),%ecx
		sub    %edi,%eax
		sar    $0x8,%ecx
		mov    %eax,%edi
		mov    0x30(%esp),%eax
		sub    %ecx,%eax
		mov    %edx,0x18(%esp)
		mov    %eax,%ecx
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebx
		mov    %ebp,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x7,%edx
		mov    %edx,0x1c(%esp)
		mov    %ebx,%edx
		sar    $0x7,%edx
		mov    %edx,0x24(%esp)
		cmp    %ebx,%eax
		jge    jump_531dd
		mov    %ebx,%edx
		sar    $0x5,%edx
		sub    %edx,%ebx
		sub    0x24(%esp),%ebx
		mov    %eax,%edx
		sar    $0x2,%edx
		add    %edx,%ebx
		mov    %eax,%edx
		sar    $0x3,%edx
		sar    $0x6,%eax
		add    %ebx,%edx
		add    %edx,%eax
		mov    0x1c(%esp),%edx
		add    %edx,%eax
		jmp    jump_5320b
	jump_531dd:
		mov    %eax,%edx
		sar    $0x5,%edx
		sub    %edx,%eax
		mov    0x1c(%esp),%edx
		sub    %edx,%eax
		mov    %eax,0x10(%esp)
		mov    %ebx,%eax
		mov    0x10(%esp),%edx
		sar    $0x2,%eax
		add    %eax,%edx
		mov    %ebx,%eax
		sar    $0x3,%eax
		sar    $0x6,%ebx
		add    %edx,%eax
		add    %ebx,%eax
		mov    0x24(%esp),%ebx
		add    %ebx,%eax
	jump_5320b:
		mov    0x34(%esp),%edx
		mov    %eax,%ebx
		cmp    %edx,%eax
		jle    jump_53272
		test   %eax,%eax
		jne    jump_5321e
		mov    $0x1,%ebx
	jump_5321e:
		mov    0x34(%esp),%edx
		imul   %ebp,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    0x34(%esp),%edx
		imul   %edi,%edx
		mov    %eax,%ebp
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    0x34(%esp),%edx
		imul   %ecx,%edx
		mov    %eax,%edi
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,%ecx
		mov    0x18(%esi),%eax
		sar    $0x8,%eax
		add    %ebp,%eax
		mov    %eax,0x2c(%esp)
		mov    0x1c(%esi),%eax
		sar    $0x8,%eax
		add    %edi,%eax
		mov    %eax,0x18(%esp)
		mov    0x20(%esi),%eax
		sar    $0x8,%eax
		add    %ecx,%eax
		mov    %eax,0x30(%esp)
	jump_53272:
		mov    0x2c(%esp),%eax
		movw   $0xffff,0x66(%esi)
		mov    %eax,0x2c(%esi)
		mov    0x18(%esp),%eax
		mov    %eax,0x30(%esi)
		mov    0x30(%esp),%eax
	jump_5328a:
		mov    %eax,0x34(%esi)
	jump_5328d:
		mov    %esi,%eax
		call   ac_init_fire_weapon
	jump_53294:
		testb  $0x4,0xd(%esi) /* p_person->Flag & TngF_WepCharging */
		je     jump_536c0
		xor    %eax,%eax
		mov    0x99(%esi),%al
		cmp    $0x5,%eax
		je     jump_532cc
		mov    0x8a(%esi),%eax
		sar    $0x10,%eax
		cmp    $0xf,%eax
		jg     jump_532c3
		subw   $0x8,0x96(%esi)
		jmp    jump_532cc
	jump_532c3:
		movw   $0xf,0x8c(%esi)
	jump_532cc:
		xor    %eax,%eax
		mov    0x99(%esi),%al
		cmp    $0x3,%eax
		jne    jump_532df
		movb   $0x2,0x78(%esi)
		jmp    jump_532ee
	jump_532df:
		cmp    $0x5,%eax
		jne    jump_532ea
		movb   $0x0,0x78(%esi)
		jmp    jump_532ee
	jump_532ea:
		movb   $0x4,0x78(%esi)
	jump_532ee:
		testb  $0x8,0xd(%esi) /* p_person->Flag & TngF_Unkn0800 */
		je     jump_53410
		mov    0x8a(%esi),%eax
		sar    $0x10,%eax
		cmp    $0xe,%eax
		jne    jump_53334
		xor    %eax,%eax
		mov    $0x7,%edx
		mov    0x16(%esi),%ax
		call   ac_stop_sample_using_heap
		push   $0x3
		push   $0xffffffff
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x34,%edx
		mov    %esi,%eax
		call   ac_play_dist_sample
		jmp    jump_53355
	jump_53334:
		mov    0x8c(%esi),%ax
		add    %eax,%eax
		add    $0x64,%eax
		movswl %ax,%ebx
		xor    %eax,%eax
		mov    $0x7,%edx
		mov    0x16(%esi),%ax
		call   ac_SetSamplePitch
	jump_53355:
		incw   0x8c(%esi)
		xor    %eax,%eax
		mov    0x99(%esi),%al
		cmp    $0x5,%eax
		jne    jump_53370
		incw   0x8c(%esi)
	jump_53370:
		mov    0xc(%esi),%eax
		and    $0x20002000,%eax
		cmp    $0x20002000,%eax
		je     jump_533f4
		xor    %eax,%eax
		mov    0x38(%esi),%edx
		mov    0x7e(%esi),%ax
		sar    $0x10,%edx
		sar    %eax
		cmp    %eax,%edx
		jl     jump_533a1
		testb  $0x10,0xf(%esi)
		jne    jump_533a1
		testb  $0x3,0x16(%esi)
		je     jump_533ae
	jump_533a1:
		testb  $0x20,0xd(%esi)
		jne    jump_533ae
		mov    $0x5,%eax
		jmp    jump_533d3
	jump_533ae:
		mov    0x70(%esi),%ax
		shl    $0x4,%eax
		shr    $0xd,%ax
		and    $0xffff,%eax
		shl    $0x2,%eax
		xor    %edx,%edx
		add    $0x4,%eax
		mov    %ax,%dx
		cmp    $0xf,%edx
		jle    jump_533d3
		mov    $0xf,%eax
	jump_533d3:
		mov    0x8a(%esi),%edx
		sar    $0x10,%edx
		and    $0xffff,%eax
		cmp    %eax,%edx
		jl     jump_533f4
		mov    0xd(%esi),%ch
		test   $0x10,%ch
		jne    jump_533f4
		mov    %ch,%al
		and    $0xf7,%al
		mov    %al,0xd(%esi)
	jump_533f4:
		xor    %eax,%eax
		mov    0x99(%esi),%al
		cmp    $0x5,%eax
		jne    jump_53410
		cmpl   $0x0,0x40(%esi)
		jne    jump_53410
		movw   $0x0,0x8c(%esi)
	jump_53410:
		testb  $0x8,0xd(%esi)
		jne    jump_536c0
		mov    0x8a(%esi),%eax
		sar    $0x10,%eax
		xor    %edi,%edi
		cmp    $0x5,%eax
		jge    jump_534ae
		testb  $0x20,0xd(%esi)
		je     jump_5348a
		mov    0x45(%esi),%cl
		mov    0x8c(%esi),%dx
		test   $0x8,%cl
		jne    jump_53495
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		sar    $0x2,%eax
		mov    %eax,%ebx
		shl    $0x3,%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		sub    %ebx,%eax
		add    %eax,%eax
		mov    %eax,%ebx
		shl    $0x2,%eax
		sub    %ebx,%eax
		mov    %eax,%ebx
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		shl    $0x5,%eax
		add    %eax,%ebx
		xor    %eax,%eax
		mov    0x99(%esi),%al
		mov    %dl,data_1a63fa(%ebx,%eax,1)
		mov    %dx,0x58(%esi)
		jmp    jump_53495
	jump_5348a:
		mov    0x8c(%esi),%ax
		mov    %ax,0x58(%esi)
	jump_53495:
		mov    $0x5,%edi
		mov    0x8c(%esi),%bx
		movw   $0x5,0x8c(%esi)
		sub    %ebx,%edi
		jmp    jump_5351d
	jump_534ae:
		testb  $0x20,0xd(%esi)
		je     jump_5350f
		mov    0x8c(%esi),%dx
		sub    $0x3,%edx
		mov    0x45(%esi),%bl
		mov    %edx,%ecx
		test   $0x8,%bl
		jne    jump_5351d
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		sar    $0x2,%eax
		mov    %eax,%ebx
		shl    $0x3,%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		sub    %ebx,%eax
		add    %eax,%eax
		mov    %eax,%ebx
		shl    $0x2,%eax
		sub    %ebx,%eax
		mov    %eax,%ebx
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		shl    $0x5,%eax
		add    %eax,%ebx
		xor    %eax,%eax
		mov    0x99(%esi),%al
		mov    %dl,data_1a63fa(%ebx,%eax,1)
		mov    %dx,0x58(%esi)
		jmp    jump_5351d
	jump_5350f:
		mov    0x8c(%esi),%ax
		sub    $0x3,%eax
		mov    %ax,0x58(%esi)
	jump_5351d:
		xor    %edx,%edx
		mov    0x99(%esi),%dl
		imul   $0x19,%edx,%eax # sizeof(struct WeaponDef)
		mov    $EXPORT_SYMBOL(weapon_defs),%ebp
		mov    0x45(%esi),%ch
		add    %eax,%ebp
		test   $0x8,%ch
		jne    jump_536ca
		mov    0xc(%esi),%eax
		and    $0x20002000,%eax
		cmp    $0x20002000,%eax
		jne    jump_536ca
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		sar    $0x2,%eax
		mov    %eax,%ebx
		shl    $0x3,%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		sub    %ebx,%eax
		add    %eax,%eax
		lea    0x0(,%eax,4),%edx
		sub    %eax,%edx
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		mov    data_1a647a(%edx,%eax,2),%ax
		and    $0xffff,%eax
		mov    %eax,0x2c(%esi)
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		sar    $0x2,%eax
		mov    %eax,%ebx
		shl    $0x3,%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		sub    %ebx,%eax
		add    %eax,%eax
		lea    0x0(,%eax,4),%edx
		sub    %eax,%edx
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		mov    data_1a63c6(%edx,%eax,2),%eax
		sar    $0x10,%eax
		mov    %eax,0x30(%esi)
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		sar    $0x2,%eax
		mov    %eax,%ebx
		shl    $0x3,%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		sub    %ebx,%eax
		add    %eax,%eax
		lea    0x0(,%eax,4),%edx
		sub    %eax,%edx
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		mov    data_1a6482(%edx,%eax,2),%ax
		and    $0xffff,%eax
		movw   $0xffff,0x66(%esi)
		mov    %eax,0x34(%esi)
	jump_53613:
		mov    0x99(%esi),%al
		cmp    $0x5,%al
		jb     jump_53a0e
		jbe    jump_539c4
		cmp    $0x11,%al
		jb     jump_5363d
		jbe    jump_53964
		cmp    $0x14,%al
		je     jump_53909
	jump_5363d:
		testb  $0x20,0xd(%esi)
		je     jump_53694
		mov    0x45(%esi),%bl
		mov    0x58(%esi),%dx
		test   $0x8,%bl
		jne    jump_53694
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		sar    $0x2,%eax
		mov    %eax,%ebx
		shl    $0x3,%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		sub    %ebx,%eax
		add    %eax,%eax
		mov    %eax,%ebx
		shl    $0x2,%eax
		sub    %ebx,%eax
		mov    %eax,%ebx
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		shl    $0x5,%eax
		add    %ebx,%eax
		xor    %ebx,%ebx
		mov    0x99(%esi),%bl
		mov    %dl,data_1a63fa(%ebx,%eax,1)
		mov    %dx,0x58(%esi)
	jump_53694:
		mov    0xd(%esi),%bh
		mov    0x8a(%esi),%eax
		and    $0xfb,%bh
		sar    $0x10,%eax
		mov    %bh,0xd(%esi)
		cmp    $0x5,%eax
		jle    jump_536c0
		xor    %eax,%eax
		mov    0x99(%esi),%al
		cmp    $0x5,%eax
		je     jump_536c0
		mov    %bh,%cl
		or     $0x2,%cl
		mov    %cl,0xd(%esi)
	jump_536c0:
		add    $0x48,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_536ca:
		mov    0xc(%esi),%eax
		and    $0x20080000,%eax
		cmp    $0x20080000,%eax
		jne    jump_53613
		xor    %edx,%edx
		mov    0x3c(%esi),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		mov    0x54(%edx,%eax,8),%ax
		mov    %eax,%ebx
		and    $0xffff,%ebx
		sar    $0x2,%ebx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		sub    %ebx,%eax
		add    %eax,%eax
		mov    %eax,%ebx
		shl    $0x2,%eax
		sub    %ebx,%eax
		mov    data_1a63ce(%eax),%edx
		sar    $0x10,%edx
		mov    %edx,0x14(%esp)
		mov    data_1a63d0(%eax),%edx
		mov    data_1a63d2(%eax),%eax
		sar    $0x10,%eax
		mov    %eax,0x4(%esp)
		mov    %esi,%eax
		call   ac_get_weapon_range
		mov    %eax,0xc(%esp)
		mov    0x18(%esi),%ecx
		mov    0x14(%esp),%eax
		sar    $0x8,%ecx
		sub    %ecx,%eax
		mov    %eax,%ecx
		mov    0x1c(%esi),%eax
		sar    $0x10,%edx
		sar    $0x8,%eax
		mov    %edx,0x28(%esp)
		sub    %eax,%edx
		mov    %edx,0x8(%esp)
		mov    0x20(%esi),%eax
		mov    0x4(%esp),%edx
		sar    $0x8,%eax
		sub    %eax,%edx
		mov    %edx,%eax
		mov    %edx,0x38(%esp)
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebx
		mov    %ecx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x7,%edx
		mov    %edx,(%esp)
		mov    %ebx,%edx
		sar    $0x7,%edx
		mov    %edx,0x20(%esp)
		cmp    %ebx,%eax
		jge    jump_537c4
		mov    %ebx,%edx
		sar    $0x5,%edx
		sub    %edx,%ebx
		sub    0x20(%esp),%ebx
		mov    %eax,%edx
		sar    $0x2,%edx
		add    %ebx,%edx
		mov    %eax,%ebx
		sar    $0x3,%ebx
		sar    $0x6,%eax
		add    %ebx,%edx
		add    %edx,%eax
		mov    (%esp),%edx
		add    %edx,%eax
		jmp    jump_537f1
	jump_537c4:
		mov    %eax,%edx
		sar    $0x5,%edx
		sub    %edx,%eax
		mov    (%esp),%edx
		sub    %edx,%eax
		mov    %eax,0x10(%esp)
		mov    %ebx,%eax
		mov    0x10(%esp),%edx
		sar    $0x2,%eax
		add    %eax,%edx
		mov    %ebx,%eax
		sar    $0x3,%eax
		sar    $0x6,%ebx
		add    %edx,%eax
		add    %ebx,%eax
		mov    0x20(%esp),%ebx
		add    %ebx,%eax
	jump_537f1:
		mov    0xc(%esp),%edx
		mov    %eax,%ebx
		cmp    %edx,%eax
		jle    jump_5386c
		test   %eax,%eax
		jne    jump_53804
		mov    $0x1,%ebx
	jump_53804:
		mov    0xc(%esp),%edx
		imul   %ecx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    0x8(%esp),%edx
		mov    %eax,%ecx
		mov    0xc(%esp),%eax
		imul   %eax,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    0x38(%esp),%edx
		mov    %eax,0x8(%esp)
		mov    0xc(%esp),%eax
		imul   %eax,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,0x38(%esp)
		mov    0x18(%esi),%eax
		sar    $0x8,%eax
		add    %ecx,%eax
		mov    %eax,0x14(%esp)
		mov    0x1c(%esi),%eax
		mov    0x8(%esp),%edx
		sar    $0x8,%eax
		add    %eax,%edx
		mov    %edx,0x28(%esp)
		mov    0x20(%esi),%eax
		mov    0x38(%esp),%edx
		sar    $0x8,%eax
		add    %eax,%edx
		mov    %edx,0x4(%esp)
	jump_5386c:
		mov    0x14(%esp),%eax
		movw   $0xffff,0x66(%esi)
		mov    %eax,0x2c(%esi)
		mov    0x28(%esp),%eax
		mov    %eax,0x30(%esi)
		mov    0x4(%esp),%eax
		mov    %eax,0x34(%esi)
		jmp    jump_53613
	jump_5388c:
		xor    %eax,%eax
		mov    0x8(%esi),%al
		cmp    $0x7,%eax
		jne    jump_538ae
		xor    %edx,%edx
		mov    %esi,%eax
		mov    0x8c(%esi),%dx
		call   ac_init_laser_6shot
		movw   $0x1,0x58(%esi)
		jmp    jump_538c8
	jump_538ae:
		xor    %edx,%edx
		mov    %esi,%eax
		mov    0x8c(%esi),%dx
		call   ac_init_laser
		mov    0x4(%ebp),%ax
		add    %edi,%eax
		mov    %ax,0x58(%esi)
	jump_538c8:
		xor    %eax,%eax
		mov    $0x7,%edx
		mov    0x16(%esi),%ax
		call   ac_stop_sample_using_heap
		xor    %eax,%eax
		mov    $0x34,%edx
		mov    0x16(%esi),%ax
		call   ac_stop_sample_using_heap
		push   $0x3
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x12,%edx
		mov    %esi,%eax
		call   ac_play_dist_sample
		jmp    jump_5363d
	jump_53909:
		xor    %edx,%edx
		mov    %esi,%eax
		mov    0x8c(%esi),%dx
		call   ac_init_laser_q_sep
		xor    %eax,%eax
		mov    $0x7,%edx
		mov    0x16(%esi),%ax
		call   ac_stop_sample_using_heap
		xor    %eax,%eax
		mov    $0x34,%edx
		mov    0x16(%esi),%ax
		call   ac_stop_sample_using_heap
		push   $0x3
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x1c,%edx
		mov    %esi,%eax
		call   ac_play_dist_sample
		mov    0x4(%ebp),%ax
		add    %edi,%eax
		mov    %ax,0x58(%esi)
		jmp    jump_5363d
	jump_53964:
		mov    $0x11,%ebx
		xor    %edx,%edx
		mov    %esi,%eax
		mov    0x8c(%esi),%dx
		call   ac_init_laser_beam
		xor    %eax,%eax
		mov    $0x7,%edx
		mov    0x16(%esi),%ax
		call   ac_stop_sample_using_heap
		xor    %eax,%eax
		mov    $0x34,%edx
		mov    0x16(%esi),%ax
		call   ac_stop_sample_using_heap
		push   $0x3
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x5,%edx
		mov    %esi,%eax
		call   ac_play_dist_sample
		mov    0x4(%ebp),%ax
		add    %edi,%eax
		mov    %ax,0x58(%esi)
		jmp    jump_5363d
	jump_539c4:
		mov    0x8(%ebp),%ax
		mov    0x96(%esi),%cx
		sub    %eax,%ecx
		mov    %esi,%eax
		mov    %cx,0x96(%esi)
		call   ac_init_rocket
		mov    0x4(%ebp),%ax
		add    %edi,%eax
		mov    %ax,0x58(%esi)
		xor    %eax,%eax
		mov    $0x7,%edx
		mov    0x16(%esi),%ax
		call   ac_stop_sample_using_heap
		xor    %eax,%eax
		mov    $0x34,%edx
		mov    0x16(%esi),%ax
		call   ac_stop_sample_using_heap
		jmp    jump_5363d
	jump_53a0e:
		cmp    $0x3,%al
		jb     jump_5363d
		jbe    jump_5388c
		xor    %edx,%edx
		mov    %esi,%eax
		mov    0x8c(%esi),%dx
		call   ac_init_laser_elec
		xor    %eax,%eax
		mov    $0x7,%edx
		mov    0x16(%esi),%ax
		call   ac_stop_sample_using_heap
		xor    %eax,%eax
		mov    $0x34,%edx
		mov    0x16(%esi),%ax
		call   ac_stop_sample_using_heap
		testb  $0x1,0x47(%esi)
		jne    jump_53a6e
		push   $0x3
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x6,%edx
		mov    %esi,%eax
		call   ac_play_dist_sample
	jump_53a6e:
		mov    0x4(%ebp),%ax
		add    %edi,%eax
		mov    %ax,0x58(%esi)
		jmp    jump_5363d


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_recoil)	/* 0x053AA0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		mov    %eax,%edx
		xor    %eax,%eax
		mov    0x7d(%edx),%al
		cmp    $0x5,%eax
		je     jump_53b22
		cmp    $0x4,%eax
		jne    jump_53b22
		xor    %ebx,%ebx
		mov    0x8(%edx),%bl
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		sub    %ebx,%eax
		lea    0x0(,%eax,4),%ebx
		xor    %eax,%eax
		mov    0x6c(%edx),%al
		add    %eax,%eax
		add    %ebx,%eax
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%bx
		xor    %eax,%eax
		mov    0x57(%edx),%al
		add    %ebx,%eax
		mov    nstart_ani,%ebx
		mov    (%ebx,%eax,2),%ax
		xor    %ebx,%ebx
		mov    0x8(%edx),%bl
		mov    %ax,0x24(%edx)
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		sub    %ebx,%eax
		lea    0x0(,%eax,4),%ebx
		xor    %eax,%eax
		mov    0x6c(%edx),%al
		mov    EXPORT_SYMBOL(people_frames)(%ebx,%eax,2),%ax
		dec    %eax
		mov    %ax,0x26(%edx)
	jump_53b22:
		cmpb   $0x0,0x7d(%edx)
		jne    jump_53bb0
		andb   $0xfe,0xe(%edx)
		xor    %ebx,%ebx
		mov    0x6d(%edx),%al
		mov    0x8(%edx),%bl
		mov    %al,0x6c(%edx)
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		sub    %ebx,%eax
		lea    0x0(,%eax,4),%ebx
		xor    %eax,%eax
		mov    0x6c(%edx),%al
		add    %eax,%eax
		add    %ebx,%eax
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%bx
		xor    %eax,%eax
		mov    0x57(%edx),%al
		add    %ebx,%eax
		mov    nstart_ani,%ebx
		mov    (%ebx,%eax,2),%ax
		xor    %ebx,%ebx
		mov    0x8(%edx),%bl
		mov    %ax,0x24(%edx)
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		sub    %ebx,%eax
		lea    0x0(,%eax,4),%ebx
		xor    %eax,%eax
		mov    0x6c(%edx),%al
		mov    EXPORT_SYMBOL(people_frames)(%ebx,%eax,2),%ax
		dec    %eax
		mov    %ax,0x26(%edx)
		mov    %edx,%eax
		call   ac_remove_path
		movw   $0xffff,0x66(%edx)
	jump_53bb0:
		mov    0x7d(%edx),%bh
		xor    %eax,%eax
		dec    %bh
		mov    %bh,%al
		mov    %bh,0x7d(%edx)
		test   %eax,%eax
		jg     jump_53c57
		andb   $0xfe,0xe(%edx)
		xor    %ebx,%ebx
		mov    0x6d(%edx),%al
		mov    0x8(%edx),%bl
		mov    %al,0x6c(%edx)
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		sub    %ebx,%eax
		lea    0x0(,%eax,4),%ebx
		xor    %eax,%eax
		mov    0x6c(%edx),%al
		movb   $0x0,0x7d(%edx)
		mov    EXPORT_SYMBOL(people_frames)(%ebx,%eax,2),%ax
		xor    %ebx,%ebx
		and    $0xffff,%eax
		mov    0x57(%edx),%bl
		add    %ebx,%eax
		lea    0x0(,%eax,2),%ebx
		mov    nstart_ani,%eax
		mov    (%ebx,%eax,1),%ax
		xor    %ebx,%ebx
		mov    0x8(%edx),%bl
		mov    %ax,0x24(%edx)
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		sub    %ebx,%eax
		lea    0x0(,%eax,4),%ebx
		xor    %eax,%eax
		mov    0x6c(%edx),%al
		mov    EXPORT_SYMBOL(people_frames)(%ebx,%eax,2),%ax
		dec    %eax
		mov    %ax,0x26(%edx)
		mov    %edx,%eax
		call   ac_remove_path
		movw   $0xffff,0x66(%edx)
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_53c57:
		xor    %eax,%eax
		mov    0x98(%edx),%al
		mov    0x36(%edx),%esi
		shl    $0x5,%eax
		movw   $0x200,0x38(%edx)
		mov    EXPORT_SYMBOL(lbSinTable)(%eax),%eax
		sar    $0x8,%eax
		mov    0x2c(%edx),%ecx
		mov    %eax,0x2c(%edx)
		xor    %eax,%eax
		mov    0x98(%edx),%al
		shl    $0x5,%eax
		mov    EXPORT_SYMBOL(lbSinTable)+2048(%eax),%eax
		sar    $0x8,%eax
		mov    0x34(%edx),%ebx
		mov    %eax,0x34(%edx)
		mov    %edx,%eax
		call   ac_person_move
		mov    0xc(%edx),%al
		sar    $0x10,%esi
		test   $0x2,%al
		jne    jump_53caf
		mov    %ecx,0x2c(%edx)
		mov    %ebx,0x34(%edx)
		mov    %si,0x38(%edx)
	jump_53caf:
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
person_poke:	/* 0x053CB4 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		mov    %eax,%esi
		mov    %edx,%edi
		mov    %edx,0x8(%esp)
		mov    0x18(%eax),%edx
		mov    0x18(%ecx),%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		sub    %ebx,%edx
		sub    %eax,%edx
		mov    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebp
		mov    0x20(%esi),%eax
		mov    0x20(%ecx),%edx
		sar    $0x8,%eax
		sar    $0x8,%edx
		add    %edi,%eax
		mov    %ebx,(%esp)
		sub    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%ebp
		jle    jump_53cfb
		sar    %eax
		jmp    jump_53cfd
	jump_53cfb:
		sar    %ebp
	jump_53cfd:
		add    %ebp,%eax
		mov    %eax,0x4(%esp)
		mov    0x18(%ecx),%ebp
		mov    0x18(%esi),%eax
		sar    $0x8,%ebp
		sar    $0x8,%eax
		sub    %eax,%ebp
		mov    %ebp,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		lea    (%eax,%ebx,1),%ebp
		mov    0x20(%ecx),%edx
		mov    0x20(%esi),%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		sub    %eax,%edx
		mov    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		sub    %edi,%eax
		cmp    %eax,%ebp
		jle    jump_53d3a
		sar    %eax
		jmp    jump_53d3c
	jump_53d3a:
		sar    %ebp
	jump_53d3c:
		add    %ebp,%eax
		cmp    0x4(%esp),%eax
		jle    jump_53d48
		neg    %edi
		neg    %ebx
	jump_53d48:
		mov    0x8(%esp),%eax
		sub    %ebx,%eax
		mov    0x2c(%esi),%ebp
		mov    %eax,0x2c(%esi)
		mov    (%esp),%eax
		mov    0x34(%esi),%ecx
		add    %edi,%eax
		mov    0x36(%esi),%edx
		mov    %eax,0x34(%esi)
		mov    %esi,%eax
		movw   $0x10,0x38(%esi)
		call   ac_person_move
		mov    0xc(%esi),%ah
		sar    $0x10,%edx
		test   $0x2,%ah
		jne    jump_53d84
		mov    %ebp,0x2c(%esi)
		mov    %ecx,0x34(%esi)
		mov    %dx,0x38(%esi)
	jump_53d84:
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_burning)	/* 0x053D8C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		sub    $0x4,%esp
		mov    %eax,%esi
		mov    data_154f6c,%eax
		mov    %eax,(%esp)
		movb   $0x20,0x5a(%esi)
		call   ac_LbRandomAnyShort
		add    $0x10,%eax
		xor    %ah,%ah
		xor    %ebx,%ebx
		and    $0xf,%al
		mov    %ax,%bx
		mov    0x20(%esi),%eax
		sar    $0x8,%eax
		movswl %ax,%edx
		mov    0x18(%esi),%eax
		sar    $0x8,%eax
		cwtl
		call   ac_apply_super_quick_light
		xor    %eax,%eax
		mov    gameturn,%edx
		mov    0x16(%esi),%ax
		add    %edx,%eax
		test   $0xf,%al
		jne    jump_53e25
		mov    $0x1,%eax
		xor    %edx,%edx
		mov    0x8(%esi),%cl
		mov    EXPORT_SYMBOL(female_peep),%dx
		shl    %cl,%eax
		test   %eax,%edx
		je     jump_53e09
		push   $0x2
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x2,%edx
		jmp    jump_53e1e
	jump_53e09:
		push   $0x2
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x1,%edx
	jump_53e1e:
		mov    %esi,%eax
		call   ac_play_dist_speech
	jump_53e25:
		xor    %eax,%eax
		mov    0x7d(%esi),%al
		cmp    $0x5f,%eax
		jle    jump_53e33
		movb   $0x5e,0x7d(%esi)
	jump_53e33:
		testb  $0x20,0xd(%esi)
		je     jump_53e3e
		decb   0x7d(%esi)
		jmp    jump_53e57
	jump_53e3e:
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		mov    0x7d(%esi),%dl
		mov    (%esp,%eax,1),%al
		sub    %al,%dl
		mov    %dl,0x7d(%esi)
	jump_53e57:
		xor    %eax,%eax
		mov    0x7d(%esi),%al
		test   %eax,%eax
		jne    jump_53e7f
		mov    $0x1d,%edx
		mov    0x16(%esi),%ax
		call   ac_stop_sample_using_heap
		mov    $0x12,%edx
		mov    %esi,%eax
		call   ac_set_person_dead
		jmp    jump_53f4a
	jump_53e7f:
		xor    %eax,%eax
		mov    0x57(%esi),%al
		mov    data_15335a(,%eax,4),%eax
		sar    $0x10,%eax
		mov    %eax,0x2c(%esi)
		xor    %eax,%eax
		mov    0x57(%esi),%al
		mov    EXPORT_SYMBOL(angle_direction)(,%eax,4),%eax
		sar    $0x10,%eax
		mov    %eax,0x34(%esi)
		mov    %esi,%eax
		call   ac_person_move
		test   %ax,%ax
		je     jump_53eb5
		movw   $0xffff,0x68(%esi)
	jump_53eb5:
		testb  $0x2,0xc(%esi)
		jne    jump_53f4a
		mov    EXPORT_SYMBOL(fifties_per_gameturn),%ax
		sub    %ax,0x28(%esi)
		mov    0x26(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_53ef0
		mov    0x2a(%esi),%ax
		mov    %ax,0x28(%esi)
		xor    %eax,%eax
		mov    frame,%edx
		mov    0x24(%esi),%ax
		mov    0x6(%edx,%eax,8),%ax
		mov    %ax,0x24(%esi)
	jump_53ef0:
		mov    0x68(%esi),%ax
		movswl %ax,%edx
		dec    %eax
		mov    %ax,0x68(%esi)
		test   %edx,%edx
		jge    jump_53f4a
		call   ac_LbRandomAnyShort
		mov    %eax,%edx
		xor    %ah,%dh
		and    $0x7,%dl
		mov    0x6a(%esi),%ax
		add    %edx,%eax
		mov    %ax,0x68(%esi)
		testb  $0x1,0x68(%esi)
		je     jump_53f21
		incb   0x57(%esi)
		jmp    jump_53f24
	jump_53f21:
		decb   0x57(%esi)
	jump_53f24:
		mov    0x57(%esi),%al
		add    $0x8,%al
		and    $0x7,%al
		xor    %edx,%edx
		mov    %al,0x57(%esi)
		xor    %eax,%eax
		mov    0x57(%esi),%dl
		mov    0x26(%esi),%ax
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    0x2(%edx,%eax,2),%ax
		mov    %ax,0x24(%esi)
	jump_53f4a:
		add    $0x4,%esp
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_run_away)	/* 0x053F54 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		mov    %eax,%esi
		mov    0x2c(%eax),%ebx
		mov    0x34(%eax),%ecx
		xor    %eax,%eax
		mov    0x98(%esi),%al
		shl    $0x5,%eax
		mov    EXPORT_SYMBOL(lbSinTable)(%eax),%edx
		xor    %eax,%eax
		mov    0x98(%esi),%al
		sar    $0x8,%edx
		shl    $0x5,%eax
		mov    %edx,0x2c(%esi)
		mov    EXPORT_SYMBOL(lbSinTable)+2048(%eax),%edx
		sar    $0x8,%edx
		mov    %esi,%eax
		mov    %edx,0x34(%esi)
		call   ac_person_move
		test   %ax,%ax
		je     jump_53fd5
		mov    0x57(%esi),%ah
		inc    %ah
		mov    %ah,%dl
		mov    %ah,0x57(%esi)
		and    $0x7,%dl
		mov    %dl,0x57(%esi)
		mov    0x98(%esi),%dh
		add    $0x20,%dh
		xor    %eax,%eax
		mov    %dh,0x98(%esi)
		xor    %edx,%edx
		mov    0x57(%esi),%al
		mov    0x26(%esi),%dx
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    0x2(%edx,%eax,2),%ax
		mov    %ax,0x24(%esi)
	jump_53fd5:
		testb  $0x2,0xc(%esi)
		jne    jump_5406a
		mov    %ebx,0x2c(%esi)
		mov    0x7d(%esi),%ah
		mov    %ecx,0x34(%esi)
		test   $0x20,%ah
		jne    jump_53ffe
		testb  $0x7f,gameturn
		je     jump_540d4
	jump_53ffe:
		mov    0x7d(%esi),%dh
		xor    %eax,%eax
		dec    %dh
		mov    %dh,%al
		mov    %dh,0x7d(%esi)
		test   %eax,%eax
		jne    jump_54039
		andb   $0xfb,0xe(%esi)
		testb  $0x8,0x46(%esi)
		je     jump_5401f
		mov    %esi,%eax
		call   ac_set_person_animmode_walk
	jump_5401f:
		mov    %esi,%eax
		movw   $0x0,0x72(%esi)
		call   search_for_danger
		mov    %esi,%eax
		call   ac_remove_path
		movw   $0xffff,0x66(%esi)
	jump_54039:
		mov    EXPORT_SYMBOL(fifties_per_gameturn),%ax
		sub    %ax,0x28(%esi)
		mov    0x26(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_5406a
		mov    0x2a(%esi),%ax
		mov    %ax,0x28(%esi)
		xor    %eax,%eax
		mov    frame,%edx
		mov    0x24(%esi),%ax
		mov    0x6(%edx,%eax,8),%ax
		mov    %ax,0x24(%esi)
	jump_5406a:
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_5406f:
		xor    %edx,%edx
		mov    %cx,%dx
		mov    $0x2,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		push   $0x3
		push   $0x0
		push   $0x64
		add    $0x3e,%edx
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		and    $0xffff,%edx
		mov    %esi,%eax
		call   ac_play_dist_speech
		jmp    jump_53ffe
	jump_540a5:
		push   $0x2
		xor    %edx,%edx
		mov    $0x40,%ecx
		mov    0x16(%esi),%dx
		mov    $0x7f,%ebx
		add    %edx,%eax
		push   $0x0
		and    $0x1,%eax
		xor    %edx,%edx
		add    $0x28,%eax
		push   $0x64
		mov    %ax,%dx
		mov    %esi,%eax
		call   ac_play_dist_speech
		jmp    jump_53ffe
	jump_540d4:
		call   ac_LbRandomAnyShort
		mov    %eax,%ecx
		mov    0x8(%esi),%al
		cmp    $0xa,%al
		je     jump_5406f
		mov    $0x1,%edx
		mov    %al,%cl
		shl    %cl,%edx
		xor    %ecx,%ecx
		mov    gameturn,%eax
		mov    EXPORT_SYMBOL(female_peep),%cx
		shr    $0x7,%eax
		test   %edx,%ecx
		je     jump_540a5
		push   $0x2
		xor    %edx,%edx
		mov    $0x40,%ecx
		mov    0x16(%esi),%dx
		mov    $0x7f,%ebx
		add    %edx,%eax
		push   $0x0
		and    $0x1,%eax
		xor    %edx,%edx
		add    $0x29,%eax
		push   $0x64
		mov    %ax,%dx
		mov    %esi,%eax
		call   ac_play_dist_speech
		jmp    jump_53ffe


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_danger)	/* 0x054130 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		testl  $0x40011003,0xc(%eax)
		jne    jump_54186
		testb  $0x8,0x46(%eax)
		jne    jump_54186
		xor    %edx,%edx
		mov    0x6c(%eax),%dl
		cmp    $0xe,%edx
		je     jump_54186
		cmp    $0xf,%edx
		je     jump_54186
		testw  $0x140,0x46(%eax)
		jne    jump_54186
		xor    %edx,%edx
		mov    gameturn,%ebx
		mov    0x16(%eax),%dx
		add    %ebx,%edx
		test   $0x3,%dl
		jne    jump_54186
		mov    0x70(%eax),%dx
		shl    $0x4,%edx
		shr    $0xd,%dx
		and    $0xffff,%edx
		cmp    $0x3,%edx
		jge    jump_54186
		call   search_for_danger
	jump_54186:
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
try_and_kill_target:	/* 0x05418C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		mov    %eax,%esi
		mov    0x56(%eax),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_54221
		mov    0x40(%esi),%edx
		mov    0xa(%edx),%ax
		cmp    $0xc,%eax
		je     jump_541b7
		cmp    $0x24,%eax
		je     jump_541b7
		testb  $0x2,0xc(%edx)
		je     jump_541c3
	jump_541b7:
		movl   $0x0,0x40(%esi)
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_541c3:
		mov    %esi,%eax
		call   ac_get_weapon_range
		mov    %eax,%ebx
		imul   %eax,%ebx
		mov    $0x1,%ecx
		mov    0x40(%esi),%edx
		mov    %esi,%eax
		call   ac_can_i_see_thing
		test   %eax,%eax
		jle    jump_5421d
		andl   $0xffdff6ff,0xc(%esi)
		mov    0xd(%esi),%dh
		or     $0x8,%dh
		mov    0xf(%esi),%bl
		mov    %dh,0xd(%esi)
		test   $0x10,%bl
		je     jump_54221
		mov    0x5c(%esi),%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,4),%esi
		add    %eax,%esi
		shl    $0x2,%esi
		add    %eax,%esi
		mov    things,%eax
		orb    $0x1,0xf(%eax,%esi,8)
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_5421d:
		andb   $0xf7,0xd(%esi)
	jump_54221:
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
search_floor_for_item:	/* 0x054228 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x20,%esp
		mov    %eax,%ebp
		mov    %edx,0x1c(%esp)
		mov    0x18(%eax),%eax
		mov    %eax,0x8(%esp)
		mov    0x1c(%ebp),%eax
		mov    %eax,(%esp)
		mov    0x20(%ebp),%eax
		mov    %eax,0x4(%esp)
		mov    0x8(%esp),%eax
		sar    $0x10,%eax
		mov    %ax,0x14(%esp)
		mov    0x4(%esp),%eax
		mov    $0xffffffff,%edx
		sar    $0x10,%eax
		mov    %dx,0x10(%esp)
		mov    %ax,0xc(%esp)
		jmp    jump_54273
	jump_5426e:
		incw   0x10(%esp)
	jump_54273:
		mov    0xe(%esp),%eax
		sar    $0x10,%eax
		cmp    $0x2,%eax
		jge    jump_543bb
		movw   $0xffff,0x18(%esp)
		jmp    jump_5433a
	jump_5428f:
		imul   $0x3c,%eax,%eax
		mov    EXPORT_SYMBOL(sthings),%ebx
		add    %eax,%ebx
		xor    %eax,%eax
		mov    0x9(%ebx),%al
		cmp    $0x19,%eax
		jne    jump_5431f
		mov    (%esp),%edx
		mov    0x1c(%ebx),%eax
		sub    %edx,%eax
		sar    $0x8,%eax
		cmp    $0x19,%eax
		jge    jump_5431f
		cmp    $0xffffffe7,%eax
		jle    jump_5431f
		mov    0x8(%esp),%esi
		mov    0x18(%ebx),%eax
		sub    %esi,%eax
		sar    $0x8,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    0x4(%esp),%edx
		mov    %eax,%esi
		mov    0x20(%ebx),%eax
		sub    %edx,%eax
		sar    $0x8,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%esi
		jle    jump_542e9
		sar    %eax
		jmp    jump_542eb
	jump_542e9:
		sar    %esi
	jump_542eb:
		add    %esi,%eax
		xor    %esi,%esi
		xor    %edx,%edx
		mov    0x14(%ebx),%si
		mov    0x14(%ebp),%dx
		add    %edx,%esi
		cmp    %esi,%eax
		jge    jump_5431f
		mov    0x1c(%esp),%esi
		cmp    0x16(%ebx),%si
		jne    jump_5431f
		mov    0x16(%ebx),%ax
		mov    %ax,0x5e(%ebp)
		orb    $0x8,0xf(%ebp)
		mov    $0x1,%eax
		jmp    jump_543bd
	jump_5431f:
		movswl %cx,%eax
		imul   $0x3c,%eax,%eax
		mov    EXPORT_SYMBOL(sthings),%ebx
	jump_5432b:
		mov    0x2(%ebx,%eax,1),%cx
		test   %cx,%cx
		jne    jump_54393
	jump_54335:
		incw   0x18(%esp)
	jump_5433a:
		mov    0x16(%esp),%ebx
		sar    $0x10,%ebx
		cmp    $0x2,%ebx
		jge    jump_5426e
		mov    0x12(%esp),%eax
		mov    0xe(%esp),%esi
		sar    $0x10,%eax
		sar    $0x10,%esi
		add    %esi,%eax
		test   %eax,%eax
		jle    jump_54335
		cmp    $0x80,%eax
		jge    jump_54335
		mov    0xa(%esp),%esi
		sar    $0x10,%esi
		add    %esi,%ebx
		test   %ebx,%ebx
		jle    jump_54335
		cmp    $0x80,%ebx
		jge    jump_54335
		shl    $0x7,%ebx
		add    %ebx,%eax
		imul   $0x12,%eax,%ebx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		mov    0x8(%ebx,%eax,1),%cx
		xor    %edi,%edi
		test   %cx,%cx
		je     jump_54335
	jump_54393:
		xor    %eax,%eax
		mov    %di,%ax
		cmp    $0x19a,%eax
		jge    jump_54335
		movswl %cx,%eax
		inc    %edi
		test   %eax,%eax
		jle    jump_5428f
		imul   $0xa8,%eax,%ebx
		mov    things,%eax
		jmp    jump_5432b
	jump_543bb:
		xor    %eax,%eax
	jump_543bd:
		add    $0x20,%esp
		pop    %ebp
	jump_543c1:
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_get_item)	/* 0x0543C8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    %eax,%ebx
		mov    0x46(%eax),%edx
		sar    $0x10,%edx
		mov    %edx,%eax
		shl    $0x4,%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(sthings),%edx
		mov    0x9(%edx,%eax,4),%al
		and    $0xff,%eax
		cmp    $0x19,%eax
		je     jump_54404
		mov    0x47(%ebx),%dh
		movw   $0x0,0xa(%ebx)
		and    $0xf7,%dh
		mov    %dh,0x47(%ebx)
		jmp    jump_544ff
	jump_54404:
		mov    %ebx,%eax
		call   ac_person_goto_point
		testb  $0x8,0xf(%ebx)
		je     jump_5443b
		mov    0x5e(%ebx),%ax
		cmp    0x48(%ebx),%ax
		je     jump_544f2
		mov    0x46(%ebx),%edx
		mov    %ebx,%eax
		sar    $0x10,%edx
		call   search_floor_for_item
		cwtl
		cmp    $0x1,%eax
		jne    jump_544ff
		jmp    jump_544f2
	jump_5443b:
		testb  $0x8,0xe(%ebx)
		jne    jump_544ff
		xor    %eax,%eax
		mov    0xa(%ebx),%ax
		test   %eax,%eax
		jne    jump_544ff
		mov    0x46(%ebx),%edx
		sar    $0x10,%edx
		mov    %edx,%eax
		shl    $0x4,%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(sthings),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0x18(%ebx),%eax
		sub    0x18(%edx),%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    0x46(%ebx),%edx
		sar    $0x10,%edx
		mov    %eax,%ecx
		mov    %edx,%eax
		shl    $0x4,%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(sthings),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0x20(%ebx),%eax
		sub    0x20(%edx),%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %ecx,%edx
		mov    %eax,%esi
		sar    $0x7,%edx
		sar    $0x7,%esi
		cmp    %eax,%ecx
		jge    jump_544cd
		mov    %eax,%edi
		sar    $0x5,%edi
		sub    %edi,%eax
		sub    %esi,%eax
		mov    %eax,%esi
		mov    %ecx,%eax
		sar    $0x2,%eax
		add    %eax,%esi
		mov    %ecx,%eax
		sar    $0x3,%eax
		add    %eax,%esi
		mov    %ecx,%eax
		sar    $0x6,%eax
		add    %esi,%eax
		add    %edx,%eax
		jmp    jump_544eb
	jump_544cd:
		mov    %ecx,%edi
		sar    $0x5,%edi
		sub    %edi,%ecx
		sub    %edx,%ecx
		mov    %eax,%edx
		sar    $0x2,%edx
		add    %edx,%ecx
		mov    %eax,%edx
		sar    $0x3,%edx
		sar    $0x6,%eax
		add    %ecx,%edx
		add    %edx,%eax
		add    %esi,%eax
	jump_544eb:
		cmp    $0x10000,%eax
		jge    jump_544ff
	jump_544f2:
		mov    0x46(%ebx),%edx
		mov    %ebx,%eax
		sar    $0x10,%edx
		call   ac_person_init_pickup
	jump_544ff:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_use_vehicle)	/* 0x054564 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		mov    %eax,%ebx
		testb  $0x10,0xf(%eax)
		jne    jump_545d5
		mov    %ebx,%eax
		call   ac_person_goto_point
		testb  $0x1,0xf(%ebx)
		je     jump_545db
		mov    0x5e(%ebx),%ax
		cmp    0x48(%ebx),%ax
		jne    jump_545db
		mov    0x46(%ebx),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		add    %eax,%edx
		mov    %ebx,%eax
		call   ac_can_i_enter_vehicle
		test   %al,%al
		je     jump_545db
		mov    0x46(%ebx),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		add    %eax,%edx
		mov    %ebx,%eax
		call   ac_person_enter_vehicle
	jump_545d5:
		movw   $0x0,0xa(%ebx)
	jump_545db:
		pop    %edx
		pop    %ebx
		lea    0x0(%eax),%eax
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_attempt_to_leave_ferry)	/* 0x0545E4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    %eax,%esi
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		mov    game_commands,%edi
		shl    $0x5,%eax
		add    %eax,%edi
		mov    0xc(%edi),%eax
		sar    $0x10,%eax
		shl    $0x6,%eax
		mov    %eax,(%esp)
		imul   %eax,%eax
		mov    0x5c(%esi),%ebp
		sar    $0x10,%ebp
		mov    %eax,(%esp)
		lea    0x0(,%ebp,4),%eax
		add    %ebp,%eax
		shl    $0x2,%eax
		add    %ebp,%eax
		mov    things,%ebp
		shl    $0x3,%eax
		add    %eax,%ebp
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+2,%al
		push   %eax
		mov    0x6(%edi),%eax
		mov    0x20(%esi),%ebx
		sar    $0x10,%eax
		mov    0x1c(%esi),%edx
		push   %eax
		mov    0x4(%edi),%eax
		sar    $0x8,%ebx
		sar    $0x10,%eax
		sar    $0x8,%edx
		push   %eax
		mov    0x18(%esi),%eax
		mov    0x2(%edi),%ecx
		sar    $0x8,%eax
		sar    $0x10,%ecx
		call   ac_func_6fd1c
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+4,%al
		mov    0x2(%edi),%ecx
		push   %eax
		mov    0x6(%edi),%eax
		mov    0x20(%ebp),%ebx
		sar    $0x10,%eax
		mov    0x1c(%ebp),%edx
		push   %eax
		mov    0x4(%edi),%eax
		sar    $0x10,%ecx
		sar    $0x10,%eax
		sar    $0x8,%ebx
		push   %eax
		mov    0x18(%ebp),%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		call   ac_func_6fd1c
		cmpw   $0x0,0x72(%ebp)
		je     jump_54739
		mov    0x36(%ebp),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_54739
		mov    (%esp),%ebx
		mov    0x6(%edi),%ecx
		mov    0x2(%edi),%edx
		mov    0x14(%esi),%eax
		push   %ebx
		sar    $0x10,%ecx
		sar    $0x10,%edx
		mov    0x4(%edi),%ebx
		sar    $0x10,%eax
		sar    $0x10,%ebx
		call   ac_thing_arrived_at_obj_radius
		test   %al,%al
		je     jump_54739
		mov    %ebp,%edx
		mov    %esi,%eax
		mov    0xa(%ebp),%bx
		movw   $0x0,0xa(%ebp)
		call   ac_person_leave_vehicle
		mov    %esi,%eax
		mov    %bx,0xa(%ebp)
		call   ac_delete_node
		mov    0x2(%edi),%eax
		sar    $0x10,%eax
		shl    $0x8,%eax
		mov    %eax,0x18(%esi)
		mov    0x6(%edi),%edx
		mov    0x2(%edi),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		call   ac_alt_at_point
		mov    %eax,0x1c(%esi)
		mov    0x6(%edi),%eax
		sar    $0x10,%eax
		shl    $0x8,%eax
		mov    %eax,0x20(%esi)
		xor    %eax,%eax
		mov    0x16(%esi),%ax
		call   ac_add_node_thing
		mov    0xc(%esi),%ah
		movw   $0x0,0xa(%esi)
		or     $0x4,%ah
		mov    %ah,0xc(%esi)
	jump_54739:
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_catch_train)	/* 0x054744 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		push   %esi
		mov    %eax,%ebx
		call   ac_person_goto_point
		xor    %eax,%eax
		mov    0xa(%ebx),%ax
		test   %eax,%eax
		jne    jump_547ba
		mov    0x54(%ebx),%ax
		mov    game_commands,%edx
		shl    $0x5,%eax
		add    %eax,%edx
		mov    0x6e(%ebx),%ax
		cmp    0x2(%edx),%ax
		jne    jump_5477f
		movb   $0x0,0x3f(%ebx)
		movw   $0x32,0xa(%ebx)
		pop    %esi
		pop    %edx
		pop    %ebx
		ret
	jump_5477f:
		mov    0x4c(%ebx),%si
		movw   $0xffff,0x66(%ebx)
		test   %si,%si
		je     jump_54795
		mov    %ebx,%eax
		call   ac_remove_path
	jump_54795:
		xor    %edx,%edx
		mov    0x54(%ebx),%dx
		mov    game_commands,%eax
		shl    $0x5,%edx
		mov    (%edx,%eax,1),%edx
		sar    $0x10,%edx
		mov    %ebx,%eax
		call   ac_build_navigate_path_to_face
		movb   $0x0,0x5b(%ebx)
		movw   $0x31,0xa(%ebx)
	jump_547ba:
		pop    %esi
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_support_person)	/* 0x054824 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		mov    %eax,%edx
		mov    0x46(%eax),%ebx
		sar    $0x10,%ebx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    things,%ebx
		shl    $0x3,%eax
		add    %eax,%ebx
		mov    0x72(%edx),%ax
		mov    0x72(%ebx),%cx
		cmp    %cx,%ax
		je     jump_54864
		mov    %edx,%eax
		mov    %cx,0x72(%edx)
		call   calc_person_speed
		mov    %ax,0x38(%edx)
	jump_54864:
		testb  $0x2,0xc(%ebx)
		je     jump_5487c
		movw   $0x0,0xa(%edx)
		mov    0x54(%ebx),%ax
		mov    %ax,0x54(%edx)
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_5487c:
		mov    0x40(%ebx),%ecx
		test   %ecx,%ecx
		je     jump_5488d
		cmpw   $0x0,0x58(%ebx)
		je     jump_5488d
		mov    %ecx,0x40(%edx)
	jump_5488d:
		cmpl   $0x0,0x40(%edx)
		je     jump_5489e
		mov    %edx,%eax
		call   try_and_kill_target
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_5489e:
		mov    %edx,%eax
		call   ac_person_goto_person_nav
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
copy_owner_with_weapon:	/* 0x0548AC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edi
		mov    %eax,%ebx
		mov    %edx,%eax
		mov    0x99(%ebx),%dl
		mov    0x99(%eax),%dh
		cmp    %dh,%dl
		je     jump_54aea
		test   %dh,%dh
		je     jump_54a14
		xor    %edx,%edx
		mov    0x99(%ebx),%dl
		test   %edx,%edx
		jne    jump_54aea
		cmpw   $0x0,0x9e(%ebx)
		je     jump_548f7
		mov    0x9e(%ebx),%al
		mov    %al,0x99(%ebx)
		jmp    jump_54929
	jump_548f7:
		xor    %ecx,%ecx
		mov    0x99(%eax),%cl
		mov    $0x1,%edx
		dec    %ecx
		shl    %cl,%edx
		test   %edx,0xa4(%ebx)
		je     jump_5491d
		mov    0x99(%eax),%al
		mov    %al,0x99(%ebx)
		jmp    jump_54929
	jump_5491d:
		mov    $0x500,%edx
		mov    %ebx,%eax
		call   ac_choose_best_weapon_for_range
	jump_54929:
		cmpb   $0x0,0x99(%ebx)
		je     jump_54aea
		mov    %ebx,%eax
		call   ac_peep_change_weapon
		xor    %eax,%eax
		xor    %edx,%edx
		mov    0x99(%ebx),%al
		mov    0x8(%ebx),%dl
		mov    %ax,0x9e(%ebx)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		add    %eax,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    0x57(%ebx),%al
		add    %edx,%eax
		lea    0x0(,%eax,2),%edx
		mov    nstart_ani,%eax
		mov    0x24(%ebx),%di
		sub    (%edx,%eax,1),%di
		xor    %edx,%edx
		mov    %ebx,%eax
		mov    %di,0x24(%ebx)
		call   ac_gun_out_anim
		xor    %edx,%edx
		mov    0x8(%ebx),%dl
		mov    %al,0x6c(%ebx)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		add    %eax,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    0x57(%ebx),%al
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		add    %ax,0x24(%ebx)
		xor    %edx,%edx
		mov    0x8(%ebx),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		dec    %eax
		mov    %ax,0x26(%ebx)
		pop    %edi
		pop    %ecx
		pop    %ebx
		ret
	jump_54a14:
		test   %dl,%dl
		je     jump_54aea
		mov    %ebx,%eax
		call   ac_peep_change_weapon
		xor    %eax,%eax
		mov    0x99(%ebx),%al
		mov    %dh,0x99(%ebx)
		xor    %edx,%edx
		mov    0x8(%ebx),%dl
		mov    %ax,0x9e(%ebx)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		add    %eax,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    0x57(%ebx),%al
		mov    nstart_ani,%ecx
		add    %edx,%eax
		mov    (%ecx,%eax,2),%ax
		sub    %ax,0x24(%ebx)
		xor    %edx,%edx
		mov    0x8(%ebx),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		movb   $0x0,0x6c(%ebx)
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		add    %eax,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    0x57(%ebx),%al
		add    %edx,%eax
		mov    (%ecx,%eax,2),%ax
		xor    %edx,%edx
		mov    0x24(%ebx),%cx
		mov    0x8(%ebx),%dl
		add    %eax,%ecx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		mov    %cx,0x24(%ebx)
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		dec    %eax
		mov    %ax,0x26(%ebx)
	jump_54aea:
		pop    %edi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_protect_person)	/* 0x054B54 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x20,%esp
		mov    %eax,%esi
		mov    0x46(%eax),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edi
		shl    $0x3,%eax
		add    %eax,%edi
		testb  $0x1,0xd(%edi)
		je     jump_54b8d
		orl    $0x200100,0xc(%esi)
		jmp    jump_54b91
	jump_54b8d:
		andb   $0xfe,0xd(%esi)
	jump_54b91:
		testb  $0x20,0xd(%esi)
		je     jump_54bc6
		mov    0x46(%esi),%edx
		xor    %eax,%eax
		sar    $0x10,%edx
		mov    0x3c(%esi),%ax
		cmp    %eax,%edx
		je     jump_54bab
		mov    %ax,0x48(%esi)
	jump_54bab:
		testb  $0x20,0xd(%edi)
		jne    jump_54bc6
		testb  $0x8,0x45(%esi)
		jne    jump_54bc6
		cmpb   $0x0,in_network_game
		je     jump_54bc6
		movw   $0x0,0xa(%esi)
	jump_54bc6:
		mov    0x80(%esi),%ch
		test   $0x4,%ch
		je     jump_54cb6
		testb  $0x4,0x80(%edi)
		jne    jump_54bf2
		mov    %ch,%ah
		mov    0x47(%esi),%dl
		and    $0xfb,%ah
		and    $0x7f,%dl
		mov    %ah,0x80(%esi)
		mov    %dl,0x47(%esi)
	jump_54bf2:
		xor    %eax,%eax
		mov    0xa(%edi),%ax
		cmp    $0x5,%eax
		jne    jump_54ca4
		testb  $0x8,0x46(%esi)
		je     jump_54ca4
		mov    %esi,%eax
		xor    %edx,%edx
		call   ac_gun_out_anim
		xor    %edx,%edx
		mov    0x8(%esi),%dl
		mov    %al,0x6c(%esi)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		xor    %edx,%edx
		dec    %eax
		mov    0x8(%esi),%dl
		mov    %ax,0x26(%esi)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		add    %eax,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    0x57(%esi),%al
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		movw   $0x30,0x28(%esi)
		mov    0x46(%esi),%bl
		movw   $0x30,0x2a(%esi)
		and    $0xf7,%bl
		mov    %ax,0x24(%esi)
		mov    %esi,%eax
		mov    %bl,0x46(%esi)
		call   calc_person_speed
		mov    %ax,0x38(%esi)
	jump_54ca4:
		mov    0x44(%esi),%ebx
		and    $0x80000,%ebx
		mov    %ebx,0x44(%esi)
		jne    jump_55383
	jump_54cb6:
		testb  $0x40,0xd(%edi)
		je     jump_54ce4
		testb  $0x40,0xd(%esi)
		jne    jump_54cde
		testb  $0x40,0x45(%esi)
		jne    jump_54cde
		mov    %esi,%eax
		call   ac_remove_path
		mov    0x45(%esi),%ah
		movw   $0xffff,0x66(%esi)
		or     $0x40,%ah
		mov    %ah,0x45(%esi)
	jump_54cde:
		testb  $0x40,0xd(%esi)
		je     jump_54ce8
	jump_54ce4:
		andb   $0xbf,0x45(%esi)
	jump_54ce8:
		testl  $0x88000,0x44(%edi)
		je     jump_54d3c
		testb  $0x8,0x46(%edi)
		je     jump_54d29
		testb  $0x8,0x46(%esi)
		jne    jump_54d29
		mov    0xa0(%esi),%eax
		sar    $0x10,%eax
		mov    0x9e(%esi),%edx
		sar    $0x2,%eax
		sar    $0x10,%edx
		add    $0x40,%eax
		cmp    %eax,%edx
		jle    jump_54d29
		mov    0x47(%esi),%cl
		or     $0x80,%cl
		mov    %esi,%eax
		mov    %cl,0x47(%esi)
		call   ac_set_person_animmode_run
	jump_54d29:
		testb  $0x80,0x45(%edi)
		je     jump_54d3c
		mov    %esi,%eax
		call   ac_remove_path
		movw   $0xffff,0x66(%esi)
	jump_54d3c:
		testb  $0x10,0xf(%esi)
		je     jump_54d97
		testb  $0x10,0xf(%edi)
		je     jump_54d51
		andb   $0x7f,0x47(%esi)
		jmp    jump_54df0
	jump_54d51:
		mov    %esi,%eax
		call   ac_person_attempt_to_leave_vehicle
		testb  $0x20,0xd(%esi)
		je     jump_54d8b
		mov    0x54(%edi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		lea    0x0(,%eax,4),%edx
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(follow_dist)(%edx,%eax,1),%al
		mov    %al,0x5b(%esi)
		jmp    jump_54d8f
	jump_54d8b:
		movb   $0x8,0x5b(%esi)
	jump_54d8f:
		movw   $0x2b,0xa(%esi)
		jmp    jump_54df0
	jump_54d97:
		testb  $0x10,0xf(%edi)
		je     jump_54df0
		mov    0xf(%esi),%dl
		movb   $0x0,0x5b(%esi)
		test   $0x1,%dl
		je     jump_54df0
		mov    0x5e(%esi),%ax
		cmp    0x5e(%edi),%ax
		jne    jump_54df0
		mov    0x5c(%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		add    %eax,%edx
		mov    %esi,%eax
		call   ac_person_enter_vehicle
		cmpw   $0x0,0x4c(%esi)
		je     jump_5537d
		mov    %esi,%eax
		call   ac_remove_path
		jmp    jump_5537d
	jump_54df0:
		testb  $0x2,0xc(%edi)
		je     jump_54e01
		movw   $0x0,0xa(%esi)
		jmp    jump_55383
	jump_54e01:
		testb  $0xc,0xd(%edi)
		jne    jump_54e11
		testb  $0x4,0x45(%edi)
		je     jump_5528c
	jump_54e11:
		testb  $0x80,0x47(%esi)
		jne    jump_5528c
		cmpl   $0x0,0x40(%edi)
		je     jump_54f22
		cmpb   $0x0,0x99(%esi)
		jne    jump_54e58
		jmp    jump_54f22
	jump_54e33:
		cmp    0x99(%esi),%al
		je     jump_54e92
	jump_54e3f:
		xor    %al,%al
		jmp    jump_54e94
	jump_54e46:
		mov    0x99(%edx),%al
		cmp    0x99(%ebx),%al
		jne    jump_54e92
		mov    $0x3,%al
		jmp    jump_54e94
	jump_54e58:
		mov    %esi,%edx
		mov    0x99(%edi),%al
		mov    %edi,%ebx
		cmp    $0x16,%al
		jb     jump_54e7e
		jbe    jump_54e46
		cmp    $0x1a,%al
		jb     jump_54e78
		jbe    jump_54e33
		cmp    $0x1c,%al
		jbe    jump_54e3f
		cmp    $0x1d,%al
		je     jump_54e3f
		jmp    jump_54e92
	jump_54e78:
		cmp    $0x19,%al
		je     jump_54e46
		jmp    jump_54e92
	jump_54e7e:
		cmp    $0x10,%al
		jb     jump_54e8a
		jbe    jump_54e3f
		cmp    $0x12,%al
		je     jump_54e3f
		jmp    jump_54e92
	jump_54e8a:
		cmp    $0xc,%al
		jb     jump_54e92
		cmp    $0xd,%al
		jbe    jump_54e3f
	jump_54e92:
		mov    $0x1,%al
	jump_54e94:
		test   %al,%al
		je     jump_5528c
		mov    0x51(%edi),%al
		xor    %edx,%edx
		and    $0x7f,%al
		mov    %al,%dl
		lea    0x0(,%edx,4),%eax
		add    %eax,%edx
		mov    0x40(%edi),%eax
		mov    0x51(%eax),%al
		shl    $0x3,%edx
		mov    %al,%cl
		mov    $0x1,%eax
		and    $0x7f,%cl
		mov    war_flags__Truce(%edx),%ebx
		shl    %cl,%eax
		test   %ebx,%eax
		jne    jump_5528c
		mov    %esi,%eax
		call   ac_get_weapon_range
		mov    %eax,%ebp
		imul   %eax,%ebp
		mov    $0x1,%ecx
		mov    0x40(%edi),%edx
		lea    0x190000(%ebp),%ebx
		mov    %esi,%eax
		call   ac_can_i_see_thing
		test   %eax,%eax
		je     jump_5528c
		imul   %eax,%eax
		cmp    %ebp,%eax
		jle    jump_54f10
		testb  $0x20,0xd(%esi)
		jne    jump_54f17
		orb    $0x8,0x80(%esi)
		jmp    jump_54f17
	jump_54f10:
		andb   $0xf7,0x80(%esi)
	jump_54f17:
		mov    0x40(%edi),%eax
		mov    %eax,0x40(%esi)
		jmp    jump_5528c
	jump_54f22:
		testb  $0x20,0xd(%esi)
		je     jump_5528c
		testb  $0x20,0xf(%edi)
		jne    jump_54f5c
		jmp    jump_5528c
	jump_54f37:
		cmp    0x99(%esi),%al
		je     jump_54f96
	jump_54f43:
		xor    %al,%al
		jmp    jump_54f98
	jump_54f4a:
		mov    0x99(%edx),%al
		cmp    0x99(%ebx),%al
		jne    jump_54f96
		mov    $0x3,%al
		jmp    jump_54f98
	jump_54f5c:
		mov    %esi,%edx
		mov    0x99(%edi),%al
		mov    %edi,%ebx
		cmp    $0x16,%al
		jb     jump_54f82
		jbe    jump_54f4a
		cmp    $0x1a,%al
		jb     jump_54f7c
		jbe    jump_54f37
		cmp    $0x1c,%al
		jbe    jump_54f43
		cmp    $0x1d,%al
		je     jump_54f43
		jmp    jump_54f96
	jump_54f7c:
		cmp    $0x19,%al
		je     jump_54f4a
		jmp    jump_54f96
	jump_54f82:
		cmp    $0x10,%al
		jb     jump_54f8e
		jbe    jump_54f43
		cmp    $0x12,%al
		je     jump_54f43
		jmp    jump_54f96
	jump_54f8e:
		cmp    $0xc,%al
		jb     jump_54f96
		cmp    $0xd,%al
		jbe    jump_54f43
	jump_54f96:
		mov    $0x1,%al
	jump_54f98:
		test   %al,%al
		je     jump_5528c
		cmpl   $0x0,0x40(%edi)
		jne    jump_5528c
		mov    0x8c(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_5528c
		orb    $0x20,0xf(%esi)
		mov    0x54(%edi),%ax
		sar    $0x2,%eax
		mov    %eax,%ebx
		shl    $0x3,%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		sub    %ebx,%eax
		add    %eax,%eax
		mov    %eax,%ebx
		shl    $0x2,%eax
		sub    %ebx,%eax
		mov    data_1a63ce(%eax),%edx
		sar    $0x10,%edx
		mov    %edx,0x14(%esp)
		mov    data_1a63d0(%eax),%edx
		mov    data_1a63d2(%eax),%eax
		sar    $0x10,%eax
		mov    %eax,0x1c(%esp)
		mov    %esi,%eax
		call   ac_get_weapon_range
		mov    %eax,0x18(%esp)
		mov    0x18(%esi),%ebp
		mov    0x14(%esp),%eax
		sar    $0x8,%ebp
		sar    $0x10,%edx
		sub    %ebp,%eax
		mov    %edx,0x8(%esp)
		mov    %eax,%ebp
		mov    0x1c(%esi),%eax
		mov    0x20(%esi),%ecx
		sar    $0x8,%eax
		sar    $0x8,%ecx
		sub    %eax,%edx
		mov    0x1c(%esp),%eax
		sub    %ecx,%eax
		mov    %edx,0x10(%esp)
		mov    %eax,%ecx
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebx
		mov    %ebp,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x7,%edx
		mov    %edx,0xc(%esp)
		mov    %ebx,%edx
		sar    $0x7,%edx
		mov    %edx,(%esp)
		cmp    %ebx,%eax
		jge    jump_5507d
		mov    %ebx,%edx
		sar    $0x5,%edx
		sub    %edx,%ebx
		sub    (%esp),%ebx
		mov    %eax,%edx
		sar    $0x2,%edx
		add    %ebx,%edx
		mov    %eax,%ebx
		sar    $0x3,%ebx
		sar    $0x6,%eax
		add    %ebx,%edx
		add    %edx,%eax
		mov    0xc(%esp),%edx
		add    %edx,%eax
		jmp    jump_550aa
	jump_5507d:
		mov    %eax,%edx
		sar    $0x5,%edx
		sub    %edx,%eax
		mov    0xc(%esp),%edx
		sub    %edx,%eax
		mov    %eax,0x4(%esp)
		mov    %ebx,%eax
		mov    0x4(%esp),%edx
		sar    $0x2,%eax
		add    %edx,%eax
		mov    %ebx,%edx
		sar    $0x3,%edx
		sar    $0x6,%ebx
		add    %edx,%eax
		add    %ebx,%eax
		mov    (%esp),%ebx
		add    %ebx,%eax
	jump_550aa:
		mov    0x18(%esp),%edx
		mov    %eax,%ebx
		cmp    %edx,%eax
		jle    jump_5511b
		test   %eax,%eax
		jne    jump_550bd
		mov    $0x1,%ebx
	jump_550bd:
		mov    0x18(%esp),%edx
		imul   %ebp,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    0x10(%esp),%edx
		mov    %eax,%ebp
		mov    0x18(%esp),%eax
		imul   %eax,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    0x18(%esp),%edx
		imul   %ecx,%edx
		mov    %eax,0x10(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,%ecx
		mov    0x18(%esi),%eax
		sar    $0x8,%eax
		add    %ebp,%eax
		mov    %eax,0x14(%esp)
		mov    0x1c(%esi),%eax
		mov    0x10(%esp),%edx
		sar    $0x8,%eax
		add    %eax,%edx
		mov    0x20(%esi),%eax
		sar    $0x8,%eax
		add    %ecx,%eax
		mov    %edx,0x8(%esp)
		mov    %eax,0x1c(%esp)
	jump_5511b:
		testb  $0x20,0xd(%esi)
		je     jump_551d9
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		sar    $0x2,%eax
		mov    %eax,%ebx
		shl    $0x3,%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		sub    %ebx,%eax
		add    %eax,%eax
		lea    0x0(,%eax,4),%edx
		sub    %eax,%edx
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		add    %eax,%eax
		add    %edx,%eax
		mov    0x14(%esp),%edx
		mov    %dx,data_1a647a(%eax)
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		sar    $0x2,%eax
		mov    %eax,%ebx
		shl    $0x3,%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		sub    %ebx,%eax
		add    %eax,%eax
		lea    0x0(,%eax,4),%edx
		sub    %eax,%edx
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		add    %eax,%eax
		add    %edx,%eax
		mov    0x8(%esp),%edx
		mov    %dx,data_1a63c8(%eax)
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		sar    $0x2,%eax
		mov    %eax,%ebx
		shl    $0x3,%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		sub    %ebx,%eax
		add    %eax,%eax
		lea    0x0(,%eax,4),%edx
		sub    %eax,%edx
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		add    %eax,%eax
		add    %edx,%eax
		mov    0x1c(%esp),%edx
		mov    %dx,data_1a6482(%eax)
	jump_551d9:
		mov    0xd(%esi),%ah
		or     $0x8,%ah
		mov    0xf(%esi),%dl
		mov    %ah,0xd(%esi)
		test   $0x10,%dl
		je     jump_5520b
		mov    0x5c(%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %eax,%edx
		mov    things,%eax
		shl    $0x3,%edx
		orb    $0x1,0xf(%edx,%eax,1)
	jump_5520b:
		mov    0x1c(%esp),%ecx
		mov    0x14(%esp),%ebx
		mov    0x20(%esi),%edx
		mov    0x18(%esi),%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		call   ac_angle_between_points
		cwtl
		add    $0x80,%eax
		sar    $0x8,%eax
		add    $0x8,%eax
		xor    %edx,%edx
		and    $0x7,%eax
		mov    0x57(%esi),%dl
		mov    %eax,%ebx
		and    $0xffff,%eax
		cmp    %edx,%eax
		je     jump_5528c
		xor    %edx,%edx
		mov    0x8(%esi),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		add    %eax,%eax
		add    %edx,%eax
		mov    %bl,0x57(%esi)
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    %bl,%al
		add    %edx,%eax
		lea    0x0(,%eax,2),%edx
		mov    nstart_ani,%eax
		mov    (%edx,%eax,1),%ax
		mov    %ax,0x24(%esi)
	jump_5528c:
		mov    0xf(%esi),%dl
		test   $0x20,%dl
		je     jump_552a2
		testb  $0xc,0xd(%esi)
		jne    jump_552a2
		mov    %dl,%bl
		and    $0xdf,%bl
		mov    %bl,0xf(%esi)
	jump_552a2:
		testb  $0x20,0xf(%esi)
		je     jump_552b4
		testb  $0x8,0xd(%edi)
		jne    jump_552d7
		andb   $0xf7,0xd(%esi)
		jmp    jump_552d7
	jump_552b4:
		mov    0x40(%esi),%ecx
		test   %ecx,%ecx
		jne    jump_552c1
		andb   $0xf7,0xd(%esi)
		jmp    jump_552d7
	jump_552c1:
		testb  $0x2,0xc(%ecx)
		je     jump_552d7
		mov    0xd(%esi),%ch
		movl   $0x0,0x40(%esi)
		and    $0xf7,%ch
		mov    %ch,0xd(%esi)
	jump_552d7:
		cmpl   $0x0,0x40(%esi)
		je     jump_552ea
		testb  $0x80,0x47(%esi)
		je     jump_552ea
		movl   $0x0,0x40(%esi)
	jump_552ea:
		testb  $0x20,0xd(%esi)
		jne    jump_552fa
		testb  $0x10,0xf(%edi)
		jne    jump_552fa
		movb   $0x8,0x5b(%esi)
	jump_552fa:
		testb  $0x10,0xf(%esi)
		jne    jump_55334
		testb  $0x4,0x80(%esi)
		jne    jump_55334
		mov    %esi,%eax
		call   ac_person_goto_person_nav
		mov    %eax,%edx
		xor    %eax,%eax
		mov    0x5b(%esi),%al
		imul   %eax,%eax
		shl    $0xc,%eax
		cmp    %eax,%edx
		jge    jump_55334
		testb  $0x8,0x46(%esi)
		je     jump_55334
		testb  $0x8,0x46(%edi)
		jne    jump_55334
		mov    %esi,%eax
		call   ac_set_person_animmode_walk
	jump_55334:
		cmpl   $0x0,0x40(%esi)
		jne    jump_5535d
		mov    0x8c(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_5535d
		testb  $0x20,0xf(%esi)
		jne    jump_5535d
		mov    0xd(%esi),%dh
		test   $0x8,%dh
		je     jump_5535d
		mov    %dh,%bl
		and    $0xf7,%bl
		mov    %bl,0xd(%esi)
	jump_5535d:
		cmpl   $0x0,0x40(%esi)
		je     jump_55373
		mov    0xf(%esi),%bh
		and    $0xdf,%bh
		mov    %esi,%eax
		mov    %bh,0xf(%esi)
		call   try_and_kill_target
	jump_55373:
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		test   %eax,%eax
		jne    jump_55383
	jump_5537d:
		movw   $0x2b,0xa(%esi)
	jump_55383:
		add    $0x20,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_being_persuaded)	/* 0x0553DC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		mov    EXPORT_SYMBOL(fifties_per_gameturn),%dx
		sub    %dx,0x28(%eax)
		mov    0x26(%eax),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		jge    jump_554b3
		mov    0x2a(%eax),%dx
		mov    %dx,0x28(%eax)
		xor    %edx,%edx
		mov    0x24(%eax),%dx
		lea    0x0(,%edx,8),%ebx
		mov    frame,%edx
		mov    0x6(%edx,%ebx,1),%bx
		mov    %bx,0x24(%eax)
		xor    %ebx,%ebx
		mov    0x24(%eax),%bx
		testb  $0x1,0x5(%edx,%ebx,8)
		je     jump_554b3
		xor    %ebx,%ebx
		mov    0x8(%eax),%bl
		movw   $0x5,0xa(%eax)
		lea    0x0(,%ebx,4),%edx
		mov    0xe(%eax),%cx
		sub    %ebx,%edx
		and    $0xbff7,%ecx
		shl    $0x2,%edx
		mov    %cx,0xe(%eax)
		sub    %ebx,%edx
		xor    %ebx,%ebx
		mov    0xe(%eax),%ch
		mov    0x6c(%eax),%bl
		or     $0x8,%ch
		add    %ebx,%ebx
		mov    %ch,0xe(%eax)
		mov    EXPORT_SYMBOL(people_frames)(%ebx,%edx,4),%dx
		xor    %ebx,%ebx
		and    $0xffff,%edx
		mov    0x57(%eax),%bl
		add    %ebx,%edx
		mov    nstart_ani,%ebx
		mov    (%ebx,%edx,2),%dx
		xor    %ebx,%ebx
		mov    0x8(%eax),%bl
		mov    %dx,0x24(%eax)
		lea    0x0(,%ebx,4),%edx
		sub    %ebx,%edx
		shl    $0x2,%edx
		sub    %ebx,%edx
		lea    0x0(,%edx,4),%ebx
		xor    %edx,%edx
		mov    0x6c(%eax),%dl
		mov    EXPORT_SYMBOL(people_frames)(%ebx,%edx,2),%dx
		dec    %edx
		mov    %dx,0x26(%eax)
	jump_554b3:
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_persuaded)	/* 0x0554B8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		mov    %eax,%esi
		cmpw   $0x0,0x8e(%eax)
		je     jump_554f5
		mov    0x8c(%eax),%ebx
		sar    $0x10,%ebx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		mov    things,%edx
		add    %ebx,%eax
		testb  $0x2,0xc(%edx,%eax,8)
		je     jump_554f5
		movw   $0x0,0x8e(%esi)
	jump_554f5:
		xor    %ebx,%ebx
		mov    0x3c(%esi),%bx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    things,%ebx
		shl    $0x3,%eax
		add    %eax,%ebx
		mov    0x72(%esi),%ax
		mov    0x72(%ebx),%cx
		cmp    %cx,%ax
		je     jump_55530
		mov    %esi,%eax
		mov    %cx,0x72(%esi)
		call   calc_person_speed
		mov    %ax,0x38(%esi)
	jump_55530:
		mov    0x45(%ebx),%cl
		test   $0x80,%cl
		je     jump_5554d
		mov    %cl,%ch
		and    $0x7f,%ch
		mov    %esi,%eax
		mov    %ch,0x45(%ebx)
		call   ac_remove_path
		movw   $0xffff,0x66(%esi)
	jump_5554d:
		testb  $0x2,0xc(%ebx)
		je     jump_5555f
		mov    %esi,%eax
		call   stop_being_persuaded
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_5555f:
		testb  $0x8,0x47(%esi)
		jne    jump_5558e
		jmp    jump_555bc
	jump_55567:
		cmpb   $0x0,0x5d(%esi)
		je     jump_5557c
		mov    0x47(%esi),%ah
		movb   $0x3,0x5b(%esi)
		and    $0xf7,%ah
		mov    %ah,0x47(%esi)
		jmp    jump_555b3
	jump_5557c:
		mov    %esi,%eax
		call   ac_person_get_item
		jmp    jump_555b3
	jump_55585:
		mov    %esi,%eax
		call   ac_person_pickup
		jmp    jump_555b3
	jump_5558e:
		mov    %esi,%ebx
		mov    0xa(%esi),%ax
		movb   $0x0,0x5b(%esi)
		cmp    $0x7,%ax
		jb     jump_555a6
		jbe    jump_55585
		cmp    $0x2c,%ax
		je     jump_55567
	jump_555a6:
		mov    0x47(%ebx),%dl
		movb   $0x3,0x5b(%ebx)
		and    $0xf7,%dl
		mov    %dl,0x47(%ebx)
	jump_555b3:
		movb   $0x8,0x5b(%esi)
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_555bc:
		mov    %ebx,%edx
		mov    %esi,%eax
		call   copy_owner_with_weapon
		mov    0x40(%esi),%edx
		test   %edx,%edx
		je     jump_555db
		mov    0x51(%edx),%al
		cmp    0x51(%esi),%al
		jne    jump_555db
		movl   $0x0,0x40(%esi)
	jump_555db:
		mov    0x40(%ebx),%ecx
		test   %ecx,%ecx
		je     jump_555ee
		cmpw   $0x0,0x58(%ebx)
		je     jump_555ee
		mov    %ecx,0x40(%esi)
		jmp    jump_555f5
	jump_555ee:
		movl   $0x0,0x40(%esi)
	jump_555f5:
		mov    0xf(%esi),%dh
		test   $0x10,%dh
		je     jump_55613
		testb  $0x10,0xf(%ebx)
		jne    jump_557cf
		mov    %esi,%eax
		call   ac_person_attempt_to_leave_vehicle
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_55613:
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0x30,%eax
		je     jump_5563c
		testb  $0x10,0xf(%ebx)
		je     jump_5563c
		test   $0x10,%dh
		jne    jump_5563c
		movw   $0x30,0xa(%esi)
		mov    %esi,%eax
		movw   $0xffff,0x66(%esi)
		call   ac_remove_path
	jump_5563c:
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0x30,%eax
		jne    jump_556ad
		testb  $0x10,0xf(%ebx)
		jne    jump_55658
		movw   $0x0,0xa(%esi)
		jmp    jump_556e3
	jump_55658:
		mov    0x3c(%esi),%ax
		mov    0x48(%esi),%dx
		mov    %ax,0x48(%esi)
		mov    %esi,%eax
		movb   $0x0,0x5b(%esi)
		call   ac_person_goto_person_nav
		mov    0xf(%esi),%ah
		mov    %dx,0x48(%esi)
		test   $0x1,%ah
		je     jump_556e3
		mov    0x5e(%esi),%ax
		cmp    0x5e(%ebx),%ax
		jne    jump_556e3
		mov    0x5c(%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		add    %eax,%edx
		mov    %esi,%eax
		call   ac_person_enter_vehicle
		jmp    jump_556e3
	jump_556ad:
		cmpl   $0x0,0x40(%esi)
		je     jump_556c0
		mov    %esi,%eax
		call   try_and_kill_target
		cmpl   $0x0,0x40(%esi)
		jne    jump_556e3
	jump_556c0:
		mov    0x3c(%esi),%ax
		mov    %ax,0x48(%esi)
		mov    0x70(%ebx),%eax
		sar    $0x10,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		sar    $0x3,%eax
		add    $0x2,%eax
		mov    %al,0x5b(%esi)
		mov    %esi,%eax
		call   ac_person_goto_person_nav
	jump_556e3:
		testb  $0xc,0xd(%ebx)
		je     jump_55709
		testb  $0x20,0xf(%ebx)
		je     jump_55709
		cmpl   $0x0,0x40(%ebx)
		jne    jump_55709
		mov    0x8c(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_55709
		orl    $0x20000800,0xc(%esi)
	jump_55709:
		testb  $0x20,0xd(%ebx)
		je     jump_557cf
		mov    0xc(%esi),%eax
		and    $0x20000800,%eax
		cmp    $0x20000800,%eax
		jne    jump_557cf
		xor    %eax,%eax
		mov    0x54(%ebx),%ax
		sar    $0x2,%eax
		lea    0x0(,%eax,8),%ebx
		add    %eax,%ebx
		shl    $0x3,%ebx
		sub    %eax,%ebx
		add    %ebx,%ebx
		mov    %ebx,%eax
		shl    $0x2,%ebx
		sub    %eax,%ebx
		mov    0x20(%esi),%edx
		mov    %ebx,%eax
		sar    $0x8,%edx
		mov    data_1a63ce(%ebx),%ebx
		mov    data_1a63d2(%eax),%ecx
		sar    $0x10,%ebx
		mov    0x18(%esi),%eax
		sar    $0x10,%ecx
		sar    $0x8,%eax
		call   ac_angle_between_points
		cwtl
		add    $0x80,%eax
		sar    $0x8,%eax
		add    $0x8,%eax
		xor    %edx,%edx
		and    $0x7,%eax
		mov    0x57(%esi),%dl
		mov    %eax,%ebx
		and    $0xffff,%eax
		cmp    %edx,%eax
		je     jump_557cf
		xor    %eax,%eax
		mov    0x8(%esi),%al
		mov    %bl,0x57(%esi)
		lea    0x0(,%eax,4),%ebx
		sub    %eax,%ebx
		shl    $0x2,%ebx
		sub    %eax,%ebx
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		add    %eax,%eax
		mov    EXPORT_SYMBOL(people_frames)(%eax,%ebx,4),%ax
		xor    %edx,%edx
		and    $0xffff,%eax
		mov    0x57(%esi),%dl
		add    %edx,%eax
		lea    0x0(,%eax,2),%edx
		mov    nstart_ani,%eax
		mov    (%edx,%eax,1),%ax
		mov    %ax,0x24(%esi)
	jump_557cf:
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_is_group_all_persuaded_by_me)	/* 0x0557D4 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		mov    things,%ebp
		mov    %edx,%edi
		mov    %ebx,%ecx
		xor    %edx,%edx
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(same_type_head)+512(,%eax,2),%ax
		test   %ax,%ax
		je     jump_55841
	jump_557f6:
		cwtl
		imul   $0xa8,%eax,%ebx
		lea    (%ebx,%ebp,1),%eax
		testb  $0x8,0xe(%eax)
		je     jump_55813
		mov    0x3c(%eax),%bx
		cmp    0x16(%edi),%bx
		jne    jump_55813
		inc    %edx
		jmp    jump_55821
	jump_55813:
		testb  $0x2,0xc(%eax)
		jne    jump_55821
		movswl %cx,%ebx
		cmp    $0xffffffff,%ebx
		je     jump_55860
	jump_55821:
		movswl %cx,%ebx
		test   %ebx,%ebx
		jl     jump_55838
		xor    %esi,%esi
		mov    %dx,%si
		cmp    %ebx,%esi
		jl     jump_55838
		mov    $0x1,%eax
		jmp    jump_55862
	jump_55838:
		mov    0x12(%eax),%ax
		test   %ax,%ax
		jne    jump_557f6
	jump_55841:
		movswl %cx,%eax
		cmp    $0xffffffff,%eax
		jne    jump_55850
		mov    $0x1,%eax
		jmp    jump_55862
	jump_55850:
		xor    %ebx,%ebx
		mov    %dx,%bx
		cmp    %eax,%ebx
		jl     jump_55860
		mov    $0x1,%eax
		jmp    jump_55862
	jump_55860:
		xor    %eax,%eax
	jump_55862:
		mov    %ebp,things
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
find_nearest_player:	/* 0x0558B8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    %eax,%edi
		xor    %edx,%edx
		mov    $0xffffffff,%ebp
		mov    %edx,(%esp)
		mov    %edx,0x4(%esp)
		jmp    jump_558ed
	jump_558d3:
		sar    %esi
	jump_558d5:
		add    %esi,%eax
		cmp    %ebp,%eax
		jae    jump_558e0
		mov    %eax,%ebp
		mov    %ecx,(%esp)
	jump_558e0:
		mov    0x12(%ebx),%cx
		test   %cx,%cx
		jne    jump_55923
	jump_558e9:
		incl   0x4(%esp)
	jump_558ed:
		xor    %eax,%eax
		mov    0x4(%esp),%ax
		cmp    $0x8,%eax
		jge    jump_55969
		mov    $0x1,%esi
		xor    %ebx,%ebx
		mov    %eax,%ecx
		mov    ingame__InNetGame_UNSURE,%bl
		shl    %cl,%esi
		test   %esi,%ebx
		je     jump_558e9
		xor    %ecx,%ecx
		mov    level_def__PlayableGroups(%eax),%cl
		mov    EXPORT_SYMBOL(same_type_head)+512(,%ecx,2),%cx
		test   %cx,%cx
		je     jump_558e9
	jump_55923:
		movswl %cx,%eax
		imul   $0xa8,%eax,%eax
		mov    things,%ebx
		add    %eax,%ebx
		testb  $0x2,0xc(%ebx)
		jne    jump_558e0
		mov    0x18(%edi),%eax
		sub    0x18(%ebx),%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%esi
		mov    0x20(%ebx),%edx
		mov    0x20(%edi),%eax
		sub    %edx,%eax
		sar    $0x8,%esi
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		sar    $0x8,%eax
		cmp    %eax,%esi
		jle    jump_558d3
		sar    %eax
		jmp    jump_558d5
	jump_55969:
		mov    (%esp),%eax
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_find_nearest_from_group)	/* 0x055978 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		mov    %eax,%ecx
		mov    %edx,(%esp)
		mov    %bl,0x8(%esp)
		mov    $0xffffffff,%edi
		xor    %edx,%edx
		mov    in_network_game,%ah
		mov    %edx,0x4(%esp)
		test   %ah,%ah
		je     jump_559b3
		xor    %eax,%eax
		mov    (%esp),%ax
		test   %eax,%eax
		jne    jump_559b3
		mov    %ecx,%eax
		call   find_nearest_player
		jmp    jump_55ab6
	jump_559b3:
		xor    %esi,%esi
		mov    (%esp),%si
		mov    EXPORT_SYMBOL(same_type_head)+512(,%esi,2),%si
		test   %si,%si
		je     jump_55a30
	jump_559ca:
		movswl %si,%eax
		imul   $0xa8,%eax,%eax
		mov    things,%ebx
		add    %eax,%ebx
		xor    %eax,%eax
		mov    0x8(%esp),%al
		test   %eax,%eax
		je     jump_559eb
		testb  $0x8,0xe(%ebx)
		jne    jump_55a27
	jump_559eb:
		testb  $0x2,0xc(%ebx)
		jne    jump_55a27
		mov    0x18(%ecx),%eax
		sub    0x18(%ebx),%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebp
		mov    0x20(%ebx),%edx
		mov    0x20(%ecx),%eax
		sub    %edx,%eax
		sar    $0x8,%ebp
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		sar    $0x8,%eax
		cmp    %eax,%ebp
		jle    jump_55a19
		sar    %eax
		jmp    jump_55a1b
	jump_55a19:
		sar    %ebp
	jump_55a1b:
		add    %ebp,%eax
		cmp    %edi,%eax
		jae    jump_55a27
		mov    %eax,%edi
		mov    %esi,0x4(%esp)
	jump_55a27:
		mov    0x12(%ebx),%si
		test   %si,%si
		jne    jump_559ca
	jump_55a30:
		cmpb   $0x0,0x8(%esp)
		jne    jump_55ab2
		mov    $0x1,%esi
		jmp    jump_55a55
	jump_55a42:
		sar    %ebp
	jump_55a44:
		add    %ebp,%eax
		cmp    %edi,%eax
		jae    jump_55a54
		mov    %eax,%edi
		mov    0x16(%ebx),%ax
		mov    %eax,0x4(%esp)
	jump_55a54:
		inc    %esi
	jump_55a55:
		xor    %ebx,%ebx
		movswl %si,%eax
		mov    EXPORT_SYMBOL(word_1531DA),%bx
		cmp    %ebx,%eax
		jge    jump_55ab2
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(word_17FA58)(,%eax,2),%bx
		imul   $0xa8,%ebx,%ebx
		mov    things,%eax
		add    %eax,%ebx
		xor    %eax,%eax
		movzbl 0x51(%ebx),%ebp
		mov    (%esp),%ax
		cmp    %eax,%ebp
		jne    jump_55a54
		mov    0x18(%ecx),%eax
		sub    0x18(%ebx),%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebp
		mov    0x20(%ebx),%edx
		mov    0x20(%ecx),%eax
		sub    %edx,%eax
		sar    $0x8,%ebp
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		sar    $0x8,%eax
		cmp    %eax,%ebp
		jle    jump_55a42
		sar    %eax
		jmp    jump_55a44
	jump_55ab2:
		mov    0x4(%esp),%eax
	jump_55ab6:
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_assign_next_target_from_group)	/* 0x055AC0 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		mov    %eax,%ecx
		xor    %eax,%eax
		mov    0x50(%ecx),%al
		and    $0xffff,%edx
		cmp    %eax,%edx
		je     jump_55b49
		and    $0xff,%ebx
		mov    %ecx,%eax
		xor    %esi,%esi
		call   ac_find_nearest_from_group
		mov    %ax,%si
		mov    %eax,%ebx
		test   %esi,%esi
		jne    jump_55af4
		movw   $0x0,0xa(%ecx)
		pop    %esi
		pop    %ecx
		ret
	jump_55af4:
		mov    $0x500,%edx
		mov    %ecx,%eax
		call   ac_check_weapon
		lea    0x0(,%esi,4),%eax
		add    %esi,%eax
		shl    $0x2,%eax
		movw   $0x1b,0xa(%ecx)
		lea    (%esi,%eax,1),%edx
		mov    things,%eax
		shl    $0x3,%edx
		movw   $0xffff,0x66(%ecx)
		add    %edx,%eax
		mov    %eax,0x40(%ecx)
		mov    %ecx,%eax
		mov    %bx,0x48(%ecx)
		call   ac_get_weapon_range
		movw   $0xa,0x68(%ecx)
		movw   $0xa,0x6a(%ecx)
		sar    $0x6,%eax
		movb   $0x0,0x3f(%ecx)
		mov    %al,0x5b(%ecx)
	jump_55b49:
		pop    %esi
		pop    %ecx
		ret

vtable_55b4c:
		.long   func_55c91
		.long   func_55b97
		.long   func_55c7d
		.long   func_55c65
		.long   func_55c0a


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_is_command_completed)	/* 0x055B60 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    things,%edi
		mov    %eax,%ecx
		xor    %esi,%esi
		mov    0x54(%eax),%si
		mov    game_commands,%eax
		shl    $0x5,%esi
		add    %eax,%esi
		mov    0xa(%esi),%al
		sub    $0x5,%al
		cmp    $0x4,%al
		ja     func_55c7d
		and    $0xff,%eax
		jmp    *%cs:vtable_55b4c(,%eax,4)


/*----------------------------------------------------------------*/
func_55b97:
/*----------------------------------------------------------------*/
		mov    0x2(%esi),%ax
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(same_type_head)+512(,%eax,2),%ax
		test   %ax,%ax
		je     jump_55bca
	jump_55bad:
		cwtl
		imul   $0xa8,%eax,%edx
		lea    (%edi,%edx,1),%eax
		testb  $0x2,0xc(%eax)
		jne    jump_55bc1
		xor    %eax,%eax
		jmp    jump_55bcf
	jump_55bc1:
		mov    0x12(%eax),%ax
		test   %ax,%ax
		jne    jump_55bad
	jump_55bca:
		mov    $0x1,%eax
	jump_55bcf:
		mov    %edi,things
		test   %ax,%ax
		je     jump_55be1
		mov    $0x1,%al
		jmp    jump_55bfe
	jump_55be1:
		mov    %ecx,%eax
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    0x2(%esi),%dx
		call   ac_assign_next_target_from_group
		movw   $0x1b,0xa(%ecx)
		mov    things,%edi
		xor    %al,%al
	jump_55bfe:
		mov    %edi,things
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_55c0a:
/*----------------------------------------------------------------*/
		mov    $0xffffffff,%ebx
		xor    %eax,%eax
		mov    %ecx,%edx
		mov    0x2(%esi),%ax
		call   ac_is_group_all_persuaded_by_me
		test   %ax,%ax
		je     jump_55c35
		mov    $0x1,%al
		mov    things,%edi
		mov    %edi,things
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_55c35:
		mov    $0x1,%ebx
		xor    %edx,%edx
		mov    %ecx,%eax
		mov    0x2(%esi),%dx
		call   ac_assign_next_target_from_group
		movw   $0x28,0xa(%ecx)
		movb   $0x5,0x5b(%ecx)
		mov    things,%edi
		xor    %al,%al
		mov    %edi,things
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_55c65:
/*----------------------------------------------------------------*/
		mov    %ecx,%edx
		mov    0xe(%esi),%ebx
		xor    %eax,%eax
		sar    $0x10,%ebx
		mov    0x2(%esi),%ax
		call   ac_is_group_all_persuaded_by_me
		test   %ax,%ax
		je     jump_55c35


/*----------------------------------------------------------------*/
func_55c7d:
/*----------------------------------------------------------------*/
		mov    $0x1,%al
		mov    things,%edi
		mov    %edi,things
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_55c91:
/*----------------------------------------------------------------*/
		mov    (%esi),%eax
		sar    $0x10,%eax
		shl    $0x4,%eax
		mov    0x10(%esi),%dx
		cmp    data_19f1a0(%eax),%dx
		jg     jump_55be1
		mov    $0x1,%al
		mov    %edi,things
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_wait_vehicle)	/* 0x055CB8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    game_commands,%ebx
		mov    %eax,%ecx
		mov    0x5c(%eax),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edi
		shl    $0x3,%eax
		add    %eax,%edi
		mov    0xd(%ecx),%ah
		xor    %esi,%esi
		test   $0x20,%ah
		jne    jump_55d4c
		xor    %eax,%eax
		mov    0x54(%ecx),%ax
		mov    %ebx,%edx
		shl    $0x5,%eax
		mov    (%edx,%eax,1),%ax
		and    $0xffff,%eax
		shl    $0x5,%eax
		add    %ebx,%eax
		testb  $0x4,0x18(%eax)
		je     jump_55d20
	jump_55d0d:
		mov    (%eax),%ax
		and    $0xffff,%eax
		shl    $0x5,%eax
		add    %ebx,%eax
		testb  $0x4,0x18(%eax)
		jne    jump_55d0d
	jump_55d20:
		xor    %edx,%edx
		mov    0xa(%eax),%dl
		cmp    $0x2,%edx
		je     jump_55d47
		cmp    $0x6e,%edx
		jne    jump_55d4c
		mov    (%eax),%eax
		sar    $0x10,%eax
		mov    %ebx,%edx
		shl    $0x5,%eax
		mov    0xa(%edx,%eax,1),%al
		and    $0xff,%eax
		cmp    $0x2,%eax
		jne    jump_55d4c
	jump_55d47:
		mov    $0x1,%esi
	jump_55d4c:
		test   %si,%si
		je     jump_55d85
		xor    %eax,%eax
		mov    0xa(%edi),%ax
		cmp    $0x33,%eax
		je     jump_55d6f
		test   %eax,%eax
		je     jump_55d6f
		cmp    $0x3c,%eax
		je     jump_55d6f
		cmp    $0x41,%eax
		je     jump_55d6f
		cmp    $0x3b,%eax
		jne    jump_55dc9
	jump_55d6f:
		xor    %eax,%eax
		mov    0x54(%ecx),%ax
		mov    %ebx,%edx
		shl    $0x5,%eax
		mov    (%edx,%eax,1),%ax
		mov    $0xc,%edx
		jmp    jump_55db2
	jump_55d85:
		xor    %eax,%eax
		mov    0xa(%edi),%ax
		cmp    $0x21,%eax
		je     jump_55d9e
		cmp    $0x3d,%eax
		je     jump_55d9e
		test   %eax,%eax
		je     jump_55d9e
		cmp    $0x41,%eax
		jne    jump_55dc9
	jump_55d9e:
		xor    %eax,%eax
		mov    0x54(%ecx),%ax
		mov    %ebx,%edx
		shl    $0x5,%eax
		mov    (%edx,%eax,1),%ax
		mov    $0xd,%edx
	jump_55db2:
		mov    %ax,0x54(%ecx)
		mov    %ecx,%eax
		mov    %ebx,game_commands
		call   ac_person_init_command
		mov    game_commands,%ebx
	jump_55dc9:
		mov    %ebx,game_commands
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_knocked_out)	/* 0x055DD8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		mov    EXPORT_SYMBOL(fifties_per_gameturn),%dx
		sub    %dx,0x28(%eax)
		mov    0x26(%eax),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		jge    jump_55e2d
		xor    %ebx,%ebx
		mov    frame,%edx
		mov    0x24(%eax),%bx
		mov    0x6(%edx,%ebx,8),%bx
		and    $0xffff,%ebx
		testb  $0x1,0x5(%edx,%ebx,8)
		jne    jump_55e27
		mov    0x2a(%eax),%bx
		mov    %bx,0x28(%eax)
		xor    %ebx,%ebx
		mov    0x24(%eax),%bx
		mov    0x6(%edx,%ebx,8),%dx
		mov    %dx,0x24(%eax)
		jmp    jump_55e2d
	jump_55e27:
		movw   $0x0,0x28(%eax)
	jump_55e2d:
		mov    0x5d(%eax),%ch
		xor    %edx,%edx
		dec    %ch
		mov    %ch,%dl
		mov    %ch,0x5d(%eax)
		test   %edx,%edx
		jne    jump_55ec3
		xor    %ebx,%ebx
		mov    0x6d(%eax),%dl
		mov    0x8(%eax),%bl
		mov    %dl,0x6c(%eax)
		lea    0x0(,%ebx,4),%edx
		sub    %ebx,%edx
		shl    $0x2,%edx
		sub    %ebx,%edx
		xor    %ebx,%ebx
		mov    0x6c(%eax),%bl
		shl    $0x2,%edx
		add    %ebx,%ebx
		add    %ebx,%edx
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(people_frames)(%edx),%bx
		xor    %edx,%edx
		mov    0x57(%eax),%dl
		add    %ebx,%edx
		mov    nstart_ani,%ebx
		mov    (%ebx,%edx,2),%dx
		xor    %ebx,%ebx
		mov    0x8(%eax),%bl
		mov    %dx,0x24(%eax)
		lea    0x0(,%ebx,4),%edx
		sub    %ebx,%edx
		shl    $0x2,%edx
		sub    %ebx,%edx
		lea    0x0(,%edx,4),%ebx
		xor    %edx,%edx
		mov    0x6c(%eax),%dl
		mov    EXPORT_SYMBOL(people_frames)(%ebx,%edx,2),%dx
		dec    %edx
		mov    %dx,0x26(%eax)
		andb   $0xef,0x44(%eax)
		mov    0xc(%eax),%dh
		movw   $0x30,0x28(%eax)
		and    $0xfe,%dh
		mov    %dh,0xc(%eax)
	jump_55ec3:
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_set_peep_comcur)	/* 0x055EC8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		mov    %eax,%edx
		xor    %eax,%eax
		jmp    jump_55ed3
	jump_55ed2:
		inc    %eax
	jump_55ed3:
		xor    %ecx,%ecx
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(playable_agents),%cl
		mov    %ax,%bx
		cmp    %ecx,%ebx
		jge    jump_55f16
		xor    %ecx,%ecx
		mov    EXPORT_SYMBOL(local_player_no),%cl
		imul   $0x1aa,%ecx,%ecx
		mov    EXPORT_SYMBOL(players)+0x09C(%ecx,%ebx,4),%esi # players[0].MyAgent[0]
		cmp    %esi,%edx
		jne    jump_55ed2
		xor    %ah,%bh
		mov    EXPORT_SYMBOL(local_player_no),%bl
		shl    $0x2,%ebx
		movw   $0x0,0x52(%esi)
		add    %eax,%ebx
		mov    %bx,0x54(%esi)
		jmp    jump_55ed2
	jump_55f16:
		xor    %ecx,%ecx
		mov    EXPORT_SYMBOL(local_player_no),%cl
		lea    0x0(,%ecx,8),%ebx
		add    %ecx,%ebx
		shl    $0x3,%ebx
		sub    %ecx,%ebx
		add    %ebx,%ebx
		mov    %ebx,%ecx
		shl    $0x2,%ebx
		sub    %ecx,%ebx
		mov    EXPORT_SYMBOL(players)+0x09C(%ebx),%ecx # players[0].MyAgent[0]
		cmp    %ecx,%edx
		jne    jump_55f59
		mov    0x18(%ecx),%ebx
		mov    0x20(%ecx),%edx
		sar    $0x8,%ebx
		sar    $0x8,%edx
		mov    %bx,ingame__TrackX
		mov    %dx,ingame__TrackZ
	jump_55f59:
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret

vtable_55f60:
		.long   func_5662b
		.long   func_56790
		.long   func_5673c
		.long   func_56787
		.long   func_5673c
		.long   func_5680f
		.long   func_5673c
		.long   func_5681b
		.long   func_569f4
		.long   func_5673c
		.long   func_5673c
		.long   func_5673c
		.long   func_56827
		.long   func_5684b
		.long   func_56833
		.long   func_56833
		.long   func_5683f
		.long   func_5673c
		.long   func_5673c
		.long   func_5673c
		.long   func_5673c
		.long   func_5673c
		.long   func_5673c
		.long   func_5673c
		.long   func_5673c
		.long   func_5673c
		.long   func_5673c
		.long   func_56857
		.long   func_5686f
		.long   func_568ff
		.long   func_5673c
		.long   func_56983
		.long   func_569ac
		.long   func_5673c
		.long   func_5673c
		.long   func_56803
		.long   func_569b8
		.long   func_5673c
		.long   func_5673c
		.long   func_5673c
		.long   func_56a8a
		.long   func_56a29
		.long   func_56a72
		.long   func_56a7e
		.long   func_569d0
		.long   func_569dc
		.long   func_5673c
		.long   func_56a96
		.long   func_5673c
		.long   func_56757
		.long   func_56760
		.long   func_56863
		.long   func_5673c
		.long   func_56a00
		.long   func_56aa2
		.long   func_5673c
		.long   func_569e8
		.long   func_5677e
		.long   func_56aae
		.long   func_569c4


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_person)	/* 0x056050 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x9c,%esp
		mov    %eax,%esi
		testb  $0x20,0xd(%eax)
		je     jump_560f6
		testb  $0x10,0x47(%esi)
		je     jump_560f6
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0x2c,%eax
		je     jump_560f6
		cmp    $0x8,%eax
		je     jump_560f6
		cmp    $0x7,%eax
		je     jump_560f6
		testl  $0x40000002,0xc(%esi)
		jne    jump_560f6
		testb  $0x18,0x44(%esi)
		jne    jump_560f6
		mov    0x3c(%esi),%ax
		xor    %edx,%edx
		mov    %ax,%dx
		mov    %ax,0x48(%esi)
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		movw   $0x2b,0xa(%esi)
		mov    0x54(%edx,%eax,8),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		lea    0x0(,%eax,4),%edx
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		mov    0x47(%esi),%bl
		mov    EXPORT_SYMBOL(follow_dist)(%edx,%eax,1),%al
		and    $0xef,%bl
		mov    %al,0x5b(%esi)
		mov    %bl,0x47(%esi)
	jump_560f6:
		mov    0x45(%esi),%bh
		and    $0x7f,%bh
		mov    0x47(%esi),%cl
		mov    %bh,0x45(%esi)
		test   $0x20,%cl
		je     jump_5613b
		mov    0x20(%esi),%eax
		mov    0x18(%esi),%edx
		sar    $0x10,%eax
		sar    $0x10,%edx
		shl    $0x7,%eax
		add    %eax,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0x10(%edx,%eax,2),%ax
		and    $0xffff,%eax
		jne    jump_5613b
		mov    %cl,%ch
		and    $0xdf,%ch
		mov    %ch,0x47(%esi)
	jump_5613b:
		xor    %eax,%eax
		mov    gameturn,%ebx
		mov    0x16(%esi),%ax
		add    %ebx,%eax
		test   $0x7f,%al
		jne    jump_56171
		andb   $0xdf,0x80(%esi)
		mov    0x46(%esi),%ah
		test   $0x2,%ah
		je     jump_56171
		mov    %ah,%dl
		movw   $0xffff,0x66(%esi)
		and    $0xfd,%dl
		mov    %esi,%eax
		mov    %dl,0x46(%esi)
		call   ac_remove_path
	jump_56171:
		testb  $0x8,0x47(%esi)
		je     jump_561de
		testb  $0x20,0xd(%esi)
		je     jump_561de
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0x2c,%eax
		je     jump_561de
		cmp    $0x7,%eax
		je     jump_561de
		xor    %edx,%edx
		mov    0x3c(%esi),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		add    %eax,%edx
		mov    %esi,%eax
		call   ac_make_peep_protect_peep
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+1,%al
		push   %eax
		mov    0x20(%esi),%eax
		sar    $0x8,%eax
		movswl %ax,%ebx
		mov    0x1c(%esi),%eax
		sar    $0x8,%eax
		movswl %ax,%edx
		mov    0x18(%esi),%eax
		sar    $0x8,%eax
		mov    $0xc8,%ecx
		cwtl
		call   ac_draw_map_flat_circle
	jump_561de:
		mov    0x44(%esi),%bh
		test   $0x20,%bh
		jne    jump_5674a
		testb  $0x10,0x46(%esi)
		je     jump_561fc
		mov    %esi,%eax
		call   ac_process_tasered_person
		jmp    jump_5674a
	jump_561fc:
		test   $0x10,%bh
		je     jump_56224
		mov    %esi,%eax
		call   ac_process_knocked_out
		xor    %edx,%edx
		mov    %esi,%eax
		mov    0x99(%esi),%dl
		call   ac_stop_looped_weapon_sample
		add    $0x9c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_56224:
		test   $0x8,%bh
		je     jump_5629f
		mov    0x5d(%esi),%cl
		xor    %eax,%eax
		dec    %cl
		mov    %cl,%al
		mov    %cl,0x5d(%esi)
		test   %eax,%eax
		jne    jump_56284
		mov    %esi,%eax
		mov    0x44(%esi),%ch
		xor    %edx,%edx
		and    $0xf7,%ch
		mov    0x51(%esi),%dl
		mov    %ch,0x44(%esi)
		cmp    $0x80,%edx
		jl     jump_5625b
		sub    $0x80,%dl
		mov    %dl,0x51(%esi)
	jump_5625b:
		movw   $0x0,0x8e(%eax)
		movl   $0x0,0x40(%eax)
		mov    0xc(%eax),%dh
		movw   $0x0,0xa(%eax)
		or     $0x40,%dh
		mov    %dh,0xc(%eax)
		call   calc_person_speed
		jmp    jump_562f2
	jump_56284:
		xor    %eax,%eax
		mov    gameturn,%ecx
		mov    0x16(%esi),%ax
		add    %ecx,%eax
		test   $0x7,%al
		jne    jump_562f2
		mov    %esi,%eax
		call   ac_person_intel
		jmp    jump_562f2
	jump_5629f:
		mov    gameturn,%dx
		mov    $0x8,%eax
		test   $0x7ff,%dx
		jne    jump_562b6
		movb   $0x0,0x5d(%esi)
	jump_562b6:
		testb  $0x20,0xd(%esi)
		je     jump_562c1
		mov    $0x2,%eax
	jump_562c1:
		xor    %edx,%edx
		mov    0x5d(%esi),%dl
		and    $0xffff,%eax
		cmp    %eax,%edx
		jle    jump_562f2
		mov    0xe(%esi),%dh
		movb   $0x0,0x5d(%esi)
		and    $0xfd,%dh
		mov    %dh,0xe(%esi)
		test   $0x8,%dh
		jne    jump_562e5
		orb    $0x4,0xc(%esi)
	jump_562e5:
		mov    %esi,%eax
		call   ac_remove_path
		movw   $0xffff,0x66(%esi)
	jump_562f2:
		testb  $0x3,gameturn
		jne    jump_5630f
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0x5,%eax
		je     jump_5630f
		test   %ax,%ax
		je     jump_5630f
		andb   $0xf6,0xf(%esi)
	jump_5630f:
		cmpb   $0x0,0x5c(%esi)
		je     jump_5632e
		testb  $0x2,0xc(%esi)
		jne    jump_5632e
		testb  $0x1,0x45(%esi)
		je     jump_56327
		movb   $0x0,0x5c(%esi)
		jmp    jump_5632e
	jump_56327:
		mov    %esi,%eax
		call   ac_process_im_shoved
	jump_5632e:
		testb  $0x40,0xf(%esi)
		jne    jump_5641d
		mov    0xc(%esi),%dl
		test   $0x2,%dl
		jne    jump_5641d
		testl  $0xd4200,0xc(%esi)
		je     jump_5641d
		testb  $0x40,0xd(%esi)
		jne    jump_5674a
		mov    0xe(%esi),%bl
		test   $0x1,%bl
		je     jump_56394
		xor    %edx,%edx
		mov    %esi,%eax
		mov    0x99(%esi),%dl
		call   ac_stop_looped_weapon_sample
		mov    %esi,%eax
		call   ac_person_recoil
		mov    %esi,%eax
		call   ac_calc_lighting
		mov    %esi,%eax
		call   ac_process_weapon
		add    $0x9c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_56394:
		test   $0x8,%bl
		je     jump_563c0
		test   $0x2,%dl
		jne    jump_563c0
		mov    %esi,%eax
		call   ac_process_persuaded
		mov    %esi,%eax
		call   ac_calc_lighting
		mov    %esi,%eax
		call   ac_process_weapon
		add    $0x9c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_563c0:
		testb  $0x4,0xe(%esi)
		je     jump_563e9
		testw  $0x1002,0xc(%esi)
		jne    jump_563e9
		mov    %esi,%eax
		call   ac_person_run_away
		mov    %esi,%eax
		call   ac_calc_lighting
		add    $0x9c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_563e9:
		testb  $0x2,0xd(%esi)
		je     jump_5641d
		mov    0x56(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_56409
		mov    0xd(%esi),%ah
		test   $0x8,%ah
		jne    jump_56409
		mov    %ah,%dl
		and    $0xfd,%dl
		mov    %dl,0xd(%esi)
	jump_56409:
		mov    %esi,%eax
		call   ac_process_weapon
		add    $0x9c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_5641d:
		testl  $0x50084000,0xc(%esi)
		jne    jump_56469
		testb  $0x8,0x44(%esi)
		jne    jump_56469
		xor    %eax,%eax
		mov    gameturn,%edx
		mov    0x16(%esi),%ax
		add    %edx,%eax
		test   $0x3,%al
		jne    jump_56469
		testb  $0x2,0xc(%esi)
		jne    jump_56469
		xor    %eax,%eax
		mov    0x8(%esi),%al
		cmp    $0x4,%eax
		je     jump_56462
		cmp    $0x5,%eax
		je     jump_56462
		cmp    $0xd,%eax
		je     jump_56462
		cmp    $0xe,%eax
		je     jump_56462
		cmp    $0xa,%eax
		jne    jump_56469
	jump_56462:
		mov    %esi,%eax
		call   ac_process_danger
	jump_56469:
		testl  $0x40002000,0xc(%esi)
		je     jump_5647c
		testb  $0x8,0x45(%esi)
		je     jump_5654d
	jump_5647c:
		xor    %eax,%eax
		mov    gameturn,%ecx
		mov    0x16(%esi),%ax
		add    %ecx,%eax
		test   $0x7,%al
		jne    jump_5654d
		cmpw   $0x0,0x52(%esi)
		je     jump_5654d
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		mov    game_commands,%ecx
		shl    $0x5,%eax
		add    %ecx,%eax
		testb  $0x2,0x18(%eax)
		je     jump_5654d
		testb  $0x2,0xc(%esi)
		jne    jump_5654d
		xor    %edx,%edx
		mov    (%eax),%ax
		mov    %edx,0x98(%esp)
		xor    %edx,%edx
		mov    %ax,%dx
		shl    $0x5,%edx
		add    %edx,%ecx
		mov    0x18(%ecx),%bl
		mov    %esi,%edi
		test   $0x4,%bl
		je     jump_56520
	jump_564e2:
		test   %ax,%ax
		je     jump_56520
		mov    $0x3,%ebx
		and    $0xffff,%eax
		mov    %edi,%edx
		call   ac_conditional_command_state_true
		test   %al,%al
		je     jump_56507
		movl   $0x1,0x98(%esp)
	jump_56507:
		mov    (%ecx),%ax
		xor    %ecx,%ecx
		mov    %ax,%cx
		mov    game_commands,%edx
		shl    $0x5,%ecx
		add    %edx,%ecx
		testb  $0x4,0x18(%ecx)
		jne    jump_564e2
	jump_56520:
		cmpw   $0x0,0x98(%esp)
		jne    jump_56530
		mov    $0xffffffff,%eax
	jump_56530:
		movswl %ax,%edx
		test   %edx,%edx
		jl     jump_5654d
		mov    $0xe,%edx
		mov    %ax,0x54(%esi)
		mov    %esi,%eax
		movw   $0x0,0xa(%esi)
		call   ac_person_init_command
	jump_5654d:
		testl  $0x40000002,0xc(%esi)
		jne    jump_5655f
		mov    %esi,%eax
		call   ac_process_weapon
		jmp    jump_56563
	jump_5655f:
		andb   $0xf7,0xd(%esi)
	jump_56563:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(debug_hud_collision),%al
		cmp    $0x1,%eax
		jne    jump_565a1
		mov    0x1c(%esi),%ebp
		test   %ebp,%ebp
		je     jump_565a1
		push   %ebp
		push   $aD_1
		lea    0x8(%esp),%eax
		push   %eax
		lea    0xc(%esp),%ecx
		call   ac_sprintf
		add    $0xc,%esp
		mov    0x20(%esi),%ebx
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		sar    $0x8,%ebx
		sar    $0x8,%eax
		call   ac_draw_text_transformed
	jump_565a1:
		cmpw   $0x0,0x8e(%esi)
		je     jump_565de
		testl  $0x40000002,0xc(%esi)
		jne    jump_565de
		mov    %esi,%eax
		call   ac_person_kill_target2
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0x2b,%eax
		jne    jump_5674a
		mov    %esi,%eax
		call   ac_process_protect_person
		add    $0x9c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_565de:
		testb  $0x8,0x44(%esi)
		je     jump_56abf
		mov    %esi,%eax
		call   ac_process_wander
		mov    0x66(%esi),%eax
		sar    $0x10,%eax
		cmp    $0x1,%eax
		jne    jump_5674a
		xor    %edx,%edx
		call   ac_LbRandomAnyShort
		mov    %ax,%dx
		mov    $0x2bc,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		add    $0x1f4,%edx
		mov    %dx,0x38(%esi)
		add    $0x9c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_5662b:
/*----------------------------------------------------------------*/
		testb  $0x20,0xd(%esi)
		je     jump_56648
		testb  $0x8,0x45(%esi)
		jne    jump_56648
		movw   $0x5,0xa(%esi)
		movw   $0x32,0x66(%esi)
		jmp    func_5673c
	jump_56648:
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		test   %eax,%eax
		jne    jump_5668f
		testb  $0x20,0xd(%esi)
		je     jump_5667e
		mov    0x45(%esi),%dh
		test   $0x8,%dh
		je     jump_5667e
		mov    %dh,%bl
		and    $0xf7,%bl
		mov    %bl,0x45(%esi)
		mov    EXPORT_SYMBOL(ingame)+0x930,%bh # ingame.Flags+1
		and    $0xfe,%bh
		mov    %esi,%eax
		mov    %bh,EXPORT_SYMBOL(ingame)+0x930 # ingame.Flags+1
		call   ac_set_peep_comcur
	jump_5667e:
		movw   $0x5,0xa(%esi)
		movw   $0x32,0x66(%esi)
		jmp    func_5673c
	jump_5668f:
		mov    0xc(%esi),%bl
		test   $0x40,%bl
		je     jump_566b0
		mov    %bl,%ah
		and    $0xbf,%ah
		mov    $0x10,%edx
		mov    %ah,0xc(%esi)
		mov    %esi,%eax
		call   ac_person_init_command
		jmp    func_5673c
	jump_566b0:
		mov    %esi,%eax
		call   ac_is_command_completed
		test   %al,%al
		je     func_5673c
		xor    %eax,%eax
		mov    0x52(%esi),%ax
		test   %eax,%eax
		jne    jump_566da
		movw   $0x5,0xa(%esi)
		movw   $0x32,0x66(%esi)
		jmp    func_5673c
	jump_566da:
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		mov    game_commands,%edx
		shl    $0x5,%eax
		mov    (%edx,%eax,1),%ax
		mov    %ax,0x54(%esi)
		test   %ax,%ax
		je     jump_56707
		mov    $0x11,%edx
		mov    %esi,%eax
		call   ac_person_init_command
		jmp    func_5673c
	jump_56707:
		testb  $0x20,0xd(%esi)
		je     jump_56730
		mov    0x45(%esi),%cl
		test   $0x8,%cl
		je     jump_56730
		mov    EXPORT_SYMBOL(ingame)+0x930,%al # ingame.Flags+1
		mov    %cl,%ch
		and    $0xfe,%al
		and    $0xf7,%ch
		mov    %al,EXPORT_SYMBOL(ingame)+0x930 # ingame.Flags+1
		mov    %esi,%eax
		mov    %ch,0x45(%esi)
		call   ac_set_peep_comcur
	jump_56730:
		movw   $0x5,0xa(%esi)
		movw   $0x64,0x66(%esi)


/*----------------------------------------------------------------*/
func_5673c:
/*----------------------------------------------------------------*/
		mov    %esi,%eax
		call   ac_calc_lighting
		mov    %esi,%eax
		call   ac_process_lighting_unkn1
	jump_5674a:
		add    $0x9c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_56757:
/*----------------------------------------------------------------*/
		mov    %esi,%eax
		call   ac_person_catch_train
		jmp    func_5673c


/*----------------------------------------------------------------*/
func_56760:
/*----------------------------------------------------------------*/
		testb  $0x40,0xd(%esi)
		je     jump_5676c
		movb   $0x19,0x3f(%esi)
		jmp    func_5673c
	jump_5676c:
		xor    %eax,%eax
		mov    0x3f(%esi),%al
		cmp    $0x19,%eax
		jne    func_5673c
		movw   $0x0,0xa(%esi)
		jmp    func_5673c


/*----------------------------------------------------------------*/
func_5677e:
/*----------------------------------------------------------------*/
		mov    %esi,%eax
		call   ac_process_avoid_group
		jmp    func_5673c


/*----------------------------------------------------------------*/
func_56787:
/*----------------------------------------------------------------*/
		mov    %esi,%eax
		call   ac_process_wander
		jmp    func_5673c


/*----------------------------------------------------------------*/
func_56790:
/*----------------------------------------------------------------*/
		mov    %esi,%eax
		call   ac_person_goto_point
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		test   %eax,%eax
		jne    func_5673c
		testb  $0x4,0x80(%esi)
		je     func_5673c
		testb  $0x10,0xd(%esi)
		jne    func_5673c
		mov    0x46(%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %eax,%edx
		mov    things,%eax
		shl    $0x3,%edx
		movw   $0x2b,0xa(%esi)
		mov    0x54(%edx,%eax,1),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		lea    0x0(,%eax,4),%edx
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(follow_dist)(%edx,%eax,1),%al
		mov    %al,0x5b(%esi)
		jmp    func_5673c


/*----------------------------------------------------------------*/
func_56803:
/*----------------------------------------------------------------*/
		mov    %esi,%eax
		call   ac_person_goto_point_rel
		jmp    func_5673c


/*----------------------------------------------------------------*/
func_5680f:
/*----------------------------------------------------------------*/
		mov    %esi,%eax
		call   ac_person_wait
		jmp    func_5673c


/*----------------------------------------------------------------*/
func_5681b:
/*----------------------------------------------------------------*/
		mov    %esi,%eax
		call   ac_person_pickup
		jmp    func_5673c


/*----------------------------------------------------------------*/
func_56827:
/*----------------------------------------------------------------*/
		mov    %esi,%eax
		call   ac_person_dieing
		jmp    func_5673c


/*----------------------------------------------------------------*/
func_56833:
/*----------------------------------------------------------------*/
		mov    %esi,%eax
		call   ac_person_save_victim
		jmp    func_5673c


/*----------------------------------------------------------------*/
func_5683f:
/*----------------------------------------------------------------*/
		mov    %esi,%eax
		call   ac_person_goto_person_nav
		jmp    func_5673c


/*----------------------------------------------------------------*/
func_5684b:
/*----------------------------------------------------------------*/
		mov    %esi,%eax
		call   ac_person_dead
		jmp    func_5673c


/*----------------------------------------------------------------*/
func_56857:
/*----------------------------------------------------------------*/
		mov    %esi,%eax
		call   ac_person_kill_person
		jmp    func_5673c


/*----------------------------------------------------------------*/
func_56863:
/*----------------------------------------------------------------*/
		mov    %esi,%eax
		call   ac_person_destroy_building
		jmp    func_5673c


/*----------------------------------------------------------------*/
func_5686f:
/*----------------------------------------------------------------*/
		mov    %esi,%eax
		call   ac_person_goto_person_nav
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		mov    %esi,%edi
		test   %eax,%eax
		jne    jump_568df
		mov    %esi,%eax
		movw   $0x1c,0xa(%esi)
		call   ac_get_weapon_range
		mov    %eax,%edx
		mov    %esi,%eax
		mov    %edx,%ebx
		call   ac_get_weapon_range
		imul   %eax,%ebx
		xor    %ecx,%ecx
		mov    0x40(%esi),%edx
		mov    %esi,%eax
		call   ac_can_i_see_thing
		test   %eax,%eax
		jle    jump_568df
		mov    0xd(%esi),%bh
		mov    %esi,%eax
		or     $0x8,%bh
		mov    0xf(%esi),%cl
		mov    %bh,0xd(%esi)
		test   $0x10,%cl
		je     jump_568df
		mov    0x5c(%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		orb    $0x1,0xf(%edx,%eax,8)
	jump_568df:
		mov    0x40(%edi),%eax
		mov    0xa(%eax),%ax
		and    $0xffff,%eax
		cmp    $0xd,%eax
		jne    func_5673c
		movw   $0x0,0xa(%edi)
		jmp    func_5673c


/*----------------------------------------------------------------*/
func_568ff:
/*----------------------------------------------------------------*/
		mov    %esi,%eax
		call   ac_person_goto_person_nav
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		mov    %esi,%edi
		test   %eax,%eax
		jne    jump_56963
		mov    %esi,%eax
		movw   $0x1d,0xa(%esi)
		call   ac_get_weapon_range
		xor    %ecx,%ecx
		mov    %eax,%ebx
		mov    0x40(%esi),%edx
		mov    %esi,%eax
		call   ac_can_i_see_thing
		test   %eax,%eax
		jle    jump_56963
		mov    0xd(%esi),%ch
		mov    %esi,%eax
		or     $0x8,%ch
		mov    0xf(%esi),%dl
		mov    %ch,0xd(%esi)
		test   $0x10,%dl
		je     jump_56963
		mov    0x5c(%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		orb    $0x1,0xf(%edx,%eax,8)
	jump_56963:
		mov    0x40(%edi),%eax
		mov    0xa(%eax),%ax
		and    $0xffff,%eax
		cmp    $0xd,%eax
		jne    func_5673c
		movw   $0x0,0xa(%edi)
		jmp    func_5673c


/*----------------------------------------------------------------*/
func_56983:
/*----------------------------------------------------------------*/
		mov    0x56(%esi),%edx
		sar    $0x10,%edx
		mov    %esi,%eax
		test   %edx,%edx
		jne    func_5673c
		mov    0xd(%esi),%bh
		test   $0x8,%bh
		jne    func_5673c
		mov    %bh,%cl
		and    $0xfd,%cl
		mov    %cl,0xd(%esi)
		jmp    func_5673c


/*----------------------------------------------------------------*/
func_569ac:
/*----------------------------------------------------------------*/
		mov    %esi,%eax
		call   ac_person_recoil
		jmp    func_5673c


/*----------------------------------------------------------------*/
func_569b8:
/*----------------------------------------------------------------*/
		mov    %esi,%eax
		call   ac_person_burning
		jmp    func_5673c


/*----------------------------------------------------------------*/
func_569c4:
/*----------------------------------------------------------------*/
		mov    %esi,%eax
		call   ac_person_being_persuaded
		jmp    func_5673c


/*----------------------------------------------------------------*/
func_569d0:
/*----------------------------------------------------------------*/
		mov    %esi,%eax
		call   ac_person_get_item
		jmp    func_5673c


/*----------------------------------------------------------------*/
func_569dc:
/*----------------------------------------------------------------*/
		mov    %esi,%eax
		call   ac_person_use_vehicle
		jmp    func_5673c


/*----------------------------------------------------------------*/
func_569e8:
/*----------------------------------------------------------------*/
		mov    %esi,%eax
		call   ac_person_attempt_to_leave_ferry
		jmp    func_5673c


/*----------------------------------------------------------------*/
func_569f4:
/*----------------------------------------------------------------*/
		mov    %esi,%eax
		call   ac_person_drop_item
		jmp    func_5673c


/*----------------------------------------------------------------*/
func_56a00:
/*----------------------------------------------------------------*/
		mov    %esi,%eax
		call   ac_person_goto_point
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		test   %eax,%eax
		jne    func_5673c
		xor    %edx,%edx
		mov    %esi,%eax
		mov    0x99(%esi),%dl
		call   ac_person_init_drop
		jmp    func_5673c


/*----------------------------------------------------------------*/
func_56a29:
/*----------------------------------------------------------------*/
		mov    %esi,%eax
		call   ac_person_goto_person_nav
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		mov    %esi,%ecx
		test   %eax,%eax
		jne    jump_56a42
		movw   $0x29,0xa(%esi)
	jump_56a42:
		mov    0x46(%ecx),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		testb  $0x2,0xc(%edx,%eax,8)
		je     func_5673c
		movw   $0x0,0xa(%ecx)
		jmp    func_5673c


/*----------------------------------------------------------------*/
func_56a72:
/*----------------------------------------------------------------*/
		mov    %esi,%eax
		call   ac_process_support_person
		jmp    func_5673c


/*----------------------------------------------------------------*/
func_56a7e:
/*----------------------------------------------------------------*/
		mov    %esi,%eax
		call   ac_process_protect_person
		jmp    func_5673c


/*----------------------------------------------------------------*/
func_56a8a:
/*----------------------------------------------------------------*/
		mov    %esi,%eax
		call   ac_person_persuade_person
		jmp    func_5673c


/*----------------------------------------------------------------*/
func_56a96:
/*----------------------------------------------------------------*/
		mov    %esi,%eax
		call   ac_person_wait_vehicle
		jmp    func_5673c


/*----------------------------------------------------------------*/
func_56aa2:
/*----------------------------------------------------------------*/
		mov    %esi,%eax
		call   ac_person_attempt_to_leave_vehicle
		jmp    func_5673c


/*----------------------------------------------------------------*/
func_56aae:
/*----------------------------------------------------------------*/
		mov    $0x12,%edx
		mov    %esi,%eax
		call   ac_person_init_command
		jmp    func_5673c
	jump_56abf:
		mov    0xa(%esi),%ax
		and    $0x7f,%ah
		and    $0xffff,%eax
		cmp    $0x3b,%eax
		ja     func_5673c
		jmp    *%cs:vtable_55f60(,%eax,4)


/*----------------------------------------------------------------*/
apply_texture_to_face:	/* 0x056ADC */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		sub    $0x8,%esp
		mov    %eax,%ecx
		mov    %edx,%esi
		xor    %edx,%edx
		mov    %bx,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    game_object_faces4,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x8(%eax),%dx
		lea    0x0(,%edx,8),%eax
		xor    %ebx,%ebx
		add    %eax,%edx
		mov    game_textures,%eax
		add    %edx,%edx
		mov    %si,%bx
		add    %edx,%eax
		lea    0x0(,%ebx,4),%edx
		add    %ebx,%edx
		movzbl data_153917(,%edx,2),%esi
		and    $0xffff,%ecx
		imul   %esi,%ecx
		xor    %ebx,%ebx
		mov    %esi,(%esp)
		mov    data_153915(,%edx,2),%bl
		movzbl data_153918(,%edx,2),%esi
		add    %ecx,%ebx
		mov    data_153916(,%edx,2),%cl
		mov    EXPORT_SYMBOL(door_anim_page)(,%edx,2),%dl
		mov    %dl,0x8(%eax)
		mov    %bl,0x2(%eax)
		mov    %cl,0x3(%eax)
		mov    (%esp),%dl
		mov    %cl,0x7(%eax)
		add    %bl,%dl
		mov    %dl,0x6(%eax)
		mov    %esi,0x4(%esp)
		mov    %dl,0x4(%eax)
		mov    0x4(%esp),%dl
		mov    %bl,(%eax)
		add    %cl,%dl
		mov    %dl,0x5(%eax)
		mov    %dl,0x1(%eax)
		add    $0x8,%esp
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_intelligent_door)	/* 0x056B88 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    %eax,%esi
		testb  $0x1,0xc(%eax)
		je     jump_56bc0
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0x1,%eax
		je     jump_56bc0
		cmp    $0x3,%eax
		je     jump_56bc0
		mov    0xc(%esi),%dl
		movw   $0x1,0xa(%esi)
		and    $0xfe,%dl
		mov    %dl,0xc(%esi)
	jump_56bc0:
		mov    0xa(%esi),%ax
		cmp    $0x2,%ax
		jb     jump_56d0d
		jbe    jump_56c48
		cmp    $0x3,%ax
		je     jump_56cb2
		jmp    jump_56d17
	jump_56bdf:
		mov    0xc(%esi),%bl
		xor    %edx,%edx
		mov    0x24(%esi),%cx
		mov    0x26(%esi),%dx
		and    $0xfe,%bl
		lea    0x0(,%edx,4),%eax
		mov    %bl,0xc(%esi)
		add    %edx,%eax
		xor    %edx,%edx
		inc    %ecx
		mov    data_153919(,%eax,2),%dl
		xor    %eax,%eax
		mov    %cx,%ax
		mov    %cx,0x24(%esi)
		cmp    %edx,%eax
		jge    jump_56c27
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    (%esi),%bx
		mov    0x26(%esi),%dx
		call   apply_texture_to_face
		jmp    jump_56d17
	jump_56c27:
		movw   $0x3,0xa(%esi)
		mov    %ecx,%edi
		mov    0xc(%esi),%bh
		movw   $0x7,0x28(%esi)
		dec    %edi
		or     $0x2,%bh
		mov    %di,0x24(%esi)
		mov    %bh,0xc(%esi)
		jmp    jump_56d17
	jump_56c48:
		xor    %edx,%edx
		mov    0x26(%esi),%dx
		lea    0x0(,%edx,4),%eax
		mov    0x24(%esi),%bx
		add    %edx,%eax
		xor    %edx,%edx
		dec    %ebx
		mov    data_153919(,%eax,2),%dl
		xor    %eax,%eax
		mov    %bx,%ax
		mov    %bx,0x24(%esi)
		cmp    %edx,%eax
		jg     jump_56c88
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    (%esi),%bx
		mov    0x26(%esi),%dx
		call   apply_texture_to_face
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_56c88:
		movswl (%esi),%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    game_object_faces4,%edx
		movw   $0x0,0x22(%edx,%eax,8)
		mov    0x14(%esi),%eax
		sar    $0x10,%eax
		call   ac_remove_sthing
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_56cb2:
		mov    0xc(%esi),%dh
		mov    0x26(%esi),%eax
		and    $0xfe,%dh
		sar    $0x10,%eax
		mov    %dh,0xc(%esi)
		test   %eax,%eax
		jne    jump_56d03
		mov    $0x64,%ecx
		mov    0x20(%esi),%ebx
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		call   check_for_people
		test   %eax,%eax
		jne    jump_56d17
		push   $0x1
		mov    $0x40,%ecx
		push   %eax
		mov    $0x7f,%ebx
		mov    $0x35,%edx
		push   $0x64
		mov    %esi,%eax
		movw   $0x2,0xa(%esi)
		call   ac_play_dist_ssample
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_56d03:
		decw   0x28(%esi)
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_56d0d:
		cmp    $0x1,%ax
		je     jump_56bdf
	jump_56d17:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_build_same_type_headers)	/* 0x056E34 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		mov    things,%esi
		mov    data_1552f6,%eax
		sar    $0x10,%eax
		xor    %cl,%cl
		cmp    $0x24,%eax
		je     jump_56e52
		cmp    $0x12,%eax
		jne    jump_56e54
	jump_56e52:
		mov    $0x1,%cl
	jump_56e54:
		xor    %edx,%edx
		jmp    jump_56e63
	jump_56e58:
		xor    %ebx,%ebx
		inc    %edx
		mov    %bx,EXPORT_SYMBOL(same_type_head)(,%eax,2)
	jump_56e63:
		xor    %eax,%eax
		mov    %dx,%ax
		cmp    $0x121,%eax
		jl     jump_56e58
		mov    things_used_head,%dx
		test   %dx,%dx
		jne    jump_56f5d
		mov    %esi,things
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_56e8a:
		mov    EXPORT_SYMBOL(same_type_head)+10,%bx
		mov    %bx,0x10(%eax)
		mov    %dx,EXPORT_SYMBOL(same_type_head)+10
		jmp    jump_56f94
	jump_56ea1:
		mov    0x8(%eax),%bl
		cmp    $0x32,%bl
		jb     jump_56eb0
		jbe    jump_56eb0
		cmp    $0x36,%bl
		je     jump_56e8a
	jump_56eb0:
		mov    EXPORT_SYMBOL(same_type_head)+4,%bx
		mov    %bx,0x10(%eax)
		mov    %dx,EXPORT_SYMBOL(same_type_head)+4
		jmp    jump_56f94
	jump_56ec7:
		testw  $0x140,0x46(%eax)
		je     jump_56ed7
		test   %cl,%cl
		je     jump_56f94
	jump_56ed7:
		mov    EXPORT_SYMBOL(same_type_head)+2,%bx
		mov    %bx,0x10(%eax)
		xor    %ebx,%ebx
		mov    0x50(%eax),%bl
		mov    %dx,EXPORT_SYMBOL(same_type_head)+2
		mov    EXPORT_SYMBOL(same_type_head)+512(,%ebx,2),%bx
		mov    %bx,0x12(%eax)
		xor    %ebx,%ebx
		mov    0x50(%eax),%bl
		mov    %dx,EXPORT_SYMBOL(same_type_head)+512(,%ebx,2)
		jmp    jump_56f94
	jump_56f0c:
		mov    EXPORT_SYMBOL(same_type_head)+14,%bx
		mov    %bx,0x10(%eax)
		mov    %dx,EXPORT_SYMBOL(same_type_head)+14
		jmp    jump_56f94
	jump_56f23:
		mov    0x8(%eax),%bl
		cmp    $0x20,%bl
		je     jump_56f0c
		mov    EXPORT_SYMBOL(same_type_head)+6,%bx
		mov    %bx,0x10(%eax)
		mov    %dx,EXPORT_SYMBOL(same_type_head)+6
		jmp    jump_56f94
	jump_56f3f:
		xor    %ebx,%ebx
		mov    0x8(%eax),%bl
		cmp    $0x30,%ebx
		jne    jump_56f94
		mov    EXPORT_SYMBOL(same_type_head)+12,%bx
		mov    %bx,0x10(%eax)
		mov    %dx,EXPORT_SYMBOL(same_type_head)+12
		jmp    jump_56f94
	jump_56f5d:
		movswl %dx,%eax
		imul   $0xa8,%eax,%eax
		add    %esi,%eax
		mov    0x9(%eax),%bl
		cmp    $0x6,%bl
		jb     jump_56f80
		jbe    jump_56f94
		cmp    $0x9,%bl
		jb     jump_56f94
		jbe    jump_56f23
		cmp    $0xf,%bl
		je     jump_56f3f
		jmp    jump_56f94
	jump_56f80:
		cmp    $0x2,%bl
		jb     jump_56f94
		jbe    jump_56ea1
		cmp    $0x4,%bl
		jbe    jump_56ec7
	jump_56f94:
		mov    0x6(%eax),%dx
		test   %dx,%dx
		jne    jump_56f5d
		mov    %esi,things
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		nop
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_shield)	/* 0x056FAC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    0x80(%eax),%edx
		sar    $0x10,%edx
		cmp    $0xfffffed4,%edx
		jge    jump_56fcb
		movw   $0xfed4,0x82(%eax)
	jump_56fcb:
		mov    0x84(%eax),%dl
		test   %dl,%dl
		je     jump_56fdf
		mov    %dl,%dh
		dec    %dh
		mov    %dh,0x84(%eax)
	jump_56fdf:
		testb  $0x20,0xe(%eax)
		je     jump_57000
		subw   $0x10,0x82(%eax)
		mov    0x80(%eax),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		jg     jump_5704e
		andb   $0xdf,0xe(%eax)
		jmp    jump_5704e
	jump_57000:
		xor    %ebx,%ebx
		mov    0x8(%eax),%bl
		lea    0x0(,%ebx,4),%edx
		add    %ebx,%edx
		mov    EXPORT_SYMBOL(peep_type_stats)+2(,%edx,4),%dx
		addw   $0x8,0x82(%eax)
		mov    0x80(%eax),%ebx
		and    $0xffff,%edx
		sar    $0x10,%ebx
		cmp    %edx,%ebx
		jle    jump_5704e
		xor    %ebx,%ebx
		mov    0x8(%eax),%bl
		lea    0x0(,%ebx,4),%edx
		add    %ebx,%edx
		mov    EXPORT_SYMBOL(peep_type_stats)+2(,%edx,4),%dx
		mov    %dx,0x82(%eax)
	jump_5704e:
		testb  $0x1,0xd(%eax)
		je     jump_570c7
		xor    %ebx,%ebx
		mov    0x8(%eax),%bl
		lea    0x0(,%ebx,4),%edx
		add    %ebx,%edx
		mov    0x82(%eax),%si
		mov    EXPORT_SYMBOL(peep_type_stats)+2(,%edx,4),%dx
		sub    %esi,%edx
		movswl %dx,%ebx
		test   %ebx,%ebx
		jle    jump_570c7
		mov    0x94(%eax),%ecx
		sar    $0x2,%ebx
		sar    $0x10,%ecx
		cmp    %ecx,%ebx
		jle    jump_5709d
		mov    0xd(%eax),%ch
		mov    0x96(%eax),%dx
		and    $0xfe,%ch
		shl    $0x2,%edx
		mov    %ch,0xd(%eax)
	jump_5709d:
		mov    0x82(%eax),%di
		add    %edx,%edi
		movswl %dx,%edx
		mov    %edx,%ebx
		mov    0x94(%eax),%edx
		sar    $0x2,%ebx
		sar    $0x10,%edx
		mov    %di,0x82(%eax)
		sub    %ebx,%edx
		mov    %dx,0x96(%eax)
	jump_570c7:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
create_temp_light:	/* 0x0571E4 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		mov    %eax,%edi
		mov    %edx,%esi
		call   ac_get_new_sthing
		cwtl
		test   %eax,%eax
		je     jump_5723d
		cmp    $0xffffffff,%eax
		jg     jump_57200
		cmp    $0xfffffa24,%eax
		jge    jump_57207
	jump_57200:
		xor    %eax,%eax
		pop    %edi
		pop    %esi
		ret    $0x8
	jump_57207:
		mov    %eax,%edx
		shl    $0x4,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		mov    EXPORT_SYMBOL(sthings),%eax
		add    %edx,%eax
		movb   $0x36,0x9(%eax)
		mov    %edi,0x18(%eax)
		mov    %esi,0x1c(%eax)
		mov    %ebx,0x20(%eax)
		mov    0x10(%esp),%edx
		mov    %cx,0x2c(%eax)
		mov    %dx,0x28(%eax)
		mov    0xc(%esp),%edx
		mov    %dx,0x2e(%eax)
	jump_5723d:
		pop    %edi
		pop    %esi
		ret    $0x8


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_process_things)	/* 0x572F8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x68,%esp
		mov    $0x1000,%ebp
		xor    %ebx,%ebx
		xor    %edi,%edi
		jmp    jump_5733e
	jump_5730c:
		inc    %eax
	jump_5730d:
		xor    %edx,%edx
		xor    %esi,%esi
		mov    EXPORT_SYMBOL(playable_agents),%dl
		mov    %ax,%si
		cmp    %edx,%esi
		jl     jump_5730c
		imul   $0xa8,EXPORT_SYMBOL(players)+0x088(%edi),%eax # players[0].DirectControl[0]
		mov    things,%edx
		or     %ebp,0xc(%edx,%eax,1)
	jump_57332:
		inc    %ebx
		add    $0x1aa,%edi
		cmp    $0x8,%ebx
		jge    jump_5736d
	jump_5733e:
		mov    $0x1,%eax
		xor    %edx,%edx
		mov    %bl,%cl
		mov    ingame__InNetGame_UNSURE,%dl
		shl    %cl,%eax
		test   %eax,%edx
		je     jump_57332
		imul   $0xa8,EXPORT_SYMBOL(players)+0x088(%edi),%eax # players[0].DirectControl[0]
		mov    things,%edx
		test   %ebp,0xc(%edx,%eax,1)
		jne    jump_57332
		xor    %eax,%eax
		jmp    jump_5730d
	jump_5736d:
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+49
		je     jump_57380
		xor    %dl,%dl
		mov    %dl,EXPORT_SYMBOL(lbKeyOn)+49
		xor    %eax,%eax
	jump_57380:
		cmpb   $0x0,in_network_game
		je     jump_57412
		xor    %eax,%eax
		mov    ingame__fld_unkCB7,%ax
		cmp    $0x96,%eax
		jle    jump_573ac
		call   ac_rand
		and    $0x1f,%eax
		add    $0x2,%eax
		call   ac_process_things_mines_explode
	jump_573ac:
		testb  $0x10,unkn_flags_08
		je     jump_573e2
		testb  $0xf,gameturn
		jne    jump_573e2
		xor    %eax,%eax
		mov    ingame__fld_unkCB7,%ax
		cmp    $0x64,%eax
		jle    jump_573d4
		xor    %eax,%eax
		mov    $0x1,%edx
		jmp    jump_573d8
	jump_573d4:
		xor    %eax,%eax
		xor    %edx,%edx
	jump_573d8:
		mov    login_control__TechLevel,%al
		call   ac_process_things_unkn_sub2
	jump_573e2:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(things_used),%ax
		cmp    $0x384,%eax
		jle    jump_573f8
		mov    $0x10,%eax
		jmp    jump_5740d
	jump_573f8:
		cmp    $0x2bc,%eax
		jg     jump_57408
		testb  $0xf,gameturn
		jne    jump_57412
	jump_57408:
		mov    $0x1,%eax
	jump_5740d:
		call   ac_process_things_bang
	jump_57412:
		testb  $0x1f,gameturn
		jne    jump_57436
		xor    %eax,%eax
	jump_5741d:
		mov    data_19f1a7(%eax),%dl
		add    $0x10,%eax
		and    $0xbf,%dl
		mov    %dl,data_19f197(%eax)
		cmp    $0x210,%eax
		jne    jump_5741d
	jump_57436:
		mov    frame,%ecx
		xor    %eax,%eax
		jmp    jump_57458
	jump_57440:
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(shield_frm)(,%edx,2),%bx
		mov    0x6(%ecx,%ebx,8),%bx
		inc    %eax
		mov    %bx,EXPORT_SYMBOL(shield_frm)(,%edx,2)
	jump_57458:
		xor    %edx,%edx
		mov    %ax,%dx
		cmp    $0x4,%edx
		jl     jump_57440
		testb  $0x80,EXPORT_SYMBOL(ingame)+0x930 # ingame.Flags+1
		je     jump_5751a
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		xor    %ebx,%ebx
		add    %eax,%eax
		mov    mouser,%bl
		mov    %eax,%edx
		shl    $0x2,%eax
		shl    $0x2,%ebx
		sub    %edx,%eax
		add    %eax,%ebx
		mov    EXPORT_SYMBOL(players)+0x088(%ebx),%edx # players[0].DirectControl[0]
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		mov    things,%ecx
		add    %edx,%eax
		subw   $0x3,0x96(%ecx,%eax,8)
		mov    EXPORT_SYMBOL(players)+0x088(%ebx),%edx # players[0].DirectControl[0]
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    0x94(%ecx,%eax,8),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jg     jump_5751a
		xor    %eax,%eax
		mov    ingame__PalType,%al
		push   %eax
		mov    palette_fname_fmt,%esi
		push   %esi
		lea    0x8(%esp),%eax
		push   %eax
		call   ac_sprintf
		lea    0xc(%esp),%eax
		mov    EXPORT_SYMBOL(ingame)+0x930,%bl # ingame.Flags+1
		add    $0xc,%esp
		and    $0x7f,%bl
		mov    display_palette,%edx
		mov    %bl,EXPORT_SYMBOL(ingame)+0x930 # ingame.Flags+1
		call   ac_LbFileLoadAt
	jump_5751a:
		mov    gameturn,%eax
		call   ASM_merged_noop_unkn1
		xor    %edi,%edi
		call   ac_build_same_type_headers
		mov    %edi,ingame__fld_unkC4B
		call   ac_animate_textures
		call   ac_unkn_update_lights
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(next_unkn_full_light),%ax
		cmp    $0x1,%eax
		jle    jump_57596
		mov    $0x1,%esi
		cmp    %si,%ax
		jbe    jump_5758d
	jump_57552:
		xor    %eax,%eax
		mov    %si,%ax
		imul   $0xa,%eax,%eax
		xor    %ecx,%ecx
		mov    EXPORT_SYMBOL(unkn_full_lights)(%eax),%cx
		mov    data_19f9c0(%eax),%ebx
		mov    data_19f9be(%eax),%edx
		sar    $0x10,%ebx
		mov    EXPORT_SYMBOL(unkn_full_lights)(%eax),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		inc    %esi
		call   ac_quick_light_unkn_func_04
		cmp    EXPORT_SYMBOL(next_unkn_full_light),%si
		jb     jump_57552
	jump_5758d:
		movw   $0x1,EXPORT_SYMBOL(next_unkn_full_light)
	jump_57596:
		mov    execute_commands,%bh
		xor    %edi,%edi
		xor    %edx,%edx
		mov    things_used_head,%di
		mov    EXPORT_SYMBOL(things_used),%dx
		test   %bh,%bh
		je     jump_57872
		testb  $0x80,EXPORT_SYMBOL(ingame)+0x92F # ingame.Flags+0
		je     jump_57872
		call   ac_monitor_all_samples
		cmpb   $0x0,in_network_game
		jne    jump_575f0
		cmpb   $0x0,pktrec_mode
		jne    jump_575f0
		testb  $0x4,EXPORT_SYMBOL(ingame)+0x92F # ingame.Flags+0
		je     jump_575f0
		testb  $0xf,gameturn
		jne    jump_57872
	jump_575f0:
		mov    $0x3,%ebp
		mov    $0x2,%ecx
	jump_575fa:
		test   %edi,%edi
		jle    jump_57828
		dec    %edx
		cmp    $0xffffffff,%edx
		je     jump_57828
		mov    ingame__fld_unkC4B,%eax
		add    %edi,%eax
		imul   $0xa8,%edi,%esi
		mov    %eax,ingame__fld_unkC4B
		mov    things,%eax
		add    %eax,%esi
		xor    %ebx,%ebx
		xor    %eax,%eax
		mov    0x9(%esi),%bl
		mov    0xa(%esi),%ax
		add    %ebx,%eax
		add    0x18(%esi),%eax
		add    0x1c(%esi),%eax
		add    %eax,ingame__fld_unkC4B
		mov    0x4(%esi),%ebx
		mov    0x47(%esi),%al
		sar    $0x10,%ebx
		test   $0x2,%al
		je     jump_5765c
		add    gameturn,%edi
		test   $0x3,%di
		jne    jump_57821
	jump_5765c:
		andb   $0xfd,0x47(%esi)
		test   %ecx,0x44(%esi)
		je     jump_57775
		test   %ebp,gameturn
		jne    jump_57821
		decb   0x56(%esi)
		mov    0x53(%esi),%eax
		sar    $0x18,%eax
		test   %eax,%eax
		jge    jump_57821
		testb  $0x10,0xf(%esi)
		jne    jump_57697
		xor    %eax,%eax
		mov    0x16(%esi),%ax
		call   ac_add_node_thing
	jump_57697:
		andb   $0xfd,0x44(%esi)
		mov    %ebx,%edi
		jmp    jump_575fa
	jump_576a2:
		mov    %esi,%eax
		call   ac_process_vehicle
		mov    %ebx,%edi
		jmp    jump_575fa
	jump_576b0:
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0xd,%eax
		jne    jump_57821
		mov    %esi,%eax
		call   ac_process_unkn35
		mov    %ebx,%edi
		jmp    jump_575fa
	jump_576cd:
		mov    %esi,%eax
		call   ac_process_shield
		mov    %esi,%eax
		call   ac_process_person
		testb  $0x8,0xd(%esi)
		je     jump_576ec
		orb    $0x4,0x45(%esi)
		mov    %ebx,%edi
		jmp    jump_575fa
	jump_576ec:
		andb   $0xfb,0x45(%esi)
		mov    %ebx,%edi
		jmp    jump_575fa
	jump_576f7:
		mov    %esi,%eax
		call   ac_process_rocket
		mov    %ebx,%edi
		jmp    jump_575fa
	jump_57705:
		mov    %esi,%eax
		call   ac_process_grenade
		mov    %ebx,%edi
		jmp    jump_575fa
	jump_57713:
		mov    %esi,%eax
		call   ac_process_building
		mov    %ebx,%edi
		jmp    jump_575fa
	jump_57721:
		mov    %esi,%eax
		call   ac_process_laser
		mov    %ebx,%edi
		jmp    jump_575fa
	jump_5772f:
		mov    %esi,%eax
		call   ac_process_laser_guided
		mov    %ebx,%edi
		jmp    jump_575fa
	jump_5773d:
		mov    %esi,%eax
		call   ac_process_laser_elec
		mov    %ebx,%edi
		jmp    jump_575fa
	jump_5774b:
		mov    %esi,%eax
		call   ac_process_razor_wire
		mov    %ebx,%edi
		jmp    jump_575fa
	jump_57759:
		mov    %esi,%eax
		call   ac_process_mine
		mov    %ebx,%edi
		jmp    jump_575fa
	jump_57767:
		mov    %esi,%eax
		call   ac_process_air_strike
		mov    %ebx,%edi
		jmp    jump_575fa
	jump_57775:
		mov    0x9(%esi),%al
		mov    %al,%ah
		cmp    $0x10,%al
		jb     jump_577d5
		jbe    jump_57705
		cmp    $0x21,%al
		jb     jump_577ad
		jbe    jump_57821
		cmp    $0x23,%al
		jb     jump_57821
		jbe    jump_576b0
		cmp    $0x26,%al
		jb     jump_57821
		jbe    jump_57721
		mov    %ebx,%edi
		jmp    jump_575fa
	jump_577ad:
		cmp    $0x1c,%al
		jb     jump_577c6
		jbe    jump_5774b
		cmp    $0x1d,%al
		jbe    jump_57721
		cmp    $0x1f,%al
		je     jump_57767
		mov    %ebx,%edi
		jmp    jump_575fa
	jump_577c6:
		cmp    $0x13,%al
		je     jump_5773d
		mov    %ebx,%edi
		jmp    jump_575fa
	jump_577d5:
		cmp    $0x6,%al
		jb     jump_5780f
		jbe    jump_576f7
		cmp    $0xb,%al
		jb     jump_57800
		jbe    jump_57721
		cmp    $0xc,%al
		jbe    jump_5772f
		cmp    $0xf,%al
		je     jump_57759
		mov    %ebx,%edi
		jmp    jump_575fa
	jump_57800:
		cmp    $0x9,%al
		je     jump_57713
		mov    %ebx,%edi
		jmp    jump_575fa
	jump_5780f:
		cmp    $0x2,%al
		jb     jump_57821
		jbe    jump_576a2
		cmp    $0x4,%al
		jbe    jump_576cd
	jump_57821:
		mov    %ebx,%edi
		jmp    jump_575fa
	jump_57828:
		mov    sthings_empty_head,%edi
		movzwl EXPORT_SYMBOL(sthings_used),%ebp
		mov    execute_commands,%bh
		sar    $0x10,%edi
		test   %bh,%bh
		je     jump_57858
	jump_57846:
		test   %edi,%edi
		je     jump_57858
		dec    %ebp
		cmp    $0xffffffff,%ebp
		jne    jump_57bfa
	jump_57858:
		cmpb   $0x0,execute_commands
		je     jump_57868
		xor    %eax,%eax
		call   ac_people_intel
	jump_57868:
		mov    $0x1,%eax
		call   ac_navi_onscreen_debug
	jump_57872:
		add    $0x68,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_5787c:
		decw   0x28(%esi)
		mov    0x26(%esi),%eax
		sar    $0x10,%eax
		mov    %esi,%edi
		test   %eax,%eax
		jge    jump_5789c
		mov    0x14(%esi),%eax
		sar    $0x10,%eax
		call   ac_remove_sthing
		jmp    jump_57d27
	jump_5789c:
		xor    %ebx,%ebx
		mov    0x2e(%esi),%dx
		mov    0x2c(%esi),%bx
		test   %dx,%dx
		je     jump_578c3
		xor    %ecx,%ecx
		mov    %dx,%cx
		xor    %edx,%edx
		call   ac_LbRandomAnyShort
		mov    %ax,%dx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		add    %edx,%ebx
	jump_578c3:
		push   $0x0
		movswl %bx,%ecx
		mov    0x1c(%edi),%edx
		mov    0x18(%edi),%eax
		sar    $0x8,%edx
		mov    0x20(%edi),%ebx
		sar    $0x8,%eax
		sar    $0x8,%ebx
		call   ac_apply_full_light
		mov    0x64(%esp),%edi
		jmp    jump_57846
	jump_578e8:
		cmp    $0x1,%edx
		jne    jump_5793b
		cmpl   $0x0,EXPORT_SYMBOL(dont_bother_with_explode_faces)
		je     jump_57d27
		mov    0x14(%esi),%eax
		mov    $0x2e,%edx
		sar    $0x10,%eax
		call   ac_stop_sample_using_heap
		push   $0x3
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x2f,%edx
		mov    %esi,%eax
		call   ac_play_dist_ssample
		movw   $0x2,0xa(%esi)
		movw   $0x64,0x28(%esi)
		mov    0x64(%esp),%edi
		jmp    jump_57846
	jump_5793b:
		decw   0x28(%esi)
		mov    0x26(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_57d27
		mov    0x14(%esi),%eax
		sar    $0x10,%eax
		call   ac_remove_sthing
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0x2,%eax
		jne    jump_57d27
		xor    %ecx,%ecx
		mov    %cx,ingame__SoundThing
		mov    0x64(%esp),%edi
		jmp    jump_57846
	jump_57979:
		xor    %eax,%eax
		mov    %dx,%ax
		cmp    $0x24,%eax
		jne    jump_579f6
		mov    $0x2,%eax
		push   %eax
		xor    %eax,%eax
		mov    $0x40,%ecx
		push   %eax
		mov    $0x64,%eax
		mov    $0x7f,%ebx
		push   %eax
		mov    $0x1d,%edx
		mov    %esi,%eax
		call   ac_play_dist_ssample
		mov    %esi,%edx
		mov    0x28(%esi),%si
		dec    %esi
		mov    %si,0x28(%edx)
		mov    0x26(%edx),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_57d27
		mov    nstart_ani,%ebx
		mov    0x26(%edx),%ax
		mov    (%ebx,%eax,2),%ax
		movw   $0xd,0xa(%edx)
		mov    0x14(%edx),%ebx
		mov    %ax,0x24(%edx)
		mov    $0x1d,%eax
		sar    $0x10,%ebx
		mov    %eax,%edx
		mov    %ebx,%eax
		call   ac_stop_sample_using_heap
		mov    0x64(%esp),%edi
		jmp    jump_57846
	jump_579f6:
		xor    %eax,%eax
		mov    %dx,%ax
		cmp    $0xc,%eax
		jne    jump_57d27
		decw   0x28(%esi)
		mov    0x26(%esi),%eax
		sar    $0x10,%eax
		mov    %esi,%edx
		test   %eax,%eax
		jne    jump_57d27
		mov    nstart_ani,%ebx
		mov    0x26(%esi),%ax
		mov    (%ebx,%eax,2),%ax
		mov    %ax,0x24(%esi)
		mov    0x14(%esi),%eax
		mov    $0x1d,%edx
		sar    $0x10,%eax
		movw   $0xd,0xa(%esi)
		call   ac_stop_sample_using_heap
		mov    0x64(%esp),%edi
		jmp    jump_57846
	jump_57a49:
		movswl %di,%edx
		mov    %esi,%eax
		call   ac_process_scale_effect
		mov    0x64(%esp),%edi
		jmp    jump_57846
	jump_57a5c:
		movswl %di,%edx
		mov    %esi,%eax
		call   ac_process_nuclear_bomb
		mov    0x64(%esp),%edi
		jmp    jump_57846
	jump_57a6f:
		mov    %esi,%eax
		call   ac_process_spark
		mov    0x64(%esp),%edi
		jmp    jump_57846
	jump_57a7f:
		mov    %esi,%eax
		call   ac_process_soul
		mov    0x64(%esp),%edi
		jmp    jump_57846
	jump_57a8f:
		mov    %esi,%eax
		call   ac_process_intelligent_door
		mov    0x64(%esp),%edi
		jmp    jump_57846
	jump_57a9f:
		mov    %esi,%eax
		call   ac_process_smoke_generator
		mov    0x64(%esp),%edi
		jmp    jump_57846
	jump_57aaf:
		cmpb   $0x0,in_network_game
		je     jump_57d27
		xor    %eax,%eax
		mov    0x2c(%esi),%ax
		cmp    $0x1f,%eax
		je     jump_57d27
		incw   0x30(%esi)
		mov    0x64(%esp),%edi
		jmp    jump_57846
	jump_57ad8:
		mov    %esi,%eax
		call   ac_process_electric_strand
		mov    0x64(%esp),%edi
		jmp    jump_57846
	jump_57ae8:
		xor    %eax,%eax
		mov    0x32(%esi),%ax
		imul   $0xa8,%eax,%eax
		mov    things,%ebx
		add    %ebx,%eax
		mov    0x18(%eax),%ebx
		mov    %ebx,0x18(%esi)
		mov    0x1c(%eax),%ebx
		mov    %ebx,0x1c(%esi)
		mov    0x20(%eax),%ebx
		mov    %ebx,0x20(%esi)
		mov    %esi,%edx
		mov    0xa(%eax),%ax
		and    $0xffff,%eax
		cmp    $0xd,%eax
		jne    jump_57d27
		mov    0x14(%esi),%eax
		sar    $0x10,%eax
		movb   $0x19,0x9(%esi)
		call   ac_add_node_sthing
		mov    0x64(%esp),%edi
		jmp    jump_57846
	jump_57b3a:
		mov    %esi,%eax
		call   ac_process_time_pod
		mov    0x64(%esp),%edi
		jmp    jump_57846
	jump_57b4a:
		mov    %esi,%eax
		call   ac_process_stasis_pod
		mov    0x64(%esp),%edi
		jmp    jump_57846
	jump_57b5a:
		mov    %esi,%eax
		call   ac_process_canister
		mov    0x64(%esp),%edi
		jmp    jump_57846
	jump_57b6a:
		cmpw   $0x0,0x2e(%esi)
		jne    jump_57b90
		cmpw   $0x0,0x2c(%esi)
		jne    jump_57b90
		movswl %di,%eax
		call   ac_remove_sthing
		mov    %esi,%eax
		call   ac_delete_snode
		mov    0x64(%esp),%edi
		jmp    jump_57846
	jump_57b90:
		mov    %esi,%eax
		call   ac_process_bang
		mov    0x64(%esp),%edi
		jmp    jump_57846
	jump_57ba0:
		xor    %eax,%eax
		mov    0x2c(%esi),%ax
		test   %eax,%eax
		jne    jump_57bea
		mov    $0x10,%edx
		mov    %edi,%eax
		call   ac_ReleaseLoopedSample
		push   $0x3
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x17,%edx
		mov    %esi,%eax
		call   ac_play_dist_ssample
		movswl %di,%eax
		call   ac_remove_sthing
		mov    %esi,%eax
		call   ac_delete_snode
		mov    0x64(%esp),%edi
		jmp    jump_57846
	jump_57bea:
		mov    %esi,%eax
		call   ac_FIRE_process_flame
		mov    0x64(%esp),%edi
		jmp    jump_57846
	jump_57bfa:
		imul   $0x3c,%edi,%esi
		mov    EXPORT_SYMBOL(sthings),%eax
		add    %eax,%esi
		mov    0x4(%esi),%eax
		sar    $0x10,%eax
		xor    %edx,%edx
		mov    %eax,0x64(%esp)
		xor    %eax,%eax
		mov    0xa(%esi),%dx
		mov    0x9(%esi),%al
		mov    0x18(%esi),%ebx
		add    %edx,%eax
		mov    0x1c(%esi),%ecx
		add    %ebx,%eax
		mov    ingame__fld_unkC4B,%ebx
		add    %ecx,%eax
		add    %eax,%ebx
		mov    0x9(%esi),%al
		mov    %al,%ah
		mov    %ebx,ingame__fld_unkC4B
		cmp    $0x1a,%al
		jb     jump_57cbe
		jbe    jump_57ae8
		cmp    $0x25,%al
		jb     jump_57c84
		jbe    jump_57a7f
		cmp    $0x34,%al
		jb     jump_57c73
		jbe    jump_57ba0
		cmp    $0x35,%al
		jbe    jump_578e8
		cmp    $0x36,%al
		je     jump_5787c
		mov    0x64(%esp),%edi
		jmp    jump_57846
	jump_57c73:
		cmp    $0x32,%al
		je     jump_57b6a
		mov    0x64(%esp),%edi
		jmp    jump_57846
	jump_57c84:
		cmp    $0x1e,%al
		jb     jump_57cad
		jbe    jump_57b3a
		cmp    $0x20,%al
		jb     jump_57d27
		jbe    jump_57b5a
		cmp    $0x24,%al
		je     jump_57b4a
		mov    0x64(%esp),%edi
		jmp    jump_57846
	jump_57cad:
		cmp    $0x1b,%al
		je     jump_57ad8
		mov    0x64(%esp),%edi
		jmp    jump_57846
	jump_57cbe:
		cmp    $0x14,%al
		jb     jump_57d08
		jbe    jump_57a8f
		cmp    $0x16,%al
		jb     jump_57a49
		jbe    jump_57a5c
		cmp    $0x18,%al
		jb     jump_57d27
		jbe    jump_57a9f
		xor    %eax,%eax
		mov    0x8(%esi),%al
		cmp    $0xd,%eax
		je     jump_57cf8
		xor    %eax,%eax
		mov    0x8(%esi),%al
		cmp    $0xc,%eax
		jne    jump_57aaf
	jump_57cf8:
		mov    %esi,%eax
		call   ac_process_mine
		mov    0x64(%esp),%edi
		jmp    jump_57846
	jump_57d08:
		cmp    $0xa,%al
		jb     jump_57d1f
		jbe    jump_57d27
		cmp    $0x11,%al
		je     jump_57a6f
		mov    0x64(%esp),%edi
		jmp    jump_57846
	jump_57d1f:
		cmp    $0x5,%al
		je     jump_57979
	jump_57d27:
		mov    0x64(%esp),%edi
		jmp    jump_57846


/*----------------------------------------------------------------*/
set_player_peeps_to_run:	/* 0x057D30 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		mov    %eax,%ecx
		mov    %edx,%edi
		xor    %ebx,%ebx
		jmp    jump_57d3d
	jump_57d3c:
		inc    %ebx
	jump_57d3d:
		xor    %eax,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(playable_agents),%al
		mov    %bx,%dx
		cmp    %eax,%edx
		jge    jump_543c1
		xor    %eax,%eax
		mov    %di,%ax
		imul   $0x1aa,%eax,%eax
		mov    EXPORT_SYMBOL(players)+0x09C(%eax,%edx,4),%edx # players[0].MyAgent[0]
		cmp    %ecx,%edx
		je     jump_57d3c
		testb  $0x2,0xc(%edx)
		jne    jump_57d3c
		xor    %eax,%eax
		mov    0xa(%edx),%ax
		cmp    $0x2b,%eax
		jne    jump_57d3c
		mov    0x46(%edx),%eax
		xor    %esi,%esi
		sar    $0x10,%eax
		mov    0x16(%ecx),%si
		cmp    %esi,%eax
		jne    jump_57d3c
		mov    0xa0(%edx),%eax
		sar    $0x10,%eax
		mov    0x9e(%edx),%esi
		sar    $0x2,%eax
		sar    $0x10,%esi
		add    $0x40,%eax
		cmp    %eax,%esi
		jle    jump_57d3c
		mov    0xd(%edx),%al
		movw   $0x0,0x8e(%edx)
		and    $0xf7,%al
		mov    %al,0xd(%edx)
		mov    %edx,%eax
		movl   $0x0,0x40(%edx)
		call   ac_set_person_animmode_run
		orb    $0x80,0x47(%edx)
		jmp    jump_57d3c


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_thing_goto_point_rel_fast)	/* 0x057DCC */
/*----------------------------------------------------------------*/
		push   %esi
		mov    %eax,%esi
		testl  $0x40000003,0xc(%eax)
		jne    jump_57e13
		andl   $0xfff5ffbf,0x44(%eax)
		movswl %cx,%ecx
		mov    0x46(%eax),%ah
		movswl %bx,%ebx
		or     $0x8,%ah
		movswl %dx,%edx
		mov    %ah,0x46(%esi)
		mov    %esi,%eax
		call   ac_thing_goto_point_rel
		testb  $0x40,0x44(%esi)
		jne    jump_57e13
		mov    %esi,%eax
		xor    %edx,%edx
		call   ac_set_person_animmode_run
		mov    0x8(%esp),%dx
		mov    %esi,%eax
		call   set_player_peeps_to_run
	jump_57e13:
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_thing_goto_point_rel)	/* 0x057E18 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		mov    %eax,%esi
		mov    %edx,%edi
		testl  $0x40000003,0xc(%eax)
		jne    jump_58050
		andl   $0xfffdffbf,0x44(%eax)
		testb  $0x10,0x44(%eax)
		jne    jump_58050
		testb  $0x2,0xc(%esi)
		jne    jump_58050
		mov    0xd(%esi),%dh
		test   $0x2,%dh
		je     jump_57eb8
		movswl %cx,%ecx
		movswl %di,%ebx
		xor    %edx,%edx
		xor    %eax,%eax
		call   ac_angle_between_points
		cwtl
		add    $0x80,%eax
		sar    $0x8,%eax
		add    $0x8,%eax
		xor    %edx,%edx
		and    $0x7,%eax
		mov    0x57(%esi),%dl
		mov    %eax,%ebx
		and    $0xffff,%eax
		cmp    %edx,%eax
		je     jump_58050
		xor    %edx,%edx
		mov    0x8(%esi),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		mov    %bl,0x57(%esi)
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		xor    %edx,%edx
		and    $0xffff,%eax
		mov    %bl,%dl
		jmp    jump_58040
	jump_57eb8:
		testb  $0x1,0x44(%esi)
		je     jump_57eca
		test   $0x8,%dh
		jne    jump_57eca
		mov    %esi,%eax
		call   ac_finalise_razor_wire
	jump_57eca:
		testb  $0x10,0xf(%esi)
		jne    jump_58050
		testb  $0x20,0xd(%esi)
		je     jump_57f01
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		sar    $0x2,%eax
		mov    %eax,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		xor    %edx,%edx
		mov    %dx,data_1a63d8(%eax)
	jump_57f01:
		mov    0xa(%esi),%ax
		mov    %eax,%edx
		and    $0x7f,%dh
		cmp    $0x1,%dx
		je     jump_57f24
		cmp    $0x23,%dx
		je     jump_57f24
		xor    %edx,%edx
		mov    %ax,%dx
		cmp    $0x5,%edx
		jne    jump_58050
	jump_57f24:
		and    $0x80,%ah
		mov    0x46(%esi),%dl
		movw   $0x30,0x2a(%esi)
		and    $0xfd,%dl
		mov    $0x23,%al
		mov    %dl,0x46(%esi)
		mov    %ax,0xa(%esi)
		movswl %di,%eax
		mov    %eax,0x2c(%esi)
		movswl %cx,%eax
		mov    0x4c(%esi),%bx
		mov    %eax,0x34(%esi)
		test   %bx,%bx
		je     jump_57f58
		mov    %esi,%eax
		call   ac_remove_path
	jump_57f58:
		testb  $0x8,0x46(%esi)
		je     jump_57fcd
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		cmp    $0x13,%eax
		je     jump_58050
		xor    %edx,%edx
		mov    0x8(%esi),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		movb   $0x13,0x6c(%esi)
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		xor    %edx,%edx
		dec    %eax
		mov    0x8(%esi),%dl
		mov    %ax,0x26(%esi)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%dx
		xor    %eax,%eax
		and    $0xffff,%edx
		jmp    jump_5803d
	jump_57fcd:
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		cmp    $0x13,%eax
		jne    jump_58050
		mov    %esi,%eax
		xor    %edx,%edx
		call   ac_gun_out_anim
		xor    %edx,%edx
		mov    0x8(%esi),%dl
		mov    %al,0x6c(%esi)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		xor    %edx,%edx
		dec    %eax
		mov    0x8(%esi),%dl
		mov    %ax,0x26(%esi)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		add    %eax,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
	jump_5803d:
		mov    0x57(%esi),%al
	jump_58040:
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		mov    %ax,0x24(%esi)
	jump_58050:
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_thing_goto_point_fast)	/* 0x058054 */
/*----------------------------------------------------------------*/
		push   %esi
		mov    %eax,%esi
		testl  $0x40000003,0xc(%eax)
		jne    jump_5809b
		andl   $0xfff5ffbf,0x44(%eax)
		movswl %cx,%ecx
		mov    0x46(%eax),%ah
		movswl %bx,%ebx
		or     $0x8,%ah
		movswl %dx,%edx
		mov    %ah,0x46(%esi)
		mov    %esi,%eax
		call   ac_thing_goto_point
		testb  $0x40,0x44(%esi)
		jne    jump_5809b
		mov    %esi,%eax
		xor    %edx,%edx
		call   ac_set_person_animmode_run
		mov    0x8(%esp),%dx
		mov    %esi,%eax
		call   set_player_peeps_to_run
	jump_5809b:
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
clear_player_protectors_paths:	/* 0x0580A0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    %eax,%edi
		xor    %eax,%eax
		mov    0x54(%edi),%ax
		sar    $0x2,%eax
		xor    %edx,%edx
		mov    %eax,(%esp)
		jmp    jump_580bb
	jump_580ba:
		inc    %edx
	jump_580bb:
		xor    %ebx,%ebx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(playable_agents),%bl
		mov    %dx,%ax
		cmp    %ebx,%eax
		jge    jump_58111
		xor    %ebx,%ebx
		mov    (%esp),%bx
		imul   $0x1aa,%ebx,%ebx
		shl    $0x2,%eax
		add    %eax,%ebx
		mov    EXPORT_SYMBOL(players)+0x09C(%ebx),%eax # players[0].MyAgent[0]
		# in case players[].MyAgent pointer is NULL
		test   %eax, %eax
		jz     jump_580ba
		xor    %ecx,%ecx
		mov    0xa(%eax),%cx
		cmp    $0x2b,%ecx
		jne    jump_580ba
		mov    0x46(%eax),%esi
		xor    %ecx,%ecx
		sar    $0x10,%esi
		mov    0x16(%edi),%cx
		cmp    %ecx,%esi
		jne    jump_580ba
		call   ac_remove_path
		mov    EXPORT_SYMBOL(players)+0x09C(%ebx),%eax # players[0].MyAgent[0]
		movw   $0xffff,0x66(%eax)
		jmp    jump_580ba
	jump_58111:
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_thing_goto_point)	/* 0x05811C */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		mov    %eax,%esi
		mov    %edx,%edi
		testl  $0x40000203,0xc(%eax)
		jne    jump_583d4
		andl   $0xfffdffbf,0x44(%eax)
		testb  $0x2,0xc(%eax)
		jne    jump_583d4
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0xd,%eax
		je     jump_583d4
		testb  $0x1,0x44(%esi)
		je     jump_5815c
		mov    %esi,%eax
		call   ac_finalise_razor_wire
	jump_5815c:
		testb  $0x10,0xf(%esi)
		je     jump_581a7
		mov    0x5c(%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %eax,%edx
		mov    things,%eax
		shl    $0x3,%edx
		movswl %cx,%ebx
		add    %edx,%eax
		movswl %di,%edx
		call   ac_start_goto_vehicle
		test   %eax,%eax
		jne    jump_58196
		orb    $0x40,0x44(%esi)
		pop    %edi
		pop    %esi
		ret
	jump_58196:
		mov    %di,0x9a(%esi)
		mov    %cx,0x9c(%esi)
		pop    %edi
		pop    %esi
		ret
	jump_581a7:
		testb  $0x10,0xd(%esi)
		je     jump_581b4
		mov    %esi,%eax
		call   clear_player_protectors_paths
	jump_581b4:
		testb  $0x20,0xd(%esi)
		je     jump_581e5
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		sar    $0x2,%eax
		mov    %eax,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		xor    %edx,%edx
		mov    %dx,data_1a63d8(%eax)
	jump_581e5:
		mov    0x46(%esi),%dl
		mov    0xa(%esi),%ax
		and    $0xfd,%dl
		and    $0x7f,%ah
		mov    %dl,0x46(%esi)
		cmp    $0x10,%ax
		jb     jump_583c0
		jbe    jump_58224
		cmp    $0x26,%ax
		jb     jump_583d4
		jbe    jump_58393
		cmp    $0x2c,%ax
		jb     jump_583d4
		cmp    $0x2d,%ax
		jbe    jump_58224
		pop    %edi
		pop    %esi
		ret
	jump_58224:
		movw   $0xffff,0x66(%esi)
		movw   $0x30,0x28(%esi)
		movw   $0x30,0x2a(%esi)
		movb   $0x0,0x3f(%esi)
		movw   $0x0,0x8e(%esi)
		mov    %di,0x9a(%esi)
		and    $0x80,%ah
		mov    %cx,0x9c(%esi)
		mov    $0x1,%al
		mov    %ax,0xa(%esi)
		mov    0x4c(%esi),%bx
		mov    %al,0x5b(%esi)
		test   %bx,%bx
		je     jump_5826d
		mov    %esi,%eax
		call   ac_remove_path
	jump_5826d:
		movswl %cx,%ebx
		movswl %di,%edx
		mov    %esi,%eax
		xor    %ecx,%ecx
		movw   $0x0,0x4c(%esi)
		call   ac_build_navigate_path
		testb  $0x8,0x46(%esi)
		je     jump_5830e
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		cmp    $0x13,%eax
		je     jump_583d4
		xor    %edx,%edx
		mov    0x8(%esi),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		movb   $0x13,0x6c(%esi)
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		xor    %edx,%edx
		dec    %eax
		mov    0x8(%esi),%dl
		mov    %ax,0x26(%esi)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		xor    %edx,%edx
		and    $0xffff,%eax
		mov    0x57(%esi),%dl
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		mov    %ax,0x24(%esi)
		pop    %edi
		pop    %esi
		ret
	jump_5830e:
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		cmp    $0x13,%eax
		jne    jump_583d4
		mov    %esi,%eax
		xor    %edx,%edx
		call   ac_gun_out_anim
		xor    %edx,%edx
		mov    0x8(%esi),%dl
		mov    %al,0x6c(%esi)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		xor    %edx,%edx
		mov    0x6c(%esi),%dl
		add    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,4),%ax
		xor    %edx,%edx
		dec    %eax
		mov    0x8(%esi),%dl
		mov    %ax,0x26(%esi)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		add    %eax,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    0x57(%esi),%al
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		mov    %ax,0x24(%esi)
		pop    %edi
		pop    %esi
		ret
	jump_58393:
		mov    0x5c(%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		movswl %cx,%ebx
		add    %edx,%eax
		movswl %di,%edx
		call   ac_start_goto_vehicle
		pop    %edi
		pop    %esi
		ret
	jump_583c0:
		cmp    $0x1,%ax
		jbe    jump_58224
		cmp    $0x5,%ax
		je     jump_58224
	jump_583d4:
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_thing_goto_point_on_face_fast)	/* 0x0583D8 */
/*----------------------------------------------------------------*/
		push   %esi
		mov    %eax,%esi
		testl  $0x40000003,0xc(%eax)
		jne    jump_58418
		movswl %cx,%ecx
		mov    0x46(%eax),%ah
		movswl %bx,%ebx
		or     $0x8,%ah
		movswl %dx,%edx
		mov    %ah,0x46(%esi)
		mov    %esi,%eax
		call   ac_thing_goto_point_on_face
		testb  $0x40,0x44(%esi)
		jne    jump_58418
		mov    %esi,%eax
		xor    %edx,%edx
		call   ac_set_person_animmode_run
		mov    0x8(%esp),%dx
		mov    %esi,%eax
		call   set_player_peeps_to_run
	jump_58418:
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_thing_goto_point_on_face)	/* 0x05841C */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		mov    %eax,%esi
		mov    %dx,(%esp)
		testl  $0x40000001,0xc(%eax)
		jne    jump_586fb
		testw  $0x202,0xc(%eax)
		jne    jump_586fb
		testb  $0x1,0x44(%eax)
		je     jump_5844e
		mov    %esi,%eax
		call   ac_finalise_razor_wire
	jump_5844e:
		testb  $0x10,0xf(%esi)
		je     jump_586ac
		mov    0x5c(%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%ebp
		shl    $0x3,%eax
		movswl %cx,%edi
		lea    (%eax,%ebp,1),%esi
		test   %edi,%edi
		jge    jump_584e8
		mov    %edi,%edx
		neg    %edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    game_object_faces4,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    0xe(%eax),%dx
		lea    0x0(,%edx,8),%eax
		add    %eax,%edx
		mov    game_objects,%eax
		shl    $0x2,%edx
		mov    0xa(%edx,%eax,1),%dx
		and    $0xffff,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    0x8(%ebp,%eax,8),%al
		and    $0xff,%eax
		cmp    $0x15,%eax
		jne    jump_584ee
		lea    0x4(%esp),%ecx
		lea    0x8(%esp),%ebx
		mov    %esi,%edx
		mov    %edi,%eax
		call   find_bezier_nav_point
		jmp    jump_584fb
	jump_584e8:
		jle    jump_586fb
	jump_584ee:
		mov    (%esp),%eax
		mov    %bx,0x4(%esp)
		mov    %ax,0x8(%esp)
	jump_584fb:
		andb   $0xdf,0xd(%esi)
		mov    %esi,%eax
		mov    0x2(%esp),%ebx
		mov    0x6(%esp),%edx
		sar    $0x10,%ebx
		sar    $0x10,%edx
		call   ac_start_goto_vehicle
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_5851b:
		movw   $0x1,0xa(%esi)
		movw   $0xffff,0x66(%esi)
		movw   $0x30,0x28(%esi)
		movw   $0x30,0x2a(%esi)
		movb   $0x0,0x3f(%esi)
		mov    (%esp),%eax
		movb   $0x1,0x5b(%esi)
		mov    %ax,0x9a(%esi)
		mov    0xd(%esi),%al
		mov    %bx,0x9c(%esi)
		test   $0x20,%al
		je     jump_58578
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		sar    $0x2,%eax
		mov    %eax,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %cx,data_1a63d8(%eax)
	jump_58578:
		cmpw   $0x0,0x4c(%esi)
		je     jump_58586
		mov    %esi,%eax
		call   ac_remove_path
	jump_58586:
		movswl %bx,%eax
		neg    %ecx
		mov    -0x2(%esp),%ebx
		movswl %cx,%edx
		sar    $0x10,%ebx
		mov    %eax,%ecx
		mov    %esi,%eax
		movw   $0x0,0x4c(%esi)
		call   ac_build_navigate_path_to_face_xz
		testb  $0x8,0x46(%esi)
		je     jump_58627
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		cmp    $0x13,%eax
		je     jump_586fb
		xor    %edx,%edx
		mov    0x8(%esi),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		movb   $0x13,0x6c(%esi)
		sub    %edx,%eax
		xor    %edx,%edx
		mov    0x6c(%esi),%dl
		add    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,4),%ax
		xor    %edx,%edx
		dec    %eax
		mov    0x8(%esi),%dl
		mov    %ax,0x26(%esi)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		xor    %edx,%edx
		mov    0x6c(%esi),%dl
		shl    $0x2,%eax
		add    %edx,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    0x57(%esi),%al
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		mov    %ax,0x24(%esi)
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_58627:
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		cmp    $0x13,%eax
		jne    jump_586fb
		mov    %esi,%eax
		xor    %edx,%edx
		call   ac_gun_out_anim
		xor    %edx,%edx
		mov    0x8(%esi),%dl
		mov    %al,0x6c(%esi)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		xor    %edx,%edx
		mov    0x6c(%esi),%dl
		add    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,4),%ax
		xor    %edx,%edx
		dec    %eax
		mov    0x8(%esi),%dl
		mov    %ax,0x26(%esi)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		xor    %edx,%edx
		mov    0x6c(%esi),%dl
		shl    $0x2,%eax
		add    %edx,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    0x57(%esi),%al
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		mov    %ax,0x24(%esi)
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_586ac:
		mov    0x46(%esi),%dh
		mov    0xa(%esi),%ax
		and    $0xfd,%dh
		and    $0x7f,%ah
		mov    %dh,0x46(%esi)
		cmp    $0x10,%ax
		jb     jump_586e7
		jbe    jump_5851b
		cmp    $0x26,%ax
		jb     jump_586fb
		jbe    jump_586fb
		cmp    $0x2c,%ax
		jb     jump_586fb
		cmp    $0x2d,%ax
		jbe    jump_5851b
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_586e7:
		cmp    $0x1,%ax
		jbe    jump_5851b
		cmp    $0x5,%ax
		je     jump_5851b
	jump_586fb:
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_init_lay_razor)	/* 0x058704 */
/*----------------------------------------------------------------*/
		push   %esi
		mov    %eax,%esi
		movw   $0x1,0xa(%eax)
		movw   $0xffff,0x66(%eax)
		movw   $0x30,0x28(%eax)
		movw   $0x30,0x2a(%eax)
		movb   $0x0,0x3f(%eax)
		movb   $0x1,0x5b(%eax)
		mov    %dx,0x9a(%eax)
		mov    0x4c(%eax),%dx
		mov    %cx,0x9c(%eax)
		test   %dx,%dx
		je     jump_58743
		call   ac_remove_path
	jump_58743:
		mov    0x44(%esi),%ah
		movw   $0x0,0x4c(%esi)
		test   $0x1,%ah
		je     jump_58758
		mov    %esi,%eax
		call   ac_finalise_razor_wire
	jump_58758:
		xor    %edx,%edx
		mov    %esi,%eax
		mov    0x8(%esp),%dl
		call   ac_init_razor_wire
		orb    $0x4,0x44(%esi)
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_thing_shoot_at_point)	/* 0x058770 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x20,%esp
		mov    %eax,%esi
		mov    %dx,0x18(%esp)
		mov    %ebx,%edi
		mov    %cx,0x1c(%esp)
		testb  $0x2,0x30(%esp)
		je     jump_587de
		movswl %bx,%eax
		mov    %ebx,0x14(%esp)
		test   %eax,%eax
		jle    jump_587b6
		mov    0x1a(%esp),%edx
		xor    %ebx,%ebx
		mov    0x16(%esp),%eax
		mov    %di,%bx
		sar    $0x10,%edx
		sar    $0x10,%eax
		shl    $0x8,%edx
		shl    $0x8,%eax
		call   ac_get_height_on_face
		jmp    jump_587d6
	jump_587b6:
		mov    0x1a(%esp),%edx
		neg    %edi
		xor    %ebx,%ebx
		mov    0x16(%esp),%eax
		mov    %di,%bx
		sar    $0x10,%edx
		sar    $0x10,%eax
		shl    $0x8,%edx
		shl    $0x8,%eax
		call   ac_get_height_on_face_quad
	jump_587d6:
		sar    $0x8,%eax
		add    $0x14,%eax
		mov    %eax,%edi
	jump_587de:
		orb    $0x8,0xd(%esi)
		testb  $0x10,0xf(%esi)
		je     jump_58807
		mov    0x5c(%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		orb    $0x1,0xf(%edx,%eax,8)
	jump_58807:
		testl  $0x40000202,0xc(%esi)
		jne    jump_58ce9
		testb  $0x1,0x44(%esi)
		je     jump_58821
		mov    %esi,%eax
		call   ac_finalise_razor_wire
	jump_58821:
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0x8,%eax
		je     jump_58ce9
		cmp    $0x7,%eax
		je     jump_58ce9
		cmp    $0xd,%eax
		je     jump_58ce9
		cmp    $0xc,%eax
		je     jump_58ce9
		testb  $0x2,0xc(%esi)
		jne    jump_58ce9
		mov    0x1a(%esp),%ecx
		mov    0x16(%esp),%ebx
		mov    0x20(%esi),%edx
		mov    0x18(%esi),%eax
		sar    $0x10,%ecx
		sar    $0x10,%ebx
		sar    $0x8,%edx
		sar    $0x8,%eax
		call   ac_angle_between_points
		cwtl
		add    $0x80,%eax
		sar    $0x8,%eax
		add    $0x8,%eax
		xor    %edx,%edx
		and    $0x7,%eax
		mov    0x57(%esi),%dl
		mov    %eax,%ebx
		and    $0xffff,%eax
		cmp    %edx,%eax
		je     jump_588d6
		xor    %edx,%edx
		mov    0x8(%esi),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		add    %eax,%eax
		add    %edx,%eax
		mov    %bl,0x57(%esi)
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    %bl,%al
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		mov    %ax,0x24(%esi)
	jump_588d6:
		mov    0x16(%esp),%eax
		mov    0x18(%esi),%ecx
		movswl %di,%edx
		sar    $0x8,%ecx
		sar    $0x10,%eax
		movl   $0x0,0x40(%esi)
		sub    %ecx,%eax
		mov    0xc(%esi),%ebx
		mov    %eax,%ecx
		mov    0x1c(%esi),%eax
		mov    0x20(%esi),%ebp
		sar    $0x8,%eax
		or     $0x20000800,%ebx
		sub    %eax,%edx
		mov    0x1a(%esp),%eax
		sar    $0x8,%ebp
		sar    $0x10,%eax
		mov    %ebx,0xc(%esi)
		sub    %ebp,%eax
		mov    %edx,0x10(%esp)
		mov    %eax,%ebp
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebx
		mov    %ecx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x7,%edx
		mov    %edx,0x8(%esp)
		mov    %ebx,%edx
		sar    $0x7,%edx
		mov    %edx,0x4(%esp)
		cmp    %ebx,%eax
		jge    jump_58964
		mov    %ebx,%edx
		sar    $0x5,%edx
		sub    %edx,%ebx
		sub    0x4(%esp),%ebx
		mov    %eax,%edx
		sar    $0x2,%edx
		add    %edx,%ebx
		mov    %eax,%edx
		sar    $0x3,%edx
		sar    $0x6,%eax
		add    %ebx,%edx
		mov    0x8(%esp),%ebx
		add    %eax,%edx
		add    %edx,%ebx
		jmp    jump_58990
	jump_58964:
		mov    %eax,%edx
		sar    $0x5,%edx
		sub    %edx,%eax
		mov    0x8(%esp),%edx
		sub    %edx,%eax
		mov    %eax,(%esp)
		mov    %ebx,%eax
		mov    (%esp),%edx
		sar    $0x2,%eax
		add    %eax,%edx
		mov    %ebx,%eax
		sar    $0x3,%eax
		sar    $0x6,%ebx
		add    %edx,%eax
		add    %eax,%ebx
		mov    0x4(%esp),%eax
		add    %eax,%ebx
	jump_58990:
		testb  $0x20,0xd(%esi)
		je     jump_58a29
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		sar    $0x2,%eax
		mov    %eax,(%esp)
		mov    (%esp),%edx
		shl    $0x3,%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,(%esp)
		mov    (%esp),%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    0x18(%esp),%edx
		mov    %dx,data_1a63d0(%eax)
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		sar    $0x2,%eax
		mov    %eax,(%esp)
		mov    (%esp),%edx
		shl    $0x3,%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,(%esp)
		mov    (%esp),%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %di,data_1a63d2(%eax)
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		sar    $0x2,%eax
		mov    %eax,(%esp)
		mov    (%esp),%edx
		shl    $0x3,%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,(%esp)
		mov    (%esp),%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    0x1c(%esp),%edx
		mov    %dx,data_1a63d4(%eax)
	jump_58a29:
		mov    %esi,%eax
		call   ac_get_weapon_range
		mov    %eax,0xc(%esp)
		cmp    %eax,%ebx
		jle    jump_58a99
		test   %ebx,%ebx
		jne    jump_58a41
		mov    $0x1,%ebx
	jump_58a41:
		mov    0xc(%esp),%edx
		imul   %ecx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    0xc(%esp),%edi
		mov    0x10(%esp),%edx
		imul   %edi,%edx
		mov    %eax,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %edi,%edx
		imul   %ebp,%edx
		mov    %eax,0x10(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,%ebp
		mov    0x18(%esi),%eax
		sar    $0x8,%eax
		mov    0x1c(%esi),%edi
		add    %ecx,%eax
		sar    $0x8,%edi
		mov    %ax,0x18(%esp)
		add    0x10(%esp),%edi
		mov    0x20(%esi),%eax
		sar    $0x8,%eax
		add    %ebp,%eax
		mov    %ax,0x1c(%esp)
	jump_58a99:
		testb  $0x1,0x47(%esi)
		jne    jump_58ab7
		mov    0x1a(%esp),%ebx
		mov    0x16(%esp),%eax
		movswl %di,%edx
		mov    %esi,%ecx
		sar    $0x10,%ebx
		sar    $0x10,%eax
		call   ac_alert_peeps
	jump_58ab7:
		testb  $0x20,0xd(%esi)
		jne    jump_58ae2
		mov    0x16(%esp),%eax
		sar    $0x10,%eax
		mov    %eax,0x2c(%esi)
		movswl %di,%eax
		mov    %eax,0x30(%esi)
		mov    0x1a(%esp),%eax
		movw   $0x0,0xa(%esi)
		sar    $0x10,%eax
		mov    %eax,0x34(%esi)
		jmp    jump_58b93
	jump_58ae2:
		xor    %ebx,%ebx
		mov    0x54(%esi),%bx
		sar    $0x2,%ebx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		sub    %ebx,%eax
		mov    0x54(%esi),%dx
		add    %eax,%eax
		xor    %dh,%dh
		mov    %eax,%ebx
		shl    $0x2,%eax
		and    $0x3,%dl
		sub    %ebx,%eax
		and    $0xffff,%edx
		add    %edx,%edx
		add    %edx,%eax
		mov    0x18(%esp),%edx
		mov    %dx,data_1a647a(%eax)
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		sar    $0x2,%eax
		mov    %eax,%ebx
		shl    $0x3,%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		sub    %ebx,%eax
		add    %eax,%eax
		lea    0x0(,%eax,4),%edx
		sub    %eax,%edx
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		add    %eax,%eax
		add    %edx,%eax
		mov    0x1c(%esp),%edx
		xor    %ebx,%ebx
		mov    %dx,data_1a6482(%eax)
		mov    0x54(%esi),%bx
		sar    $0x2,%ebx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		sub    %ebx,%eax
		add    %eax,%eax
		lea    0x0(,%eax,4),%edx
		sub    %eax,%edx
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		mov    %di,data_1a63c8(%edx,%eax,2)
	jump_58b93:
		xor    %eax,%eax
		mov    0x99(%esi),%al
		cmp    $0x12,%eax
		jne    jump_58c3d
		push   $0x0
		mov    0x1e(%esp),%ebp
		movswl %di,%ebx
		mov    %esi,%eax
		mov    0x1a(%esp),%edi
		sar    $0x10,%ebp
		sar    $0x10,%edi
		mov    %ebp,%ecx
		mov    %edi,%edx
		call   ac_init_lay_razor
		testb  $0x2,0x30(%esp)
		je     jump_58c04
		mov    0x14(%esp),%eax
		mov    %ebp,%ecx
		neg    %eax
		mov    %edi,%ebx
		movswl %ax,%edx
		mov    %esi,%eax
		call   ac_build_navigate_path_to_face_xz
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		sar    $0x2,%eax
		mov    %eax,%ebx
		shl    $0x3,%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		sub    %ebx,%eax
		add    %eax,%eax
		mov    %eax,%ebx
		shl    $0x2,%eax
		sub    %ebx,%eax
		mov    0x14(%esp),%edx
		jmp    jump_58cd4
	jump_58c04:
		mov    %ebp,%ebx
		mov    %edi,%edx
		mov    %esi,%eax
		xor    %ecx,%ecx
		call   ac_build_navigate_path
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		sar    $0x2,%eax
		mov    %eax,%ebx
		shl    $0x3,%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		sub    %ebx,%eax
		add    %eax,%eax
		mov    %eax,%ebx
		shl    $0x2,%eax
		sub    %ebx,%eax
		xor    %ebx,%ebx
		mov    %bx,data_1a63d8(%eax)
		jmp    jump_58cdb
	jump_58c3d:
		cmp    $0x1d,%eax
		jne    jump_58cdb
		push   $0x1
		mov    0x1e(%esp),%ebp
		movswl %di,%ebx
		mov    %esi,%eax
		mov    0x1a(%esp),%edi
		sar    $0x10,%ebp
		sar    $0x10,%edi
		mov    %ebp,%ecx
		mov    %edi,%edx
		call   ac_init_lay_razor
		testb  $0x2,0x30(%esp)
		je     jump_58ca5
		mov    0x14(%esp),%eax
		mov    %ebp,%ecx
		neg    %eax
		mov    %edi,%ebx
		movswl %ax,%edx
		mov    %esi,%eax
		call   ac_build_navigate_path_to_face_xz
		xor    %ebx,%ebx
		mov    0x54(%esi),%bx
		sar    $0x2,%ebx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		sub    %ebx,%eax
		add    %eax,%eax
		mov    %eax,%ebx
		shl    $0x2,%eax
		sub    %ebx,%eax
		mov    0x14(%esp),%edx
		jmp    jump_58cd4
	jump_58ca5:
		mov    %ebp,%ebx
		mov    %edi,%edx
		mov    %esi,%eax
		xor    %ecx,%ecx
		call   ac_build_navigate_path
		xor    %ebx,%ebx
		mov    0x54(%esi),%bx
		sar    $0x2,%ebx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		sub    %ebx,%eax
		add    %eax,%eax
		mov    %eax,%ebx
		shl    $0x2,%eax
		sub    %ebx,%eax
		xor    %edx,%edx
	jump_58cd4:
		mov    %dx,data_1a63d8(%eax)
	jump_58cdb:
		testb  $0x1,0x30(%esp)
		je     jump_58ce9
		mov    %esi,%eax
		call   ac_set_person_animmode_run
	jump_58ce9:
		add    $0x20,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_thing_shoot_at_thing)	/* 0x058D20 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		mov    %eax,%esi
		mov    %edx,%ebx
		testl  $0x40000002,0xc(%eax)
		jne    jump_58f98
		movswl %bx,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		add    %eax,%edx
		mov    0x99(%esi),%al
		cmp    $0x12,%al
		jb     jump_58d6d
		jbe    jump_58d69
		cmp    $0x1b,%al
		jb     jump_58d75
		cmp    $0x1c,%al
		jbe    jump_58d69
		cmp    $0x1d,%al
		jne    jump_58d75
	jump_58d69:
		mov    $0x1,%al
		jmp    jump_58d77
	jump_58d6d:
		cmp    $0xc,%al
		jb     jump_58d75
		cmp    $0xd,%al
		jbe    jump_58d69
	jump_58d75:
		xor    %al,%al
	jump_58d77:
		test   %al,%al
		je     jump_58da4
		mov    0x20(%edx),%eax
		sar    $0x8,%eax
		movswl %ax,%ecx
		mov    0x1c(%edx),%eax
		sar    $0x8,%eax
		movswl %ax,%ebx
		mov    0x18(%edx),%eax
		sar    $0x8,%eax
		push   $0x0
		movswl %ax,%edx
		mov    %esi,%eax
		call   ac_thing_shoot_at_point
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_58da4:
		mov    0xd(%esi),%ah
		or     $0x8,%ah
		mov    0xf(%esi),%cl
		mov    %ah,0xd(%esi)
		test   $0x10,%cl
		je     jump_58dd4
		mov    0x5c(%esi),%ecx
		sar    $0x10,%ecx
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		shl    $0x2,%eax
		add    %ecx,%eax
		mov    things,%ecx
		orb    $0x1,0xf(%ecx,%eax,8)
	jump_58dd4:
		testb  $0x1,0x44(%esi)
		je     jump_58de1
		mov    %esi,%eax
		call   ac_finalise_razor_wire
	jump_58de1:
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0x8,%eax
		je     jump_58f98
		cmp    $0x7,%eax
		je     jump_58f98
		cmp    $0xd,%eax
		je     jump_58f98
		cmp    $0xc,%eax
		je     jump_58f98
		testb  $0x2,0xc(%esi)
		jne    jump_58f98
		testb  $0x10,0xf(%esi)
		je     jump_58e46
		mov    0x5c(%esi),%ecx
		sar    $0x10,%ecx
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		shl    $0x2,%eax
		add    %eax,%ecx
		mov    things,%eax
		shl    $0x3,%ecx
		add    %ecx,%eax
		cmp    %eax,%edx
		jne    jump_58e46
		andb   $0xdf,0xf(%esi)
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_58e46:
		mov    0x18(%edx),%eax
		mov    0x18(%esi),%ecx
		sar    $0x8,%eax
		sar    $0x8,%ecx
		sub    %ecx,%eax
		mov    %eax,%ecx
		imul   %ecx,%ecx
		mov    0x20(%esi),%edi
		mov    0x20(%edx),%eax
		sar    $0x8,%edi
		sar    $0x8,%eax
		sub    %edi,%eax
		imul   %eax,%eax
		add    %eax,%ecx
		mov    %esi,%eax
		call   ac_get_weapon_range
		imul   %eax,%eax
		cmp    %eax,%ecx
		jle    jump_58ea3
		mov    0x20(%edx),%eax
		sar    $0x8,%eax
		movswl %ax,%ecx
		mov    0x1c(%edx),%eax
		sar    $0x8,%eax
		movswl %ax,%ebx
		mov    0x18(%edx),%eax
		sar    $0x8,%eax
		push   $0x0
		movswl %ax,%edx
		mov    %esi,%eax
		call   ac_thing_shoot_at_point
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_58ea3:
		andl   $0xdffff7ff,0xc(%esi)
		orb    $0x8,0xd(%esi)
		movswl %bx,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		add    %eax,%edx
		mov    %edx,0x40(%esi)
		testb  $0x2,0xc(%edx)
		je     jump_58ef3
		xor    %eax,%eax
		mov    0x99(%esi),%al
		cmp    $0x3,%eax
		je     jump_58eef
		cmp    $0x4,%eax
		je     jump_58eef
		cmp    $0x11,%eax
		je     jump_58eef
		cmp    $0x14,%eax
		jne    jump_58ef3
	jump_58eef:
		orb    $0x20,0x46(%esi)
	jump_58ef3:
		testb  $0x20,0xd(%esi)
		jne    jump_58f01
		movw   $0x0,0xa(%esi)
		jmp    jump_58f07
	jump_58f01:
		movw   $0xffff,0x66(%esi)
	jump_58f07:
		mov    0x40(%esi),%edi
		test   %edi,%edi
		je     jump_58f98
		mov    0x20(%edi),%ecx
		mov    0x18(%edi),%ebx
		mov    0x20(%esi),%edx
		mov    0x18(%esi),%eax
		sar    $0x8,%ecx
		sar    $0x8,%ebx
		sar    $0x8,%edx
		sar    $0x8,%eax
		call   ac_angle_between_points
		cwtl
		add    $0x80,%eax
		sar    $0x8,%eax
		add    $0x8,%eax
		xor    %ebx,%ebx
		and    $0x7,%eax
		mov    0x57(%esi),%bl
		mov    %eax,%edx
		and    $0xffff,%eax
		cmp    %ebx,%eax
		je     jump_58f98
		mov    %dl,0x57(%esi)
		xor    %edx,%edx
		mov    0x8(%esi),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		xor    %edx,%edx
		and    $0xffff,%eax
		mov    0x57(%esi),%dl
		add    %edx,%eax
		lea    0x0(,%eax,2),%edx
		mov    nstart_ani,%eax
		mov    (%edx,%eax,1),%ax
		mov    %ax,0x24(%esi)
	jump_58f98:
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_init_follow_person)	/* 0x058FA0 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    %eax,%ebx
		testw  $0x202,0xc(%eax)
		jne    jump_58fec
		testb  $0x1,0x44(%eax)
		je     jump_58fb8
		mov    %ebx,%eax
		call   ac_finalise_razor_wire
	jump_58fb8:
		movw   $0x10,0xa(%ebx)
		movw   $0xffff,0x66(%ebx)
		mov    0x16(%edx),%dx
		movb   $0x4,0x5b(%ebx)
		movw   $0x32,0x68(%ebx)
		movw   $0x32,0x6a(%ebx)
		movb   $0x0,0x3f(%ebx)
		movw   $0x30,0x28(%ebx)
		movw   $0x30,0x2a(%ebx)
		mov    %dx,0x48(%ebx)
	jump_58fec:
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_can_i_enter_vehicle)	/* 0x058FF0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		mov    %eax,%ebx
		testb  $0x8,0x45(%eax)
		jne    jump_59080
		mov    0x5e(%edx),%ax
		test   %ax,%ax
		je     jump_59080
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %eax,%edx
		mov    things,%eax
		shl    $0x3,%edx
		add    %edx,%eax
		mov    0x51(%eax),%dl
		mov    0x51(%ebx),%dh
		cmp    %dh,%dl
		je     jump_59080
		and    $0x1f,%dl
		xor    %ecx,%ecx
		mov    $0x1,%ebx
		mov    %dl,%cl
		mov    %dh,%al
		lea    0x0(,%ecx,4),%esi
		and    $0x1f,%al
		add    %ecx,%esi
		mov    %al,%cl
		shl    $0x3,%esi
		shl    %cl,%ebx
		test   %ebx,war_flags__Truce(%esi)
		jne    jump_59080
		mov    %dl,%cl
		xor    %edx,%edx
		mov    %al,%dl
		lea    0x0(,%edx,4),%eax
		mov    $0x1,%ebx
		add    %edx,%eax
		shl    %cl,%ebx
		test   %ebx,war_flags__Truce(,%eax,8)
		jne    jump_59080
		xor    %al,%al
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_59080:
		mov    $0x1,%al
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_go_enter_vehicle_fast)	/* 0x059088 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		mov    %eax,%ecx
		testb  $0x1,0xc(%eax)
		jne    jump_590be
		mov    0x44(%ecx),%esi
		and    $0xfffdffbf,%esi
		mov    %ecx,%eax
		mov    %esi,0x44(%ecx)
		call   ac_person_go_enter_vehicle
		testb  $0x40,0x44(%ecx)
		jne    jump_590be
		mov    %ecx,%eax
		xor    %edx,%edx
		call   ac_set_person_animmode_run
		mov    %bx,%dx
		mov    %ecx,%eax
		call   set_player_peeps_to_run
	jump_590be:
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_go_enter_vehicle)	/* 0x0590C4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		mov    %eax,%ebx
		mov    %edx,%ecx
		testb  $0x1,0xc(%eax)
		jne    jump_591f6
		testw  $0x202,0xc(%ebx)
		jne    jump_591f6
		testb  $0x1,0x44(%ebx)
		je     jump_590ef
		mov    %ebx,%eax
		call   ac_finalise_razor_wire
	jump_590ef:
		testb  $0x10,0xf(%ebx)
		je     jump_59115
		mov    0x5c(%ebx),%esi
		xor    %eax,%eax
		sar    $0x10,%esi
		mov    0x16(%ecx),%ax
		cmp    %eax,%esi
		jne    jump_591f6
		mov    %ebx,%eax
		call   ac_person_attempt_to_leave_vehicle
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_59115:
		xor    %eax,%eax
		mov    0x8(%ecx),%al
		cmp    $0x36,%eax
		jne    jump_59187
		cmpw   $0x0,0x72(%ecx)
		je     jump_59187
		mov    0x36(%ecx),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_59187
		mov    0x18(%ebx),%esi
		mov    0x18(%ecx),%edx
		mov    0x20(%ebx),%eax
		mov    0x20(%ecx),%edi
		sub    %edx,%esi
		sub    %edi,%eax
		sar    $0x8,%esi
		mov    %eax,%edi
		mov    %esi,%eax
		sar    $0x8,%edi
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%esi
		mov    %edi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%esi
		jle    jump_59160
		sar    %eax
		jmp    jump_59162
	jump_59160:
		sar    %esi
	jump_59162:
		add    %esi,%eax
		cmp    $0x190000,%eax
		jge    jump_59187
		mov    %ecx,%edx
		mov    %ebx,%eax
		call   ac_person_enter_vehicle
		mov    0x16(%ecx),%ax
		movw   $0x0,0xa(%ebx)
		mov    %ax,0x5e(%ebx)
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_59187:
		xor    %eax,%eax
		mov    0x8(%ecx),%al
		cmp    $0x1d,%eax
		jne    jump_591a4
		cmpw   $0x0,0x6e(%ebx)
		je     jump_591f6
		orb    $0x20,0x80(%ebx)
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_591a4:
		movw   $0x2d,0xa(%ebx)
		movw   $0xffff,0x66(%ebx)
		mov    0x16(%ecx),%ax
		movb   $0x1,0x5b(%ebx)
		movb   $0x0,0x3f(%ebx)
		mov    %ax,0x48(%ebx)
		mov    0x18(%ecx),%eax
		sar    $0x8,%eax
		mov    %ax,0x9a(%ebx)
		mov    0x20(%ecx),%eax
		movw   $0x30,0x28(%ebx)
		movw   $0x30,0x2a(%ebx)
		sar    $0x8,%eax
		mov    0x4c(%ebx),%di
		mov    %ax,0x9c(%ebx)
		test   %di,%di
		je     jump_591f6
		mov    %ebx,%eax
		call   ac_remove_path
	jump_591f6:
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_enter_vehicle)	/* 0x0591FC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		mov    %eax,%ebx
		xor    %eax,%eax
		mov    0xa(%edx),%ax
		cmp    $0x21,%eax
		je     jump_59214
		cmp    $0x3d,%eax
		je     jump_59214
		test   %eax,%eax
		jne    jump_5926f
	jump_59214:
		mov    0xf(%ebx),%ah
		or     $0x12,%ah
		mov    %ah,%cl
		mov    %ah,0xf(%ebx)
		and    $0xfe,%cl
		mov    %cl,0xf(%ebx)
		mov    0x16(%ebx),%cx
		mov    0x5e(%edx),%ax
		mov    %cx,0x5e(%edx)
		movw   $0x26,0xa(%ebx)
		mov    0x47(%ebx),%ch
		mov    %ax,0x60(%ebx)
		test   $0x1,%ch
		jne    jump_5924a
		mov    %ebx,%eax
		call   ac_delete_node
	jump_5924a:
		mov    0x18(%edx),%eax
		mov    %eax,0x18(%ebx)
		mov    0x1c(%edx),%eax
		mov    %eax,0x1c(%ebx)
		mov    0x20(%edx),%eax
		mov    %eax,0x20(%ebx)
		mov    0x51(%ebx),%al
		mov    %al,0x51(%edx)
		testb  $0x8,0x46(%ebx)
		je     jump_5926f
		mov    %ebx,%eax
		call   ac_set_person_animmode_walk
	jump_5926f:
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_attempt_to_leave_vehicle)	/* 0x059274 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		mov    %eax,%ebx
		mov    0x5c(%eax),%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,4),%edx
		add    %eax,%edx
		shl    $0x2,%edx
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		add    %eax,%edx
		xor    %ecx,%ecx
		mov    0xa(%edx),%cx
		cmp    $0x45,%ecx
		jne    jump_592a9
		xor    %al,%al
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_592a9:
		xor    %eax,%eax
		mov    0x8(%edx),%al
		cmp    $0x1d,%eax
		jne    jump_592b9
		xor    %al,%al
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_592b9:
		testb  $0x2,0xc(%edx)
		je     jump_592c5
		xor    %al,%al
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_592c5:
		cmp    $0x33,%eax
		jne    jump_592e7
		cmp    $0x21,%ecx
		je     jump_5936b
		mov    0x18(%edx),%eax
		sar    $0x8,%eax
		mov    %ax,0x6a(%edx)
		mov    0x20(%edx),%eax
		sar    $0x8,%eax
		mov    %ax,0x6e(%edx)
	jump_592e7:
		xor    %eax,%eax
		mov    0x8(%edx),%al
		cmp    $0x32,%eax
		jne    jump_59331
		xor    %eax,%eax
		mov    0xa(%edx),%ax
		cmp    $0x21,%eax
		je     jump_59314
		cmp    $0x3b,%eax
		je     jump_59308
		mov    %edx,%eax
		call   ac_start_landing
	jump_59308:
		movw   $0x36,0xa(%ebx)
		xor    %al,%al
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_59314:
		mov    %ebx,%eax
		call   ac_person_leave_vehicle
		test   %al,%al
		jne    jump_59372
		testb  $0x20,0xd(%ebx)
		je     jump_5932b
		movw   $0x0,0xa(%ebx)
	jump_5932b:
		xor    %al,%al
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_59331:
		xor    %eax,%eax
		mov    0xa(%edx),%ax
		cmp    $0x21,%eax
		je     jump_5936b
		cmp    $0x3d,%eax
		je     jump_5936b
		test   %eax,%eax
		je     jump_5936b
		cmp    $0x3e,%eax
		je     jump_5936b
		cmp    $0x38,%eax
		je     jump_5936b
		cmp    $0x33,%eax
		je     jump_5935f
		cmp    $0x36,%eax
		je     jump_5935f
		movw   $0x3c,0xa(%edx)
	jump_5935f:
		movw   $0x36,0xa(%ebx)
		xor    %al,%al
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_5936b:
		mov    %ebx,%eax
		call   ac_person_leave_vehicle
	jump_59372:
		mov    $0x1,%al
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_vector_in_way)	/* 0x059378 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x2c,%esp
		mov    %eax,0x24(%esp)
		mov    %edx,0x8(%esp)
		mov    0x18(%eax),%ebp
		sar    $0x8,%ebp
		mov    0x20(%eax),%esi
		lea    (%edx,%ebp,1),%eax
		sar    $0x8,%esi
		mov    %eax,0x4(%esp)
		lea    (%esi,%ebx,1),%eax
		mov    %eax,0xc(%esp)
		sub    %esi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ecx
		mov    0x4(%esp),%eax
		sub    %ebp,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x7,%edx
		mov    %edx,0x10(%esp)
		mov    %ecx,%edx
		sar    $0x7,%edx
		cmp    %ecx,%eax
		jge    jump_593e9
		mov    %ecx,%edi
		sar    $0x5,%edi
		sub    %edi,%ecx
		sub    %edx,%ecx
		mov    %eax,%edx
		sar    $0x2,%edx
		add    %edx,%ecx
		mov    %eax,%edx
		sar    $0x3,%edx
		sar    $0x6,%eax
		add    %ecx,%edx
		add    %eax,%edx
		mov    0x10(%esp),%eax
		jmp    jump_59417
	jump_593e9:
		mov    %eax,%edi
		sar    $0x5,%edi
		sub    %edi,%eax
		mov    0x10(%esp),%edi
		sub    %edi,%eax
		mov    %eax,(%esp)
		mov    %ecx,%eax
		mov    (%esp),%edi
		sar    $0x2,%eax
		add    %eax,%edi
		mov    %edi,(%esp)
		mov    %ecx,%edi
		mov    (%esp),%eax
		sar    $0x3,%edi
		add    %eax,%edi
		mov    %ecx,%eax
		sar    $0x6,%eax
		add    %edi,%eax
	jump_59417:
		add    %eax,%edx
		sar    $0x6,%edx
		mov    %edx,0x28(%esp)
		inc    %edx
		mov    %edx,0x28(%esp)
		mov    0x4(%esp),%edx
		sub    %ebp,%edx
		mov    0x28(%esp),%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    0xc(%esp),%edx
		sub    %esi,%edx
		mov    %eax,0x14(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %ecx,%edi
		xor    %ecx,%edi
		mov    %eax,0x1c(%esp)
		test   %ecx,%ecx
		jge    jump_5946c
		jmp    jump_594b1
	jump_59455:
		mov    0x14(%esp),%edx
		mov    0x1c(%esp),%ebx
		mov    0x28(%esp),%ecx
		inc    %edi
		add    %edx,%ebp
		add    %ebx,%esi
		cmp    %ecx,%edi
		jle    jump_5947e
		jmp    jump_594b1
	jump_5946c:
		mov    0x8(%esp),%eax
		shl    $0x8,%ebx
		shl    $0x8,%eax
		mov    %ebx,0x18(%esp)
		mov    %eax,0x20(%esp)
	jump_5947e:
		mov    %esi,%ecx
		mov    %ebp,%eax
		sar    $0x8,%ecx
		sar    $0x8,%eax
		shl    $0x7,%ecx
		add    %eax,%ecx
		imul   $0x12,%ecx,%ecx
		mov    0x18(%esp),%ebx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		mov    0x20(%esp),%edx
		add    %eax,%ecx
		mov    0x24(%esp),%eax
		call   ac_do_move_colide
		test   %ax,%ax
		je     jump_59455
		xor    %al,%al
		jmp    jump_594b3
	jump_594b1:
		mov    $0x1,%al
	jump_594b3:
		add    $0x2c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
yank_from_vehicle:	/* 0x0594BC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    things,%esi
		mov    %eax,%edi
		mov    0x5c(%eax),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		shl    $0x3,%eax
		add    %esi,%eax
		mov    0x16(%edi),%bx
		mov    0x5e(%eax),%dx
		cmp    %bx,%dx
		jne    jump_594f9
		mov    0x60(%edi),%dx
		mov    %dx,0x5e(%eax)
		jmp    jump_59543
	jump_594f9:
		mov    %edx,%eax
		xor    %ebx,%ebx
		test   %dx,%dx
		je     jump_59543
		xor    %ecx,%ecx
		mov    0x16(%edi),%cx
	jump_59508:
		movswl %ax,%edx
		cmp    %ecx,%edx
		jne    jump_5952f
		movswl %bx,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %eax,%edx
		shl    $0x3,%edx
		add    %esi,%edx
		mov    0x60(%edi),%ax
		mov    %ax,0x60(%edx)
		jmp    jump_59543
	jump_5952f:
		mov    %eax,%ebx
		imul   $0xa8,%edx,%eax
		mov    %esi,%edx
		mov    0x60(%edx,%eax,1),%ax
		test   %ax,%ax
		jne    jump_59508
	jump_59543:
		andb   $0xef,0xf(%edi)
		mov    0x18(%edi),%eax
		sar    $0x8,%eax
		cwtl
		mov    %esi,things
		mov    %eax,%edx
		movw   $0x0,0x5e(%edi)
		call   ac_alt_at_point
		mov    %eax,0x1c(%edi)
		xor    %eax,%eax
		mov    0x16(%edi),%ax
		call   ac_add_node_thing
		mov    things,%esi
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_leave_vehicle)	/* 0x05957C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x34,%esp
		mov    %eax,0x2c(%esp)
		mov    %edx,0x10(%esp)
		xor    %edx,%edx
		mov    %edx,0x18(%esp)
		mov    %edx,0x1c(%esp)
		xor    %edx,%edx
		mov    %edx,0x30(%esp)
		mov    0x10(%esp),%edx
		xor    %eax,%eax
		mov    0xa(%edx),%ax
		cmp    $0x21,%eax
		je     jump_595d6
		cmp    $0x3d,%eax
		je     jump_595d6
		cmp    $0xd,%eax
		je     jump_595d6
		cmp    $0x33,%eax
		je     jump_595cf
		cmp    $0x36,%eax
		je     jump_595cf
		cmp    $0x3e,%eax
		je     jump_595cf
		cmp    $0x38,%eax
		je     jump_595cf
		movw   $0x3c,0xa(%edx)
	jump_595cf:
		mov    $0x1,%dl
		jmp    jump_59e01
	jump_595d6:
		mov    0x2c(%esp),%eax
		testb  $0x10,0xf(%eax)
		jne    jump_595ed
		mov    $0x2,%dl
		mov    %dl,%al
		add    $0x34,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_595ed:
		mov    0x10(%esp),%edx
		xor    %eax,%eax
		xor    %ecx,%ecx
		mov    0x8(%edx),%al
		mov    %ecx,0x20(%esp)
		cmp    $0x32,%eax
		jne    jump_5962c
		mov    0x20(%edx),%eax
		sar    $0x8,%eax
		movswl %ax,%edx
		mov    0x10(%esp),%eax
		mov    0x18(%eax),%eax
		sar    $0x8,%eax
		cwtl
		call   ac_alt_at_point
		mov    0x10(%esp),%edx
		add    $0xdac,%eax
		cmp    0x1c(%edx),%eax
		jl     jump_59a81
	jump_5962c:
		mov    $0x100,%edi
		mov    0x20(%esp),%ebp
		mov    %edi,0x14(%esp)
		test   %ebp,%ebp
		jne    jump_59a81
	jump_59641:
		mov    0x14(%esp),%edx
		cmp    $0x800,%edx
		jge    jump_59a81
		mov    0x10(%esp),%eax
		mov    $0x1,%ebx
		mov    0x64(%eax),%eax
		mov    %ebx,0x20(%esp)
		sar    $0x10,%eax
		mov    0x10(%esp),%ebx
		add    %edx,%eax
		xor    %edx,%edx
		and    $0x7ff,%eax
		mov    0x14(%ebx),%dx
		mov    EXPORT_SYMBOL(lbSinTable)(,%eax,4),%ebx
		imul   %edx,%ebx
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%eax,4),%eax
		imul   %edx,%eax
		neg    %eax
		sar    $0x10,%eax
		mov    %eax,0x1c(%esp)
		mov    0x2c(%esp),%eax
		mov    0x20(%eax),%eax
		mov    0x1c(%esp),%esi
		sar    $0x8,%eax
		sar    $0x10,%ebx
		add    %esi,%eax
		mov    %ebx,0x18(%esp)
		cmp    $0x8000,%eax
		jl     jump_596b8
		xor    %ebx,%ebx
		mov    %ebx,0x20(%esp)
		jmp    jump_596e9
	jump_596b8:
		test   %eax,%eax
		jge    jump_596c4
		xor    %edx,%edx
		mov    %edx,0x20(%esp)
		jmp    jump_596e9
	jump_596c4:
		mov    0x2c(%esp),%eax
		mov    0x18(%eax),%eax
		sar    $0x8,%eax
		add    %ebx,%eax
		cmp    $0x8000,%eax
		jl     jump_596df
		xor    %eax,%eax
		mov    %eax,0x20(%esp)
		jmp    jump_596e9
	jump_596df:
		test   %eax,%eax
		jge    jump_596e9
		xor    %ebp,%ebp
		mov    %ebp,0x20(%esp)
	jump_596e9:
		cmpl   $0x0,0x20(%esp)
		je     jump_59a50
		mov    0x1c(%esp),%ecx
		mov    0x2c(%esp),%edx
		mov    0x18(%esp),%ebx
		shl    $0x8,%ecx
		shl    $0x8,%ebx
		mov    0x20(%edx),%esi
		mov    0x18(%edx),%edi
		add    %esi,%ecx
		add    %edi,%ebx
		sar    $0x10,%ecx
		sar    $0x10,%ebx
		mov    %ecx,%eax
		mov    %ebx,%edi
		and    $0x7f,%eax
		and    $0x7f,%edi
		shl    $0x7,%eax
		lea    (%edi,%eax,1),%edx
		imul   $0x12,%edx,%edx
		lea    0x1(%ebx),%ebp
		and    $0x7f,%ebp
		add    %ebp,%eax
		imul   $0x12,%eax,%eax
		mov    %ebp,0xc(%esp)
		lea    0x1(%ecx),%ebp
		and    $0x7f,%ebp
		shl    $0x7,%ebp
		add    %ebp,%edi
		imul   $0x12,%edi,%edi
		mov    EXPORT_SYMBOL(game_my_big_map),%esi
		mov    0x4(%esi,%eax,1),%eax
		sar    $0x10,%eax
		mov    0x4(%edx,%esi,1),%edx
		mov    %eax,(%esp)
		mov    0x4(%edi,%esi,1),%eax
		sar    $0x10,%eax
		mov    %eax,0x4(%esp)
		add    0xc(%esp),%ebp
		imul   $0x12,%ebp,%eax
		mov    0x4(%esi,%eax,1),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		mov    (%esp),%esi
		mov    %eax,0x8(%esp)
		cmp    %esi,%edx
		jle    jump_59785
		mov    %edx,%eax
		jmp    jump_59787
	jump_59785:
		mov    %esi,%eax
	jump_59787:
		mov    0x4(%esp),%edi
		cmp    %edi,%eax
		jg     jump_59791
		mov    %edi,%eax
	jump_59791:
		mov    0x8(%esp),%ebp
		cmp    %ebp,%eax
		jg     jump_5979b
		mov    %ebp,%eax
	jump_5979b:
		mov    %eax,%esi
		mov    (%esp),%eax
		cmp    %eax,%edx
		jge    jump_597a6
		mov    %edx,%eax
	jump_597a6:
		mov    0x4(%esp),%edx
		cmp    %edx,%eax
		jl     jump_597b0
		mov    %edx,%eax
	jump_597b0:
		mov    0x8(%esp),%edi
		cmp    %edi,%eax
		jl     jump_597ba
		mov    %edi,%eax
	jump_597ba:
		sub    %eax,%esi
		mov    %esi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		mov    %ecx,%eax
		shl    $0x7,%eax
		add    %ebx,%eax
		imul   $0x12,%eax,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%esi
		mov    (%esi,%eax,1),%ax
		and    $0x3f,%ah
		cwtl
		call   ac_get_my_texture_bits
		and    $0xff,%eax
		and    $0xc0,%eax
		shr    $0x6,%eax
		and    $0x2,%eax
		test   %ebx,%ebx
		jl     jump_5980a
		cmp    $0x80,%ebx
		jge    jump_5980a
		test   %ecx,%ecx
		jl     jump_5980a
		cmp    $0x80,%ecx
		jl     jump_59812
	jump_5980a:
		xor    %eax,%eax
		mov    %eax,0x20(%esp)
		jmp    jump_59851
	jump_59812:
		cmp    $0xc,%edx
		jle    jump_59819
		or     $0x4,%al
	jump_59819:
		mov    %ecx,%edx
		shl    $0x7,%edx
		add    %ebx,%edx
		imul   $0x12,%edx,%esi
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		testb  $0x2,0xf(%edx,%esi,1)
		je     jump_59832
		and    $0xfb,%al
	jump_59832:
		test   $0x4,%al
		jne    jump_5984b
		shl    $0x7,%ecx
		add    %ecx,%ebx
		imul   $0x12,%ebx,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		testb  $0x5,0xf(%edx,%eax,1)
		je     jump_59851
	jump_5984b:
		xor    %ebp,%ebp
		mov    %ebp,0x20(%esp)
	jump_59851:
		cmpl   $0x0,0x20(%esp)
		je     jump_59872
		mov    0x1c(%esp),%ebx
		mov    0x18(%esp),%edx
		mov    0x2c(%esp),%eax
		call   ac_vector_in_way
		and    $0xff,%eax
		mov    %eax,0x20(%esp)
	jump_59872:
		cmpl   $0x0,0x20(%esp)
		je     jump_59a50
		mov    0x18(%esp),%edx
		imul   %edx,%edx
		mov    0x1c(%esp),%eax
		imul   %eax,%eax
		add    %edx,%eax
		call   ac_LbSqrL
		mov    %eax,%edi
		sar    $0x6,%edi
		test   %edi,%edi
		jne    jump_598a0
		mov    $0x1,%edi
	jump_598a0:
		mov    0x2c(%esp),%ecx
		mov    0x2c(%esp),%esi
		mov    0x20(%ecx),%ecx
		mov    0x18(%esi),%esi
		sar    $0x8,%ecx
		sar    $0x8,%esi
		movswl %cx,%edx
		movswl %si,%eax
		call   ac_alt_at_point
		sar    $0x8,%eax
		lea    0x3(%eax),%ebp
		mov    0x18(%esp),%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		idiv   %edi
		mov    %eax,0x24(%esp)
		mov    0x1c(%esp),%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		idiv   %edi
		mov    %eax,0x28(%esp)
		jmp    jump_59903
	jump_598e5:
		mov    0x28(%esp),%eax
		mov    0x24(%esp),%ebp
		add    %eax,%ecx
		add    %ebp,%esi
		movswl %cx,%edx
		movswl %si,%eax
		call   ac_alt_at_point
		sar    $0x8,%eax
		dec    %edi
		lea    0x3(%eax),%ebp
	jump_59903:
		xor    %eax,%eax
		mov    %di,%ax
		test   %eax,%eax
		jle    jump_59921
		mov    %ecx,%ebx
		mov    %ebp,%edx
		mov    %esi,%eax
		call   ac_check_col_collision
		test   %eax,%eax
		je     jump_598e5
		xor    %edx,%edx
		mov    %edx,0x20(%esp)
	jump_59921:
		cmpl   $0x0,0x20(%esp)
		je     jump_59a50
		mov    0x2c(%esp),%esi
		mov    0x18(%esi),%esi
		mov    0x18(%esp),%ecx
		sar    $0x8,%esi
		add    %ecx,%esi
		mov    0x2c(%esp),%ecx
		mov    0x1c(%esp),%edi
		mov    0x20(%ecx),%ecx
		mov    %esi,%edx
		sar    $0x8,%ecx
		sar    $0x8,%edx
		add    %edi,%ecx
		test   %edx,%edx
		jl     jump_59a50
		cmp    $0x80,%edx
		jge    jump_59a50
		mov    %ecx,%eax
		sar    $0x8,%eax
		test   %eax,%eax
		jl     jump_59a50
		cmp    $0x80,%eax
		jge    jump_59a50
		shl    $0x7,%eax
		add    %edx,%eax
		imul   $0x12,%eax,%edx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		mov    0x6(%edx,%eax,1),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		je     jump_59a50
	jump_59999:
		jle    jump_599fb
		imul   $0xa8,%eax,%ebp
		mov    things,%edx
		mov    0x18(%edx,%ebp,1),%ebx
		mov    %esi,%eax
		sar    $0x8,%ebx
		sub    %ebx,%eax
		mov    %eax,%ebx
		imul   %ebx,%ebx
		mov    0x20(%edx,%ebp,1),%eax
		mov    %ecx,%edi
		sar    $0x8,%eax
		sub    %eax,%edi
		mov    %edi,%eax
		imul   %edi,%eax
		add    %ebx,%eax
		call   ac_LbSqrL
		mov    0x14(%edx,%ebp,1),%dx
		mov    0x2c(%esp),%edi
		xor    %ebx,%ebx
		and    $0xffff,%edx
		mov    0x14(%edi),%bx
		add    %ebx,%edx
		cmp    %edx,%eax
		jg     jump_599f1
		xor    %ecx,%ecx
		mov    %ecx,0x20(%esp)
		jmp    jump_59a50
	jump_599f1:
		mov    things,%eax
		mov    (%eax,%ebp,1),%eax
		jmp    jump_59a45
	jump_599fb:
		imul   $0x3c,%eax,%eax
		mov    EXPORT_SYMBOL(sthings),%edx
		add    %eax,%edx
		mov    0x18(%edx),%eax
		mov    %esi,%ebp
		sar    $0x8,%eax
		sub    %eax,%ebp
		imul   %ebp,%ebp
		mov    0x20(%edx),%ebx
		sar    $0x8,%ebx
		mov    %ecx,%eax
		sub    %ebx,%eax
		imul   %eax,%eax
		mov    0x2c(%esp),%edi
		add    %ebp,%eax
		xor    %ebx,%ebx
		call   ac_LbSqrL
		movzwl 0x14(%edx),%ebp
		mov    0x14(%edi),%bx
		add    %ebp,%ebx
		cmp    %ebx,%eax
		jg     jump_59a43
		xor    %ebp,%ebp
		mov    %ebp,0x20(%esp)
		jmp    jump_59a50
	jump_59a43:
		mov    (%edx),%eax
	jump_59a45:
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_59999
	jump_59a50:
		mov    0x14(%esp),%esi
		add    $0xb4,%esi
		mov    %esi,0x14(%esp)
		cmp    $0x400,%esi
		jl     jump_59a76
		cmp    $0x500,%esi
		jge    jump_59a76
		movl   $0x500,0x14(%esp)
	jump_59a76:
		cmpl   $0x0,0x20(%esp)
		je     jump_59641
	jump_59a81:
		cmpl   $0x0,0x20(%esp)
		jne    jump_59a9b
		mov    0x10(%esp),%edx
		xor    %eax,%eax
		mov    0xa(%edx),%ax
		cmp    $0xd,%eax
		jne    jump_59dff
	jump_59a9b:
		mov    0x2c(%esp),%eax
		mov    0xf(%eax),%bh
		and    $0xed,%bh
		mov    0x2c(%esp),%edx
		mov    %bh,0xf(%eax)
		mov    0x10(%esp),%eax
		mov    0x16(%edx),%bx
		cmp    0x5e(%eax),%bx
		jne    jump_59acb
		mov    0x60(%edx),%ax
		mov    0x10(%esp),%edx
		mov    %ax,0x5e(%edx)
		jmp    jump_59b45
	jump_59acb:
		mov    0x10(%esp),%eax
		mov    0x5e(%eax),%ax
		xor    %ebx,%ebx
		test   %ax,%ax
		je     jump_59b45
	jump_59ada:
		xor    %edx,%edx
		mov    0x30(%esp),%dx
		cmp    $0x1f4,%edx
		jge    jump_59b45
		mov    0x2c(%esp),%edx
		cmp    0x16(%edx),%ax
		jne    jump_59b1f
		xor    %edx,%edx
		mov    %bx,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		add    %eax,%edx
		mov    0x2c(%esp),%eax
		mov    0x60(%eax),%ax
		mov    %ax,0x60(%edx)
		jmp    jump_59b45
	jump_59b1f:
		mov    %eax,%ebx
		and    $0xffff,%eax
		imul   $0xa8,%eax,%eax
		mov    0x30(%esp),%ecx
		mov    things,%edx
		inc    %ecx
		mov    0x60(%edx,%eax,1),%ax
		mov    %ecx,0x30(%esp)
		test   %ax,%ax
		jne    jump_59ada
	jump_59b45:
		mov    0x2c(%esp),%eax
		mov    0x52(%eax),%di
		movw   $0x0,0xa(%eax)
		test   %di,%di
		je     jump_59bab
		xor    %edx,%edx
		mov    0x54(%eax),%dx
		mov    game_commands,%eax
		shl    $0x5,%edx
		mov    (%edx,%eax,1),%dx
		and    $0xffff,%edx
		shl    $0x5,%edx
		add    %edx,%eax
		xor    %dh,%dh
		mov    0xa(%eax),%dl
		mov    %dl,%al
		and    $0xff,%eax
		cmp    $0x2,%eax
		je     jump_59b95
		xor    %eax,%eax
		mov    %dx,%ax
		cmp    $0x20,%eax
		je     jump_59b95
		cmp    $0x23,%eax
		jne    jump_59bab
	jump_59b95:
		mov    0x18(%esp),%ebx
		mov    0x1c(%esp),%ecx
		sar    $0x2,%ebx
		sar    $0x2,%ecx
		mov    %ebx,0x18(%esp)
		mov    %ecx,0x1c(%esp)
	jump_59bab:
		mov    0x18(%esp),%eax
		mov    0x2c(%esp),%edx
		shl    $0x8,%eax
		mov    0x18(%edx),%esi
		add    %eax,%esi
		mov    0x1c(%esp),%eax
		mov    0x20(%edx),%edi
		shl    $0x8,%eax
		mov    %esi,0x18(%edx)
		add    %eax,%edi
		mov    0x18(%edx),%eax
		sar    $0x10,%eax
		mov    %edi,0x20(%edx)
		test   %eax,%eax
		jl     jump_59bee
		cmp    $0x80,%eax
		jge    jump_59bee
		mov    %edi,%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jl     jump_59bee
		cmp    $0x80,%eax
		jl     jump_59c10
	jump_59bee:
		mov    0x18(%esp),%eax
		mov    0x2c(%esp),%edx
		shl    $0x8,%eax
		mov    0x18(%edx),%ebp
		sub    %eax,%ebp
		mov    0x1c(%esp),%eax
		mov    0x20(%edx),%ebx
		shl    $0x8,%eax
		mov    %ebp,0x18(%edx)
		sub    %eax,%ebx
		mov    %ebx,0x20(%edx)
	jump_59c10:
		mov    0x2c(%esp),%eax
		mov    0x20(%eax),%eax
		sar    $0x8,%eax
		movswl %ax,%edx
		mov    0x2c(%esp),%eax
		mov    0x18(%eax),%eax
		sar    $0x8,%eax
		cwtl
		call   ac_alt_at_point
		mov    0x2c(%esp),%edx
		mov    0xc(%edx),%cl
		mov    %eax,0x1c(%edx)
		or     $0x14,%cl
		mov    0x20(%edx),%eax
		mov    %cl,0xc(%edx)
		sar    $0x10,%eax
		mov    0x18(%edx),%edx
		shl    $0x7,%eax
		sar    $0x10,%edx
		add    %eax,%edx
		lea    0x0(,%edx,8),%eax
		add    %eax,%edx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %edx,%edx
		testb  $0x1,0xf(%edx,%eax,1)
		je     jump_59c72
		cmpl   $0x0,0x20(%esp)
		je     jump_59c72
		xor    %esi,%esi
		mov    %esi,0x20(%esp)
	jump_59c72:
		mov    0x2c(%esp),%eax
		testb  $0x1,0x47(%eax)
		jne    jump_59c8b
		mov    0x2c(%esp),%edx
		xor    %eax,%eax
		mov    0x16(%edx),%ax
		call   ac_add_node_thing
	jump_59c8b:
		mov    0x2c(%esp),%eax
		movw   $0x30,0x28(%eax)
		mov    0x10(%esp),%edx
		movw   $0x30,0x2a(%eax)
		xor    %eax,%eax
		mov    0x5e(%edx),%ax
		test   %eax,%eax
		jne    jump_59cad
		movb   $0x63,0x51(%edx)
	jump_59cad:
		mov    0x2c(%esp),%eax
		call   ac_remove_path
		mov    0x2c(%esp),%eax
		testb  $0x20,0xd(%eax)
		je     jump_59d21
		mov    0x2c(%esp),%edx
		xor    %eax,%eax
		mov    0xa(%edx),%ax
		cmp    $0x2b,%eax
		jne    jump_59d21
		mov    0x2c(%esp),%eax
		xor    %edx,%edx
		mov    0x3c(%eax),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		mov    0x54(%edx,%eax,8),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		lea    0x0(,%eax,4),%edx
		mov    0x2c(%esp),%eax
		mov    0x54(%eax),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(follow_dist)(%edx,%eax,1),%al
		mov    0x2c(%esp),%edx
		mov    %al,0x5b(%edx)
	jump_59d21:
		mov    0x10(%esp),%eax
		testb  $0x2,0xc(%eax)
		je     jump_59dff
		cmpl   $0x0,0x20(%esp)
		jne    jump_59dc1
		cmpb   $0x0,in_network_game
		je     jump_59da6
		mov    0x4a(%eax),%dx
		test   %dx,%dx
		je     jump_59da6
		je     jump_59da6
		mov    0x48(%eax),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %eax,%edx
		mov    things,%eax
		shl    $0x3,%edx
		add    %edx,%eax
		testb  $0x20,0xd(%eax)
		je     jump_59da6
		mov    0x54(%eax),%ax
		mov    %eax,%edx
		and    $0xffff,%edx
		sar    $0x2,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		add    $mission_status,%eax
		lea    0x10(%eax),%edx
		mov    0x2c(%esp),%ebx
		xor    %eax,%eax
		mov    0x54(%ebx),%ax
		sar    $0x2,%eax
		incw   (%edx,%eax,2)
	jump_59da6:
		mov    $0xa,%edx
		mov    0x2c(%esp),%eax
		call   ac_set_person_dead
		xor    %dl,%dl
		mov    %dl,%al
		add    $0x34,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_59dc1:
		mov    0x2c(%esp),%eax
		subw   $0x320,0x3a(%eax)
		mov    0x38(%eax),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jg     jump_59df0
		mov    $0xa,%edx
		mov    0x2c(%esp),%eax
		call   ac_set_person_dead
		xor    %dl,%dl
		mov    %dl,%al
		add    $0x34,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_59df0:
		mov    0x2c(%esp),%eax
		testb  $0x20,0xd(%eax)
		jne    jump_59dff
		call   ac_person_go_sleep
	jump_59dff:
		xor    %dl,%dl
	jump_59e01:
		mov    %dl,%al
		add    $0x34,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_find_nth_weapon_held)	/* 0x059E0C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		mov    %eax,%ebx
		mov    %dl,%ch
		xor    %esi,%esi
		xor    %edx,%edx
		mov    %bx,%si
		xor    %eax,%eax
		cmp    $0x3e8,%esi
		jle    jump_59e2a
		xor    %dl,%al
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_59e2a:
		test   %bx,%bx
		jne    jump_59e35
		xor    %dl,%al
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_59e35:
		lea    0x0(,%esi,4),%ebx
		add    %esi,%ebx
		shl    $0x2,%ebx
		add    %esi,%ebx
		mov    things,%esi
		shl    $0x3,%ebx
		add    %ebx,%esi
		xor    %ebx,%ebx
		mov    0xa(%esi),%bx
		cmp    $0x24,%ebx
		je     jump_59e91
		testb  $0x2,0xc(%esi)
		jne    jump_59e91
		mov    0xa4(%esi),%esi
		and    $0xffbfffff,%esi
	jump_59e6b:
		xor    %ebx,%ebx
		mov    %ch,%bl
		cmp    %ebx,%edx
		jge    jump_59e89
		cmp    $0x20,%eax
		jge    jump_59e89
		mov    $0x1,%ebx
		mov    %al,%cl
		shl    %cl,%ebx
		test   %ebx,%esi
		je     jump_59e86
		inc    %edx
	jump_59e86:
		inc    %eax
		jmp    jump_59e6b
	jump_59e89:
		xor    %ebx,%ebx
		mov    %ch,%bl
		cmp    %ebx,%edx
		je     jump_59e93
	jump_59e91:
		xor    %al,%al
	jump_59e93:
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_select_new_weapon)	/* 0x059E98 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		mov    %edx,%esi
		xor    %ecx,%ecx
		mov    %ax,%cx
		lea    0x0(,%ecx,4),%ebx
		add    %ecx,%ebx
		shl    $0x2,%ebx
		add    %ecx,%ebx
		mov    things,%ebp
		shl    $0x3,%ebx
		add    %ebx,%ebp
		mov    0x44(%ebp),%ah
		xor    %edx,%edx
		test   $0x1,%ah
		je     jump_59ece
		mov    %ebp,%eax
		call   ac_finalise_razor_wire
	jump_59ece:
		xor    %eax,%eax
		mov    0x99(%ebp),%al
		add    %esi,%eax
		movswl %ax,%ebx
		test   %ebx,%ebx
		jge    jump_59ee4
		mov    $0x20,%eax
	jump_59ee4:
		movswl %ax,%ebx
		cmp    $0x1,%ebx
		jl     jump_59ef1
		cmp    $0x20,%ebx
		jle    jump_59ef5
	jump_59ef1:
		xor    %al,%al
		jmp    jump_59f40
	jump_59ef5:
		mov    0xa4(%ebp),%edi
		and    $0xffbfffff,%edi
	jump_59f01:
		movswl %ax,%ecx
		mov    $0x1,%ebx
		dec    %ecx
		shl    %cl,%ebx
		test   %ebx,%edi
		jne    jump_59f32
		movswl %dx,%ebx
		cmp    $0x20,%ebx
		jge    jump_59f32
		add    %esi,%eax
		movswl %ax,%ebx
		cmp    $0x1,%ebx
		jl     jump_59f27
		cmp    $0x20,%ebx
		jle    jump_59f2f
	jump_59f27:
		xor    %al,%al
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_59f2f:
		inc    %edx
		jmp    jump_59f01
	jump_59f32:
		movswl %dx,%ebx
		cmp    $0x20,%ebx
		jl     jump_59f40
		mov    0x99(%ebp),%al
	jump_59f40:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_call_unprotect)	/* 0x059F48 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		mov    EXPORT_SYMBOL(playable_agents),%ch
		mov    %eax,%edi
		mov    %edx,%esi
		mov    %bl,%cl
		xor    %eax,%eax
		mov    %bl,%al
		cmp    $0x2,%eax
		jne    jump_59f87
		xor    %eax,%eax
		mov    0xa(%edi),%ax
		cmp    $0x2b,%eax
		jne    jump_59ff4
		mov    %edi,%eax
		movw   $0x0,0xa(%edi)
		call   ac_remove_path
		movw   $0xffff,0x66(%edi)
		jmp    jump_59ff4
	jump_59f87:
		xor    %edx,%edx
		jmp    jump_59f8c
	jump_59f8b:
		inc    %edx
	jump_59f8c:
		xor    %eax,%eax
		xor    %ebx,%ebx
		mov    %dx,%ax
		mov    %ch,%bl
		cmp    %ebx,%eax
		jge    jump_59fc6
		xor    %ebx,%ebx
		mov    %si,%bx
		imul   $0x1aa,%ebx,%ebx
		mov    EXPORT_SYMBOL(players)+0x09C(%ebx,%eax,4),%eax # players[0].MyAgent[0]
		xor    %ebx,%ebx
		mov    0xa(%eax),%bx
		cmp    $0x2b,%ebx
		jne    jump_59f8b
		testb  $0x2,0xc(%eax)
		jne    jump_59f8b
		mov    $0x1,%cl
		movw   $0x0,0xa(%eax)
		jmp    jump_59f8b
	jump_59fc6:
		xor    %eax,%eax
		mov    %cl,%al
		mov    %ch,EXPORT_SYMBOL(playable_agents)
		test   %eax,%eax
		jne    jump_59ff4
		xor    %ebx,%ebx
		mov    %si,%bx
		mov    %edi,%eax
		mov    %ebx,%edx
		call   ac_call_protect
		mov    %ebx,%edx
		mov    %edi,%eax
		call   ac_call_protect
		mov    %ebx,%edx
		mov    %edi,%eax
		call   ac_call_protect
	jump_59ff4:
		mov    EXPORT_SYMBOL(playable_agents),%ch
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_make_peep_protect_peep)	/* 0x05A000 */
/*----------------------------------------------------------------*/
		push   %ebx
		movw   $0x2b,0xa(%eax)
		movw   $0xffff,0x66(%eax)
		mov    0x16(%edx),%bx
		mov    %bx,0x48(%eax)
		mov    %bx,0x3c(%eax)
		mov    0x54(%edx),%dx
		xor    %dh,%dh
		xor    %ebx,%ebx
		and    $0x3,%dl
		mov    %dx,%bx
		mov    0x54(%eax),%dx
		xor    %dh,%dh
		and    $0x3,%dl
		and    $0xffff,%edx
		mov    EXPORT_SYMBOL(follow_dist)(%edx,%ebx,4),%dl
		movw   $0x32,0x68(%eax)
		movw   $0x32,0x6a(%eax)
		movw   $0x30,0x28(%eax)
		movw   $0x30,0x2a(%eax)
		mov    %dl,0x5b(%eax)
		mov    0x47(%eax),%dl
		mov    %bh,0x3f(%eax)
		and    $0xf7,%dl
		mov    %dl,0x47(%eax)
		call   ac_remove_path
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_call_protect)	/* 0x05A06C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x10,%esp
		mov    %eax,%ebx
		mov    %edx,0xc(%esp)
		movl   $0x7fffffff,(%esp)
		xor    %edx,%edx
		mov    0xf(%eax),%ah
		mov    %dx,0x4(%esp)
		mov    %edx,0x8(%esp)
		test   $0x10,%ah
		je     jump_5a09c
		mov    0x5e(%ebx),%ax
		mov    %eax,0x8(%esp)
	jump_5a09c:
		xor    %ecx,%ecx
		jmp    jump_5a0a1
	jump_5a0a0:
		inc    %ecx
	jump_5a0a1:
		xor    %edx,%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(playable_agents),%dl
		mov    %cx,%ax
		cmp    %edx,%eax
		jge    jump_5a148
		xor    %edx,%edx
		mov    0xc(%esp),%dx
		imul   $0x1aa,%edx,%edx
		mov    0x8(%esp),%edi
		mov    EXPORT_SYMBOL(players)+0x09C(%edx,%eax,4),%eax # players[0].MyAgent[0]
		test   %di,%di
		je     jump_5a0df
		testb  $0x10,0xf(%eax)
		je     jump_5a0df
		cmp    0x5e(%eax),%di
		jne    jump_5a0a0
	jump_5a0df:
		cmp    %ebx,%eax
		je     jump_5a0a0
		testb  $0x10,0x47(%eax)
		jne    jump_5a0a0
		testb  $0x2,0xc(%eax)
		jne    jump_5a0a0
		xor    %edx,%edx
		mov    0xa(%eax),%dx
		cmp    $0x2b,%edx
		je     jump_5a0a0
		cmp    $0x24,%edx
		je     jump_5a0a0
		cmp    $0xc,%edx
		je     jump_5a0a0
		mov    0x18(%eax),%edi
		sub    0x18(%ebx),%edi
		sar    $0x8,%edi
		imul   %edi,%edi
		mov    0x1c(%ebx),%ebp
		mov    0x1c(%eax),%esi
		sub    %ebp,%esi
		sar    $0x8,%esi
		imul   %esi,%esi
		mov    0x20(%eax),%edx
		sub    0x20(%ebx),%edx
		sar    $0x8,%edx
		imul   %edx,%edx
		add    %edi,%esi
		add    %esi,%edx
		cmp    (%esp),%edx
		jge    jump_5a0a0
		mov    0x16(%eax),%ax
		mov    %edx,(%esp)
		mov    %ax,0x4(%esp)
		jmp    jump_5a0a0
	jump_5a148:
		cmpw   $0x0,0x4(%esp)
		je     jump_5a176
		mov    0x2(%esp),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %eax,%edx
		mov    things,%eax
		shl    $0x3,%edx
		add    %edx,%eax
		mov    %ebx,%edx
		call   ac_make_peep_protect_peep
	jump_5a176:
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_call_protect_specific)	/* 0x05A180 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    %eax,%ebx
		mov    %edx,%eax
		testb  $0x10,0xf(%ebx)
		je     jump_5a19f
		testb  $0x10,0xf(%eax)
		je     jump_5a19f
		mov    0x5e(%eax),%dx
		cmp    0x5e(%ebx),%dx
		jne    jump_5a214
	jump_5a19f:
		testb  $0x2,0xc(%eax)
		jne    jump_5a214
		xor    %edx,%edx
		mov    0xa(%eax),%dx
		cmp    $0x24,%edx
		je     jump_5a214
		cmp    $0xc,%edx
		je     jump_5a214
		movw   $0x2b,0xa(%eax)
		movw   $0xffff,0x66(%eax)
		mov    0x16(%ebx),%dx
		mov    %dx,0x48(%eax)
		mov    %dx,0x3c(%eax)
		mov    0x54(%ebx),%dx
		xor    %dh,%dh
		xor    %ebx,%ebx
		and    $0x3,%dl
		mov    %dx,%bx
		mov    0x54(%eax),%dx
		xor    %dh,%dh
		and    $0x3,%dl
		and    $0xffff,%edx
		mov    EXPORT_SYMBOL(follow_dist)(%edx,%ebx,4),%dl
		movw   $0x32,0x68(%eax)
		movw   $0x32,0x6a(%eax)
		movw   $0x30,0x28(%eax)
		movw   $0x30,0x2a(%eax)
		mov    %dl,0x5b(%eax)
		mov    %bh,0x3f(%eax)
		call   ac_remove_path
	jump_5a214:
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_count_protect)	/* 0x05A218 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		mov    %eax,%esi
		mov    %edx,%edi
		xor    %ebx,%ebx
		xor    %edx,%edx
		jmp    jump_5a227
	jump_5a226:
		inc    %edx
	jump_5a227:
		xor    %ecx,%ecx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(playable_agents),%cl
		mov    %dx,%ax
		cmp    %ecx,%eax
		jge    jump_5a262
		xor    %ecx,%ecx
		mov    %di,%cx
		imul   $0x1aa,%ecx,%ecx
		mov    EXPORT_SYMBOL(players)+0x09C(%ecx,%eax,4),%eax # players[0].MyAgent[0]
		cmp    %esi,%eax
		je     jump_5a226
		xor    %ecx,%ecx
		mov    0xa(%eax),%cx
		cmp    $0x2b,%ecx
		jne    jump_5a226
		testb  $0x2,0xc(%eax)
		jne    jump_5a226
		inc    %ebx
		jmp    jump_5a226
	jump_5a262:
		mov    %ebx,%eax
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
person_go_insane:	/* 0x05A26C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		mov    %eax,%ebx
		testb  $0x2,0xc(%eax)
		jne    jump_5a2bb
		mov    0x44(%ebx),%dl
		test   $0x8,%dl
		jne    jump_5a2bb
		mov    %dl,%dh
		mov    %ebx,%eax
		mov    0x51(%ebx),%cl
		or     $0x8,%dh
		add    $0x80,%cl
		mov    %dh,0x44(%ebx)
		mov    $0x3,%edx
		mov    %cl,0x51(%ebx)
		call   ac_choose_best_weapon_for_range
		movw   $0x400,0x38(%ebx)
		movw   $0x5,0x68(%ebx)
		movw   $0x0,0x8e(%ebx)
		movw   $0x5,0x6a(%ebx)
		movb   $0x96,0x5d(%ebx)
	jump_5a2bb:
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_go_sleep)	/* 0x05A2C0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		xor    %edx,%edx
		mov    0xa(%eax),%dx
		cmp    $0x24,%edx
		je     jump_5a38d
		mov    0xc(%eax),%bl
		test   $0x2,%bl
		jne    jump_5a38d
		cmp    $0xc,%edx
		je     jump_5a38d
		testb  $0x10,0x44(%eax)
		jne    jump_5a389
		mov    %bl,%cl
		xor    %ebx,%ebx
		mov    0x8(%eax),%bl
		lea    0x0(,%ebx,4),%edx
		sub    %ebx,%edx
		shl    $0x2,%edx
		or     $0x1,%cl
		sub    %ebx,%edx
		mov    %cl,0xc(%eax)
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(people_frames)+0x16(,%edx,4),%bx
		xor    %edx,%edx
		mov    0x57(%eax),%dl
		add    %edx,%ebx
		mov    nstart_ani,%edx
		mov    (%edx,%ebx,2),%dx
		xor    %ebx,%ebx
		mov    0x8(%eax),%bl
		mov    %dx,0x24(%eax)
		lea    0x0(,%ebx,4),%edx
		sub    %ebx,%edx
		shl    $0x2,%edx
		sub    %ebx,%edx
		mov    EXPORT_SYMBOL(people_frames)+0x16(,%edx,4),%dx
		dec    %edx
		mov    %dx,0x26(%eax)
		xor    %edx,%edx
		mov    0x6c(%eax),%dl
		cmp    $0x10,%edx
		je     jump_5a358
		mov    %dl,0x6d(%eax)
	jump_5a358:
		movb   $0x0,0x7d(%eax)
		movb   $0xb,0x6c(%eax)
		movw   $0x30,0x28(%eax)
		movw   $0x30,0x2a(%eax)
		mov    0xc(%eax),%edx
		mov    0x44(%eax),%ch
		movb   $0x96,0x5d(%eax)
		and    $0xfffef7ff,%edx
		or     $0x10,%ch
		mov    %edx,0xc(%eax)
		mov    %ch,0x44(%eax)
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_5a389:
		movb   $0x96,0x5d(%eax)
	jump_5a38d:
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
find_nearest_person_min:	/* 0x05A3D8 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x10,%esp
		mov    %eax,0x8(%esp)
		mov    %ebx,(%esp)
		mov    %ecx,0x4(%esp)
		mov    $0xffffffff,%ebp
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(same_type_head)+2,%si
		mov    %edx,0xc(%esp)
		test   %si,%si
		je     jump_5a4bd
	jump_5a404:
		movswl %si,%eax
		imul   $0xa8,%eax,%eax
		mov    things,%ebx
		add    %eax,%ebx
		mov    0x51(%ebx),%cl
		mov    $0x1,%eax
		and    $0x1f,%cl
		mov    0x28(%esp),%edx
		shl    %cl,%eax
		test   %edx,%eax
		je     jump_5a4b0
		testb  $0x20,0x44(%ebx)
		jne    jump_5a4b0
		testb  $0x2,0xc(%ebx)
		jne    jump_5a4b0
		mov    0x8(%esp),%edi
		mov    0x18(%ebx),%ecx
		mov    (%esp),%eax
		sar    $0x8,%ecx
		mov    0x22(%esp),%edx
		sub    %edi,%ecx
		mov    0x20(%ebx),%edi
		sar    $0x10,%edx
		sar    $0x8,%edi
		sub    %eax,%edi
		xor    %al,%al
		test   %edx,%edx
		jl     jump_5a494
		mov    %edi,%edx
		mov    %ecx,%eax
		neg    %edx
		call   ac_arctan
		mov    0x24(%esp),%edx
		sub    %eax,%edx
		mov    %edx,%eax
		add    $0x8,%ah
		and    $0x7,%ah
		cwtl
		cmp    $0xc8,%eax
		jle    jump_5a492
		cmp    $0x737,%eax
		jge    jump_5a492
		mov    $0x1,%al
		jmp    jump_5a494
	jump_5a492:
		xor    %al,%al
	jump_5a494:
		test   %al,%al
		jne    jump_5a4b0
		imul   %ecx,%ecx
		imul   %edi,%edi
		add    %edi,%ecx
		cmp    %ebp,%ecx
		jae    jump_5a4b0
		cmp    0x4(%esp),%ecx
		jbe    jump_5a4b0
		mov    %ecx,%ebp
		mov    %esi,0xc(%esp)
	jump_5a4b0:
		mov    0x10(%ebx),%si
		test   %si,%si
		jne    jump_5a404
	jump_5a4bd:
		mov    0x20(%esp),%eax
		mov    %ebp,(%eax)
		mov    0xc(%esp),%eax
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0xc


/*----------------------------------------------------------------*/
init_electricity_bomb:	/* 0x05A4D0 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		mov    %eax,%ebp
		mov    %edx,%esi
		mov    %ebx,%edi
		mov    %ecx,0x4(%esp)
		xor    %edx,%edx
		mov    %edx,(%esp)
		xor    %edx,%edx
		mov    %edx,0x8(%esp)
		jmp    jump_5a4f1
	jump_5a4ed:
		incl   0x8(%esp)
	jump_5a4f1:
		xor    %eax,%eax
		mov    0x8(%esp),%ax
		cmp    $0x4,%eax
		jge    jump_5a54c
		push   $0xffffffff
		lea    0x4(%esp),%eax
		push   $0xffffffff
		mov    0x8(%esp),%ecx
		mov    %edi,%ebx
		push   %eax
		mov    %esi,%edx
		mov    %ebp,%eax
		call   find_nearest_person_min
		cmpl   $0x2fa000,(%esp)
		jge    jump_5a4ed
		test   %ax,%ax
		je     jump_5a4ed
		xor    %ecx,%ecx
		mov    0x4(%esp),%cx
		push   %ecx
		xor    %ecx,%ecx
		mov    %ax,%cx
		imul   $0xa8,%ecx,%ecx
		mov    %edi,%ebx
		mov    %esi,%edx
		mov    things,%eax
		push   $0x4
		add    %eax,%ecx
		mov    %ebp,%eax
		call   create_growing_e_strand
		jmp    jump_5a4ed
	jump_5a54c:
		push   $0x0
		mov    $0xfffffd44,%ecx
		mov    %edi,%ebx
		push   $0x1
		mov    %esi,%edx
		mov    %ebp,%eax
		call   do_shockwave
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_player_change_person)	/* 0x05A568 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    %eax,%esi
		mov    %edx,(%esp)
		movswl %ax,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		mov    things,%ecx
		add    %edx,%eax
		xor    %edx,%edx
		shl    $0x3,%eax
		mov    (%esp),%dx
		lea    (%ecx,%eax,1),%ebx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(players)+0x088(%eax),%edx # players[0].DirectControl[0]
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		andb   $0xef,0xd(%ecx,%eax,8)
		testb  $0x10,0x47(%ebx)
		je     jump_5a61c
		mov    0x3c(%ebx),%ax
		xor    %edx,%edx
		mov    %ax,%dx
		mov    %ax,0x48(%ebx)
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		movw   $0x2b,0xa(%ebx)
		mov    0x54(%ecx,%eax,8),%ax
		xor    %ah,%ah
		xor    %edx,%edx
		and    $0x3,%al
		mov    %ax,%dx
		mov    0x54(%ebx),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		mov    0x47(%ebx),%cl
		mov    EXPORT_SYMBOL(follow_dist)(%eax,%edx,4),%al
		and    $0xef,%cl
		mov    %al,0x5b(%ebx)
		mov    %cl,0x47(%ebx)
	jump_5a61c:
		xor    %edx,%edx
		mov    (%esp),%dx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		movswl %si,%ecx
		mov    %ecx,EXPORT_SYMBOL(players)+0x088(%eax) # players[0].DirectControl[0]
		mov    0xd(%ebx),%ch
		movw   $0x0,0x8e(%ebx)
		xor    %eax,%eax
		or     $0x10,%ch
		mov    0xa(%ebx),%ax
		mov    %ch,0xd(%ebx)
		cmp    $0x2b,%eax
		jne    jump_5a731
		mov    0x46(%ebx),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %eax,%edx
		mov    things,%eax
		shl    $0x3,%edx
		add    %edx,%eax
		testl  $0x40000002,0xc(%eax)
		jne    jump_5a69c
		xor    %edx,%edx
		mov    0xa(%eax),%dx
		cmp    $0x2b,%edx
		je     jump_5a69c
		mov    %ebx,%edx
		call   ac_make_peep_protect_peep
	jump_5a69c:
		xor    %edx,%edx
		xor    %esi,%esi
		jmp    jump_5a6a6
	jump_5a6a2:
		add    $0x4,%esi
		inc    %edx
	jump_5a6a6:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(playable_agents),%al
		cmp    %eax,%edx
		jge    jump_5a71f
		xor    %eax,%eax
		mov    (%esp),%ax
		imul   $0x1aa,%eax,%eax
		mov    EXPORT_SYMBOL(players)+0x09C(%esi,%eax,1),%eax # players[0].MyAgent[0]
		cmp    %ebx,%eax
		je     jump_5a6a2
		xor    %ecx,%ecx
		mov    0xa(%eax),%cx
		cmp    $0x2b,%ecx
		jne    jump_5a6a2
		mov    0x48(%eax),%cx
		cmp    0x48(%ebx),%cx
		jne    jump_5a6a2
		mov    0x54(%ebx),%cx
		xor    %ch,%ch
		and    $0x3,%cl
		and    $0xffff,%ecx
		lea    0x0(,%ecx,4),%edi
		mov    0x54(%eax),%cx
		xor    %ch,%ch
		and    $0x3,%cl
		and    $0xffff,%ecx
		mov    EXPORT_SYMBOL(follow_dist)(%ecx,%edi,1),%cl
		mov    %cl,0x5b(%eax)
		mov    0x16(%ebx),%cx
		mov    %cx,0x48(%eax)
		mov    %cx,0x3c(%eax)
		call   ac_remove_path
		jmp    jump_5a6a2
	jump_5a71f:
		movw   $0x0,0xa(%ebx)
		movw   $0x0,0x3c(%ebx)
		movw   $0x0,0x48(%ebx)
	jump_5a731:
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_thing_select_specific_weapon)	/* 0x05A73C */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    %eax,%esi
		mov    %dx,(%esp)
		testb  $0x2,0xc(%eax)
		jne    jump_5a9fa
		xor    %eax,%eax
		mov    %dx,%ax
		cmp    $0x10,%eax
		jne    jump_5a796
		xor    %eax,%eax
		mov    current_map,%ax
		cmp    $0x41,%eax
		jne    jump_5a796
		push   $0x3
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x81,%edx
		mov    %esi,%eax
		call   ac_play_dist_sample
		mov    $0x1,%eax
		movb   $0x0,0x99(%esi)
		jmp    jump_5a9fc
	jump_5a796:
		testb  $0x1,0x44(%esi)
		je     jump_5a7a3
		mov    %esi,%eax
		call   ac_finalise_razor_wire
	jump_5a7a3:
		xor    %edx,%edx
		mov    %esi,%eax
		mov    0x99(%esi),%dl
		call   ac_stop_looped_weapon_sample
		xor    %eax,%eax
		mov    (%esp),%ax
		mov    $0x1,%edx
		lea    -0x1(%eax),%ecx
		shl    %cl,%edx
		test   %edx,0xa4(%esi)
		je     jump_5a9fa
		cmp    $0x1b,%eax
		jne    jump_5a7f3
		mov    0xa7(%esi),%bh
		mov    0x7e(%esi),%ax
		and    $0xfb,%bh
		mov    %ax,0x3a(%esi)
		xor    %eax,%eax
		mov    %bh,0xa7(%esi)
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_5a7f3:
		xor    %edx,%edx
		mov    0x99(%esi),%dl
		cmp    %eax,%edx
		je     jump_5a808
		cmp    $0x1,%ebx
		jne    jump_5a90a
	jump_5a808:
		cmp    $0x2,%ebx
		je     jump_5a90a
		testb  $0x20,0xd(%esi)
		je     jump_5a858
		testb  $0x8,0x45(%esi)
		jne    jump_5a858
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		sar    $0x2,%eax
		mov    %eax,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		add    %edx,%eax
		mov    0x99(%esi),%dl
		mov    %dl,data_1a638c(%eax)
	jump_5a858:
		xor    %edx,%edx
		mov    0x8(%esi),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		add    %eax,%eax
		add    %edx,%eax
		movb   $0x0,0x99(%esi)
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    0x57(%esi),%al
		mov    nstart_ani,%ebx
		add    %edx,%eax
		mov    0x24(%esi),%cx
		xor    %edx,%edx
		mov    (%ebx,%eax,2),%ax
		mov    0x8(%esi),%dl
		sub    %eax,%ecx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		movb   $0x0,0x6c(%esi)
		sub    %edx,%eax
		xor    %edx,%edx
		mov    0x6c(%esi),%dl
		add    %edx,%edx
		mov    %cx,0x24(%esi)
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,4),%ax
		xor    %edx,%edx
		and    $0xffff,%eax
		mov    0x57(%esi),%dl
		add    %edx,%eax
		mov    0x24(%esi),%di
		xor    %edx,%edx
		mov    (%ebx,%eax,2),%ax
		mov    0x8(%esi),%dl
		add    %eax,%edi
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		mov    %di,0x24(%esi)
		jmp    jump_5a9ca
	jump_5a90a:
		xor    %edx,%edx
		mov    (%esp),%al
		mov    0x8(%esi),%dl
		mov    %al,0x99(%esi)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		xor    %edx,%edx
		mov    0x6c(%esi),%dl
		shl    $0x2,%eax
		add    %edx,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    0x57(%esi),%al
		add    %edx,%eax
		lea    0x0(,%eax,2),%edx
		mov    nstart_ani,%eax
		mov    (%edx,%eax,1),%ax
		mov    0x24(%esi),%dx
		sub    %eax,%edx
		mov    %esi,%eax
		mov    %dx,0x24(%esi)
		xor    %edx,%edx
		call   ac_gun_out_anim
		xor    %edx,%edx
		mov    0x8(%esi),%dl
		mov    %al,0x6c(%esi)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		xor    %edx,%edx
		mov    0x6c(%esi),%dl
		shl    $0x2,%eax
		add    %edx,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    0x57(%esi),%al
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		xor    %edx,%edx
		mov    0x24(%esi),%bx
		mov    0x8(%esi),%dl
		add    %eax,%ebx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		mov    %bx,0x24(%esi)
	jump_5a9ca:
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		dec    %eax
		mov    %ax,0x26(%esi)
		mov    %esi,%eax
		call   calc_person_speed
		mov    %ax,0x38(%esi)
		xor    %eax,%eax
		mov    0x99(%esi),%al
		test   %eax,%eax
		jne    jump_5a9fa
		mov    $0x1,%eax
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_5a9fa:
		xor    %eax,%eax
	jump_5a9fc:
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret

vtable_5aa04:
		.long   func_5ac26
		.long   func_5ac26
		.long   func_5ac26
		.long   func_5ac57
		.long   func_5ac57
		.long   func_5ac76
		.long   func_5ac76
		.long   func_5ac76
		.long   func_5ac26
		.long   func_5ac57
		.long   func_5ac57
		.long   func_5ac26
		.long   func_5ac57
		.long   func_5ac57


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_hit_by_car)	/* 0x05AA3C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    %eax,%esi
		mov    %edx,%edi
		mov    0x18(%eax),%eax
		sub    0x18(%edx),%eax
		sar    $0x8,%eax
		mov    0x20(%edi),%ebx
		mov    %ax,0x4(%esp)
		mov    0x20(%esi),%eax
		mov    %edi,%ecx
		sub    %ebx,%eax
		mov    0x2c(%edi),%edx
		sar    $0x8,%eax
		mov    0x34(%edi),%ebx
		mov    %ax,(%esp)
		mov    %esi,%eax
		call   person_poke
		mov    0x4(%esp),%edx
		mov    0x34(%edi),%ax
		mov    (%esp),%ebx
		add    %eax,%edx
		mov    0x2c(%edi),%ax
		sub    %eax,%ebx
		mov    %bx,(%esp)
		mov    %dx,0x4(%esp)
		mov    -0x2(%esp),%edx
		mov    0x2(%esp),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		neg    %edx
		call   ac_arctan
		movswl %ax,%edx
		movb   $0x9,0x7d(%esi)
		add    $0x4,%ah
		sar    $0x3,%edx
		and    $0x7,%ah
		mov    %edx,%ebx
		mov    %eax,%edx
		mov    %bl,0x98(%esi)
		sar    $0x8,%dx
		mov    0xe(%esi),%ah
		mov    %dl,0x57(%esi)
		test   $0x1,%ah
		jne    jump_5aadb
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		cmp    $0x10,%eax
		je     jump_5aadb
		mov    %al,0x6d(%esi)
	jump_5aadb:
		xor    %edx,%edx
		mov    0x8(%esi),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		movb   $0x10,0x6c(%esi)
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%dx
		xor    %eax,%eax
		and    $0xffff,%edx
		mov    0x57(%esi),%al
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		xor    %edx,%edx
		mov    0x8(%esi),%dl
		mov    %ax,0x24(%esi)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		mov    0x82(%esi),%cx
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		sub    $0x23,%ecx
		dec    %eax
		mov    %cx,0x82(%esi)
		mov    %ax,0x26(%esi)
		mov    0xe(%esi),%dl
		mov    0x80(%esi),%eax
		or     $0x1,%dl
		sar    $0x10,%eax
		mov    %dl,0xe(%esi)
		test   %eax,%eax
		jg     jump_5ad41
		testb  $0x20,0xd(%esi)
		je     jump_5ad27
		subw   $0xc8,0x3a(%esi)
		mov    0x38(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jg     jump_5ad4e
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0xc,%eax
		je     jump_5ad4e
		cmp    $0xd,%eax
		je     jump_5ad4e
		cmpb   $0x0,in_network_game
		jne    jump_5abd1
		mov    EXPORT_SYMBOL(open_brief)-2,%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		movzbl data_19984e(,%eax,8),%ebp
	jump_5abd1:
		mov    $0xa,%edx
		mov    %esi,%eax
		call   ac_set_person_dead
		cmpb   $0x0,in_network_game
		jne    jump_5acaf
		mov    0x5e(%edi),%dx
		test   %dx,%dx
		je     jump_5ad4e
		xor    %eax,%eax
		mov    %dx,%ax
		lea    0x0(,%eax,4),%edi
		add    %eax,%edi
		shl    $0x2,%edi
		add    %eax,%edi
		mov    things,%eax
		xor    %edx,%edx
		mov    0x51(%eax,%edi,8),%dl
		mov    ingame__TrainMode,%eax
		sar    $0x10,%eax
		cmp    %eax,%edx
		je     jump_5ac95
		jmp    jump_5ad4e


/*----------------------------------------------------------------*/
func_5ac26:
/*----------------------------------------------------------------*/
		mov    EXPORT_SYMBOL(open_brief)-2,%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		xor    %edx,%edx
		mov    data_19984e(%eax),%dl
		cmp    %edx,%ebp
		jne    jump_5ad4e
		incw   data_199840(%eax)
		jmp    jump_5ad4e


/*----------------------------------------------------------------*/
func_5ac57:
/*----------------------------------------------------------------*/
		mov    EXPORT_SYMBOL(open_brief)-2,%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		incw   data_199838(,%eax,8)
		jmp    jump_5ad4e


/*----------------------------------------------------------------*/
func_5ac76:
/*----------------------------------------------------------------*/
		mov    EXPORT_SYMBOL(open_brief)-2,%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		incw   data_19983c(,%eax,8)
		jmp    jump_5ad4e
	jump_5ac95:
		mov    0x8(%esi),%al
		dec    %al
		cmp    $0xd,%al
		ja     jump_5ad4e
		and    $0xff,%eax
		jmp    *%cs:vtable_5aa04(,%eax,4)
	jump_5acaf:
		mov    0x5e(%edi),%ax
		test   %ax,%ax
		je     jump_5ad4e
		mov    %eax,%edi
		and    $0xffff,%edi
		lea    0x0(,%edi,4),%edx
		add    %edi,%edx
		shl    $0x2,%edx
		add    %edi,%edx
		mov    things,%eax
		shl    $0x3,%edx
		add    %edx,%eax
		testb  $0x20,0xd(%eax)
		je     jump_5ad4e
		testb  $0x20,0xd(%esi)
		je     jump_5ad4e
		mov    0x54(%eax),%ax
		mov    %eax,%edx
		and    $0xffff,%edx
		sar    $0x2,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		xor    %edx,%edx
		shl    $0x3,%eax
		mov    0x54(%esi),%dx
		add    $mission_status,%eax
		sar    $0x2,%edx
		mov    0x10(%eax,%edx,2),%bx
		add    $0x10,%eax
		inc    %ebx
		mov    %bx,(%eax,%edx,2)
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_5ad27:
		xor    %eax,%eax
		mov    0x8(%esi),%al
		cmp    $0x7,%eax
		je     jump_5ad4e
		mov    %esi,%eax
		call   ac_person_go_sleep
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_5ad41:
		testb  $0x40,0xa6(%esi)
		je     jump_5ad4e
		orb    $0x20,0xe(%esi)
	jump_5ad4e:
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_self_destruct)	/* 0x05AD58 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    %eax,%esi
		testw  $0x4002,0xc(%eax)
		jne    jump_5aeee
		cmpb   $0x0,in_network_game
		je     jump_5ad91
		mov    0x70(%esi),%ax
		shl    $0x7,%eax
		shr    $0xd,%ax
		and    $0xffff,%eax
		cmp    $0x3,%eax
		jl     jump_5aeee
	jump_5ad91:
		mov    0x70(%esi),%ax
		shl    $0x7,%eax
		shr    $0xd,%ax
		and    $0xffff,%eax
		cmp    $0x1,%eax
		jl     jump_5aeee
		cmpb   $0x0,in_network_game
		je     jump_5addb
		testb  $0x20,0xd(%esi)
		je     jump_5addb
		xor    %edx,%edx
		mov    0x54(%esi),%dx
		sar    $0x2,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		add    $mission_status,%eax
		lea    0x10(%eax),%ebx
		addw   $0x3,(%ebx,%edx,2)
	jump_5addb:
		testb  $0x10,0xf(%esi)
		je     jump_5ae4f
		mov    %esi,%eax
		mov    0x5e(%esi),%bx
		call   yank_from_vehicle
		testb  $0x2,0xc(%esi)
		jne    jump_5ae09
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0xd,%eax
		je     jump_5ae09
		mov    $0xc,%edx
		mov    %esi,%eax
		call   ac_set_person_dead
	jump_5ae09:
		movswl %bx,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		mov    0xf(%esi),%ch
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		or     $0x2,%ch
		add    %edx,%eax
		mov    %ch,0xf(%esi)
		xor    %edx,%edx
		mov    0xa(%eax),%dx
		cmp    $0xd,%edx
		je     jump_5aeee
		mov    0x16(%esi),%dx
		mov    %dx,0x4a(%eax)
		call   ac_start_crashing
		jmp    jump_5aeee
	jump_5ae4f:
		mov    0x18(%esi),%ebp
		mov    0x1c(%esi),%eax
		mov    0x20(%esi),%edi
		xor    %ecx,%ecx
		sar    $0x8,%eax
		sar    $0x8,%ebp
		add    $0xa,%eax
		sar    $0x8,%edi
		mov    %eax,(%esp)
		mov    0x70(%esi),%ax
		mov    %edi,%ebx
		shl    $0x7,%eax
		shl    $0x8,%ebx
		shr    $0xd,%ax
		mov    (%esp),%edx
		mov    %ax,%cx
		mov    %ebp,%eax
		shl    $0x8,%edx
		shl    $0x8,%eax
		cmp    $0x2,%ecx
		jne    jump_5ae93
		mov    $0x14,%ecx
		jmp    jump_5ae9d
	jump_5ae93:
		cmp    $0x3,%ecx
		jne    jump_5aea2
		mov    $0xa,%ecx
	jump_5ae9d:
		call   ASM_bang_new4
	jump_5aea2:
		mov    (%esp),%edx
		mov    %edi,%ebx
		mov    %ebp,%eax
		call   init_nuclear_bomb
		mov    %eax,%edi
		test   %eax,%eax
		je     jump_5aeee
		push   $0x3
		push   $0x0
		mov    $0x40,%ecx
		push   $0x64
		mov    $0x7f,%ebx
		mov    $0x25,%edx
		call   ac_play_dist_ssample
		mov    0x3c(%esi),%ax
		movw   $0x13,0x28(%edi)
		mov    $0x12,%edx
		mov    %ax,0x38(%edi)
		mov    %esi,%eax
		movw   $0xfffb,0x14(%edi)
		call   ac_set_person_dead
	jump_5aeee:
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
	jump_5aef4:
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_shield_toggle)	/* 0x05AEF8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		testb  $0x1,0xd(%eax)
		je     jump_5af0a
		andl   $0xffdffeff,0xc(%eax)
		pop    %ecx
		pop    %ebx
		ret
	jump_5af0a:
		orl    $0x200100,0xc(%eax)
		xor    %eax,%eax
		and    $0xffff,%edx
		mov    EXPORT_SYMBOL(local_player_no),%al
		cmp    %eax,%edx
		jne    jump_5af3e
		push   $0x3
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x60,%edx
		xor    %eax,%eax
		call   ac_play_sample_using_heap
	jump_5af3e:
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_make_peeps_scatter)	/* 0x05AF6C */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x40,%esp
		mov    %eax,0x24(%esp)
		mov    %edx,0x28(%esp)
		mov    %ebx,0x30(%esp)
		mov    0x28(%esp),%eax
		mov    $0x100,%edx
		sar    $0x8,%eax
		mov    %edx,0x2c(%esp)
		test   %eax,%eax
		jl     jump_5b2f2
		cmp    $0x80,%eax
		jge    jump_5b2f2
		mov    %ebx,%eax
		sar    $0x8,%eax
		test   %eax,%eax
		jl     jump_5b2f2
		cmp    $0x80,%eax
		jge    jump_5b2f2
		mov    0x24(%esp),%edx
		xor    %eax,%eax
		mov    0x54(%edx),%ax
		mov    $0x10,%ebx
		sar    $0x2,%eax
		mov    $0x7f,%edx
		mov    %eax,%edi
		lea    0x10(%esp),%eax
		call   ac_memset
		mov    $0x10,%ebx
		mov    %esp,%eax
		xor    %edx,%edx
		mov    0x24(%esp),%ecx
		call   ac_memset
		xor    %eax,%eax
		jmp    jump_5aff3
	jump_5aff2:
		inc    %eax
	jump_5aff3:
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(playable_agents),%bl
		mov    %ax,%dx
		cmp    %ebx,%edx
		jge    jump_5b06e
		xor    %ebx,%ebx
		mov    %di,%bx
		imul   $0x1aa,%ebx,%ebx
		mov    EXPORT_SYMBOL(players)+0x09C(%ebx,%edx,4),%edx # players[0].MyAgent[0]
		xor    %ebx,%ebx
		mov    0xa(%edx),%bx
		cmp    $0x2b,%ebx
		jne    jump_5b031
		mov    0x46(%edx),%ebx
		xor    %edx,%edx
		sar    $0x10,%ebx
		mov    0x16(%ecx),%dx
		cmp    %edx,%ebx
		je     jump_5b04e
	jump_5b031:
		xor    %edx,%edx
		mov    %di,%dx
		imul   $0x1aa,%edx,%ebx
		xor    %edx,%edx
		mov    %ax,%dx
		mov    EXPORT_SYMBOL(players)+0x09C(%ebx,%edx,4),%edx # players[0].MyAgent[0]
		testb  $0x10,0xd(%edx)
		je     jump_5aff2
	jump_5b04e:
		xor    %edx,%edx
		mov    %di,%dx
		imul   $0x1aa,%edx,%ebx
		xor    %edx,%edx
		mov    %ax,%dx
		mov    EXPORT_SYMBOL(players)+0x09C(%ebx,%edx,4),%edx # players[0].MyAgent[0]
		andb   $0xfb,0x80(%edx)
		jmp    jump_5aff2
	jump_5b06e:
		xor    %eax,%edx
		mov    %edx,0x38(%esp)
		jmp    jump_5b2df
	jump_5b079:
		sar    %ecx
	jump_5b07b:
		add    %ecx,%eax
		xor    %ecx,%ecx
		mov    0x38(%esp),%cx
		shl    $0x2,%ecx
		cmp    0x10(%esp,%ecx,1),%eax
		jge    jump_5b09a
		mov    %eax,0x10(%esp,%ecx,1)
		xor    %eax,%eax
		mov    %bx,%ax
		inc    %eax
		mov    %eax,(%esp,%ecx,1)
	jump_5b09a:
		inc    %ebx
	jump_5b09b:
		xor    %ecx,%ecx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(playable_agents),%cl
		mov    %bx,%ax
		cmp    %ecx,%eax
		jge    jump_5b18c
		xor    %ecx,%ecx
		mov    %di,%cx
		imul   $0x1aa,%ecx,%ecx
		mov    EXPORT_SYMBOL(players)+0x09C(%ecx,%eax,4),%eax # players[0].MyAgent[0]
		testl  $0x40000002,0xc(%eax)
		jne    jump_5b09a
		xor    %ecx,%ecx
		mov    0xa(%eax),%cx
		cmp    $0x2b,%ecx
		jne    jump_5b0ea
		mov    0x24(%esp),%edx
		mov    0x46(%eax),%ecx
		xor    %eax,%eax
		sar    $0x10,%ecx
		mov    0x16(%edx),%ax
		cmp    %eax,%ecx
		je     jump_5b107
	jump_5b0ea:
		xor    %eax,%eax
		mov    %di,%ax
		imul   $0x1aa,%eax,%ecx
		xor    %eax,%eax
		mov    %bx,%ax
		mov    EXPORT_SYMBOL(players)+0x09C(%ecx,%eax,4),%eax # players[0].MyAgent[0]
		testb  $0x10,0xd(%eax)
		je     jump_5b09a
	jump_5b107:
		xor    %eax,%eax
		mov    %di,%ax
		imul   $0x1aa,%eax,%eax
		xor    %ecx,%ecx
		mov    %bx,%cx
		mov    EXPORT_SYMBOL(players)+0x09C(%eax,%ecx,4),%esi # players[0].MyAgent[0]
		testb  $0x4,0x80(%esi)
		jne    jump_5b09a
		movzwl 0x38(%esp),%ebp
		shl    $0xb,%ebp
		mov    0x2c(%esp),%edx
		mov    EXPORT_SYMBOL(lbSinTable)+2048(%ebp),%eax
		imul   %edx,%eax
		mov    0x28(%esp),%ecx
		sar    $0x10,%eax
		add    %ecx,%eax
		mov    0x18(%esi),%ecx
		sar    $0x8,%ecx
		sub    %eax,%ecx
		mov    %ecx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ecx
		mov    EXPORT_SYMBOL(lbSinTable)(%ebp),%eax
		imul   0x2c(%esp),%eax
		mov    0x30(%esp),%edx
		mov    0x20(%esi),%esi
		sar    $0x10,%eax
		sar    $0x8,%esi
		add    %edx,%eax
		sub    %eax,%esi
		mov    %esi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%ecx
		jle    jump_5b079
		sar    %eax
		jmp    jump_5b07b
	jump_5b18c:
		xor    %esi,%esi
		mov    0x38(%esp),%si
		lea    0x0(,%esi,4),%ebx
		mov    (%esp,%ebx,1),%ecx
		test   %ecx,%ecx
		je     jump_5b2db
		xor    %edx,%edx
		mov    %di,%dx
		mov    %edx,0x34(%esp)
		imul   $0x1aa,%edx,%edx
		lea    0x0(,%ecx,4),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(players)+0x098(%eax),%ebp # players[0].ControlPad
		shl    $0xb,%esi
		mov    %edx,0x20(%esp)
		movw   $0x5,0xa(%ebp)
		mov    $0x50,%edx
		mov    0x80(%ebp),%cl
		movb   $0x0,0x5b(%ebp)
		or     $0x4,%cl
		mov    %ebp,%eax
		mov    %cl,0x80(%ebp)
		call   ac_limit_mood
		mov    %ax,0x72(%ebp)
		mov    0x2c(%esp),%ecx
		mov    EXPORT_SYMBOL(lbSinTable)(%esi),%eax
		imul   %ecx,%eax
		mov    0x30(%esp),%edx
		sar    $0x10,%eax
		add    %edx,%eax
		mov    0x2c(%esp),%edx
		movswl %ax,%ecx
		mov    EXPORT_SYMBOL(lbSinTable)+2048(%esi),%eax
		imul   %edx,%eax
		mov    0x28(%esp),%edx
		sar    $0x10,%eax
		add    %edx,%eax
		cwtl
		mov    %ecx,%edx
		call   ac_alt_at_point
		sar    $0x8,%eax
		mov    %eax,%edx
		mov    EXPORT_SYMBOL(lbSinTable)+2048(%esi),%eax
		imul   0x2c(%esp),%eax
		mov    0x28(%esp),%esi
		sar    $0x10,%eax
		add    %esi,%eax
		mov    0x20(%esp),%esi
		mov    %ax,0x3c(%esp)
		mov    (%esp,%ebx,1),%eax
		mov    EXPORT_SYMBOL(players)+0x098(%esi,%eax,4),%esi # players[0].ControlPad
		testl  $0x40000003,0xc(%esi)
		jne    jump_5b297
		andl   $0xfff5ffbf,0x44(%esi)
		movswl %dx,%ebx
		mov    0x46(%esi),%al
		mov    0x3a(%esp),%edx
		or     $0x8,%al
		sar    $0x10,%edx
		mov    %al,0x46(%esi)
		mov    %esi,%eax
		call   ac_thing_goto_point
		testb  $0x40,0x44(%esi)
		jne    jump_5b297
		mov    %esi,%eax
		mov    0x34(%esp),%edx
		call   ac_set_person_animmode_run
		mov    %esi,%eax
		call   set_player_peeps_to_run
	jump_5b297:
		xor    %ah,%ah
		mov    0x99(%ebp),%al
		cmp    $0xf,%ax
		jb     jump_5b2bd
		jbe    jump_5b2b5
		cmp    $0x11,%ax
		jb     jump_5b2b9
		jbe    jump_5b2b5
		cmp    $0x14,%ax
		jne    jump_5b2b9
	jump_5b2b5:
		xor    %al,%al
		jmp    jump_5b2cb
	jump_5b2b9:
		mov    $0x1,%al
		jmp    jump_5b2cb
	jump_5b2bd:
		cmp    $0x2,%ax
		jb     jump_5b2b9
		cmp    $0x6,%ax
		jbe    jump_5b2b5
		jmp    jump_5b2b9
	jump_5b2cb:
		test   %al,%al
		je     jump_5b2db
		mov    $0x500,%edx
		mov    %ebp,%eax
		call   ac_choose_best_weapon_for_range
	jump_5b2db:
		incl   0x38(%esp)
	jump_5b2df:
		xor    %eax,%eax
		mov    0x38(%esp),%ax
		cmp    $0x4,%eax
		jge    jump_5b2f2
		xor    %ebx,%ebx
		jmp    jump_5b09b
	jump_5b2f2:
		add    $0x40,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_kill_my_players)	/* 0x05B2FC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		mov    %eax,%ecx
		xor    %ebx,%ebx
		jmp    jump_5b330
	jump_5b305:
		mov    $0xc,%edx
		call   ac_set_person_dead
	jump_5b30f:
		xor    %edx,%edx
		mov    %cx,%dx
		imul   $0x1aa,%edx,%edx
		xor    %eax,%eax
		mov    %bx,%ax
		mov    EXPORT_SYMBOL(players)+0x09C(%edx,%eax,4),%eax # players[0].MyAgent[0]
		mov    0xd(%eax),%dl
		and    $0xcf,%dl
		inc    %ebx
		mov    %dl,0xd(%eax)
	jump_5b330:
		xor    %eax,%eax
		mov    %bx,%ax
		cmp    $0x4,%eax
		jge    jump_5aef4
		xor    %edx,%edx
		mov    %cx,%dx
		imul   $0x1aa,%edx,%edx
		mov    EXPORT_SYMBOL(players)+0x09C(%edx,%eax,4),%eax # players[0].MyAgent[0]
		testb  $0x2,0xc(%eax)
		jne    jump_5b30f
		testb  $0x10,0xf(%eax)
		je     jump_5b305
		call   ac_person_self_destruct
		jmp    jump_5b30f


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_unused_func_115)	/* 0x5B440 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		mov    %eax,0x4(%esp)
		mov    %edx,%ebp
		mov    %ecx,%esi
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(current_map),%ax
		cmp    $0xb,%eax
		jne    jump_5b465
		mov    $0x1,%eax
		jmp    jump_5b591
	jump_5b465:
		mov    %edx,%eax
		sar    $0x8,%eax
		mov    0x4(%esp),%edx
		shl    $0x7,%eax
		sar    $0x8,%edx
		add    %eax,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		testb  $0x5,0xf(%edx,%eax,2)
		je     jump_5b4ab
		mov    %esi,%eax
		mov    %ebx,%ecx
		sar    $0x8,%eax
		sar    $0x8,%ecx
		shl    $0x7,%eax
		add    %eax,%ecx
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		testb  $0x5,0xf(%edx,%eax,2)
		jne    jump_5b4b7
	jump_5b4ab:
		mov    $0x1,%eax
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_5b4b7:
		mov    0x4(%esp),%edx
		mov    %ebx,%ecx
		sub    %edx,%ecx
		sub    %ebp,%esi
		mov    %ecx,%eax
		or     %esi,%eax
		je     jump_5b591
		mov    %esi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebx
		mov    %ecx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %ebx,%edi
		mov    %eax,%edx
		sar    $0x7,%edi
		sar    $0x7,%edx
		mov    %edi,(%esp)
		cmp    %ebx,%eax
		jge    jump_5b509
		mov    %ebx,%edi
		sar    $0x5,%edi
		sub    %edi,%ebx
		sub    (%esp),%ebx
		mov    %eax,%edi
		sar    $0x2,%edi
		add    %ebx,%edi
		mov    %eax,%ebx
		sar    $0x3,%ebx
		sar    $0x6,%eax
		add    %edi,%ebx
		jmp    jump_5b528
	jump_5b509:
		mov    %eax,%edi
		sar    $0x5,%edi
		sub    %edi,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		mov    %ebx,%eax
		sar    $0x2,%eax
		add    %eax,%edx
		mov    %ebx,%eax
		sar    $0x3,%eax
		sar    $0x6,%ebx
		add    %edx,%eax
		mov    (%esp),%edx
	jump_5b528:
		add    %ebx,%eax
		add    %eax,%edx
		mov    %edx,%ebx
		sar    $0x4,%ebx
		test   %ebx,%ebx
		je     jump_5b58f
		mov    %ecx,%edx
		mov    %ecx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,0x8(%esp)
		mov    %esi,%edx
		mov    %esi,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,%edi
		mov    %ebp,%edx
		mov    0x4(%esp),%eax
		mov    0x8(%esp),%ebp
		jmp    jump_5b55d
	jump_5b559:
		add    %ebp,%eax
		add    %edi,%edx
	jump_5b55d:
		mov    %ebx,%ecx
		dec    %ebx
		test   %ecx,%ecx
		jl     jump_5b58f
		mov    %edx,%ecx
		mov    %eax,%esi
		sar    $0x8,%ecx
		sar    $0x8,%esi
		shl    $0x7,%ecx
		add    %esi,%ecx
		imul   $0x12,%ecx,%ecx
		mov    EXPORT_SYMBOL(game_my_big_map),%esi
		testb  $0x5,0xf(%ecx,%esi,1)
		jne    jump_5b559
		mov    $0x1,%eax
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_5b58f:
		xor    %eax,%eax
	jump_5b591:
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
do_shockwave:	/* 0x05B598 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xb4,%esp
		mov    0xc4(%esp),%edi
		mov    %eax,0xa4(%esp)
		mov    %edx,0x6c(%esp)
		mov    %ebx,0xa8(%esp)
		mov    %ecx,%ebp
		xor    %ah,%ah
		mov    %ah,0xb0(%esp)
		test   %ecx,%ecx
		jge    jump_5b5d4
		mov    $0x1,%dl
		neg    %ebp
		mov    %dl,0xb0(%esp)
	jump_5b5d4:
		mov    %ebp,%eax
		sar    $0x8,%eax
		cmp    $0x1,%eax
		jge    jump_5b5e3
		mov    $0x1,%eax
	jump_5b5e3:
		mov    0xa8(%esp),%ebx
		mov    0xa4(%esp),%edx
		sar    $0x8,%ebx
		mov    %eax,0x7c(%esp)
		mov    %ebx,0x74(%esp)
		mov    %eax,%ebx
		mov    %eax,0x78(%esp)
		neg    %ebx
		sar    $0x8,%edx
		mov    %ebx,0x78(%esp)
		cmp    %ebx,%eax
		jl     jump_5bbd2
		add    %edx,%ebx
		add    %eax,%edx
		mov    %ebx,0x64(%esp)
		mov    %edx,0x70(%esp)
	jump_5b61f:
		mov    0x7c(%esp),%eax
		mov    %eax,%ebx
		mov    %eax,0x84(%esp)
		neg    %ebx
		mov    %ebx,0x84(%esp)
		cmp    %eax,%ebx
		jle    jump_5b659
	jump_5b639:
		mov    0x64(%esp),%esi
		mov    0x78(%esp),%eax
		mov    0x70(%esp),%edx
		inc    %esi
		inc    %eax
		mov    %esi,0x64(%esp)
		mov    %eax,0x78(%esp)
		cmp    %edx,%esi
		jg     jump_5bbd2
		jmp    jump_5b61f
	jump_5b659:
		mov    0x64(%esp),%eax
		mov    %eax,0x88(%esp)
		mov    %ebx,%eax
		mov    0x74(%esp),%ebx
		add    %ebx,%eax
		mov    0x7c(%esp),%ecx
		mov    %eax,0x8c(%esp)
		lea    (%ebx,%ecx,1),%eax
		mov    %eax,0x80(%esp)
	jump_5b681:
		mov    0x88(%esp),%esi
		test   %esi,%esi
		jle    jump_5bba0
		cmp    $0x80,%esi
		jge    jump_5bba0
		mov    0x8c(%esp),%edx
		test   %edx,%edx
		jle    jump_5bba0
		cmp    $0x80,%edx
		jge    jump_5bba0
		mov    %edx,%eax
		shl    $0x7,%eax
		add    %esi,%eax
		imul   $0x12,%eax,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%esi
		mov    0xb0(%esp),%dh
		add    %eax,%esi
		test   %dh,%dh
		jne    jump_5b76f
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		imul   $0x6,%eax,%eax
		mov    game_col_vects_list,%edx
		mov    0x2(%edx,%eax,1),%eax
		sar    $0x10,%eax
		mov    %eax,0xac(%esp)
		test   %eax,%eax
		jle    jump_5b76f
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x9(%eax),%dl
		cmp    $0x9,%edx
		jne    jump_5b72c
		mov    0xc8(%esp),%ecx
		mov    %eax,%ebx
		mov    %edi,%edx
		mov    $0x200,%eax
		call   do_shockwave_building
		jmp    jump_5b76f
	jump_5b72c:
		cmpl   $0x3e8,0xac(%esp)
		jge    jump_5b74c
		mov    0xaa(%esp),%edx
		mov    %esi,%eax
		sar    $0x10,%edx
		call   del_thing_vectors_from_mapwho
		jmp    jump_5b76f
	jump_5b74c:
		xor    %ebx,%ebx
		mov    0x8(%eax),%bl
		push   %ebx
		mov    0xa(%eax),%ax
		and    $0xffff,%eax
		push   %eax
		push   %edx
		push   $aStrangeThingOw
		lea    0x10(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0x14,%esp
	jump_5b76f:
		mov    0x6(%esi),%eax
		sar    $0x10,%eax
		mov    %eax,0xac(%esp)
		test   %eax,%eax
		je     jump_5bba0
	jump_5b784:
		mov    0xac(%esp),%eax
		test   %eax,%eax
		jle    jump_5ba1d
		imul   $0xa8,%eax,%esi
		mov    things,%eax
		mov    0xb0(%esp),%cl
		add    %eax,%esi
		test   %cl,%cl
		jne    jump_5ba16
		xor    %eax,%eax
		mov    0x9(%esi),%al
		cmp    $0x3,%eax
		jne    jump_5b870
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0x24,%eax
		je     jump_5b870
		testb  $0x2,0xc(%esi)
		jne    jump_5b870
		mov    0x1c(%esi),%eax
		mov    0x6c(%esp),%edx
		sar    $0x8,%eax
		sub    %edx,%eax
		cmp    $0x55,%eax
		jge    jump_5b870
		cmp    $0xffffffab,%eax
		jle    jump_5b870
		mov    0x18(%esi),%eax
		mov    0xa4(%esp),%ebx
		sar    $0x8,%eax
		sub    %ebx,%eax
		mov    %eax,0x90(%esp)
		mov    0x20(%esi),%eax
		mov    0xa8(%esp),%ecx
		sar    $0x8,%eax
		sub    %ecx,%eax
		mov    %eax,0x94(%esp)
		mov    0x90(%esp),%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebx
		mov    0x94(%esp),%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%ebx
		jle    jump_5b842
		sar    %eax
		jmp    jump_5b844
	jump_5b842:
		sar    %ebx
	jump_5b844:
		add    %eax,%ebx
		xor    %eax,%eax
		mov    0x14(%esi),%ax
		add    %ebp,%eax
		cmp    %eax,%ebx
		jge    jump_5b870
		mov    0xc8(%esp),%eax
		push   %eax
		mov    0x98(%esp),%edx
		push   %esi
		mov    %edi,%ecx
		mov    0x98(%esp),%eax
		call   do_shockwave_person
	jump_5b870:
		xor    %eax,%eax
		mov    0x9(%esi),%al
		cmp    $0x2,%eax
		je     jump_5b891
		cmp    $0x9,%eax
		jne    jump_5b935
		xor    %eax,%eax
		mov    0x8(%esi),%al
		cmp    $0x20,%eax
		jne    jump_5b935
	jump_5b891:
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0xd,%eax
		je     jump_5b935
		mov    0x1c(%esi),%eax
		mov    0x6c(%esp),%edx
		sar    $0x8,%eax
		sub    %edx,%eax
		cmp    $0xb9,%eax
		jge    jump_5b935
		cmp    $0xffffff33,%eax
		jle    jump_5b935
		mov    0x18(%esi),%eax
		mov    0xa4(%esp),%ebx
		sar    $0x8,%eax
		sub    %ebx,%eax
		mov    %eax,0x98(%esp)
		mov    0x20(%esi),%eax
		mov    0xa8(%esp),%ecx
		sar    $0x8,%eax
		sub    %ecx,%eax
		mov    %eax,0x68(%esp)
		mov    0x98(%esp),%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebx
		mov    0x68(%esp),%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%ebx
		jle    jump_5b90a
		sar    %eax
		jmp    jump_5b90c
	jump_5b90a:
		sar    %ebx
	jump_5b90c:
		add    %eax,%ebx
		xor    %eax,%eax
		mov    0x14(%esi),%ax
		add    %ebp,%eax
		cmp    %eax,%ebx
		jge    jump_5b935
		mov    0xc8(%esp),%eax
		push   %eax
		mov    0x6c(%esp),%edx
		push   %esi
		mov    %edi,%ecx
		mov    0xa0(%esp),%eax
		call   do_shockwave_vehicle
	jump_5b935:
		xor    %eax,%eax
		mov    0x9(%esi),%al
		cmp    $0xf,%eax
		jne    jump_5ba16
		xor    %eax,%eax
		mov    0x8(%esi),%al
		cmp    $0x30,%eax
		jne    jump_5ba16
		testb  $0x2,0xc(%esi)
		jne    jump_5ba16
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0xd,%eax
		je     jump_5ba16
		mov    0xa4(%esp),%edx
		mov    0x18(%esi),%eax
		mov    0xa8(%esp),%ebx
		sar    $0x8,%eax
		mov    0x20(%esi),%ecx
		sub    %edx,%eax
		sar    $0x8,%ecx
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		sub    %ebx,%ecx
		mov    %eax,%ebx
		mov    %ecx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%ebx
		jle    jump_5b99e
		sar    %eax
		jmp    jump_5b9a0
	jump_5b99e:
		sar    %ebx
	jump_5b9a0:
		add    %ebx,%eax
		mov    %ebp,%edx
		sub    %eax,%edx
		imul   %edi,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebp
		test   %eax,%eax
		jle    jump_5ba16
		sub    %di,0x3a(%esi)
		mov    0x38(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jg     jump_5ba16
		push   $0x3
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x25,%edx
		mov    %esi,%eax
		call   ac_play_dist_sample
		mov    $0x14,%ecx
		mov    0x20(%esi),%ebx
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		call   ASM_bang_new4
		mov    0xc(%esi),%ah
		movw   $0xd,0xa(%esi)
		or     $0x2,%ah
		mov    %ah,0xc(%esi)
		mov    nstart_ani,%eax
		movw   $0x42d,0x26(%esi)
		mov    0x85a(%eax),%ax
		mov    %ax,0x24(%esi)
	jump_5ba16:
		mov    (%esi),%eax
		jmp    jump_5bb88
	jump_5ba1d:
		imul   $0x3c,%eax,%esi
		mov    EXPORT_SYMBOL(sthings),%eax
		add    %eax,%esi
		xor    %eax,%eax
		mov    0x9(%esi),%al
		cmp    $0x15,%eax
		jne    jump_5badb
		cmpb   $0x0,0xb0(%esp)
		jne    jump_5badb
		mov    0x1c(%esi),%eax
		mov    0x6c(%esp),%ebx
		sar    $0x8,%eax
		sub    %ebx,%eax
		cmp    $0xb9,%eax
		jge    jump_5badb
		cmp    $0xffffff33,%eax
		jle    jump_5badb
		mov    0x18(%esi),%eax
		mov    0xa4(%esp),%ecx
		sar    $0x8,%eax
		sub    %ecx,%eax
		mov    %eax,0xa0(%esp)
		mov    0x20(%esi),%eax
		mov    0xa8(%esp),%edx
		sar    $0x8,%eax
		sub    %edx,%eax
		mov    %eax,0x9c(%esp)
		mov    0xa0(%esp),%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebx
		mov    0x9c(%esp),%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%ebx
		jle    jump_5bab3
		sar    %eax
		jmp    jump_5bab5
	jump_5bab3:
		sar    %ebx
	jump_5bab5:
		add    %eax,%ebx
		xor    %eax,%eax
		mov    0x14(%esi),%ax
		add    %ebp,%eax
		cmp    %eax,%ebx
		jge    jump_5badb
		push   $0x0
		mov    0xa0(%esp),%edx
		push   %esi
		mov    0xa8(%esp),%eax
		mov    %edi,%ecx
		call   do_shockwave_scale_effect
	jump_5badb:
		xor    %eax,%eax
		mov    0x9(%esi),%al
		cmp    $0x19,%eax
		jne    jump_5baef
		xor    %eax,%eax
		mov    0x8(%esi),%al
		cmp    $0xd,%eax
		je     jump_5bafd
	jump_5baef:
		xor    %eax,%eax
		mov    0x8(%esi),%al
		cmp    $0xc,%eax
		jne    jump_5bb77
	jump_5bafd:
		mov    0x1c(%esi),%eax
		mov    0x6c(%esp),%ebx
		sar    $0x8,%eax
		sub    %ebx,%eax
		cmp    $0xb9,%eax
		jge    jump_5bb77
		cmp    $0xffffff33,%eax
		jle    jump_5bb77
		mov    0x18(%esi),%eax
		mov    0xa4(%esp),%ecx
		sar    $0x8,%eax
		sub    %ecx,%eax
		mov    0x20(%esi),%ecx
		mov    0xa8(%esp),%edx
		sar    $0x8,%ecx
		sub    %edx,%ecx
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebx
		mov    %ecx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%ebx
		jle    jump_5bb4b
		sar    %eax
		jmp    jump_5bb4d
	jump_5bb4b:
		sar    %ebx
	jump_5bb4d:
		add    %ebx,%eax
		xor    %edx,%edx
		mov    0x14(%esi),%dx
		add    %ebp,%edx
		cmp    %edx,%eax
		jge    jump_5bb77
		mov    0xe(%esi),%bh
		mov    0x26(%esi),%eax
		or     $0x4,%bh
		sar    $0x10,%eax
		mov    %bh,0xe(%esi)
		cmp    $0x3e7,%eax
		jne    jump_5bb77
		movw   $0x8c,0x28(%esi)
	jump_5bb77:
		imul   $0x3c,0xac(%esp),%eax
		mov    EXPORT_SYMBOL(sthings),%edx
		mov    (%edx,%eax,1),%eax
	jump_5bb88:
		sar    $0x10,%eax
		mov    %eax,0xac(%esp)
		cmpl   $0x0,0xac(%esp)
		jne    jump_5b784
	jump_5bba0:
		mov    0x8c(%esp),%esi
		mov    0x84(%esp),%eax
		mov    0x80(%esp),%edx
		inc    %esi
		inc    %eax
		mov    %esi,0x8c(%esp)
		mov    %eax,0x84(%esp)
		cmp    %edx,%esi
		jg     jump_5b639
		jmp    jump_5b681
	jump_5bbd2:
		add    $0xb4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x8


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_check_for_radius_hit_person)	/* 0x05BBE0 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x30,%esp
		mov    %eax,%esi
		mov    %edx,0x14(%esp)
		mov    %ebx,%ebp
		mov    0x48(%esp),%edx
		sar    $0x10,%eax
		mov    %ax,0x1c(%esp)
		mov    %ebx,%eax
		mov    $0xffffffff,%ebx
		sar    $0x10,%eax
		mov    %bx,0x18(%esp)
		mov    %ecx,%ebx
		mov    %ax,0x20(%esp)
		imul   %ecx,%ebx
		jmp    jump_5bc1a
	jump_5bc15:
		incw   0x18(%esp)
	jump_5bc1a:
		mov    0x16(%esp),%eax
		sar    $0x10,%eax
		cmp    $0x2,%eax
		jge    jump_5c048
		movw   $0xffff,0x2c(%esp)
		jmp    jump_5bfb9
	jump_5bc36:
		movw   $0x63,0x24(%esp)
	jump_5bc3d:
		xor    %ecx,%ecx
		mov    0x24(%esp),%edi
		mov    0x51(%eax),%cl
		cmp    %di,%cx
		jne    jump_5bc5b
		mov    0x22(%esp),%edi
		sar    $0x10,%edi
		cmp    $0x64,%edi
		jl     jump_5bec9
	jump_5bc5b:
		mov    0x24(%esp),%edi
		and    $0x7f,%edi
		mov    %di,0x28(%esp)
		mov    0x26(%esp),%edi
		sar    $0x10,%edi
		imul   $0x28,%edi,%edi
		xor    %ch,%ch
		and    $0x7f,%cl
		movswl %cx,%ecx
		mov    %edi,0xc(%esp)
		mov    $0x1,%edi
		shl    %cl,%edi
		mov    0xc(%esp),%ecx
		mov    war_flags__Truce(%ecx),%ecx
		test   %edi,%ecx
		jne    jump_5bd17
		xor    %ecx,%ecx
		mov    0x9(%eax),%cl
		cmp    $0x3,%ecx
		jne    jump_5bd17
		cmp    0x40(%esp),%eax
		je     jump_5bd17
		xor    %ecx,%ecx
		mov    0xa(%eax),%cx
		cmp    $0xd,%ecx
		je     jump_5bd17
		cmp    $0x24,%ecx
		je     jump_5bd17
		testb  $0x2,0xc(%eax)
		jne    jump_5bd17
		mov    0x14(%esp),%edi
		mov    0x1c(%eax),%ecx
		sub    %edi,%ecx
		sar    $0x8,%ecx
		cmp    $0x19,%ecx
		jge    jump_5bd17
		cmp    $0xffffffe7,%ecx
		jle    jump_5bd17
		mov    0x18(%eax),%ecx
		sub    %esi,%ecx
		sar    $0x8,%ecx
		mov    %ecx,(%esp)
		mov    (%esp),%edi
		imul   %edi,%edi
		mov    0x20(%eax),%ecx
		sub    %ebp,%ecx
		sar    $0x8,%ecx
		imul   %ecx,%ecx
		add    %ecx,%edi
		xor    %ecx,%ecx
		mov    0x14(%eax),%cx
		imul   %ecx,%ecx
		add    %ebx,%ecx
		mov    %edi,0x8(%esp)
		cmp    %edi,%ecx
		jle    jump_5bd17
		dec    %edx
		movswl %dx,%ecx
		test   %ecx,%ecx
		jl     jump_5c04a
	jump_5bd17:
		dec    %edx
		movswl %dx,%ecx
		test   %ecx,%ecx
		jge    jump_5bdca
		cmpb   $0x0,0x44(%esp)
		je     jump_5bdca
		xor    %ecx,%ecx
		mov    0x9(%eax),%cl
		cmp    $0x2,%ecx
		jne    jump_5bdca
		xor    %ecx,%ecx
		mov    0xa(%eax),%cx
		cmp    $0xd,%ecx
		je     jump_5bdca
		mov    0x40(%esp),%ecx
		mov    0x5c(%ecx),%ecx
		sar    $0x10,%ecx
		mov    %ecx,0xc(%esp)
		xor    %ecx,%ecx
		mov    0xc(%esp),%edi
		mov    0x16(%eax),%cx
		cmp    %edi,%ecx
		je     jump_5bdca
		mov    0x14(%esp),%edi
		mov    0x1c(%eax),%ecx
		sub    %edi,%ecx
		sar    $0x8,%ecx
		cmp    $0x19,%ecx
		jge    jump_5bdca
		cmp    $0xffffff97,%ecx
		jle    jump_5bdca
		mov    0x18(%eax),%ecx
		sub    %esi,%ecx
		sar    $0x8,%ecx
		mov    %ecx,(%esp)
		mov    0x20(%eax),%ecx
		sub    %ebp,%ecx
		sar    $0x8,%ecx
		mov    %ecx,0x4(%esp)
		mov    (%esp),%ecx
		imul   %ecx,%ecx
		mov    %ecx,0xc(%esp)
		mov    0x4(%esp),%ecx
		imul   %ecx,%ecx
		mov    0xc(%esp),%edi
		add    %ecx,%edi
		xor    %ecx,%ecx
		mov    0x14(%eax),%cx
		imul   %ecx,%ecx
		add    %ebx,%ecx
		mov    %edi,0x8(%esp)
		cmp    %edi,%ecx
		jle    jump_5bdca
		dec    %edx
		movswl %dx,%ecx
		test   %ecx,%ecx
		jl     jump_5c04a
	jump_5bdca:
		cmpb   $0x0,0x44(%esp)
		je     jump_5be42
		xor    %ecx,%ecx
		mov    0x9(%eax),%cl
		cmp    $0x9,%ecx
		jne    jump_5be42
		xor    %ecx,%ecx
		mov    0x8(%eax),%cl
		cmp    $0x20,%ecx
		jne    jump_5be42
		testb  $0x2,0xc(%eax)
		jne    jump_5be42
		mov    0x14(%esp),%edi
		mov    0x1c(%eax),%ecx
		sub    %edi,%ecx
		sar    $0x8,%ecx
		cmp    $0x19,%ecx
		jge    jump_5be42
		cmp    $0xffffff97,%ecx
		jle    jump_5be42
		mov    0x18(%eax),%ecx
		sub    %esi,%ecx
		sar    $0x8,%ecx
		mov    %ecx,(%esp)
		mov    (%esp),%edi
		imul   %edi,%edi
		mov    0x20(%eax),%ecx
		sub    %ebp,%ecx
		sar    $0x8,%ecx
		imul   %ecx,%ecx
		add    %ecx,%edi
		xor    %ecx,%ecx
		mov    0x14(%eax),%cx
		imul   %ecx,%ecx
		add    %ebx,%ecx
		mov    %edi,0x8(%esp)
		cmp    %edi,%ecx
		jle    jump_5be42
		dec    %edx
		movswl %dx,%ecx
		test   %ecx,%ecx
		jl     jump_5c04a
	jump_5be42:
		cmpb   $0x0,0x44(%esp)
		je     jump_5bec9
		xor    %ecx,%ecx
		mov    0x9(%eax),%cl
		cmp    $0xf,%ecx
		jne    jump_5bec9
		xor    %ecx,%ecx
		mov    0x8(%eax),%cl
		cmp    $0x30,%ecx
		jne    jump_5bec9
		testb  $0x2,0xc(%eax)
		jne    jump_5bec9
		xor    %ecx,%ecx
		mov    0xa(%eax),%cx
		cmp    $0xd,%ecx
		je     jump_5bec9
		mov    0x14(%esp),%edi
		mov    0x1c(%eax),%ecx
		sub    %edi,%ecx
		sar    $0x8,%ecx
		cmp    $0x19,%ecx
		jge    jump_5bec9
		cmp    $0xffffffe7,%ecx
		jle    jump_5bec9
		mov    0x18(%eax),%ecx
		sub    %esi,%ecx
		sar    $0x8,%ecx
		mov    %ecx,(%esp)
		mov    (%esp),%edi
		imul   %edi,%edi
		mov    0x20(%eax),%ecx
		sub    %ebp,%ecx
		sar    $0x8,%ecx
		imul   %ecx,%ecx
		add    %ecx,%edi
		xor    %ecx,%ecx
		mov    0x14(%eax),%cx
		imul   %ecx,%ecx
		add    %ebx,%ecx
		mov    %edi,0x8(%esp)
		cmp    %edi,%ecx
		jle    jump_5bec9
		dec    %edx
		movswl %dx,%ecx
		test   %ecx,%ecx
		jl     jump_5c04a
	jump_5bec9:
		mov    0x2(%eax),%cx
		jmp    jump_5bfaf
	jump_5bed2:
		imul   $0x3c,%eax,%eax
		mov    EXPORT_SYMBOL(sthings),%edi
		add    %edi,%eax
		movzbl 0x9(%eax),%edi
		cmp    $0x5,%edi
		jne    jump_5bf9e
		testb  $0x2,0xc(%eax)
		jne    jump_5bf9e
		xor    %edi,%edi
		mov    0x24(%eax),%di
		cmp    $0x3f0,%edi
		je     jump_5bf9e
		mov    0x1c(%eax),%edi
		sub    0x14(%esp),%edi
		sar    $0x8,%edi
		cmp    $0x19,%edi
		jge    jump_5bf9e
		cmp    $0xffffffe7,%edi
		jle    jump_5bf9e
		mov    0x18(%eax),%edi
		sub    %esi,%edi
		sar    $0x8,%edi
		mov    %edi,(%esp)
		mov    0x20(%eax),%edi
		sub    %ebp,%edi
		sar    $0x8,%edi
		mov    %edi,0x4(%esp)
		mov    (%esp),%edi
		imul   %edi,%edi
		mov    %edi,0xc(%esp)
		mov    0x4(%esp),%edi
		imul   %edi,%edi
		mov    %edi,0x10(%esp)
		mov    0xc(%esp),%edi
		add    0x10(%esp),%edi
		mov    %edi,0x8(%esp)
		xor    %edi,%edi
		mov    0x14(%eax),%di
		imul   %edi,%edi
		add    %ebx,%edi
		mov    %edi,0x10(%esp)
		mov    0x8(%esp),%edi
		cmp    0x10(%esp),%edi
		jge    jump_5bf9e
		dec    %edx
		movswl %dx,%edi
		test   %edi,%edi
		jge    jump_5bf9e
		xor    %edi,%edi
		mov    0x26(%eax),%di
		cmp    $0x3ec,%edi
		jle    jump_5c04a
		cmp    $0x3f0,%edi
		jge    jump_5c04a
		call   ac_set_static_on_fire
	jump_5bf9e:
		movswl %cx,%eax
		imul   $0x3c,%eax,%eax
		mov    EXPORT_SYMBOL(sthings),%ecx
		mov    0x2(%ecx,%eax,1),%cx
	jump_5bfaf:
		test   %cx,%cx
		jne    jump_5c011
	jump_5bfb4:
		incw   0x2c(%esp)
	jump_5bfb9:
		mov    0x2a(%esp),%eax
		sar    $0x10,%eax
		cmp    $0x2,%eax
		jge    jump_5bc15
		mov    0x1a(%esp),%ecx
		mov    0x16(%esp),%edi
		sar    $0x10,%ecx
		sar    $0x10,%edi
		add    %edi,%ecx
		test   %ecx,%ecx
		jl     jump_5bfb4
		cmp    $0x80,%ecx
		jge    jump_5bfb4
		mov    0x1e(%esp),%edi
		sar    $0x10,%edi
		add    %edi,%eax
		test   %eax,%eax
		jl     jump_5bfb4
		cmp    $0x80,%eax
		jge    jump_5bfb4
		shl    $0x7,%eax
		add    %ecx,%eax
		imul   $0x12,%eax,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%ecx
		mov    0x8(%ecx,%eax,1),%cx
		test   %cx,%cx
		je     jump_5bfb4
	jump_5c011:
		movswl %cx,%eax
		test   %eax,%eax
		jle    jump_5bed2
		imul   $0xa8,%eax,%eax
		mov    things,%ecx
		add    %ecx,%eax
		cmpl   $0x0,0x40(%esp)
		je     jump_5bc36
		mov    0x40(%esp),%edi
		xor    %ecx,%ecx
		mov    0x51(%edi),%cl
		mov    %cx,0x24(%esp)
		jmp    jump_5bc3d
	jump_5c048:
		xor    %eax,%eax
	jump_5c04a:
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0xc


/*----------------------------------------------------------------*/
do_fvect_colide:	/* 0x05C054 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		mov    %eax,0x8(%esp)
		mov    %edx,0x4(%esp)
		mov    %ebx,(%esp)
		mov    %ecx,%ebp
		mov    0x1c(%esp),%esi
		mov    0xa(%esi),%si
		xor    %edi,%edi
		test   %si,%si
		je     jump_5c1b3
	jump_5c07a:
		test   %edi,%edi
		jne    jump_5c1b3
		xor    %eax,%eax
		mov    %si,%ax
		imul   $0x6,%eax,%edx
		mov    game_col_vects_list,%eax
		add    %edx,%eax
		testb  $0x80,0x3(%eax)
		jne    jump_5c195
		mov    0x2(%eax),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		jl     jump_5c195
		mov    (%eax),%ax
		and    $0xffff,%eax
		imul   $0xe,%eax,%eax
		mov    game_col_vects,%edx
		add    %edx,%eax
		mov    0xa(%eax),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		jge    jump_5c10b
		neg    %edx
		imul   $0x28,%edx,%edx
		mov    game_object_faces4,%ebx
		add    %edx,%ebx
		mov    0xa(%ebx),%dl
		and    $0x4,%dl
		mov    0xa(%ebx),%cl
		and    $0xff,%edx
		test   $0x10,%cl
		je     jump_5c127
		cmpw   $0x0,0x22(%ebx)
		je     jump_5c127
		mov    0x20(%ebx),%edx
		sar    $0x10,%edx
		imul   $0x3c,%edx,%edx
		mov    EXPORT_SYMBOL(sthings),%ebx
		testb  $0x2,0xc(%edx,%ebx,1)
		je     jump_5c125
		mov    $0x1,%edx
		jmp    jump_5c127
	jump_5c10b:
		jge    jump_5c125
		mov    game_object_faces,%ebx
		shl    $0x5,%edx
		mov    0x8(%edx,%ebx,1),%dl
		and    $0x4,%dl
		and    $0xff,%edx
		jmp    jump_5c127
	jump_5c125:
		xor    %edx,%edx
	jump_5c127:
		test   %edx,%edx
		jne    jump_5c160
		push   %ebp
		mov    0x4(%esp),%edx
		push   %edx
		mov    0xc(%esp),%ebx
		push   %ebx
		mov    0x14(%esp),%ecx
		mov    0x2(%eax),%edx
		push   %ecx
		sar    $0x10,%edx
		mov    0x4(%eax),%ebx
		mov    0x8(%eax),%ecx
		sar    $0x10,%ebx
		sar    $0x10,%ecx
		movswl (%eax),%eax
		call   ac_two4_line_intersection
		test   %al,%al
		je     jump_5c195
		xor    %edi,%edi
		mov    %si,%di
		jmp    jump_5c195
	jump_5c160:
		push   %ebp
		mov    0x4(%esp),%edx
		push   %edx
		mov    0xc(%esp),%ebx
		push   %ebx
		mov    0x14(%esp),%ecx
		mov    0x2(%eax),%edx
		push   %ecx
		sar    $0x10,%edx
		mov    0x4(%eax),%ebx
		mov    0x8(%eax),%ecx
		sar    $0x10,%ebx
		sar    $0x10,%ecx
		movswl (%eax),%eax
		call   ac_two4_line_intersection
		test   %al,%al
		je     jump_5c195
		xor    %edi,%edi
		mov    %si,%di
		neg    %edi
	jump_5c195:
		xor    %eax,%eax
		mov    %si,%ax
		imul   $0x6,%eax,%eax
		mov    game_col_vects_list,%edx
		mov    0x2(%edx,%eax,1),%si
		and    $0x7fff,%si
		jne    jump_5c07a
	jump_5c1b3:
		mov    %edi,%eax
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
bul_path_end:	/* 0x05C1C0 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x30,%esp
		mov    0x40(%esp),%ebp
		mov    0x44(%esp),%edi
		mov    %eax,0x10(%esp)
		mov    %edx,0x8(%esp)
		mov    %ebx,0x14(%esp)
		mov    %ecx,%esi
		xor    %edx,%edx
		mov    (%ecx),%ax
		mov    %edx,0x20(%esp)
		mov    %edx,0x18(%esp)
		mov    0x10(%esp),%edx
		sub    %edx,%eax
		mov    %ax,0x24(%esp)
		mov    0x22(%esp),%edx
		sar    $0x10,%edx
		imul   %edx,%edx
		mov    0x8(%esp),%ebx
		mov    0x0(%ebp),%ax
		sub    %ebx,%eax
		mov    0x14(%esp),%ecx
		mov    %ax,0x2c(%esp)
		mov    (%edi),%ax
		sub    %ecx,%eax
		mov    %ax,0x28(%esp)
		mov    (%esi),%eax
		mov    %eax,0xc(%esp)
		mov    0x0(%ebp),%eax
		mov    %eax,0x4(%esp)
		mov    (%edi),%eax
		mov    %eax,(%esp)
		mov    0x26(%esp),%eax
		sar    $0x10,%eax
		imul   %eax,%eax
		add    %eax,%edx
		mov    0x2a(%esp),%eax
		sar    $0x10,%eax
		imul   %eax,%eax
		shl    $0x7,%eax
		add    %eax,%edx
		mov    %edx,%eax
		mov    %edx,0x1c(%esp)
		call   ac_LbSqrL
		mov    %eax,%edx
		sar    $0x1f,%edx
		shl    $0x7,%edx
		sbb    %edx,%eax
		sar    $0x7,%eax
		mov    %eax,0x1c(%esp)
		test   %eax,%eax
		jne    jump_5c270
		movl   $0x1,0x1c(%esp)
	jump_5c270:
		mov    0x22(%esp),%edx
		sar    $0x10,%edx
		mov    0x1c(%esp),%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    0x2a(%esp),%edx
		sar    $0x10,%edx
		mov    %ax,0x24(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    0x26(%esp),%edx
		sar    $0x10,%edx
		mov    %ax,0x2c(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %ax,0x28(%esp)
		mov    0x10(%esp),%eax
		mov    %eax,(%esi)
		mov    0x8(%esp),%eax
		lea    0x1(%ebx),%ecx
		mov    %eax,0x0(%ebp)
		mov    0x14(%esp),%eax
		mov    %ecx,0x1c(%esp)
		mov    %eax,(%edi)
		test   %ecx,%ecx
		jg     jump_5c2e1
		jmp    jump_5c4a7
	jump_5c2d0:
		mov    0x1c(%esp),%edx
		dec    %edx
		mov    %edx,0x1c(%esp)
		test   %edx,%edx
		jle    jump_5c4a7
	jump_5c2e1:
		cmpl   $0x0,0x20(%esp)
		je     jump_5c2fd
		mov    0x18(%esp),%eax
		dec    %eax
		mov    %eax,0x18(%esp)
		jne    jump_5c2fd
		mov    $0xffffffff,%edx
		jmp    jump_5c4bb
	jump_5c2fd:
		mov    (%esi),%ebx
		test   %ebx,%ebx
		jl     jump_5c319
		cmp    $0x8000,%ebx
		jg     jump_5c319
		mov    (%edi),%eax
		test   %eax,%eax
		jl     jump_5c319
		cmp    $0x8000,%ebx
		jle    jump_5c34f
	jump_5c319:
		mov    0x22(%esp),%eax
		mov    (%esi),%ecx
		sar    $0x10,%eax
		sub    %eax,%ecx
		mov    0x2a(%esp),%eax
		mov    %ecx,(%esi)
		sar    $0x10,%eax
		mov    0x0(%ebp),%esi
		sub    %eax,%esi
		mov    0x26(%esp),%eax
		mov    %esi,0x0(%ebp)
		sar    $0x10,%eax
		mov    (%edi),%ebp
		sub    %eax,%ebp
		xor    %edx,%edx
		mov    %ebp,(%edi)
		mov    %edx,%eax
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x14
	jump_5c34f:
		push   $0x0
		mov    0x50(%esp),%ebx
		mov    0x0(%ebp),%edx
		xor    %ecx,%ecx
		push   $0x1
		mov    0x50(%esp),%cx
		shl    $0x8,%edx
		push   %ebx
		mov    %eax,%ebx
		mov    (%esi),%eax
		shl    $0x8,%ebx
		shl    $0x8,%eax
		call   ac_check_for_radius_hit_person
		test   %eax,%eax
		je     jump_5c3b3
		mov    0x50(%esp),%edx
		movb   $0x3,(%edx)
		xor    %edx,%edx
		mov    0x9(%eax),%dl
		cmp    $0x5,%edx
		jne    jump_5c3a2
		mov    0x14(%eax),%edx
		sar    $0x10,%edx
		neg    %edx
		or     $0x40000000,%edx
		mov    %edx,%eax
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x14
	jump_5c3a2:
		xor    %edx,%edx
		mov    0x16(%eax),%dx
		mov    %edx,%eax
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x14
	jump_5c3b3:
		mov    (%edi),%edx
		mov    (%esi),%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		shl    $0x7,%edx
		add    %edx,%eax
		imul   $0x12,%eax,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		add    %edx,%eax
		mov    0x4(%eax),%ebx
		mov    0x0(%ebp),%ecx
		sar    $0x10,%ebx
		cmp    %ecx,%ebx
		jge    jump_5c41b
		add    $0x20,%ebx
		cmp    %ecx,%ebx
		jle    jump_5c41b
		cmpw   $0x0,0xa(%eax)
		je     jump_5c44d
		mov    (%esp),%ecx
		mov    0xc(%esp),%ebx
		push   %eax
		mov    0x18(%esp),%edx
		mov    0x14(%esp),%eax
		call   do_fvect_colide
		mov    %eax,0x20(%esp)
		test   %eax,%eax
		jle    jump_5c44d
		mov    0x50(%esp),%edx
		movb   $0x1,(%edx)
		mov    %eax,%edx
		neg    %edx
		mov    %edx,%eax
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x14
	jump_5c41b:
		cmpl   $0x0,0x20(%esp)
		jne    jump_5c44d
		mov    (%edi),%ebx
		mov    0x0(%ebp),%edx
		mov    (%esi),%eax
		call   ac_check_col_collision
		mov    %eax,0x20(%esp)
		test   %eax,%eax
		je     jump_5c44d
		mov    0x50(%esp),%eax
		mov    $0xffffffff,%edx
		movb   $0x2,(%eax)
		mov    %edx,%eax
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x14
	jump_5c44d:
		mov    0x22(%esp),%eax
		mov    (%esi),%ecx
		sar    $0x10,%eax
		add    %eax,%ecx
		mov    0x2a(%esp),%eax
		mov    %ecx,(%esi)
		sar    $0x10,%eax
		mov    0x0(%ebp),%edx
		add    %eax,%edx
		mov    0x26(%esp),%eax
		mov    %edx,0x0(%ebp)
		sar    $0x10,%eax
		mov    (%edi),%ebx
		add    %eax,%ebx
		mov    %ebx,(%edi)
		mov    (%esi),%eax
		sar    $0x8,%eax
		test   %eax,%eax
		jl     jump_5c49a
		cmp    $0x80,%eax
		jge    jump_5c49a
		mov    %ebx,%eax
		sar    $0x8,%eax
		test   %eax,%eax
		jl     jump_5c49a
		cmp    $0x80,%eax
		jl     jump_5c2d0
	jump_5c49a:
		xor    %edx,%edx
		mov    %edx,%eax
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x14
	jump_5c4a7:
		mov    0xc(%esp),%eax
		mov    %eax,(%esi)
		mov    0x4(%esp),%eax
		mov    %eax,0x0(%ebp)
		mov    (%esp),%eax
		xor    %edx,%edx
		mov    %eax,(%edi)
	jump_5c4bb:
		mov    %edx,%eax
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x14


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_laser_hit_at)	/* 0x05C4C8 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x30,%esp
		mov    0x40(%esp),%esi
		mov    0x44(%esp),%ebp
		mov    %eax,0x18(%esp)
		mov    %edx,0x4(%esp)
		mov    %ebx,0x14(%esp)
		mov    %ecx,%edi
		xor    %edx,%edx
		mov    (%ecx),%ax
		mov    %edx,0x1c(%esp)
		mov    0x18(%esp),%edx
		sub    %edx,%eax
		mov    %ax,0x24(%esp)
		mov    0x22(%esp),%edx
		sar    $0x10,%edx
		imul   %edx,%edx
		mov    0x4(%esp),%ebx
		mov    (%esi),%ax
		sub    %ebx,%eax
		mov    0x14(%esp),%ecx
		mov    %ax,0x2c(%esp)
		mov    0x0(%ebp),%ax
		sub    %ecx,%eax
		mov    %ax,0x28(%esp)
		mov    (%edi),%eax
		mov    %eax,0x8(%esp)
		mov    (%esi),%eax
		mov    %eax,(%esp)
		mov    0x0(%ebp),%eax
		mov    %eax,0xc(%esp)
		mov    0x26(%esp),%eax
		sar    $0x10,%eax
		imul   %eax,%eax
		add    %eax,%edx
		mov    0x2a(%esp),%eax
		sar    $0x10,%eax
		imul   %eax,%eax
		shl    $0x7,%eax
		add    %eax,%edx
		mov    %edx,%eax
		mov    %edx,0x10(%esp)
		call   ac_LbSqrL
		mov    %eax,%edx
		sar    $0x1f,%edx
		shl    $0x7,%edx
		sbb    %edx,%eax
		sar    $0x7,%eax
		mov    %eax,0x10(%esp)
		test   %eax,%eax
		jne    jump_5c574
		movl   $0x1,0x10(%esp)
	jump_5c574:
		mov    0x22(%esp),%edx
		sar    $0x10,%edx
		mov    0x10(%esp),%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    0x2a(%esp),%edx
		sar    $0x10,%edx
		mov    %ax,0x24(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    0x26(%esp),%edx
		sar    $0x10,%edx
		mov    %ax,0x2c(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %ax,0x28(%esp)
		mov    0x18(%esp),%eax
		mov    %eax,(%edi)
		mov    0x4(%esp),%eax
		lea    0x1(%ebx),%ecx
		mov    %eax,(%esi)
		mov    0x14(%esp),%eax
		mov    %ecx,0x10(%esp)
		mov    %eax,0x0(%ebp)
		test   %ecx,%ecx
		jg     jump_5c5e5
		jmp    jump_5c775
	jump_5c5d4:
		mov    0x10(%esp),%edx
		dec    %edx
		mov    %edx,0x10(%esp)
		test   %edx,%edx
		jle    jump_5c775
	jump_5c5e5:
		mov    0x48(%esp),%eax
		xor    %edx,%edx
		mov    0x3c(%eax),%dx
		imul   $0xa8,%edx,%edx
		push   $0x0
		mov    0x0(%ebp),%ebx
		mov    things,%eax
		push   $0x1
		add    %edx,%eax
		xor    %ecx,%ecx
		push   %eax
		mov    0x54(%esp),%eax
		shl    $0x8,%ebx
		mov    (%esi),%edx
		mov    0x14(%eax),%cx
		mov    (%edi),%eax
		shl    $0x8,%edx
		shl    $0x8,%eax
		call   ac_check_for_radius_hit_person
		test   %eax,%eax
		je     jump_5c64c
		xor    %edx,%edx
		mov    0x9(%eax),%dl
		cmp    $0x5,%edx
		jne    jump_5c641
		mov    0x14(%eax),%edx
		sar    $0x10,%edx
		neg    %edx
		or     $0x40000000,%edx
		jmp    jump_5c789
	jump_5c641:
		xor    %edx,%edx
		mov    0x16(%eax),%dx
		jmp    jump_5c789
	jump_5c64c:
		mov    0x0(%ebp),%edx
		mov    (%edi),%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		shl    $0x7,%edx
		add    %edx,%eax
		imul   $0x12,%eax,%edx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %edx,%eax
		mov    %eax,0x20(%esp)
		mov    0x4(%eax),%eax
		mov    (%esi),%ecx
		sar    $0x10,%eax
		cmp    %ecx,%eax
		jge    jump_5c6b5
		add    $0x1e,%eax
		cmp    %ecx,%eax
		jle    jump_5c6b5
		mov    0x20(%esp),%eax
		cmpw   $0x0,0xa(%eax)
		je     jump_5c6b5
		mov    0xc(%esp),%ecx
		mov    0x8(%esp),%ebx
		push   %eax
		mov    0x18(%esp),%edx
		mov    0x1c(%esp),%eax
		call   do_fvect_colide
		test   %eax,%eax
		jle    jump_5c6b1
		mov    %eax,%edx
		neg    %edx
		mov    %edx,%eax
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0xc
	jump_5c6b1:
		mov    %eax,0x1c(%esp)
	jump_5c6b5:
		movswl 0x0(%ebp),%edx
		movswl (%edi),%eax
		call   ac_alt_at_point
		sar    $0x8,%eax
		mov    (%esi),%ecx
		cmp    %ecx,%eax
		jle    jump_5c6da
	jump_5c6ca:
		mov    $0x20000000,%edx
		mov    %edx,%eax
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0xc
	jump_5c6da:
		mov    0x20(%esp),%eax
		mov    0x4(%eax),%eax
		sar    $0x10,%eax
		cmp    %ecx,%eax
		jge    jump_5c6f6
		add    $0x1e,%eax
		cmp    %ecx,%eax
		jle    jump_5c6f6
		cmpl   $0x0,0x1c(%esp)
		je     jump_5c71b
	jump_5c6f6:
		mov    0x0(%ebp),%ebx
		mov    (%esi),%edx
		mov    (%edi),%eax
		call   ac_check_col_collision
		test   %eax,%eax
		je     jump_5c71b
		mov    0x1c(%esp),%esi
		test   %esi,%esi
		je     jump_5c6ca
		mov    %esi,%edx
		mov    %edx,%eax
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0xc
	jump_5c71b:
		mov    0x22(%esp),%eax
		mov    (%edi),%edx
		sar    $0x10,%eax
		add    %eax,%edx
		mov    0x2a(%esp),%eax
		mov    %edx,(%edi)
		sar    $0x10,%eax
		mov    (%esi),%ebx
		add    %eax,%ebx
		mov    0x26(%esp),%eax
		mov    %ebx,(%esi)
		sar    $0x10,%eax
		mov    0x0(%ebp),%ecx
		add    %eax,%ecx
		mov    %ecx,0x0(%ebp)
		mov    (%edi),%eax
		sar    $0x8,%eax
		test   %eax,%eax
		jl     jump_5c768
		cmp    $0x80,%eax
		jge    jump_5c768
		mov    %ecx,%eax
		sar    $0x8,%eax
		test   %eax,%eax
		jl     jump_5c768
		cmp    $0x80,%eax
		jl     jump_5c5d4
	jump_5c768:
		xor    %edx,%edx
		mov    %edx,%eax
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0xc
	jump_5c775:
		mov    0x8(%esp),%eax
		mov    %eax,(%edi)
		mov    (%esp),%eax
		mov    %eax,(%esi)
		mov    0xc(%esp),%eax
		xor    %edx,%edx
		mov    %eax,0x0(%ebp)
	jump_5c789:
		mov    %edx,%eax
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0xc


/*----------------------------------------------------------------*/
check_col_collision_floor:	/* 0x05C794 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    %eax,%esi
		mov    %edx,(%esp)
		mov    %ebx,0x4(%esp)
		sar    $0x8,%eax
		test   %eax,%eax
		jl     jump_5c87d
		cmp    $0x80,%eax
		jge    jump_5c87d
		mov    %ebx,%edx
		sar    $0x8,%edx
		test   %edx,%edx
		jl     jump_5c87d
		cmp    $0x80,%edx
		jge    jump_5c87d
		shl    $0x7,%edx
		add    %eax,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%ecx
		add    %eax,%eax
		add    %eax,%ecx
		mov    0x4(%ecx),%eax
		mov    0x16(%ecx),%ebx
		mov    0x904(%ecx),%edx
		sar    $0x10,%eax
		sar    $0x10,%ebx
		mov    0x916(%ecx),%ecx
		sar    $0x10,%edx
		sar    $0x10,%ecx
		cmp    %eax,%ebx
		jne    jump_5c815
		cmp    %edx,%eax
		jne    jump_5c815
		cmp    %ecx,%edx
		je     jump_5c871
	jump_5c815:
		mov    0x4(%esp),%edi
		and    $0xff,%esi
		and    $0xff,%edi
		movswl %si,%esi
		movswl %di,%edi
		lea    (%esi,%edi,1),%ebp
		cmp    $0x100,%ebp
		jge    jump_5c84e
		sub    %eax,%ebx
		imul   %ebx,%esi
		sub    %eax,%edx
		mov    %edi,%ebx
		imul   %edx,%ebx
		sar    $0x8,%esi
		add    %eax,%esi
		sar    $0x8,%ebx
		add    %esi,%ebx
		jmp    jump_5c871
	jump_5c84e:
		mov    $0x100,%eax
		sub    %ecx,%edx
		sub    %esi,%eax
		imul   %edx,%eax
		mov    $0x100,%edx
		sub    %ecx,%ebx
		sub    %edi,%edx
		imul   %ebx,%edx
		sar    $0x8,%eax
		add    %ecx,%eax
		sar    $0x8,%edx
		lea    (%eax,%edx,1),%ebx
	jump_5c871:
		cmp    (%esp),%ebx
		jle    jump_5c87d
		mov    $0xffffffff,%eax
		jmp    jump_5c87f
	jump_5c87d:
		xor    %eax,%eax
	jump_5c87f:
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_check_col_collision)	/* 0x05C888 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x18,%esp
		mov    %eax,0x8(%esp)
		mov    %edx,0x4(%esp)
		mov    %eax,%edx
		sar    $0x8,%edx
		test   %edx,%edx
		jl     jump_5c8b8
		cmp    $0x80,%edx
		jge    jump_5c8b8
		mov    %ebx,%eax
		sar    $0x8,%eax
		test   %eax,%eax
		jl     jump_5c8b8
		cmp    $0x80,%eax
		jl     jump_5c8bf
	jump_5c8b8:
		xor    %eax,%eax
		jmp    jump_5ca37
	jump_5c8bf:
		shl    $0x7,%eax
		add    %eax,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		add    %eax,%eax
		add    %edx,%eax
		mov    0x4(%eax),%edx
		mov    0x16(%eax),%ebp
		mov    0x904(%eax),%ecx
		mov    0x916(%eax),%esi
		sar    $0x10,%edx
		sar    $0x10,%ebp
		sar    $0x10,%ecx
		sar    $0x10,%esi
		cmp    %edx,%ebp
		jne    jump_5c905
		cmp    %ecx,%edx
		jne    jump_5c905
		cmp    %esi,%ecx
		je     jump_5c989
	jump_5c905:
		mov    0x8(%esp),%edi
		and    $0xff,%edi
		mov    %di,0x10(%esp)
		mov    %ebx,%edi
		and    $0xff,%edi
		mov    %di,0x14(%esp)
		mov    0xe(%esp),%edi
		sar    $0x10,%edi
		mov    %edi,0xc(%esp)
		mov    0x12(%esp),%edi
		sar    $0x10,%edi
		mov    %edi,(%esp)
		mov    0xc(%esp),%edi
		add    (%esp),%edi
		cmp    $0x100,%edi
		jge    jump_5c960
		mov    0xc(%esp),%edi
		sub    %edx,%ebp
		imul   %edi,%ebp
		sar    $0x8,%ebp
		sub    %edx,%ecx
		add    %edx,%ebp
		imul   (%esp),%ecx
		sar    $0x8,%ecx
		add    %ecx,%ebp
		jmp    jump_5c989
	jump_5c960:
		mov    $0x100,%edx
		mov    0xc(%esp),%edi
		sub    %esi,%ecx
		sub    %edi,%edx
		imul   %ecx,%edx
		sar    $0x8,%edx
		mov    %ebp,%ecx
		mov    $0x100,%ebp
		add    %esi,%edx
		sub    %esi,%ecx
		sub    (%esp),%ebp
		imul   %ecx,%ebp
		sar    $0x8,%ebp
		add    %edx,%ebp
	jump_5c989:
		cmp    0x4(%esp),%ebp
		jle    jump_5c99c
		mov    $0xffffffff,%eax
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_5c99c:
		mov    0x10(%eax),%cx
		and    $0xf,%ch
		movswl %cx,%edx
		test   %edx,%edx
		jne    jump_5c9b4
		xor    %eax,%eax
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_5c9b4:
		mov    0x8(%esp),%esi
		mov    %ebx,%edx
		and    $0xff,%esi
		and    $0xff,%edx
		cmp    $0x7f,%esi
		jle    jump_5c9de
		cmp    $0x7f,%edx
		jle    jump_5c9d7
		mov    $0x2,%edx
		jmp    jump_5c9ec
	jump_5c9d7:
		mov    $0x1,%edx
		jmp    jump_5c9ec
	jump_5c9de:
		cmp    $0x7f,%edx
		jle    jump_5c9ea
		mov    $0x3,%edx
		jmp    jump_5c9ec
	jump_5c9ea:
		xor    %edx,%edx
	jump_5c9ec:
		mov    0x4(%eax),%eax
		mov    0x4(%esp),%ebx
		sar    $0x10,%eax
		shl    $0x3,%ebx
		shl    $0x3,%eax
		sub    %eax,%ebx
		mov    %ebx,%eax
		sar    $0x7,%eax
		movswl %ax,%ebx
		cmp    $0x1f,%ebx
		jle    jump_5ca15
		xor    %eax,%eax
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_5ca15:
		movswl %cx,%ebx
		mov    %ebx,%ecx
		mov    game_col_columns,%ebx
		shl    $0x4,%ecx
		movswl %dx,%edx
		add    %ecx,%ebx
		movswl %ax,%ecx
		mov    $0x3,%eax
		mov    (%ebx,%edx,4),%esi
		shl    %cl,%eax
		and    %esi,%eax
	jump_5ca37:
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
check_big_point_triangle:	/* 0x05CB0C */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x10,%esp
		mov    %eax,%ebp
		mov    %edx,(%esp)
		mov    %ebx,%esi
		mov    0x28(%esp),%edi
		sub    %ecx,%edx
		sub    %ebx,%edi
		imul   %edi,%edx
		mov    %ebx,%eax
		mov    0x2c(%esp),%ebx
		sub    %ebp,%eax
		sub    %ecx,%ebx
		imul   %ebx,%eax
		add    %eax,%edx
		mov    0x24(%esp),%eax
		sub    %ecx,%eax
		mov    %ebx,0xc(%esp)
		mov    %eax,%ebx
		imul   %edi,%ebx
		mov    %eax,0x8(%esp)
		mov    0x20(%esp),%eax
		sub    %esi,%eax
		mov    %eax,0x4(%esp)
		imul   0xc(%esp),%eax
		sub    %eax,%ebx
		je     jump_5cbb9
		shl    $0x8,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,%ebx
		test   %eax,%eax
		jl     jump_5cbb9
		test   %edi,%edi
		jne    jump_5cb8e
		mov    0x8(%esp),%eax
		imul   %ebx,%eax
		mov    (%esp),%edx
		shl    $0x8,%ecx
		shl    $0x8,%edx
		sub    %ecx,%edx
		sub    %eax,%edx
		mov    0xc(%esp),%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		jmp    jump_5cba8
	jump_5cb8e:
		mov    0x4(%esp),%edx
		imul   %eax,%edx
		shl    $0x8,%ebp
		shl    $0x8,%esi
		sub    %esi,%ebp
		sub    %edx,%ebp
		mov    %ebp,%edx
		mov    %ebp,%eax
		sar    $0x1f,%edx
		idiv   %edi
	jump_5cba8:
		test   %eax,%eax
		jl     jump_5cbb9
		add    %ebx,%eax
		cmp    $0x100,%eax
		jge    jump_5cbb9
		mov    $0x1,%al
		jmp    jump_5cbbb
	jump_5cbb9:
		xor    %al,%al
	jump_5cbbb:
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x10


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_two4_line_intersection)	/* 0x05CDF0 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x10,%esp
		mov    0x20(%esp),%esi
		mov    %ebx,%edi
		mov    0x28(%esp),%ebp
		sub    %eax,%edi
		sub    %ebp,%esi
		test   %edi,%edi
		jge    jump_5ce12
		mov    %ebx,0x4(%esp)
		mov    %eax,0x8(%esp)
		jmp    jump_5ce1a
	jump_5ce12:
		mov    %ebx,0x8(%esp)
		mov    %eax,0x4(%esp)
	jump_5ce1a:
		test   %esi,%esi
		jle    jump_5ce3b
		mov    0x8(%esp),%ebx
		cmp    0x28(%esp),%bx
		jl     jump_5ce34
		mov    0x20(%esp),%ebx
		cmp    0x4(%esp),%bx
		jge    jump_5ce58
	jump_5ce34:
		xor    %al,%al
		jmp    jump_5cf50
	jump_5ce3b:
		mov    0x8(%esp),%ebx
		cmp    0x20(%esp),%bx
		jl     jump_5ce51
		mov    0x28(%esp),%ebx
		cmp    0x4(%esp),%bx
		jge    jump_5ce58
	jump_5ce51:
		xor    %al,%al
		jmp    jump_5cf50
	jump_5ce58:
		mov    %ecx,%ebx
		sub    %edx,%ebx
		mov    0x24(%esp),%ebp
		mov    %ebx,(%esp)
		sub    0x2c(%esp),%ebp
		cmpl   $0x0,(%esp)
		jge    jump_5ce73
		mov    %edx,0xc(%esp)
		jmp    jump_5ce79
	jump_5ce73:
		mov    %ecx,0xc(%esp)
		mov    %edx,%ecx
	jump_5ce79:
		test   %ebp,%ebp
		jle    jump_5ce9a
		mov    0xc(%esp),%ebx
		cmp    0x2c(%esp),%bx
		jl     jump_5ce8f
		cmp    0x24(%esp),%cx
		jle    jump_5ceb7
	jump_5ce8f:
		xor    %al,%al
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x10
	jump_5ce9a:
		mov    0xc(%esp),%ebx
		cmp    0x24(%esp),%bx
		jl     jump_5ceac
		cmp    0x2c(%esp),%cx
		jle    jump_5ceb7
	jump_5ceac:
		xor    %al,%al
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x10
	jump_5ceb7:
		sub    0x20(%esp),%eax
		mov    %edx,%ebx
		mov    %eax,%ecx
		mov    0x24(%esp),%eax
		mov    %esi,%edx
		sub    %eax,%ebx
		imul   %ebx,%edx
		mov    %ebp,%eax
		imul   %ecx,%eax
		imul   %edi,%ebp
		sub    %edx,%eax
		mov    %eax,%edx
		mov    (%esp),%eax
		imul   %esi,%eax
		sub    %ebp,%eax
		test   %eax,%eax
		jle    jump_5cef5
		test   %edx,%edx
		jl     jump_5ceea
		cmp    %eax,%edx
		jle    jump_5cf08
	jump_5ceea:
		xor    %al,%al
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x10
	jump_5cef5:
		test   %edx,%edx
		jg     jump_5cefd
		cmp    %eax,%edx
		jge    jump_5cf08
	jump_5cefd:
		xor    %al,%al
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x10
	jump_5cf08:
		imul   %edi,%ebx
		mov    (%esp),%edx
		imul   %ecx,%edx
		sub    %edx,%ebx
		mov    %ebx,%edx
		test   %eax,%eax
		jle    jump_5cf2c
		test   %ebx,%ebx
		jl     jump_5cf21
		cmp    %eax,%ebx
		jle    jump_5cf3f
	jump_5cf21:
		xor    %al,%al
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x10
	jump_5cf2c:
		test   %ebx,%ebx
		jg     jump_5cf34
		cmp    %eax,%ebx
		jge    jump_5cf3f
	jump_5cf34:
		xor    %al,%al
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x10
	jump_5cf3f:
		test   %eax,%eax
		jne    jump_5cf4e
		mov    $0x1,%al
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x10
	jump_5cf4e:
		mov    $0x2,%al
	jump_5cf50:
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x10


/*----------------------------------------------------------------*/
func_5cff0:
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x10,%esp
		mov    %eax,%ecx
		mov    %edx,%esi
		movswl (%eax),%eax
		movswl (%ebx),%edx
		mov    %eax,0xc(%esp)
		sub    %edx,%eax
		movswl (%esi),%edi
		mov    %eax,%edx
		mov    0x2(%ebx),%eax
		mov    %edi,%ebp
		sar    $0x10,%eax
		sub    %eax,%ebp
		mov    %ebp,%eax
		mov    %edx,%ebp
		imul   %edx,%ebp
		mov    %ebp,0x4(%esp)
		mov    %eax,%ebp
		imul   %eax,%ebp
		mov    %ebp,0x8(%esp)
		mov    0x4(%esp),%ebp
		add    0x8(%esp),%ebp
		mov    %ebp,(%esp)
		cmp    $0x400,%ebp
		jge    jump_5d04f
		sub    %dx,(%ecx)
		mov    (%esi),%dx
		sub    %eax,%edx
		mov    $0x1,%eax
		mov    %dx,(%esi)
		jmp    jump_5d098
	jump_5d04f:
		mov    0x4(%ebx),%edx
		mov    0xc(%esp),%eax
		sar    $0x10,%edx
		sub    %edx,%eax
		mov    %eax,%edx
		mov    0x8(%ebx),%eax
		sar    $0x10,%eax
		sub    %eax,%edi
		mov    %edi,%eax
		mov    %edx,%edi
		imul   %edx,%edi
		mov    %eax,%ebx
		imul   %eax,%ebx
		add    %ebx,%edi
		mov    %edi,(%esp)
		cmp    $0x400,%edi
		jge    jump_5d096
		sub    %dx,(%ecx)
		mov    (%esi),%cx
		sub    %eax,%ecx
		mov    $0x1,%eax
		mov    %cx,(%esi)
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_5d096:
		xor    %eax,%eax
	jump_5d098:
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_collide_coords)	/* 0x5D0A0 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    %eax,%esi
		mov    %ebx,%ecx
		xor    %edx,%edx
		mov    (%eax),%ax
		mov    %edx,(%esp)
		xor    %ah,%ah
		mov    %edx,0x4(%esp)
		cmp    $0x40,%ax
		jge    jump_5d0c8
		movl   $0xffffffff,(%esp)
		jmp    jump_5d0d5
	jump_5d0c8:
		cmp    $0xc0,%ax
		jle    jump_5d0d5
		movl   $0x1,(%esp)
	jump_5d0d5:
		mov    (%ecx),%ax
		xor    %ah,%ah
		cmp    $0x40,%ax
		jge    jump_5d0ea
		movl   $0xffffffff,0x4(%esp)
		jmp    jump_5d0f8
	jump_5d0ea:
		cmp    $0xc0,%ax
		jle    jump_5d0f8
		movl   $0x1,0x4(%esp)
	jump_5d0f8:
		movswl (%esi),%ebx
		sar    $0x8,%ebx
		test   %ebx,%ebx
		jl     jump_5d19d
		cmp    $0x80,%ebx
		jge    jump_5d19d
		movswl (%ecx),%eax
		sar    $0x8,%eax
		test   %eax,%eax
		jl     jump_5d19d
		cmp    $0x80,%eax
		jge    jump_5d19d
		shl    $0x7,%eax
		add    %eax,%ebx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%ebx
		mov    0xa(%ebx,%eax,2),%ax
		xor    %edi,%edi
		test   %ax,%ax
		je     jump_5d19d
	jump_5d14b:
		xor    %ebx,%ebx
		mov    %di,%bx
		cmp    $0xc8,%ebx
		jge    jump_5d19d
		movzwl %ax,%ebp
		imul   $0x6,%ebp,%ebp
		mov    EXPORT_SYMBOL(game_col_vects_list),%ebx
		mov    (%ebx,%ebp,1),%bx
		and    $0xffff,%ebx
		imul   $0xe,%ebx,%ebx
		mov    EXPORT_SYMBOL(game_col_vects),%eax
		mov    %ecx,%edx
		add    %eax,%ebx
		mov    %esi,%eax
		call   func_5cff0
		test   %ax,%ax
		jne    jump_5d37a
		mov    EXPORT_SYMBOL(game_col_vects_list),%eax
		mov    0x2(%eax,%ebp,1),%ax
		and    $0x7f,%ah
		inc    %edi
		test   %ax,%ax
		jne    jump_5d14b
	jump_5d19d:
		mov    (%esp),%ebx
		test   %ebx,%ebx
		je     jump_5d237
		movswl (%esi),%eax
		sar    $0x8,%eax
		add    %eax,%ebx
		movswl (%ecx),%eax
		sar    $0x8,%eax
		shl    $0x7,%eax
		add    %eax,%ebx
		lea    0x0(,%ebx,8),%eax
		add    %eax,%ebx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %ebx,%ebx
		add    %eax,%ebx
		cmp    %eax,%ebx
		jbe    jump_5d237
		add    $0x48000,%eax
		cmp    %eax,%ebx
		jae    jump_5d237
		mov    0xa(%ebx),%ax
		xor    %edi,%edi
		test   %ax,%ax
		je     jump_5d237
	jump_5d1e5:
		xor    %ebx,%ebx
		mov    %di,%bx
		cmp    $0xc8,%ebx
		jge    jump_5d237
		movzwl %ax,%ebp
		imul   $0x6,%ebp,%ebp
		mov    EXPORT_SYMBOL(game_col_vects_list),%ebx
		mov    (%ebx,%ebp,1),%bx
		and    $0xffff,%ebx
		imul   $0xe,%ebx,%ebx
		mov    EXPORT_SYMBOL(game_col_vects),%eax
		mov    %ecx,%edx
		add    %eax,%ebx
		mov    %esi,%eax
		call   func_5cff0
		test   %ax,%ax
		jne    jump_5d37a
		mov    EXPORT_SYMBOL(game_col_vects_list),%eax
		mov    0x2(%eax,%ebp,1),%ax
		and    $0x7f,%ah
		inc    %edi
		test   %ax,%ax
		jne    jump_5d1e5
	jump_5d237:
		mov    0x4(%esp),%edi
		test   %edi,%edi
		je     jump_5d2cf
		movswl (%ecx),%ebx
		sar    $0x8,%ebx
		movswl (%esi),%eax
		add    %edi,%ebx
		sar    $0x8,%eax
		shl    $0x7,%ebx
		add    %eax,%ebx
		lea    0x0(,%ebx,8),%eax
		add    %eax,%ebx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %ebx,%ebx
		add    %eax,%ebx
		cmp    %eax,%ebx
		jbe    jump_5d2cf
		add    $0x48000,%eax
		cmp    %eax,%ebx
		jae    jump_5d2cf
		mov    0xa(%ebx),%ax
		xor    %edi,%edi
		test   %ax,%ax
		je     jump_5d2cf
	jump_5d280:
		xor    %ebx,%ebx
		mov    %di,%bx
		cmp    $0xc8,%ebx
		jge    jump_5d2cf
		movzwl %ax,%ebp
		imul   $0x6,%ebp,%ebp
		mov    EXPORT_SYMBOL(game_col_vects_list),%ebx
		xor    %eax,%eax
		mov    (%ebx,%ebp,1),%ax
		imul   $0xe,%eax,%eax
		mov    EXPORT_SYMBOL(game_col_vects),%ebx
		mov    %ecx,%edx
		add    %eax,%ebx
		mov    %esi,%eax
		call   func_5cff0
		test   %ax,%ax
		jne    jump_5d37a
		mov    EXPORT_SYMBOL(game_col_vects_list),%eax
		mov    0x2(%eax,%ebp,1),%ax
		and    $0x7f,%ah
		inc    %edi
		test   %ax,%ax
		jne    jump_5d280
	jump_5d2cf:
		cmpl   $0x0,0x4(%esp)
		je     jump_5d37a
		mov    (%esp),%edx
		test   %edx,%edx
		je     jump_5d37a
		movswl (%ecx),%eax
		mov    0x4(%esp),%ebx
		sar    $0x8,%eax
		add    %eax,%ebx
		movswl (%esi),%eax
		sar    $0x8,%eax
		shl    $0x7,%ebx
		add    %edx,%eax
		add    %eax,%ebx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%ebx
		add    %eax,%eax
		add    %ebx,%eax
		cmp    %ebx,%eax
		jbe    jump_5d37a
		add    $0x48000,%ebx
		cmp    %ebx,%eax
		jae    jump_5d37a
		mov    0xa(%eax),%ax
		xor    %edi,%edi
		test   %ax,%ax
		je     jump_5d37a
	jump_5d32a:
		xor    %ebx,%ebx
		mov    %di,%bx
		cmp    $0xc8,%ebx
		jge    jump_5d37a
		movzwl %ax,%ebp
		imul   $0x6,%ebp,%ebp
		mov    EXPORT_SYMBOL(game_col_vects_list),%ebx
		mov    (%ebx,%ebp,1),%bx
		and    $0xffff,%ebx
		imul   $0xe,%ebx,%eax
		mov    EXPORT_SYMBOL(game_col_vects),%ebx
		mov    %ecx,%edx
		add    %eax,%ebx
		mov    %esi,%eax
		call   func_5cff0
		test   %ax,%ax
		jne    jump_5d37a
		mov    EXPORT_SYMBOL(game_col_vects_list),%ebx
		mov    0x2(%ebx,%ebp,1),%ax
		and    $0x7f,%ah
		inc    %edi
		test   %ax,%ax
		jne    jump_5d32a
	jump_5d37a:
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
dynamic_add_collision_to_single_mapwho:	/* 0x05D3B4 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		movswl %dx,%edx
		cwtl
		sar    $0x8,%edx
		sar    $0x8,%eax
		shl    $0x7,%edx
		add    %eax,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		add    %eax,%eax
		add    %eax,%edx
		xor    %ecx,%ecx
		mov    0xa(%edx),%cx
		lea    0x0(,%ecx,4),%eax
		mov    game_col_vects_list,%esi
		sub    %ecx,%eax
		mov    0xc(%esp),%ecx
		cmp    (%esi,%eax,2),%cx
		je     jump_5d439
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(link__MapColListEmptyHead),%ax
		test   %eax,%eax
		je     jump_5d439
		xor    %ecx,%ecx
		mov    %ax,%cx
		mov    %eax,%edi
		lea    0x0(,%ecx,4),%eax
		sub    %ecx,%eax
		mov    0x2(%esi,%eax,2),%cx
		mov    %cx,EXPORT_SYMBOL(link__MapColListEmptyHead)
		mov    0xc(%esp),%ecx
		mov    %cx,(%esi,%eax,2)
		mov    0xa(%edx),%cx
		mov    %cx,0x2(%esi,%eax,2)
		mov    %bx,0x4(%esi,%eax,2)
		mov    %di,0xa(%edx)
	jump_5d439:
		pop    %edi
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
dynamic_insert_vect:	/* 0x05D440 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x10,%esp
		mov    %eax,%edi
		mov    %edx,(%esp)
		mov    0x24(%esp),%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(link__MapColVectEmptyHead),%ax
		test   %eax,%eax
		jne    jump_5d462
		xor    %eax,%eax
		jmp    jump_5d5a4
	jump_5d462:
		xor    %esi,%esi
		mov    %ax,%si
		mov    %eax,0xc(%esp)
		lea    0x0(,%esi,8),%eax
		sub    %esi,%eax
		mov    game_col_vects,%esi
		add    %eax,%eax
		add    %esi,%eax
		mov    0xc(%eax),%si
		mov    %si,EXPORT_SYMBOL(link__MapColVectEmptyHead)
		test   %edi,%edi
		jl     jump_5d495
		cmp    $0x8000,%edi
		jle    jump_5d4a0
	jump_5d495:
		xor    %eax,%eax
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x10
	jump_5d4a0:
		test   %ecx,%ecx
		jl     jump_5d4ac
		cmp    $0x8000,%ecx
		jle    jump_5d4b7
	jump_5d4ac:
		xor    %eax,%eax
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x10
	jump_5d4b7:
		test   %ebx,%ebx
		jl     jump_5d4c3
		cmp    $0x8000,%ebx
		jle    jump_5d4ce
	jump_5d4c3:
		xor    %eax,%eax
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x10
	jump_5d4ce:
		test   %edx,%edx
		jl     jump_5d4da
		cmp    $0x8000,%edx
		jle    jump_5d4e5
	jump_5d4da:
		xor    %eax,%eax
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x10
	jump_5d4e5:
		mov    %cx,0x6(%eax)
		mov    %dx,0xa(%eax)
		sub    %ebx,%edx
		sub    %edi,%ecx
		mov    %edx,0x4(%esp)
		mov    %ecx,%edx
		imul   %ecx,%edx
		mov    %di,(%eax)
		mov    (%esp),%esi
		mov    %bx,0x4(%eax)
		mov    %si,0x2(%eax)
		mov    0x20(%esp),%esi
		mov    %si,0x8(%eax)
		mov    0x28(%esp),%esi
		mov    %si,0xc(%eax)
		mov    0x4(%esp),%eax
		imul   %eax,%eax
		add    %edx,%eax
		call   ac_LbSqrL
		mov    %eax,%esi
		shr    $0x5,%esi
		mov    %ecx,0x8(%esp)
		test   %esi,%esi
		jne    jump_5d538
		mov    $0x1,%esi
	jump_5d538:
		mov    0x8(%esp),%edx
		shl    $0xa,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %esi
		mov    0x4(%esp),%edx
		shl    $0xa,%edx
		mov    %eax,0x8(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %esi
		mov    %ebx,%ebp
		shl    $0xa,%edi
		shl    $0xa,%ebp
		mov    %eax,0x4(%esp)
		test   %esi,%esi
		jl     jump_5d5a0
	jump_5d568:
		xor    %eax,%eax
		mov    0xc(%esp),%ax
		push   %eax
		mov    %ebp,%eax
		sar    $0xa,%eax
		mov    0x2a(%esp),%ebx
		movswl %ax,%edx
		mov    %edi,%eax
		mov    $0x2,%ecx
		sar    $0xa,%eax
		sar    $0x10,%ebx
		cwtl
		dec    %esi
		call   dynamic_add_collision_to_single_mapwho
		mov    0x8(%esp),%eax
		mov    0x4(%esp),%edx
		add    %eax,%edi
		add    %edx,%ebp
		test   %esi,%esi
		jge    jump_5d568
	jump_5d5a0:
		mov    0xc(%esp),%eax
	jump_5d5a4:
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x10


/*----------------------------------------------------------------*/
del_col_vect_from_mapwho:	/* 0x05D5B0 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    game_col_vects_list,%ebp
		mov    %bx,0x4(%esp)
		movswl %ax,%esi
		sar    $0x8,%esi
		test   %esi,%esi
		jl     jump_5d683
		cmp    $0x80,%esi
		jge    jump_5d683
		movswl %dx,%ecx
		sar    $0x8,%ecx
		test   %ecx,%ecx
		jl     jump_5d683
		cmp    $0x80,%ecx
		jge    jump_5d683
		shl    $0x7,%ecx
		add    %ecx,%esi
		lea    0x0(,%esi,8),%ecx
		add    %esi,%ecx
		mov    EXPORT_SYMBOL(game_my_big_map),%esi
		add    %ecx,%ecx
		add    %ecx,%esi
		xor    %ebx,%ebx
		mov    0xa(%esi),%ax
		mov    %esi,(%esp)
		test   %ax,%ax
		je     jump_5d683
	jump_5d61b:
		xor    %ecx,%ecx
		mov    %ax,%cx
		imul   $0x6,%ecx,%esi
		mov    %ebp,%ecx
		xor    %edi,%edi
		mov    0x2(%ecx,%esi,1),%dx
		mov    (%ecx,%esi,1),%di
		mov    0x2(%esp),%esi
		sar    $0x10,%esi
		cmp    %esi,%edi
		jne    jump_5d677
		test   %bx,%bx
		je     jump_5d64f
		xor    %esi,%esi
		mov    %bx,%si
		imul   $0x6,%esi,%esi
		mov    %dx,0x2(%ecx,%esi,1)
		jmp    jump_5d65b
	jump_5d64f:
		mov    %edx,%ebx
		mov    (%esp),%ecx
		and    $0x7f,%bh
		mov    %bx,0xa(%ecx)
	jump_5d65b:
		xor    %ecx,%ecx
		mov    %ax,%cx
		imul   $0x6,%ecx,%esi
		mov    %ebp,%ecx
		mov    EXPORT_SYMBOL(link__MapColListEmptyHead),%bx
		mov    %ax,EXPORT_SYMBOL(link__MapColListEmptyHead)
		mov    %bx,0x2(%ecx,%esi,1)
	jump_5d677:
		and    $0x7f,%dh
		mov    %eax,%ebx
		mov    %edx,%eax
		test   %dx,%dx
		jne    jump_5d61b
	jump_5d683:
		xor    %eax,%eax
		mov    %ebp,game_col_vects_list
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
delete_vect:	/* 0x05D694 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x20,%esp
		mov    %eax,%esi
		cmpw   $0x0,0x38(%esp)
		je     jump_5d846
		movswl %ax,%edx
		test   %edx,%edx
		jl     jump_5d846
		cmp    $0x8000,%edx
		jg     jump_5d846
		movswl %cx,%eax
		test   %eax,%eax
		jl     jump_5d846
		cmp    $0x8000,%eax
		jg     jump_5d846
		movswl %bx,%ecx
		test   %ecx,%ecx
		jl     jump_5d846
		cmp    $0x8000,%ecx
		jg     jump_5d846
		mov    0x32(%esp),%edi
		sar    $0x10,%edi
		test   %edi,%edi
		jl     jump_5d846
		cmp    $0x8000,%edi
		jg     jump_5d846
		sub    %edx,%eax
		mov    %eax,%edx
		imul   %eax,%edx
		sub    %ecx,%edi
		mov    %eax,(%esp)
		mov    %edi,%eax
		imul   %edi,%eax
		add    %edx,%eax
		call   ac_LbSqrL
		shr    $0x8,%eax
		mov    %edi,0x4(%esp)
		mov    %eax,0x10(%esp)
		test   %eax,%eax
		jne    jump_5d736
		movl   $0x1,0x10(%esp)
	jump_5d736:
		movswl %si,%eax
		shl    $0xa,%eax
		mov    (%esp),%edx
		mov    %eax,0x8(%esp)
		movswl %bx,%eax
		shl    $0xa,%edx
		shl    $0xa,%eax
		mov    0x10(%esp),%ebx
		mov    %eax,0xc(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    0x4(%esp),%edx
		shl    $0xa,%edx
		mov    %eax,(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,0x4(%esp)
		test   %ebx,%ebx
		jmp    jump_5d798
	jump_5d774:
		mov    (%esp),%eax
		mov    0x8(%esp),%edi
		mov    0xc(%esp),%ebp
		add    %eax,%edi
		add    0x4(%esp),%ebp
		mov    0x10(%esp),%eax
		mov    %edi,0x8(%esp)
		dec    %eax
		mov    %ebp,0xc(%esp)
		mov    %eax,0x10(%esp)
		test   %eax,%eax
	jump_5d798:
		jl     jump_5d818
		mov    0xc(%esp),%eax
		sar    $0xa,%eax
		mov    %eax,0x18(%esp)
		mov    0x8(%esp),%eax
		sar    $0xa,%eax
		lea    -0x100(%eax),%edx
		add    $0x200,%eax
		mov    %edx,0x1c(%esp)
		mov    %eax,0x14(%esp)
		jmp    jump_5d7db
	jump_5d7c5:
		mov    0x1c(%esp),%ebx
		add    $0x100,%ebx
		mov    0x14(%esp),%ecx
		mov    %ebx,0x1c(%esp)
		cmp    %ecx,%ebx
		je     jump_5d774
	jump_5d7db:
		mov    0x1c(%esp),%edi
		mov    0x18(%esp),%esi
		mov    0x18(%esp),%ebp
		sub    $0x100,%esi
		add    $0x200,%ebp
	jump_5d7f3:
		mov    0x36(%esp),%ebx
		movswl %si,%edx
		xor    %ecx,%ecx
		movswl %di,%eax
		mov    0x3c(%esp),%cx
		sar    $0x10,%ebx
		add    $0x100,%esi
		call   del_col_vect_from_mapwho
		cmp    %ebp,%esi
		je     jump_5d7c5
		jmp    jump_5d7f3
	jump_5d818:
		mov    0x36(%esp),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,8),%eax
		sub    %edx,%eax
		mov    game_col_vects,%edx
		add    %eax,%eax
		add    %eax,%edx
		mov    EXPORT_SYMBOL(link__MapColVectEmptyHead),%ax
		mov    %ax,0xc(%edx)
		mov    0x38(%esp),%eax
		mov    %ax,EXPORT_SYMBOL(link__MapColVectEmptyHead)
	jump_5d846:
		add    $0x20,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x10


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_get_my_texture_bits)	/* 0x05D850 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		movswl %ax,%ecx
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		mov    game_textures,%ecx
		add    %eax,%eax
		add    %ecx,%eax
		xor    %dl,%dl
		xor    %ecx,%ecx
		movzbl 0x2(%eax),%esi
		mov    (%eax),%cl
		xor    %bl,%bl
		cmp    %esi,%ecx
		jl     jump_5d881
		mov    %esi,%ecx
	jump_5d881:
		movzbl 0x4(%eax),%esi
		cmp    %esi,%ecx
		jl     jump_5d88b
		mov    %esi,%ecx
	jump_5d88b:
		movzbl 0x6(%eax),%esi
		cmp    %esi,%ecx
		jl     jump_5d895
		mov    %esi,%ecx
	jump_5d895:
		movzbl 0x1(%eax),%esi
		movzbl 0x3(%eax),%edi
		cmp    %edi,%esi
		jl     jump_5d8a3
		mov    %edi,%esi
	jump_5d8a3:
		movzbl 0x5(%eax),%edi
		cmp    %edi,%esi
		jl     jump_5d8ad
		mov    %edi,%esi
	jump_5d8ad:
		movzbl 0x7(%eax),%edi
		cmp    %edi,%esi
		jl     jump_5d8b7
		mov    %edi,%esi
	jump_5d8b7:
		movzbl (%eax),%ebp
		movzbl 0x2(%eax),%edi
		cmp    %edi,%ebp
		jle    jump_5d8c4
		mov    %ebp,%edi
	jump_5d8c4:
		movzbl 0x4(%eax),%ebp
		cmp    %ebp,%edi
		jg     jump_5d8ce
		mov    %ebp,%edi
	jump_5d8ce:
		movzbl 0x6(%eax),%ebp
		cmp    %ebp,%edi
		jg     jump_5d8d8
		mov    %ebp,%edi
	jump_5d8d8:
		mov    %edi,0x8(%esp)
		movzbl 0x3(%eax),%ebp
		movzbl 0x1(%eax),%edi
		cmp    %ebp,%edi
		jg     jump_5d8ea
		mov    %ebp,%edi
	jump_5d8ea:
		movzbl 0x5(%eax),%ebp
		cmp    %ebp,%edi
		jg     jump_5d8f4
		mov    %ebp,%edi
	jump_5d8f4:
		movzbl 0x7(%eax),%ebp
		cmp    %ebp,%edi
		jg     jump_5d8fe
		mov    %ebp,%edi
	jump_5d8fe:
		mov    %esi,%ebp
		sar    $0x5,%ebp
		shl    $0x3,%ebp
		mov    %ebp,0x4(%esp)
		mov    %ecx,%ebp
		sar    $0x5,%ebp
		add    0x4(%esp),%ebp
		mov    %ebp,(%esp)
		movzbl 0x8(%eax),%ebp
		shl    $0x6,%ebp
		add    (%esp),%ebp
		mov    textwalk_data(%ebp),%dh
		movzbl (%eax),%ebp
		cmp    %ebp,%ecx
		jne    jump_5d93a
		movzbl 0x1(%eax),%ebp
		cmp    %ebp,%esi
		jne    jump_5d93a
		mov    %dh,%dl
		and    $0x3,%dl
	jump_5d93a:
		movzbl (%eax),%ebp
		cmp    0x8(%esp),%ebp
		jne    jump_5d95e
		movzbl 0x1(%eax),%ebp
		cmp    %ebp,%esi
		jne    jump_5d95e
		mov    %dh,%dl
		and    $0xc,%dl
		movzbl %dl,%ebp
		sar    $0x2,%ebp
		mov    %ebp,0x4(%esp)
		mov    0x4(%esp),%dl
	jump_5d95e:
		movzbl (%eax),%ebp
		cmp    %ebp,%ecx
		jne    jump_5d980
		movzbl 0x1(%eax),%ebp
		cmp    %ebp,%edi
		jne    jump_5d980
		mov    %dh,%dl
		and    $0x30,%dl
		movzbl %dl,%ebp
		sar    $0x4,%ebp
		mov    %ebp,0x4(%esp)
		mov    0x4(%esp),%dl
	jump_5d980:
		movzbl (%eax),%ebp
		cmp    0x8(%esp),%ebp
		jne    jump_5d9a4
		movzbl 0x1(%eax),%ebp
		cmp    %ebp,%edi
		jne    jump_5d9a4
		mov    %dh,%dl
		and    $0xc0,%dl
		movzbl %dl,%ebp
		sar    $0x6,%ebp
		mov    %ebp,0x4(%esp)
		mov    0x4(%esp),%dl
	jump_5d9a4:
		movzbl 0x2(%eax),%ebp
		or     %dl,%bl
		xor    %dl,%dl
		cmp    %ebp,%ecx
		jne    jump_5d9bd
		movzbl 0x3(%eax),%ebp
		cmp    %ebp,%esi
		jne    jump_5d9bd
		mov    %dh,%dl
		and    $0x3,%dl
	jump_5d9bd:
		movzbl 0x2(%eax),%ebp
		cmp    0x8(%esp),%ebp
		jne    jump_5d9e2
		movzbl 0x3(%eax),%ebp
		cmp    %ebp,%esi
		jne    jump_5d9e2
		mov    %dh,%dl
		and    $0xc,%dl
		movzbl %dl,%ebp
		sar    $0x2,%ebp
		mov    %ebp,0x4(%esp)
		mov    0x4(%esp),%dl
	jump_5d9e2:
		movzbl 0x2(%eax),%ebp
		cmp    %ebp,%ecx
		jne    jump_5da05
		movzbl 0x3(%eax),%ebp
		cmp    %ebp,%edi
		jne    jump_5da05
		mov    %dh,%dl
		and    $0x30,%dl
		movzbl %dl,%ebp
		sar    $0x4,%ebp
		mov    %ebp,0x4(%esp)
		mov    0x4(%esp),%dl
	jump_5da05:
		movzbl 0x2(%eax),%ebp
		cmp    0x8(%esp),%ebp
		jne    jump_5da2a
		movzbl 0x3(%eax),%ebp
		cmp    %ebp,%edi
		jne    jump_5da2a
		mov    %dh,%dl
		and    $0xc0,%dl
		movzbl %dl,%ebp
		sar    $0x6,%ebp
		mov    %ebp,0x4(%esp)
		mov    0x4(%esp),%dl
	jump_5da2a:
		movzbl 0x4(%eax),%ebp
		shl    $0x2,%dl
		or     %dl,%bl
		xor    %dl,%dl
		cmp    %ebp,%ecx
		jne    jump_5da46
		movzbl 0x5(%eax),%ebp
		cmp    %ebp,%esi
		jne    jump_5da46
		mov    %dh,%dl
		and    $0x3,%dl
	jump_5da46:
		movzbl 0x4(%eax),%ebp
		cmp    0x8(%esp),%ebp
		jne    jump_5da6b
		movzbl 0x5(%eax),%ebp
		cmp    %ebp,%esi
		jne    jump_5da6b
		mov    %dh,%dl
		and    $0xc,%dl
		movzbl %dl,%ebp
		sar    $0x2,%ebp
		mov    %ebp,0x4(%esp)
		mov    0x4(%esp),%dl
	jump_5da6b:
		movzbl 0x4(%eax),%ebp
		cmp    %ebp,%ecx
		jne    jump_5da8e
		movzbl 0x5(%eax),%ebp
		cmp    %ebp,%edi
		jne    jump_5da8e
		mov    %dh,%dl
		and    $0x30,%dl
		movzbl %dl,%ebp
		sar    $0x4,%ebp
		mov    %ebp,0x4(%esp)
		mov    0x4(%esp),%dl
	jump_5da8e:
		movzbl 0x4(%eax),%ebp
		cmp    0x8(%esp),%ebp
		jne    jump_5dab3
		movzbl 0x5(%eax),%ebp
		cmp    %ebp,%edi
		jne    jump_5dab3
		mov    %dh,%dl
		and    $0xc0,%dl
		movzbl %dl,%ebp
		sar    $0x6,%ebp
		mov    %ebp,0x4(%esp)
		mov    0x4(%esp),%dl
	jump_5dab3:
		movzbl 0x6(%eax),%ebp
		shl    $0x4,%dl
		or     %dl,%bl
		xor    %dl,%dl
		cmp    %ebp,%ecx
		jne    jump_5dacf
		movzbl 0x7(%eax),%ebp
		cmp    %ebp,%esi
		jne    jump_5dacf
		mov    %dh,%dl
		and    $0x3,%dl
	jump_5dacf:
		movzbl 0x6(%eax),%ebp
		cmp    0x8(%esp),%ebp
		jne    jump_5daf4
		movzbl 0x7(%eax),%ebp
		cmp    %ebp,%esi
		jne    jump_5daf4
		mov    %dh,%dl
		and    $0xc,%dl
		movzbl %dl,%esi
		sar    $0x2,%esi
		mov    %esi,0x4(%esp)
		mov    0x4(%esp),%dl
	jump_5daf4:
		movzbl 0x6(%eax),%esi
		cmp    %ecx,%esi
		jne    jump_5db13
		xor    %ecx,%ecx
		mov    0x7(%eax),%cl
		cmp    %edi,%ecx
		jne    jump_5db13
		mov    %dh,%dl
		xor    %edi,%ecx
		and    $0x30,%dl
		mov    %dl,%cl
		sar    $0x4,%ecx
		mov    %cl,%dl
	jump_5db13:
		xor    %ecx,%ecx
		mov    0x8(%esp),%esi
		mov    0x6(%eax),%cl
		cmp    %esi,%ecx
		jne    jump_5db3a
		mov    0x7(%eax),%al
		and    $0xff,%eax
		cmp    %edi,%eax
		jne    jump_5db3a
		mov    %dh,%al
		and    $0xc0,%al
		and    $0xff,%eax
		sar    $0x6,%eax
		mov    %al,%dl
	jump_5db3a:
		mov    %dl,%al
		shl    $0x6,%al
		or     %bl,%al
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_search_object_for_qface)	/* 0x05DB4C */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		sub    $0x8,%esp
		mov    %dl,0x4(%esp)
		mov    %bl,(%esp)
		mov    %ecx,%edi
		xor    %ebx,%ebx
		mov    %ax,%bx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		mov    game_objects,%ecx
		shl    $0x2,%eax
		add    %eax,%ecx
		cmpw   $0x0,0x8(%ecx)
		je     jump_5dbd7
		xor    %ebx,%ebx
		mov    0x6(%ecx),%bx
		lea    0x0(,%ebx,4),%eax
		add    %eax,%ebx
		mov    game_object_faces4,%eax
		shl    $0x3,%ebx
		mov    0x6(%ecx),%dx
		add    %ebx,%eax
		jmp    jump_5db9d
	jump_5db99:
		add    $0x28,%eax
		inc    %edx
	jump_5db9d:
		xor    %ebx,%ebx
		xor    %esi,%esi
		mov    0x6(%ecx),%bx
		mov    0x8(%ecx),%si
		add    %ebx,%esi
		movswl %dx,%ebx
		cmp    %esi,%ebx
		jge    jump_5dbd7
		xor    %esi,%esi
		mov    %di,%si
		cmp    %esi,%ebx
		jle    jump_5db99
		xor    %ebx,%ebx
		movzbl 0xa(%eax),%esi
		mov    0x4(%esp),%bl
		and    %ebx,%esi
		cmp    %ebx,%esi
		jne    jump_5db99
		mov    0xb(%eax),%bl
		cmp    (%esp),%bl
		jne    jump_5db99
		mov    %edx,%eax
		jmp    jump_5dbd9
	jump_5dbd7:
		xor    %eax,%eax
	jump_5dbd9:
		add    $0x8,%esp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_get_height_on_face)	/* 0x05DD7C */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x34,%esp
		mov    %eax,%ecx
		mov    %edx,%esi
		xor    %eax,%eax
		mov    %bx,%ax
		mov    game_object_faces,%ebx
		shl    $0x5,%eax
		add    %eax,%ebx
		xor    %edx,%edx
		mov    0xc(%ebx),%dx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    game_objects,%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0x12(%edx),%eax
		sar    $0x10,%eax
		mov    %eax,(%esp)
		mov    0x14(%edx),%eax
		xor    %edi,%edi
		sar    $0x10,%eax
		mov    (%ebx),%di
		mov    %eax,0x4(%esp)
		lea    0x0(,%edi,4),%eax
		add    %edi,%eax
		mov    EXPORT_SYMBOL(game_object_points),%edi
		add    %eax,%eax
		add    %edi,%eax
		mov    %edi,0x8(%esp)
		mov    (%eax),%ebp
		mov    (%esp),%edi
		sar    $0x10,%ebp
		mov    0xc(%edx),%edx
		add    %edi,%ebp
		mov    0x2(%eax),%edi
		sar    $0x10,%edx
		sar    $0x10,%edi
		mov    0x4(%eax),%eax
		add    %edx,%edi
		sar    $0x10,%eax
		mov    %edi,0x2c(%esp)
		mov    0x4(%esp),%edi
		add    %eax,%edi
		xor    %eax,%eax
		mov    0x2(%ebx),%ax
		mov    %eax,0xc(%esp)
		mov    %edi,0x30(%esp)
		mov    0xc(%esp),%edi
		shl    $0x2,%eax
		add    %edi,%eax
		mov    0x8(%esp),%edi
		add    %eax,%eax
		add    %edi,%eax
		mov    (%eax),%edi
		sar    $0x10,%edi
		mov    %edi,0xc(%esp)
		mov    (%esp),%edi
		add    0xc(%esp),%edi
		mov    %edi,0x18(%esp)
		mov    0x2(%eax),%edi
		sar    $0x8,%ecx
		sar    $0x10,%edi
		mov    0x4(%eax),%eax
		add    %edx,%edi
		sar    $0x10,%eax
		mov    %edi,0x14(%esp)
		mov    0x4(%esp),%edi
		sar    $0x8,%esi
		add    %eax,%edi
		mov    0x4(%ebx),%bx
		mov    %edi,0x1c(%esp)
		and    $0xffff,%ebx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		mov    0x8(%esp),%ebx
		add    %eax,%eax
		add    %ebx,%eax
		mov    (%eax),%edi
		mov    (%esp),%ebx
		sar    $0x10,%edi
		add    %ebx,%edi
		mov    0x2(%eax),%ebx
		sar    $0x10,%ebx
		mov    0x4(%eax),%eax
		sar    $0x10,%eax
		add    %edx,%ebx
		mov    0x4(%esp),%edx
		mov    %ebx,0x10(%esp)
		mov    0x30(%esp),%ebx
		add    %edx,%eax
		mov    %esi,%edx
		sub    %ebp,%edi
		sub    %ebx,%edx
		imul   %edi,%edx
		mov    %ebp,%ebx
		sub    %ecx,%ebx
		mov    %ebx,0xc(%esp)
		mov    0x30(%esp),%ebx
		sub    %ebx,%eax
		mov    %eax,0x28(%esp)
		mov    0xc(%esp),%eax
		imul   0x28(%esp),%eax
		mov    0x30(%esp),%ebx
		add    %eax,%edx
		mov    0x1c(%esp),%eax
		sub    %ebx,%eax
		mov    %eax,0x24(%esp)
		imul   %edi,%eax
		mov    %eax,0xc(%esp)
		mov    0x18(%esp),%eax
		sub    %ebp,%eax
		mov    %eax,0x20(%esp)
		mov    %eax,%ebx
		imul   0x28(%esp),%ebx
		mov    0xc(%esp),%eax
		sub    %ebx,%eax
		mov    %eax,%ebx
		je     jump_5df85
		shl    $0x9,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,%ebx
		test   %eax,%eax
		jl     jump_5df83
		test   %edi,%edi
		jne    jump_5df34
		mov    0x24(%esp),%edx
		imul   %ebx,%edx
		mov    0x30(%esp),%eax
		shl    $0x9,%esi
		shl    $0x9,%eax
		sub    %eax,%esi
		sub    %edx,%esi
		mov    0x28(%esp),%ecx
		mov    %esi,%edx
		mov    %esi,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		jmp    jump_5df4e
	jump_5df34:
		mov    0x20(%esp),%edx
		imul   %eax,%edx
		shl    $0x9,%ecx
		shl    $0x9,%ebp
		sub    %ebp,%ecx
		sub    %edx,%ecx
		mov    %ecx,%edx
		mov    %ecx,%eax
		sar    $0x1f,%edx
		idiv   %edi
	jump_5df4e:
		test   %eax,%eax
		jl     jump_5df83
		lea    (%ebx,%eax,1),%edx
		cmp    $0x200,%edx
		jge    jump_5df83
		mov    0x10(%esp),%edx
		mov    0x2c(%esp),%esi
		sub    %esi,%edx
		imul   %edx,%eax
		sar    $0x9,%eax
		lea    (%esi,%eax,1),%edx
		mov    0x14(%esp),%eax
		sub    %esi,%eax
		imul   %ebx,%eax
		sar    $0x9,%eax
		add    %edx,%eax
		shl    $0x5,%eax
		jmp    jump_5df85
	jump_5df83:
		xor    %eax,%eax
	jump_5df85:
		add    $0x34,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_5df8d:
		mov    %esi,%eax
		sar    $0x3,%eax
		add    $0x3c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_get_height_on_face_quad)	/* 0x05DF9C */
/*----------------------------------------------------------------*/
		and    $0xffff,%ebx
		mov    %eax,%eax
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x3c,%esp
		mov    %eax,%ecx
		mov    %edx,%esi
		xor    %eax,%eax
		mov    %bx,%ax
		mov    %eax,%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    game_object_faces4,%eax
		shl    $0x3,%edx
		add    %edx,%eax
		xor    %ebx,%ebx
		mov    0xe(%eax),%bx
		lea    0x0(,%ebx,8),%edx
		add    %ebx,%edx
		mov    game_objects,%ebx
		shl    $0x2,%edx
		add    %edx,%ebx
		mov    0x12(%ebx),%edx
		sar    $0x10,%edx
		mov    %edx,0x8(%esp)
		mov    0x14(%ebx),%edx
		sar    $0x10,%edx
		mov    %edx,0xc(%esp)
		mov    0xc(%ebx),%edx
		xor    %ebx,%ebx
		sar    $0x10,%edx
		mov    (%eax),%bx
		mov    %edx,0x10(%esp)
		lea    0x0(,%ebx,4),%edx
		add    %ebx,%edx
		mov    EXPORT_SYMBOL(game_object_points),%edi
		add    %edx,%edx
		lea    (%edx,%edi,1),%ebx
		mov    (%ebx),%edx
		mov    0x8(%esp),%ebp
		sar    $0x10,%edx
		add    %ebp,%edx
		mov    0x2(%ebx),%ebp
		sar    $0x10,%ebp
		mov    %ebp,0x14(%esp)
		mov    0x10(%esp),%ebp
		mov    0x4(%ebx),%ebx
		add    0x14(%esp),%ebp
		sar    $0x10,%ebx
		mov    %ebp,0x34(%esp)
		mov    0xc(%esp),%ebp
		add    %ebx,%ebp
		xor    %ebx,%ebx
		mov    0x2(%eax),%bx
		mov    %ebx,0x14(%esp)
		mov    %ebp,0x30(%esp)
		mov    0x14(%esp),%ebp
		shl    $0x2,%ebx
		add    %ebp,%ebx
		add    %ebx,%ebx
		lea    (%ebx,%edi,1),%ebp
		mov    0x0(%ebp),%ebx
		sar    $0x10,%ebx
		mov    %ebx,0x14(%esp)
		mov    0x8(%esp),%ebx
		add    0x14(%esp),%ebx
		mov    %ebx,(%esp)
		mov    0x2(%ebp),%ebx
		sar    $0x10,%ebx
		mov    %ebx,0x14(%esp)
		mov    0x10(%esp),%ebx
		mov    0x4(%ebp),%ebp
		add    0x14(%esp),%ebx
		sar    $0x10,%ebp
		mov    %ebx,0x4(%esp)
		mov    0xc(%esp),%ebx
		add    %ebp,%ebx
		movzwl 0x4(%eax),%ebp
		lea    0x0(,%ebp,4),%eax
		add    %ebp,%eax
		add    %eax,%eax
		add    %edi,%eax
		mov    %ebx,0x20(%esp)
		mov    (%eax),%ebx
		mov    0x8(%esp),%edi
		sar    $0x10,%ebx
		add    %ebx,%edi
		mov    %edi,0x24(%esp)
		mov    0x2(%eax),%ebx
		mov    0x10(%esp),%edi
		mov    0x4(%eax),%eax
		sar    $0x10,%ebx
		sar    $0x10,%eax
		add    %edi,%ebx
		mov    0xc(%esp),%edi
		add    %eax,%edi
		mov    (%esp),%eax
		sub    %edx,%eax
		shl    $0x8,%eax
		mov    0x34(%esp),%ebp
		mov    %eax,0x28(%esp)
		mov    0x4(%esp),%eax
		sub    %ebp,%eax
		shl    $0x8,%eax
		mov    0x30(%esp),%ebp
		mov    %eax,0x1c(%esp)
		mov    0x20(%esp),%eax
		sub    %ebp,%eax
		shl    $0x8,%eax
		mov    %eax,0x2c(%esp)
		mov    0x34(%esp),%eax
		mov    0x24(%esp),%ebp
		sub    %eax,%ebx
		sub    %edx,%ebp
		shl    $0x8,%ebx
		shl    $0x8,%edx
		mov    %ebx,0x18(%esp)
		mov    0x30(%esp),%ebx
		sub    %edx,%ecx
		sub    %ebx,%edi
		mov    %ebx,%eax
		shl    $0x8,%edi
		shl    $0x8,%eax
		mov    %edi,%ebx
		sub    %eax,%esi
		mov    %ecx,%eax
		shl    $0x8,%ebp
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    %eax,0x14(%esp)
		mov    %ebp,%ebx
		mov    %esi,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    0x14(%esp),%edx
		mov    0x28(%esp),%ebx
		sub    %eax,%edx
		mov    %edi,%eax
		mov    %edx,0x38(%esp)
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    0x2c(%esp),%ebx
		mov    %eax,%edi
		mov    %ebp,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		sub    %eax,%edi
		jne    jump_5e178
		mov    $0x1,%edi
	jump_5e178:
		mov    0x38(%esp),%edx
		mov    %edi,%ebx
		mov    %edx,%eax
		shl    $0x10,%eax
		sar    $0x10,%edx
		idiv   %ebx
		mov    0x28(%esp),%ebx
		mov    %eax,%ebp
		mov    %esi,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    0x2c(%esp),%ebx
		mov    %eax,%esi
		mov    %ecx,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		sub    %eax,%esi
		mov    %edi,%ebx
		mov    %esi,%edx
		mov    %esi,0x38(%esp)
		mov    %edx,%eax
		shl    $0x10,%eax
		sar    $0x10,%edx
		idiv   %ebx
		mov    0x34(%esp),%esi
		mov    0x1c(%esp),%ebx
		mov    %eax,%ecx
		mov    %ebp,%eax
		shl    $0x8,%esi
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    0x18(%esp),%ebx
		add    %eax,%esi
		mov    %ecx,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		add    %eax,%esi
		test   %ebp,%ebp
		jl     jump_5e201
		cmp    $0x10000,%ebp
		jg     jump_5e201
		test   %ecx,%ecx
		jl     jump_5e201
		cmp    $0x10000,%ecx
		jle    jump_5df8d
	jump_5e201:
		xor    %eax,%eax
		add    $0x3c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
set_thing_height_on_face_tri64:	/* 0x05E20C */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x44,%esp
		mov    %eax,0x28(%esp)
		mov    %edx,%edi
		mov    %ebx,%esi
		xor    %ebx,%ebx
		mov    %cx,%bx
		mov    game_object_faces,%eax
		shl    $0x5,%ebx
		mov    EXPORT_SYMBOL(next_object_face),%dx
		add    %eax,%ebx
		cmp    %dx,%cx
		jbe    jump_5e23c
		xor    %eax,%eax
		jmp    jump_5e4f5
	jump_5e23c:
		xor    %edx,%edx
		mov    0xc(%ebx),%dx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    game_objects,%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0x12(%edx),%eax
		sar    $0x10,%eax
		mov    %eax,0x10(%esp)
		mov    0x14(%edx),%eax
		sar    $0x10,%eax
		mov    %eax,0x14(%esp)
		mov    0xc(%edx),%eax
		xor    %edx,%edx
		sar    $0x10,%eax
		mov    (%ebx),%dx
		mov    %eax,0x18(%esp)
		lea    0x0(,%edx,4),%eax
		add    %eax,%edx
		mov    EXPORT_SYMBOL(game_object_points),%eax
		add    %edx,%edx
		mov    %eax,0x1c(%esp)
		add    %edx,%eax
		mov    (%eax),%edx
		mov    0x10(%esp),%ecx
		sar    $0x10,%edx
		add    %ecx,%edx
		mov    0x2(%eax),%ecx
		mov    0x18(%esp),%ebp
		sar    $0x10,%ecx
		add    %ecx,%ebp
		mov    %ebp,0x40(%esp)
		mov    0x4(%eax),%ecx
		xor    %eax,%eax
		mov    0x14(%esp),%ebp
		mov    0x2(%ebx),%ax
		sar    $0x10,%ecx
		mov    %eax,0x20(%esp)
		add    %ebp,%ecx
		mov    0x20(%esp),%ebp
		shl    $0x2,%eax
		add    %ebp,%eax
		mov    0x1c(%esp),%ebp
		add    %eax,%eax
		add    %ebp,%eax
		mov    (%eax),%ebp
		sar    $0x10,%ebp
		mov    %ebp,0x20(%esp)
		mov    0x10(%esp),%ebp
		add    0x20(%esp),%ebp
		mov    %ebp,(%esp)
		mov    0x2(%eax),%ebp
		sar    $0x10,%ebp
		mov    %ebp,0x20(%esp)
		mov    0x18(%esp),%ebp
		mov    0x4(%eax),%eax
		add    0x20(%esp),%ebp
		sar    $0x10,%eax
		mov    %ebp,0x4(%esp)
		mov    0x14(%esp),%ebp
		add    %eax,%ebp
		mov    0x4(%ebx),%bx
		mov    %ebp,0x8(%esp)
		and    $0xffff,%ebx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		mov    0x1c(%esp),%ebx
		add    %eax,%eax
		add    %ebx,%eax
		mov    (%eax),%ebx
		mov    0x10(%esp),%ebp
		sar    $0x10,%ebx
		add    %ebx,%ebp
		mov    %ebp,0xc(%esp)
		mov    0x2(%eax),%ebx
		mov    0x18(%esp),%ebp
		mov    0x4(%eax),%eax
		sar    $0x10,%ebx
		sar    $0x10,%eax
		add    %ebp,%ebx
		add    0x14(%esp),%eax
		mov    (%esp),%ebp
		sub    %edx,%ebp
		shl    $0x8,%ebp
		mov    %ebp,0x34(%esp)
		mov    0x4(%esp),%ebp
		sub    0x40(%esp),%ebp
		shl    $0x8,%ebp
		mov    %ebp,0x24(%esp)
		mov    0x8(%esp),%ebp
		sub    %ecx,%ebp
		shl    $0x8,%ebp
		mov    %ebp,0x30(%esp)
		mov    0xc(%esp),%ebp
		sub    %edx,%ebp
		shl    $0x8,%ebp
		mov    %ebp,0x38(%esp)
		mov    0x40(%esp),%ebp
		shl    $0x8,%edx
		sub    %ebp,%ebx
		mov    %eax,%ebp
		sub    %edx,%edi
		sub    %ecx,%ebp
		shl    $0x8,%ecx
		shl    $0x8,%ebx
		sub    %ecx,%esi
		mov    %edi,%ecx
		mov    %ebx,0x2c(%esp)
		sar    $0x8,%ecx
		mov    %esi,%ebx
		mov    %ecx,%eax
		sar    $0x8,%ebx
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,0x20(%esp)
		mov    %ebx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    0x20(%esp),%edx
		shl    $0x8,%ebp
		cmp    %edx,%eax
		jge    jump_5e3d8
		mov    %ebx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebx
		mov    %ecx,%eax
		sar    %ebx
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		add    %ebx,%eax
		jmp    jump_5e3ec
	jump_5e3d8:
		mov    %ecx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ecx
		mov    %ebx,%eax
		sar    %ecx
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		add    %ecx,%eax
	jump_5e3ec:
		cmp    $0xa00,%eax
		jle    jump_5e3fc
		xor    %eax,%eax
		add    $0x44,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_5e3fc:
		mov    %ebp,%ebx
		mov    %edi,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    0x38(%esp),%ebx
		mov    %eax,%ecx
		mov    %esi,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    0x34(%esp),%ebx
		sub    %eax,%ecx
		mov    %ebp,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    0x30(%esp),%ebx
		mov    %eax,%ebp
		mov    0x38(%esp),%eax
		mov    %ecx,0x3c(%esp)
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		sub    %eax,%ebp
		jne    jump_5e447
		mov    $0x1,%ebp
	jump_5e447:
		mov    0x3c(%esp),%edx
		mov    %ebp,%ebx
		mov    %edx,%eax
		shl    $0x10,%eax
		sar    $0x10,%edx
		idiv   %ebx
		mov    0x34(%esp),%ebx
		mov    %eax,%ecx
		mov    %esi,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    0x30(%esp),%ebx
		mov    %eax,%esi
		mov    %edi,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		sub    %eax,%esi
		mov    %ebp,%ebx
		mov    %esi,%edx
		mov    %esi,0x3c(%esp)
		mov    %edx,%eax
		shl    $0x10,%eax
		sar    $0x10,%edx
		idiv   %ebx
		mov    %eax,%esi
		test   %ecx,%ecx
		jl     jump_5e4a4
		cmp    $0x10000,%ecx
		jg     jump_5e4a4
		test   %eax,%eax
		jl     jump_5e4a4
		cmp    $0x10000,%eax
		jle    jump_5e4ad
	jump_5e4a4:
		xor    %eax,%eax
		add    $0x44,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_5e4ad:
		add    %ecx,%eax
		cmp    $0x10000,%eax
		jle    jump_5e4bf
		xor    %eax,%eax
		add    $0x44,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_5e4bf:
		mov    0x24(%esp),%ebx
		mov    %ecx,%eax
		mov    0x40(%esp),%edi
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		shl    $0x8,%edi
		mov    0x2c(%esp),%ebx
		add    %eax,%edi
		mov    %esi,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		add    %eax,%edi
		mov    0x28(%esp),%eax
		sar    $0x3,%edi
		mov    %edi,0x1c(%eax)
		mov    $0x1,%eax
	jump_5e4f5:
		add    $0x44,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_set_thing_height_on_face_tri)	/* 0x05E4FC */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    %eax,%ebp
		mov    %edx,%esi
		mov    %ebx,%edi
		and    $0xffff,%ecx
		mov    %ecx,%eax
		mov    game_object_faces,%edx
		shl    $0x5,%eax
		add    %edx,%eax
		mov    %esi,%edx
		call   inside_the_triangle
		mov    %eax,(%esp)
		test   %eax,%eax
		je     jump_5e539
		mov    %edi,%ebx
		mov    %esi,%edx
		mov    %ebp,%eax
		call   set_thing_height_on_face_tri64
		mov    (%esp),%eax
		jmp    jump_5e53b
	jump_5e539:
		xor    %eax,%eax
	jump_5e53b:
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
set_thing_height_on_face_quad64:	/* 0x05E544 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x40,%esp
		mov    %eax,0x18(%esp)
		mov    %edx,%esi
		mov    %ebx,%edi
		cmp    EXPORT_SYMBOL(next_object_face4),%cx
		jbe    jump_5e562
		xor    %eax,%eax
		jmp    jump_5e7e7
	jump_5e562:
		xor    %edx,%edx
		mov    %cx,%dx
		lea    0x0(,%edx,4),%eax
		add    %eax,%edx
		mov    game_object_faces4,%eax
		shl    $0x3,%edx
		add    %edx,%eax
		xor    %ebx,%ebx
		mov    0xe(%eax),%bx
		lea    0x0(,%ebx,8),%edx
		add    %ebx,%edx
		mov    game_objects,%ebx
		shl    $0x2,%edx
		add    %edx,%ebx
		mov    0x14(%ebx),%edx
		sar    $0x10,%edx
		mov    0x12(%ebx),%ecx
		mov    %edx,0x8(%esp)
		mov    0xc(%ebx),%edx
		xor    %ebx,%ebx
		sar    $0x10,%edx
		mov    (%eax),%bx
		mov    %edx,0xc(%esp)
		lea    0x0(,%ebx,4),%edx
		add    %edx,%ebx
		mov    EXPORT_SYMBOL(game_object_points),%edx
		add    %ebx,%ebx
		add    %edx,%ebx
		mov    0x2(%ebx),%ebp
		mov    %edx,0x10(%esp)
		sar    $0x10,%ebp
		mov    (%ebx),%edx
		mov    %ebp,0x14(%esp)
		mov    0xc(%esp),%ebp
		mov    0x4(%ebx),%ebx
		add    0x14(%esp),%ebp
		sar    $0x10,%ebx
		mov    %ebp,0x38(%esp)
		mov    0x8(%esp),%ebp
		add    %ebx,%ebp
		xor    %ebx,%ebx
		mov    0x2(%eax),%bx
		mov    %ebx,0x14(%esp)
		mov    %ebp,0x3c(%esp)
		mov    0x14(%esp),%ebp
		shl    $0x2,%ebx
		add    %ebp,%ebx
		mov    0x10(%esp),%ebp
		add    %ebx,%ebx
		add    %ebx,%ebp
		mov    0x0(%ebp),%ebx
		sar    $0x10,%ebx
		sar    $0x10,%ecx
		add    %ecx,%ebx
		mov    %ebx,(%esp)
		mov    0x2(%ebp),%ebx
		sar    $0x10,%ebx
		mov    %ebx,0x14(%esp)
		mov    0xc(%esp),%ebx
		mov    0x4(%ebp),%ebp
		add    0x14(%esp),%ebx
		sar    $0x10,%ebp
		mov    %ebx,0x4(%esp)
		mov    0x8(%esp),%ebx
		add    %ebp,%ebx
		movzwl 0x4(%eax),%ebp
		lea    0x0(,%ebp,4),%eax
		mov    %ebx,0x24(%esp)
		add    %ebp,%eax
		mov    0x10(%esp),%ebx
		add    %eax,%eax
		add    %ebx,%eax
		mov    (%eax),%ebx
		sar    $0x10,%edx
		sar    $0x10,%ebx
		add    %ecx,%edx
		add    %ebx,%ecx
		mov    %ecx,0x28(%esp)
		mov    0x2(%eax),%ebx
		mov    0xc(%esp),%ecx
		mov    0x4(%eax),%eax
		sar    $0x10,%ebx
		sar    $0x10,%eax
		add    %ecx,%ebx
		mov    0x8(%esp),%ecx
		add    %eax,%ecx
		mov    (%esp),%eax
		sub    %edx,%eax
		shl    $0x8,%eax
		mov    0x38(%esp),%ebp
		mov    %eax,0x2c(%esp)
		mov    0x4(%esp),%eax
		sub    %ebp,%eax
		shl    $0x8,%eax
		mov    0x3c(%esp),%ebp
		mov    %eax,0x20(%esp)
		mov    0x24(%esp),%eax
		sub    %ebp,%eax
		shl    $0x8,%eax
		mov    %eax,0x30(%esp)
		mov    0x38(%esp),%eax
		mov    0x28(%esp),%ebp
		sub    %eax,%ebx
		sub    %edx,%ebp
		shl    $0x8,%ebx
		shl    $0x8,%edx
		mov    %ebx,0x1c(%esp)
		mov    0x3c(%esp),%ebx
		sub    %edx,%esi
		sub    %ebx,%ecx
		mov    %ebx,%eax
		shl    $0x8,%ecx
		shl    $0x8,%eax
		mov    %ecx,%ebx
		sub    %eax,%edi
		mov    %esi,%eax
		shl    $0x8,%ebp
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    %eax,0x14(%esp)
		mov    %ebp,%ebx
		mov    %edi,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    0x14(%esp),%edx
		mov    0x2c(%esp),%ebx
		sub    %eax,%edx
		mov    %ecx,%eax
		mov    %edx,0x34(%esp)
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    0x30(%esp),%ebx
		mov    %eax,%ecx
		mov    %ebp,%eax
		mov    %ecx,%ebp
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		sub    %eax,%ebp
		jne    jump_5e723
		mov    $0x1,%ebp
	jump_5e723:
		mov    0x34(%esp),%edx
		mov    %ebp,%ebx
		mov    %edx,%eax
		shl    $0x10,%eax
		sar    $0x10,%edx
		idiv   %ebx
		mov    0x2c(%esp),%ebx
		mov    %eax,%ecx
		mov    %edi,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    0x30(%esp),%ebx
		mov    %eax,%edi
		mov    %esi,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		sub    %eax,%edi
		mov    %ebp,%ebx
		mov    %edi,%edx
		mov    %edi,0x34(%esp)
		mov    %edx,%eax
		shl    $0x10,%eax
		sar    $0x10,%edx
		idiv   %ebx
		mov    %eax,%esi
		test   %ecx,%ecx
		jl     jump_5e780
		cmp    $0x10000,%ecx
		jg     jump_5e780
		test   %eax,%eax
		jl     jump_5e780
		cmp    $0x10000,%eax
		jle    jump_5e789
	jump_5e780:
		xor    %eax,%eax
		add    $0x40,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_5e789:
		lea    (%ecx,%eax,1),%ebp
		cmp    $0x20000,%ebp
		jle    jump_5e79d
		xor    %eax,%eax
		add    $0x40,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_5e79d:
		mov    0x20(%esp),%ebx
		mov    %ecx,%eax
		mov    0x38(%esp),%edi
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		shl    $0x8,%edi
		mov    0x1c(%esp),%ebx
		add    %eax,%edi
		mov    %esi,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		add    %eax,%edi
		mov    0x18(%esp),%eax
		sar    $0x3,%edi
		mov    %edi,0x1c(%eax)
		cmp    $0x10000,%ebp
		jle    jump_5e7e2
		mov    $0x2,%eax
		add    $0x40,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_5e7e2:
		mov    $0x1,%eax
	jump_5e7e7:
		add    $0x40,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_set_thing_height_on_face_quad)	/* 0x05E7F0 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    %eax,%ebp
		mov    %edx,%edi
		mov    %ebx,%esi
		and    $0xffff,%ecx
		lea    0x0(,%ecx,4),%eax
		lea    (%ecx,%eax,1),%edx
		mov    game_object_faces4,%eax
		shl    $0x3,%edx
		add    %edx,%eax
		mov    %edi,%edx
		call   inside_the_quad
		mov    %eax,(%esp)
		test   %eax,%eax
		je     jump_5e834
		mov    %esi,%ebx
		mov    %edi,%edx
		mov    %ebp,%eax
		call   set_thing_height_on_face_quad64
		mov    (%esp),%eax
		jmp    jump_5e836
	jump_5e834:
		xor    %eax,%eax
	jump_5e836:
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
inside_the_quad:	/* 0x05E840 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x20,%esp
		mov    %eax,%ecx
		mov    %edx,%esi
		mov    %ebx,%edi
		xor    %edx,%edx
		mov    0xe(%eax),%dx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    game_objects,%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0x12(%edx),%eax
		sar    $0x10,%eax
		mov    %eax,0x1c(%esp)
		mov    0x14(%edx),%eax
		sar    $0x10,%eax
		mov    %eax,0xc(%esp)
		mov    0x1c(%esp),%eax
		xor    %edx,%edx
		mov    %eax,0x10(%esp)
		mov    0xc(%esp),%eax
		mov    (%ecx),%dx
		mov    %eax,0x14(%esp)
		mov    %eax,0x18(%esp)
		mov    %eax,0x8(%esp)
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_object_points),%edx
		mov    (%edx,%eax,2),%ebx
		mov    0x1c(%esp),%ebp
		sar    $0x10,%ebx
		mov    0x4(%edx,%eax,2),%eax
		add    %ebx,0x1c(%esp)
		sar    $0x10,%eax
		mov    0xc(%esp),%ebx
		add    %eax,%ebx
		xor    %eax,%eax
		mov    0x2(%ecx),%ax
		mov    %eax,(%esp)
		mov    %ebx,0xc(%esp)
		mov    (%esp),%ebx
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    (%edx,%eax,2),%ebx
		sar    $0x10,%ebx
		mov    0x4(%edx,%eax,2),%eax
		add    %ebx,0x10(%esp)
		sar    $0x10,%eax
		mov    0x14(%esp),%ebx
		add    %eax,%ebx
		xor    %eax,%eax
		mov    0x4(%ecx),%ax
		mov    %eax,(%esp)
		mov    %ebx,0x14(%esp)
		mov    (%esp),%ebx
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    (%edx,%eax,2),%ebx
		mov    %ebp,0x4(%esp)
		sar    $0x10,%ebx
		mov    0x4(%edx,%eax,2),%eax
		sar    $0x10,%eax
		add    %ebx,%ebp
		add    %eax,0x18(%esp)
		xor    %ebx,%ebx
		mov    0x6(%ecx),%bx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		add    %eax,%eax
		add    %eax,%edx
		sar    $0x8,%esi
		mov    (%edx),%eax
		mov    0x4(%esp),%ecx
		sar    $0x10,%eax
		sar    $0x8,%edi
		add    %eax,%ecx
		mov    0x14(%esp),%ebx
		mov    %ecx,0x4(%esp)
		mov    0x4(%edx),%eax
		mov    0x8(%esp),%edx
		sar    $0x10,%eax
		mov    %esi,%ecx
		add    %eax,%edx
		mov    0x10(%esp),%eax
		mov    %edx,0x8(%esp)
		mov    %edi,%edx
		sub    %eax,%ecx
		mov    0xc(%esp),%eax
		sub    %ebx,%edx
		sub    %eax,%ebx
		mov    0x10(%esp),%eax
		sub    0x1c(%esp),%eax
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_5e988
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_5e988:
		movsbl %al,%eax
		test   %eax,%eax
		jl     jump_5ea0f
		mov    0x18(%esp),%ebx
		mov    0x14(%esp),%eax
		mov    %edi,%edx
		mov    %esi,%ecx
		sub    %ebx,%edx
		sub    %eax,%ebx
		mov    %ebp,%eax
		sub    %ebp,%ecx
		sub    0x10(%esp),%eax
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_5e9c3
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_5e9c3:
		movsbl %al,%eax
		test   %eax,%eax
		jl     jump_5ea0f
		mov    0xc(%esp),%ebx
		mov    0x1c(%esp),%eax
		mov    %esi,%ecx
		mov    %edi,%edx
		sub    %eax,%ecx
		mov    0x18(%esp),%eax
		sub    %ebx,%edx
		sub    %eax,%ebx
		mov    0x1c(%esp),%eax
		sub    %ebp,%eax
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_5e9fe
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_5e9fe:
		movsbl %al,%eax
		test   %eax,%eax
		jl     jump_5ea0f
		mov    $0x1,%eax
		jmp    jump_5ead7
	jump_5ea0f:
		mov    0x18(%esp),%ebx
		mov    %edi,%edx
		mov    0x8(%esp),%eax
		sub    %ebx,%edx
		sub    %eax,%ebx
		mov    %ebp,%eax
		mov    %esi,%ecx
		sub    0x4(%esp),%eax
		sub    %ebp,%ecx
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_5ea3f
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_5ea3f:
		movsbl %al,%eax
		test   %eax,%eax
		jl     jump_5ead5
		mov    0x14(%esp),%ebx
		mov    0x10(%esp),%eax
		mov    %esi,%ecx
		mov    %edi,%edx
		sub    %eax,%ecx
		mov    0x18(%esp),%eax
		sub    %ebx,%edx
		sub    %eax,%ebx
		mov    0x10(%esp),%eax
		sub    %ebp,%eax
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_5ea7e
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_5ea7e:
		movsbl %al,%eax
		test   %eax,%eax
		jl     jump_5ead5
		mov    0x8(%esp),%edx
		mov    0x4(%esp),%ebx
		mov    0x4(%esp),%eax
		mov    %esi,%ecx
		mov    0x14(%esp),%esi
		sub    %edx,%edi
		sub    %ebx,%ecx
		mov    0x8(%esp),%ebx
		mov    %edi,%edx
		mov    0x10(%esp),%edi
		sub    %esi,%ebx
		sub    %edi,%eax
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_5eac1
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_5eac1:
		movsbl %al,%eax
		test   %eax,%eax
		jl     jump_5ead5
		mov    $0x2,%eax
		add    $0x20,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_5ead5:
		xor    %eax,%eax
	jump_5ead7:
		add    $0x20,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
inside_the_triangle:	/* 0x05EAE0 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x18,%esp
		mov    %eax,%ecx
		mov    %edx,0x4(%esp)
		mov    %ebx,%ebp
		sar    $0x8,%edx
		mov    %edx,0x4(%esp)
		xor    %edx,%edx
		mov    0xc(%eax),%dx
		lea    0x0(,%edx,8),%eax
		mov    game_objects,%esi
		add    %edx,%eax
		mov    0x12(%esi,%eax,4),%edi
		xor    %edx,%edx
		sar    $0x10,%edi
		mov    (%ecx),%dx
		mov    0x14(%esi,%eax,4),%esi
		lea    0x0(,%edx,4),%eax
		sar    $0x10,%esi
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_object_points),%edx
		mov    %edi,0x14(%esp)
		mov    %edi,0xc(%esp)
		mov    (%edx,%eax,2),%ebx
		mov    0x4(%edx,%eax,2),%eax
		mov    %esi,0x8(%esp)
		sar    $0x10,%eax
		mov    %esi,0x10(%esp)
		add    %eax,%esi
		xor    %eax,%eax
		sar    $0x10,%ebx
		mov    0x2(%ecx),%ax
		mov    %eax,(%esp)
		add    %ebx,%edi
		mov    (%esp),%ebx
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    (%edx,%eax,2),%ebx
		sar    $0x10,%ebx
		mov    0x4(%edx,%eax,2),%eax
		add    %ebx,0x14(%esp)
		sar    $0x10,%eax
		add    %eax,0x8(%esp)
		xor    %ebx,%ebx
		mov    0x4(%ecx),%bx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		add    %eax,%eax
		add    %eax,%edx
		mov    (%edx),%eax
		mov    0xc(%esp),%ecx
		sar    $0x10,%eax
		sar    $0x8,%ebp
		add    %eax,%ecx
		mov    0x8(%esp),%ebx
		mov    %ecx,0xc(%esp)
		mov    0x4(%edx),%eax
		mov    0x10(%esp),%edx
		sar    $0x10,%eax
		mov    0x4(%esp),%ecx
		add    %eax,%edx
		mov    0x14(%esp),%eax
		mov    %edx,0x10(%esp)
		mov    %ebp,%edx
		sub    %eax,%ecx
		sub    %ebx,%edx
		sub    %edi,%eax
		sub    %esi,%ebx
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_5ebd7
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_5ebd7:
		movsbl %al,%eax
		test   %eax,%eax
		jl     jump_5ec61
		mov    0x10(%esp),%ebx
		mov    0x4(%esp),%ecx
		mov    0xc(%esp),%eax
		mov    %ebp,%edx
		sub    %eax,%ecx
		mov    0x8(%esp),%eax
		sub    %ebx,%edx
		sub    %eax,%ebx
		mov    0xc(%esp),%eax
		sub    0x14(%esp),%eax
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_5ec1a
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_5ec1a:
		movsbl %al,%eax
		test   %eax,%eax
		jl     jump_5ec61
		mov    0x4(%esp),%ecx
		mov    %ebp,%edx
		mov    0x10(%esp),%ebx
		sub    %esi,%edx
		sub    %ebx,%esi
		mov    %edi,%eax
		mov    %esi,%ebx
		mov    0xc(%esp),%esi
		sub    %edi,%ecx
		sub    %esi,%eax
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_5ec53
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_5ec53:
		movsbl %al,%eax
		test   %eax,%eax
		jl     jump_5ec61
		mov    $0x1,%eax
		jmp    jump_5ec63
	jump_5ec61:
		xor    %eax,%eax
	jump_5ec63:
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_find_and_set_connected_face)	/* 0x05EC6C */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		mov    %eax,%ebp
		mov    %edx,%esi
		mov    %ebx,%edi
		mov    0x6c(%eax),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jle    jump_5ec9d
		mov    %eax,%edx
		mov    game_object_faces,%eax
		shl    $0x5,%edx
		mov    0x1a(%edx,%eax,1),%ecx
		sar    $0x10,%ecx
		mov    EXPORT_SYMBOL(game_walk_headers),%eax
		shl    $0x2,%ecx
		jmp    jump_5ecbe
	jump_5ec9d:
		neg    %eax
		mov    %eax,%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    game_object_faces4,%eax
		shl    $0x3,%edx
		mov    0x20(%edx,%eax,1),%eax
		sar    $0x10,%eax
		mov    EXPORT_SYMBOL(game_walk_headers),%ecx
		shl    $0x2,%eax
	jump_5ecbe:
		add    %eax,%ecx
		mov    0x2(%ecx),%ax
		mov    %eax,0x8(%esp)
		jmp    jump_5ecf7
	jump_5ecca:
		andb   $0xdf,0xc(%ebp)
		jmp    jump_5ed5a
	jump_5ecd3:
		mov    %eax,%edx
		mov    game_object_faces,%eax
		shl    $0x5,%edx
		add    %edx,%eax
		testb  $0x4,0x8(%eax)
		je     jump_5ecf3
		mov    %edi,%ebx
		mov    %esi,%edx
		call   inside_the_triangle
		test   %ax,%ax
		jne    jump_5ed5a
	jump_5ecf3:
		incl   0x8(%esp)
	jump_5ecf7:
		xor    %eax,%eax
		xor    %edx,%edx
		mov    0x2(%ecx),%ax
		mov    (%ecx),%dx
		add    %eax,%edx
		xor    %eax,%eax
		mov    0x8(%esp),%ax
		cmp    %edx,%eax
		jge    jump_5eeb2
		mov    game_walk_items,%edx
		add    %eax,%eax
		add    %eax,%edx
		movswl (%edx),%eax
		test   %eax,%eax
		jge    jump_5ecd3
		mov    (%edx),%ax
		neg    %eax
		and    $0xffff,%eax
		imul   $0x28,%eax,%edx
		mov    game_object_faces4,%eax
		add    %edx,%eax
		testb  $0x4,0xa(%eax)
		je     jump_5ecf3
		mov    %edi,%ebx
		mov    %esi,%edx
		call   inside_the_quad
		test   %ax,%ax
		je     jump_5ecf3
		cwtl
		cmp    $0x2,%eax
		jne    jump_5ecca
		orb    $0x20,0xc(%ebp)
	jump_5ed5a:
		xor    %edx,%edx
		mov    0x1c(%ebp),%eax
		mov    0x8(%esp),%dx
		mov    %eax,0x4(%esp)
		mov    game_walk_items,%eax
		add    %edx,%edx
		add    %eax,%edx
		movswl (%edx),%eax
		test   %eax,%eax
		jle    jump_5edc9
		mov    (%edx),%ax
		xor    %ecx,%ecx
		mov    %ax,%cx
		mov    %ecx,%edx
		mov    game_object_faces,%eax
		shl    $0x5,%edx
		mov    %edi,%ebx
		add    %edx,%eax
		mov    %esi,%edx
		call   inside_the_triangle
		test   %eax,%eax
		je     jump_5eda4
		mov    %edi,%ebx
		mov    %esi,%edx
		mov    %ebp,%eax
		call   set_thing_height_on_face_tri64
	jump_5eda4:
		mov    0x4(%esp),%eax
		sub    0x1c(%ebp),%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0xfa0,%eax
		jle    jump_5eebb
		mov    0x4(%esp),%eax
		mov    %eax,0x1c(%ebp)
		xor    %eax,%eax
		jmp    jump_5eee1
	jump_5edc9:
		jge    jump_5eed0
		mov    %eax,%edx
		neg    %edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    game_object_faces4,%ecx
		shl    $0x3,%eax
		add    %ecx,%eax
		xor    %ecx,%ecx
		mov    0xe(%eax),%cx
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		mov    game_objects,%ecx
		shl    $0x2,%eax
		add    %ecx,%eax
		xor    %ecx,%ecx
		mov    0x6(%eax),%cx
		sub    %ecx,%edx
		cmp    $0x3e,%edx
		je     jump_5ee18
		cmp    $0x9,%edx
		je     jump_5ee18
		cmp    $0x3f,%edx
		jne    jump_5ee4e
	jump_5ee18:
		xor    %edx,%edx
		mov    0x2(%eax),%dx
		xor    %ecx,%ecx
		mov    %edx,(%esp)
		xor    %edx,%edx
		mov    0x1a(%eax),%cx
		mov    0x8(%eax),%dx
		mov    0x18(%eax),%ax
		and    $0xffff,%eax
		mov    (%esp),%ebx
		sub    %eax,%ecx
		cmp    $0x15,%ebx
		jne    jump_5ee4e
		cmp    $0x40,%edx
		jne    jump_5ee4e
		cmp    $0x53,%ecx
		jne    jump_5ee4e
		andb   $0xdf,0x47(%ebp)
	jump_5ee4e:
		xor    %eax,%eax
		mov    0x8(%esp),%ax
		lea    0x0(,%eax,2),%edx
		mov    game_walk_items,%eax
		mov    (%edx,%eax,1),%ax
		xor    %ecx,%ecx
		neg    %eax
		mov    %ax,%cx
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		mov    game_object_faces4,%edx
		shl    $0x3,%eax
		mov    %edi,%ebx
		add    %edx,%eax
		mov    %esi,%edx
		call   inside_the_quad
		test   %eax,%eax
		je     jump_5ee98
		mov    %edi,%ebx
		mov    %esi,%edx
		mov    %ebp,%eax
		call   set_thing_height_on_face_quad64
	jump_5ee98:
		mov    0x4(%esp),%eax
		sub    0x1c(%ebp),%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0xfa0,%eax
		jle    jump_5eebb
		mov    0x4(%esp),%eax
		mov    %eax,0x1c(%ebp)
	jump_5eeb2:
		xor    %eax,%eax
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_5eebb:
		xor    %eax,%eax
		mov    game_walk_items,%edx
		mov    0x8(%esp),%ax
		mov    (%edx,%eax,2),%ax
		mov    %ax,0x6e(%ebp)
	jump_5eed0:
		xor    %eax,%eax
		mov    game_walk_items,%edx
		mov    0x8(%esp),%ax
		mov    (%edx,%eax,2),%ax
	jump_5eee1:
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_thin_wall_at_line_rm)	/* 0x5eff0 */
/*----------------------------------------------------------------*/
		sub    $0x10,%esp
		mov    %ax,0xc(%esp)
		mov    %edx,0x8(%esp)
		mov    %bx,0x4(%esp)
		mov    %cx,(%esp)
		mov    0x16(%esp),%ecx
		mov    -0x2(%esp),%ebx
		mov    0x2(%esp),%edx
		mov    0xa(%esp),%eax
		sar    $0x10,%ecx
		sar    $0x10,%ebx
		sar    $0x10,%edx
		sar    $0x10,%eax
		call   ac_unused_func_115
		test   %eax,%eax
		je     jump_5f0d7
		mov    0xa(%esp),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jl     jump_5f0d7
		cmp    $0x8000,%eax
		jg     jump_5f0d7
		mov    -0x2(%esp),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jl     jump_5f0d7
		cmp    $0x8000,%eax
		jg     jump_5f0d7
		mov    0x2(%esp),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jl     jump_5f0d7
		cmp    $0x8000,%eax
		jg     jump_5f0d7
		mov    0x16(%esp),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jl     jump_5f0d7
		cmp    $0x8000,%eax
		jg     jump_5f0d7
		xor    %eax,%eax
		mov    0x20(%esp),%ax
		cmp    $0x2,%eax
		je     jump_5f0b2
		lea    0x4(%esp),%ebx
		lea    0x8(%esp),%edx
		lea    0xc(%esp),%eax
		call   ac_collide_coords
		lea    0x18(%esp),%ebx
		lea    0x14(%esp),%edx
		mov    %esp,%eax
		call   ac_collide_coords
	jump_5f0b2:
		push   $0x1
		mov    0x1a(%esp),%ecx
		mov    0x2(%esp),%ebx
		mov    0x6(%esp),%edx
		mov    0xe(%esp),%eax
		push   $0x1
		sar    $0x10,%ecx
		sar    $0x10,%ebx
		sar    $0x10,%edx
		sar    $0x10,%eax
		call   ac_thin_wall
	jump_5f0d7:
		add    $0x10,%esp
		ret    $0x10


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_thin_wall_around_object_rm)	/* 0x5f0e0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x6c,%esp
		mov    EXPORT_SYMBOL(game_object_points),%esi
		mov    %edx,0x60(%esp)
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_objects),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0x14(%edx),%ax
		mov    %ax,0x64(%esp)
		mov    0x16(%edx),%ax
		mov    %ax,0x68(%esp)
		mov    0x2(%edx),%ax
		mov    %edx,0x44(%esp)
		mov    %eax,0x48(%esp)
		mov    (%edx),%ax
		mov    0xe(%edx),%di
		mov    %ax,0x50(%esp)
		mov    %ax,0x58(%esp)
		jmp    jump_5f38a
	jump_5f13f:
		mov    (%ebx,%eax,2),%dx
		and    $0xffff,%edx
		imul   $0xa,%edx,%edx
		add    %esi,%edx
		mov    0x2(%edx),%edx
		sar    $0x10,%edx
		add    %ebp,%edx
		inc    %ecx
		mov    %edx,0x10(%esp,%eax,4)
	jump_5f15b:
		xor    %eax,%eax
		mov    %cx,%ax
		cmp    $0x3,%eax
		jl     jump_5f13f
		xor    %ecx,%ecx
		jmp    jump_5f193
	jump_5f169:
		mov    (%ebx,%eax,2),%dx
		and    $0xffff,%edx
		imul   $0xa,%edx,%edx
		add    %esi,%edx
		mov    (%edx),%edx
		sar    $0x10,%edx
		mov    %edx,0x40(%esp)
		mov    0x62(%esp),%edx
		mov    0x40(%esp),%ebp
		sar    $0x10,%edx
		add    %ebp,%edx
		inc    %ecx
		mov    %edx,0x20(%esp,%eax,4)
	jump_5f193:
		xor    %eax,%eax
		mov    %cx,%ax
		cmp    $0x3,%eax
		jl     jump_5f169
		xor    %ecx,%ecx
		jmp    jump_5f1c3
	jump_5f1a1:
		mov    (%ebx,%eax,2),%dx
		and    $0xffff,%edx
		imul   $0xa,%edx,%edx
		add    %esi,%edx
		mov    0x66(%esp),%ebp
		mov    0x4(%edx),%edx
		sar    $0x10,%ebp
		sar    $0x10,%edx
		inc    %ecx
		add    %ebp,%edx
		mov    %edx,(%esp,%eax,4)
	jump_5f1c3:
		xor    %eax,%eax
		mov    %cx,%ax
		cmp    $0x3,%eax
		jl     jump_5f1a1
		xor    %ecx,%ecx
		mov    %esi,EXPORT_SYMBOL(game_object_points)
		jmp    jump_5f1f9
	jump_5f1d7:
		lea    0x0(,%eax,4),%ebx
		mov    -0x2(%esp,%ebx,1),%edx
		mov    0x1e(%esp,%ebx,1),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		call   ac_alt_at_point
		sar    $0x5,%eax
		inc    %ecx
		mov    %eax,0x30(%esp,%ebx,1)
	jump_5f1f9:
		xor    %eax,%eax
		mov    %cx,%ax
		cmp    $0x3,%eax
		jl     jump_5f1d7
		mov    0x30(%esp),%eax
		mov    0x10(%esp),%edx
		sub    $0x96,%eax
		cmp    %edx,%eax
		jge    jump_5f280
		mov    0x30(%esp),%eax
		add    $0x96,%eax
		cmp    %edx,%eax
		jle    jump_5f280
		mov    0x34(%esp),%eax
		mov    0x14(%esp),%ecx
		sub    $0x96,%eax
		cmp    %ecx,%eax
		jge    jump_5f280
		mov    0x34(%esp),%eax
		add    $0x96,%eax
		cmp    %ecx,%eax
		jle    jump_5f280
		xor    %eax,%eax
		mov    0x60(%esp),%ax
		push   %eax
		mov    0x5a(%esp),%eax
		sar    $0x10,%eax
		mov    0x26(%esp),%ecx
		push   %eax
		mov    0xa(%esp),%eax
		mov    0x6(%esp),%ebx
		sar    $0x10,%eax
		mov    0x16(%esp),%edx
		push   %eax
		mov    0x1e(%esp),%eax
		sar    $0x10,%ecx
		sar    $0x10,%eax
		sar    $0x10,%ebx
		push   %eax
		mov    0x2e(%esp),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		call   ac_thin_wall_at_line_rm
	jump_5f280:
		mov    0x30(%esp),%eax
		mov    0x10(%esp),%edx
		sub    $0x96,%eax
		cmp    %edx,%eax
		jge    jump_5f2fd
		mov    0x30(%esp),%eax
		add    $0x96,%eax
		cmp    %edx,%eax
		jle    jump_5f2fd
		mov    0x38(%esp),%eax
		mov    0x18(%esp),%ecx
		sub    $0x96,%eax
		cmp    %ecx,%eax
		jge    jump_5f2fd
		mov    0x38(%esp),%eax
		add    $0x96,%eax
		cmp    %ecx,%eax
		jle    jump_5f2fd
		xor    %eax,%eax
		mov    0x60(%esp),%ax
		push   %eax
		mov    0x5a(%esp),%eax
		sar    $0x10,%eax
		mov    0x2a(%esp),%ecx
		push   %eax
		mov    0xe(%esp),%eax
		mov    0x6(%esp),%ebx
		sar    $0x10,%eax
		mov    0x16(%esp),%edx
		push   %eax
		mov    0x22(%esp),%eax
		sar    $0x10,%ecx
		sar    $0x10,%eax
		sar    $0x10,%ebx
		push   %eax
		mov    0x2e(%esp),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		call   ac_thin_wall_at_line_rm
	jump_5f2fd:
		mov    0x34(%esp),%eax
		mov    0x14(%esp),%edx
		sub    $0x96,%eax
		cmp    %edx,%eax
		jge    jump_5f37a
		mov    0x34(%esp),%eax
		add    $0x96,%eax
		cmp    %edx,%eax
		jle    jump_5f37a
		mov    0x38(%esp),%eax
		mov    0x18(%esp),%ecx
		sub    $0x96,%eax
		cmp    %ecx,%eax
		jge    jump_5f37a
		mov    0x38(%esp),%eax
		add    $0x96,%eax
		cmp    %ecx,%eax
		jle    jump_5f37a
		xor    %eax,%eax
		mov    0x60(%esp),%ax
		push   %eax
		mov    0x5a(%esp),%eax
		sar    $0x10,%eax
		mov    0x2a(%esp),%ecx
		push   %eax
		mov    0xe(%esp),%eax
		mov    0xa(%esp),%ebx
		sar    $0x10,%eax
		mov    0x1a(%esp),%edx
		push   %eax
		mov    0x22(%esp),%eax
		sar    $0x10,%ecx
		sar    $0x10,%eax
		sar    $0x10,%ebx
		push   %eax
		mov    0x32(%esp),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		call   ac_thin_wall_at_line_rm
	jump_5f37a:
		mov    0x58(%esp),%edx
		inc    %edx
		mov    EXPORT_SYMBOL(game_object_points),%esi
		mov    %dx,0x58(%esp)
	jump_5f38a:
		xor    %eax,%eax
		mov    0x4e(%esp),%edx
		mov    0x48(%esp),%ax
		sar    $0x10,%edx
		add    %eax,%edx
		mov    0x56(%esp),%eax
		sar    $0x10,%eax
		cmp    %edx,%eax
		jge    jump_5f3ba
		mov    EXPORT_SYMBOL(game_object_faces),%ebx
		shl    $0x5,%eax
		movswl %di,%ebp
		xor    %ecx,%ecx
		add    %eax,%ebx
		jmp    jump_5f15b
	jump_5f3ba:
		mov    0x44(%esp),%eax
		mov    0x8(%eax),%ax
		mov    %eax,0x4c(%esp)
		mov    0x44(%esp),%eax
		mov    0x6(%eax),%ax
		mov    %ax,0x54(%esp)
		mov    %ax,0x5c(%esp)
		jmp    jump_5f6a5
	jump_5f3dd:
		mov    (%ecx,%eax,2),%dx
		and    $0xffff,%edx
		imul   $0xa,%edx,%edx
		add    %esi,%edx
		mov    0x2(%edx),%edx
		sar    $0x10,%edx
		add    %ebp,%edx
		inc    %ebx
		mov    %edx,0x10(%esp,%eax,4)
	jump_5f3f9:
		xor    %eax,%eax
		mov    %bx,%ax
		cmp    $0x4,%eax
		jl     jump_5f3dd
		xor    %ebx,%ebx
		jmp    jump_5f429
	jump_5f407:
		mov    (%ecx,%eax,2),%dx
		and    $0xffff,%edx
		imul   $0xa,%edx,%edx
		add    %esi,%edx
		mov    0x62(%esp),%ebp
		mov    (%edx),%edx
		sar    $0x10,%ebp
		sar    $0x10,%edx
		inc    %ebx
		add    %ebp,%edx
		mov    %edx,0x20(%esp,%eax,4)
	jump_5f429:
		xor    %eax,%eax
		mov    %bx,%ax
		cmp    $0x4,%eax
		jl     jump_5f407
		xor    %ebx,%ebx
		jmp    jump_5f461
	jump_5f437:
		mov    (%ecx,%eax,2),%dx
		and    $0xffff,%edx
		imul   $0xa,%edx,%edx
		add    %esi,%edx
		mov    0x4(%edx),%edx
		sar    $0x10,%edx
		mov    %edx,0x40(%esp)
		mov    0x66(%esp),%edx
		mov    0x40(%esp),%ebp
		sar    $0x10,%edx
		add    %ebp,%edx
		inc    %ebx
		mov    %edx,(%esp,%eax,4)
	jump_5f461:
		xor    %eax,%eax
		mov    %bx,%ax
		cmp    $0x4,%eax
		jl     jump_5f437
		xor    %ecx,%ecx
		mov    %esi,EXPORT_SYMBOL(game_object_points)
		jmp    jump_5f497
	jump_5f475:
		lea    0x0(,%eax,4),%ebx
		mov    -0x2(%esp,%ebx,1),%edx
		mov    0x1e(%esp,%ebx,1),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		call   ac_alt_at_point
		sar    $0x5,%eax
		inc    %ecx
		mov    %eax,0x30(%esp,%ebx,1)
	jump_5f497:
		xor    %eax,%eax
		mov    %cx,%ax
		cmp    $0x4,%eax
		jl     jump_5f475
		mov    0x30(%esp),%eax
		mov    0x10(%esp),%edx
		sub    $0x96,%eax
		cmp    %edx,%eax
		jge    jump_5f51e
		mov    0x30(%esp),%eax
		add    $0x96,%eax
		cmp    %edx,%eax
		jle    jump_5f51e
		mov    0x34(%esp),%eax
		mov    0x14(%esp),%ecx
		sub    $0x96,%eax
		cmp    %ecx,%eax
		jge    jump_5f51e
		mov    0x34(%esp),%eax
		add    $0x96,%eax
		cmp    %ecx,%eax
		jle    jump_5f51e
		xor    %eax,%eax
		mov    0x60(%esp),%ax
		push   %eax
		mov    0x60(%esp),%eax
		neg    %eax
		cwtl
		mov    0x26(%esp),%ecx
		push   %eax
		mov    0xa(%esp),%eax
		mov    0x6(%esp),%ebx
		sar    $0x10,%eax
		mov    0x16(%esp),%edx
		push   %eax
		mov    0x1e(%esp),%eax
		sar    $0x10,%ecx
		sar    $0x10,%eax
		sar    $0x10,%ebx
		push   %eax
		mov    0x2e(%esp),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		call   ac_thin_wall_at_line_rm
	jump_5f51e:
		mov    0x34(%esp),%eax
		mov    0x14(%esp),%edx
		sub    $0x96,%eax
		cmp    %edx,%eax
		jge    jump_5f59b
		mov    0x34(%esp),%eax
		add    $0x96,%eax
		cmp    %edx,%eax
		jle    jump_5f59b
		mov    0x3c(%esp),%eax
		mov    0x1c(%esp),%ecx
		sub    $0x96,%eax
		cmp    %ecx,%eax
		jge    jump_5f59b
		mov    0x3c(%esp),%eax
		add    $0x96,%eax
		cmp    %ecx,%eax
		jle    jump_5f59b
		xor    %eax,%eax
		mov    0x60(%esp),%ax
		push   %eax
		mov    0x60(%esp),%eax
		neg    %eax
		cwtl
		mov    0x2e(%esp),%ecx
		push   %eax
		mov    0x12(%esp),%eax
		mov    0xa(%esp),%ebx
		sar    $0x10,%eax
		mov    0x1a(%esp),%edx
		push   %eax
		mov    0x26(%esp),%eax
		sar    $0x10,%ecx
		sar    $0x10,%eax
		sar    $0x10,%ebx
		push   %eax
		mov    0x32(%esp),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		call   ac_thin_wall_at_line_rm
	jump_5f59b:
		mov    0x3c(%esp),%eax
		mov    0x1c(%esp),%edx
		sub    $0x96,%eax
		cmp    %edx,%eax
		jge    jump_5f618
		mov    0x3c(%esp),%eax
		add    $0x96,%eax
		cmp    %edx,%eax
		jle    jump_5f618
		mov    0x38(%esp),%eax
		mov    0x18(%esp),%ecx
		sub    $0x96,%eax
		cmp    %ecx,%eax
		jge    jump_5f618
		mov    0x38(%esp),%eax
		add    $0x96,%eax
		cmp    %ecx,%eax
		jle    jump_5f618
		xor    %eax,%eax
		mov    0x60(%esp),%ax
		push   %eax
		mov    0x60(%esp),%eax
		neg    %eax
		cwtl
		mov    0x2a(%esp),%ecx
		push   %eax
		mov    0xe(%esp),%eax
		mov    0x12(%esp),%ebx
		sar    $0x10,%eax
		mov    0x22(%esp),%edx
		push   %eax
		mov    0x22(%esp),%eax
		sar    $0x10,%ecx
		sar    $0x10,%eax
		sar    $0x10,%ebx
		push   %eax
		mov    0x3a(%esp),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		call   ac_thin_wall_at_line_rm
	jump_5f618:
		mov    0x38(%esp),%eax
		mov    0x18(%esp),%edx
		sub    $0x96,%eax
		cmp    %edx,%eax
		jge    jump_5f695
		mov    0x38(%esp),%eax
		add    $0x96,%eax
		cmp    %edx,%eax
		jle    jump_5f695
		mov    0x30(%esp),%eax
		mov    0x10(%esp),%ecx
		sub    $0x96,%eax
		cmp    %ecx,%eax
		jge    jump_5f695
		mov    0x30(%esp),%eax
		add    $0x96,%eax
		cmp    %ecx,%eax
		jle    jump_5f695
		xor    %eax,%eax
		mov    0x60(%esp),%ax
		push   %eax
		mov    0x60(%esp),%eax
		neg    %eax
		cwtl
		mov    0x22(%esp),%ecx
		push   %eax
		mov    0x6(%esp),%eax
		mov    0xe(%esp),%ebx
		sar    $0x10,%eax
		mov    0x1e(%esp),%edx
		push   %eax
		mov    0x1a(%esp),%eax
		sar    $0x10,%ecx
		sar    $0x10,%eax
		sar    $0x10,%ebx
		push   %eax
		mov    0x36(%esp),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		call   ac_thin_wall_at_line_rm
	jump_5f695:
		mov    0x5c(%esp),%ebx
		inc    %ebx
		mov    EXPORT_SYMBOL(game_object_points),%esi
		mov    %bx,0x5c(%esp)
	jump_5f6a5:
		xor    %eax,%eax
		mov    0x52(%esp),%edx
		mov    0x4c(%esp),%ax
		sar    $0x10,%edx
		add    %eax,%edx
		mov    0x5a(%esp),%eax
		sar    $0x10,%eax
		cmp    %edx,%eax
		jge    jump_5f6d5
		imul   $0x28,%eax,%eax
		mov    EXPORT_SYMBOL(game_object_faces4),%ecx
		movswl %di,%ebp
		xor    %ebx,%ebx
		add    %eax,%ecx
		jmp    jump_5f3f9
	jump_5f6d5:
		mov    %esi,EXPORT_SYMBOL(game_object_points)
		add    $0x6c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
del_thing_vectors_from_mapwho:	/* 0x05F6E4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    game_col_vects_list,%ebp
		mov    %eax,(%esp)
		mov    %edx,0x4(%esp)
		mov    0xa(%eax),%ax
		xor    %esi,%esi
		test   %ax,%ax
		je     jump_5f77e
		mov    0x4(%esp),%edi
		mov    %ebp,%ecx
	jump_5f70e:
		xor    %edx,%edx
		mov    %ax,%dx
		imul   $0x6,%edx,%edx
		mov    0x2(%ecx,%edx,1),%bx
		cmp    0x4(%ecx,%edx,1),%di
		jne    jump_5f772
		test   %si,%si
		je     jump_5f73d
		and    $0xffff,%esi
		lea    0x0(,%esi,4),%edx
		sub    %esi,%edx
		mov    %bx,0x2(%ecx,%edx,2)
		jmp    jump_5f747
	jump_5f73d:
		mov    (%esp),%edx
		and    $0x7f,%bh
		mov    %bx,0xa(%edx)
	jump_5f747:
		xor    %ecx,%ecx
		mov    %ax,%cx
		lea    0x0(,%ecx,4),%edx
		sub    %ecx,%edx
		add    %edx,%edx
		lea    (%edx,%ebp,1),%ecx
		mov    EXPORT_SYMBOL(link__MapColListEmptyHead),%dx
		mov    %ax,EXPORT_SYMBOL(link__MapColListEmptyHead)
		mov    %dx,0x2(%ecx)
		mov    $0x1,%edx
		jmp    jump_5f780
	jump_5f772:
		and    $0x7f,%bh
		mov    %eax,%esi
		mov    %ebx,%eax
		test   %bx,%bx
		jne    jump_5f70e
	jump_5f77e:
		xor    %edx,%edx
	jump_5f780:
		mov    %edx,%eax
		mov    %ebp,game_col_vects_list
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
tank_los:	/* 0x05F8B4 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x38,%esp
		mov    %eax,%edi
		mov    %edx,%esi
		mov    %ebx,%ebp
		mov    %ebx,%eax
		sub    %edi,%eax
		mov    %eax,0x30(%esp)
		mov    %ecx,%eax
		sub    %edx,%eax
		mov    %eax,0x2c(%esp)
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebx
		mov    0x30(%esp),%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x7,%edx
		mov    %edx,0x4(%esp)
		mov    %ebx,%edx
		sar    $0x7,%edx
		mov    %edx,0x8(%esp)
		cmp    %ebx,%eax
		jge    jump_5f924
		mov    %ebx,%edx
		sar    $0x5,%edx
		sub    %edx,%ebx
		mov    0x8(%esp),%edx
		sub    %edx,%ebx
		mov    %ebx,(%esp)
		mov    %eax,%ebx
		mov    (%esp),%edx
		sar    $0x2,%ebx
		add    %ebx,%edx
		mov    %eax,%ebx
		sar    $0x3,%ebx
		sar    $0x6,%eax
		add    %edx,%ebx
		add    %ebx,%eax
		mov    0x4(%esp),%ebx
		add    %ebx,%eax
		jmp    jump_5f950
	jump_5f924:
		mov    %eax,%edx
		sar    $0x5,%edx
		sub    %edx,%eax
		mov    0x4(%esp),%edx
		sub    %edx,%eax
		mov    %eax,(%esp)
		mov    %ebx,%eax
		mov    (%esp),%edx
		sar    $0x2,%eax
		add    %eax,%edx
		mov    %ebx,%eax
		sar    $0x3,%eax
		add    %eax,%edx
		mov    %ebx,%eax
		sar    $0x6,%eax
		add    %edx,%eax
		add    0x8(%esp),%eax
	jump_5f950:
		mov    %ebp,data_1aa3a4
		mov    %ecx,data_1aa3a8
		cmp    $0x100,%eax
		jge    jump_5f96a
		xor    %eax,%eax
		jmp    jump_5fcea
	jump_5f96a:
		sar    $0x7,%eax
		mov    %eax,0x34(%esp)
		mov    0x30(%esp),%eax
		mov    %eax,%edx
		mov    0x34(%esp),%ecx
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %eax,0x30(%esp)
		mov    0x2c(%esp),%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %eax,0x2c(%esp)
		mov    0x30(%esp),%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    0x2c(%esp),%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    0x2c(%esp),%eax
		add    %eax,%eax
		mov    %eax,0x28(%esp)
		mov    0x30(%esp),%eax
		add    %eax,%eax
		mov    %edi,%ecx
		mov    %eax,0x24(%esp)
		jmp    jump_5f9db
	jump_5f9bd:
		mov    0x30(%esp),%ebx
		mov    %ecx,%eax
		sub    %ebx,%eax
		mov    0x2c(%esp),%edi
		mov    %eax,data_1aa3a4
		mov    %esi,%eax
		add    %ebx,%ecx
		sub    %edi,%eax
		add    %edi,%esi
		mov    %eax,data_1aa3a8
	jump_5f9db:
		mov    0x34(%esp),%eax
		dec    %eax
		mov    %eax,0x34(%esp)
		cmp    $0xffffffff,%eax
		je     jump_5fce5
		mov    %esi,%edi
		mov    %ecx,%ebp
		sar    $0x8,%edi
		sar    $0x8,%ebp
		shl    $0x7,%edi
		lea    (%edi,%ebp,1),%eax
		imul   $0x12,%eax,%ebx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %eax,%ebx
		mov    0xf(%ebx),%dl
		test   $0x8,%dl
		jne    jump_5fac2
		test   $0x1,%dl
		je     jump_5fa1f
		xor    %eax,%eax
		jmp    jump_5fac7
	jump_5fa1f:
		testw  $0xfff,0x10(%ebx)
		je     jump_5fa2e
		xor    %eax,%eax
		jmp    jump_5fac7
	jump_5fa2e:
		testb  $0x2,0xf(%ebx)
		jne    jump_5fac2
		lea    0x1(%ebp),%edx
		mov    %edx,(%esp)
		add    %edi,%edx
		imul   $0x12,%edx,%edx
		add    $0x80,%edi
		add    %edi,%ebp
		imul   $0x12,%ebp,%ebp
		add    %eax,%edx
		mov    %edx,0x20(%esp)
		add    (%esp),%edi
		imul   $0x12,%edi,%edi
		add    %eax,%ebp
		add    %edi,%eax
		mov    %eax,0x18(%esp)
		mov    0x20(%esp),%eax
		mov    0x4(%ebx),%edi
		mov    0x4(%eax),%eax
		sar    $0x10,%edi
		sar    $0x10,%eax
		sub    %eax,%edi
		mov    %edi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0x19,%eax
		jle    jump_5fa84
		xor    %eax,%eax
		jmp    jump_5fac7
	jump_5fa84:
		mov    0x4(%ebp),%edi
		mov    0x4(%ebx),%eax
		sar    $0x10,%edi
		sar    $0x10,%eax
		sub    %edi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0x19,%eax
		jle    jump_5faa0
		xor    %eax,%eax
		jmp    jump_5fac7
	jump_5faa0:
		mov    0x18(%esp),%eax
		mov    0x4(%ebx),%ebx
		mov    0x4(%eax),%eax
		sar    $0x10,%ebx
		sar    $0x10,%eax
		sub    %eax,%ebx
		mov    %ebx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0x19,%eax
		jle    jump_5fac2
		xor    %eax,%eax
		jmp    jump_5fac7
	jump_5fac2:
		mov    $0x1,%eax
	jump_5fac7:
		test   %eax,%eax
		je     jump_5fcea
		mov    0x24(%esp),%ebx
		mov    %esi,%edi
		mov    0x28(%esp),%ebp
		sub    %ebx,%edi
		add    %ecx,%ebp
		sar    $0x8,%edi
		sar    $0x8,%ebp
		shl    $0x7,%edi
		lea    (%edi,%ebp,1),%eax
		imul   $0x12,%eax,%ebx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %eax,%ebx
		mov    0xf(%ebx),%dh
		test   $0x8,%dh
		jne    jump_5fbb2
		test   $0x1,%dh
		je     jump_5fb0b
		xor    %eax,%eax
		jmp    jump_5fbb7
	jump_5fb0b:
		testw  $0xfff,0x10(%ebx)
		je     jump_5fb1a
		xor    %eax,%eax
		jmp    jump_5fbb7
	jump_5fb1a:
		testb  $0x2,0xf(%ebx)
		jne    jump_5fbb2
		lea    0x1(%ebp),%edx
		mov    %edx,(%esp)
		add    %edi,%edx
		imul   $0x12,%edx,%edx
		add    $0x80,%edi
		add    %edi,%ebp
		imul   $0x12,%ebp,%ebp
		add    %eax,%edx
		mov    %edx,0xc(%esp)
		lea    (%eax,%ebp,1),%edx
		add    (%esp),%edi
		imul   $0x12,%edi,%edi
		lea    (%eax,%edi,1),%ebp
		mov    0xc(%esp),%eax
		mov    0x4(%ebx),%edi
		mov    0x4(%eax),%eax
		sar    $0x10,%edi
		sar    $0x10,%eax
		sub    %eax,%edi
		mov    %edi,%eax
		mov    %edx,0x10(%esp)
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0x19,%eax
		jle    jump_5fb72
		xor    %eax,%eax
		jmp    jump_5fbb7
	jump_5fb72:
		mov    0x10(%esp),%eax
		mov    0x4(%ebx),%edi
		mov    0x4(%eax),%eax
		sar    $0x10,%edi
		sar    $0x10,%eax
		sub    %eax,%edi
		mov    %edi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0x19,%eax
		jle    jump_5fb94
		xor    %eax,%eax
		jmp    jump_5fbb7
	jump_5fb94:
		mov    0x4(%ebp),%eax
		mov    0x4(%ebx),%ebx
		sar    $0x10,%eax
		sar    $0x10,%ebx
		sub    %eax,%ebx
		mov    %ebx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0x19,%eax
		jle    jump_5fbb2
		xor    %eax,%eax
		jmp    jump_5fbb7
	jump_5fbb2:
		mov    $0x1,%eax
	jump_5fbb7:
		test   %eax,%eax
		je     jump_5fcea
		mov    0x28(%esp),%eax
		mov    0x24(%esp),%edi
		mov    %ecx,%ebp
		add    %esi,%edi
		sub    %eax,%ebp
		sar    $0x8,%edi
		sar    $0x8,%ebp
		shl    $0x7,%edi
		lea    (%edi,%ebp,1),%eax
		imul   $0x12,%eax,%ebx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %eax,%ebx
		mov    0xf(%ebx),%dl
		test   $0x8,%dl
		jne    jump_5fcd1
		test   $0x1,%dl
		je     jump_5fbfb
		xor    %eax,%eax
		jmp    jump_5fcd6
	jump_5fbfb:
		testw  $0xfff,0x10(%ebx)
		je     jump_5fc14
		xor    %eax,%eax
		test   %eax,%eax
		jne    jump_5f9bd
		add    $0x38,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_5fc14:
		testb  $0x2,0xf(%ebx)
		jne    jump_5fcd1
		lea    0x1(%ebp),%edx
		mov    %edx,(%esp)
		add    %edi,%edx
		imul   $0x12,%edx,%edx
		add    $0x80,%edi
		add    %edi,%ebp
		imul   $0x12,%ebp,%ebp
		add    %eax,%edx
		mov    %edx,0x1c(%esp)
		lea    (%eax,%ebp,1),%edx
		mov    %edx,0x14(%esp)
		add    (%esp),%edi
		imul   $0x12,%edi,%edi
		lea    (%eax,%edi,1),%ebp
		mov    0x1c(%esp),%edi
		mov    0x4(%ebx),%eax
		mov    0x4(%edi),%edi
		sar    $0x10,%eax
		sar    $0x10,%edi
		sub    %edi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0x19,%eax
		jle    jump_5fc77
		xor    %eax,%eax
		test   %eax,%eax
		jne    jump_5f9bd
		add    $0x38,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_5fc77:
		mov    0x14(%esp),%eax
		mov    0x4(%ebx),%edi
		mov    0x4(%eax),%eax
		sar    $0x10,%edi
		sar    $0x10,%eax
		sub    %eax,%edi
		mov    %edi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0x19,%eax
		jle    jump_5fca6
		xor    %eax,%eax
		test   %eax,%eax
		jne    jump_5f9bd
		add    $0x38,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_5fca6:
		mov    0x4(%ebp),%eax
		mov    0x4(%ebx),%ebx
		sar    $0x10,%eax
		sar    $0x10,%ebx
		sub    %eax,%ebx
		mov    %ebx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0x19,%eax
		jle    jump_5fcd1
		xor    %eax,%eax
		test   %eax,%eax
		jne    jump_5f9bd
		add    $0x38,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_5fcd1:
		mov    $0x1,%eax
	jump_5fcd6:
		test   %eax,%eax
		jne    jump_5f9bd
		add    $0x38,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_5fce5:
		mov    $0x2a,%eax
	jump_5fcea:
		add    $0x38,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
func_5fcf4:
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    %eax,%edi
		mov    %edx,%ebp
		mov    %ebx,0x4(%esp)
		mov    %ecx,(%esp)
		sar    $0x8,%eax
		mov    %edx,%ebx
		xor    %esi,%esi
		sar    $0x8,%ebx
		test   %eax,%eax
		jl     jump_5fd26
		cmp    $0x80,%eax
		jge    jump_5fd26
		test   %ebx,%ebx
		jl     jump_5fd26
		cmp    $0x80,%ebx
		jl     jump_5fd2d
	jump_5fd26:
		xor    %eax,%eax
		jmp    jump_5fe46
	jump_5fd2d:
		shl    $0x7,%ebx
		add    %eax,%ebx
		lea    0x0(,%ebx,8),%eax
		add    %eax,%ebx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %ebx,%ebx
		xor    %ecx,%ecx
		mov    0xa(%ebx,%eax,1),%cx
		test   %ecx,%ecx
		je     jump_5fe41
	jump_5fd51:
		mov    %esi,%eax
		inc    %esi
		cmp    $0xc8,%eax
		jge    jump_5fe41
		imul   $0x6,%ecx,%eax
		mov    game_col_vects_list,%ebx
		mov    (%ebx,%eax,1),%ax
		and    $0xffff,%eax
		imul   $0xe,%eax,%eax
		mov    game_col_vects,%ebx
		add    %eax,%ebx
		movswl (%ebx),%eax
		sub    %edi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0x20,%eax
		jge    jump_5fdd1
		mov    0x4(%ebx),%eax
		mov    0x4(%esp),%edx
		sar    $0x10,%eax
		sub    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0x20,%eax
		jge    jump_5fdd1
		mov    0x8(%ebx),%eax
		mov    (%esp),%edx
		sar    $0x10,%eax
		sub    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0x20,%eax
		jge    jump_5fdd1
		mov    0x2(%ebx),%eax
		sar    $0x10,%eax
		sub    %ebp,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0x20,%eax
		jge    jump_5fdd1
		xor    %eax,%eax
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_5fdd1:
		mov    0x4(%esp),%edx
		movswl (%ebx),%eax
		sub    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0x20,%eax
		jge    jump_5fe26
		mov    0x4(%ebx),%eax
		sar    $0x10,%eax
		sub    %edi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0x20,%eax
		jge    jump_5fe26
		mov    0x8(%ebx),%eax
		sar    $0x10,%eax
		sub    %ebp,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0x20,%eax
		jge    jump_5fe26
		mov    0x2(%ebx),%eax
		mov    (%esp),%ebx
		sar    $0x10,%eax
		sub    %ebx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0x20,%eax
		jge    jump_5fe26
		xor    %eax,%eax
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_5fe26:
		imul   $0x6,%ecx,%ecx
		mov    game_col_vects_list,%eax
		add    %ecx,%eax
		xor    %ecx,%ecx
		mov    0x2(%eax),%cx
		and    $0x7f,%ch
		test   %ecx,%ecx
		jne    jump_5fd51
	jump_5fe41:
		mov    $0x1,%eax
	jump_5fe46:
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
func_5fe50:
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x18,%esp
		mov    %eax,0xc(%esp)
		mov    %edx,0x8(%esp)
		mov    %ecx,%ebp
		mov    %ebx,%edi
		sub    %edx,%ebp
		sub    %eax,%edi
		mov    %ebp,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebx
		mov    %edi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %ebx,%esi
		mov    %eax,%edx
		sar    $0x7,%esi
		sar    $0x7,%edx
		cmp    %ebx,%eax
		jge    jump_5fea5
		mov    %ebx,%ecx
		sar    $0x5,%ecx
		sub    %ecx,%ebx
		mov    %eax,%ecx
		sub    %esi,%ebx
		sar    $0x2,%ecx
		add    %ebx,%ecx
		mov    %eax,%ebx
		sar    $0x3,%ebx
		sar    $0x6,%eax
		add    %ecx,%ebx
		add    %ebx,%eax
		lea    (%eax,%edx,1),%esi
		jmp    jump_5fec3
	jump_5fea5:
		mov    %eax,%ecx
		sar    $0x5,%ecx
		sub    %ecx,%eax
		sub    %edx,%eax
		mov    %ebx,%edx
		sar    $0x2,%edx
		add    %eax,%edx
		mov    %ebx,%eax
		sar    $0x3,%eax
		sar    $0x6,%ebx
		add    %edx,%eax
		add    %ebx,%eax
		add    %eax,%esi
	jump_5fec3:
		mov    0xc(%esp),%eax
		mov    %eax,data_1aa3ac
		mov    0x8(%esp),%eax
		mov    %eax,data_1aa3b0
		cmp    $0x100,%esi
		jge    jump_5fee4
		xor    %ebx,%ebx
		jmp    jump_60082
	jump_5fee4:
		sar    $0x7,%esi
		mov    %edi,%edx
		mov    %edi,%eax
		sar    $0x1f,%edx
		idiv   %esi
		mov    %eax,%edi
		mov    %ebp,%edx
		mov    %ebp,%eax
		sar    $0x1f,%edx
		idiv   %esi
		mov    %eax,%ebp
		mov    %edi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %ebp,%ebx
		mov    %ebp,%eax
		add    %ebx,%ebx
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %ebx,0x10(%esp)
		mov    %edi,%ebx
		mov    0xc(%esp),%eax
		add    %ebx,%ebx
		mov    0x8(%esp),%edx
		mov    %ebx,0x14(%esp)
		jmp    jump_5ff3d
	jump_5ff25:
		mov    %eax,%ebx
		sub    %edi,%ebx
		mov    %ebx,data_1aa3ac
		mov    %edx,%ebx
		add    %edi,%eax
		sub    %ebp,%ebx
		add    %ebp,%edx
		mov    %ebx,data_1aa3b0
	jump_5ff3d:
		dec    %esi
		cmp    $0xffffffff,%esi
		je     jump_6007d
		mov    %eax,%ebx
		sar    $0x8,%ebx
		mov    %ebx,(%esp)
		mov    %edx,%ebx
		sar    $0x8,%ebx
		mov    (%esp),%ecx
		shl    $0x7,%ebx
		add    %ecx,%ebx
		imul   $0x12,%ebx,%ebx
		mov    EXPORT_SYMBOL(game_my_big_map),%ecx
		add    %ecx,%ebx
		mov    0x10(%ebx),%bx
		and    $0xf,%bh
		and    $0xffff,%ebx
		je     jump_5ff9d
		shl    $0x4,%ebx
		mov    %ebx,0x4(%esp)
		mov    0x4(%esp),%ecx
		mov    game_col_columns,%ebx
		add    %ecx,%ebx
		mov    (%ebx),%ecx
		or     0x4(%ebx),%ecx
		or     0x8(%ebx),%ecx
		or     0xc(%ebx),%ecx
		test   $0x40,%cl
		je     jump_5ff9d
		xor    %ebx,%ebx
		jmp    jump_5ffa2
	jump_5ff9d:
		mov    $0x1,%ebx
	jump_5ffa2:
		test   %ebx,%ebx
		je     jump_60082
		mov    0x10(%esp),%ebx
		add    %eax,%ebx
		sar    $0x8,%ebx
		mov    0x14(%esp),%ecx
		mov    %ebx,(%esp)
		mov    %edx,%ebx
		sub    %ecx,%ebx
		sar    $0x8,%ebx
		mov    (%esp),%ecx
		shl    $0x7,%ebx
		add    %ecx,%ebx
		imul   $0x12,%ebx,%ebx
		mov    EXPORT_SYMBOL(game_my_big_map),%ecx
		add    %ecx,%ebx
		mov    0x10(%ebx),%bx
		and    $0xf,%bh
		and    $0xffff,%ebx
		je     jump_60002
		mov    game_col_columns,%ecx
		shl    $0x4,%ebx
		add    %ecx,%ebx
		mov    (%ebx),%ecx
		or     0x4(%ebx),%ecx
		or     0x8(%ebx),%ecx
		or     0xc(%ebx),%ecx
		test   $0x40,%cl
		je     jump_60002
		xor    %ebx,%ebx
		jmp    jump_60007
	jump_60002:
		mov    $0x1,%ebx
	jump_60007:
		test   %ebx,%ebx
		je     jump_60082
		mov    0x10(%esp),%ecx
		mov    %eax,%ebx
		sub    %ecx,%ebx
		sar    $0x8,%ebx
		mov    %ebx,(%esp)
		mov    0x14(%esp),%ebx
		add    %edx,%ebx
		sar    $0x8,%ebx
		mov    (%esp),%ecx
		shl    $0x7,%ebx
		add    %ecx,%ebx
		imul   $0x12,%ebx,%ebx
		mov    EXPORT_SYMBOL(game_my_big_map),%ecx
		add    %ecx,%ebx
		mov    0x10(%ebx),%bx
		and    $0xf,%bh
		and    $0xffff,%ebx
		je     jump_60067
		mov    game_col_columns,%ecx
		shl    $0x4,%ebx
		add    %ecx,%ebx
		mov    (%ebx),%ecx
		or     0x4(%ebx),%ecx
		or     0x8(%ebx),%ecx
		or     0xc(%ebx),%ecx
		test   $0x40,%cl
		je     jump_60067
		xor    %ebx,%ebx
		jmp    jump_6006c
	jump_60067:
		mov    $0x1,%ebx
	jump_6006c:
		test   %ebx,%ebx
		jne    jump_5ff25
		mov    %ebx,%eax
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_6007d:
		mov    $0x2a,%ebx
	jump_60082:
		mov    %ebx,%eax
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
func_60130:
/*----------------------------------------------------------------*/
		push   %esi
		cmp    %bx,%ax
		jle    jump_60165
		mov    0x6(%esp),%esi
		movswl %bx,%ebx
		sar    $0x10,%esi
		cwtl
		add    %esi,%ebx
		cmp    %ebx,%eax
		jge    jump_60165
		cmp    %cx,%dx
		jle    jump_60165
		mov    0xa(%esp),%ebx
		movswl %cx,%eax
		sar    $0x10,%ebx
		add    %ebx,%eax
		movswl %dx,%ebx
		cmp    %eax,%ebx
		jge    jump_60165
		mov    $0x1,%al
		pop    %esi
		ret    $0x8
	jump_60165:
		xor    %al,%al
		pop    %esi
		ret    $0x8


/*----------------------------------------------------------------*/
create_unkn_building_subtp27:	/* 0x0601FC */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    %eax,0x4(%esp)
		mov    %edx,%edi
		mov    %ebx,%esi
		mov    %cx,(%esp)
		call   ac_get_new_thing
		movswl %ax,%ebx
		mov    %eax,%edx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    things,%ecx
		shl    $0x3,%eax
		add    %ecx,%eax
		mov    -0x2(%esp),%ecx
		sar    $0x10,%ecx
		movb   $0x1,0x56(%eax)
		shl    $0x8,%ecx
		movzwl 0x4(%esp),%ebp
		mov    %ecx,0x1c(%eax)
		xor    %ecx,%ecx
		movb   $0x9,0x9(%eax)
		mov    %di,%cx
		movb   $0x1b,0x8(%eax)
		shl    $0x8,%ecx
		shl    $0x8,%ebp
		mov    %ecx,0x20(%eax)
		xor    %ecx,%ecx
		mov    %ebp,0x18(%eax)
		mov    %si,%cx
		mov    %si,0x52(%eax)
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		mov    game_objects,%ecx
		mov    %dx,0xa(%ecx,%eax,4)
		xor    %eax,%eax
		mov    %dx,%ax
		call   ac_add_node_thing
		cmp    $0x3e8,%ebx
		jg     jump_60293
		test   %ebx,%ebx
		jge    jump_6029d
	jump_60293:
		mov    $0xa,%eax
		call   nullsub_7
	jump_6029d:
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_sub_6031C)	/* 0x6031C */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x28,%esp
		mov    %eax,%esi
		mov    %bx,0x24(%esp)
		mov    EXPORT_SYMBOL(next_object_point),%ax
		mov    %eax,0x18(%esp)
		xor    %eax,%eax
		mov    %si,%ax
		test   %eax,%eax
		jl     jump_605dd
		cmp    $0x8000,%eax
		jge    jump_605dd
		xor    %eax,%eax
		mov    %dx,%ax
		test   %eax,%eax
		jl     jump_605dd
		cmp    $0x8000,%eax
		jge    jump_605dd
		xor    %dh,%ah
		mov    %eax,0x10(%esp)
		mov    EXPORT_SYMBOL(next_object),%ax
		mov    %ax,data_1aa320
		mov    EXPORT_SYMBOL(next_object_face),%ax
		mov    %ax,data_1aa322
		mov    0x18(%esp),%eax
		mov    %ax,data_1aa326
		mov    EXPORT_SYMBOL(next_normal),%ax
		mov    %ax,data_1aa328
		mov    EXPORT_SYMBOL(next_face_texture),%ax
		mov    EXPORT_SYMBOL(mem_game)+125,%ebx
		mov    %ax,data_1aa32a
		xor    %eax,%eax
		mov    %esi,%edi
		mov    EXPORT_SYMBOL(next_object),%ax
		and    $0xff,%edi
		cmp    %ebx,%eax
		jg     jump_605dd
		mov    0x22(%esp),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jg     jump_603d1
		negw   0x24(%esp)
	jump_603d1:
		mov    0x22(%esp),%ebx
		sar    $0x10,%ebx
		lea    0x0(,%ebx,8),%eax
		add    %eax,%ebx
		mov    prim_objects,%eax
		shl    $0x2,%ebx
		add    %ebx,%eax
		mov    0x2(%eax),%bx
		mov    %ebx,0xc(%esp)
		mov    (%eax),%bx
		mov    %ebx,(%esp)
		mov    0x18(%eax),%bx
		mov    %ebx,0x1c(%esp)
		xor    %ebx,%ebx
		mov    0x1a(%eax),%ax
		mov    EXPORT_SYMBOL(next_object),%bx
		mov    %eax,0x4(%esp)
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		mov    game_objects,%ebx
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    %di,0xc(%eax)
		mov    %cx,0xe(%eax)
		mov    %si,0x14(%eax)
		mov    0x10(%esp),%ebx
		mov    %dx,0x16(%eax)
		mov    things_empty_head,%dx
		mov    %bx,0x10(%eax)
		mov    %dx,0xa(%eax)
		mov    EXPORT_SYMBOL(next_object_face),%dx
		mov    %dx,(%eax)
		mov    0xc(%esp),%edx
		mov    %dx,0x2(%eax)
		xor    %eax,%eax
		xor    %edx,%edx
		mov    0x4(%esp),%ax
		mov    EXPORT_SYMBOL(next_object_point),%dx
		add    %eax,%edx
		xor    %eax,%eax
		mov    0x1c(%esp),%ax
		mov    EXPORT_SYMBOL(mem_game)+79,%ecx
		sub    %eax,%edx
		cmp    %ecx,%edx
		jg     jump_605dd
		mov    0x4(%esp),%esi
		mov    %eax,%ecx
		cmp    %si,%ax
		jmp    jump_60497
	jump_6048f:
		mov    0x4(%esp),%edi
		inc    %ecx
		cmp    %di,%cx
	jump_60497:
		ja     jump_604f2
		xor    %edx,%edx
		mov    %cx,%dx
		imul   $0xa,%edx,%esi
		mov    prim_object_points,%eax
		add    %eax,%esi
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(next_object_point),%ax
		imul   $0xa,%eax,%edi
		mov    EXPORT_SYMBOL(game_object_points),%eax
		add    %eax,%edi
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsw  %ds:(%esi),%es:(%edi)
		mov    EXPORT_SYMBOL(next_object_point),%bx
		xor    %esi,%esi
		mov    %bx,%si
		imul   $0xa,%esi,%esi
		inc    %ebx
		add    %esi,%eax
		mov    %bx,EXPORT_SYMBOL(next_object_point)
		call   point_unkn_func_03
		xor    %eax,%eax
		mov    ingame__LowerMemoryUse,%ax
		cmp    $0x3,%eax
		jne    jump_6048f
		mov    %edx,%eax
		call   ASM_merged_noop_unkn1
		jmp    jump_6048f
	jump_604f2:
		mov    0xc(%esp),%eax
		xor    %ecx,%ecx
		test   %ax,%ax
		ja     jump_6066d
	jump_60501:
		mov    0x22(%esp),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    prim_objects,%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0x8(%edx),%ax
		mov    %eax,0x8(%esp)
		mov    0x6(%edx),%ax
		mov    %eax,0x20(%esp)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(mem_game)+516,%esi
		mov    0x20(%esp),%ax
		cmp    %esi,%eax
		jg     jump_605dd
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(next_object),%bx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		mov    game_objects,%ebx
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    EXPORT_SYMBOL(next_object_face4),%bx
		mov    %bx,0x6(%eax)
		mov    0x8(%esp),%ebx
		mov    %bx,0x8(%eax)
		mov    0x18(%esp),%ebx
		mov    %bx,0x18(%eax)
		mov    0x1a(%edx),%bx
		mov    0x18(%edx),%di
		mov    0x18(%esp),%edx
		sub    %edi,%ebx
		add    %edx,%ebx
		mov    %bx,0x1a(%eax)
		xor    %ebx,%ebx
		mov    0x8(%esp),%ecx
		mov    %ebx,0x14(%esp)
		test   %cx,%cx
		ja     jump_60941
	jump_605a0:
		mov    EXPORT_SYMBOL(next_object),%bx
		xor    %eax,%eax
		inc    %ebx
		mov    ingame__LowerMemoryUse,%ax
		mov    %bx,EXPORT_SYMBOL(next_object)
		cmp    $0x3,%eax
		jne    jump_605c6
		mov    $0xffffd8eb,%eax
		call   ASM_merged_noop_unkn1
	jump_605c6:
		xor    %eax,%eax
		mov    ingame__LowerMemoryUse,%ax
		cmp    $0x3,%eax
		jne    jump_605dd
		mov    $0xffffd8f0,%eax
		call   ASM_merged_noop_unkn1
	jump_605dd:
		add    $0x28,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_605e4:
		mov    0x9(%ebx),%al
		mov    %al,0x9(%edx)
		mov    0x8(%ebx),%al
		mov    %al,0x8(%edx)
		mov    0xa(%ebx),%ax
		mov    %ax,0xa(%edx)
		mov    EXPORT_SYMBOL(next_object),%ax
		mov    %ax,0xc(%edx)
		mov    0x1c(%esp),%esi
		mov    (%ebx),%ax
		sub    %esi,%eax
		mov    0x18(%esp),%esi
		add    %eax,%esi
		mov    %si,(%edx)
		mov    0x1c(%esp),%edi
		mov    0x2(%ebx),%ax
		mov    0x18(%esp),%esi
		sub    %edi,%eax
		add    %eax,%esi
		mov    %si,0x2(%edx)
		mov    0x4(%ebx),%ax
		mov    0x18(%esp),%ebx
		sub    %edi,%eax
		add    %eax,%ebx
		mov    EXPORT_SYMBOL(next_object_face),%ax
		mov    %bx,0x4(%edx)
		dec    %eax
		and    $0xffff,%eax
		call   func_421ac
		movw   $0x0,0x14(%edx)
		movw   $0x0,0x16(%edx)
		mov    0xc(%esp),%esi
		movw   $0x0,0x18(%edx)
		inc    %ecx
		mov    %ax,0x1a(%edx)
		cmp    %si,%cx
		jae    jump_60501
	jump_6066d:
		xor    %eax,%eax
		mov    ingame__LowerMemoryUse,%ax
		cmp    $0x3,%eax
		jne    jump_60684
		xor    %eax,%eax
		mov    %cx,%ax
		call   ASM_merged_noop_unkn1
	jump_60684:
		xor    %edx,%edx
		xor    %eax,%eax
		mov    (%esp),%dx
		mov    %cx,%ax
		add    %edx,%eax
		mov    prim_object_faces,%ebx
		shl    $0x5,%eax
		xor    %edx,%edx
		add    %eax,%ebx
		mov    EXPORT_SYMBOL(next_object_face),%ax
		mov    EXPORT_SYMBOL(mem_game)+102,%edi
		mov    %ax,%dx
		inc    %eax
		mov    %edx,%esi
		mov    %ax,EXPORT_SYMBOL(next_object_face)
		xor    %eax,%eax
		mov    game_object_faces,%edx
		mov    EXPORT_SYMBOL(next_object_face),%ax
		shl    $0x5,%esi
		add    $0x2,%eax
		add    %esi,%edx
		cmp    %edi,%eax
		jg     jump_605dd
		mov    0x6(%ebx),%si
		test   %si,%si
		je     jump_605e4
		testb  $0x10,0x8(%ebx)
		jne    jump_6070a
		xor    %eax,%eax
		mov    %si,%ax
		mov    prim_face_textures,%esi
		shl    $0x4,%eax
		add    %esi,%eax
		call   find_face_texture
		mov    %ax,0x6(%edx)
		xor    %eax,%eax
		mov    0x6(%edx),%ax
		test   %eax,%eax
		jne    jump_60754
	jump_6070a:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(next_face_texture),%ax
		mov    EXPORT_SYMBOL(mem_game)+56,%ebp
		lea    0x2(%eax),%esi
		cmp    %ebp,%esi
		jg     jump_605dd
		xor    %esi,%esi
		mov    0x6(%ebx),%si
		mov    prim_face_textures,%edi
		shl    $0x4,%esi
		shl    $0x4,%eax
		add    %edi,%esi
		mov    game_face_textures,%edi
		add    %eax,%edi
		mov    EXPORT_SYMBOL(next_face_texture),%ax
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		mov    %ax,0x6(%edx)
		inc    %eax
		mov    %ax,EXPORT_SYMBOL(next_face_texture)
	jump_60754:
		xor    %eax,%eax
		mov    ingame__LowerMemoryUse,%ax
		cmp    $0x3,%eax
		jne    jump_605e4
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(next_face_texture),%ax
		neg    %eax
		call   ASM_merged_noop_unkn1
		jmp    jump_605e4
	jump_60779:
		inc    %eax
		imul   $0x36,%eax,%ebp
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(next_anim_tmap),%ax
		imul   $0x36,%eax,%edi
		mov    game_anim_tmaps,%esi
		mov    $0xd,%ecx
		add    %esi,%ebp
		add    %esi,%edi
		mov    %ebp,%esi
		rep movsl %ds:(%esi),%es:(%edi)
		movsw  %ds:(%esi),%es:(%edi)
		call   update_texture_from_anim_tmap
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(next_anim_tmap),%ax
		imul   $0x36,%eax,%eax
		mov    game_anim_tmaps,%esi
		mov    EXPORT_SYMBOL(next_floor_texture),%cx
		movw   $0x0,0x24(%esi,%eax,1)
		mov    %cx,(%esi,%eax,1)
		xor    %eax,%eax
		mov    0x8(%ebx),%ax
		lea    0x0(,%eax,2),%esi
		mov    %cx,data_19cb58(%esi)
		mov    %ecx,%eax
		mov    %cx,0x8(%edx)
		mov    EXPORT_SYMBOL(next_anim_tmap),%cx
		inc    %eax
		inc    %ecx
		mov    %ax,EXPORT_SYMBOL(next_floor_texture)
		mov    %cx,EXPORT_SYMBOL(next_anim_tmap)
		jmp    jump_60883
	jump_607fa:
		cmpw   $0x0,0x8(%ebx)
		je     jump_60883
		testb  $0x10,0xa(%ebx)
		jne    jump_6082e
		xor    %eax,%eax
		mov    0x8(%ebx),%ax
		imul   $0x12,%eax,%esi
		mov    prim4_textures,%eax
		add    %esi,%eax
		call   func_41f44
		mov    %ax,0x8(%edx)
		xor    %eax,%eax
		mov    0x8(%edx),%ax
		test   %eax,%eax
		jne    jump_60869
	jump_6082e:
		xor    %eax,%eax
		mov    0x8(%ebx),%ax
		imul   $0x12,%eax,%eax
		mov    prim4_textures,%esi
		add    %eax,%esi
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(next_floor_texture),%ax
		imul   $0x12,%eax,%eax
		mov    game_textures,%edi
		add    %eax,%edi
		mov    EXPORT_SYMBOL(next_floor_texture),%ax
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsw  %ds:(%esi),%es:(%edi)
		mov    %ax,0x8(%edx)
		inc    %eax
		mov    %ax,EXPORT_SYMBOL(next_floor_texture)
	jump_60869:
		xor    %eax,%eax
		mov    ingame__LowerMemoryUse,%ax
		cmp    $0x3,%eax
		jne    jump_60883
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(next_floor_texture),%ax
		call   ASM_merged_noop_unkn1
	jump_60883:
		mov    0xb(%ebx),%al
		mov    %al,0xb(%edx)
		mov    0xa(%ebx),%al
		mov    %al,0xa(%edx)
		mov    0xc(%ebx),%ax
		mov    %ax,0xc(%edx)
		mov    EXPORT_SYMBOL(next_object),%ax
		mov    %ax,0xe(%edx)
		mov    0x1c(%esp),%esi
		mov    (%ebx),%ax
		mov    0x18(%esp),%ecx
		sub    %esi,%eax
		add    %eax,%ecx
		mov    %cx,(%edx)
		mov    0x2(%ebx),%ax
		mov    0x18(%esp),%ecx
		sub    %esi,%eax
		add    %eax,%ecx
		mov    %cx,0x2(%edx)
		mov    0x4(%ebx),%ax
		mov    0x18(%esp),%ecx
		sub    %esi,%eax
		add    %eax,%ecx
		mov    %cx,0x4(%edx)
		mov    0x6(%ebx),%ax
		mov    0x18(%esp),%ebx
		sub    %esi,%eax
		add    %eax,%ebx
		mov    EXPORT_SYMBOL(next_object_face4),%ax
		mov    %bx,0x6(%edx)
		dec    %eax
		and    $0xffff,%eax
		call   func_420f8
		movw   $0x0,0x18(%edx)
		movw   $0x0,0x1a(%edx)
		mov    %ax,0x20(%edx)
		xor    %eax,%eax
		movw   $0x0,0x1c(%edx)
		mov    ingame__LowerMemoryUse,%ax
		movw   $0x0,0x1e(%edx)
		cmp    $0x3,%eax
		jne    jump_6092b
		xor    %eax,%eax
		mov    0x14(%esp),%ax
		neg    %eax
		call   ASM_merged_noop_unkn1
	jump_6092b:
		mov    0x14(%esp),%edi
		inc    %edi
		mov    0x8(%esp),%edx
		mov    %edi,0x14(%esp)
		cmp    %dx,%di
		jae    jump_605a0
	jump_60941:
		xor    %edx,%edx
		xor    %eax,%eax
		mov    0x20(%esp),%dx
		mov    0x14(%esp),%ax
		add    %edx,%eax
		imul   $0x28,%eax,%eax
		mov    prim_object_faces4,%ebx
		xor    %edx,%edx
		add    %eax,%ebx
		mov    EXPORT_SYMBOL(next_object_face4),%ax
		mov    %ax,%dx
		imul   $0x28,%edx,%edx
		inc    %eax
		mov    %ax,EXPORT_SYMBOL(next_object_face4)
		xor    %eax,%eax
		mov    game_object_faces4,%esi
		mov    EXPORT_SYMBOL(next_object_face4),%ax
		mov    EXPORT_SYMBOL(mem_game)+217,%ecx
		add    $0x2,%eax
		add    %esi,%edx
		cmp    %ecx,%eax
		jg     jump_605dd
		testb  $0x20,0xa(%ebx)
		je     jump_607fa
		xor    %eax,%eax
		mov    0x8(%ebx),%ax
		lea    0x0(,%eax,2),%esi
		mov    data_19cb58(%esi),%di
		test   %di,%di
		je     jump_60779
		mov    %di,0x8(%edx)
		jmp    jump_60883


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_alt_at_point)	/* 0x0609C4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    %ax,(%esp)
		mov    %edx,%ecx
		mov    -0x2(%esp),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		jl     jump_609f3
		cmp    $0x8000,%edx
		jge    jump_609f3
		movswl %cx,%eax
		test   %eax,%eax
		jl     jump_609f3
		cmp    $0x8000,%eax
		jl     jump_609fa
	jump_609f3:
		xor    %eax,%eax
		jmp    jump_60ab6
	jump_609fa:
		sar    $0x8,%eax
		sar    $0x8,%edx
		shl    $0x7,%eax
		lea    (%edx,%eax,1),%ebx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%ebx
		add    %eax,%eax
		add    %eax,%ebx
		mov    0x4(%ebx),%eax
		sar    $0x10,%eax
		cmp    $0x7f,%edx
		jne    jump_60a28
		mov    %eax,%edx
		jmp    jump_60a2e
	jump_60a28:
		mov    0x16(%ebx),%edx
		sar    $0x10,%edx
	jump_60a2e:
		movswl %cx,%esi
		sar    $0x8,%esi
		cmp    $0x7f,%esi
		jne    jump_60a3f
		mov    %eax,%esi
		mov    %edx,%ebx
		jmp    jump_60a51
	jump_60a3f:
		mov    0x904(%ebx),%esi
		mov    0x916(%ebx),%ebx
		sar    $0x10,%esi
		sar    $0x10,%ebx
	jump_60a51:
		cmp    %eax,%edx
		jne    jump_60a5d
		cmp    %esi,%eax
		jne    jump_60a5d
		cmp    %ebx,%esi
		je     jump_60ab3
	jump_60a5d:
		xor    %ch,%ch
		mov    %ch,0x1(%esp)
		mov    -0x2(%esp),%edi
		movswl %cx,%ecx
		sar    $0x10,%edi
		lea    (%edi,%ecx,1),%ebp
		cmp    $0x100,%ebp
		jge    jump_60a90
		sub    %eax,%edx
		imul   %edx,%edi
		sar    $0x8,%edi
		sub    %eax,%esi
		add    %eax,%edi
		mov    %esi,%eax
		imul   %ecx,%eax
		sar    $0x8,%eax
		add    %edi,%eax
		jmp    jump_60ab3
	jump_60a90:
		mov    $0x100,%eax
		sub    %ebx,%esi
		sub    %edi,%eax
		imul   %esi,%eax
		sar    $0x8,%eax
		lea    (%ebx,%eax,1),%esi
		mov    $0x100,%eax
		sub    %ebx,%edx
		sub    %ecx,%eax
		imul   %edx,%eax
		sar    $0x8,%eax
		add    %esi,%eax
	jump_60ab3:
		shl    $0x8,%eax
	jump_60ab6:
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		mov    %eax,%eax
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_move_camera)	/* 0x060AC4 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		mov    %edx,%esi
		cmpw   $0x0,ingame__TrackThing
		je     jump_60b08
		xor    %edx,%edx
		mov    ingame__TrackThing,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		add    %eax,%edx
		mov    0x18(%edx),%eax
		mov    0x1c(%edx),%esi
		mov    0x20(%edx),%ebx
		sar    $0x8,%eax
		sar    $0x8,%esi
		sar    $0x8,%ebx
	jump_60b08:
		mov    engn_xc,%edx
		mov    %eax,%edi
		sub    %edx,%edi
		mov    %edi,%eax
		imul   %edi,%eax
		mov    engn_yc,%ecx
		mov    engn_zc,%ebp
		sub    %ecx,%esi
		mov    %ebx,%ecx
		sub    %ebp,%ecx
		mov    %ecx,%edx
		imul   %ecx,%edx
		add    %eax,%edx
		mov    %esi,%eax
		imul   %esi,%eax
		add    %edx,%eax
		call   ac_LbSqrL
		mov    %eax,%edx
		sar    $0x1f,%edx
		mov    %eax,%ebp
		shl    $0x3,%edx
		sbb    %edx,%eax
		sar    $0x3,%eax
		mov    %eax,%ebx
		cmp    $0x200,%eax
		jle    jump_60b5b
		mov    $0x200,%ebx
		jmp    jump_60b65
	jump_60b5b:
		cmp    $0x5,%eax
		jge    jump_60b65
		mov    $0x5,%ebx
	jump_60b65:
		cmp    $0x10,%ebp
		jle    jump_60bbc
		mov    %edi,%edx
		imul   %ebx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebp
		mov    %esi,%edx
		imul   %ebx,%edx
		mov    %eax,%edi
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebp
		mov    %ecx,%edx
		imul   %ebx,%edx
		mov    %eax,%esi
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebp
		mov    engn_zc,%ebx
		mov    engn_yc,%edx
		mov    %eax,%ecx
		mov    engn_xc,%eax
		add    %esi,%edx
		add    %ecx,%ebx
		mov    %edx,engn_yc
		add    %edi,%eax
		mov    %ebx,engn_zc
		mov    %eax,engn_xc
	jump_60bbc:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_track_player)	/* 0x060BC4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		xor    %edx,%edx
		mov    pktrec_mode,%dl
		cmp    $0x2,%edx
		jne    jump_60bf9
		mov    engn_xc,%dx
		mov    %dx,ingame__TrackX
		mov    engn_zc,%dx
		mov    %dx,ingame__TrackZ
		xor    %edx,%edx
		mov    %dx,ingame__TrackThing
	jump_60bf9:
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%ebx
		shl    $0x3,%eax
		add    %ebx,%eax
		testb  $0x40,0xd(%eax)
		je     jump_60c6a
		mov    0x5c(%eax),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		shl    $0x3,%eax
		add    %eax,%ebx
		mov    0x18(%ebx),%eax
		sar    $0x8,%eax
		xor    %edx,%edx
		mov    %ax,ingame__TrackX
		mov    0x20(%ebx),%eax
		mov    0x1c(%ebx),%ecx
		sar    $0x8,%eax
		sar    $0xb,%ecx
		mov    %ax,ingame__TrackZ
		mov    %ax,%dx
		xor    %eax,%eax
		mov    %edx,%ebx
		mov    ingame__TrackX,%ax
		mov    %ecx,%edx
		jmp    jump_60cf2
	jump_60c6a:
		testb  $0x10,0xf(%eax)
		je     jump_60cc5
		mov    0x5c(%eax),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		shl    $0x3,%eax
		add    %eax,%ebx
		mov    0x18(%ebx),%eax
		sar    $0x8,%eax
		mov    %ax,ingame__TrackX
		mov    0x20(%ebx),%eax
		xor    %ecx,%ecx
		sar    $0x8,%eax
		mov    0x1c(%ebx),%edx
		mov    %ax,ingame__TrackZ
		xor    %eax,%eax
		sar    $0xb,%edx
		mov    ingame__TrackZ,%ax
		mov    ingame__TrackX,%cx
		mov    %eax,%ebx
		mov    %ecx,%eax
		call   ac_move_camera
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_60cc5:
		mov    0x18(%eax),%edx
		sar    $0x8,%edx
		mov    %dx,ingame__TrackX
		mov    0x20(%eax),%edx
		sar    $0x8,%edx
		xor    %ebx,%ebx
		mov    %dx,ingame__TrackZ
		mov    %dx,%bx
		mov    0x1c(%eax),%edx
		xor    %eax,%eax
		sar    $0x8,%edx
		mov    ingame__TrackX,%ax
	jump_60cf2:
		call   ac_move_camera
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_track_y)	/* 0x060CFC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		mov    engn_yc,%edx
		sub    %edx,%eax
		sar    $0x3,%eax
		lea    (%edx,%eax,1),%ebx
		mov    %ebx,engn_yc
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_track_angle)	/* 0x060D18 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(engn_anglexz),%ebx
		mov    ingame__fld_unkCA6,%ax
		sar    $0x5,%ebx
		sub    %ebx,%eax
		mov    %eax,%ebx
		je     jump_60db5
		cmp    $0xfffffc00,%eax
		jge    jump_60d44
		mov    $0x1,%ebx
		jmp    jump_60d8e
	jump_60d44:
		cmp    $0x400,%eax
		jg     jump_60d89
		xor    %eax,%eax
		mov    ingame__fld_unkCA8,%ax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ecx
		mov    %ebx,%eax
		sar    $0x4,%ecx
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %ecx,%eax
		jge    jump_60d7c
		xor    %eax,%eax
		mov    ingame__fld_unkCA6,%ax
		shl    $0x5,%eax
		mov    %eax,EXPORT_SYMBOL(engn_anglexz)
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_60d7c:
		test   %ebx,%ebx
		jle    jump_60d87
		mov    $0x1,%ebx
		jmp    jump_60d8e
	jump_60d87:
		jge    jump_60d8e
	jump_60d89:
		mov    $0xffffffff,%ebx
	jump_60d8e:
		xor    %eax,%eax
		mov    ingame__fld_unkCA8,%ax
		imul   %eax,%ebx
		mov    EXPORT_SYMBOL(engn_anglexz),%edx
		add    %ebx,%edx
		mov    %edx,%ebx
		mov    %edx,EXPORT_SYMBOL(engn_anglexz)
		and    $0xffe0,%ebx
		mov    %ebx,EXPORT_SYMBOL(engn_anglexz)
	jump_60db5:
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
calc_bul_offsets:	/* 0x060FD4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    melement_ani,%ecx
		mov    m_sprites,%esi
		mov    nstart_ani_end,%eax
		sub    nstart_ani,%eax
		shr    %eax
		mov    $0x1,%edi
		mov    %eax,0x4(%esp)
		jmp    jump_61089
	jump_61004:
		xor    %eax,%eax
		mov    0x8(%edx),%ax
		imul   $0xa,%eax,%eax
		lea    (%ecx,%eax,1),%edx
		cmp    %ecx,%edx
		jbe    jump_61060
	jump_61014:
		xor    %ebx,%ebx
		mov    (%edx),%bx
		add    %esi,%ebx
		cmp    %esi,%ebx
		jbe    jump_61004
		xor    %eax,%eax
		mov    0x6(%edx),%ax
		mov    %eax,(%esp)
		and    $0x1f0,%eax
		cmp    $0x40,%eax
		jne    jump_61004
		mov    (%esp),%eax
		and    $0xfe00,%eax
		cmp    $0x400,%eax
		jne    jump_61004
		mov    0x2(%edx),%al
		mov    0x4(%ebx),%ah
		movzwl %di,%ebp
		add    %ah,%al
		mov    %al,EXPORT_SYMBOL(bul_starts)(,%ebp,2)
		mov    0x4(%edx),%al
		add    0x5(%ebx),%al
		mov    %al,data_19ab15(,%ebp,2)
	jump_61060:
		xor    %eax,%eax
		mov    %di,%ax
		add    %eax,%eax
		mov    data_19ab11(%eax),%edx
		sar    $0x18,%edx
		test   %edx,%edx
		jne    jump_61088
		mov    data_19ab12(%eax),%edx
		sar    $0x18,%edx
		test   %edx,%edx
		jne    jump_61088
		movb   $0xe2,data_19ab15(%eax)
	jump_61088:
		inc    %edi
	jump_61089:
		xor    %edx,%edx
		xor    %eax,%eax
		mov    0x4(%esp),%dx
		mov    %di,%ax
		dec    %edx
		cmp    %edx,%eax
		jge    jump_610dd
		cmp    $0x7d0,%eax
		jge    jump_610dd
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%dx
		mov    frame,%ebx
		movb   $0x0,EXPORT_SYMBOL(bul_starts)(,%eax,2)
		and    $0xffff,%edx
		movb   $0x0,data_19ab15(,%eax,2)
		xor    %eax,%eax
		mov    (%ebx,%edx,8),%ax
		imul   $0xa,%eax,%eax
		lea    (%ecx,%eax,1),%edx
		cmp    %ecx,%edx
		ja     jump_61014
		jmp    jump_61060
	jump_610dd:
		mov    %esi,m_sprites
		mov    %ecx,melement_ani
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_61628:
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x10,%esp
		mov    %ax,0xc(%esp)
		call   func_617f0
		mov    %eax,%esi
		test   %eax,%eax
		je     jump_617e7
		mov    0x18(%eax),%eax
		sar    $0x8,%eax
		mov    %eax,(%esp)
		mov    0x1c(%esi),%eax
		sar    $0x8,%eax
		mov    %eax,0x4(%esp)
		mov    0x20(%esi),%eax
		sar    $0x8,%eax
		mov    %eax,0x8(%esp)
		mov    0xa(%esp),%eax
		mov    (%esp),%edx
		sar    $0x10,%eax
		add    %eax,%edx
		xor    %edi,%edi
		mov    %edx,(%esp)
		movswl %bx,%eax
		mov    0x8(%esp),%ebx
		mov    (%esp),%di
		add    %eax,%ebx
		mov    prim_unknprop01,%ax
		mov    %ebx,0x8(%esp)
		neg    %eax
		movzwl 0x8(%esp),%ebp
		sub    %ecx,%eax
		mov    %ebp,%edx
		movswl %ax,%ebx
		xor    %ecx,%ecx
		mov    %edi,%eax
		call   ac_sub_6031C
		mov    EXPORT_SYMBOL(next_object),%ax
		dec    %eax
		and    $0xffff,%eax
		call   ac_unkn_object_shift_03
		mov    %ebp,%edx
		mov    EXPORT_SYMBOL(next_object),%ax
		xor    %ebx,%ebx
		dec    %eax
		xor    %ecx,%ecx
		mov    %ax,%bx
		mov    %edi,%eax
		call   create_unkn_building_subtp27
		mov    things_used_head,%di
		movzwl %di,%ebp
		lea    0x0(,%ebp,4),%eax
		add    %ebp,%eax
		shl    $0x2,%eax
		add    %eax,%ebp
		mov    things,%eax
		shl    $0x3,%ebp
		movl   $0x0,0x2c(%eax,%ebp,1)
		movl   $0x0,0x34(%eax,%ebp,1)
		movl   $0x0,0x30(%eax,%ebp,1)
		movw   $0x0,0x64(%eax,%ebp,1)
		mov    (%esp),%ebx
		movw   $0x0,0x66(%eax,%ebp,1)
		shl    $0x8,%ebx
		movw   $0x0,0x68(%eax,%ebp,1)
		mov    %ebx,0x18(%eax,%ebp,1)
		mov    0x8(%esp),%ebx
		movb   $0x2,0x9(%eax,%ebp,1)
		shl    $0x8,%ebx
		mov    %ebx,0x20(%eax,%ebp,1)
		mov    0x4(%esp),%ebx
		movb   $0x1d,0x8(%eax,%ebp,1)
		shl    $0x5,%ebx
		mov    %ebx,0x1c(%eax,%ebp,1)
		mov    %di,data_1c83e2
		mov    0x52(%eax,%ebp,1),%ax
		and    $0xffff,%eax
		call   func_4225c
		mov    %eax,%ebx
		mov    things,%eax
		add    %ebp,%eax
		movw   $0x7d0,0x3a(%eax)
		movw   $0x7d0,0x86(%eax)
		mov    %bx,0x14(%eax)
		mov    EXPORT_SYMBOL(next_object),%bx
		movw   $0x0,(%eax)
		dec    %ebx
		mov    %bx,0x52(%eax)
		mov    0x16(%esi),%bx
		movw   $0x400,0x5a(%eax)
		movw   $0x400,0x38(%eax)
		mov    %bx,0x60(%eax)
		movw   $0x12,0xa(%eax)
		mov    EXPORT_SYMBOL(next_local_mat),%si
		movw   $0x0,0x7c(%eax)
		mov    %si,0x54(%eax)
		mov    %esi,%ebx
		mov    0x52(%eax),%esi
		movw   $0x7530,0x3a(%eax)
		sar    $0x10,%esi
		movw   $0x0,0x94(%eax)
		lea    0x0(,%esi,8),%eax
		add    %esi,%eax
		shl    $0x2,%eax
		inc    %ebx
		add    $EXPORT_SYMBOL(local_mats),%eax
		mov    %bx,EXPORT_SYMBOL(next_local_mat)
		call   ac_matrix_identity_fill
		mov    %di,data_1c83e8
	jump_617e7:
		mov    %edi,%eax
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
func_617f0:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		mov    things,%ebp
		mov    things_used_head,%ax
		mov    EXPORT_SYMBOL(things_used),%dx
		xor    %ebx,%ebx
	jump_6180b:
		cwtl
		test   %eax,%eax
		jle    jump_61880
		dec    %edx
		cmp    $0xffffffff,%dx
		je     jump_61880
		imul   $0xa8,%eax,%eax
		mov    %ebp,%ecx
		add    %ebp,%eax
		xor    %ebp,%ecx
		mov    0x9(%eax),%cl
		mov    0x6(%eax),%di
		cmp    $0x9,%ecx
		jne    jump_6187c
		xor    %ecx,%ecx
		mov    0x8(%eax),%cl
		cmp    $0x1c,%ecx
		jne    jump_6187c
		mov    0x4c(%eax),%ecx
		sar    $0x10,%ecx
		test   %ecx,%ecx
		jne    jump_6187c
		testb  $0x8,0xf(%eax)
		jne    jump_6187c
		mov    0x68(%eax),%ecx
		sar    $0x10,%ecx
		test   %ecx,%ecx
		je     jump_6187c
		mov    0x66(%eax),%ecx
		sar    $0x10,%ecx
		test   %ecx,%ecx
		je     jump_6187c
		mov    ingame__dword_180C57,%ecx
		inc    %ebx
		xor    %esi,%esi
		sar    $0x10,%ecx
		mov    %bx,%si
		cmp    %ecx,%esi
		jle    jump_6187c
		mov    %eax,%ecx
		jmp    jump_61882
	jump_6187c:
		mov    %edi,%eax
		jmp    jump_6180b
	jump_61880:
		xor    %ecx,%ecx
	jump_61882:
		mov    %ecx,%eax
		mov    %ebp,things
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_on_mapwho)	/* 0x0618A0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		mov    EXPORT_SYMBOL(sthings),%ecx
		mov    things,%esi
		mov    %eax,%ebx
		mov    0x20(%eax),%eax
		mov    0x18(%ebx),%edx
		sar    $0x10,%eax
		sar    $0x10,%edx
		shl    $0x7,%eax
		add    %eax,%edx
		lea    0x0(,%edx,8),%eax
		add    %eax,%edx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %edx,%edx
		mov    0x8(%edx,%eax,1),%dx
		test   %dx,%dx
		je     jump_61911
		mov    0x16(%ebx),%bx
		and    $0xffff,%ebx
	jump_618e7:
		movswl %dx,%eax
		cmp    %ebx,%eax
		jne    jump_618f2
		mov    $0x1,%al
		jmp    jump_61913
	jump_618f2:
		test   %eax,%eax
		jle    jump_61900
		imul   $0xa8,%eax,%eax
		mov    %esi,%edx
		jmp    jump_61907
	jump_61900:
		jge    jump_6190c
		imul   $0x3c,%eax,%eax
		mov    %ecx,%edx
	jump_61907:
		mov    0x2(%edx,%eax,1),%dx
	jump_6190c:
		test   %dx,%dx
		jne    jump_618e7
	jump_61911:
		xor    %al,%al
	jump_61913:
		mov    %esi,things
		mov    %ecx,EXPORT_SYMBOL(sthings)
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
apply_unkn_vehicle50_damage:	/* 0x061E30 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x24,%esp
		mov    %eax,0x1c(%esp)
		mov    %edx,0x20(%esp)
		mov    %ebx,0x18(%esp)
		mov    %edx,%eax
		sar    $0x10,%eax
		mov    %eax,0x4(%esp)
		mov    0x1c(%esp),%eax
		sar    $0x10,%eax
		lea    -0x2(%eax),%edx
		add    $0x3,%eax
		mov    %edx,0x8(%esp)
		mov    %eax,(%esp)
		jmp    jump_61e76
	jump_61e62:
		mov    0x8(%esp),%edx
		inc    %edx
		mov    (%esp),%ebx
		mov    %edx,0x8(%esp)
		cmp    %ebx,%edx
		je     jump_6203a
	jump_61e76:
		mov    0x8(%esp),%eax
		mov    %eax,0x10(%esp)
		test   %eax,%eax
		jl     jump_61e62
		cmp    $0x7f,%eax
		jg     jump_61e62
		mov    0x4(%esp),%eax
		sub    $0x2,%eax
		mov    %eax,0x14(%esp)
		mov    0x4(%esp),%eax
		add    $0x3,%eax
		mov    %eax,0xc(%esp)
		jmp    jump_61f78
	jump_61ea2:
		mov    %eax,%ebp
		sar    $0x5,%ebp
		sub    %ebp,%eax
		sub    %ecx,%eax
		mov    %eax,%ecx
		mov    %ebx,%eax
		sar    $0x2,%eax
		add    %eax,%ecx
		mov    %ebx,%eax
		sar    $0x3,%eax
		sar    $0x6,%ebx
		add    %ecx,%eax
		add    %ebx,%eax
		add    %eax,%edx
	jump_61ec2:
		mov    $0x258,%eax
		sar    $0x8,%edx
		sub    %edx,%eax
		imul   0x18(%esp),%eax
		sar    $0x9,%eax
		test   %eax,%eax
		jle    jump_61f5f
		orb    $0x80,0x7c(%esi)
		xor    %edx,%edx
		mov    0x8(%esi),%dl
		cmp    $0x33,%edx
		jne    jump_61eec
		sar    %eax
	jump_61eec:
		xor    %edx,%edx
		mov    0x8(%esi),%dl
		cmp    $0x3b,%edx
		jne    jump_61ef9
		sar    $0x2,%eax
	jump_61ef9:
		sub    %ax,0x3a(%esi)
		mov    0x38(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jg     jump_61f5f
		xor    %eax,%eax
		mov    0x8(%esi),%al
		cmp    $0x3b,%eax
		jne    jump_61f23
		mov    0xc(%esi),%bl
		or     $0x2,%bl
		mov    %esi,%eax
		mov    %bl,0xc(%esi)
		call   init_mech_explode
		jmp    jump_61f5f
	jump_61f23:
		mov    0xc(%esi),%dh
		or     $0x2,%dh
		mov    %esi,%eax
		mov    %dh,0xc(%esi)
		call   ac_start_crashing
		push   $0x1
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x5f,%edx
		mov    %esi,%eax
		call   ac_play_dist_sample
		jmp    jump_61f5f
	jump_61f51:
		imul   $0x3c,%edi,%edi
		mov    EXPORT_SYMBOL(sthings),%eax
		mov    (%edi,%eax,1),%edi
		sar    $0x10,%edi
	jump_61f5f:
		test   %edi,%edi
		jne    jump_61fa1
	jump_61f63:
		mov    0x14(%esp),%edi
		inc    %edi
		mov    0xc(%esp),%ebp
		mov    %edi,0x14(%esp)
		cmp    %ebp,%edi
		je     jump_61e62
	jump_61f78:
		mov    0x14(%esp),%eax
		test   %eax,%eax
		jl     jump_61f63
		cmp    $0x7f,%eax
		jg     jump_61f63
		mov    0x10(%esp),%ebx
		shl    $0x7,%eax
		add    %ebx,%eax
		imul   $0x12,%eax,%edx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		mov    0x6(%edx,%eax,1),%edi
		sar    $0x10,%edi
		test   %edi,%edi
		je     jump_61f63
	jump_61fa1:
		jle    jump_61f51
		imul   $0xa8,%edi,%esi
		mov    things,%eax
		add    %eax,%esi
		xor    %eax,%eax
		mov    (%esi),%edi
		mov    0x9(%esi),%al
		sar    $0x10,%edi
		cmp    $0x2,%eax
		jne    jump_61f5f
		xor    %eax,%eax
		mov    0x8(%esi),%al
		cmp    $0x32,%eax
		jne    jump_61f5f
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0x3a,%eax
		je     jump_61fe7
		cmp    $0x41,%eax
		je     jump_61fe7
		cmp    $0x42,%eax
		je     jump_61fe7
		cmp    $0x43,%eax
		jne    jump_61f5f
	jump_61fe7:
		mov    0x20(%esp),%ecx
		mov    0x20(%esi),%eax
		sub    %ecx,%eax
		mov    0x1c(%esp),%ebp
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebx
		mov    0x18(%esi),%eax
		sub    %ebp,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ecx
		mov    %ebx,%edx
		sar    $0x7,%ecx
		sar    $0x7,%edx
		cmp    %ebx,%eax
		jge    jump_61ea2
		mov    %ebx,%ebp
		sar    $0x5,%ebp
		sub    %ebp,%ebx
		sub    %edx,%ebx
		mov    %eax,%edx
		sar    $0x2,%edx
		add    %edx,%ebx
		mov    %eax,%edx
		sar    $0x3,%edx
		sar    $0x6,%eax
		add    %ebx,%edx
		add    %eax,%edx
		add    %ecx,%edx
		jmp    jump_61ec2
	jump_6203a:
		add    $0x24,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_init_free_explode_faces)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		mov    $0xb800,%ebx
		mov    $EXPORT_SYMBOL(ex_faces),%eax
		xor    %edx,%edx
		call   ac_memset
		mov    $0x1,%edx
		mov    $0x2e,%eax
		mov    %dx,data_1aa5cc
		mov    $0x1,%edx
	jump_6206e:
		xor    %ebx,%ebx
		mov    %bx,data_18196c(%eax)
		mov    %edx,%ebx
		add    $0x2e,%eax
		inc    %ebx
		inc    %edx
		mov    %bx,EXPORT_SYMBOL(ex_faces)-0x2c(%eax)
		cmp    $0x3ff,%edx
		jl     jump_6206e
		xor    %ecx,%ecx
		mov    $0x1,%edx
		mov    %cx,data_18196c(%eax)
		mov    %edx,EXPORT_SYMBOL(dont_bother_with_explode_faces)
		mov    %cx,data_18194e(%eax)
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
unkn1_explode_faces:	/* 0x62114 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x6c,%esp
		mov    %eax,0x24(%esp)
		xor    %edx,%edx
		mov    0x52(%eax),%ax
		mov    %edx,EXPORT_SYMBOL(dont_bother_with_explode_faces)
		mov    %eax,0x68(%esp)
		mov    %edx,0x28(%esp)
		jmp    jump_62149
	jump_62137:
		mov    0x28(%esp),%edx
		mov    0x68(%esp),%ecx
		inc    %edx
		inc    %ecx
		mov    %edx,0x28(%esp)
		mov    %ecx,0x68(%esp)
	jump_62149:
		mov    0x24(%esp),%edx
		xor    %eax,%eax
		mov    0x28(%esp),%ecx
		mov    0x56(%edx),%al
		cmp    %ecx,%eax
		jle    jump_6275f
		xor    %eax,%eax
		mov    0x68(%esp),%ax
		imul   $0x24,%eax,%eax
		mov    game_objects,%edx
		add    %eax,%edx
		mov    0x2(%edx),%ax
		mov    %eax,0x64(%esp)
		mov    (%edx),%ax
		mov    %eax,0x5c(%esp)
		mov    0x14(%edx),%ax
		mov    %edx,0x14(%esp)
		mov    %ax,0x4c(%esp)
		mov    0xe(%edx),%ax
		mov    0x64(%esp),%ebx
		mov    %ax,0x54(%esp)
		mov    0x16(%edx),%ax
		xor    %edx,%edx
		mov    %ax,0x44(%esp)
		mov    %edx,0x40(%esp)
		test   %bx,%bx
		jbe    jump_6243c
		jmp    jump_621c9
	jump_621b3:
		mov    0x40(%esp),%ecx
		inc    %ecx
		mov    0x64(%esp),%esi
		mov    %ecx,0x40(%esp)
		cmp    %si,%cx
		jae    jump_6243c
	jump_621c9:
		xor    %eax,%eax
		xor    %edx,%edx
		mov    0x5c(%esp),%ax
		mov    0x40(%esp),%dx
		add    %edx,%eax
		mov    game_object_faces,%edi
		shl    $0x5,%eax
		add    %eax,%edi
		xor    %eax,%eax
		mov    (%edi),%ax
		imul   $0xa,%eax,%eax
		mov    EXPORT_SYMBOL(game_object_points),%edx
		mov    0x4a(%esp),%ecx
		mov    (%edx,%eax,1),%ebx
		sar    $0x10,%ecx
		sar    $0x10,%ebx
		lea    (%ecx,%ebx,1),%esi
		mov    %esi,0x38(%esp)
		mov    0x2(%edx,%eax,1),%ebx
		mov    0x52(%esp),%esi
		sar    $0x10,%ebx
		sar    $0x10,%esi
		lea    (%esi,%ebx,1),%ebp
		mov    0x4(%edx,%eax,1),%ebx
		mov    0x42(%esp),%eax
		sar    $0x10,%ebx
		sar    $0x10,%eax
		mov    %ebp,0x10(%esp)
		lea    (%eax,%ebx,1),%ebp
		xor    %ebx,%ebx
		mov    0x2(%edi),%bx
		imul   $0xa,%ebx,%ebx
		mov    %ebp,0x2c(%esp)
		mov    (%edx,%ebx,1),%ebp
		sar    $0x10,%ebp
		add    %ecx,%ebp
		mov    %ebp,0x34(%esp)
		mov    0x2(%edx,%ebx,1),%ebp
		sar    $0x10,%ebp
		mov    0x4(%edx,%ebx,1),%ebx
		add    %esi,%ebp
		sar    $0x10,%ebx
		mov    %ebp,0x18(%esp)
		lea    (%eax,%ebx,1),%ebp
		xor    %ebx,%ebx
		mov    0x4(%edi),%bx
		imul   $0xa,%ebx,%ebx
		add    %ebx,%edx
		mov    (%edx),%ebx
		sar    $0x10,%ebx
		add    %ebx,%ecx
		mov    0x2(%edx),%ebx
		sar    $0x10,%ebx
		mov    0x4(%edx),%edx
		add    %ebx,%esi
		sar    $0x10,%edx
		mov    %esi,0x8(%esp)
		add    %edx,%eax
		mov    0x38(%esp),%edx
		add    0x34(%esp),%edx
		mov    $0x3,%ebx
		add    %ecx,%edx
		mov    %eax,0xc(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %ecx,0x4(%esp)
		mov    0x10(%esp),%edx
		mov    %eax,%ecx
		mov    0x18(%esp),%eax
		mov    0x8(%esp),%ebx
		add    %eax,%edx
		add    %ebx,%edx
		mov    $0x3,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    0x2c(%esp),%edx
		mov    %eax,%esi
		mov    0xc(%esp),%eax
		add    %ebp,%edx
		add    %eax,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,%ebx
		xor    %eax,%eax
		mov    data_1aa5cc,%ax
		mov    %ebp,0x3c(%esp)
		test   %eax,%eax
		je     jump_622f6
		imul   $0x2e,%eax,%edx
		mov    data_18194e(%edx),%dx
		mov    %dx,data_1aa5cc
	jump_622f6:
		test   %eax,%eax
		je     jump_621b3
		imul   $0x2e,%eax,%eax
		mov    $EXPORT_SYMBOL(ex_faces),%edx
		add    %eax,%edx
		movb   $0x5,0x4(%edx)
		mov    0x6(%edi),%ax
		mov    %ax,(%edx)
		xor    %ah,%ah
		mov    0x9(%edi),%al
		mov    %ax,0x2(%edx)
		mov    0xa(%edi),%al
		mov    %al,0x5(%edx)
		mov    0x38(%esp),%eax
		sub    %ecx,%eax
		mov    %ax,0x6(%edx)
		mov    0x10(%esp),%eax
		sub    %esi,%eax
		mov    %ax,0x8(%edx)
		mov    0x2c(%esp),%eax
		sub    %ebx,%eax
		mov    %ax,0xa(%edx)
		mov    0x34(%esp),%eax
		sub    %ecx,%eax
		mov    %ax,0xc(%edx)
		mov    0x18(%esp),%eax
		sub    %esi,%eax
		mov    %ax,0xe(%edx)
		mov    0x3c(%esp),%eax
		sub    %ebx,%eax
		mov    %ax,0x10(%edx)
		mov    0x4(%esp),%eax
		mov    %cx,0x22(%edx)
		sub    %ecx,%eax
		mov    %ax,0x12(%edx)
		mov    0x8(%esp),%eax
		mov    %si,0x24(%edx)
		sub    %esi,%eax
		mov    %ax,0x14(%edx)
		mov    0xc(%esp),%eax
		mov    %bx,0x26(%edx)
		sub    %ebx,%eax
		mov    %ax,0x16(%edx)
		call   ac_LbRandomAnyShort
		mov    %ax,0x58(%esp)
		mov    0x58(%esp),%al
		and    $0xf,%al
		sub    $0x7,%al
		mov    %al,0x2b(%edx)
		call   ac_LbRandomAnyShort
		mov    %ax,0x58(%esp)
		mov    0x58(%esp),%al
		and    $0xf,%al
		sub    $0x7,%al
		mov    %al,0x2c(%edx)
		mov    0x4a(%esp),%eax
		mov    %ecx,%esi
		sar    $0x10,%eax
		sub    %eax,%esi
		mov    %esi,%eax
		mov    %ebx,%edi
		sar    $0x5,%eax
		mov    0x42(%esp),%esi
		mov    %eax,0x20(%esp)
		sar    $0x10,%esi
		mov    0x20(%esp),%al
		sub    %esi,%edi
		mov    %al,0x28(%edx)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		mov    %edi,%esi
		and    $0x7,%al
		mov    $0x1,%edi
		and    $0xffff,%eax
		sub    %eax,%edi
		mov    %edi,%eax
		sar    $0x3,%eax
		mov    %eax,0x20(%esp)
		sar    $0x5,%esi
		mov    0x20(%esp),%al
		mov    %esi,0x20(%esp)
		mov    %al,0x29(%edx)
		mov    0x20(%esp),%al
		mov    %al,0x2a(%edx)
		mov    data_1aa5d0,%eax
		sub    %ecx,%eax
		mov    %eax,%ecx
		sar    $0x8,%ecx
		imul   %ecx,%ecx
		mov    data_1aa5d4,%eax
		sub    %ebx,%eax
		sar    $0x8,%eax
		imul   %eax,%eax
		add    %ecx,%eax
		sar    $0x3,%eax
		add    $0x3ea,%eax
		mov    %ax,0x20(%edx)
		jmp    jump_621b3
	jump_6243c:
		mov    0x14(%esp),%eax
		mov    0x8(%eax),%ax
		mov    %eax,0x60(%esp)
		mov    0x14(%esp),%eax
		mov    0x6(%eax),%ax
		xor    %edi,%edi
		mov    %eax,0x50(%esp)
		mov    0x60(%esp),%eax
		mov    %edi,0x48(%esp)
		test   %ax,%ax
		jbe    jump_62137
		jmp    jump_6247f
	jump_62469:
		mov    0x48(%esp),%edx
		inc    %edx
		mov    0x60(%esp),%ebx
		mov    %edx,0x48(%esp)
		cmp    %bx,%dx
		jae    jump_62137
	jump_6247f:
		xor    %edx,%edx
		xor    %eax,%eax
		mov    0x50(%esp),%dx
		mov    0x48(%esp),%ax
		add    %edx,%eax
		imul   $0x28,%eax,%eax
		mov    game_object_faces4,%edi
		add    %eax,%edi
		xor    %eax,%eax
		mov    (%edi),%ax
		imul   $0xa,%eax,%eax
		mov    EXPORT_SYMBOL(game_object_points),%esi
		lea    (%esi,%eax,1),%ebx
		mov    0x4a(%esp),%edx
		mov    (%ebx),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		lea    (%edx,%eax,1),%ecx
		mov    %ecx,0x38(%esp)
		mov    0x2(%ebx),%eax
		mov    0x52(%esp),%ecx
		sar    $0x10,%eax
		sar    $0x10,%ecx
		lea    (%ecx,%eax,1),%ebp
		mov    0x4(%ebx),%eax
		mov    0x42(%esp),%ebx
		sar    $0x10,%eax
		sar    $0x10,%ebx
		mov    %ebp,0x10(%esp)
		lea    (%ebx,%eax,1),%ebp
		xor    %eax,%eax
		mov    0x2(%edi),%ax
		imul   $0xa,%eax,%eax
		mov    %ebp,0x2c(%esp)
		mov    (%esi,%eax,1),%ebp
		sar    $0x10,%ebp
		add    %edx,%ebp
		mov    %ebp,0x34(%esp)
		mov    0x2(%esi,%eax,1),%ebp
		sar    $0x10,%ebp
		mov    0x4(%esi,%eax,1),%eax
		add    %ecx,%ebp
		sar    $0x10,%eax
		mov    %ebp,0x18(%esp)
		lea    (%ebx,%eax,1),%ebp
		xor    %eax,%eax
		mov    0x4(%edi),%ax
		imul   $0xa,%eax,%eax
		mov    %ebp,0x3c(%esp)
		mov    (%esi,%eax,1),%ebp
		sar    $0x10,%ebp
		add    %edx,%ebp
		mov    %ebp,0x4(%esp)
		mov    0x2(%esi,%eax,1),%ebp
		sar    $0x10,%ebp
		mov    0x4(%esi,%eax,1),%eax
		add    %ecx,%ebp
		sar    $0x10,%eax
		mov    %ebp,0x8(%esp)
		lea    (%ebx,%eax,1),%ebp
		xor    %eax,%eax
		mov    0x6(%edi),%ax
		imul   $0xa,%eax,%eax
		add    %eax,%esi
		mov    (%esi),%eax
		sar    $0x10,%eax
		add    %eax,%edx
		mov    0x2(%esi),%eax
		sar    $0x10,%eax
		add    %eax,%ecx
		mov    0x4(%esi),%eax
		sar    $0x10,%eax
		mov    %ecx,0x30(%esp)
		add    %eax,%ebx
		mov    0x38(%esp),%eax
		mov    %ebx,(%esp)
		mov    0x34(%esp),%ebx
		mov    0x4(%esp),%ecx
		add    %ebx,%eax
		add    %ecx,%eax
		mov    %edx,0x1c(%esp)
		add    %eax,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x2,%edx
		sbb    %edx,%eax
		sar    $0x2,%eax
		mov    %ebp,0xc(%esp)
		mov    0x8(%esp),%ebp
		mov    0x18(%esp),%esi
		mov    0x10(%esp),%edx
		mov    %eax,%ecx
		add    %esi,%edx
		mov    0x30(%esp),%eax
		add    %ebp,%edx
		add    %eax,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x2,%edx
		sbb    %edx,%eax
		sar    $0x2,%eax
		mov    0x3c(%esp),%ebx
		mov    0xc(%esp),%ebp
		mov    0x2c(%esp),%edx
		mov    %eax,%esi
		add    %ebx,%edx
		mov    (%esp),%eax
		add    %ebp,%edx
		add    %eax,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x2,%edx
		sbb    %edx,%eax
		sar    $0x2,%eax
		mov    %eax,%ebx
		xor    %eax,%eax
		mov    data_1aa5cc,%ax
		test   %eax,%eax
		je     jump_625fa
		imul   $0x2e,%eax,%edx
		mov    data_18194e(%edx),%dx
		mov    %dx,data_1aa5cc
	jump_625fa:
		test   %eax,%eax
		je     jump_62469
		imul   $0x2e,%eax,%eax
		mov    $EXPORT_SYMBOL(ex_faces),%edx
		add    %eax,%edx
		movb   $0x6,0x4(%edx)
		mov    0x8(%edi),%ax
		mov    %ax,(%edx)
		xor    %ah,%ah
		mov    0xb(%edi),%al
		mov    %ax,0x2(%edx)
		mov    0xc(%edi),%al
		mov    %al,0x5(%edx)
		mov    0x38(%esp),%eax
		sub    %ecx,%eax
		mov    %ax,0x6(%edx)
		mov    0x10(%esp),%eax
		sub    %esi,%eax
		mov    %ax,0x8(%edx)
		mov    0x2c(%esp),%eax
		sub    %ebx,%eax
		mov    %ax,0xa(%edx)
		mov    0x34(%esp),%eax
		sub    %ecx,%eax
		mov    %ax,0xc(%edx)
		mov    0x18(%esp),%eax
		sub    %esi,%eax
		mov    %ax,0xe(%edx)
		mov    0x3c(%esp),%eax
		sub    %ebx,%eax
		mov    %ax,0x10(%edx)
		mov    0x4(%esp),%eax
		sub    %ecx,%eax
		mov    %ax,0x12(%edx)
		mov    0x8(%esp),%eax
		sub    %esi,%eax
		mov    %ax,0x14(%edx)
		mov    0xc(%esp),%eax
		sub    %ebx,%eax
		mov    %ax,0x16(%edx)
		mov    0x1c(%esp),%eax
		mov    %cx,0x22(%edx)
		sub    %ecx,%eax
		mov    %ax,0x18(%edx)
		mov    0x30(%esp),%eax
		mov    %si,0x24(%edx)
		sub    %esi,%eax
		mov    %ax,0x1a(%edx)
		mov    (%esp),%eax
		mov    %bx,0x26(%edx)
		sub    %ebx,%eax
		mov    %ax,0x1c(%edx)
		call   ac_LbRandomAnyShort
		mov    %ax,0x58(%esp)
		mov    0x58(%esp),%al
		and    $0xf,%al
		sub    $0x7,%al
		mov    %al,0x2b(%edx)
		call   ac_LbRandomAnyShort
		mov    %ax,0x58(%esp)
		mov    0x58(%esp),%al
		and    $0xf,%al
		sub    $0x7,%al
		mov    %al,0x2c(%edx)
		mov    0x4a(%esp),%eax
		mov    %ecx,%esi
		sar    $0x10,%eax
		sub    %eax,%esi
		mov    %esi,%eax
		mov    %ebx,%edi
		sar    $0x5,%eax
		mov    0x42(%esp),%esi
		mov    %eax,0x20(%esp)
		sar    $0x10,%esi
		mov    0x20(%esp),%al
		sub    %esi,%edi
		mov    %al,0x28(%edx)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		mov    %edi,%esi
		and    $0x7,%al
		mov    $0x1,%edi
		and    $0xffff,%eax
		sub    %eax,%edi
		mov    %edi,%eax
		sar    $0x3,%eax
		mov    %eax,0x20(%esp)
		sar    $0x5,%esi
		mov    0x20(%esp),%al
		mov    %esi,0x20(%esp)
		mov    %al,0x29(%edx)
		mov    0x20(%esp),%al
		mov    %al,0x2a(%edx)
		mov    data_1aa5d0,%eax
		sub    %ecx,%eax
		sar    $0x8,%eax
		imul   %eax,%eax
		mov    data_1aa5d4,%ecx
		sub    %ebx,%ecx
		mov    %ecx,%ebx
		sar    $0x8,%ebx
		imul   %ebx,%ebx
		add    %eax,%ebx
		sar    $0x3,%ebx
		add    $0x3ea,%ebx
		mov    %bx,0x20(%edx)
		jmp    jump_62469
	jump_6275f:
		add    $0x6c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_6276c:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x38,%esp
		mov    %edx,%esi
		xor    %edx,%edx
		mov    %edx,EXPORT_SYMBOL(dont_bother_with_explode_faces)
		test   %eax,%eax
		jl     jump_62a2e
		cmp    $0x80,%eax
		jge    jump_62a2e
		test   %esi,%esi
		jl     jump_62a2e
		cmp    $0x80,%esi
		jge    jump_62a2e
		mov    %esi,%edx
		shl    $0x7,%edx
		lea    (%eax,%edx,1),%ebx
		lea    0x0(,%ebx,8),%edx
		add    %ebx,%edx
		mov    EXPORT_SYMBOL(game_my_big_map),%ebx
		add    %edx,%edx
		add    %edx,%ebx
		mov    %ebx,0x18(%esp)
		testb  $0x80,0x5(%ebx)
		jne    jump_62a2e
		shl    $0x8,%eax
		mov    %eax,0x24(%esp)
		add    $0x100,%eax
		shl    $0x8,%esi
		mov    %eax,0x2c(%esp)
		mov    0x24(%esp),%eax
		mov    %esi,0x20(%esp)
		mov    %eax,0x1c(%esp)
		lea    0x100(%esi),%eax
		mov    %eax,0x30(%esp)
		mov    0x2c(%esp),%eax
		mov    %eax,0x28(%esp)
		mov    0x30(%esp),%eax
		mov    %eax,(%esp)
		mov    0x22(%esp),%eax
		movswl %si,%edx
		sar    $0x10,%eax
		call   ac_alt_at_point
		mov    0x1e(%esp),%edx
		mov    %eax,0x4(%esp)
		mov    %eax,0x10(%esp)
		mov    0x2a(%esp),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		call   ac_alt_at_point
		mov    0x2e(%esp),%edx
		mov    %eax,%ebp
		mov    %eax,0x14(%esp)
		mov    0x1a(%esp),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		call   ac_alt_at_point
		mov    -0x2(%esp),%edx
		mov    %eax,%ebx
		mov    %eax,0xc(%esp)
		mov    0x26(%esp),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		mov    0x2c(%esp),%ecx
		call   ac_alt_at_point
		mov    %eax,%edi
		mov    %eax,0x8(%esp)
		mov    0x24(%esp),%eax
		mov    0x24(%esp),%edx
		add    %ecx,%eax
		add    %edx,%eax
		lea    (%ecx,%eax,1),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x2,%edx
		sbb    %edx,%eax
		sar    $0x2,%eax
		mov    %eax,%ecx
		add    0x4(%esp),%ebp
		lea    (%ebx,%ebp,1),%edx
		add    %edi,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x2,%edx
		sbb    %edx,%eax
		sar    $0x2,%eax
		mov    0x30(%esp),%edx
		mov    %eax,%edi
		lea    (%esi,%esi,1),%eax
		add    %edx,%eax
		add    %eax,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x2,%edx
		sbb    %edx,%eax
		sar    $0x2,%eax
		movzwl data_1aa5cc,%ebp
		mov    %eax,%ebx
		test   %ebp,%ebp
		je     jump_628e3
		lea    0x0(,%ebp,4),%edx
		sub    %ebp,%edx
		shl    $0x3,%edx
		sub    %ebp,%edx
		mov    data_18194e(,%edx,2),%ax
		mov    %ax,data_1aa5cc
	jump_628e3:
		test   %ebp,%ebp
		je     jump_62a2e
		lea    0x0(,%ebp,4),%edx
		sub    %ebp,%edx
		shl    $0x3,%edx
		sub    %ebp,%edx
		add    %edx,%edx
		add    $EXPORT_SYMBOL(ex_faces),%edx
		mov    0x18(%esp),%eax
		movb   $0x6,0x4(%edx)
		mov    (%eax),%ax
		and    $0x3f,%ah
		mov    %ax,(%edx)
		mov    0x24(%esp),%eax
		sub    %ecx,%eax
		mov    %ax,0x6(%edx)
		mov    0x10(%esp),%eax
		sub    %edi,%eax
		mov    %ax,0x8(%edx)
		mov    0x2c(%esp),%eax
		sub    %ecx,%eax
		mov    %ax,0xc(%edx)
		mov    0x14(%esp),%eax
		sub    %edi,%eax
		mov    %ax,0xe(%edx)
		mov    0x20(%esp),%eax
		sub    %ebx,%eax
		mov    %ax,0x10(%edx)
		mov    0x1c(%esp),%eax
		movw   $0x6,0x2(%edx)
		sub    %ecx,%eax
		mov    %ax,0x12(%edx)
		mov    0xc(%esp),%eax
		movb   $0x0,0x5(%edx)
		sub    %edi,%eax
		mov    %ax,0x14(%edx)
		mov    0x30(%esp),%eax
		mov    %cx,0x22(%edx)
		sub    %ebx,%eax
		mov    %ax,0x16(%edx)
		mov    0x28(%esp),%eax
		mov    %di,0x24(%edx)
		sub    %ecx,%eax
		mov    %ax,0x18(%edx)
		mov    0x8(%esp),%eax
		mov    %bx,0x26(%edx)
		sub    %edi,%eax
		sub    %ebx,%esi
		mov    %ax,0x1a(%edx)
		mov    (%esp),%eax
		mov    %si,0xa(%edx)
		sub    %ebx,%eax
		mov    %ax,0x1c(%edx)
		call   ac_LbRandomAnyShort
		mov    %ax,0x34(%esp)
		mov    0x34(%esp),%al
		and    $0xf,%al
		sub    $0x7,%al
		mov    %al,0x2b(%edx)
		call   ac_LbRandomAnyShort
		mov    %ax,0x34(%esp)
		mov    0x34(%esp),%al
		and    $0xf,%al
		sub    $0x7,%al
		mov    %al,0x2c(%edx)
		call   ac_LbRandomAnyShort
		mov    %ax,0x34(%esp)
		mov    0x34(%esp),%al
		and    $0x7,%al
		sub    $0x3,%al
		mov    %al,0x28(%edx)
		call   ac_LbRandomAnyShort
		mov    %ax,0x34(%esp)
		mov    0x34(%esp),%al
		and    $0x7,%al
		sub    $0x3,%al
		mov    %al,0x29(%edx)
		call   ac_LbRandomAnyShort
		mov    %ax,0x34(%esp)
		mov    0x34(%esp),%al
		and    $0x7,%al
		sub    $0x3,%al
		mov    %al,0x2a(%edx)
		mov    data_1aa5d0,%eax
		sub    %ecx,%eax
		mov    %eax,%ecx
		sar    $0x8,%ecx
		imul   %ecx,%ecx
		mov    data_1aa5d4,%eax
		sub    %ebx,%eax
		sar    $0x8,%eax
		imul   %eax,%eax
		add    %ecx,%eax
		sar    $0x3,%eax
		add    $0x3ea,%eax
		mov    %ax,0x20(%edx)
	jump_62a2e:
		add    $0x38,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_mapwho_unkn01)	/* 0x62A38 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x88,%esp
		mov    %eax,0x78(%esp)
		mov    %edx,0x68(%esp)
		xor    %edx,%edx
		mov    %edx,EXPORT_SYMBOL(dont_bother_with_explode_faces)
		call   SCANNER_clear
		mov    0x78(%esp),%eax
		shl    $0x8,%eax
		mov    %eax,data_1aa5d0
		mov    0x68(%esp),%eax
		shl    $0x8,%eax
		xor    %edi,%edi
		mov    %eax,data_1aa5d4
		xor    %ebp,%ebp
	jump_62a74:
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0xf,%al
		mov    0x68(%esp),%ebx
		and    $0xffff,%eax
		add    %ebx,%eax
		lea    -0x7(%eax),%ebx
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		shl    $0x10,%ebx
		and    $0xf,%al
		mov    0x78(%esp),%ecx
		and    $0xffff,%eax
		add    %ecx,%eax
		mov    %ebp,%edx
		sub    $0x7,%eax
		mov    $0x5f,%ecx
		shl    $0x10,%eax
		inc    %edi
		call   ac_bang_new4
		cmp    $0x5,%edi
		jl     jump_62a74
		mov    0x78(%esp),%eax
		sub    $0x10,%eax
		mov    %eax,0x64(%esp)
		mov    0x68(%esp),%eax
		sub    $0x10,%eax
		mov    $0xfffffff0,%ebp
		mov    %eax,0x70(%esp)
		mov    $0xfffffff0,%ebx
		mov    0x64(%esp),%edi
		mov    0x70(%esp),%ecx
		jmp    jump_62b0d
	jump_62ae4:
		mov    0x64(%esp),%edi
		inc    %edi
		inc    %ebp
		mov    %edi,0x64(%esp)
		cmp    $0x10,%ebp
		jg     jump_62b85
		mov    $0xfffffff0,%ebx
		mov    0x64(%esp),%edi
		mov    0x70(%esp),%ecx
		jmp    jump_62b0d
	jump_62b06:
		inc    %ebx
		inc    %ecx
		cmp    $0x10,%ebx
		jg     jump_62ae4
	jump_62b0d:
		cmp    $0xfffffff8,%ebp
		jl     jump_62b21
		cmp    $0x8,%ebp
		jg     jump_62b21
		cmp    $0xfffffff8,%ebx
		jl     jump_62b21
		cmp    $0x8,%ebx
		jle    jump_62b06
	jump_62b21:
		test   %edi,%edi
		jl     jump_62b06
		cmp    $0x7f,%edi
		jg     jump_62b06
		test   %ecx,%ecx
		jl     jump_62b06
		cmp    $0x7f,%ecx
		jg     jump_62b06
		mov    %ecx,%eax
		shl    $0x7,%eax
		add    %edi,%eax
		imul   $0x12,%eax,%eax
		mov    %eax,0x6c(%esp)
		mov    0x6c(%esp),%edx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %edx,%eax
		mov    0x6(%eax),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		je     jump_62b06
	jump_62b56:
		jle    jump_62b71
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %eax,%edx
		mov    %edx,%eax
		call   unkn1_explode_faces
		mov    (%edx),%eax
		jmp    jump_62b7c
	jump_62b71:
		imul   $0x3c,%eax,%edx
		mov    EXPORT_SYMBOL(sthings),%eax
		mov    (%edx,%eax,1),%eax
	jump_62b7c:
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_62b56
		jmp    jump_62b06
	jump_62b85:
		mov    0x78(%esp),%eax
		sub    $0x8,%eax
		mov    %eax,0x84(%esp)
		mov    0x78(%esp),%eax
		add    $0x9,%eax
		mov    %eax,0x74(%esp)
		jmp    jump_62bbb
	jump_62ba0:
		mov    0x84(%esp),%ebx
		inc    %ebx
		mov    0x74(%esp),%ecx
		mov    %ebx,0x84(%esp)
		cmp    %ecx,%ebx
		je     jump_62c3b
	jump_62bbb:
		mov    0x84(%esp),%ecx
		mov    0x68(%esp),%ebx
		mov    0x68(%esp),%edi
		sub    $0x8,%ebx
		add    $0x9,%edi
		jmp    jump_62bea
	jump_62bd2:
		imul   $0x3c,%eax,%eax
		mov    EXPORT_SYMBOL(sthings),%edx
		mov    (%edx,%eax,1),%eax
	jump_62bde:
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_62c20
	jump_62be5:
		inc    %ebx
		cmp    %edi,%ebx
		je     jump_62ba0
	jump_62bea:
		test   %ecx,%ecx
		jl     jump_62be5
		cmp    $0x7f,%ecx
		jg     jump_62be5
		test   %ebx,%ebx
		jl     jump_62be5
		cmp    $0x7f,%ebx
		jg     jump_62be5
		mov    %ebx,%edx
		mov    %ecx,%eax
		call   func_6276c
		mov    %ebx,%eax
		shl    $0x7,%eax
		add    %ecx,%eax
		imul   $0x12,%eax,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0x6(%edx,%eax,1),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		je     jump_62be5
	jump_62c20:
		jle    jump_62bd2
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %eax,%edx
		mov    %edx,%eax
		call   unkn1_explode_faces
		mov    (%edx),%eax
		jmp    jump_62bde
	jump_62c3b:
		xor    %ecx,%ebx
		mov    things_used_head,%bx
		test   %ebx,%ebx
		je     jump_62c93
	jump_62c48:
		imul   $0xa8,%ebx,%ebx
		mov    things,%esi
		add    %ebx,%esi
		xor    %eax,%eax
		mov    0x16(%esi),%ax
		mov    0x4(%esi),%ebx
		call   ac_remove_thing
		mov    %esi,%eax
		sar    $0x10,%ebx
		call   ac_on_mapwho
		test   %al,%al
		je     jump_62c79
		mov    %esi,%eax
		call   ac_delete_node
	jump_62c79:
		movl   $0x0,0x44(%esi)
		mov    0xc(%esi),%ah
		movw   $0xd,0xa(%esi)
		or     $0x2,%ah
		mov    %ah,0xc(%esi)
		test   %ebx,%ebx
		jne    jump_62c48
	jump_62c93:
		mov    $0x48000,%edi
		xor    %ebp,%ebp
		mov    %edi,0x7c(%esp)
		mov    %ebp,0x80(%esp)
		mov    0x80(%esp),%ecx
		mov    0x7c(%esp),%edi
		add    %ebp,%ecx
		jmp    jump_62cf5
	jump_62cb4:
		mov    0x7c(%esp),%eax
		mov    0x80(%esp),%edx
		add    $0x12,%eax
		add    $0x12,%edx
		mov    %eax,0x7c(%esp)
		mov    %edx,0x80(%esp)
		cmp    $0x900,%edx
		je     jump_62d44
		mov    0x80(%esp),%ecx
		mov    0x7c(%esp),%edi
		add    %ebp,%ecx
		jmp    jump_62cf5
	jump_62ceb:
		add    $0x900,%ecx
		cmp    %edi,%ecx
		je     jump_62cb4
	jump_62cf5:
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		mov    0x6(%ecx,%eax,1),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		je     jump_62ceb
	jump_62d05:
		jle    jump_62d0e
		mov    (%esi),%eax
		sar    $0x10,%eax
		jmp    jump_62d3e
	jump_62d0e:
		jge    jump_62d3e
		imul   $0x3c,%eax,%eax
		mov    EXPORT_SYMBOL(sthings),%edx
		add    %eax,%edx
		xor    %eax,%eax
		mov    (%edx),%ebx
		mov    0x9(%edx),%al
		sar    $0x10,%ebx
		cmp    $0x32,%eax
		je     jump_62d3c
		mov    0x14(%edx),%eax
		sar    $0x10,%eax
		call   ac_remove_sthing
		mov    %edx,%eax
		call   ac_delete_snode
	jump_62d3c:
		mov    %ebx,%eax
	jump_62d3e:
		test   %eax,%eax
		jne    jump_62d05
		jmp    jump_62ceb
	jump_62d44:
		mov    $0x48000,%esi
		xor    %edi,%edi
		xor    %ebp,%ebp
		mov    %esi,%ecx
		lea    (%edi,%ebp,1),%edx
		jmp    jump_62d77
	jump_62d54:
		add    $0x12,%edi
		add    $0x12,%esi
		cmp    $0x900,%edi
		je     jump_62e03
		mov    %esi,%ecx
		lea    (%edi,%ebp,1),%edx
		jmp    jump_62d77
	jump_62d6d:
		add    $0x900,%edx
		cmp    %ecx,%edx
		je     jump_62d54
	jump_62d77:
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %edx,%eax
		mov    0x5(%eax),%bl
		movw   $0x0,0xa(%eax)
		or     $0x80,%bl
		mov    %bl,0x5(%eax)
		mov    0x8(%eax),%bx
		movw   $0x0,0x10(%eax)
		test   %bx,%bx
		je     jump_62d6d
		mov    0x6(%eax),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jle    jump_62dd5
		imul   $0xa8,%eax,%eax
		mov    things,%ebx
		mov    0x9(%ebx,%eax,1),%al
		and    $0xff,%eax
		cmp    $0x32,%eax
		je     jump_62d6d
		push   %eax
		push   $aStillThingOnMa
		lea    0x8(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
		jmp    jump_62d6d
	jump_62dd5:
		imul   $0x3c,%eax,%ebx
		mov    EXPORT_SYMBOL(sthings),%eax
		mov    0x9(%ebx,%eax,1),%al
		and    $0xff,%eax
		cmp    $0x32,%eax
		je     jump_62d6d
		push   %eax
		push   $aStillSimpleOnM
		lea    0x8(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
		jmp    jump_62d6d
	jump_62e03:
		add    $0x88,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
do_shockwave_vehicle:	/* 0x062E10 */
/*----------------------------------------------------------------*/
		push   %esi
		mov    %ebx,%esi
		mov    0x8(%esp),%ebx
		testb  $0x2,0xc(%ebx)
		jne    jump_62e8d
		sar    $0x7,%esi
		imul   %esi,%esi
		test   %esi,%esi
		jle    jump_62e36
		mov    %ecx,%edx
		mov    %ecx,%eax
		sar    $0x1f,%edx
		idiv   %esi
		mov    %eax,%ecx
	jump_62e36:
		movzbl 0x8(%ebx),%esi
		cmp    $0x33,%esi
		jne    jump_62e41
		sar    %ecx
	jump_62e41:
		mov    0x3a(%ebx),%dx
		sub    %ecx,%edx
		xor    %ecx,%ecx
		mov    0x9(%ebx),%cl
		mov    %dx,0x3a(%ebx)
		cmp    $0x2,%ecx
		jne    jump_62e73
		mov    0x38(%ebx),%ecx
		sar    $0x10,%ecx
		movw   $0xa,0x84(%ebx)
		test   %ecx,%ecx
		jg     jump_62e8d
		mov    %ebx,%eax
		call   ac_start_crashing
		pop    %esi
		ret    $0x8
	jump_62e73:
		mov    0x38(%ebx),%ecx
		sar    $0x10,%ecx
		movw   $0xa,0x84(%ebx)
		test   %ecx,%ecx
		jg     jump_62e8d
		mov    %ebx,%eax
		call   init_mgun_explode
	jump_62e8d:
		pop    %esi
		ret    $0x8


/*----------------------------------------------------------------*/
do_shockwave_building:	/* 0x062E94 */
/*----------------------------------------------------------------*/
		push   %esi
		testb  $0x2,0xc(%ebx)
		jne    jump_62ecf
		mov    0x38(%ebx),%eax
		sar    $0x4,%edx
		sar    $0x10,%eax
		sub    %edx,%eax
		mov    %ax,0x3a(%ebx)
		mov    0x38(%ebx),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_62ecf
		mov    %ebx,%ecx
		mov    0x20(%ebx),%esi
		mov    0x1c(%ebx),%edx
		mov    0x18(%ebx),%eax
		sar    $0x8,%esi
		sar    $0x8,%edx
		sar    $0x8,%eax
		mov    %esi,%ebx
		call   ac_collapse_building
	jump_62ecf:
		pop    %esi
		ret

vtable_62ed4:
		.long   func_62ff6
		.long   func_62ff6
		.long   func_62ff6
		.long   func_63015
		.long   func_63015
		.long   func_63034
		.long   func_63034
		.long   func_63034
		.long   func_62ff6
		.long   func_63015
		.long   func_63015
		.long   func_62ff6
		.long   func_63015
		.long   func_63015


/*----------------------------------------------------------------*/
do_shockwave_person:	/* 0x062F0C */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    0x14(%esp),%esi
		mov    0x18(%esp),%ebp
		mov    %eax,(%esp)
		mov    %edx,%edi
		testb  $0x2,0xc(%esi)
		jne    jump_63150
		sar    $0x7,%ebx
		imul   %ebx,%ebx
		test   %ebx,%ebx
		jle    jump_62f3e
		mov    %ecx,%edx
		mov    %ecx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,%ecx
	jump_62f3e:
		mov    0x70(%esi),%ax
		shl    $0x7,%eax
		shr    $0xd,%ax
		and    $0xffff,%eax
		cmp    $0x4,%eax
		jge    jump_62f57
		sub    %cx,0x3a(%esi)
	jump_62f57:
		xor    %eax,%eax
		mov    0x9(%esi),%al
		cmp    $0xf,%eax
		jne    jump_62fb4
		mov    0x38(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jg     jump_62fb4
		push   $0x3
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x25,%edx
		mov    %esi,%eax
		call   ac_play_dist_ssample
		mov    $0x14,%ecx
		mov    0x20(%esi),%ebx
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		sar    $0x8,%edx
		call   ac_bang_new4
		xor    %eax,%eax
		mov    0x16(%esi),%ax
		call   ac_remove_thing
		mov    %esi,%eax
		call   ac_delete_node
		jmp    jump_63150
	jump_62fb4:
		mov    0x38(%esi),%eax
		sar    $0x10,%eax
		movw   $0x0,0x82(%esi)
		test   %eax,%eax
		jge    jump_63101
		test   %ebp,%ebp
		je     jump_630ec
		cmpb   $0x0,in_network_game
		jne    jump_6306d
		mov    ingame__TrainMode,%eax
		xor    %edx,%edx
		sar    $0x10,%eax
		mov    0x51(%ebp),%dl
		cmp    %eax,%edx
		je     jump_63053
		jmp    jump_630ec


/*----------------------------------------------------------------*/
func_62ff6:
/*----------------------------------------------------------------*/
		mov    EXPORT_SYMBOL(open_brief)-2,%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		incw   data_199840(,%eax,8)
		jmp    jump_630ec


/*----------------------------------------------------------------*/
func_63015:
/*----------------------------------------------------------------*/
		mov    EXPORT_SYMBOL(open_brief)-2,%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		incw   data_199838(,%eax,8)
		jmp    jump_630ec


/*----------------------------------------------------------------*/
func_63034:
/*----------------------------------------------------------------*/
		mov    EXPORT_SYMBOL(open_brief)-2,%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		incw   data_19983c(,%eax,8)
		jmp    jump_630ec
	jump_63053:
		mov    0x8(%esi),%al
		dec    %al
		cmp    $0xd,%al
		ja     jump_630ec
		and    $0xff,%eax
		jmp    *%cs:vtable_62ed4(,%eax,4)
	jump_6306d:
		testb  $0x20,0xd(%esi)
		je     jump_630ec
		mov    0xd(%ebp),%cl
		xor    %ebx,%ebx
		test   $0x20,%cl
		je     jump_63085
		mov    %ebp,%ebx
		jmp    jump_630b2
	jump_63085:
		testb  $0x8,0xe(%ebp)
		je     jump_630b2
		xor    %ecx,%ecx
		mov    0x3c(%ebp),%cx
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		shl    $0x2,%eax
		add    %ecx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		testb  $0x20,0xd(%eax)
		je     jump_630b2
		mov    %eax,%ebx
	jump_630b2:
		test   %ebx,%ebx
		je     jump_630ec
		testb  $0x20,0xd(%ebx)
		je     jump_630ec
		xor    %eax,%eax
		mov    0x54(%ebx),%ax
		sar    $0x2,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		add    %edx,%eax
		mov    $mission_status,%edx
		shl    $0x3,%eax
		add    %eax,%edx
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		sar    $0x2,%eax
		mov    0x10(%edx,%eax,2),%bx
		add    $0x10,%edx
		inc    %ebx
		mov    %bx,(%edx,%eax,2)
	jump_630ec:
		mov    $0xb,%edx
		mov    %esi,%eax
		call   ac_set_person_dead
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x8
	jump_63101:
		testb  $0x10,0x44(%esi)
		jne    jump_63150
		cmpl   $0x0,(%esp)
		jne    jump_63137
		test   %edi,%edi
		jne    jump_63137
		call   ac_LbRandomAnyShort
		and    $0x1,%ah
		and    $0xffff,%eax
		sub    $0x100,%eax
		mov    %eax,(%esp)
		call   ac_LbRandomAnyShort
		and    $0x1,%ah
		mov    %ax,%di
		sub    $0x100,%edi
	jump_63137:
		push   $0x0
		mov    0x2(%esp),%edx
		movswl %di,%ecx
		mov    %esi,%eax
		xor    %ebx,%ebx
		sar    $0x10,%edx
		call   init_recoil
		movb   $0xa,0x7d(%esi)
	jump_63150:
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x8


/*----------------------------------------------------------------*/
do_shockwave_scale_effect:	/* 0x06315C */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		mov    %eax,%esi
		mov    %edx,%edi
		mov    %ecx,%edx
		mov    0xc(%esp),%ecx
		cmp    $0x7d0,%edx
		jle    jump_63175
		mov    $0x7d0,%edx
	jump_63175:
		sar    $0x5,%ebx
		imul   %ebx,%ebx
		test   %ebx,%ebx
		jle    jump_63188
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,%edx
	jump_63188:
		cmp    $0x100,%ebx
		imul   %edx,%esi
		mov    0x2a(%ecx),%ebx
		sar    $0x10,%ebx
		sar    $0x3,%esi
		add    %esi,%ebx
		mov    %bx,0x2c(%ecx)
		mov    %edx,%ebx
		imul   %edi,%ebx
		mov    0x2e(%ecx),%edx
		sar    $0x10,%edx
		sar    $0x3,%ebx
		add    %ebx,%edx
		mov    %dx,0x30(%ecx)
		pop    %edi
		pop    %esi
		ret    $0x8


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_add_static)	/* 0x0631BC */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    %eax,%esi
		mov    %edx,%ebp
		test   %eax,%eax
		jl     jump_631d1
		cmp    $0x8000,%eax
		jl     jump_631d8
	jump_631d1:
		xor    %eax,%eax
		jmp    jump_632b1
	jump_631d8:
		test   %ebx,%ebx
		jl     jump_631e4
		cmp    $0x8000,%ebx
		jl     jump_631ef
	jump_631e4:
		xor    %eax,%eax
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4
	jump_631ef:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(sthings_used),%ax
		cmp    $0x5d7,%eax
		jle    jump_63209
		xor    %eax,%eax
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4
	jump_63209:
		call   ac_get_new_sthing
		movswl %ax,%edx
		mov    %eax,%edi
		test   %edx,%edx
		jne    jump_63222
		xor    %eax,%eax
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4
	jump_63222:
		cmp    $0xffffffff,%edx
		jg     jump_6322f
		cmp    $0xfffffa24,%edx
		jge    jump_6323a
	jump_6322f:
		xor    %eax,%eax
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4
	jump_6323a:
		mov    %edx,%eax
		shl    $0x4,%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		shl    $0x8,%esi
		mov    %eax,(%esp)
		mov    %esi,0x4(%esp)
		mov    (%esp),%esi
		mov    EXPORT_SYMBOL(sthings),%eax
		add    %esi,%eax
		shl    $0x8,%ebx
		mov    0x4(%esp),%esi
		mov    %ebx,0x20(%eax)
		xor    %ebx,%ebx
		mov    %esi,0x18(%eax)
		mov    nstart_ani,%esi
		mov    %cx,%bx
		mov    %ebp,0x1c(%eax)
		mov    (%esi,%ebx,2),%bx
		movw   $0x0,(%eax)
		dec    %ecx
		mov    %bx,0x24(%eax)
		mov    %cx,0x26(%eax)
		mov    %edx,%eax
		mov    (%esp),%ebp
		call   ac_add_node_sthing
		mov    EXPORT_SYMBOL(sthings),%eax
		add    %ebp,%eax
		movb   $0x5,0x9(%eax)
		movw   $0x40,0x14(%eax)
		mov    0x18(%esp),%edx
		movl   $0x4,0xc(%eax)
		mov    %dx,0x28(%eax)
		mov    %edi,%eax
	jump_632b1:
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
init_nuclear_bomb:	/* 0x0632BC */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		mov    %eax,%ecx
		mov    %edx,%esi
		test   %eax,%eax
		jl     jump_632ce
		cmp    $0x8000,%eax
		jl     jump_632d5
	jump_632ce:
		xor    %edx,%edx
		jmp    jump_63386
	jump_632d5:
		test   %ebx,%ebx
		jl     jump_632e1
		cmp    $0x8000,%ebx
		jl     jump_632e9
	jump_632e1:
		xor    %edx,%edx
		mov    %edx,%eax
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_632e9:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(sthings_used),%ax
		cmp    $0x5d7,%eax
		jle    jump_63300
		xor    %edx,%edx
		mov    %edx,%eax
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_63300:
		call   ac_get_new_sthing
		cwtl
		test   %eax,%eax
		jne    jump_63312
		xor    %edx,%edx
		mov    %edx,%eax
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_63312:
		cmp    $0xffffffff,%eax
		jg     jump_6331e
		cmp    $0xfffffa24,%eax
		jge    jump_63326
	jump_6331e:
		xor    %edx,%edx
		mov    %edx,%eax
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_63326:
		mov    %eax,%edx
		shl    $0x4,%edx
		sub    %eax,%edx
		mov    EXPORT_SYMBOL(sthings),%edi
		shl    $0x2,%edx
		add    %edi,%edx
		movb   $0x16,0x9(%edx)
		mov    %ecx,%edi
		movw   $0x40,0x14(%edx)
		shl    $0x8,%edi
		mov    %edi,0x18(%edx)
		mov    %ebx,%edi
		movw   $0x0,0x28(%edx)
		shl    $0x8,%edi
		mov    %edi,0x20(%edx)
		mov    %esi,%edi
		movl   $0x10080004,0xc(%edx)
		shl    $0x8,%edi
		mov    %edi,0x1c(%edx)
		call   ac_add_node_sthing
		mov    %ecx,EXPORT_SYMBOL(dword_19F500)
		mov    %ebx,EXPORT_SYMBOL(dword_19F508)
		xor    %ebx,%ebx
		mov    %esi,EXPORT_SYMBOL(dword_19F504)
		mov    %ebx,EXPORT_SYMBOL(dword_19F4FC)
	jump_63386:
		mov    %edx,%eax
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
create_scale_effect:	/* 0x06338C */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    %eax,%esi
		mov    %edx,%ebp
		test   %eax,%eax
		jl     jump_633a1
		cmp    $0x8000,%eax
		jl     jump_633a8
	jump_633a1:
		xor    %edx,%edx
		jmp    jump_63478
	jump_633a8:
		test   %ebx,%ebx
		jl     jump_633b4
		cmp    $0x8000,%ebx
		jl     jump_633c1
	jump_633b4:
		xor    %edx,%edx
		mov    %edx,%eax
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4
	jump_633c1:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(sthings_used),%ax
		cmp    $0x5d7,%eax
		jle    jump_633dd
		xor    %edx,%edx
		mov    %edx,%eax
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4
	jump_633dd:
		call   ac_get_new_sthing
		cwtl
		test   %eax,%eax
		jne    jump_633f4
		xor    %edx,%edx
		mov    %edx,%eax
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4
	jump_633f4:
		cmp    $0xffffffff,%eax
		jg     jump_63400
		cmp    $0xfffffa24,%eax
		jge    jump_6340d
	jump_63400:
		xor    %edx,%edx
		mov    %edx,%eax
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4
	jump_6340d:
		mov    %eax,%edx
		shl    $0x4,%edx
		sub    %eax,%edx
		shl    $0x2,%edx
		mov    %edx,(%esp)
		mov    (%esp),%edi
		mov    EXPORT_SYMBOL(sthings),%edx
		add    %edi,%edx
		shl    $0x8,%ebx
		mov    %ebx,0x20(%edx)
		xor    %ebx,%ebx
		shl    $0x8,%esi
		mov    %cx,%bx
		mov    %esi,0x18(%edx)
		lea    0x0(,%ebx,2),%esi
		shl    $0x8,%ebp
		mov    nstart_ani,%ebx
		mov    %ebp,0x1c(%edx)
		mov    (%esi,%ebx,1),%bx
		dec    %ecx
		mov    %bx,0x24(%edx)
		mov    %cx,0x26(%edx)
		call   ac_add_node_sthing
		movb   $0x15,0x9(%edx)
		movb   $0x0,0x8(%edx)
		movw   $0x40,0x14(%edx)
		mov    0x14(%esp),%eax
		movl   $0x4,0xc(%edx)
		mov    %ax,0x28(%edx)
	jump_63478:
		mov    %edx,%eax
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
explode_thing_object:	/* 0x063484 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x88,%esp
		xor    %edx,%edx
		mov    %edx,EXPORT_SYMBOL(dont_bother_with_explode_faces)
		movswl %ax,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		add    %eax,%edx
		xor    %eax,%eax
		mov    0x9(%edx),%al
		cmp    $0x2,%eax
		jne    jump_634f9
		mov    0x52(%edx),%ax
		xor    %ebx,%ebx
		mov    %ax,%bx
		lea    0x0(,%ebx,8),%eax
		add    %eax,%ebx
		mov    game_objects,%eax
		shl    $0x2,%ebx
		add    %ebx,%eax
		mov    %eax,0x1c(%esp)
		mov    0x18(%edx),%eax
		sar    $0x8,%eax
		mov    %ax,0x64(%esp)
		mov    0x1c(%edx),%eax
		sar    $0x5,%eax
		mov    %ax,0x68(%esp)
		mov    0x20(%edx),%eax
		sar    $0x8,%eax
		jmp    jump_63530
	jump_634f9:
		mov    0x52(%edx),%ax
		xor    %ebx,%ebx
		mov    %ax,%bx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		mov    game_objects,%ebx
		shl    $0x2,%eax
		add    %eax,%ebx
		mov    0x14(%ebx),%ax
		mov    %ax,0x64(%esp)
		mov    0xe(%ebx),%ax
		mov    %ax,0x68(%esp)
		mov    0x16(%ebx),%ax
		mov    %ebx,0x1c(%esp)
	jump_63530:
		mov    %ax,0x80(%esp)
		mov    0x1c(%esp),%eax
		mov    0x2(%eax),%ax
		mov    %eax,0x74(%esp)
		mov    0x1c(%esp),%eax
		mov    0x52(%edx),%edx
		mov    (%eax),%ax
		sar    $0x10,%edx
		mov    %eax,0x6c(%esp)
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    0x74(%esp),%ebx
		shl    $0x2,%eax
		xor    %edx,%edx
		add    $EXPORT_SYMBOL(local_mats),%eax
		mov    %edx,0x84(%esp)
		test   %bx,%bx
		jbe    jump_6392a
		jmp    jump_6359a
	jump_6357e:
		mov    0x84(%esp),%ecx
		inc    %ecx
		mov    0x74(%esp),%esi
		mov    %ecx,0x84(%esp)
		cmp    %si,%cx
		jae    jump_6392a
	jump_6359a:
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    0x6c(%esp),%bx
		mov    0x84(%esp),%dx
		add    %ebx,%edx
		mov    game_object_faces,%ebx
		shl    $0x5,%edx
		add    %edx,%ebx
		mov    EXPORT_SYMBOL(colour_grey1),%dl
		mov    %dl,EXPORT_SYMBOL(vec_colour)
		xor    %dl,%dl
		mov    %ebx,0x54(%esp)
		mov    %dl,EXPORT_SYMBOL(vec_mode)
		mov    (%ebx),%dx
		and    $0xffff,%edx
		imul   $0xa,%edx,%edx
		mov    EXPORT_SYMBOL(game_object_points),%ebx
		add    %ebx,%edx
		mov    %ebx,0x28(%esp)
		mov    0x2(%edx),%ebx
		sar    $0x10,%ebx
		mov    0x4(%eax),%ecx
		add    %ebx,%ebx
		imul   %ebx,%ecx
		mov    (%edx),%edi
		sar    $0x10,%edi
		mov    (%eax),%esi
		add    %edi,%edi
		imul   %edi,%esi
		mov    0x4(%edx),%edx
		sar    $0x10,%edx
		add    %edx,%edx
		add    %esi,%ecx
		mov    0x8(%eax),%esi
		imul   %edx,%esi
		add    %ecx,%esi
		mov    0xc(%eax),%ecx
		imul   %edi,%ecx
		mov    %ecx,0x18(%esp)
		mov    0x10(%eax),%ecx
		imul   %ebx,%ecx
		mov    0x18(%esp),%ebp
		add    %ecx,%ebp
		mov    0x14(%eax),%ecx
		imul   %edx,%ecx
		add    %ebp,%ecx
		imul   0x18(%eax),%edi
		imul   0x1c(%eax),%ebx
		add    %edi,%ebx
		imul   0x20(%eax),%edx
		add    %ebx,%edx
		mov    0x62(%esp),%ebx
		sar    $0x10,%ebx
		sar    $0xf,%esi
		mov    %ebx,0x2c(%esp)
		add    %esi,%ebx
		mov    %ebx,0x3c(%esp)
		mov    0x66(%esp),%ebx
		sar    $0x10,%ebx
		sar    $0xf,%ecx
		mov    %ebx,0x30(%esp)
		add    %ecx,%ebx
		mov    %ebx,0x4c(%esp)
		mov    0x7e(%esp),%ebx
		sar    $0x10,%ebx
		sar    $0xf,%edx
		mov    %ebx,0x34(%esp)
		add    %edx,%ebx
		mov    %ebx,0x44(%esp)
		mov    0x54(%esp),%ebx
		xor    %edx,%edx
		mov    0x2(%ebx),%dx
		imul   $0xa,%edx,%edx
		add    0x28(%esp),%edx
		mov    0x2(%edx),%ebx
		sar    $0x10,%ebx
		mov    0x4(%eax),%esi
		add    %ebx,%ebx
		imul   %ebx,%esi
		mov    (%edx),%edi
		sar    $0x10,%edi
		mov    (%eax),%ecx
		add    %edi,%edi
		imul   %edi,%ecx
		mov    0x10(%eax),%ebp
		imul   %ebx,%ebp
		mov    0x4(%edx),%edx
		sar    $0x10,%edx
		add    %edx,%edx
		add    %esi,%ecx
		mov    0x8(%eax),%esi
		imul   %edx,%esi
		add    %ecx,%esi
		mov    0xc(%eax),%ecx
		imul   %edi,%ecx
		add    %ebp,%ecx
		mov    0x14(%eax),%ebp
		imul   %edx,%ebp
		add    %ebp,%ecx
		imul   0x18(%eax),%edi
		imul   0x1c(%eax),%ebx
		add    %edi,%ebx
		imul   0x20(%eax),%edx
		sar    $0xf,%esi
		add    %ebx,%edx
		mov    0x2c(%esp),%ebx
		add    %esi,%ebx
		sar    $0xf,%ecx
		mov    %ebx,0x40(%esp)
		mov    0x30(%esp),%ebx
		add    %ecx,%ebx
		sar    $0xf,%edx
		mov    %ebx,0x50(%esp)
		mov    0x34(%esp),%ebx
		add    %edx,%ebx
		mov    %ebx,0xc(%esp)
		mov    0x54(%esp),%ebx
		xor    %edx,%edx
		mov    0x4(%ebx),%dx
		imul   $0xa,%edx,%edx
		add    0x28(%esp),%edx
		mov    0x2(%edx),%ebx
		sar    $0x10,%ebx
		mov    0x4(%eax),%esi
		add    %ebx,%ebx
		imul   %ebx,%esi
		mov    (%edx),%edi
		sar    $0x10,%edi
		mov    (%eax),%ecx
		add    %edi,%edi
		imul   %edi,%ecx
		mov    0x4(%edx),%edx
		sar    $0x10,%edx
		add    %edx,%edx
		add    %ecx,%esi
		mov    0x8(%eax),%ecx
		imul   %edx,%ecx
		add    %ecx,%esi
		mov    0xc(%eax),%ecx
		imul   %edi,%ecx
		mov    %ecx,0x18(%esp)
		mov    0x10(%eax),%ecx
		imul   %ebx,%ecx
		mov    0x18(%esp),%ebp
		add    %ecx,%ebp
		mov    0x14(%eax),%ecx
		imul   %edx,%ecx
		add    %ebp,%ecx
		imul   0x18(%eax),%edi
		imul   0x1c(%eax),%ebx
		add    %edi,%ebx
		imul   0x20(%eax),%edx
		sar    $0xf,%esi
		add    %ebx,%edx
		mov    0x2c(%esp),%ebx
		add    %esi,%ebx
		sar    $0xf,%ecx
		mov    %ebx,0x48(%esp)
		mov    0x30(%esp),%ebx
		add    %ecx,%ebx
		mov    0x4c(%esp),%edi
		mov    %ebx,0x10(%esp)
		mov    0x50(%esp),%ecx
		mov    0x10(%esp),%esi
		add    %ecx,%edi
		add    %esi,%edi
		imul   $0x55,%edi,%edi
		sar    $0xf,%edx
		mov    0x34(%esp),%ebx
		mov    0x40(%esp),%ebp
		add    %edx,%ebx
		mov    0x3c(%esp),%edx
		mov    %ebx,0x14(%esp)
		mov    0x48(%esp),%ebx
		add    %ebp,%edx
		add    %ebx,%edx
		imul   $0x55,%edx,%edx
		sar    $0x8,%edx
		mov    0xc(%esp),%ebp
		mov    %edx,0x5c(%esp)
		mov    0x44(%esp),%edx
		mov    0x14(%esp),%ebx
		add    %ebp,%edx
		add    %ebx,%edx
		imul   $0x55,%edx,%edx
		sar    $0x8,%edx
		mov    %edx,0x60(%esp)
		xor    %edx,%edx
		mov    data_1aa5cc,%dx
		sar    $0x8,%edi
		test   %edx,%edx
		je     jump_63802
		imul   $0x2e,%edx,%ebx
		mov    data_18194e(%ebx),%bx
		mov    %bx,data_1aa5cc
	jump_63802:
		mov    %edx,%ebx
		test   %edx,%edx
		je     jump_6357e
		imul   $0x2e,%edx,%edx
		add    $EXPORT_SYMBOL(ex_faces),%edx
		mov    0x54(%esp),%ecx
		movb   $0x1,0x4(%edx)
		mov    0x6(%ecx),%cx
		mov    0x54(%esp),%esi
		mov    %cx,(%edx)
		xor    %ch,%ch
		mov    0x9(%esi),%cl
		mov    %cx,0x2(%edx)
		mov    0xa(%esi),%cl
		mov    %cl,0x5(%edx)
		mov    0x5c(%esp),%ecx
		mov    %cx,0x22(%edx)
		mov    0x60(%esp),%ecx
		mov    0x5c(%esp),%esi
		mov    %cx,0x26(%edx)
		mov    0x3c(%esp),%ecx
		sub    %esi,%ecx
		mov    %cx,0x6(%edx)
		mov    0x4c(%esp),%ecx
		sub    %edi,%ecx
		mov    0x60(%esp),%esi
		mov    %cx,0x8(%edx)
		mov    0x44(%esp),%ecx
		sub    %esi,%ecx
		mov    0x5c(%esp),%esi
		mov    %cx,0xa(%edx)
		mov    0x40(%esp),%ecx
		sub    %esi,%ecx
		mov    %cx,0xc(%edx)
		mov    0x50(%esp),%ecx
		sub    %edi,%ecx
		mov    0x60(%esp),%esi
		mov    %cx,0xe(%edx)
		mov    0xc(%esp),%ecx
		sub    %esi,%ecx
		mov    0x5c(%esp),%esi
		mov    %cx,0x10(%edx)
		mov    0x48(%esp),%ecx
		sub    %esi,%ecx
		mov    %cx,0x12(%edx)
		mov    0x10(%esp),%ecx
		sub    %edi,%ecx
		mov    0x60(%esp),%esi
		mov    %cx,0x14(%edx)
		mov    0x14(%esp),%ecx
		sub    %esi,%ecx
		mov    %cx,0x16(%edx)
		mov    0x62(%esp),%ecx
		mov    0x5c(%esp),%esi
		sar    $0x10,%ecx
		mov    0x60(%esp),%ebp
		sub    %ecx,%esi
		mov    0x66(%esp),%ecx
		mov    %di,0x24(%edx)
		sar    $0x10,%ecx
		sar    $0x3,%esi
		sub    %ecx,%edi
		mov    0x7e(%esp),%ecx
		mov    %esi,0x18(%esp)
		sar    $0x10,%ecx
		sar    $0x3,%edi
		sub    %ecx,%ebp
		mov    0x18(%esp),%cl
		mov    %edi,0x18(%esp)
		mov    %cl,0x28(%edx)
		mov    0x18(%esp),%cl
		mov    %cl,0x29(%edx)
		mov    %ebp,%ecx
		sar    $0x3,%ecx
		mov    %ecx,0x18(%esp)
		mov    0x18(%esp),%cl
		mov    %cl,0x2a(%edx)
		mov    0x29(%edx),%cl
		xor    %bh,%bh
		add    $0x32,%cl
		and    $0x1f,%bl
		mov    %cl,0x29(%edx)
		mov    $0x32,%ecx
		sub    %ebx,%ecx
		mov    %cx,0x20(%edx)
		jmp    jump_6357e
	jump_6392a:
		mov    0x1c(%esp),%edx
		mov    0x8(%edx),%dx
		mov    %edx,0x78(%esp)
		mov    0x1c(%esp),%edx
		mov    0x6(%edx),%dx
		xor    %edi,%edi
		mov    %edx,0x70(%esp)
		mov    0x78(%esp),%edx
		mov    %edi,0x7c(%esp)
		test   %dx,%dx
		jbe    jump_63dab
		jmp    jump_6396d
	jump_63957:
		mov    0x7c(%esp),%edi
		inc    %edi
		mov    0x78(%esp),%ebx
		mov    %edi,0x7c(%esp)
		cmp    %bx,%di
		jae    jump_63dab
	jump_6396d:
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    0x70(%esp),%bx
		mov    0x7c(%esp),%dx
		add    %ebx,%edx
		imul   $0x28,%edx,%edx
		xor    %ch,%ch
		mov    game_object_faces4,%ebx
		mov    %ch,EXPORT_SYMBOL(vec_mode)
		add    %edx,%ebx
		mov    EXPORT_SYMBOL(colour_grey1),%dl
		mov    %ebx,0x58(%esp)
		mov    %dl,EXPORT_SYMBOL(vec_colour)
		mov    (%ebx),%dx
		and    $0xffff,%edx
		imul   $0xa,%edx,%edx
		mov    EXPORT_SYMBOL(game_object_points),%ebx
		add    %ebx,%edx
		mov    0x2(%edx),%esi
		sar    $0x10,%esi
		mov    0x4(%eax),%edi
		add    %esi,%esi
		imul   %esi,%edi
		mov    %ebx,0x38(%esp)
		mov    (%edx),%ebx
		mov    0x4(%edx),%ecx
		sar    $0x10,%ebx
		mov    (%eax),%edx
		add    %ebx,%ebx
		imul   %ebx,%edx
		sar    $0x10,%ecx
		add    %ecx,%ecx
		add    %edx,%edi
		mov    0x8(%eax),%edx
		imul   %ecx,%edx
		add    %edi,%edx
		mov    0xc(%eax),%edi
		imul   %ebx,%edi
		mov    %edi,0x18(%esp)
		mov    0x10(%eax),%edi
		imul   %esi,%edi
		mov    0x18(%esp),%ebp
		add    %edi,%ebp
		mov    0x14(%eax),%edi
		imul   %ecx,%edi
		add    %ebp,%edi
		imul   0x18(%eax),%ebx
		imul   0x1c(%eax),%esi
		add    %esi,%ebx
		imul   0x20(%eax),%ecx
		add    %ecx,%ebx
		mov    0x62(%esp),%ecx
		sar    $0x10,%ecx
		sar    $0xf,%edx
		mov    %ecx,0x8(%esp)
		add    %edx,%ecx
		mov    0x66(%esp),%edx
		sar    $0x10,%edx
		sar    $0xf,%edi
		mov    %edx,(%esp)
		add    %edi,%edx
		mov    %edx,0x4c(%esp)
		mov    0x7e(%esp),%edx
		sar    $0x10,%edx
		sar    $0xf,%ebx
		mov    %edx,0x4(%esp)
		add    %ebx,%edx
		mov    0x58(%esp),%ebx
		mov    %edx,0x44(%esp)
		xor    %edx,%edx
		mov    0x2(%ebx),%dx
		imul   $0xa,%edx,%edx
		add    0x38(%esp),%edx
		mov    0x2(%edx),%esi
		sar    $0x10,%esi
		mov    0x4(%eax),%edi
		add    %esi,%esi
		imul   %esi,%edi
		mov    %ecx,0x3c(%esp)
		mov    (%edx),%ebx
		mov    0x4(%edx),%ecx
		sar    $0x10,%ebx
		mov    (%eax),%edx
		add    %ebx,%ebx
		imul   %ebx,%edx
		sar    $0x10,%ecx
		add    %ecx,%ecx
		add    %edx,%edi
		mov    0x8(%eax),%edx
		imul   %ecx,%edx
		add    %edi,%edx
		mov    0xc(%eax),%edi
		imul   %ebx,%edi
		mov    %edi,0x18(%esp)
		mov    0x10(%eax),%edi
		imul   %esi,%edi
		mov    0x18(%esp),%ebp
		add    %edi,%ebp
		mov    0x14(%eax),%edi
		imul   %ecx,%edi
		add    %ebp,%edi
		imul   0x18(%eax),%ebx
		imul   0x1c(%eax),%esi
		add    %ebx,%esi
		mov    0x20(%eax),%ebx
		imul   %ecx,%ebx
		sar    $0xf,%edx
		mov    0x8(%esp),%ecx
		sar    $0xf,%edi
		add    %edx,%ecx
		mov    (%esp),%edx
		add    %esi,%ebx
		add    %edi,%edx
		sar    $0xf,%ebx
		mov    %edx,0x50(%esp)
		mov    0x4(%esp),%edx
		add    %ebx,%edx
		mov    0x58(%esp),%ebx
		mov    %edx,0xc(%esp)
		xor    %edx,%edx
		mov    0x4(%ebx),%dx
		imul   $0xa,%edx,%edx
		add    0x38(%esp),%edx
		mov    %ecx,0x40(%esp)
		mov    (%edx),%ebx
		mov    0x2(%edx),%esi
		mov    0x4(%edx),%ecx
		sar    $0x10,%esi
		mov    0x4(%eax),%edx
		add    %esi,%esi
		imul   %esi,%edx
		sar    $0x10,%ebx
		mov    (%eax),%edi
		add    %ebx,%ebx
		imul   %ebx,%edi
		sar    $0x10,%ecx
		add    %ecx,%ecx
		add    %edx,%edi
		mov    0x8(%eax),%edx
		imul   %ecx,%edx
		add    %edi,%edx
		mov    0xc(%eax),%edi
		imul   %ebx,%edi
		mov    %edi,0x18(%esp)
		mov    0x10(%eax),%edi
		imul   %esi,%edi
		mov    0x18(%esp),%ebp
		add    %edi,%ebp
		mov    0x14(%eax),%edi
		imul   %ecx,%edi
		add    %ebp,%edi
		imul   0x18(%eax),%ebx
		imul   0x1c(%eax),%esi
		add    %ebx,%esi
		mov    0x20(%eax),%ebx
		imul   %ecx,%ebx
		sar    $0xf,%edx
		mov    0x8(%esp),%ecx
		sar    $0xf,%edi
		add    %edx,%ecx
		mov    (%esp),%edx
		add    %esi,%ebx
		add    %edi,%edx
		sar    $0xf,%ebx
		mov    %edx,0x10(%esp)
		mov    0x4(%esp),%edx
		add    %ebx,%edx
		mov    0x58(%esp),%ebx
		mov    %edx,0x14(%esp)
		xor    %edx,%edx
		mov    0x6(%ebx),%dx
		imul   $0xa,%edx,%edx
		add    0x38(%esp),%edx
		mov    0x2(%edx),%esi
		sar    $0x10,%esi
		mov    0x4(%eax),%edi
		add    %esi,%esi
		imul   %esi,%edi
		mov    %ecx,0x48(%esp)
		mov    (%edx),%ebx
		mov    0x4(%edx),%ecx
		sar    $0x10,%ebx
		mov    (%eax),%edx
		add    %ebx,%ebx
		imul   %ebx,%edx
		sar    $0x10,%ecx
		add    %ecx,%ecx
		add    %edx,%edi
		mov    0x8(%eax),%edx
		imul   %ecx,%edx
		add    %edi,%edx
		mov    0xc(%eax),%edi
		imul   %ebx,%edi
		mov    %edi,0x18(%esp)
		mov    0x10(%eax),%edi
		imul   %esi,%edi
		mov    0x18(%esp),%ebp
		add    %edi,%ebp
		mov    0x14(%eax),%edi
		imul   %ecx,%edi
		add    %ebp,%edi
		imul   0x18(%eax),%ebx
		imul   0x1c(%eax),%esi
		add    %ebx,%esi
		mov    0x20(%eax),%ebx
		imul   %ecx,%ebx
		sar    $0xf,%edx
		sar    $0xf,%edi
		mov    0x8(%esp),%ecx
		add    %esi,%ebx
		mov    0x4(%esp),%esi
		sar    $0xf,%ebx
		add    %edx,%ecx
		mov    (%esp),%edx
		mov    %ecx,0x24(%esp)
		add    %ebx,%esi
		add    %edi,%edx
		mov    0x40(%esp),%ebx
		mov    %edx,0x20(%esp)
		mov    0x3c(%esp),%edx
		mov    0x48(%esp),%ecx
		add    %ebx,%edx
		mov    0x24(%esp),%edi
		add    %ecx,%edx
		mov    0x50(%esp),%ebp
		add    %edi,%edx
		mov    0x10(%esp),%ebx
		sar    $0x2,%edx
		mov    0x4c(%esp),%edi
		mov    %edx,0x5c(%esp)
		add    %ebp,%edi
		mov    0x44(%esp),%edx
		mov    0xc(%esp),%ebp
		add    %ebx,%edi
		mov    0x14(%esp),%ebx
		add    %ebp,%edx
		add    %ebx,%edx
		add    %esi,%edx
		sar    $0x2,%edx
		mov    0x20(%esp),%ecx
		mov    %edx,0x60(%esp)
		xor    %edx,%edx
		add    %ecx,%edi
		mov    data_1aa5cc,%dx
		sar    $0x2,%edi
		test   %edx,%edx
		je     jump_63c6f
		imul   $0x2e,%edx,%ebx
		mov    data_18194e(%ebx),%bx
		mov    %bx,data_1aa5cc
	jump_63c6f:
		mov    %edx,%ebx
		test   %edx,%edx
		je     jump_63957
		imul   $0x2e,%edx,%edx
		add    $EXPORT_SYMBOL(ex_faces),%edx
		mov    0x58(%esp),%ecx
		movb   $0x2,0x4(%edx)
		mov    0x8(%ecx),%cx
		mov    0x58(%esp),%ebp
		mov    %cx,(%edx)
		xor    %ch,%ch
		mov    0xb(%ebp),%cl
		mov    %cx,0x2(%edx)
		mov    0xc(%ebp),%cl
		mov    %cl,0x5(%edx)
		mov    0x5c(%esp),%ecx
		mov    %cx,0x22(%edx)
		mov    0x60(%esp),%ecx
		mov    %cx,0x26(%edx)
		mov    0x3c(%esp),%ecx
		sub    0x5c(%esp),%ecx
		mov    %cx,0x6(%edx)
		mov    0x4c(%esp),%ecx
		sub    %edi,%ecx
		mov    %cx,0x8(%edx)
		mov    0x44(%esp),%ecx
		sub    0x60(%esp),%ecx
		mov    %cx,0xa(%edx)
		mov    0x40(%esp),%ecx
		sub    0x5c(%esp),%ecx
		mov    %cx,0xc(%edx)
		mov    0x50(%esp),%ecx
		sub    %edi,%ecx
		mov    %cx,0xe(%edx)
		mov    0xc(%esp),%ecx
		sub    0x60(%esp),%ecx
		mov    %cx,0x10(%edx)
		mov    0x48(%esp),%ecx
		sub    0x5c(%esp),%ecx
		mov    %cx,0x12(%edx)
		mov    0x10(%esp),%ecx
		sub    %edi,%ecx
		mov    %cx,0x14(%edx)
		mov    0x14(%esp),%ecx
		sub    0x60(%esp),%ecx
		mov    %cx,0x16(%edx)
		mov    0x24(%esp),%ecx
		sub    0x5c(%esp),%ecx
		mov    %cx,0x18(%edx)
		mov    0x20(%esp),%ecx
		sub    %edi,%ecx
		mov    %cx,0x1a(%edx)
		sub    0x60(%esp),%esi
		mov    0x62(%esp),%ecx
		mov    %si,0x1c(%edx)
		mov    0x5c(%esp),%esi
		sar    $0x10,%ecx
		mov    0x60(%esp),%ebp
		sub    %ecx,%esi
		mov    %di,0x24(%edx)
		mov    %esi,%ecx
		mov    0x66(%esp),%esi
		sar    $0x3,%ecx
		sar    $0x10,%esi
		mov    %ecx,0x18(%esp)
		sub    %esi,%edi
		mov    0x7e(%esp),%esi
		mov    0x18(%esp),%cl
		sar    $0x10,%esi
		sar    $0x3,%edi
		sub    %esi,%ebp
		mov    %cl,0x28(%edx)
		mov    %ebp,%esi
		mov    %edi,0x18(%esp)
		sar    $0x3,%esi
		mov    0x18(%esp),%cl
		mov    %esi,0x18(%esp)
		mov    %cl,0x29(%edx)
		mov    0x18(%esp),%cl
		mov    %cl,0x2a(%edx)
		mov    0x29(%edx),%cl
		xor    %bh,%bh
		add    $0x32,%cl
		and    $0x1f,%bl
		mov    %cl,0x29(%edx)
		mov    $0x32,%ecx
		sub    %ebx,%ecx
		mov    %cx,0x20(%edx)
		jmp    jump_63957
	jump_63dab:
		mov    0x1c(%esp),%eax
		mov    0x4(%eax),%ax
		add    $0x88,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
sit_on_my_face:	/* 0x063DC0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		mov    game_objects,%ebp
		mov    %eax,%ebx
		mov    %edx,%esi
		xor    %edx,%edx
		jmp    jump_63dd4
	jump_63dd3:
		inc    %edx
	jump_63dd4:
		xor    %eax,%eax
		mov    0x56(%esi),%al
		cmp    %eax,%edx
		jge    jump_63e32
		mov    0x50(%esi),%eax
		sar    $0x10,%eax
		add    %edx,%eax
		imul   $0x24,%eax,%eax
		add    %ebp,%eax
		test   %ebx,%ebx
		jge    jump_63e13
		xor    %ecx,%ecx
		mov    0x8(%eax),%cx
		mov    0x6(%eax),%ax
		and    $0xffff,%eax
		lea    (%eax,%ecx,1),%edi
		mov    %ebx,%ecx
		neg    %ecx
		cmp    %eax,%ecx
		jl     jump_63dd3
		cmp    %edi,%ecx
		jg     jump_63dd3
		mov    $0x1,%eax
		jmp    jump_63e34
	jump_63e13:
		xor    %ecx,%ecx
		mov    0x2(%eax),%cx
		mov    (%eax),%ax
		and    $0xffff,%eax
		add    %eax,%ecx
		cmp    %eax,%ebx
		jl     jump_63dd3
		cmp    %ecx,%ebx
		jg     jump_63dd3
		mov    $0x1,%eax
		jmp    jump_63e34
	jump_63e32:
		xor    %eax,%eax
	jump_63e34:
		mov    %ebp,game_objects
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
do_people_on_exploding_building:	/* 0x063E40 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    %ax,(%esp)
		xor    %ecx,%ecx
		xor    %esi,%esi
		mov    things_used_head,%cx
		mov    EXPORT_SYMBOL(things_used),%si
		test   %ecx,%ecx
		jle    jump_63f2a
	jump_63e66:
		dec    %esi
		cmp    $0xffffffff,%esi
		je     jump_63f2a
		imul   $0xa8,%ecx,%ebx
		mov    things,%edx
		add    %edx,%ebx
		xor    %eax,%eax
		mov    0x4(%ebx),%ecx
		mov    0x9(%ebx),%al
		sar    $0x10,%ecx
		cmp    $0x3,%eax
		jne    jump_63f22
		testb  $0x10,0xf(%ebx)
		jne    jump_63f22
		cmpw   $0x0,0x6e(%ebx)
		je     jump_63f22
		mov    -0x2(%esp),%edi
		sar    $0x10,%edi
		imul   $0xa8,%edi,%edi
		mov    0x6c(%ebx),%eax
		sar    $0x10,%eax
		add    %edi,%edx
		call   sit_on_my_face
		test   %eax,%eax
		je     jump_63f22
		mov    0x20(%ebx),%eax
		sar    $0x8,%eax
		movswl %ax,%edx
		mov    0x18(%ebx),%eax
		sar    $0x8,%eax
		cwtl
		call   ac_alt_at_point
		movw   $0x0,0x6e(%ebx)
		mov    0xc(%ebx),%dl
		mov    %eax,0x1c(%ebx)
		test   $0x2,%dl
		jne    jump_63f22
		mov    0x20(%ebx),%eax
		mov    0x18(%ebx),%edx
		sar    $0x10,%eax
		sar    $0x10,%edx
		shl    $0x7,%eax
		add    %edx,%eax
		imul   $0x12,%eax,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		testb  $0x4,0xf(%edx,%eax,1)
		je     jump_63f22
		mov    $0xa,%edx
		mov    %ebx,%eax
		movl   $0x0,0xa4(%ebx)
		call   ac_set_person_dead
	jump_63f22:
		test   %ecx,%ecx
		jg     jump_63e66
	jump_63f2a:
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_explode_thing_building)	/* 0x063F34 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xe0,%esp
		mov    %ax,0xd0(%esp)
		mov    %dx,0xd4(%esp)
		mov    %bx,0xcc(%esp)
		mov    %cx,0xc8(%esp)
		xor    %edx,%edx
		mov    %edx,EXPORT_SYMBOL(dont_bother_with_explode_faces)
		mov    0xce(%esp),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		add    %eax,%edx
		mov    0x50(%edx),%eax
		sar    $0x10,%eax
		mov    %edx,0x38(%esp)
		mov    %eax,0x3c(%esp)
		xor    %ah,%ah
		mov    0x56(%edx),%dl
		mov    %ah,0xdc(%esp)
		test   %dl,%dl
		jbe    jump_64502
		mov    0x3c(%esp),%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		mov    %eax,0xac(%esp)
	jump_63fc1:
		mov    0xac(%esp),%edx
		mov    game_objects,%eax
		add    %eax,%edx
		mov    %edx,0x34(%esp)
		mov    0x38(%esp),%ecx
		mov    0x34(%esp),%eax
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    0x2(%eax),%dx
		mov    (%eax),%bx
		xor    %eax,%eax
		mov    0x8(%ecx),%al
		cmp    $0x20,%eax
		jne    jump_64041
		mov    0x18(%ecx),%esi
		mov    0x1c(%ecx),%ebp
		mov    0x20(%ecx),%edi
		sar    $0x8,%esi
		sar    $0x5,%ebp
		sar    $0x8,%edi
		jmp    jump_6406e
	jump_64004:
		mov    0xdc(%esp),%dh
		mov    0xac(%esp),%ebx
		mov    0x3c(%esp),%ecx
		inc    %dh
		add    $0x24,%ebx
		mov    %dh,0xdc(%esp)
		mov    %dh,%al
		mov    0x38(%esp),%edx
		inc    %ecx
		mov    %ebx,0xac(%esp)
		mov    0x56(%edx),%bl
		mov    %ecx,0x3c(%esp)
		cmp    %bl,%al
		jae    jump_64502
		jmp    jump_63fc1
	jump_64041:
		mov    0xce(%esp),%eax
		mov    0x34(%esp),%esi
		mov    0x34(%esp),%ebp
		sar    $0x10,%eax
		mov    0x34(%esp),%edi
		call   do_people_on_exploding_building
		mov    0x12(%esi),%esi
		mov    0xc(%ebp),%ebp
		mov    0x14(%edi),%edi
		sar    $0x10,%esi
		sar    $0x10,%ebp
		sar    $0x10,%edi
	jump_6406e:
		test   %edx,%edx
		jle    jump_64284
		mov    %edx,%eax
		shl    $0x5,%ebx
		shl    $0x5,%eax
		mov    %ebx,0x9c(%esp)
		add    %eax,%ebx
		mov    %ebx,0xa0(%esp)
	jump_6408e:
		mov    0x9c(%esp),%ecx
		mov    game_object_faces,%ebx
		add    %ecx,%ebx
		mov    0x8(%ebx),%ch
		test   $0x4,%ch
		je     jump_640b7
		mov    %ch,%al
		and    $0xfb,%al
		mov    %al,0x8(%ebx)
		mov    0x1c(%ebx),%eax
		sar    $0x10,%eax
		call   make_triangle_solid
	jump_640b7:
		xor    %eax,%eax
		mov    (%ebx),%ax
		imul   $0xa,%eax,%eax
		mov    EXPORT_SYMBOL(game_object_points),%edx
		add    %edx,%eax
		mov    %edx,0xc4(%esp)
		mov    (%eax),%edx
		sar    $0x10,%edx
		lea    (%esi,%edx,1),%ecx
		mov    %ecx,0x18(%esp)
		mov    0x2(%eax),%edx
		mov    0x4(%eax),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		lea    (%edx,%ebp,1),%ecx
		lea    (%edi,%eax,1),%edx
		xor    %eax,%eax
		mov    0x2(%ebx),%ax
		imul   $0xa,%eax,%eax
		mov    %ecx,0x1c(%esp)
		add    0xc4(%esp),%eax
		mov    %edx,0x20(%esp)
		mov    0x2(%eax),%edx
		mov    (%eax),%ecx
		sar    $0x10,%edx
		mov    0x4(%eax),%eax
		add    %ebp,%edx
		sar    $0x10,%eax
		mov    %edx,0x4(%esp)
		lea    (%edi,%eax,1),%edx
		xor    %eax,%eax
		mov    0x4(%ebx),%ax
		imul   $0xa,%eax,%eax
		mov    %edx,0x8(%esp)
		add    0xc4(%esp),%eax
		mov    (%eax),%edx
		sar    $0x10,%edx
		add    %esi,%edx
		mov    %edx,0xc(%esp)
		mov    0x2(%eax),%edx
		sar    $0x10,%ecx
		sar    $0x10,%edx
		mov    0x4(%eax),%eax
		add    %ebp,%edx
		sar    $0x10,%eax
		mov    %edx,0x10(%esp)
		lea    (%edi,%eax,1),%edx
		add    %esi,%ecx
		mov    %edx,0x14(%esp)
		mov    0x18(%esp),%edx
		mov    0xc(%esp),%eax
		add    %ecx,%edx
		add    %eax,%edx
		movl   $0x3,0xc4(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idivl  0xc4(%esp)
		mov    0x20(%esp),%edx
		mov    %eax,0x2c(%esp)
		add    0x8(%esp),%edx
		add    0x14(%esp),%edx
		movl   $0x3,0xc4(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idivl  0xc4(%esp)
		mov    %eax,0x30(%esp)
		xor    %eax,%eax
		mov    data_1aa5cc,%ax
		test   %eax,%eax
		je     jump_641c6
		mov    %eax,%edx
		imul   $0x2e,%eax,%eax
		mov    data_18194e(%eax),%ax
		mov    %ax,data_1aa5cc
		mov    %edx,%eax
	jump_641c6:
		test   %eax,%eax
		je     jump_64264
		imul   $0x2e,%eax,%eax
		mov    $EXPORT_SYMBOL(ex_faces),%edx
		add    %eax,%edx
		movb   $0x3,0x4(%edx)
		mov    0x6(%ebx),%ax
		mov    %ax,(%edx)
		xor    %ah,%ah
		mov    0x9(%ebx),%al
		mov    %ax,0x2(%edx)
		mov    0xa(%ebx),%al
		mov    %al,0x5(%edx)
		mov    0x18(%esp),%eax
		mov    %ax,0x6(%edx)
		mov    0x1c(%esp),%eax
		mov    %ax,0x8(%edx)
		mov    0x20(%esp),%eax
		mov    %ax,0xa(%edx)
		mov    0x4(%esp),%eax
		mov    %ax,0xe(%edx)
		mov    0x8(%esp),%eax
		mov    %ax,0x10(%edx)
		mov    0xc(%esp),%eax
		mov    %ax,0x12(%edx)
		mov    0x10(%esp),%eax
		mov    %ax,0x14(%edx)
		mov    0x14(%esp),%eax
		mov    %ax,0x16(%edx)
		mov    0x2c(%esp),%eax
		sub    %esi,%eax
		mov    %cx,0xc(%edx)
		sar    $0x7,%eax
		mov    %al,0x28(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7,%al
		mov    $0x1,%ah
		mov    0x30(%esp),%ebx
		sub    %al,%ah
		sub    %edi,%ebx
		mov    %ah,0x29(%edx)
		mov    %ebx,%eax
		movw   $0x1,0x20(%edx)
		sar    $0x7,%eax
		mov    %al,0x2a(%edx)
	jump_64264:
		mov    0x9c(%esp),%edx
		add    $0x20,%edx
		mov    0xa0(%esp),%ebx
		mov    %edx,0x9c(%esp)
		cmp    %ebx,%edx
		jl     jump_6408e
	jump_64284:
		mov    0x34(%esp),%eax
		xor    %ebx,%ebx
		mov    0x34(%esp),%edx
		mov    0x8(%eax),%bx
		xor    %eax,%eax
		mov    0x6(%edx),%ax
		test   %ebx,%ebx
		jle    jump_64004
		imul   $0x28,%eax,%edx
		imul   $0x28,%ebx,%eax
		mov    %edx,0xa4(%esp)
		add    %eax,%edx
		mov    %edx,0xa8(%esp)
	jump_642b6:
		mov    0xa4(%esp),%edx
		mov    game_object_faces4,%ebx
		add    %edx,%ebx
		mov    0xa(%ebx),%ah
		test   $0x4,%ah
		je     jump_642eb
		mov    %ah,%dl
		mov    0x24(%ebx),%eax
		and    $0xfb,%dl
		sar    $0x10,%eax
		mov    %dl,0xa(%ebx)
		call   make_triangle_solid
		mov    0x22(%ebx),%eax
		sar    $0x10,%eax
		call   make_triangle_solid
	jump_642eb:
		xor    %eax,%eax
		mov    (%ebx),%ax
		imul   $0xa,%eax,%eax
		mov    EXPORT_SYMBOL(game_object_points),%edx
		add    %edx,%eax
		mov    %edx,0xc4(%esp)
		mov    (%eax),%edx
		sar    $0x10,%edx
		lea    (%esi,%edx,1),%ecx
		mov    %ecx,0x18(%esp)
		mov    0x2(%eax),%edx
		mov    0x4(%eax),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		lea    (%edx,%ebp,1),%ecx
		lea    (%edi,%eax,1),%edx
		xor    %eax,%eax
		mov    0x2(%ebx),%ax
		imul   $0xa,%eax,%eax
		mov    %edx,0x20(%esp)
		add    0xc4(%esp),%eax
		mov    %ecx,0x1c(%esp)
		mov    0x2(%eax),%edx
		mov    (%eax),%ecx
		sar    $0x10,%edx
		mov    0x4(%eax),%eax
		add    %ebp,%edx
		sar    $0x10,%eax
		mov    %edx,0x4(%esp)
		lea    (%edi,%eax,1),%edx
		xor    %eax,%eax
		mov    0x4(%ebx),%ax
		imul   $0xa,%eax,%eax
		mov    %edx,0x8(%esp)
		add    0xc4(%esp),%eax
		mov    (%eax),%edx
		sar    $0x10,%edx
		add    %esi,%edx
		mov    %edx,0xc(%esp)
		mov    0x2(%eax),%edx
		sar    $0x10,%edx
		mov    0x4(%eax),%eax
		add    %ebp,%edx
		sar    $0x10,%eax
		mov    %edx,0x10(%esp)
		lea    (%edi,%eax,1),%edx
		xor    %eax,%eax
		mov    0x6(%ebx),%ax
		imul   $0xa,%eax,%eax
		mov    %edx,0x14(%esp)
		add    0xc4(%esp),%eax
		mov    (%eax),%edx
		sar    $0x10,%edx
		add    %esi,%edx
		sar    $0x10,%ecx
		mov    %edx,(%esp)
		mov    0x2(%eax),%edx
		add    %esi,%ecx
		sar    $0x10,%edx
		mov    0x4(%eax),%eax
		add    %ebp,%edx
		sar    $0x10,%eax
		mov    %edx,0x24(%esp)
		lea    (%edi,%eax,1),%edx
		mov    0x18(%esp),%eax
		mov    %edx,0x28(%esp)
		mov    0xc(%esp),%edx
		add    %ecx,%eax
		add    %edx,%eax
		mov    (%esp),%edx
		add    %eax,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x2,%edx
		sbb    %edx,%eax
		sar    $0x2,%eax
		mov    0x20(%esp),%edx
		mov    %eax,0xc0(%esp)
		add    0x8(%esp),%edx
		add    0x14(%esp),%edx
		mov    0x28(%esp),%eax
		add    %eax,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x2,%edx
		sbb    %edx,%eax
		sar    $0x2,%eax
		mov    %eax,0x78(%esp)
		xor    %eax,%eax
		mov    data_1aa5cc,%ax
		test   %eax,%eax
		je     jump_64427
		mov    %eax,%edx
		imul   $0x2e,%eax,%eax
		mov    data_18194e(%eax),%ax
		mov    %ax,data_1aa5cc
		mov    %edx,%eax
	jump_64427:
		test   %eax,%eax
		je     jump_644dd
		imul   $0x2e,%eax,%eax
		mov    $EXPORT_SYMBOL(ex_faces),%edx
		add    %eax,%edx
		movb   $0x4,0x4(%edx)
		mov    0x8(%ebx),%ax
		mov    %ax,(%edx)
		xor    %ah,%ah
		mov    0xb(%ebx),%al
		mov    %ax,0x2(%edx)
		mov    0xc(%ebx),%al
		mov    %al,0x5(%edx)
		mov    0x18(%esp),%eax
		mov    %ax,0x6(%edx)
		mov    0x1c(%esp),%eax
		mov    %ax,0x8(%edx)
		mov    0x20(%esp),%eax
		mov    %ax,0xa(%edx)
		mov    0x4(%esp),%eax
		mov    %ax,0xe(%edx)
		mov    0x8(%esp),%eax
		mov    %ax,0x10(%edx)
		mov    0xc(%esp),%eax
		mov    %ax,0x12(%edx)
		mov    0x10(%esp),%eax
		mov    %ax,0x14(%edx)
		mov    0x14(%esp),%eax
		mov    %ax,0x16(%edx)
		mov    (%esp),%eax
		mov    %ax,0x18(%edx)
		mov    0x24(%esp),%eax
		mov    %ax,0x1a(%edx)
		mov    0x28(%esp),%eax
		mov    0x78(%esp),%ebx
		mov    %ax,0x1c(%edx)
		mov    0xc0(%esp),%eax
		mov    %cx,0xc(%edx)
		sub    %esi,%eax
		sub    %edi,%ebx
		sar    $0x7,%eax
		sar    $0x7,%ebx
		mov    %al,0x28(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7,%al
		movw   $0x1,0x20(%edx)
		mov    $0x1,%ah
		mov    %bl,0x2a(%edx)
		sub    %al,%ah
		mov    %ah,0x29(%edx)
	jump_644dd:
		mov    0xa4(%esp),%ebx
		add    $0x28,%ebx
		mov    0xa8(%esp),%ecx
		mov    %ebx,0xa4(%esp)
		cmp    %ecx,%ebx
		jge    jump_64004
		jmp    jump_642b6
	jump_64502:
		mov    $0x80000000,%esi
		mov    0x38(%esp),%eax
		mov    $0x7fffffff,%ebp
		xor    %bh,%bh
		mov    0x50(%eax),%eax
		mov    %esi,0x50(%esp)
		sar    $0x10,%eax
		mov    %esi,0x54(%esp)
		mov    %eax,0x7c(%esp)
		mov    0x38(%esp),%eax
		mov    %ebp,0x44(%esp)
		mov    %ebp,0x48(%esp)
		mov    0x56(%eax),%cl
		mov    %bh,0xd8(%esp)
		test   %cl,%cl
		jbe    jump_64638
		mov    0x7c(%esp),%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		mov    %eax,0xb0(%esp)
	jump_64559:
		mov    0xb0(%esp),%edx
		mov    game_objects,%eax
		add    %eax,%edx
		mov    %edx,0x34(%esp)
		mov    0x12(%edx),%edi
		mov    0x14(%edx),%esi
		xor    %eax,%eax
		sar    $0x10,%edi
		mov    0x18(%edx),%ax
		sar    $0x10,%esi
		imul   $0xa,%eax,%edx
		jmp    jump_645c7
	jump_64582:
		mov    0xd8(%esp),%dh
		mov    0xb0(%esp),%ebx
		mov    0x7c(%esp),%ecx
		inc    %dh
		add    $0x24,%ebx
		mov    %dh,0xd8(%esp)
		mov    %dh,%al
		mov    0x38(%esp),%edx
		inc    %ecx
		mov    %ebx,0xb0(%esp)
		mov    0x56(%edx),%bl
		mov    %ecx,0x7c(%esp)
		cmp    %bl,%al
		jae    jump_64638
		jmp    jump_64559
	jump_645bf:
		mov    %ebx,0x48(%esp)
		add    $0xa,%edx
		inc    %eax
	jump_645c7:
		mov    0x34(%esp),%ecx
		xor    %ebx,%ebx
		mov    0x1a(%ecx),%bx
		cmp    %ebx,%eax
		jg     jump_64582
		mov    EXPORT_SYMBOL(game_object_points),%ebx
		mov    (%edx,%ebx,1),%ecx
		sar    $0x10,%ecx
		lea    (%edi,%ecx,1),%ebp
		mov    %ebp,0x64(%esp)
		mov    0x4(%edx,%ebx,1),%ebx
		sar    $0x10,%ebx
		lea    (%esi,%ebx,1),%ecx
		mov    0x50(%esp),%ebx
		mov    %ecx,0x68(%esp)
		cmp    %ebp,%ebx
		jg     jump_64600
		mov    %ebp,%ebx
	jump_64600:
		mov    0x64(%esp),%ebp
		mov    %ebx,0x50(%esp)
		mov    0x44(%esp),%ebx
		cmp    %ebp,%ebx
		jl     jump_64612
		mov    %ebp,%ebx
	jump_64612:
		mov    0x68(%esp),%ecx
		mov    %ebx,0x44(%esp)
		mov    0x54(%esp),%ebx
		cmp    %ecx,%ebx
		jg     jump_64624
		mov    %ecx,%ebx
	jump_64624:
		mov    0x68(%esp),%ebp
		mov    %ebx,0x54(%esp)
		mov    0x48(%esp),%ebx
		cmp    %ebp,%ebx
		jl     jump_645bf
		mov    %ebp,%ebx
		jmp    jump_645bf
	jump_64638:
		mov    0x50(%esp),%eax
		mov    0x44(%esp),%esi
		add    $0x100,%eax
		mov    0x48(%esp),%edi
		sar    $0x8,%eax
		sar    $0x8,%esi
		mov    %eax,0x50(%esp)
		mov    0x54(%esp),%eax
		sar    $0x8,%edi
		add    $0x100,%eax
		mov    %esi,0x44(%esp)
		sar    $0x8,%eax
		mov    %edi,0x48(%esp)
		mov    %eax,0x54(%esp)
		test   %esi,%esi
		jge    jump_64678
		xor    %eax,%eax
		mov    %eax,0x44(%esp)
	jump_64678:
		cmpl   $0x0,0x48(%esp)
		jge    jump_64685
		xor    %ebx,%ebx
		mov    %ebx,0x48(%esp)
	jump_64685:
		cmpl   $0x7f,0x50(%esp)
		jle    jump_64694
		movl   $0x7f,0x50(%esp)
	jump_64694:
		cmpl   $0x7f,0x54(%esp)
		jle    jump_646a3
		movl   $0x7f,0x54(%esp)
	jump_646a3:
		mov    0x50(%esp),%edx
		mov    0x44(%esp),%eax
		mov    0x48(%esp),%ebx
		sub    %eax,%edx
		mov    0x54(%esp),%eax
		sub    %ebx,%eax
		add    %edx,%eax
		shl    $0x9,%eax
		mov    %eax,0x40(%esp)
		cmp    $0x4e20,%eax
		jle    jump_646cf
		movl   $0x4e20,0x40(%esp)
	jump_646cf:
		mov    0x44(%esp),%eax
		mov    0x50(%esp),%edi
		add    %edi,%eax
		shl    $0xf,%eax
		mov    0x54(%esp),%ebp
		mov    %eax,0x5c(%esp)
		mov    0x48(%esp),%eax
		add    %ebp,%eax
		shl    $0xf,%eax
		mov    %eax,0x60(%esp)
		mov    0x44(%esp),%eax
		mov    %eax,0x6c(%esp)
		cmp    %edi,%eax
		jg     jump_6495b
		mov    %eax,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		add    %eax,%eax
		mov    %eax,0xb8(%esp)
	jump_64711:
		mov    0x48(%esp),%eax
		mov    0x54(%esp),%ecx
		cmp    %ecx,%eax
		jle    jump_64758
	jump_6471d:
		mov    0xb8(%esp),%eax
		mov    0x6c(%esp),%edx
		mov    0x50(%esp),%ebx
		add    $0x12,%eax
		inc    %edx
		mov    %eax,0xb8(%esp)
		mov    %edx,0x6c(%esp)
		cmp    %ebx,%edx
		jg     jump_6495b
		jmp    jump_64711
	jump_64745:
		mov    0xb4(%esp),%esi
		add    $0x900,%ebp
		cmp    %esi,%ebp
		jg     jump_6471d
		jmp    jump_6477b
	jump_64758:
		imul   $0x900,%eax,%ebp
		add    0xb8(%esp),%ebp
		imul   $0x900,%ecx,%eax
		mov    0xb8(%esp),%edx
		add    %eax,%edx
		mov    %edx,0xb4(%esp)
	jump_6477b:
		mov    EXPORT_SYMBOL(game_my_big_map),%ebx
		add    %ebp,%ebx
		andb   $0x7f,0x5(%ebx)
		mov    0x38(%esp),%edx
		mov    0xf(%ebx),%ch
		movw   $0x0,0x10(%ebx)
		and    $0xf7,%ch
		xor    %eax,%eax
		mov    %ch,0xf(%ebx)
		mov    0x8(%edx),%al
		cmp    $0x25,%eax
		jne    jump_647ec
		mov    $0x1,%edi
		mov    %ch,%al
		mov    $0x24,%esi
		or     $0x8,%al
		mov    0xd0(%esp),%ecx
		mov    %al,0xf(%ebx)
		jmp    jump_647c2
	jump_647be:
		add    $0x24,%esi
		inc    %edi
	jump_647c2:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(next_traffic_node),%ax
		cmp    %eax,%edi
		jge    jump_647ec
		mov    EXPORT_SYMBOL(game_traffic_nodes),%eax
		add    %esi,%eax
		cmp    0x14(%eax),%cx
		jne    jump_647be
		mov    0x13(%eax),%dl
		movw   $0x0,0x14(%eax)
		and    $0x7f,%dl
		mov    %dl,0x13(%eax)
		jmp    jump_647be
	jump_647ec:
		mov    0xce(%esp),%edx
		mov    %ebx,%eax
		sar    $0x10,%edx
		call   del_thing_vectors_from_mapwho
		test   %eax,%eax
		jne    jump_647ec
		mov    0x38(%esp),%edx
		mov    0x6(%ebx),%edi
		mov    0x8(%edx),%al
		sar    $0x10,%edi
		cmp    $0x14,%eax
		je     jump_64745
		cmp    $0x1d,%eax
		je     jump_64745
		cmp    $0x1c,%eax
		je     jump_64745
		cmp    $0x15,%eax
		je     jump_64745
		cmp    $0x20,%eax
		je     jump_64745
	jump_6483b:
		test   %edi,%edi
		je     jump_64745
		jle    jump_6491b
		imul   $0xa8,%edi,%edi
		mov    things,%esi
		add    %edi,%esi
		xor    %eax,%eax
		mov    (%esi),%edi
		mov    0x9(%esi),%al
		sar    $0x10,%edi
		cmp    $0x9,%eax
		jne    jump_648cb
		xor    %eax,%eax
		mov    0x8(%esi),%al
		cmp    $0x14,%eax
		je     jump_64888
		cmp    $0x1d,%eax
		je     jump_64888
		cmp    $0x1c,%eax
		je     jump_64888
		cmp    $0x15,%eax
		je     jump_64888
		cmp    $0x20,%eax
		jne    jump_6483b
	jump_64888:
		testb  $0x2,0xc(%esi)
		jne    jump_6483b
		xor    %eax,%eax
		mov    0x8(%esi),%al
		cmp    $0x20,%eax
		jne    jump_648a1
		mov    %esi,%eax
		call   init_mgun_explode
		jmp    jump_6483b
	jump_648a1:
		mov    0xc6(%esp),%ebx
		mov    0xca(%esp),%edx
		mov    0xd2(%esp),%eax
		mov    %esi,%ecx
		sar    $0x10,%ebx
		sar    $0x10,%edx
		sar    $0x10,%eax
		call   ac_collapse_building
		jmp    jump_6483b
	jump_648cb:
		cmp    $0xf,%eax
		jne    jump_6483b
		xor    %eax,%eax
		mov    0x8(%esi),%al
		cmp    $0x30,%eax
		jne    jump_6483b
		mov    $0x14,%ecx
		mov    0x20(%esi),%ebx
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		call   ac_bang_new4
		movw   $0xd,0xa(%esi)
		mov    0xc(%esi),%dh
		xor    %eax,%eax
		or     $0x2,%dh
		mov    0x16(%esi),%ax
		mov    %dh,0xc(%esi)
		call   ac_remove_thing
		mov    %esi,%eax
		call   ac_delete_node
		jmp    jump_6483b
	jump_6491b:
		imul   $0x3c,%edi,%edi
		mov    EXPORT_SYMBOL(sthings),%esi
		add    %edi,%esi
		xor    %eax,%eax
		mov    (%esi),%edi
		mov    0x9(%esi),%al
		sar    $0x10,%edi
		cmp    $0x19,%eax
		jne    jump_6483b
		cmpw   $0x0,0x34(%esi)
		je     jump_6483b
		mov    0x14(%esi),%eax
		sar    $0x10,%eax
		call   ac_remove_sthing
		mov    %esi,%eax
		call   ac_delete_snode
		jmp    jump_6483b
	jump_6495b:
		mov    0x54(%esp),%ecx
		mov    0x50(%esp),%ebx
		mov    0x48(%esp),%edx
		mov    0x44(%esp),%eax
		call   ac_triangulation_unkn_func_002
		mov    EXPORT_SYMBOL(dword_1AA5C4),%edx
		inc    %edx
		mov    EXPORT_SYMBOL(dword_1AA5C8),%ecx
		and    $0x7f,%edx
		cmp    %ecx,%edx
		je     jump_649c3
		mov    0x48(%esp),%bl
		mov    EXPORT_SYMBOL(dword_1AA5C4),%eax
		add    %bl,%bl
		mov    %bl,redo_scanner(,%eax,4)
		mov    0x44(%esp),%bl
		add    %bl,%bl
		mov    %bl,data_1aa3c5(,%eax,4)
		mov    0x54(%esp),%bl
		add    %bl,%bl
		mov    %bl,data_1aa3c6(,%eax,4)
		mov    0x50(%esp),%bl
		add    %bl,%bl
		mov    %edx,EXPORT_SYMBOL(dword_1AA5C4)
		mov    %bl,data_1aa3c7(,%eax,4)
	jump_649c3:
		mov    0x44(%esp),%esi
		mov    0x48(%esp),%edi
		mov    0x50(%esp),%ebp
		mov    0x54(%esp),%eax
		sub    $0x6,%esi
		sub    $0x6,%edi
		add    $0x6,%ebp
		add    $0x6,%eax
		mov    %esi,0x44(%esp)
		mov    %edi,0x48(%esp)
		mov    %ebp,0x50(%esp)
		mov    %eax,0x54(%esp)
		test   %esi,%esi
		jge    jump_649f9
		xor    %ebx,%ebx
		mov    %ebx,0x44(%esp)
	jump_649f9:
		cmpl   $0x0,0x48(%esp)
		jge    jump_64a06
		xor    %esi,%esi
		mov    %esi,0x48(%esp)
	jump_64a06:
		cmpl   $0x7f,0x50(%esp)
		jle    jump_64a15
		movl   $0x7f,0x50(%esp)
	jump_64a15:
		cmpl   $0x7f,0x54(%esp)
		jle    jump_64a24
		movl   $0x7f,0x54(%esp)
	jump_64a24:
		mov    0x44(%esp),%eax
		mov    0x50(%esp),%ebx
		mov    %eax,0x80(%esp)
		cmp    %ebx,%eax
		jg     jump_64cb3
		add    $0x6,%eax
		mov    %eax,0x94(%esp)
		lea    -0x6(%ebx),%eax
		mov    %eax,0x4c(%esp)
		mov    0x48(%esp),%eax
		add    $0x6,%eax
		mov    %eax,0x58(%esp)
		mov    0x54(%esp),%eax
		sub    $0x6,%eax
		mov    0x44(%esp),%edx
		mov    %eax,0x98(%esp)
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		add    %eax,%eax
		mov    %eax,0xbc(%esp)
	jump_64a7b:
		mov    0x48(%esp),%eax
		mov    0x54(%esp),%edi
		cmp    %edi,%eax
		jle    jump_64ab5
	jump_64a87:
		mov    0xbc(%esp),%ebx
		mov    0x80(%esp),%ecx
		mov    0x50(%esp),%esi
		add    $0x12,%ebx
		inc    %ecx
		mov    %ebx,0xbc(%esp)
		mov    %ecx,0x80(%esp)
		cmp    %esi,%ecx
		jg     jump_64cb3
		jmp    jump_64a7b
	jump_64ab5:
		imul   $0x900,%eax,%eax
		mov    0xbc(%esp),%ecx
		add    %ecx,%eax
		mov    %eax,0x70(%esp)
		imul   $0x900,%edi,%eax
		lea    (%ecx,%eax,1),%edx
		mov    %edx,0x74(%esp)
	jump_64ad5:
		mov    0x70(%esp),%edi
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %edi,%eax
		mov    0x6(%eax),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		je     jump_64c94
	jump_64aee:
		jle    jump_64c7d
		imul   $0xa8,%eax,%eax
		mov    things,%esi
		add    %eax,%esi
		xor    %eax,%eax
		mov    0x9(%esi),%al
		cmp    $0x3,%eax
		jne    jump_64b10
		andb   $0xdf,0x47(%esi)
	jump_64b10:
		xor    %eax,%eax
		mov    0x9(%esi),%al
		cmp    $0x3,%eax
		jne    jump_64bf5
		testb  $0x2,0xc(%esi)
		jne    jump_64bf5
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0x24,%eax
		je     jump_64bf5
		mov    0x5c(%esp),%ebp
		mov    0x18(%esi),%eax
		sub    %ebp,%eax
		sar    $0x8,%eax
		mov    0x20(%esi),%ebp
		mov    %eax,0x90(%esp)
		sub    0x60(%esp),%ebp
		mov    0x18(%esi),%eax
		mov    0x94(%esp),%edx
		sar    $0x10,%eax
		sub    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%edi
		mov    0x18(%esi),%eax
		mov    0x4c(%esp),%ebx
		sar    $0x10,%eax
		sub    %ebx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,0x84(%esp)
		mov    0x20(%esi),%eax
		mov    0x58(%esp),%ecx
		sar    $0x10,%eax
		sub    %ecx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebx
		mov    0x20(%esi),%eax
		mov    0x98(%esp),%edx
		sar    $0x10,%eax
		sub    %edx,%eax
		sar    $0x8,%ebp
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    0x84(%esp),%ecx
		mov    %eax,0x88(%esp)
		cmp    %ecx,%edi
		jl     jump_64bbd
		mov    %ecx,%edi
	jump_64bbd:
		mov    0x88(%esp),%eax
		cmp    %eax,%ebx
		jge    jump_64bca
		mov    %ebx,%eax
	jump_64bca:
		mov    %eax,0x8c(%esp)
		cmp    %eax,%edi
		jge    jump_64bd7
		mov    %edi,%eax
	jump_64bd7:
		push   $0x0
		shl    $0x7,%eax
		mov    0x44(%esp),%ecx
		lea    0x100(%eax),%ebx
		push   %esi
		mov    %ebp,%edx
		mov    0x98(%esp),%eax
		call   do_shockwave_person
	jump_64bf5:
		xor    %eax,%eax
		mov    0x9(%esi),%al
		cmp    $0x2,%eax
		jne    jump_64c79
		mov    $0xdac,%eax
		mov    0x7c(%esi),%ch
		xor    %edx,%edx
		or     $0x80,%ch
		mov    0x8(%esi),%dl
		mov    %ch,0x7c(%esi)
		cmp    $0x33,%edx
		jne    jump_64c20
		mov    $0x6d6,%eax
	jump_64c20:
		xor    %edx,%edx
		mov    0x8(%esi),%dl
		cmp    $0x3b,%edx
		jne    jump_64c2d
		sar    $0x2,%eax
	jump_64c2d:
		sub    %ax,0x3a(%esi)
		mov    0x38(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jg     jump_64c79
		xor    %eax,%eax
		mov    0x8(%esi),%al
		cmp    $0x3b,%eax
		jne    jump_64c52
		orb    $0x2,0xc(%esi)
		mov    %esi,%eax
		call   init_mech_explode
		jmp    jump_64c79
	jump_64c52:
		orb    $0x2,0xc(%esi)
		mov    %esi,%eax
		call   ac_start_crashing
		push   $0x1
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x5f,%edx
		mov    %esi,%eax
		call   ac_play_dist_sample
	jump_64c79:
		mov    (%esi),%eax
		jmp    jump_64c89
	jump_64c7d:
		imul   $0x3c,%eax,%eax
		mov    EXPORT_SYMBOL(sthings),%edx
		mov    (%edx,%eax,1),%eax
	jump_64c89:
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_64aee
	jump_64c94:
		mov    0x70(%esp),%ebp
		add    $0x900,%ebp
		mov    0x74(%esp),%edx
		mov    %ebp,0x70(%esp)
		cmp    %edx,%ebp
		jg     jump_64a87
		jmp    jump_64ad5
	jump_64cb3:
		mov    0x34(%esp),%eax
		mov    0x4(%eax),%ax
		add    $0xe0,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_collapse_building)	/* 0x064CC8 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x20,%esp
		mov    %eax,0x10(%esp)
		mov    %edx,0x18(%esp)
		mov    %ebx,0xc(%esp)
		mov    %ecx,0x8(%esp)
		cmpw   $0x0,ingame__SoundThing
		je     jump_64d1d
		mov    data_180cad,%edx
		sar    $0x10,%edx
		mov    %edx,%eax
		shl    $0x4,%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(sthings),%edx
		shl    $0x2,%eax
		add    %edx,%eax
		mov    0x18(%ecx),%edx
		mov    %edx,0x18(%eax)
		mov    0x1c(%ecx),%edx
		mov    %edx,0x1c(%eax)
		mov    0x20(%ecx),%edx
		movw   $0x1,0xa(%eax)
		mov    %edx,0x20(%eax)
		jmp    jump_64d7b
	jump_64d1d:
		push   $0x3
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x2d,%edx
		mov    0x14(%esp),%eax
		call   ac_play_dist_sample
		push   $0xffffffff
		mov    0xc(%esp),%ebx
		mov    0xc(%esp),%edx
		mov    0xc(%esp),%eax
		mov    $0x2e,%ecx
		push   $0x7f
		mov    0x20(%ebx),%ebx
		mov    0x1c(%edx),%edx
		mov    0x18(%eax),%eax
		sar    $0x8,%ebx
		sar    $0x8,%edx
		sar    $0x8,%eax
		call   ac_create_sound_effect
		test   %eax,%eax
		je     jump_64d7b
		movw   $0x1,0xa(%eax)
		mov    0x16(%eax),%ax
		mov    %ax,ingame__SoundThing
	jump_64d7b:
		mov    0x8(%esp),%eax
		mov    0x16(%eax),%ax
		mov    %ax,0x1c(%esp)
		mov    0x8(%esp),%eax
		lea    0x8(%eax),%ecx
		jmp    jump_64d98
	jump_64d91:
		add    $0x2,%eax
		cmp    %ecx,%eax
		je     jump_64dbb
	jump_64d98:
		cmpw   $0x0,0x9e(%eax)
		je     jump_64d91
		mov    0x9c(%eax),%edx
		sar    $0x10,%edx
		imul   $0x24,%edx,%edx
		mov    EXPORT_SYMBOL(game_traffic_nodes),%ebx
		orb    $0x30,0x13(%edx,%ebx,1)
		jmp    jump_64d91
	jump_64dbb:
		mov    0x8(%esp),%eax
		mov    0x8(%esp),%esi
		mov    0x9e(%eax),%ax
		mov    0xa0(%esi),%si
		test   %ax,%ax
		je     jump_64e24
		test   %si,%si
		jne    jump_64de8
		jmp    jump_64e24
	jump_64ddd:
		inc    %edx
		add    $0x2,%eax
		cmp    $0x4,%edx
		jl     jump_64e03
		jmp    jump_64e24
	jump_64de8:
		movswl %ax,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edi
		shl    $0x2,%eax
		add    %eax,%edi
		xor    %edx,%edx
		mov    %edi,%eax
	jump_64e03:
		mov    0x4(%eax),%ecx
		movswl %si,%ebx
		sar    $0x10,%ecx
		neg    %ebx
		cmp    %ebx,%ecx
		je     jump_64e24
		cmpw   $0x0,0x6(%eax)
		jne    jump_64ddd
		neg    %esi
		mov    %si,0x6(%eax)
		movb   $0x40,0xe(%edx,%edi,1)
	jump_64e24:
		mov    0x8(%esp),%eax
		mov    0x8(%esp),%esi
		mov    0xa2(%eax),%ax
		mov    0xa4(%esi),%si
		test   %ax,%ax
		je     jump_64e8d
		test   %si,%si
		jne    jump_64e51
		jmp    jump_64e8d
	jump_64e46:
		inc    %edx
		add    $0x2,%eax
		cmp    $0x4,%edx
		jl     jump_64e6c
		jmp    jump_64e8d
	jump_64e51:
		movswl %ax,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edi
		shl    $0x2,%eax
		add    %eax,%edi
		xor    %edx,%edx
		mov    %edi,%eax
	jump_64e6c:
		mov    0x4(%eax),%ebx
		movswl %si,%ecx
		sar    $0x10,%ebx
		neg    %ecx
		cmp    %ecx,%ebx
		je     jump_64e8d
		cmpw   $0x0,0x6(%eax)
		jne    jump_64e46
		neg    %esi
		mov    %si,0x6(%eax)
		movb   $0x40,0xe(%edx,%edi,1)
	jump_64e8d:
		mov    0x8(%esp),%eax
		mov    0x8(%esp),%esi
		mov    0x9e(%eax),%ax
		mov    0xa4(%esi),%si
		test   %ax,%ax
		je     jump_64ee7
		test   %si,%si
		jne    jump_64eba
		jmp    jump_64ee7
	jump_64eaf:
		inc    %edx
		add    $0x2,%eax
		cmp    $0x4,%edx
		jl     jump_64ed2
		jmp    jump_64ee7
	jump_64eba:
		movswl %ax,%edx
		lea    0x0(,%edx,8),%eax
		add    %eax,%edx
		mov    EXPORT_SYMBOL(game_traffic_nodes),%eax
		shl    $0x2,%edx
		add    %edx,%eax
		xor    %edx,%edx
	jump_64ed2:
		mov    0x4(%eax),%ecx
		movswl %si,%ebx
		sar    $0x10,%ecx
		neg    %ebx
		cmp    %ebx,%ecx
		jne    jump_64eaf
		movw   $0x0,0x6(%eax)
	jump_64ee7:
		mov    0x8(%esp),%eax
		mov    0x8(%esp),%esi
		mov    0xa2(%eax),%ax
		mov    0xa0(%esi),%si
		test   %ax,%ax
		je     jump_64f41
		test   %si,%si
		jne    jump_64f14
		jmp    jump_64f41
	jump_64f09:
		inc    %edx
		add    $0x2,%eax
		cmp    $0x4,%edx
		jl     jump_64f2c
		jmp    jump_64f41
	jump_64f14:
		movswl %ax,%edx
		lea    0x0(,%edx,8),%eax
		add    %eax,%edx
		mov    EXPORT_SYMBOL(game_traffic_nodes),%eax
		shl    $0x2,%edx
		add    %edx,%eax
		xor    %edx,%edx
	jump_64f2c:
		mov    0x4(%eax),%ecx
		movswl %si,%ebx
		sar    $0x10,%ecx
		neg    %ebx
		cmp    %ebx,%ecx
		jne    jump_64f09
		movw   $0x0,0x6(%eax)
	jump_64f41:
		mov    0x8(%esp),%edx
		xor    %eax,%eax
		mov    0x8(%edx),%al
		cmp    $0x14,%eax
		je     jump_64f62
		cmp    $0x1d,%eax
		je     jump_64f62
		cmp    $0x1c,%eax
		je     jump_64f62
		cmp    $0x15,%eax
		jne    jump_650da
	jump_64f62:
		mov    0x8(%esp),%esi
		mov    0x16(%esi),%di
		mov    $0x2,%ebp
	jump_64f6f:
		mov    %edi,%ebx
		mov    0x4c(%esi),%di
		test   %di,%di
		je     jump_6501e
		movswl %di,%eax
		test   %eax,%eax
		jle    jump_64fa0
		imul   $0xa8,%eax,%edx
		mov    things,%esi
		add    %edx,%esi
		mov    0xc(%esi),%edx
		test   %edx,%ebp
		jne    jump_6501e
		jmp    jump_64ff4
	jump_64fa0:
		mov    0x8(%esp),%edx
		xor    %eax,%eax
		mov    0x8(%edx),%al
		cmp    $0x15,%eax
		jne    jump_6501e
		mov    $0x1,%ebp
		mov    $0x24,%esi
		jmp    jump_64fc2
	jump_64fbe:
		add    $0x24,%esi
		inc    %ebp
	jump_64fc2:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(next_traffic_node),%ax
		cmp    %eax,%ebp
		jge    jump_6501e
		mov    %esi,%ecx
		xor    %eax,%eax
		jmp    jump_64fdc
	jump_64fd4:
		add    $0x2,%eax
		cmp    $0x8,%eax
		je     jump_64fbe
	jump_64fdc:
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edx
		add    %ecx,%edx
		add    %eax,%edx
		cmp    0x6(%edx),%bx
		jne    jump_64fd4
		movw   $0x0,0x6(%edx)
		jmp    jump_64fd4
	jump_64ff4:
		mov    0xa(%esp),%ecx
		mov    %edx,%ebx
		mov    0xe(%esp),%edx
		or     %ebp,%ebx
		sar    $0x10,%ecx
		mov    %ebx,0xc(%esi)
		mov    0x16(%esp),%ebx
		sar    $0x10,%edx
		sar    $0x10,%ebx
		call   ac_explode_thing_building
		movb   $0x37,0x9(%esi)
		jmp    jump_64f6f
	jump_6501e:
		mov    0x8(%esp),%esi
		mov    0x16(%esi),%di
		mov    $0x2,%ebp
	jump_6502b:
		mov    %edi,%ecx
		mov    0x4e(%esi),%di
		test   %di,%di
		je     jump_650da
		movswl %di,%eax
		test   %eax,%eax
		jle    jump_6505c
		imul   $0xa8,%eax,%esi
		mov    things,%edx
		add    %edx,%esi
		mov    0xc(%esi),%ecx
		test   %ecx,%ebp
		jne    jump_650da
		jmp    jump_650b0
	jump_6505c:
		mov    0x8(%esp),%edx
		xor    %eax,%eax
		mov    0x8(%edx),%al
		cmp    $0x15,%eax
		jne    jump_650da
		mov    $0x1,%ebp
		mov    $0x24,%esi
		jmp    jump_6507e
	jump_6507a:
		add    $0x24,%esi
		inc    %ebp
	jump_6507e:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(next_traffic_node),%ax
		cmp    %eax,%ebp
		jge    jump_650da
		mov    %esi,%ebx
		xor    %eax,%eax
		jmp    jump_65098
	jump_65090:
		add    $0x2,%eax
		cmp    $0x8,%eax
		je     jump_6507a
	jump_65098:
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edx
		add    %ebx,%edx
		add    %eax,%edx
		cmp    0x6(%edx),%cx
		jne    jump_65090
		movw   $0x0,0x6(%edx)
		jmp    jump_65090
	jump_650b0:
		mov    0x16(%esp),%ebx
		mov    %ecx,%edx
		mov    0xa(%esp),%ecx
		or     %ebp,%edx
		sar    $0x10,%ebx
		mov    %edx,0xc(%esi)
		mov    0xe(%esp),%edx
		sar    $0x10,%ecx
		sar    $0x10,%edx
		call   ac_explode_thing_building
		movb   $0x37,0x9(%esi)
		jmp    jump_6502b
	jump_650da:
		mov    0x8(%esp),%edx
		xor    %eax,%eax
		mov    0x8(%edx),%al
		cmp    $0x2f,%eax
		je     jump_650ed
		jmp    jump_651c6
	jump_650ed:
		mov    0x18(%edx),%eax
		mov    0x20(%edx),%edx
		sar    $0x10,%edx
		sar    $0x10,%eax
		mov    %edx,(%esp)
		lea    -0x8(%eax),%edx
		add    $0x8,%eax
		mov    %edx,0x14(%esp)
		mov    %eax,0x4(%esp)
		xor    %ebp,%ebp
	jump_6510c:
		mov    0x14(%esp),%ecx
		cmp    %ecx,%ebp
		jg     jump_65120
		cmp    $0x7f,%ecx
		jle    jump_65136
		jmp    jump_65120
	jump_6511b:
		inc    %ebx
		cmp    %esi,%ebx
		jle    jump_65142
	jump_65120:
		mov    0x14(%esp),%edi
		inc    %edi
		mov    0x4(%esp),%edx
		mov    %edi,0x14(%esp)
		cmp    %edx,%edi
		jle    jump_6510c
		jmp    jump_651c6
	jump_65136:
		mov    (%esp),%ebx
		mov    (%esp),%esi
		sub    $0x8,%ebx
		add    $0x8,%esi
	jump_65142:
		mov    %ebx,%edi
		test   %ebx,%ebx
		jl     jump_6511b
		cmp    $0x7f,%ebx
		jg     jump_6511b
		mov    %ebx,%eax
		shl    $0x7,%eax
		add    %ecx,%eax
		imul   $0x12,%eax,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0x6(%edx,%eax,1),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		je     jump_6511b
	jump_65168:
		jle    jump_651ad
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x9(%eax),%dl
		cmp    $0x9,%edx
		jne    jump_651a9
		xor    %edx,%edx
		mov    0x8(%eax),%dl
		cmp    $0x1c,%edx
		jne    jump_651a9
		testb  $0x2,0xc(%eax)
		jne    jump_651a9
		mov    %edi,%ebx
		mov    %ecx,%esi
		xor    %edx,%edx
		shl    $0x8,%ebx
		shl    $0x8,%esi
		mov    %eax,%ecx
		mov    %esi,%eax
		call   ac_collapse_building
		jmp    jump_651c6
	jump_651a9:
		mov    (%eax),%eax
		jmp    jump_651ba
	jump_651ad:
		jge    jump_651bd
		imul   $0x3c,%eax,%edx
		mov    EXPORT_SYMBOL(sthings),%eax
		mov    (%edx,%eax,1),%eax
	jump_651ba:
		sar    $0x10,%eax
	jump_651bd:
		test   %eax,%eax
		jne    jump_65168
		jmp    jump_6511b
	jump_651c6:
		mov    0x8(%esp),%eax
		testb  $0x2,0xc(%eax)
		jne    jump_6529e
		mov    0x50(%eax),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    game_objects,%edx
		testb  $0x1,0x1d(%edx,%eax,4)
		je     jump_651fd
		xor    %eax,%eax
		mov    current_map,%ax
		cmp    $0x9,%eax
		jne    jump_65268
	jump_651fd:
		mov    0x8(%esp),%edx
		mov    0x8(%esp),%eax
		mov    $0x3,%ebx
		mov    0x20(%edx),%edx
		mov    0x18(%eax),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		xor    %esi,%esi
		call   ac_quick_crater
		mov    $0x41,%edi
		xor    %ebp,%ebp
	jump_65224:
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		mov    0xc(%esp),%ebx
		and    $0xffff,%eax
		add    %ebx,%eax
		shl    $0x8,%eax
		lea    -0x7f00(%eax),%ebx
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		mov    0x10(%esp),%ecx
		and    $0xffff,%eax
		add    %ecx,%eax
		mov    %ebp,%edx
		shl    $0x8,%eax
		mov    %edi,%ecx
		sub    $0x7f00,%eax
		inc    %esi
		call   ac_bang_new4
		cmp    $0x20,%esi
		jl     jump_65224
	jump_65268:
		mov    0x8(%esp),%eax
		mov    0xa(%esp),%ecx
		mov    0xe(%esp),%edx
		mov    0xc(%eax),%bh
		sar    $0x10,%ecx
		or     $0x2,%bh
		sar    $0x10,%edx
		mov    %bh,0xc(%eax)
		mov    0x16(%esp),%ebx
		mov    0x1a(%esp),%eax
		sar    $0x10,%ebx
		sar    $0x10,%eax
		call   ac_explode_thing_building
		mov    0x8(%esp),%eax
		movb   $0x37,0x9(%eax)
	jump_6529e:
		add    $0x20,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
do_explode:	/* 0x0652A8 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		sub    $0x1c,%esp
		mov    %ax,0x4(%esp)
		mov    %dx,0x18(%esp)
		mov    %bx,0x8(%esp)
		xor    %eax,%eax
		mov    current_map,%ax
		cmp    $0xb,%eax
		jne    jump_652f4
		mov    engn_xc,%eax
		sar    $0x8,%eax
		mov    %eax,unkn01_pos_x
		mov    engn_zc,%eax
		mov    $0x32,%edx
		sar    $0x8,%eax
		mov    %edx,unkn01_downcount
		mov    %eax,unkn01_pos_y
		jmp    jump_65434
	jump_652f4:
		mov    0x2(%esp),%eax
		sar    $0x10,%eax
		sar    $0x8,%eax
		mov    %ax,0xc(%esp)
		mov    0x6(%esp),%eax
		sar    $0x10,%eax
		mov    $0xfffffffc,%edx
		sar    $0x8,%eax
		mov    %dx,(%esp)
		mov    %ax,0x14(%esp)
		jmp    jump_65321
	jump_6531d:
		incw   (%esp)
	jump_65321:
		mov    -0x2(%esp),%eax
		sar    $0x10,%eax
		cmp    $0x4,%eax
		jge    jump_65434
		movw   $0xfffc,0x10(%esp)
		jmp    jump_6537f
	jump_6533a:
		mov    0x2(%eax),%si
		jmp    jump_65375
	jump_65340:
		jge    jump_65375
		imul   $0x3c,%eax,%esi
		mov    EXPORT_SYMBOL(sthings),%edx
		add    %edx,%esi
		xor    %edx,%edx
		mov    0x9(%esi),%dl
		cmp    $0x9,%edx
		jne    jump_65371
		mov    0x6(%esp),%ecx
		mov    0x16(%esp),%ebx
		mov    0x2(%esp),%edx
		sar    $0x10,%ecx
		sar    $0x10,%ebx
		sar    $0x10,%edx
		call   explode_thing_object
	jump_65371:
		mov    0x2(%esi),%si
	jump_65375:
		test   %si,%si
		jne    jump_653d3
	jump_6537a:
		incw   0x10(%esp)
	jump_6537f:
		mov    0xe(%esp),%eax
		sar    $0x10,%eax
		cmp    $0x4,%eax
		jge    jump_6531d
		mov    0xa(%esp),%edx
		mov    -0x2(%esp),%ebx
		sar    $0x10,%edx
		sar    $0x10,%ebx
		add    %ebx,%edx
		test   %edx,%edx
		jle    jump_6537a
		cmp    $0x80,%edx
		jge    jump_6537a
		mov    0x12(%esp),%ebx
		sar    $0x10,%ebx
		add    %ebx,%eax
		test   %eax,%eax
		jle    jump_6537a
		cmp    $0x80,%eax
		jge    jump_6537a
		shl    $0x7,%eax
		add    %edx,%eax
		imul   $0x12,%eax,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%esi
		mov    0x8(%esi,%eax,1),%si
		test   %si,%si
		je     jump_6537a
	jump_653d3:
		movswl %si,%eax
		test   %eax,%eax
		jle    jump_65340
		imul   $0xa8,%eax,%edx
		mov    things,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x9(%eax),%dl
		cmp    $0x9,%edx
		jne    jump_6533a
		testb  $0x2,0xc(%eax)
		jne    jump_6533a
		xor    %edx,%edx
		mov    0x8(%eax),%dl
		cmp    $0x20,%edx
		je     jump_6533a
		mov    0x6(%esp),%ebx
		mov    0x16(%esp),%edx
		mov    0x2(%esp),%edi
		mov    %eax,%ecx
		sar    $0x10,%ebx
		sar    $0x10,%edi
		sar    $0x10,%edx
		mov    %edi,%eax
		call   ac_collapse_building
		jmp    jump_65375
	jump_65434:
		add    $0x1c,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret

vtable_654b0:
		.long   func_6554a
		.long   func_65933
		.long   func_65db6
		.long   func_663c6
		.long   func_66c2c
		.long   func_6700f


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_animate_explode)	/* 0x0654C8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xa8,%esp
		mov    data_1aa5e4,%ebp
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(dont_bother_with_explode_faces),%ebx
		mov    %edx,0x60(%esp)
		test   %ebx,%ebx
		je     jump_65540
	jump_654ea:
		mov    EXPORT_SYMBOL(dword_1AA5C8),%eax
		cmp    EXPORT_SYMBOL(dword_1AA5C4),%eax
		je     jump_674f7
		xor    %ecx,%ecx
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    data_1aa3c7(,%eax,4),%cl
		mov    data_1aa3c6(,%eax,4),%bl
		mov    data_1aa3c5(,%eax,4),%dl
		mov    redo_scanner(,%eax,4),%al
		and    $0xff,%eax
		call   SCANNER_fill_in_a_little_bit
		mov    EXPORT_SYMBOL(dword_1AA5C8),%edi
		inc    %edi
		mov    %edi,%eax
		mov    %edi,EXPORT_SYMBOL(dword_1AA5C8)
		and    $0x7f,%eax
		mov    %eax,EXPORT_SYMBOL(dword_1AA5C8)
		jmp    jump_654ea
	jump_65540:
		mov    $0x1,%edi
		jmp    jump_6748d


/*----------------------------------------------------------------*/
func_6554a:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    %di,%ax
		add    %eax,%eax
		and    $0xf,%eax
		shl    $0x4,%eax
		mov    EXPORT_SYMBOL(lbSinTable)+160(%eax),%eax
		mov    %eax,data_1aa5d8
		xor    %eax,%eax
		mov    %di,%ax
		add    %eax,%eax
		and    $0xf,%eax
		shl    $0x4,%eax
		mov    EXPORT_SYMBOL(lbSinTable)+2208(%eax),%eax
		mov    %eax,data_1aa5dc
		mov    %edi,%eax
		xor    %ah,%ah
		and    $0x7,%al
		and    $0xffff,%eax
		shl    $0x4,%eax
		mov    EXPORT_SYMBOL(lbSinTable)+80(%eax),%eax
		mov    %eax,data_1aa5e0
		mov    %edi,%eax
		xor    %ah,%ah
		and    $0x7,%al
		movzwl %ax,%ebp
		shl    $0x4,%ebp
		mov    EXPORT_SYMBOL(lbSinTable)+2128(%ebp),%ebp
		mov    %edx,%ebx
		mov    %ebp,data_1aa5e4
		dec    %bx
		mov    %bx,0x20(%esi)
		jne    jump_65605
		xor    %eax,%eax
		mov    %di,%ax
		imul   $0x2e,%eax,%edx
		mov    data_1aa5cc,%bx
		mov    %bx,data_18194e(%edx)
		imul   $0x2e,%eax,%edx
		xor    %ebx,%ebx
		mov    %bx,data_18196c(%edx)
		mov    $0x23,%ecx
		mov    0x24(%esi),%ebx
		mov    0x22(%esi),%edx
		mov    0x20(%esi),%eax
		sar    $0x10,%ebx
		sar    $0x10,%edx
		sar    $0x10,%eax
		shl    $0x8,%ebx
		shl    $0x8,%eax
		mov    %di,data_1aa5cc
		call   ac_bang_new4
		jmp    jump_67486
	jump_65605:
		movsbw 0x28(%esi),%ax
		mov    0x22(%esi),%cx
		mov    0x24(%esi),%dx
		add    %eax,%ecx
		movsbw 0x29(%esi),%ax
		mov    0x26(%esi),%bx
		add    %eax,%edx
		movsbw 0x2a(%esi),%ax
		mov    %cx,0x22(%esi)
		add    %eax,%ebx
		mov    0x20(%esi),%eax
		mov    %dx,0x24(%esi)
		sar    $0x10,%eax
		mov    %bx,0x26(%esi)
		test   %eax,%eax
		jl     jump_65649
		mov    0x20(%esi),%eax
		sar    $0x10,%eax
		cmp    $0x8000,%eax
		jl     jump_65696
	jump_65649:
		xor    %eax,%eax
		mov    %di,%ax
		imul   $0x2e,%eax,%eax
		mov    data_1aa5cc,%bx
		mov    %bx,data_18194e(%eax)
		xor    %ebx,%ebx
		mov    %bx,data_18196c(%eax)
		mov    $0x23,%ecx
		mov    0x24(%esi),%ebx
		mov    0x22(%esi),%edx
		mov    0x20(%esi),%eax
		sar    $0x10,%ebx
		sar    $0x10,%edx
		sar    $0x10,%eax
		shl    $0x8,%ebx
		shl    $0x8,%eax
		mov    %di,data_1aa5cc
		call   ac_bang_new4
		jmp    jump_67486
	jump_65696:
		mov    0x22(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jl     jump_656ad
		mov    0x22(%esi),%eax
		sar    $0x10,%eax
		cmp    $0x8000,%eax
		jle    jump_656de
	jump_656ad:
		xor    %eax,%eax
		mov    %di,%ax
		imul   $0x2e,%eax,%eax
		mov    data_1aa5cc,%bx
		mov    %ebp,data_1aa5e4
		xor    %esi,%esi
		mov    %bx,data_18194e(%eax)
		mov    %di,data_1aa5cc
		mov    %si,data_18196c(%eax)
		jmp    jump_67486
	jump_656de:
		mov    0x26(%esi),%eax
		sar    $0x18,%eax
		test   %eax,%eax
		jge    jump_65751
		mov    0x22(%esi),%edx
		mov    0x6(%esi),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		add    %edx,%eax
		test   %eax,%eax
		jl     jump_6571e
		mov    0x22(%esi),%edx
		mov    0xc(%esi),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		add    %edx,%eax
		test   %eax,%eax
		jl     jump_6571e
		mov    0x22(%esi),%edx
		mov    0x12(%esi),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		add    %edx,%eax
		test   %eax,%eax
		jge    jump_65751
	jump_6571e:
		movsbw 0x29(%esi),%ax
		mov    0x24(%esi),%cx
		sub    %eax,%ecx
		mov    0x26(%esi),%eax
		sar    $0x18,%eax
		imul   $0xc8,%eax,%eax
		sar    $0x8,%eax
		neg    %eax
		mov    %al,0x29(%esi)
		mov    0x1e(%esi),%eax
		sar    $0x10,%eax
		mov    %cx,0x24(%esi)
		test   %eax,%eax
		jge    jump_65751
		movw   $0xa,0x20(%esi)
	jump_65751:
		mov    0x29(%esi),%bl
		mov    0x4(%esi),%eax
		sub    $0xa,%bl
		sar    $0x10,%eax
		mov    %bl,0x29(%esi)
		mov    %eax,0x14(%esp)
		mov    0x6(%esi),%eax
		sar    $0x10,%eax
		mov    %eax,0x18(%esp)
		mov    0x8(%esi),%eax
		sar    $0x10,%eax
		mov    0x14(%esp),%edx
		mov    %eax,0x1c(%esp)
		imul   data_1aa5dc,%edx
		mov    data_1aa5d8,%ebx
		mov    0x1c(%esp),%eax
		imul   %ebx,%eax
		sub    %eax,%edx
		sar    $0x10,%edx
		mov    %edx,(%esp)
		mov    0x14(%esp),%edx
		imul   %ebx,%edx
		mov    0x1c(%esp),%eax
		imul   data_1aa5dc,%eax
		add    %edx,%eax
		mov    0x18(%esp),%edx
		imul   %ebp,%edx
		mov    data_1aa5e0,%ebx
		sar    $0x10,%eax
		imul   %eax,%ebx
		imul   %ebp,%eax
		sub    %ebx,%edx
		sar    $0x10,%edx
		mov    data_1aa5e0,%ecx
		mov    %edx,0x4(%esp)
		mov    0x18(%esp),%edx
		imul   %ecx,%edx
		add    %eax,%edx
		sar    $0x10,%edx
		mov    (%esp),%eax
		mov    %edx,0x1c(%esp)
		mov    %ax,0x6(%esi)
		mov    0x4(%esp),%eax
		mov    %ax,0x8(%esi)
		mov    0x1c(%esp),%eax
		mov    %ax,0xa(%esi)
		mov    0xa(%esi),%eax
		sar    $0x10,%eax
		mov    %eax,0x14(%esp)
		mov    0xc(%esi),%eax
		sar    $0x10,%eax
		mov    %eax,0x18(%esp)
		mov    0xe(%esi),%eax
		sar    $0x10,%eax
		mov    data_1aa5dc,%edx
		mov    %eax,0x1c(%esp)
		mov    0x14(%esp),%eax
		imul   %edx,%eax
		mov    data_1aa5d8,%ebx
		mov    0x1c(%esp),%edx
		imul   %ebx,%edx
		sub    %edx,%eax
		sar    $0x10,%eax
		mov    %eax,(%esp)
		mov    0x14(%esp),%eax
		imul   %ebx,%eax
		mov    0x1c(%esp),%edx
		imul   data_1aa5dc,%edx
		mov    0x18(%esp),%ebx
		imul   %ebp,%ebx
		add    %edx,%eax
		sar    $0x10,%eax
		mov    %ecx,%edx
		imul   %eax,%edx
		imul   %ebp,%eax
		sub    %edx,%ebx
		mov    %ebx,%edx
		sar    $0x10,%edx
		mov    %edx,0x4(%esp)
		mov    0x18(%esp),%edx
		imul   %ecx,%edx
		add    %edx,%eax
		sar    $0x10,%eax
		mov    %eax,0x1c(%esp)
		mov    (%esp),%eax
		mov    %ax,0xc(%esi)
		mov    0x4(%esp),%eax
		mov    %ax,0xe(%esi)
		mov    0x1c(%esp),%eax
		mov    %ax,0x10(%esi)
		mov    0x10(%esi),%eax
		sar    $0x10,%eax
		mov    %eax,0x14(%esp)
		mov    0x12(%esi),%eax
		sar    $0x10,%eax
		mov    %eax,0x18(%esp)
		mov    0x14(%esi),%eax
		sar    $0x10,%eax
		mov    data_1aa5dc,%edx
		mov    %eax,0x1c(%esp)
		mov    0x14(%esp),%eax
		imul   %edx,%eax
		mov    data_1aa5d8,%ebx
		mov    0x1c(%esp),%edx
		imul   %ebx,%edx
		sub    %edx,%eax
		mov    0x14(%esp),%edx
		imul   %ebx,%edx
		sar    $0x10,%eax
		mov    %eax,(%esp)
		mov    0x1c(%esp),%eax
		imul   data_1aa5dc,%eax
		mov    0x18(%esp),%ebx
		imul   %ebp,%ebx
		add    %edx,%eax
		sar    $0x10,%eax
		mov    %ecx,%edx
		imul   %eax,%edx
		imul   %ebp,%eax
		sub    %edx,%ebx
		mov    %ebx,%edx
		sar    $0x10,%edx
		mov    %edx,0x4(%esp)
		mov    0x18(%esp),%edx
		imul   %ecx,%edx
		add    %edx,%eax
		sar    $0x10,%eax
		mov    %eax,0x1c(%esp)
		mov    (%esp),%eax
		mov    %ax,0x12(%esi)
		mov    0x4(%esp),%eax
		mov    %ax,0x14(%esi)
		mov    0x1c(%esp),%eax
		mov    %ebp,data_1aa5e4
		mov    %ax,0x16(%esi)
		jmp    jump_67486


/*----------------------------------------------------------------*/
func_65933:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    %di,%ax
		add    %eax,%eax
		and    $0xf,%eax
		shl    $0x4,%eax
		mov    EXPORT_SYMBOL(lbSinTable)+160(%eax),%eax
		mov    %eax,data_1aa5d8
		xor    %eax,%eax
		mov    %di,%ax
		add    %eax,%eax
		and    $0xf,%eax
		shl    $0x4,%eax
		mov    EXPORT_SYMBOL(lbSinTable)+2208(%eax),%eax
		mov    %eax,data_1aa5dc
		mov    %edi,%eax
		xor    %ah,%ah
		and    $0x7,%al
		and    $0xffff,%eax
		shl    $0x4,%eax
		mov    EXPORT_SYMBOL(lbSinTable)+80(%eax),%eax
		mov    %eax,data_1aa5e0
		mov    %edi,%eax
		xor    %ah,%ah
		and    $0x7,%al
		and    $0xffff,%eax
		shl    $0x4,%eax
		mov    EXPORT_SYMBOL(lbSinTable)+2128(%eax),%ebp
		mov    %edx,%ebx
		mov    %ebp,data_1aa5e4
		dec    %bx
		mov    %bx,0x20(%esi)
		jne    jump_659f0
		xor    %eax,%eax
		mov    %di,%ax
		imul   $0x2e,%eax,%edx
		mov    data_1aa5cc,%bx
		mov    %bx,data_18194e(%edx)
		imul   $0x2e,%eax,%edx
		xor    %ebx,%ebx
		mov    %bx,data_18196c(%edx)
		mov    $0x23,%ecx
		mov    0x24(%esi),%ebx
		mov    0x22(%esi),%edx
		mov    0x20(%esi),%eax
		sar    $0x10,%ebx
		sar    $0x10,%edx
		sar    $0x10,%eax
		shl    $0x8,%ebx
		shl    $0x8,%eax
		mov    %di,data_1aa5cc
		call   ac_bang_new4
		jmp    jump_67486
	jump_659f0:
		movsbw 0x28(%esi),%ax
		mov    0x22(%esi),%cx
		mov    0x24(%esi),%dx
		add    %eax,%ecx
		movsbw 0x29(%esi),%ax
		mov    0x26(%esi),%bx
		add    %eax,%edx
		movsbw 0x2a(%esi),%ax
		mov    %cx,0x22(%esi)
		add    %eax,%ebx
		mov    0x20(%esi),%eax
		mov    %dx,0x24(%esi)
		sar    $0x10,%eax
		mov    %bx,0x26(%esi)
		test   %eax,%eax
		jl     jump_65a34
		mov    0x20(%esi),%eax
		sar    $0x10,%eax
		cmp    $0x8000,%eax
		jl     jump_65a6b
	jump_65a34:
		xor    %eax,%eax
		mov    %di,%ax
		imul   $0x2e,%eax,%eax
		mov    data_1aa5cc,%dx
		movw   $0x0,0x20(%esi)
		mov    %ebp,data_1aa5e4
		mov    %dx,data_18194e(%eax)
		xor    %edx,%edx
		mov    %di,data_1aa5cc
		mov    %dx,data_18196c(%eax)
		jmp    jump_67486
	jump_65a6b:
		mov    0x22(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jl     jump_65a82
		mov    0x22(%esi),%eax
		sar    $0x10,%eax
		cmp    $0x8000,%eax
		jle    jump_65ab9
	jump_65a82:
		xor    %eax,%eax
		mov    %di,%ax
		imul   $0x2e,%eax,%eax
		mov    data_1aa5cc,%bx
		mov    %ebp,data_1aa5e4
		movw   $0x0,0x20(%esi)
		xor    %esi,%esi
		mov    %bx,data_18194e(%eax)
		mov    %di,data_1aa5cc
		mov    %si,data_18196c(%eax)
		jmp    jump_67486
	jump_65ab9:
		mov    0x26(%esi),%eax
		sar    $0x18,%eax
		test   %eax,%eax
		jge    jump_65b42
		mov    0x22(%esi),%eax
		mov    0x6(%esi),%edx
		sar    $0x10,%eax
		sar    $0x10,%edx
		add    %edx,%eax
		test   %eax,%eax
		jl     jump_65b0f
		mov    0x22(%esi),%edx
		mov    0xc(%esi),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		add    %edx,%eax
		test   %eax,%eax
		jl     jump_65b0f
		mov    0x22(%esi),%eax
		mov    0x12(%esi),%edx
		sar    $0x10,%eax
		sar    $0x10,%edx
		add    %edx,%eax
		test   %eax,%eax
		jl     jump_65b0f
		mov    0x22(%esi),%eax
		mov    0x18(%esi),%edx
		sar    $0x10,%eax
		sar    $0x10,%edx
		add    %edx,%eax
		test   %eax,%eax
		jge    jump_65b42
	jump_65b0f:
		movsbw 0x29(%esi),%ax
		mov    0x24(%esi),%cx
		sub    %eax,%ecx
		mov    0x26(%esi),%eax
		sar    $0x18,%eax
		imul   $0xc8,%eax,%eax
		sar    $0x8,%eax
		neg    %eax
		mov    %al,0x29(%esi)
		mov    0x1e(%esi),%eax
		sar    $0x10,%eax
		mov    %cx,0x24(%esi)
		test   %eax,%eax
		jge    jump_65b42
		movw   $0xa,0x20(%esi)
	jump_65b42:
		mov    0x29(%esi),%dh
		mov    0x4(%esi),%eax
		sub    $0xa,%dh
		sar    $0x10,%eax
		mov    %dh,0x29(%esi)
		mov    %eax,0x14(%esp)
		mov    0x6(%esi),%eax
		sar    $0x10,%eax
		mov    %eax,0x18(%esp)
		mov    0x8(%esi),%eax
		sar    $0x10,%eax
		mov    0x14(%esp),%edx
		mov    %eax,0x1c(%esp)
		imul   data_1aa5dc,%edx
		mov    data_1aa5d8,%ebx
		mov    0x1c(%esp),%eax
		imul   %ebx,%eax
		sub    %eax,%edx
		sar    $0x10,%edx
		mov    %edx,(%esp)
		mov    0x14(%esp),%edx
		imul   %ebx,%edx
		mov    0x1c(%esp),%eax
		imul   data_1aa5dc,%eax
		mov    0x18(%esp),%ebx
		imul   %ebp,%ebx
		add    %edx,%eax
		mov    data_1aa5e0,%edx
		sar    $0x10,%eax
		imul   %eax,%edx
		imul   %ebp,%eax
		mov    data_1aa5e0,%ecx
		sub    %edx,%ebx
		mov    0x18(%esp),%edx
		imul   %ecx,%edx
		add    %edx,%eax
		sar    $0x10,%ebx
		sar    $0x10,%eax
		mov    %ebx,0x4(%esp)
		mov    %eax,0x1c(%esp)
		mov    (%esp),%eax
		mov    %ax,0x6(%esi)
		mov    0x4(%esp),%eax
		mov    %ax,0x8(%esi)
		mov    0x1c(%esp),%eax
		mov    %ax,0xa(%esi)
		mov    0xa(%esi),%eax
		sar    $0x10,%eax
		mov    %eax,0x14(%esp)
		mov    0xc(%esi),%eax
		sar    $0x10,%eax
		mov    %eax,0x18(%esp)
		mov    0xe(%esi),%eax
		sar    $0x10,%eax
		mov    0x14(%esp),%edx
		mov    %eax,0x1c(%esp)
		imul   data_1aa5dc,%edx
		mov    data_1aa5d8,%ebx
		mov    0x1c(%esp),%eax
		imul   %ebx,%eax
		sub    %eax,%edx
		mov    %edx,%eax
		sar    $0x10,%eax
		mov    %eax,(%esp)
		mov    0x14(%esp),%eax
		imul   %ebx,%eax
		mov    0x1c(%esp),%edx
		imul   data_1aa5dc,%edx
		mov    0x18(%esp),%ebx
		imul   %ebp,%ebx
		add    %edx,%eax
		sar    $0x10,%eax
		mov    %ecx,%edx
		imul   %eax,%edx
		imul   %ebp,%eax
		sub    %edx,%ebx
		mov    0x18(%esp),%edx
		imul   %ecx,%edx
		add    %edx,%eax
		sar    $0x10,%ebx
		sar    $0x10,%eax
		mov    %ebx,0x4(%esp)
		mov    %eax,0x1c(%esp)
		mov    (%esp),%eax
		mov    %ax,0xc(%esi)
		mov    0x4(%esp),%eax
		mov    %ax,0xe(%esi)
		mov    0x1c(%esp),%eax
		mov    %ax,0x10(%esi)
		mov    0x10(%esi),%eax
		sar    $0x10,%eax
		mov    %eax,0x14(%esp)
		mov    0x12(%esi),%eax
		sar    $0x10,%eax
		mov    %eax,0x18(%esp)
		mov    0x14(%esi),%eax
		sar    $0x10,%eax
		mov    %eax,0x1c(%esp)
		mov    0x14(%esp),%edx
		imul   data_1aa5dc,%edx
		mov    data_1aa5d8,%ebx
		mov    0x1c(%esp),%eax
		imul   %ebx,%eax
		sub    %eax,%edx
		mov    %edx,%eax
		sar    $0x10,%eax
		mov    %eax,(%esp)
		mov    0x14(%esp),%eax
		imul   %ebx,%eax
		mov    0x1c(%esp),%edx
		imul   data_1aa5dc,%edx
		add    %edx,%eax
		mov    0x18(%esp),%edx
		imul   %ebp,%edx
		mov    %ecx,%ebx
		sar    $0x10,%eax
		imul   %eax,%ebx
		imul   %ebp,%eax
		sub    %ebx,%edx
		sar    $0x10,%edx
		mov    %edx,0x4(%esp)
		mov    0x18(%esp),%edx
		imul   %ecx,%edx
		add    %edx,%eax
		sar    $0x10,%eax
		mov    %eax,0x1c(%esp)
		mov    (%esp),%eax
		mov    %ax,0x12(%esi)
		mov    0x4(%esp),%eax
		mov    %ax,0x14(%esi)
		mov    0x1c(%esp),%eax
		mov    %ax,0x16(%esi)
		mov    0x16(%esi),%eax
		sar    $0x10,%eax
		mov    %eax,0x14(%esp)
		mov    0x18(%esi),%eax
		sar    $0x10,%eax
		mov    %eax,0x18(%esp)
		mov    0x1a(%esi),%eax
		sar    $0x10,%eax
		mov    0x14(%esp),%edx
		mov    %eax,0x1c(%esp)
		imul   data_1aa5dc,%edx
		mov    data_1aa5d8,%ebx
		mov    0x1c(%esp),%eax
		imul   %ebx,%eax
		sub    %eax,%edx
		sar    $0x10,%edx
		mov    %edx,(%esp)
		mov    0x14(%esp),%edx
		imul   %ebx,%edx
		mov    0x1c(%esp),%eax
		imul   data_1aa5dc,%eax
		mov    0x18(%esp),%ebx
		imul   %ebp,%ebx
		add    %edx,%eax
		sar    $0x10,%eax
		mov    %ecx,%edx
		imul   %eax,%edx
		imul   %ebp,%eax
		sub    %edx,%ebx
		mov    %ebx,%edx
		sar    $0x10,%edx
		mov    %edx,0x4(%esp)
		mov    0x18(%esp),%edx
		imul   %ecx,%edx
		add    %edx,%eax
		sar    $0x10,%eax
		mov    %eax,0x1c(%esp)
		mov    (%esp),%eax
		mov    %ax,0x18(%esi)
		mov    0x4(%esp),%eax
		mov    %ax,0x1a(%esi)
		mov    0x1c(%esp),%eax
		mov    %ebp,data_1aa5e4
		mov    %ax,0x1c(%esi)
		jmp    jump_67486


/*----------------------------------------------------------------*/
func_65db6:
/*----------------------------------------------------------------*/
		mov    0x8(%esi),%edx
		mov    0x4(%esi),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		call   ac_alt_at_point
		mov    %eax,%ebx
		mov    0x6(%esi),%eax
		sar    $0x5,%ebx
		sar    $0x10,%eax
		cmp    %ebx,%eax
		jl     jump_65dee
		mov    0xc(%esi),%eax
		sar    $0x10,%eax
		cmp    %ebx,%eax
		jl     jump_65dee
		mov    0x12(%esi),%eax
		sar    $0x10,%eax
		cmp    %ebx,%eax
		jge    jump_662be
	jump_65dee:
		mov    0xa(%esi),%edx
		mov    0x4(%esi),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		sub    %eax,%edx
		mov    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ecx
		mov    0x10(%esi),%eax
		sar    $0x10,%eax
		mov    %eax,0x30(%esp)
		mov    0x4(%esi),%eax
		mov    0x30(%esp),%edx
		sar    $0x10,%eax
		sub    %eax,%edx
		mov    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    0xc(%esi),%edx
		add    %eax,%ecx
		mov    0x6(%esi),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		sub    %eax,%edx
		mov    %edx,%eax
		mov    %ecx,0x28(%esp)
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ecx
		mov    0x12(%esi),%eax
		sar    $0x10,%eax
		mov    %eax,0x30(%esp)
		mov    0x6(%esi),%eax
		mov    0x30(%esp),%edx
		sar    $0x10,%eax
		sub    %eax,%edx
		mov    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    0xe(%esi),%edx
		add    %eax,%ecx
		mov    0x8(%esi),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		sub    %eax,%edx
		mov    %edx,%eax
		mov    %ecx,0x2c(%esp)
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ecx
		mov    0x14(%esi),%eax
		sar    $0x10,%eax
		mov    %eax,0x30(%esp)
		mov    0x8(%esi),%eax
		mov    0x30(%esp),%edx
		sar    $0x10,%eax
		sub    %eax,%edx
		mov    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    0x28(%esp),%edx
		add    %ecx,%eax
		add    0x2c(%esp),%edx
		add    %edx,%eax
		cmp    $0x190,%eax
		jge    jump_65f32
		xor    %eax,%eax
		mov    %di,%ax
		imul   $0x2e,%eax,%eax
		mov    data_1aa5cc,%dx
		movw   $0x0,0x20(%esi)
		mov    %dx,data_18194e(%eax)
		xor    %edx,%edx
		mov    %di,data_1aa5cc
		mov    %dx,data_18196c(%eax)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3f,%al
		mov    0x8(%esi),%edx
		and    $0xffff,%eax
		sar    $0x10,%edx
		add    %edx,%eax
		shl    $0x8,%eax
		shl    $0x5,%ebx
		lea    -0x1f00(%eax),%edx
		mov    %ebx,0x30(%esp)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		xor    %ebx,%ebx
		and    $0x3f,%al
		mov    %ax,%bx
		mov    0x4(%esi),%eax
		sar    $0x10,%eax
		add    %ebx,%eax
		mov    $0x41,%ecx
		shl    $0x8,%eax
		mov    %edx,%ebx
		mov    0x30(%esp),%edx
		sub    $0x1f00,%eax
		call   ac_bang_new4
		jmp    jump_67486
	jump_65f32:
		mov    0xa(%esi),%eax
		mov    0x4(%esi),%edx
		sar    $0x10,%eax
		sar    $0x10,%edx
		mov    %eax,0x30(%esp)
		lea    (%eax,%edx,1),%ebx
		mov    0x6(%esi),%eax
		sar    $0x10,%eax
		mov    %eax,0x3c(%esp)
		mov    0xc(%esi),%eax
		mov    0x3c(%esp),%ecx
		sar    $0x10,%eax
		add    %eax,%ecx
		sar    %ecx
		mov    %ecx,0xa4(%esp)
		mov    0x8(%esi),%ecx
		sar    $0x10,%ecx
		mov    %ecx,0x38(%esp)
		mov    0xe(%esi),%ecx
		sar    $0x10,%ecx
		mov    %ecx,0x40(%esp)
		mov    0x38(%esp),%ecx
		add    0x40(%esp),%ecx
		sar    %ecx
		mov    %ecx,0x4c(%esp)
		mov    0x10(%esi),%ecx
		sar    $0x10,%ecx
		mov    %ecx,0x34(%esp)
		mov    0x30(%esp),%ecx
		add    0x34(%esp),%ecx
		sar    %ecx
		mov    %ecx,0x7c(%esp)
		mov    0x12(%esi),%ecx
		sar    $0x10,%ecx
		add    %ecx,%eax
		sar    %eax
		mov    %ecx,0x30(%esp)
		mov    %eax,0x58(%esp)
		mov    0x14(%esi),%eax
		mov    0x40(%esp),%ecx
		sar    $0x10,%eax
		add    %eax,%ecx
		sar    %ecx
		mov    %ecx,0x5c(%esp)
		add    0x34(%esp),%edx
		sar    %edx
		mov    0x3c(%esp),%ecx
		mov    %edx,0xa0(%esp)
		mov    0x30(%esp),%edx
		add    %ecx,%edx
		add    0x38(%esp),%eax
		sar    %eax
		mov    data_1aa5e4,%ebp
		mov    %eax,0x6c(%esp)
		xor    %eax,%eax
		sar    %ebx
		mov    data_1aa5cc,%ax
		sar    %edx
		test   %eax,%eax
		je     jump_6600d
		mov    %eax,%ecx
		imul   $0x2e,%eax,%eax
		mov    data_18194e(%eax),%ax
		mov    %ax,data_1aa5cc
		mov    %ecx,%eax
	jump_6600d:
		test   %eax,%eax
		je     jump_66093
		imul   $0x2e,%eax,%eax
		add    $EXPORT_SYMBOL(ex_faces),%eax
		movb   $0x3,0x4(%eax)
		mov    (%esi),%cx
		mov    %cx,(%eax)
		mov    0x2(%esi),%cx
		mov    %cx,0x2(%eax)
		mov    0x5(%esi),%cl
		mov    %cl,0x5(%eax)
		mov    0x6(%esi),%cx
		mov    %cx,0x6(%eax)
		mov    0x8(%esi),%cx
		mov    %cx,0x8(%eax)
		mov    0xa(%esi),%cx
		mov    %cx,0xa(%eax)
		mov    %bx,0xc(%eax)
		mov    %dx,0x14(%eax)
		mov    0xa4(%esp),%ecx
		mov    %cx,0xe(%eax)
		mov    0x4c(%esp),%ecx
		mov    %cx,0x10(%eax)
		mov    0xa0(%esp),%ecx
		mov    %cx,0x12(%eax)
		mov    0x6c(%esp),%ecx
		mov    %cx,0x16(%eax)
		mov    0x28(%esi),%cl
		mov    %cl,0x28(%eax)
		mov    0x29(%esi),%cl
		mov    %cl,0x29(%eax)
		mov    0x2a(%esi),%cl
		movw   $0x1,0x20(%eax)
		mov    %cl,0x2a(%eax)
	jump_66093:
		xor    %eax,%eax
		mov    data_1aa5cc,%ax
		test   %eax,%eax
		je     jump_660b3
		mov    %eax,%ecx
		imul   $0x2e,%eax,%eax
		mov    data_18194e(%eax),%ax
		mov    %ax,data_1aa5cc
		mov    %ecx,%eax
	jump_660b3:
		test   %eax,%eax
		je     jump_6613a
		imul   $0x2e,%eax,%eax
		add    $EXPORT_SYMBOL(ex_faces),%eax
		movb   $0x3,0x4(%eax)
		mov    (%esi),%cx
		mov    %cx,(%eax)
		mov    0x2(%esi),%cx
		mov    %cx,0x2(%eax)
		mov    0x5(%esi),%cl
		mov    %cl,0x5(%eax)
		mov    %bx,0x6(%eax)
		mov    0xa4(%esp),%ecx
		mov    %cx,0x8(%eax)
		mov    0x4c(%esp),%ecx
		mov    %cx,0xa(%eax)
		mov    0xc(%esi),%cx
		mov    %cx,0xc(%eax)
		mov    0xe(%esi),%cx
		mov    %cx,0xe(%eax)
		mov    0x10(%esi),%cx
		mov    %cx,0x10(%eax)
		mov    0x7c(%esp),%ecx
		mov    %cx,0x12(%eax)
		mov    0x58(%esp),%ecx
		mov    %cx,0x14(%eax)
		mov    0x5c(%esp),%ecx
		mov    %cx,0x16(%eax)
		mov    0x28(%esi),%cl
		mov    %cl,0x28(%eax)
		mov    0x29(%esi),%cl
		mov    %cl,0x29(%eax)
		mov    0x2a(%esi),%cl
		movw   $0x1,0x20(%eax)
		mov    %cl,0x2a(%eax)
	jump_6613a:
		xor    %eax,%eax
		mov    data_1aa5cc,%ax
		test   %eax,%eax
		je     jump_6615a
		mov    %eax,%ecx
		imul   $0x2e,%eax,%eax
		mov    data_18194e(%eax),%ax
		mov    %ax,data_1aa5cc
		mov    %ecx,%eax
	jump_6615a:
		test   %eax,%eax
		je     jump_661e1
		imul   $0x2e,%eax,%eax
		add    $EXPORT_SYMBOL(ex_faces),%eax
		movb   $0x3,0x4(%eax)
		mov    (%esi),%cx
		mov    %cx,(%eax)
		mov    0x2(%esi),%cx
		mov    %cx,0x2(%eax)
		mov    0x5(%esi),%cl
		mov    %cl,0x5(%eax)
		mov    0x7c(%esp),%ecx
		mov    %cx,0x6(%eax)
		mov    0x58(%esp),%ecx
		mov    %cx,0x8(%eax)
		mov    0x5c(%esp),%ecx
		mov    %cx,0xa(%eax)
		mov    0x12(%esi),%cx
		mov    %cx,0xc(%eax)
		mov    0x14(%esi),%cx
		mov    %cx,0xe(%eax)
		mov    0x16(%esi),%cx
		mov    %cx,0x10(%eax)
		mov    %dx,0x14(%eax)
		mov    0xa0(%esp),%ecx
		mov    %cx,0x12(%eax)
		mov    0x6c(%esp),%ecx
		mov    %cx,0x16(%eax)
		mov    0x28(%esi),%cl
		mov    %cl,0x28(%eax)
		mov    0x29(%esi),%cl
		mov    %cl,0x29(%eax)
		mov    0x2a(%esi),%cl
		movw   $0x1,0x20(%eax)
		mov    %cl,0x2a(%eax)
	jump_661e1:
		xor    %eax,%eax
		mov    data_1aa5cc,%ax
		test   %eax,%eax
		je     jump_66201
		mov    %eax,%ecx
		imul   $0x2e,%eax,%eax
		mov    data_18194e(%eax),%ax
		mov    %ax,data_1aa5cc
		mov    %ecx,%eax
	jump_66201:
		test   %eax,%eax
		je     jump_66287
		imul   $0x2e,%eax,%eax
		add    $EXPORT_SYMBOL(ex_faces),%eax
		movb   $0x3,0x4(%eax)
		mov    (%esi),%cx
		mov    %cx,(%eax)
		mov    0x2(%esi),%cx
		mov    %cx,0x2(%eax)
		mov    0x5(%esi),%cl
		mov    %cl,0x5(%eax)
		mov    %bx,0x6(%eax)
		mov    %dx,0x14(%eax)
		mov    0xa4(%esp),%ebx
		mov    0x6c(%esp),%edx
		mov    %bx,0x8(%eax)
		mov    %dx,0x16(%eax)
		mov    0x4c(%esp),%ebx
		mov    %bx,0xa(%eax)
		mov    0x7c(%esp),%ebx
		mov    %bx,0xc(%eax)
		mov    0x58(%esp),%ebx
		mov    %bx,0xe(%eax)
		mov    0x5c(%esp),%ebx
		mov    %bx,0x10(%eax)
		mov    0xa0(%esp),%ebx
		mov    %bx,0x12(%eax)
		mov    0x28(%esi),%dl
		mov    %dl,0x28(%eax)
		mov    0x29(%esi),%dl
		mov    %dl,0x29(%eax)
		mov    0x2a(%esi),%dl
		movw   $0x1,0x20(%eax)
		mov    %dl,0x2a(%eax)
	jump_66287:
		xor    %eax,%eax
		mov    %di,%ax
		imul   $0x2e,%eax,%eax
		mov    data_1aa5cc,%dx
		mov    %ebp,data_1aa5e4
		movw   $0x0,0x20(%esi)
		xor    %ecx,%ecx
		mov    %dx,data_18194e(%eax)
		mov    %di,data_1aa5cc
		mov    %cx,data_18196c(%eax)
		jmp    jump_67486
	jump_662be:
		call   ac_LbRandomAnyShort
		and    $0x3,%ah
		mov    0x6(%esi),%edx
		and    $0xffff,%eax
		sar    $0x10,%edx
		cmp    %eax,%edx
		jle    jump_662f3
		movsbw 0x28(%esi),%ax
		mov    0x6(%esi),%cx
		mov    0xa(%esi),%dx
		sub    %eax,%ecx
		movsbw 0x2a(%esi),%ax
		mov    %cx,0x6(%esi)
		sub    %eax,%edx
		mov    %dx,0xa(%esi)
	jump_662f3:
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		movsbw 0x29(%esi),%dx
		and    $0x7,%al
		mov    0x8(%esi),%bx
		sub    %eax,%edx
		add    %edx,%ebx
		mov    %bx,0x8(%esi)
		call   ac_LbRandomAnyShort
		and    $0x3,%ah
		mov    0xc(%esi),%edx
		and    $0xffff,%eax
		sar    $0x10,%edx
		cmp    %eax,%edx
		jle    jump_66342
		movsbw 0x28(%esi),%ax
		mov    0xc(%esi),%cx
		mov    0x10(%esi),%dx
		sub    %eax,%ecx
		movsbw 0x2a(%esi),%ax
		mov    %cx,0xc(%esi)
		sub    %eax,%edx
		mov    %dx,0x10(%esi)
	jump_66342:
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		movsbw 0x29(%esi),%dx
		and    $0x7,%al
		mov    0xe(%esi),%bx
		sub    %eax,%edx
		add    %edx,%ebx
		mov    %bx,0xe(%esi)
		call   ac_LbRandomAnyShort
		and    $0x3,%ah
		mov    0x12(%esi),%edx
		and    $0xffff,%eax
		sar    $0x10,%edx
		cmp    %eax,%edx
		jle    jump_66391
		movsbw 0x28(%esi),%ax
		mov    0x12(%esi),%cx
		mov    0x16(%esi),%dx
		sub    %eax,%ecx
		movsbw 0x2a(%esi),%ax
		mov    %cx,0x12(%esi)
		sub    %eax,%edx
		mov    %dx,0x16(%esi)
	jump_66391:
		call   ac_LbRandomAnyShort
		mov    %eax,%edx
		xor    %ah,%dh
		and    $0x7,%dl
		movsbw 0x29(%esi),%ax
		mov    0x14(%esi),%bx
		sub    %edx,%eax
		add    %eax,%ebx
		mov    0x26(%esi),%eax
		sar    $0x18,%eax
		mov    %bx,0x14(%esi)
		cmp    $0xffffff88,%eax
		jle    jump_67486
		subb   $0x3,0x29(%esi)
		jmp    jump_67486


/*----------------------------------------------------------------*/
func_663c6:
/*----------------------------------------------------------------*/
		mov    0x8(%esi),%edx
		mov    0x4(%esi),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		call   ac_alt_at_point
		sar    $0x5,%eax
		mov    %eax,0x9c(%esp)
		mov    0x6(%esi),%eax
		mov    0x9c(%esp),%edx
		sar    $0x10,%eax
		cmp    %edx,%eax
		jl     jump_66414
		mov    0xc(%esi),%eax
		sar    $0x10,%eax
		cmp    %edx,%eax
		jl     jump_66414
		mov    0x12(%esi),%eax
		sar    $0x10,%eax
		cmp    %edx,%eax
		jl     jump_66414
		mov    0x18(%esi),%eax
		sar    $0x10,%eax
		cmp    %edx,%eax
		jge    jump_66ad5
	jump_66414:
		mov    0xa(%esi),%edx
		mov    0x4(%esi),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		sub    %eax,%edx
		mov    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebx
		mov    0x10(%esi),%edx
		mov    0x4(%esi),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		sub    %eax,%edx
		mov    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    0xc(%esi),%edx
		add    %eax,%ebx
		mov    0x6(%esi),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		sub    %eax,%edx
		mov    %edx,%eax
		mov    %ebx,0x28(%esp)
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebx
		mov    0x12(%esi),%edx
		mov    0x6(%esi),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		sub    %eax,%edx
		mov    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    0xe(%esi),%edx
		add    %eax,%ebx
		mov    0x8(%esi),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		sub    %eax,%edx
		mov    %edx,%eax
		mov    %ebx,0x2c(%esp)
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebx
		mov    0x14(%esi),%edx
		mov    0x8(%esi),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		sub    %eax,%edx
		mov    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    0x28(%esp),%edx
		add    %ebx,%eax
		add    0x2c(%esp),%edx
		mov    minimum_explode_size,%ecx
		add    %edx,%eax
		cmp    %ecx,%eax
		jge    jump_66631
		xor    %eax,%eax
		mov    %di,%ax
		imul   $0x2e,%eax,%eax
		mov    data_1aa5cc,%bx
		movw   $0x0,0x20(%esi)
		xor    %edx,%edx
		mov    %bx,data_18194e(%eax)
		xor    %ebx,%ebx
		mov    %di,data_1aa5cc
		mov    %bx,data_18196c(%eax)
		call   ac_LbRandomAnyShort
		and    $0x1,%ah
		mov    %ax,%dx
		mov    0x4(%esi),%eax
		sar    $0x10,%eax
		add    %edx,%eax
		sub    $0xff,%eax
		mov    %eax,0x94(%esp)
		call   ac_LbRandomAnyShort
		and    $0x1,%ah
		mov    0x8(%esi),%edx
		and    $0xffff,%eax
		sar    $0x10,%edx
		add    %edx,%eax
		sub    $0xff,%eax
		mov    %eax,0x90(%esp)
		mov    %eax,%ebx
		mov    0x9c(%esp),%eax
		mov    $0x41,%ecx
		shl    $0x5,%eax
		shl    $0x8,%ebx
		mov    %eax,0x64(%esp)
		mov    0x94(%esp),%eax
		mov    0x64(%esp),%edx
		shl    $0x8,%eax
		call   ac_bang_new4
		mov    0x25(%esi),%eax
		sar    $0x18,%eax
		mov    0x94(%esp),%edx
		shl    $0x4,%eax
		sub    %eax,%edx
		mov    0x27(%esi),%eax
		mov    0x90(%esp),%ebx
		sar    $0x18,%eax
		mov    %edx,0x94(%esp)
		shl    $0x4,%eax
		mov    %edx,%esi
		sub    %eax,%ebx
		sar    $0x8,%esi
		mov    %ebx,0x90(%esp)
		test   %esi,%esi
		jl     jump_67486
		cmp    $0x80,%esi
		jge    jump_67486
		mov    %ebx,%edx
		sar    $0x8,%edx
		test   %edx,%edx
		jl     jump_67486
		cmp    $0x80,%edx
		jge    jump_67486
		call   ac_LbRandomAnyShort
		mov    minimum_explode_and,%ecx
		and    $0xffff,%eax
		test   %ecx,%eax
		jne    jump_67486
		mov    minimum_explode_depth,%ebx
		mov    %esi,%eax
		mov    $0x14,%ecx
		call   ac_quick_crater
		mov    0x90(%esp),%esi
		mov    0x94(%esp),%eax
		mov    0x64(%esp),%edx
		shl    $0x8,%esi
		shl    $0x8,%eax
		mov    %esi,%ebx
		mov    %eax,0x68(%esp)
		call   ac_bang_new4
		call   ac_LbRandomAnyShort
		test   $0x7,%al
		jne    jump_67486
		mov    $0x3,%ecx
		mov    0x9c(%esp),%edx
		mov    0x68(%esp),%eax
		mov    %esi,%ebx
		call   FIRE_new
		jmp    jump_67486
	jump_66631:
		mov    0x4(%esi),%eax
		mov    0xa(%esi),%edx
		sar    $0x10,%eax
		sar    $0x10,%edx
		mov    %eax,0x30(%esp)
		lea    (%eax,%edx,1),%ebx
		mov    0x6(%esi),%eax
		sar    $0x10,%eax
		mov    %eax,0x34(%esp)
		mov    0xc(%esi),%eax
		sar    $0x10,%eax
		mov    %eax,0x38(%esp)
		mov    0x34(%esp),%eax
		add    0x38(%esp),%eax
		sar    %eax
		mov    %eax,0xa4(%esp)
		mov    0x8(%esi),%eax
		sar    $0x10,%eax
		mov    %eax,0x3c(%esp)
		mov    0xe(%esi),%eax
		sar    $0x10,%eax
		mov    %eax,0x40(%esp)
		mov    0x3c(%esp),%eax
		add    0x40(%esp),%eax
		sar    %eax
		mov    %eax,0x4c(%esp)
		mov    0x16(%esi),%eax
		sar    $0x10,%eax
		add    %eax,%edx
		sar    %edx
		mov    %edx,0x48(%esp)
		mov    0x18(%esi),%edx
		sar    $0x10,%edx
		mov    %edx,0x44(%esp)
		mov    0x38(%esp),%edx
		add    0x44(%esp),%edx
		sar    %edx
		mov    %edx,0x78(%esp)
		mov    0x1a(%esi),%edx
		mov    0x40(%esp),%ecx
		sar    $0x10,%edx
		add    %edx,%ecx
		sar    %ecx
		mov    %ecx,0x70(%esp)
		mov    0x10(%esi),%ecx
		sar    $0x10,%ecx
		add    %ecx,%eax
		sar    %eax
		mov    %ecx,0x40(%esp)
		mov    %eax,0x54(%esp)
		mov    0x12(%esi),%eax
		mov    0x44(%esp),%ecx
		sar    $0x10,%eax
		add    %eax,%ecx
		sar    %ecx
		mov    %ecx,0x74(%esp)
		mov    0x14(%esi),%ecx
		sar    $0x10,%ecx
		add    %ecx,%edx
		mov    %ecx,0x44(%esp)
		sar    %edx
		mov    0x30(%esp),%ecx
		mov    %edx,0x50(%esp)
		mov    0x40(%esp),%edx
		add    %ecx,%edx
		sar    %edx
		mov    %edx,0xa0(%esp)
		mov    0x34(%esp),%edx
		mov    0x3c(%esp),%ecx
		add    %eax,%edx
		mov    0x44(%esp),%eax
		add    %ecx,%eax
		sar    %eax
		sar    %ebx
		mov    %eax,0x6c(%esp)
		mov    0x48(%esp),%eax
		mov    0x54(%esp),%ecx
		add    %ebx,%eax
		add    %ecx,%eax
		add    0xa0(%esp),%eax
		sar    $0x2,%eax
		mov    0x78(%esp),%ecx
		mov    %eax,0x88(%esp)
		mov    0xa4(%esp),%eax
		add    %ecx,%eax
		mov    0x74(%esp),%ecx
		sar    %edx
		add    %ecx,%eax
		add    %edx,%eax
		sar    $0x2,%eax
		mov    0x70(%esp),%ecx
		mov    %eax,0x84(%esp)
		mov    0x4c(%esp),%eax
		add    %ecx,%eax
		add    0x50(%esp),%eax
		add    0x6c(%esp),%eax
		sar    $0x2,%eax
		mov    %eax,0x8c(%esp)
		xor    %eax,%eax
		mov    data_1aa5cc,%ax
		mov    data_1aa5e4,%ebp
		test   %eax,%eax
		je     jump_667a4
		mov    %eax,%ecx
		imul   $0x2e,%eax,%eax
		mov    data_18194e(%eax),%ax
		mov    %ax,data_1aa5cc
		mov    %ecx,%eax
	jump_667a4:
		test   %eax,%eax
		je     jump_6684b
		imul   $0x2e,%eax,%eax
		add    $EXPORT_SYMBOL(ex_faces),%eax
		movb   $0x4,0x4(%eax)
		mov    (%esi),%cx
		mov    %cx,(%eax)
		mov    0x2(%esi),%cx
		mov    %cx,0x2(%eax)
		mov    0x5(%esi),%cl
		mov    %cl,0x5(%eax)
		mov    0x6(%esi),%cx
		mov    %cx,0x6(%eax)
		mov    0x8(%esi),%cx
		mov    %cx,0x8(%eax)
		mov    0xa(%esi),%cx
		mov    %cx,0xa(%eax)
		mov    %bx,0xc(%eax)
		mov    %dx,0x14(%eax)
		mov    0xa4(%esp),%ecx
		mov    %cx,0xe(%eax)
		mov    0x4c(%esp),%ecx
		mov    %cx,0x10(%eax)
		mov    0xa0(%esp),%ecx
		mov    %cx,0x12(%eax)
		mov    0x6c(%esp),%ecx
		mov    %cx,0x16(%eax)
		mov    0x88(%esp),%ecx
		mov    %cx,0x18(%eax)
		mov    0x84(%esp),%ecx
		mov    %cx,0x1a(%eax)
		mov    0x8c(%esp),%ecx
		mov    %cx,0x1c(%eax)
		mov    0x28(%esi),%cl
		mov    %cl,0x28(%eax)
		mov    0x29(%esi),%cl
		mov    %cl,0x29(%eax)
		mov    0x2a(%esi),%cl
		movw   $0x1,0x20(%eax)
		mov    %cl,0x2a(%eax)
	jump_6684b:
		xor    %eax,%eax
		mov    data_1aa5cc,%ax
		test   %eax,%eax
		je     jump_6686b
		mov    %eax,%ecx
		imul   $0x2e,%eax,%eax
		mov    data_18194e(%eax),%ax
		mov    %ax,data_1aa5cc
		mov    %ecx,%eax
	jump_6686b:
		test   %eax,%eax
		je     jump_66913
		imul   $0x2e,%eax,%eax
		add    $EXPORT_SYMBOL(ex_faces),%eax
		movb   $0x4,0x4(%eax)
		mov    (%esi),%cx
		mov    %cx,(%eax)
		mov    0x2(%esi),%cx
		mov    %cx,0x2(%eax)
		mov    0x5(%esi),%cl
		mov    %cl,0x5(%eax)
		mov    %bx,0x6(%eax)
		mov    0xa4(%esp),%ebx
		mov    %bx,0x8(%eax)
		mov    0x4c(%esp),%ebx
		mov    %bx,0xa(%eax)
		mov    0xc(%esi),%bx
		mov    %bx,0xc(%eax)
		mov    0xe(%esi),%bx
		mov    %bx,0xe(%eax)
		mov    0x10(%esi),%bx
		mov    %bx,0x10(%eax)
		mov    0x88(%esp),%ebx
		mov    %bx,0x12(%eax)
		mov    0x84(%esp),%ebx
		mov    %bx,0x14(%eax)
		mov    0x8c(%esp),%ebx
		mov    %bx,0x16(%eax)
		mov    0x48(%esp),%ebx
		mov    %bx,0x18(%eax)
		mov    0x78(%esp),%ebx
		mov    %bx,0x1a(%eax)
		mov    0x70(%esp),%ebx
		mov    %bx,0x1c(%eax)
		mov    0x28(%esi),%bl
		mov    %bl,0x28(%eax)
		mov    0x29(%esi),%bl
		mov    %bl,0x29(%eax)
		mov    0x2a(%esi),%bl
		movw   $0x1,0x20(%eax)
		mov    %bl,0x2a(%eax)
	jump_66913:
		xor    %eax,%eax
		mov    data_1aa5cc,%ax
		test   %eax,%eax
		je     jump_66930
		imul   $0x2e,%eax,%ebx
		mov    data_18194e(%ebx),%bx
		mov    %bx,data_1aa5cc
	jump_66930:
		test   %eax,%eax
		je     jump_669d9
		imul   $0x2e,%eax,%eax
		add    $EXPORT_SYMBOL(ex_faces),%eax
		movb   $0x4,0x4(%eax)
		mov    (%esi),%bx
		mov    %bx,(%eax)
		mov    0x2(%esi),%bx
		mov    %bx,0x2(%eax)
		mov    0x5(%esi),%bl
		mov    %bl,0x5(%eax)
		mov    0x88(%esp),%ebx
		mov    %bx,0x6(%eax)
		mov    0x84(%esp),%ebx
		mov    %bx,0x8(%eax)
		mov    0x8c(%esp),%ebx
		mov    %bx,0xa(%eax)
		mov    0x48(%esp),%ebx
		mov    %bx,0xc(%eax)
		mov    0x78(%esp),%ebx
		mov    %bx,0xe(%eax)
		mov    0x70(%esp),%ebx
		mov    %bx,0x10(%eax)
		mov    0x54(%esp),%ebx
		mov    %bx,0x12(%eax)
		mov    0x74(%esp),%ebx
		mov    %bx,0x14(%eax)
		mov    0x50(%esp),%ebx
		mov    %bx,0x16(%eax)
		mov    0x18(%esi),%bx
		mov    %bx,0x18(%eax)
		mov    0x1a(%esi),%bx
		mov    %bx,0x1a(%eax)
		mov    0x1c(%esi),%bx
		mov    %bx,0x1c(%eax)
		mov    0x28(%esi),%bl
		mov    %bl,0x28(%eax)
		mov    0x29(%esi),%bl
		mov    %bl,0x29(%eax)
		mov    0x2a(%esi),%bl
		movw   $0x1,0x20(%eax)
		mov    %bl,0x2a(%eax)
	jump_669d9:
		xor    %eax,%eax
		mov    data_1aa5cc,%ax
		test   %eax,%eax
		je     jump_669f6
		imul   $0x2e,%eax,%ebx
		mov    data_18194e(%ebx),%bx
		mov    %bx,data_1aa5cc
	jump_669f6:
		test   %eax,%eax
		je     jump_66a9e
		imul   $0x2e,%eax,%eax
		add    $EXPORT_SYMBOL(ex_faces),%eax
		movb   $0x4,0x4(%eax)
		mov    (%esi),%bx
		mov    %bx,(%eax)
		mov    0x2(%esi),%bx
		mov    %bx,0x2(%eax)
		mov    0x5(%esi),%bl
		mov    %bl,0x5(%eax)
		mov    %dx,0x8(%eax)
		mov    0xa0(%esp),%ebx
		mov    0x6c(%esp),%edx
		mov    %bx,0x6(%eax)
		mov    %dx,0xa(%eax)
		mov    0x88(%esp),%edx
		mov    %dx,0xc(%eax)
		mov    0x84(%esp),%edx
		mov    %dx,0xe(%eax)
		mov    0x8c(%esp),%edx
		mov    %dx,0x10(%eax)
		mov    0x12(%esi),%dx
		mov    %dx,0x12(%eax)
		mov    0x14(%esi),%dx
		mov    %dx,0x14(%eax)
		mov    0x16(%esi),%dx
		mov    %dx,0x16(%eax)
		mov    0x54(%esp),%edx
		mov    %dx,0x18(%eax)
		mov    0x74(%esp),%edx
		mov    %dx,0x1a(%eax)
		mov    0x50(%esp),%edx
		mov    %dx,0x1c(%eax)
		mov    0x28(%esi),%dl
		mov    %dl,0x28(%eax)
		mov    0x29(%esi),%dl
		mov    %dl,0x29(%eax)
		mov    0x2a(%esi),%dl
		movw   $0x1,0x20(%eax)
		mov    %dl,0x2a(%eax)
	jump_66a9e:
		xor    %eax,%eax
		mov    %di,%ax
		imul   $0x2e,%eax,%eax
		mov    data_1aa5cc,%dx
		mov    %ebp,data_1aa5e4
		movw   $0x0,0x20(%esi)
		xor    %ecx,%ecx
		mov    %dx,data_18194e(%eax)
		mov    %di,data_1aa5cc
		mov    %cx,data_18196c(%eax)
		jmp    jump_67486
	jump_66ad5:
		call   ac_LbRandomAnyShort
		and    $0x3,%ah
		mov    0x6(%esi),%edx
		and    $0xffff,%eax
		sar    $0x10,%edx
		cmp    %eax,%edx
		jle    jump_66b0a
		movsbw 0x28(%esi),%ax
		mov    0x6(%esi),%cx
		mov    0xa(%esi),%dx
		sub    %eax,%ecx
		movsbw 0x2a(%esi),%ax
		mov    %cx,0x6(%esi)
		sub    %eax,%edx
		mov    %dx,0xa(%esi)
	jump_66b0a:
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		movsbw 0x29(%esi),%dx
		and    $0x7,%al
		mov    0x8(%esi),%bx
		sub    %eax,%edx
		add    %edx,%ebx
		mov    %bx,0x8(%esi)
		call   ac_LbRandomAnyShort
		and    $0x3,%ah
		mov    0xc(%esi),%edx
		and    $0xffff,%eax
		sar    $0x10,%edx
		cmp    %eax,%edx
		jle    jump_66b59
		movsbw 0x28(%esi),%ax
		mov    0xc(%esi),%cx
		mov    0x10(%esi),%dx
		sub    %eax,%ecx
		movsbw 0x2a(%esi),%ax
		mov    %cx,0xc(%esi)
		sub    %eax,%edx
		mov    %dx,0x10(%esi)
	jump_66b59:
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		movsbw 0x29(%esi),%dx
		and    $0x7,%al
		mov    0xe(%esi),%bx
		sub    %eax,%edx
		add    %edx,%ebx
		mov    %bx,0xe(%esi)
		call   ac_LbRandomAnyShort
		xor    %edx,%edx
		and    $0x3,%ah
		mov    %ax,%dx
		mov    0x12(%esi),%eax
		sar    $0x10,%eax
		cmp    %edx,%eax
		jle    jump_66ba8
		movsbw 0x28(%esi),%ax
		mov    0x12(%esi),%cx
		mov    0x16(%esi),%dx
		sub    %eax,%ecx
		movsbw 0x2a(%esi),%ax
		mov    %cx,0x12(%esi)
		sub    %eax,%edx
		mov    %dx,0x16(%esi)
	jump_66ba8:
		call   ac_LbRandomAnyShort
		mov    %eax,%edx
		xor    %ah,%dh
		and    $0x7,%dl
		movsbw 0x29(%esi),%ax
		mov    0x14(%esi),%bx
		sub    %edx,%eax
		add    %eax,%ebx
		mov    %bx,0x14(%esi)
		call   ac_LbRandomAnyShort
		and    $0x3,%ah
		mov    0x18(%esi),%edx
		and    $0xffff,%eax
		sar    $0x10,%edx
		cmp    %eax,%edx
		jle    jump_66bfa
		movsbw 0x28(%esi),%ax
		mov    0x18(%esi),%cx
		mov    0x1c(%esi),%dx
		sub    %eax,%ecx
		movsbw 0x2a(%esi),%ax
		mov    %cx,0x18(%esi)
		sub    %eax,%edx
		mov    %dx,0x1c(%esi)
	jump_66bfa:
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		movsbw 0x29(%esi),%dx
		and    $0x7,%al
		mov    0x1a(%esi),%bx
		sub    %eax,%edx
		mov    0x26(%esi),%eax
		add    %edx,%ebx
		sar    $0x18,%eax
		mov    %bx,0x1a(%esi)
		cmp    $0xffffff88,%eax
		jle    jump_67486
		subb   $0x3,0x29(%esi)
		jmp    jump_67486


/*----------------------------------------------------------------*/
func_66c2c:
/*----------------------------------------------------------------*/
		mov    0x1e(%esi),%eax
		sar    $0x10,%eax
		cmp    $0x3e8,%eax
		jle    jump_66c85
		mov    %edx,%ebx
		dec    %ebx
		mov    %bx,0x20(%esi)
		mov    0x1e(%esi),%eax
		sar    $0x10,%eax
		cmp    $0x3e8,%eax
		jne    jump_67486
		call   ac_LbRandomAnyShort
		test   $0x1f,%al
		jne    jump_67486
		mov    $0x64,%ecx
		mov    0x24(%esi),%ebx
		mov    0x22(%esi),%edx
		mov    0x20(%esi),%eax
		sar    $0x10,%ebx
		sar    $0x10,%edx
		sar    $0x10,%eax
		shl    $0x8,%ebx
		shl    $0x8,%eax
		call   ac_bang_new4
		jmp    jump_67486
	jump_66c85:
		call   ac_LbRandomAnyShort
		and    $0x3,%ah
		xor    %edx,%edx
		mov    %ax,%dx
		mov    0x1e(%esi),%eax
		sar    $0x10,%eax
		cmp    %eax,%edx
		jle    jump_66cfd
		call   ac_LbRandomAnyShort
		test   $0xf,%al
		jne    jump_66cfd
		movw   $0x0,0x20(%esi)
		mov    $0x23,%ecx
		mov    0x24(%esi),%ebx
		mov    0x22(%esi),%edx
		sar    $0x10,%ebx
		mov    0x20(%esi),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		shl    $0x8,%ebx
		shl    $0x8,%eax
		call   ac_bang_new4
		mov    0x80(%esp),%edx
		mov    0x98(%esp),%ebx
		mov    data_1aa5cc,%ax
		xor    %ecx,%ecx
		mov    %ax,data_18194e(%ebx)
		mov    %dx,data_1aa5cc
		mov    %cx,data_18196c(%ebx)
		jmp    jump_67486
	jump_66cfd:
		mov    0x28(%esi),%eax
		sar    $0x18,%eax
		and    $0x7ff,%eax
		mov    EXPORT_SYMBOL(lbSinTable)(,%eax,4),%edx
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%eax,4),%eax
		mov    %eax,data_1aa5dc
		mov    0x29(%esi),%eax
		sar    $0x18,%eax
		and    $0x7ff,%eax
		mov    %edx,data_1aa5d8
		mov    EXPORT_SYMBOL(lbSinTable)(,%eax,4),%edx
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%eax,4),%ebp
		decw   0x20(%esi)
		mov    %edx,data_1aa5e0
		movsbw 0x28(%esi),%ax
		mov    0x22(%esi),%dx
		shl    $0x3,%eax
		add    %eax,%edx
		movsbw 0x29(%esi),%ax
		mov    0x24(%esi),%bx
		shl    $0x3,%eax
		add    %eax,%ebx
		movsbw 0x2a(%esi),%ax
		mov    0x26(%esi),%cx
		shl    $0x3,%eax
		mov    %dx,0x22(%esi)
		add    %eax,%ecx
		mov    0x20(%esi),%eax
		mov    %bx,0x24(%esi)
		sar    $0x10,%eax
		mov    %cx,0x26(%esi)
		test   %eax,%eax
		jl     jump_66d8b
		cmp    $0x8000,%eax
		jl     jump_66dc2
	jump_66d8b:
		xor    %eax,%eax
		mov    %di,%ax
		imul   $0x2e,%eax,%eax
		mov    data_1aa5cc,%dx
		movw   $0x0,0x20(%esi)
		mov    %ebp,data_1aa5e4
		mov    %dx,data_18194e(%eax)
		xor    %edx,%edx
		mov    %di,data_1aa5cc
		mov    %dx,data_18196c(%eax)
		jmp    jump_67486
	jump_66dc2:
		mov    0x22(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jl     jump_66dd3
		cmp    $0x8000,%eax
		jle    jump_66e0a
	jump_66dd3:
		xor    %eax,%eax
		mov    %di,%ax
		imul   $0x2e,%eax,%eax
		mov    data_1aa5cc,%dx
		mov    %ebp,data_1aa5e4
		movw   $0x0,0x20(%esi)
		xor    %esi,%esi
		mov    %dx,data_18194e(%eax)
		mov    %di,data_1aa5cc
		mov    %si,data_18196c(%eax)
		jmp    jump_67486
	jump_66e0a:
		mov    0x25(%esi),%eax
		sar    $0x18,%eax
		mov    %eax,%ebx
		mov    %eax,%edx
		sar    $0x5,%ebx
		sub    %ebx,%edx
		mov    %dl,0x28(%esi)
		mov    0x26(%esi),%eax
		sar    $0x18,%eax
		mov    %eax,%edx
		sar    $0x5,%edx
		sub    %edx,%eax
		mov    %al,0x29(%esi)
		mov    0x27(%esi),%eax
		sar    $0x18,%eax
		mov    %eax,%edx
		sar    $0x5,%edx
		sub    %edx,%eax
		mov    %al,0x2a(%esi)
		mov    0x4(%esi),%eax
		sar    $0x10,%eax
		mov    %eax,0x14(%esp)
		mov    0x6(%esi),%eax
		sar    $0x10,%eax
		mov    %eax,0x18(%esp)
		mov    0x8(%esi),%eax
		sar    $0x10,%eax
		mov    0x14(%esp),%edx
		mov    %eax,0x1c(%esp)
		imul   data_1aa5dc,%edx
		mov    data_1aa5d8,%ebx
		mov    0x1c(%esp),%eax
		imul   %ebx,%eax
		sub    %eax,%edx
		sar    $0x10,%edx
		mov    %edx,(%esp)
		mov    0x14(%esp),%edx
		imul   %ebx,%edx
		mov    0x1c(%esp),%eax
		imul   data_1aa5dc,%eax
		add    %edx,%eax
		mov    0x18(%esp),%edx
		imul   %ebp,%edx
		mov    data_1aa5e0,%ebx
		sar    $0x10,%eax
		imul   %eax,%ebx
		imul   %ebp,%eax
		sub    %ebx,%edx
		sar    $0x10,%edx
		mov    data_1aa5e0,%ecx
		mov    %edx,0x4(%esp)
		mov    0x18(%esp),%edx
		imul   %ecx,%edx
		add    %edx,%eax
		sar    $0x10,%eax
		mov    %eax,0x1c(%esp)
		mov    (%esp),%eax
		mov    %ax,0x6(%esi)
		mov    0x4(%esp),%eax
		mov    %ax,0x8(%esi)
		mov    0x1c(%esp),%eax
		mov    %ax,0xa(%esi)
		mov    0xa(%esi),%eax
		sar    $0x10,%eax
		mov    %eax,0x14(%esp)
		mov    0xc(%esi),%eax
		sar    $0x10,%eax
		mov    %eax,0x18(%esp)
		mov    0xe(%esi),%eax
		sar    $0x10,%eax
		mov    0x14(%esp),%edx
		mov    %eax,0x1c(%esp)
		imul   data_1aa5dc,%edx
		mov    data_1aa5d8,%ebx
		mov    0x1c(%esp),%eax
		imul   %ebx,%eax
		sub    %eax,%edx
		mov    0x14(%esp),%eax
		imul   %ebx,%eax
		sar    $0x10,%edx
		mov    %edx,(%esp)
		mov    0x1c(%esp),%edx
		imul   data_1aa5dc,%edx
		mov    0x18(%esp),%ebx
		imul   %ebp,%ebx
		add    %edx,%eax
		sar    $0x10,%eax
		mov    %ecx,%edx
		imul   %eax,%edx
		imul   %ebp,%eax
		sub    %edx,%ebx
		mov    0x18(%esp),%edx
		imul   %ecx,%edx
		add    %edx,%eax
		sar    $0x10,%ebx
		sar    $0x10,%eax
		mov    %ebx,0x4(%esp)
		mov    %eax,0x1c(%esp)
		mov    (%esp),%eax
		mov    %ax,0xc(%esi)
		mov    0x4(%esp),%eax
		mov    %ax,0xe(%esi)
		mov    0x1c(%esp),%eax
		mov    %ax,0x10(%esi)
		mov    0x10(%esi),%eax
		sar    $0x10,%eax
		mov    %eax,0x14(%esp)
		mov    0x12(%esi),%eax
		sar    $0x10,%eax
		mov    %eax,0x18(%esp)
		mov    0x14(%esi),%eax
		sar    $0x10,%eax
		mov    %eax,0x1c(%esp)
		mov    0x14(%esp),%edx
		imul   data_1aa5dc,%edx
		mov    data_1aa5d8,%ebx
		mov    0x1c(%esp),%eax
		imul   %ebx,%eax
		sub    %eax,%edx
		mov    %edx,%eax
		sar    $0x10,%eax
		mov    %eax,(%esp)
		mov    0x14(%esp),%eax
		imul   %ebx,%eax
		mov    0x1c(%esp),%edx
		imul   data_1aa5dc,%edx
		add    %edx,%eax
		mov    0x18(%esp),%edx
		imul   %ebp,%edx
		mov    %ecx,%ebx
		sar    $0x10,%eax
		imul   %eax,%ebx
		imul   %ebp,%eax
		sub    %ebx,%edx
		sar    $0x10,%edx
		mov    %edx,0x4(%esp)
		mov    0x18(%esp),%edx
		imul   %ecx,%edx
		add    %edx,%eax
		sar    $0x10,%eax
		mov    %eax,0x1c(%esp)
		mov    (%esp),%eax
		mov    %ax,0x12(%esi)
		mov    0x4(%esp),%eax
		mov    %ax,0x14(%esi)
		mov    0x1c(%esp),%eax
		mov    %ebp,data_1aa5e4
		mov    %ax,0x16(%esi)
		jmp    jump_67486


/*----------------------------------------------------------------*/
func_6700f:
/*----------------------------------------------------------------*/
		mov    0x1e(%esi),%eax
		sar    $0x10,%eax
		cmp    $0x3e8,%eax
		jle    jump_67068
		mov    %edx,%ebx
		dec    %ebx
		mov    %bx,0x20(%esi)
		mov    0x1e(%esi),%eax
		sar    $0x10,%eax
		cmp    $0x3e8,%eax
		jne    jump_67486
		call   ac_LbRandomAnyShort
		test   $0x1f,%al
		jne    jump_67486
		mov    $0x64,%ecx
		mov    0x24(%esi),%ebx
		mov    0x22(%esi),%edx
		mov    0x20(%esi),%eax
		sar    $0x10,%ebx
		sar    $0x10,%edx
		sar    $0x10,%eax
		shl    $0x8,%ebx
		shl    $0x8,%eax
		call   ac_bang_new4
		jmp    jump_67486
	jump_67068:
		call   ac_LbRandomAnyShort
		and    $0x3,%ah
		xor    %edx,%edx
		mov    %ax,%dx
		mov    0x1e(%esi),%eax
		sar    $0x10,%eax
		cmp    %eax,%edx
		jle    jump_670e2
		call   ac_LbRandomAnyShort
		test   $0xf,%al
		jne    jump_670e2
		mov    0x98(%esp),%ebx
		mov    data_1aa5cc,%ax
		movw   $0x0,0x20(%esi)
		mov    0x80(%esp),%edx
		mov    %ax,data_18194e(%ebx)
		mov    %ebx,%eax
		xor    %ebx,%ebx
		mov    $0x23,%ecx
		mov    %bx,data_18196c(%eax)
		mov    %dx,data_1aa5cc
		mov    0x24(%esi),%ebx
		mov    0x22(%esi),%edx
		mov    0x20(%esi),%eax
		sar    $0x10,%ebx
		sar    $0x10,%edx
		sar    $0x10,%eax
		shl    $0x8,%ebx
		shl    $0x8,%eax
		call   ac_bang_new4
		jmp    jump_67486
	jump_670e2:
		mov    0x28(%esi),%eax
		sar    $0x18,%eax
		and    $0x7ff,%eax
		mov    EXPORT_SYMBOL(lbSinTable)(,%eax,4),%edx
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%eax,4),%eax
		mov    %eax,data_1aa5dc
		mov    0x29(%esi),%eax
		sar    $0x18,%eax
		and    $0x7ff,%eax
		mov    0x20(%esi),%cx
		mov    %edx,data_1aa5d8
		mov    EXPORT_SYMBOL(lbSinTable)(,%eax,4),%edx
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%eax,4),%ebp
		movsbw 0x28(%esi),%ax
		mov    %edx,data_1aa5e0
		shl    $0x3,%eax
		mov    0x22(%esi),%dx
		mov    0x24(%esi),%bx
		add    %eax,%edx
		movsbw 0x29(%esi),%ax
		dec    %ecx
		shl    $0x3,%eax
		mov    %cx,0x20(%esi)
		add    %eax,%ebx
		movsbw 0x2a(%esi),%ax
		mov    0x26(%esi),%cx
		shl    $0x3,%eax
		mov    %dx,0x22(%esi)
		add    %eax,%ecx
		mov    0x20(%esi),%eax
		mov    %bx,0x24(%esi)
		sar    $0x10,%eax
		mov    %cx,0x26(%esi)
		test   %eax,%eax
		jl     jump_67175
		cmp    $0x8000,%eax
		jl     jump_671ac
	jump_67175:
		xor    %eax,%eax
		mov    %di,%ax
		imul   $0x2e,%eax,%eax
		mov    data_1aa5cc,%dx
		movw   $0x0,0x20(%esi)
		mov    %ebp,data_1aa5e4
		mov    %dx,data_18194e(%eax)
		xor    %edx,%edx
		mov    %di,data_1aa5cc
		mov    %dx,data_18196c(%eax)
		jmp    jump_67486
	jump_671ac:
		mov    0x22(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jl     jump_671bd
		cmp    $0x8000,%eax
		jle    jump_671f4
	jump_671bd:
		xor    %eax,%eax
		mov    %di,%ax
		imul   $0x2e,%eax,%eax
		mov    data_1aa5cc,%dx
		mov    %ebp,data_1aa5e4
		movw   $0x0,0x20(%esi)
		xor    %esi,%esi
		mov    %dx,data_18194e(%eax)
		mov    %di,data_1aa5cc
		mov    %si,data_18196c(%eax)
		jmp    jump_67486
	jump_671f4:
		mov    0x25(%esi),%eax
		sar    $0x18,%eax
		mov    %eax,%ebx
		mov    %eax,%edx
		sar    $0x5,%ebx
		sub    %ebx,%edx
		mov    %dl,0x28(%esi)
		mov    0x26(%esi),%eax
		sar    $0x18,%eax
		mov    %eax,%edx
		sar    $0x5,%edx
		sub    %edx,%eax
		mov    %al,0x29(%esi)
		mov    0x27(%esi),%eax
		sar    $0x18,%eax
		mov    %eax,%edx
		sar    $0x5,%edx
		sub    %edx,%eax
		mov    %al,0x2a(%esi)
		mov    0x4(%esi),%eax
		sar    $0x10,%eax
		mov    %eax,0x14(%esp)
		mov    0x6(%esi),%eax
		sar    $0x10,%eax
		mov    %eax,0x18(%esp)
		mov    0x8(%esi),%eax
		sar    $0x10,%eax
		mov    0x14(%esp),%edx
		mov    %eax,0x1c(%esp)
		imul   data_1aa5dc,%edx
		mov    data_1aa5d8,%ebx
		mov    0x1c(%esp),%eax
		imul   %ebx,%eax
		sub    %eax,%edx
		sar    $0x10,%edx
		mov    %edx,(%esp)
		mov    0x14(%esp),%edx
		imul   %ebx,%edx
		mov    0x1c(%esp),%eax
		imul   data_1aa5dc,%eax
		mov    0x18(%esp),%ebx
		imul   %ebp,%ebx
		add    %edx,%eax
		mov    data_1aa5e0,%edx
		sar    $0x10,%eax
		imul   %eax,%edx
		imul   %ebp,%eax
		mov    data_1aa5e0,%ecx
		sub    %edx,%ebx
		mov    0x18(%esp),%edx
		imul   %ecx,%edx
		add    %edx,%eax
		sar    $0x10,%ebx
		sar    $0x10,%eax
		mov    %ebx,0x4(%esp)
		mov    %eax,0x1c(%esp)
		mov    (%esp),%eax
		mov    %ax,0x6(%esi)
		mov    0x4(%esp),%eax
		mov    %ax,0x8(%esi)
		mov    0x1c(%esp),%eax
		mov    %ax,0xa(%esi)
		mov    0xa(%esi),%eax
		sar    $0x10,%eax
		mov    %eax,0x14(%esp)
		mov    0xc(%esi),%eax
		sar    $0x10,%eax
		mov    %eax,0x18(%esp)
		mov    0xe(%esi),%eax
		sar    $0x10,%eax
		mov    0x14(%esp),%edx
		mov    %eax,0x1c(%esp)
		imul   data_1aa5dc,%edx
		mov    data_1aa5d8,%ebx
		mov    0x1c(%esp),%eax
		imul   %ebx,%eax
		sub    %eax,%edx
		sar    $0x10,%edx
		mov    %edx,(%esp)
		mov    0x14(%esp),%edx
		imul   %ebx,%edx
		mov    0x1c(%esp),%eax
		imul   data_1aa5dc,%eax
		mov    0x18(%esp),%ebx
		imul   %ebp,%ebx
		add    %edx,%eax
		sar    $0x10,%eax
		mov    %ecx,%edx
		imul   %eax,%edx
		imul   %ebp,%eax
		sub    %edx,%ebx
		mov    0x18(%esp),%edx
		imul   %ecx,%edx
		add    %edx,%eax
		sar    $0x10,%ebx
		sar    $0x10,%eax
		mov    %ebx,0x4(%esp)
		mov    %eax,0x1c(%esp)
		mov    (%esp),%eax
		mov    %ax,0xc(%esi)
		mov    0x4(%esp),%eax
		mov    %ax,0xe(%esi)
		mov    0x1c(%esp),%eax
		mov    %ax,0x10(%esi)
		mov    0x10(%esi),%eax
		sar    $0x10,%eax
		mov    %eax,0x14(%esp)
		mov    0x12(%esi),%eax
		sar    $0x10,%eax
		mov    %eax,0x18(%esp)
		mov    0x14(%esi),%eax
		sar    $0x10,%eax
		mov    %eax,0x1c(%esp)
		mov    0x14(%esp),%edx
		imul   data_1aa5dc,%edx
		mov    data_1aa5d8,%ebx
		mov    0x1c(%esp),%eax
		imul   %ebx,%eax
		sub    %eax,%edx
		sar    $0x10,%edx
		mov    %edx,(%esp)
		mov    0x14(%esp),%edx
		imul   %ebx,%edx
		mov    0x1c(%esp),%eax
		imul   data_1aa5dc,%eax
		mov    0x18(%esp),%ebx
		imul   %ebp,%ebx
		add    %edx,%eax
		sar    $0x10,%eax
		mov    %ecx,%edx
		imul   %eax,%edx
		imul   %ebp,%eax
		sub    %edx,%ebx
		mov    0x18(%esp),%edx
		imul   %ecx,%edx
		add    %edx,%eax
		sar    $0x10,%ebx
		sar    $0x10,%eax
		mov    %ebx,0x4(%esp)
		mov    %eax,0x1c(%esp)
		mov    (%esp),%eax
		mov    %ax,0x12(%esi)
		mov    0x4(%esp),%eax
		mov    %ax,0x14(%esi)
		mov    0x1c(%esp),%eax
		mov    %ax,0x16(%esi)
		mov    0x16(%esi),%eax
		sar    $0x10,%eax
		mov    %eax,0x14(%esp)
		mov    0x18(%esi),%eax
		sar    $0x10,%eax
		mov    %eax,0x18(%esp)
		mov    0x1a(%esi),%eax
		sar    $0x10,%eax
		mov    0x14(%esp),%edx
		mov    %eax,0x1c(%esp)
		imul   data_1aa5dc,%edx
		mov    data_1aa5d8,%ebx
		mov    0x1c(%esp),%eax
		imul   %ebx,%eax
		sub    %eax,%edx
		sar    $0x10,%edx
		mov    %edx,(%esp)
		mov    0x14(%esp),%edx
		imul   %ebx,%edx
		mov    0x1c(%esp),%eax
		imul   data_1aa5dc,%eax
		mov    0x18(%esp),%ebx
		imul   %ebp,%ebx
		add    %edx,%eax
		sar    $0x10,%eax
		mov    %ecx,%edx
		imul   %eax,%edx
		imul   %ebp,%eax
		sub    %edx,%ebx
		mov    0x18(%esp),%edx
		imul   %ecx,%edx
		add    %edx,%eax
		sar    $0x10,%ebx
		sar    $0x10,%eax
		mov    %ebx,0x4(%esp)
		mov    %eax,0x1c(%esp)
		mov    (%esp),%eax
		mov    %ax,0x18(%esi)
		mov    0x4(%esp),%eax
		mov    %ax,0x1a(%esi)
		mov    0x1c(%esp),%eax
		mov    %ebp,data_1aa5e4
		mov    %ax,0x1c(%esi)
	jump_67486:
		mov    data_1aa5e4,%ebp
		inc    %edi
	jump_6748d:
		xor    %eax,%eax
		mov    %di,%ax
		mov    %eax,0x80(%esp)
		cmp    $0x400,%eax
		jge    jump_674df
		imul   $0x2e,%eax,%eax
		mov    $EXPORT_SYMBOL(ex_faces),%esi
		add    %eax,%esi
		mov    %ebp,data_1aa5e4
		mov    0x20(%esi),%dx
		mov    %eax,0x98(%esp)
		test   %dx,%dx
		je     jump_67486
		mov    0x60(%esp),%ecx
		mov    0x4(%esi),%al
		inc    %ecx
		dec    %al
		mov    %ecx,0x60(%esp)
		cmp    $0x5,%al
		ja     jump_67486
		and    $0xff,%eax
		jmp    *%cs:vtable_654b0(,%eax,4)
	jump_674df:
		mov    0x60(%esp),%esi
		mov    %ebp,data_1aa5e4
		test   %esi,%esi
		jne    jump_674f7
		movl   $0x1,EXPORT_SYMBOL(dont_bother_with_explode_faces)
	jump_674f7:
		mov    data_1aa5e4,%ebp
		add    $0xa8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret

vtable_67604:
		.long   func_67796
		.long   func_677f9
		.long   func_67838
		.long   func_67864


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_set_static_on_fire)	/* 0x067614 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    game_full_lights,%edi
		mov    %eax,%esi
		mov    EXPORT_SYMBOL(sthings),%eax
		lea    -0x15f90(%eax),%edx
		cmp    %edx,%esi
		jb     jump_67a84
		cmp    %eax,%esi
		ja     jump_67a84
		movw   $0x24,0xa(%esi)
		mov    0xc(%esi),%ah
		movw   $0xa,0x2a(%esi)
		or     $0x2,%ah
		mov    %ah,0xc(%esi)
		mov    0x30(%esi),%ax
		xor    %ebx,%ebx
		test   %ax,%ax
		je     jump_676c0
	jump_6765c:
		xor    %edx,%edx
		mov    %bx,%dx
		inc    %ebx
		cmp    $0x3e8,%edx
		jge    jump_676c0
		cmp    EXPORT_SYMBOL(next_full_light),%ax
		jae    jump_676c0
		xor    %edx,%edx
		mov    %ax,%dx
		shl    $0x5,%edx
		add    %edi,%edx
		mov    0x4(%edx),%cx
		movw   $0x0,(%edx)
		cmp    EXPORT_SYMBOL(next_light_command),%cx
		ja     jump_676aa
		test   %cx,%cx
		je     jump_676aa
		mov    %ecx,%edx
		and    $0xffff,%edx
		imul   $0x24,%edx,%ecx
		mov    game_light_commands,%edx
		movb   $0x5,0x1(%ecx,%edx,1)
	jump_676aa:
		xor    %edx,%edx
		mov    %ax,%dx
		mov    %edx,%eax
		shl    $0x5,%eax
		mov    %edi,%edx
		mov    0x6(%edx,%eax,1),%ax
		test   %ax,%ax
		jne    jump_6765c
	jump_676c0:
		xor    %eax,%eax
		mov    0x26(%esi),%ax
		cmp    $0x424,%eax
		jl     jump_676eb
		cmp    $0x428,%eax
		jg     jump_676eb
		movw   $0xd,0xa(%esi)
		mov    %edi,game_full_lights
		movw   $0x0,0x28(%esi)
		jmp    jump_67a84
	jump_676eb:
		xor    %eax,%eax
		mov    0x26(%esi),%ax
		cmp    $0x400,%eax
		jle    jump_67707
		cmp    $0x405,%eax
		jl     jump_678bb
	jump_67707:
		xor    %eax,%eax
		mov    0x26(%esi),%ax
		mov    %edi,game_full_lights
		cmp    $0x3ec,%eax
		jle    jump_678e8
		cmp    $0x3f0,%eax
		jge    jump_678e8
		push   $0x28
		mov    $0x39c,%ecx
		mov    0x20(%esi),%ebx
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		sar    $0x8,%ebx
		sar    $0x8,%edx
		sar    $0x8,%eax
		call   create_scale_effect
		test   %eax,%eax
		je     jump_6778b
		movb   $0x39,0x8(%eax)
		movw   $0x0,0x12(%eax)
		movw   $0x0,0x26(%eax)
		movw   $0x0,0x2c(%eax)
		movw   $0x0,0x2e(%eax)
		movw   $0x0,0x30(%eax)
		mov    0x18(%esi),%edx
		sar    $0x8,%edx
		mov    %dx,0x32(%eax)
		mov    0x1c(%esi),%edx
		sar    $0x8,%edx
		mov    %dx,0x34(%eax)
		mov    0x20(%esi),%edx
		sar    $0x8,%edx
		mov    %dx,0x36(%eax)
	jump_6778b:
		mov    0x14(%esi),%eax
		sar    $0x10,%eax
		jmp    jump_67a78


/*----------------------------------------------------------------*/
func_67796:
/*----------------------------------------------------------------*/
		mov    0x20(%esi),%ebx
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		sar    $0x8,%ebx
		sar    $0x8,%edx
		sar    $0x8,%eax
		call   init_nuclear_bomb
		test   %eax,%eax
		je     jump_677d7
		push   $0x3
		mov    $0x40,%ecx
		push   $0xffffffff
		mov    $0x7f,%ebx
		movb   $0x20,0x9(%eax)
		push   $0x64
		mov    $0x20,%edx
		movb   $0x4,0x8(%eax)
		call   ac_play_dist_ssample
	jump_677d7:
		mov    nstart_ani,%eax
		movw   $0x422,0x26(%esi)
		mov    0x844(%eax),%ax
		mov    %ax,0x24(%esi)
		mov    game_full_lights,%edi
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_677f9:
/*----------------------------------------------------------------*/
		mov    0x20(%esi),%ebx
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		sar    $0x8,%ebx
		sar    $0x8,%edx
		sar    $0x8,%eax
		call   init_nuclear_bomb
		test   %eax,%eax
		je     jump_677d7
		push   $0x3
		mov    $0x40,%ecx
		push   $0xffffffff
		mov    $0x7f,%ebx
		movb   $0x20,0x9(%eax)
		push   $0x64
		mov    $0x1f,%edx
		movb   $0x5,0x8(%eax)
		call   ac_play_dist_ssample
		jmp    jump_677d7


/*----------------------------------------------------------------*/
func_67838:
/*----------------------------------------------------------------*/
		mov    0x20(%esi),%ebx
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		sar    $0x8,%ebx
		sar    $0x8,%edx
		sar    $0x8,%eax
		call   init_nuclear_bomb
		test   %eax,%eax
		je     jump_677d7
		movw   $0x13,0x28(%eax)
		movw   $0xfffb,0x14(%eax)
		jmp    jump_677d7


/*----------------------------------------------------------------*/
func_67864:
/*----------------------------------------------------------------*/
		push   $0x3
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x25,%edx
		mov    %esi,%eax
		call   ac_play_dist_ssample
		mov    $0x14,%ecx
		mov    0x20(%esi),%ebx
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		call   ac_bang_new4
		push   $0x0
		mov    $0x300,%ecx
		mov    0x20(%esi),%ebx
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		push   $0xc8
		sar    $0x8,%ebx
		sar    $0x8,%edx
		sar    $0x8,%eax
		call   do_shockwave
		jmp    jump_677d7
	jump_678bb:
		mov    0x26(%esi),%ax
		mov    %edi,game_full_lights
		sub    $0x401,%eax
		movw   $0x64,0x28(%esi)
		cmp    $0x3,%ax
		ja     jump_677d7
		and    $0xffff,%eax
		jmp    *%cs:vtable_67604(,%eax,4)
	jump_678e8:
		xor    %eax,%eax
		mov    0x26(%esi),%ax
		cmp    $0x3e7,%eax
		je     jump_6792a
		cmp    $0x3ea,%eax
		je     jump_6792a
		cmp    $0x3ec,%eax
		je     jump_6792a
		cmp    $0x3f0,%eax
		je     jump_6792a
		cmp    $0x408,%eax
		je     jump_6792a
		cmp    $0x40d,%eax
		je     jump_6792a
		cmp    $0x40e,%eax
		je     jump_6792a
		cmp    $0x41a,%eax
		jne    jump_679db
	jump_6792a:
		push   $0x1
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x36,%edx
		mov    %esi,%eax
		call   ac_play_dist_ssample
		movw   $0xc,0xa(%esi)
		movw   $0x9,0x28(%esi)
		xor    %eax,%eax
		mov    0x26(%esi),%ax
		movw   $0xc,0xa(%esi)
		cmp    $0x40e,%eax
		je     jump_6796c
		cmp    $0x3ec,%eax
		jne    jump_67986
	jump_6796c:
		mov    $0x78,%ecx
		mov    0x20(%esi),%ebx
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		call   ac_bang_new4
		mov    $0x9c4,%ebx
		jmp    jump_6799e
	jump_67986:
		mov    $0x73,%ecx
		mov    0x20(%esi),%ebx
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		call   ac_bang_new4
		mov    $0x1388,%ebx
	jump_6799e:
		mov    0x20(%esi),%edx
		mov    0x18(%esi),%eax
		call   apply_unkn_vehicle50_damage
		push   $0x0
		mov    $0x300,%ecx
		mov    0x20(%esi),%ebx
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		push   $0x64
		sar    $0x8,%ebx
		sar    $0x8,%edx
		sar    $0x8,%eax
		movw   $0x41c,0x26(%esi)
		call   do_shockwave
		mov    game_full_lights,%edi
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_679db:
		cmp    $0x3e9,%eax
		je     jump_67b84
		cmp    $0x406,%eax
		je     jump_67b84
		cmp    $0x40a,%eax
		je     jump_67b84
		cmp    $0x40b,%eax
		je     jump_67b84
		cmp    $0x417,%eax
		je     jump_67b84
		cmp    $0x419,%eax
		je     jump_67b84
		push   $0x3
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x3c,%ebx
		push   $0x64
		mov    $0x25,%edx
		mov    %esi,%eax
		call   ac_play_dist_ssample
		mov    $0x14,%ecx
		mov    0x20(%esi),%ebx
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		call   ac_bang_new4
		push   $0x0
		mov    $0x300,%ecx
		mov    0x20(%esi),%ebx
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		push   $0x64
		sar    $0x8,%ebx
		sar    $0x8,%edx
		sar    $0x8,%eax
		call   do_shockwave
		mov    0x14(%esi),%eax
		sar    $0x10,%eax
		movw   $0x28,0x28(%esi)
	jump_67a78:
		call   ac_remove_sthing
		mov    %esi,%eax
		call   ac_delete_snode
	jump_67a84:
		mov    game_full_lights,%edi
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_67a90:
		mov    $0x4,%ecx
		mov    0x20(%esi),%ebx
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		sar    $0x5,%edx
		movw   $0x425,0x26(%esi)
		call   FIRE_new
		mov    $0x4,%ecx
		mov    0x20(%esi),%ebx
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		sar    $0x5,%edx
		call   FIRE_new
		mov    game_full_lights,%edi
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_67ace:
		mov    $0x2,%ecx
		mov    0x20(%esi),%ebx
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		sar    $0x5,%edx
		movw   $0x428,0x26(%esi)
		call   FIRE_new
		mov    game_full_lights,%edi
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_67af6:
		mov    $0x2,%ecx
		mov    0x20(%esi),%ebx
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		sar    $0x5,%edx
		movw   $0x426,0x26(%esi)
		call   FIRE_new
		mov    game_full_lights,%edi
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_67b1e:
		mov    $0x2,%ecx
		mov    0x20(%esi),%ebx
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		sar    $0x5,%edx
		movw   $0x429,0x26(%esi)
		call   FIRE_new
		mov    game_full_lights,%edi
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_67b46:
		mov    $0x4,%ecx
		mov    0x20(%esi),%ebx
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		sar    $0x5,%edx
		movw   $0x427,0x26(%esi)
		call   FIRE_new
		mov    $0x4,%ecx
		mov    0x20(%esi),%ebx
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		sar    $0x5,%edx
		call   FIRE_new
		mov    game_full_lights,%edi
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_67b84:
		movw   $0x28,0x28(%esi)
		mov    game_full_lights,%edi
		mov    0x26(%esi),%ax
		movw   $0xc,0xa(%esi)
		cmp    $0x40b,%ax
		jb     jump_67bc8
		jbe    jump_67af6
		cmp    $0x417,%ax
		jb     jump_67a84
		jbe    jump_67b1e
		cmp    $0x419,%ax
		je     jump_67b46
		mov    game_full_lights,%edi
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_67bc8:
		cmp    $0x3e9,%ax
		jb     jump_67a84
		jbe    jump_67a90
		cmp    $0x40a,%ax
		je     jump_67ace
		mov    game_full_lights,%edi
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_build_polygon_circle_2d)	/* 0x067BF0 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x34,%esp
		mov    EXPORT_SYMBOL(next_screen_point),%si
		mov    %eax,0x14(%esp)
		mov    %edx,0x10(%esp)
		mov    EXPORT_SYMBOL(overall_scale)-2,%eax
		sar    $0x10,%eax
		imul   %eax,%ebx
		mov    0x14(%esp),%eax
		sar    $0x8,%ebx
		mov    $0x80,%edx
		add    %ebx,%eax
		mov    %dx,0x30(%esp)
		test   %eax,%eax
		jl     jump_67ea9
		mov    0x14(%esp),%eax
		mov    EXPORT_SYMBOL(vec_window_width),%edx
		sub    %ebx,%eax
		cmp    %edx,%eax
		jg     jump_67ea9
		mov    0x10(%esp),%eax
		add    %ebx,%eax
		test   %eax,%eax
		jl     jump_67ea9
		mov    0x10(%esp),%eax
		mov    EXPORT_SYMBOL(vec_window_height),%ecx
		sub    %ebx,%eax
		cmp    %ecx,%eax
		jg     jump_67ea9
		cmp    $0x96,%ebx
		jle    jump_67c72
		movw   $0x10,0x30(%esp)
		jmp    jump_67c8c
	jump_67c72:
		cmp    $0x32,%ebx
		jle    jump_67c80
		movw   $0x20,0x30(%esp)
		jmp    jump_67c8c
	jump_67c80:
		cmp    $0xa,%ebx
		jle    jump_67c8c
		movw   $0x40,0x30(%esp)
	jump_67c8c:
		mov    0x14(%esp),%eax
		add    %ebx,%eax
		xor    %edx,%edx
		mov    %eax,0x1c(%esp)
		mov    0x10(%esp),%eax
		mov    %si,%dx
		mov    %eax,0x28(%esp)
		mov    EXPORT_SYMBOL(game_screen_point_pool),%eax
		mov    0x14(%esp),%ecx
		mov    %esi,0x18(%esp)
		mov    %cx,(%eax,%edx,8)
		xor    %edx,%edx
		mov    0x30(%esp),%ecx
		mov    %si,%dx
		add    %ecx,%ecx
		shl    $0x3,%edx
		inc    %esi
		add    %edx,%eax
		mov    0x10(%esp),%edx
		mov    %ecx,0x2c(%esp)
		mov    %dx,0x2(%eax)
		jmp    jump_67cf8
	jump_67cd3:
		mov    0xc(%esp),%eax
		mov    0x2c(%esp),%edi
		mov    EXPORT_SYMBOL(next_special_face4),%dx
		mov    %eax,0x1c(%esp)
		inc    %edx
		add    %edi,%ecx
		mov    0x8(%esp),%eax
		mov    %dx,EXPORT_SYMBOL(next_special_face4)
		mov    %eax,0x28(%esp)
	jump_67cf8:
		movswl %cx,%edx
		cmp    $0x800,%edx
		jg     jump_67ea9
		mov    %ecx,%eax
		and    $0x7,%ah
		movswl %ax,%edi
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%edi,4),%eax
		mov    %eax,(%esp)
		mov    EXPORT_SYMBOL(lbSinTable)(,%edi,4),%eax
		imul   %ebx,%eax
		mov    0x2e(%esp),%edi
		sar    $0x10,%edi
		sub    %edi,%edx
		and    $0x7ff,%edx
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%edx,4),%edi
		imul   %ebx,%edi
		mov    EXPORT_SYMBOL(lbSinTable)(,%edx,4),%edx
		imul   %ebx,%edx
		mov    0x14(%esp),%ebp
		sar    $0x10,%edi
		add    %edi,%ebp
		mov    %ebp,0x4(%esp)
		mov    0x4(%esp),%edi
		sar    $0x10,%edx
		mov    %edi,0x24(%esp)
		add    0x10(%esp),%edx
		mov    %edx,0x20(%esp)
		mov    (%esp),%edx
		imul   %ebx,%edx
		mov    0x14(%esp),%edi
		sar    $0x10,%edx
		sar    $0x10,%eax
		add    %edx,%edi
		mov    0x10(%esp),%edx
		add    %eax,%edx
		mov    EXPORT_SYMBOL(mem_game)+585,%eax
		mov    %edx,0x8(%esp)
		mov    EXPORT_SYMBOL(next_special_face),%edx
		dec    %eax
		sar    $0x10,%edx
		mov    %edi,0xc(%esp)
		cmp    %eax,%edx
		jg     jump_67ea9
		imul   $0x28,%edx,%edi
		mov    game_special_object_faces4,%edx
		mov    %esi,%eax
		add    %edi,%edx
		add    $0x2,%eax
		movb   $0x11,0xb(%edx)
		mov    %ax,(%edx)
		mov    %esi,%eax
		movb   $0x0,0xa(%edx)
		inc    %eax
		mov    %ax,0x2(%edx)
		mov    0x18(%esp),%eax
		mov    %ax,0x4(%edx)
		xor    %ah,%ah
		mov    %si,0x6(%edx)
		mov    0x50(%esp),%al
		mov    %ax,0x10(%edx)
		mov    %eax,%edi
		mov    %ax,0x12(%edx)
		mov    0x54(%esp),%al
		mov    %di,0x16(%edx)
		xor    %edi,%edi
		mov    %ax,0x14(%edx)
		mov    0x4c(%esp),%al
		mov    %si,%di
		mov    %ax,0xc(%edx)
		mov    EXPORT_SYMBOL(game_screen_point_pool),%edx
		mov    0x1c(%esp),%eax
		mov    %ax,(%edx,%edi,8)
		xor    %edi,%edi
		mov    %si,%di
		mov    0x28(%esp),%eax
		inc    %esi
		mov    %ax,0x2(%edx,%edi,8)
		xor    %edi,%edi
		mov    %si,%di
		mov    0x24(%esp),%eax
		mov    %ax,(%edx,%edi,8)
		xor    %edi,%edi
		mov    %si,%di
		mov    0x20(%esp),%eax
		inc    %esi
		mov    %ax,0x2(%edx,%edi,8)
		xor    %edi,%edi
		mov    %si,%di
		mov    0xc(%esp),%eax
		mov    %ax,(%edx,%edi,8)
		xor    %edi,%edi
		mov    %si,%di
		mov    0x8(%esp),%eax
		mov    %ax,0x2(%edx,%edi,8)
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(next_draw_item),%dx
		inc    %esi
		cmp    $0xafc7,%edx
		jge    jump_67cd3
		mov    EXPORT_SYMBOL(p_current_draw_item),%edx
		mov    EXPORT_SYMBOL(next_special_face4),%ax
		xor    %edi,%edi
		movb   $0xc,(%edx)
		mov    0x58(%esp),%di
		mov    %ax,0x1(%edx)
		mov    EXPORT_SYMBOL(buckets)(,%edi,2),%ax
		mov    %ax,0x3(%edx)
		mov    EXPORT_SYMBOL(next_draw_item),%ax
		add    $0x5,%edx
		mov    %ax,EXPORT_SYMBOL(buckets)(,%edi,2)
		inc    %eax
		mov    %edx,EXPORT_SYMBOL(p_current_draw_item)
		mov    %ax,EXPORT_SYMBOL(next_draw_item)
		jmp    jump_67cd3
	jump_67ea9:
		mov    %si,EXPORT_SYMBOL(next_screen_point)
		add    $0x34,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x18


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_build_time_pod)	/* 0x0681FC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   $0x3f
		xor    %edx,%edx
		push   $0x10
		mov    EXPORT_SYMBOL(colour_lookup)+4,%dl
		mov    0x20(%eax),%ebx
		push   %edx
		mov    game_textures,%edx
		xor    %ecx,%ecx
		push   %edx
		sar    $0x8,%ebx
		mov    0x14(%eax),%cx
		push   $0xf
		sar    $0x4,%ecx
		mov    0x1c(%eax),%edx
		push   $0x1e
		sar    $0x8,%edx
		mov    0x18(%eax),%eax
		add    $0xa,%edx
		sar    $0x8,%eax
		call   ac_build_polygon_circle
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_build_stasis_pod)	/* 0x068240 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x2c,%esp
		xor    %bl,%bl
		mov    %bl,0x24(%esp)
		mov    EXPORT_SYMBOL(colour_lookup)+2,%bl
		mov    %bl,0x20(%esp)
		mov    0x18(%eax),%ebx
		sar    $0x8,%ebx
		mov    %ebx,0x4(%esp)
		mov    0x1c(%eax),%ebx
		sar    $0x8,%ebx
		mov    %ebx,0x10(%esp)
		mov    0x20(%eax),%ebx
		sar    $0x8,%ebx
		mov    0x4(%esp),%esi
		mov    %ebx,0x18(%esp)
		mov    engn_xc,%ebx
		mov    0x18(%esp),%edi
		sub    %ebx,%esi
		sub    engn_zc,%edi
		xor    %ebx,%ebx
		mov    %esi,0x4(%esp)
		mov    0x14(%eax),%bx
		mov    %edi,0x18(%esp)
		mov    %ebx,(%esp)
		test   %ebx,%ebx
		jle    jump_68433
		mov    0x14(%eax),%eax
		mov    gameturn,%ebx
		sar    $0x10,%eax
		shl    $0x4,%ebx
		shl    $0x4,%eax
		sub    %eax,%ebx
		mov    %ebx,%eax
		and    $0x1ff,%eax
		mov    %ax,0x1c(%esp)
		jmp    jump_682d2
	jump_682c8:
		addw   $0x64,0x1c(%esp)
		incb   0x24(%esp)
	jump_682d2:
		xor    %eax,%eax
		mov    0x24(%esp),%al
		cmp    $0x8,%eax
		jge    jump_68433
		andb   $0x1,0x1d(%esp)
		mov    0x1a(%esp),%eax
		sar    $0x10,%eax
		mov    (%esp),%edi
		imul   EXPORT_SYMBOL(lbSinTable)+2048(,%eax,4),%edi
		mov    (%esp),%esi
		mov    EXPORT_SYMBOL(lbSinTable)(,%eax,4),%eax
		imul   %esi,%eax
		mov    0x10(%esp),%ebp
		sar    $0x10,%edi
		xor    %bl,%bl
		sar    $0x13,%eax
		mov    %bl,0x28(%esp)
		xor    %esi,%esi
		add    %eax,%ebp
		jmp    jump_6838b
	jump_6831b:
		mov    $0x30,%eax
	jump_68320:
		shl    $0x8,%eax
		mov    %eax,0xc(%esp)
		xor    %eax,%eax
		mov    0xc(%esp),%ebx
		mov    0x20(%esp),%al
		add    %ebx,%eax
		mov    EXPORT_SYMBOL(pixmap)(%eax),%al # pixmap.fade_table[?]
		and    $0xff,%eax
		push   %eax
		mov    0x1c(%esp),%ebx
		push   %edx
		mov    0x10(%esp),%edx
		mov    0xc(%esp),%eax
		add    %edx,%ebx
		mov    0x1c(%esp),%edx
		push   %ebp
		add    %edx,%eax
		mov    %ebp,%edx
		call   ac_draw_mapwho_vect
		test   %ax,%ax
		je     jump_68374
		and    $0xffff,%eax
		imul   $0xb,%eax,%eax
		mov    EXPORT_SYMBOL(game_sort_lines),%edx
		movb   $0x2,0xa(%edx,%eax,1)
	jump_68374:
		mov    0x4(%esp),%ecx
		mov    0x14(%esp),%ebx
		mov    0x18(%esp),%edx
		mov    0x8(%esp),%eax
		add    $0x20,%esi
		add    %ebx,%ecx
		add    %eax,%edx
	jump_6838b:
		movswl %si,%eax
		cmp    $0x800,%eax
		jge    jump_682c8
		xor    %eax,%eax
		mov    0x28(%esp),%al
		test   %eax,%eax
		jne    jump_683e7
		mov    gameturn,%edx
		movswl %si,%eax
		shl    $0x4,%edx
		add    %edx,%eax
		add    $0x7e0,%eax
		mov    $0x1,%cl
		and    $0x7ff,%eax
		mov    %cl,0x28(%esp)
		mov    EXPORT_SYMBOL(lbSinTable)(,%eax,4),%ecx
		imul   %edi,%ecx
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%eax,4),%edx
		imul   %edi,%edx
		mov    0x18(%esp),%ebx
		mov    0x4(%esp),%eax
		sar    $0x10,%ecx
		sar    $0x10,%edx
		add    %eax,%ecx
		add    %ebx,%edx
	jump_683e7:
		mov    gameturn,%eax
		movswl %si,%ebx
		shl    $0x4,%eax
		add    %ebx,%eax
		and    $0x7ff,%eax
		mov    EXPORT_SYMBOL(lbSinTable)(,%eax,4),%ebx
		imul   %edi,%ebx
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%eax,4),%eax
		imul   %edi,%eax
		sar    $0x10,%eax
		mov    %eax,0x8(%esp)
		movswl %si,%eax
		sar    $0x10,%ebx
		sar    $0x9,%eax
		mov    %ebx,0x14(%esp)
		test   $0x1,%al
		je     jump_6831b
		mov    $0x10,%eax
		jmp    jump_68320
	jump_68433:
		add    $0x2c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_build_wobble_line)	/* 0x0687AC */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x40,%esp
		mov    %eax,%edi
		mov    %edx,%esi
		mov    %ebx,0x4(%esp)
		mov    0x50(%esp),%eax
		mov    0x54(%esp),%edx
		mov    %edi,0x8(%esp)
		mov    %esi,0x2c(%esp)
		mov    %ecx,0x20(%esp)
		mov    %eax,0x28(%esp)
		shl    $0x7,%edi
		shl    $0x7,%esi
		shl    $0x7,%eax
		shl    $0x7,%ecx
		sub    %esi,%eax
		sub    %edi,%ecx
		mov    %eax,0x18(%esp)
		mov    %ecx,%eax
		imul   %ecx,%eax
		xor    %bl,%bl
		mov    %bl,0x34(%esp)
		mov    0x4(%esp),%ebx
		shl    $0x7,%edx
		shl    $0x7,%ebx
		sub    %ebx,%edx
		mov    %edx,0x14(%esp)
		mov    0x18(%esp),%edx
		imul   %edx,%edx
		mov    %ecx,0x24(%esp)
		add    %edx,%eax
		mov    %ebx,0x4(%esp)
		call   ac_LbSqrL
		mov    %eax,%edx
		test   %eax,%eax
		je     jump_68c57
		mov    $0xa,%ebx
		sar    $0x1f,%edx
		idiv   %ebx
		sar    $0x7,%eax
		mov    0x58(%esp),%ecx
		mov    %eax,0x1c(%esp)
		test   %ecx,%ecx
		je     jump_6884d
		testb  $0x20,0xd(%ecx)
		je     jump_6884d
		mov    $0x1,%cl
		lea    (%eax,%eax,1),%ebp
		mov    %cl,0x34(%esp)
		mov    %ebp,0x1c(%esp)
	jump_6884d:
		cmpl   $0x1,0x1c(%esp)
		jge    jump_6885c
		movl   $0x1,0x1c(%esp)
	jump_6885c:
		mov    0x24(%esp),%eax
		mov    %eax,%edx
		mov    0x1c(%esp),%ebx
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,0x24(%esp)
		mov    0x18(%esp),%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,0x18(%esp)
		mov    0x14(%esp),%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		idiv   %ebx
		mov    0x18(%esp),%edx
		imul   %edx,%edx
		mov    %eax,0x14(%esp)
		mov    0x24(%esp),%eax
		imul   %eax,%eax
		add    %edx,%eax
		call   ac_LbSqrL
		mov    0x5c(%esp),%al
		sub    $0x6e,%al
		mov    $0x1f,%ah
		sub    %al,%ah
		mov    $0x1,%ecx
		mov    %ah,%al
		mov    %ebx,%ebp
		add    $0x20,%al
		mov    %ecx,0x30(%esp)
		mov    %al,0x3c(%esp)
		mov    %ebp,%eax
		mov    %edi,%ebx
		add    %ecx,%eax
		mov    %esi,%edx
		mov    %eax,0x10(%esp)
		cmp    %ecx,%eax
		jg     jump_688e9
		jmp    jump_68c57
	jump_688d4:
		mov    0x30(%esp),%eax
		inc    %eax
		mov    0x10(%esp),%ecx
		mov    %eax,0x30(%esp)
		cmp    %ecx,%eax
		jge    jump_68c57
	jump_688e9:
		mov    0x24(%esp),%eax
		mov    0x18(%esp),%ecx
		mov    %ebx,(%esp)
		mov    %edx,%ebp
		add    %ecx,%esi
		mov    0x34(%esp),%ch
		add    %eax,%edi
		test   %ch,%ch
		je     jump_68a46
		mov    0x30(%esp),%eax
		cmp    $0x1,%eax
		jne    jump_689d7
		mov    0x8(%esp),%eax
		mov    gameturn,%ebp
		add    %ebp,%eax
		and    $0x1f,%eax
		mov    EXPORT_SYMBOL(zig_zag)(,%eax,2),%ax
		xor    %ah,%ah
		and    $0x7,%al
		mov    %eax,%ecx
		and    $0xffff,%ecx
		mov    EXPORT_SYMBOL(overall_scale)-2,%eax
		shl    $0x7,%ecx
		sar    $0x10,%eax
		sub    $0x200,%ecx
		imul   %eax,%ecx
		sar    $0x8,%ecx
		add    %ecx,%ebx
		mov    %ebx,(%esp)
		mov    0x2c(%esp),%ebx
		add    %ebp,%ebx
		and    $0x1f,%ebx
		mov    EXPORT_SYMBOL(zig_zag)(,%ebx,2),%bx
		xor    %bh,%bh
		and    $0x7,%bl
		and    $0xffff,%ebx
		shl    $0x7,%ebx
		sub    $0x200,%ebx
		imul   %ebx,%eax
		sar    $0x8,%eax
		lea    (%edx,%eax,1),%ebp
		call   ac_LbRandomPosShort
		xor    %ah,%ah
		and    $0x7,%al
		mov    %eax,%edx
		and    $0xffff,%edx
		mov    EXPORT_SYMBOL(overall_scale)-2,%eax
		shl    $0x7,%edx
		sar    $0x10,%eax
		sub    $0x200,%edx
		imul   %edx,%eax
		sar    $0x8,%eax
		lea    (%edi,%eax,1),%ebx
		call   ac_LbRandomPosShort
		xor    %ah,%ah
		and    $0x7,%al
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(overall_scale)-2,%edx
		shl    $0x7,%eax
		sar    $0x10,%edx
		sub    $0x200,%eax
		imul   %eax,%edx
		sar    $0x8,%edx
		add    %esi,%edx
		jmp    jump_68aa6
	jump_689d7:
		cmp    0x1c(%esp),%eax
		jne    jump_68aa6
		mov    0x20(%esp),%eax
		add    gameturn,%eax
		and    $0x1f,%eax
		mov    EXPORT_SYMBOL(zig_zag)(,%eax,2),%ax
		xor    %ah,%ah
		and    $0x7,%al
		mov    %eax,%ebx
		and    $0xffff,%ebx
		mov    EXPORT_SYMBOL(overall_scale)-2,%eax
		shl    $0x7,%ebx
		sar    $0x10,%eax
		sub    $0x200,%ebx
		imul   %eax,%ebx
		mov    0x28(%esp),%edx
		add    gameturn,%edx
		and    $0x1f,%edx
		mov    EXPORT_SYMBOL(zig_zag)(,%edx,2),%dx
		xor    %dh,%dh
		sar    $0x8,%ebx
		and    $0x7,%dl
		add    %edi,%ebx
		and    $0xffff,%edx
		shl    $0x7,%edx
		sub    $0x200,%edx
		jmp    jump_68a9d
	jump_68a46:
		xor    %edx,%edx
		call   ac_LbRandomPosShort
		mov    %ax,%dx
		mov    $0x10,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    EXPORT_SYMBOL(overall_scale)-2,%eax
		shl    $0x7,%edx
		sar    $0x10,%eax
		sub    $0x400,%edx
		imul   %edx,%eax
		sar    $0x8,%eax
		xor    %edx,%edx
		lea    (%edi,%eax,1),%ebx
		call   ac_LbRandomPosShort
		mov    %ax,%dx
		mov    $0x10,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    EXPORT_SYMBOL(overall_scale)-2,%eax
		shl    $0x7,%edx
		sar    $0x10,%eax
		sub    $0x400,%edx
	jump_68a9d:
		imul   %edx,%eax
		sar    $0x8,%eax
		lea    (%esi,%eax,1),%edx
	jump_68aa6:
		mov    0x14(%esp),%eax
		add    %eax,0x4(%esp)
		test   %edi,%edi
		jle    jump_688d4
		mov    %edi,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+32,%ecx # lbDisplay.GraphicsScreenWidth
		sar    $0x7,%eax
		cmp    %ecx,%eax
		jge    jump_688d4
		test   %esi,%esi
		jle    jump_688d4
		mov    %esi,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+36,%ecx # lbDisplay.GraphicsScreenHeight
		sar    $0x7,%eax
		cmp    %ecx,%eax
		jge    jump_688d4
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(mem_game)+769,%ecx
		mov    EXPORT_SYMBOL(next_sort_line),%ax
		cmp    %ecx,%eax
		jge    jump_68c57
		mov    (%esp),%ecx
		mov    EXPORT_SYMBOL(p_current_sort_line),%eax
		sar    $0x7,%ebp
		sar    $0x7,%ecx
		mov    %ebp,0xc(%esp)
		mov    %cx,(%eax)
		mov    0xc(%esp),%ecx
		mov    %cx,0x2(%eax)
		mov    %ebx,%ecx
		sar    $0x7,%ecx
		mov    %cx,0x4(%eax)
		mov    %edx,%ecx
		sar    $0x7,%ecx
		mov    %cx,0x6(%eax)
		cmpb   $0x0,0x34(%esp)
		je     jump_68b45
		mov    0x58(%esp),%ecx
		mov    0x26(%ecx),%ecx
		sar    $0x10,%ecx
		cmp    $0x1,%ecx
		jge    jump_68b45
		movb   $0x2,0xa(%eax)
		jmp    jump_68b4e
	jump_68b45:
		mov    EXPORT_SYMBOL(p_current_sort_line),%eax
		movb   $0x1,0xa(%eax)
	jump_68b4e:
		mov    (%esp),%al
		add    0x30(%esp),%al
		add    0x5c(%esp),%al
		and    $0x1f,%al
		add    $0x20,%al
		movzbl 0x5c(%esp),%ebp
		mov    %al,0x38(%esp)
		cmp    $0x64,%ebp
		jge    jump_68b82
		mov    EXPORT_SYMBOL(p_current_sort_line),%eax
		mov    EXPORT_SYMBOL(colour_lookup)+4,%cl
		mov    %cl,0x8(%eax)
		mov    0x38(%esp),%cl
		mov    %cl,0x9(%eax)
		jmp    jump_68bc6
	jump_68b82:
		mov    EXPORT_SYMBOL(p_current_sort_line),%eax
		movb   $0x0,0xa(%eax)
		cmp    $0x6e,%ebp
		jge    jump_68b9f
		mov    EXPORT_SYMBOL(colour_lookup)+1,%cl
		movb   $0x20,0x9(%eax)
		mov    %cl,0x8(%eax)
		jmp    jump_68bc6
	jump_68b9f:
		mov    EXPORT_SYMBOL(colour_lookup)+4,%cl
		mov    %cl,0x8(%eax)
		cmp    $0x8e,%ebp
		jge    jump_68bb6
		mov    0x3c(%esp),%cl
		jmp    jump_68bba
	jump_68bb6:
		mov    0x38(%esp),%cl
	jump_68bba:
		mov    %cl,0x9(%eax)
		mov    EXPORT_SYMBOL(p_current_sort_line),%eax
		movb   $0x0,0xa(%eax)
	jump_68bc6:
		mov    0x4(%esp),%eax
		sar    $0x7,%eax
		add    $0x1388,%eax
		test   %eax,%eax
		jge    jump_68bd8
		xor    %eax,%eax
	jump_68bd8:
		cmp    $0x2710,%eax
		jl     jump_68be4
		mov    $0x270f,%eax
	jump_68be4:
		xor    %ecx,%ecx
		mov    EXPORT_SYMBOL(next_draw_item),%cx
		cmp    $0xafc7,%ecx
		jge    jump_68c36
		mov    EXPORT_SYMBOL(p_current_draw_item),%ebp
		mov    EXPORT_SYMBOL(next_sort_line),%cx
		movb   $0xb,0x0(%ebp)
		mov    %cx,0x1(%ebp)
		mov    EXPORT_SYMBOL(buckets)(,%eax,2),%cx
		mov    %cx,0x3(%ebp)
		mov    EXPORT_SYMBOL(next_draw_item),%cx
		add    $0x5,%ebp
		mov    %cx,EXPORT_SYMBOL(buckets)(,%eax,2)
		inc    %ecx
		mov    %ebp,EXPORT_SYMBOL(p_current_draw_item)
		mov    %cx,EXPORT_SYMBOL(next_draw_item)
	jump_68c36:
		mov    EXPORT_SYMBOL(p_current_sort_line),%eax
		mov    EXPORT_SYMBOL(next_sort_line),%cx
		add    $0xb,%eax
		inc    %ecx
		mov    %eax,EXPORT_SYMBOL(p_current_sort_line)
		mov    %cx,EXPORT_SYMBOL(next_sort_line)
		jmp    jump_688d4
	jump_68c57:
		add    $0x40,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x10


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_build_electricity_strand)	/* 0x068C60 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x50,%esp
		mov    %eax,%ebx
		mov    0x18(%eax),%eax
		mov    engn_xc,%ecx
		sar    $0x8,%eax
		sub    %ecx,%eax
		mov    %eax,0x3c(%esp)
		mov    engn_yc,%ecx
		mov    0x1c(%ebx),%eax
		sar    $0x3,%ecx
		sar    $0x8,%eax
		sub    %ecx,%eax
		mov    %eax,0x40(%esp)
		mov    0x20(%ebx),%eax
		mov    engn_zc,%esi
		sar    $0x8,%eax
		sub    %esi,%eax
		mov    %eax,0x44(%esp)
		lea    0x28(%esp),%eax
		call   ac_transform_point
		mov    0x2a(%ebx),%eax
		mov    engn_xc,%edi
		sar    $0x10,%eax
		sub    %edi,%eax
		mov    %eax,0x14(%esp)
		mov    engn_yc,%ecx
		mov    0x2c(%ebx),%eax
		sar    $0x3,%ecx
		sar    $0x10,%eax
		sub    %ecx,%eax
		mov    %eax,0x18(%esp)
		mov    0x2e(%ebx),%eax
		mov    engn_zc,%ebp
		sar    $0x10,%eax
		sub    %ebp,%eax
		mov    %eax,0x1c(%esp)
		mov    %esp,%eax
		call   ac_transform_point
		xor    %eax,%eax
		mov    %dl,%al
		push   %eax
		push   %ebx
		mov    0x24(%esp),%eax
		mov    0x8(%esp),%ecx
		push   %eax
		mov    0x10(%esp),%edx
		mov    0x50(%esp),%ebx
		push   %edx
		mov    0x38(%esp),%eax
		mov    0x3c(%esp),%edx
		call   ac_build_wobble_line
		add    $0x50,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_build_electricity)	/* 0x068D1C */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x50,%esp
		mov    0x6c(%esp),%edi
		mov    %eax,%esi
		mov    engn_xc,%ebp
		mov    engn_yc,%eax
		shl    $0x3,%edx
		sub    %ebp,%esi
		sar    $0x3,%eax
		mov    %esi,0x14(%esp)
		sub    %eax,%edx
		mov    engn_zc,%eax
		mov    %edx,0x18(%esp)
		sub    %eax,%ebx
		mov    %esp,%eax
		mov    %ebx,0x1c(%esp)
		call   ac_transform_point
		mov    (%esp),%esi
		mov    0x4(%esp),%edx
		mov    0x1c(%esp),%ebx
		test   %edi,%edi
		je     jump_68db6
		xor    %eax,%eax
		xor    %edx,%edx
		mov    0x57(%edi),%al
		mov    EXPORT_SYMBOL(byte_176D49),%dl
		add    $0x8,%eax
		sub    %edx,%eax
		xor    %edx,%edx
		and    $0x7,%eax
		mov    0x26(%edi),%dx
		add    %eax,%edx
		mov    data_19ab13(,%edx,2),%esi
		mov    EXPORT_SYMBOL(overall_scale)-2,%eax
		sar    $0x18,%esi
		sar    $0x10,%eax
		imul   %eax,%esi
		mov    EXPORT_SYMBOL(bul_starts)(,%edx,2),%edx
		sar    $0x18,%edx
		imul   %eax,%edx
		mov    0x4(%esp),%ebp
		mov    (%esp),%edi
		sar    $0x9,%esi
		sar    $0x9,%edx
		add    %edi,%esi
		add    %ebp,%edx
	jump_68db6:
		sub    engn_xc,%ecx
		mov    0x60(%esp),%eax
		mov    %ecx,0x3c(%esp)
		mov    engn_yc,%ecx
		shl    $0x3,%eax
		sar    $0x3,%ecx
		sub    %ecx,%eax
		mov    engn_zc,%ecx
		mov    %eax,0x40(%esp)
		mov    0x64(%esp),%eax
		sub    %ecx,%eax
		mov    %eax,0x44(%esp)
		lea    0x28(%esp),%eax
		call   ac_transform_point
		xor    %eax,%eax
		mov    0x68(%esp),%al
		push   %eax
		push   $0x0
		mov    0x4c(%esp),%edi
		push   %edi
		mov    0x38(%esp),%ebp
		push   %ebp
		mov    0x38(%esp),%ecx
		mov    %esi,%eax
		call   ac_build_wobble_line
		add    $0x50,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x10

/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_build_razor_wire_strand)	/* 0x06953C */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		mov    %esp,%ebp
		sub    $0x78,%esp
		mov    %eax,%edi
		mov    %edx,%esi
		mov    %ebx,-0x4(%ebp)
		xor    %ah,%ah
		mov    %ah,-0x52(%ebp)
		mov    %ah,-0x2a(%ebp)
		mov    engn_yc,%eax
		shl    $0x3,%esi
		sar    $0x3,%eax
		mov    engn_xc,%edx
		sub    %eax,%esi
		mov    %ebx,%eax
		mov    engn_zc,%ebx
		sub    %edx,%edi
		sub    %ebx,%eax
		mov    %edi,-0x64(%ebp)
		mov    %eax,-0x5c(%ebp)
		lea    -0x78(%ebp),%eax
		mov    %esi,-0x60(%ebp)
		call   ac_transform_point
		mov    -0x5c(%ebp),%eax
		shl    $0x8,%eax
		mov    %eax,-0x4(%ebp)
		mov    engn_xc,%eax
		mov    engn_yc,%edx
		sub    %eax,%ecx
		mov    0x10(%ebp),%eax
		sar    $0x3,%edx
		shl    $0x3,%eax
		mov    -0x78(%ebp),%edi
		sub    %edx,%eax
		mov    engn_zc,%edx
		mov    %eax,-0x38(%ebp)
		mov    0x14(%ebp),%eax
		mov    -0x74(%ebp),%esi
		sub    %edx,%eax
		mov    %ecx,-0x3c(%ebp)
		mov    %eax,-0x34(%ebp)
		lea    -0x50(%ebp),%eax
		xor    %edx,%edx
		call   ac_transform_point
		xor    %eax,%eax
		mov    -0x2a(%ebp),%dl
		mov    -0x52(%ebp),%al
		shl    $0x8,%edi
		and    %edx,%eax
		shl    $0x8,%esi
		test   $0xf,%al
		jne    jump_697a7
		mov    -0x4c(%ebp),%edx
		mov    -0x50(%ebp),%eax
		shl    $0x8,%edx
		shl    $0x8,%eax
		sub    %esi,%edx
		sub    %edi,%eax
		mov    %edx,-0x14(%ebp)
		mov    %eax,%edx
		imul   %eax,%edx
		mov    %eax,-0x10(%ebp)
		mov    -0x14(%ebp),%eax
		imul   %eax,%eax
		mov    -0x34(%ebp),%ebx
		mov    -0x4(%ebp),%ecx
		shl    $0x8,%ebx
		sub    %ecx,%ebx
		add    %edx,%eax
		mov    %ebx,-0x18(%ebp)
		call   ac_LbSqrL
		mov    %eax,%edx
		cmp    $0x200,%eax
		jl     jump_697a7
		mov    $0xa,%ebx
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,%ebx
		sar    $0x8,%ebx
		cmp    $0x1,%ebx
		jge    jump_6963c
		mov    $0x1,%ebx
	jump_6963c:
		mov    -0x10(%ebp),%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,-0x10(%ebp)
		mov    -0x14(%ebp),%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,-0x14(%ebp)
		mov    -0x18(%ebp),%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		idiv   %ebx
		mov    -0x10(%ebp),%edx
		imul   %edx,%edx
		mov    %eax,-0x18(%ebp)
		mov    -0x14(%ebp),%eax
		imul   %eax,%eax
		add    %edx,%eax
		call   ac_LbSqrL
		mov    gameturn,%eax
		and    $0x1,%eax
		mov    %eax,-0x24(%ebp)
		mov    $0x1,%eax
		mov    %eax,-0x8(%ebp)
		add    %eax,%ebx
		mov    -0x24(%ebp),%eax
		shl    $0x6,%eax
		mov    %ebx,-0x1c(%ebp)
		mov    %eax,-0xc(%ebp)
		cmp    $0x1,%ebx
		jle    jump_697a7
		jmp    jump_696c9
	jump_696a2:
		mov    -0x10(%ebp),%ebx
		mov    -0x14(%ebp),%ecx
		mov    -0x18(%ebp),%eax
		mov    -0x4(%ebp),%edx
		add    %ebx,%edi
		add    %ecx,%esi
		add    %eax,%edx
		mov    -0x8(%ebp),%ebx
		mov    -0x1c(%ebp),%ecx
		inc    %ebx
		mov    %edx,-0x4(%ebp)
		mov    %ebx,-0x8(%ebp)
		cmp    %ecx,%ebx
		jge    jump_697a7
	jump_696c9:
		test   %edi,%edi
		jle    jump_696a2
		mov    %edi,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+32,%edx # lbDisplay.GraphicsScreenWidth
		sar    $0x8,%eax
		cmp    %edx,%eax
		jge    jump_696a2
		test   %esi,%esi
		jle    jump_696a2
		mov    %esi,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+36,%ebx # lbDisplay.GraphicsScreenHeight
		sar    $0x8,%eax
		cmp    %ebx,%eax
		jge    jump_696a2
		mov    -0x4(%ebp),%eax
		sar    $0x8,%eax
		add    $0x1288,%eax
		test   %eax,%eax
		jge    jump_69700
		xor    %eax,%eax
	jump_69700:
		cmp    $0x2710,%eax
		jl     jump_6970c
		mov    $0x270f,%eax
	jump_6970c:
		mov    -0xc(%ebp),%edx
		and    $0x3ff,%edx
		mov    EXPORT_SYMBOL(lbSinTable)(,%edx,4),%edx
		sar    $0xb,%edx
		mov    -0x24(%ebp),%bh
		add    $0x20,%edx
		test   $0x1,%bh
		setne  %bl
		and    $0xff,%ebx
		mov    %ebx,-0x28(%ebp)
		cmp    $0x20,%edx
		jle    jump_69792
		cmp    $0x41,%edx
		jge    jump_69792
		push   $0x0
		and    $0xffff,%eax
		push   %eax
		xor    %eax,%eax
		mov    %dl,%al
		push   %eax
		test   %ebx,%ebx
		sete   %al
		xor    %ah,%ah
		cwtl
		push   %eax
		mov    -0x2a(%ebp),%eax
		sar    $0x10,%eax
		push   %eax
		mov    -0x14(%ebp),%eax
		add    %esi,%eax
		sar    $0x8,%eax
		movswl %ax,%ecx
		mov    -0x10(%ebp),%eax
		add    %edi,%eax
		sar    $0x8,%eax
		movswl %ax,%ebx
		mov    %esi,%eax
		sar    $0x8,%eax
		movswl %ax,%edx
		mov    %edi,%eax
		sar    $0x8,%eax
		mov    %eax,-0x20(%ebp)
		mov    -0x20(%ebp),%eax
		cwtl
		call   ac_build_polygon_slice
		test   %eax,%eax
		je     jump_69792
		movb   $0xa,0xb(%eax)
	jump_69792:
		mov    -0xc(%ebp),%ecx
		mov    -0x24(%ebp),%eax
		add    $0x40,%ecx
		inc    %eax
		mov    %ecx,-0xc(%ebp)
		mov    %eax,-0x24(%ebp)
		jmp    jump_696a2
	jump_697a7:
		mov    %ebp,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x10


/*----------------------------------------------------------------*/
do_beam_electric:	/* 0x0697B0 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x34,%esp
		mov    0x44(%esp),%esi
		mov    %eax,(%esp)
		mov    %edx,0x4(%esp)
		mov    %ebx,0x2c(%esp)
		mov    0x48(%esp),%edx
		mov    (%esp),%ebx
		sub    engn_xc,%ebx
		mov    engn_yc,%eax
		mov    0x4(%esp),%edi
		sar    $0x3,%eax
		sub    %eax,%edi
		mov    %edi,0x4(%esp)
		sub    %eax,%esi
		mov    0x4(%esp),%eax
		sub    %eax,%esi
		mov    %esi,%eax
		imul   %esi,%eax
		mov    0x2c(%esp),%ebp
		mov    %ebx,(%esp)
		mov    engn_zc,%edi
		mov    engn_xc,%ebx
		sub    %edi,%ebp
		sub    %ebx,%ecx
		mov    %ebp,0x2c(%esp)
		sub    %edi,%edx
		mov    0x2c(%esp),%ebx
		mov    (%esp),%ebp
		sub    %ebx,%edx
		sub    %ebp,%ecx
		mov    %edx,0x14(%esp)
		mov    %ecx,%edx
		imul   %ecx,%edx
		add    %eax,%edx
		mov    0x14(%esp),%eax
		imul   %eax,%eax
		mov    %esi,0x1c(%esp)
		add    %edx,%eax
		mov    %ecx,0x18(%esp)
		call   ac_LbSqrL
		mov    %eax,%esi
		test   %eax,%eax
		je     jump_69a29
		mov    %ecx,%edi
		shl    $0x8,%edi
		mov    %edi,%edx
		mov    %edi,%eax
		sar    $0x1f,%edx
		idiv   %esi
		mov    0x1c(%esp),%ecx
		shl    $0x8,%ecx
		mov    %eax,0x10(%esp)
		mov    %ecx,%edx
		mov    %ecx,%eax
		sar    $0x1f,%edx
		idiv   %esi
		mov    0x14(%esp),%ebp
		shl    $0x8,%ebp
		mov    %ebp,%edx
		neg    %edx
		mov    %eax,0x8(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %esi
		shl    $0x8,%ebx
		sar    $0x4,%edi
		mov    %ebx,0x2c(%esp)
		mov    %edi,0x18(%esp)
		sar    $0x4,%ecx
		sar    $0x4,%ebp
		mov    %ecx,0x1c(%esp)
		mov    %ebp,0x14(%esp)
		mov    0x4(%esp),%edx
		mov    %eax,0xc(%esp)
		mov    (%esp),%eax
		shl    $0x8,%edx
		shl    $0x8,%eax
		mov    %edx,0x4(%esp)
		mov    %eax,(%esp)
		call   ac_LbRandomPosShort
		test   $0x1,%al
		je     jump_698cd
		mov    0xc(%esp),%ecx
		mov    0x10(%esp),%esi
		neg    %ecx
		neg    %esi
		mov    %ecx,0xc(%esp)
		mov    %esi,0x10(%esp)
	jump_698cd:
		mov    0x18(%esp),%eax
		mov    (%esp),%edi
		add    %eax,%eax
		add    %eax,%edi
		mov    0x1c(%esp),%eax
		mov    0x4(%esp),%ebp
		add    %eax,%eax
		add    %eax,%ebp
		mov    0x14(%esp),%eax
		mov    0x2c(%esp),%edx
		add    %eax,%eax
		add    %eax,%edx
		mov    %edi,(%esp)
		mov    %edx,0x2c(%esp)
		xor    %edx,%edx
		mov    %ebp,0x4(%esp)
		mov    %edx,0x30(%esp)
		jmp    jump_69954
	jump_69903:
		mov    (%esp),%ebx
		mov    0x4(%esp),%ecx
		mov    0x18(%esp),%eax
		add    %ebx,%edi
		add    %ecx,%esi
		sar    $0x8,%edi
		sar    $0x8,%esi
		mov    %edi,0x24(%esp)
		mov    %esi,0x20(%esp)
		mov    0x2c(%esp),%esi
		lea    (%ebx,%eax,1),%edi
		mov    0x1c(%esp),%eax
		mov    0x30(%esp),%ebx
		add    %esi,%ebp
		mov    %edi,(%esp)
		sar    $0x8,%ebp
		add    $0x40,%ebx
		mov    %ebp,0x28(%esp)
		lea    (%ecx,%eax,1),%ebp
		mov    0x14(%esp),%eax
		mov    %ebx,0x30(%esp)
		lea    (%esi,%eax,1),%edx
		mov    %ebp,0x4(%esp)
		mov    %edx,0x2c(%esp)
	jump_69954:
		xor    %eax,%eax
		mov    0x30(%esp),%ax
		cmp    $0x400,%eax
		jg     jump_69a29
		mov    0xc(%esp),%ebx
		mov    EXPORT_SYMBOL(lbSinTable)(,%eax,4),%edi
		imul   %ebx,%edi
		mov    0x8(%esp),%ecx
		mov    EXPORT_SYMBOL(lbSinTable)(,%eax,4),%esi
		imul   %ecx,%esi
		mov    0x10(%esp),%edx
		mov    EXPORT_SYMBOL(lbSinTable)(,%eax,4),%ebp
		imul   %edx,%ebp
		sar    $0x7,%edi
		sar    $0x7,%esi
		sar    $0x7,%ebp
		cmp    $0x400,%eax
		je     jump_699df
		call   ac_LbRandomPosShort
		xor    %ah,%ah
		and    $0xffff,%eax
		add    $0x20,%eax
		imul   %eax,%edi
		call   ac_LbRandomPosShort
		sar    $0x8,%edi
		xor    %ah,%ah
		and    $0xffff,%eax
		add    $0x20,%eax
		imul   %eax,%esi
		call   ac_LbRandomPosShort
		sar    $0x8,%esi
		xor    %ah,%ah
		and    $0xffff,%eax
		add    $0x20,%eax
		imul   %eax,%ebp
		sar    $0x8,%ebp
	jump_699df:
		xor    %eax,%eax
		mov    0x30(%esp),%ax
		test   %eax,%eax
		je     jump_69903
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+1,%al
		push   %eax
		mov    0x30(%esp),%eax
		add    %ebp,%eax
		sar    $0x8,%eax
		mov    0x4(%esp),%ecx
		push   %eax
		mov    0xc(%esp),%eax
		mov    0x30(%esp),%ebx
		add    %esi,%eax
		mov    0x28(%esp),%edx
		sar    $0x8,%eax
		add    %edi,%ecx
		push   %eax
		sar    $0x8,%ecx
		mov    0x30(%esp),%eax
		call   ac_draw_mapwho_vect
		jmp    jump_69903
	jump_69a29:
		add    $0x34,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x8


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_build_laser_beam)	/* 0x069A34 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc4,%esp
		mov    %eax,%esi
		mov    %edx,%edi
		mov    %ebx,0xa8(%esp)
		mov    %ecx,%ebp
		mov    0xd8(%esp),%edx
		mov    0xd4(%esp),%ebx
		xor    %ah,%ah
		push   %edx
		mov    %ah,0xc4(%esp)
		mov    %edi,%eax
		push   %ebx
		add    $0x14,%eax
		mov    0xb0(%esp),%ebx
		mov    %eax,0x64(%esp)
		mov    %eax,%edx
		mov    %esi,%eax
		call   do_beam_electric
		mov    0xd8(%esp),%ecx
		mov    0xd4(%esp),%eax
		push   %ecx
		mov    0xac(%esp),%ebx
		mov    0x60(%esp),%edx
		push   %eax
		mov    %ebp,%ecx
		mov    %esi,%eax
		shl    $0x3,%edi
		call   do_beam_electric
		mov    engn_yc,%eax
		xor    %dl,%dl
		mov    engn_zc,%ebx
		mov    %dl,0x4e(%esp)
		mov    %dl,0x26(%esp)
		sar    $0x3,%eax
		mov    engn_xc,%edx
		sub    %eax,%edi
		mov    0xa8(%esp),%eax
		mov    %edi,0x40(%esp)
		sub    %ebx,%eax
		sub    %edx,%esi
		mov    %eax,0x44(%esp)
		lea    0x28(%esp),%eax
		mov    %esi,0x3c(%esp)
		call   ac_transform_point
		mov    0x44(%esp),%eax
		shl    $0x8,%eax
		mov    0xe0(%esp),%edx
		mov    %eax,0xa8(%esp)
		xor    %eax,%eax
		mov    0x57(%edx),%al
		xor    %edx,%edx
		add    $0x8,%eax
		mov    EXPORT_SYMBOL(byte_176D49),%dl
		sub    %edx,%eax
		mov    0xe0(%esp),%ebx
		mov    %eax,%edx
		xor    %eax,%eax
		and    $0x7,%edx
		mov    0x26(%ebx),%ax
		add    %edx,%eax
		lea    0x0(,%eax,2),%edx
		mov    data_19ab13(%edx),%ebx
		mov    EXPORT_SYMBOL(overall_scale)-2,%eax
		sar    $0x18,%ebx
		sar    $0x10,%eax
		imul   %eax,%ebx
		mov    EXPORT_SYMBOL(bul_starts)(%edx),%edx
		sar    $0x18,%edx
		imul   %edx,%eax
		mov    0x28(%esp),%esi
		mov    engn_xc,%ecx
		mov    0x2c(%esp),%edi
		sub    %ecx,%ebp
		shl    $0x8,%edi
		mov    %ebp,0x14(%esp)
		sar    %eax
		mov    0xd4(%esp),%edx
		add    %eax,%edi
		mov    engn_yc,%eax
		shl    $0x3,%edx
		sar    $0x3,%eax
		mov    engn_zc,%ebp
		sub    %eax,%edx
		mov    0xd8(%esp),%eax
		shl    $0x8,%esi
		sub    %ebp,%eax
		mov    %edx,0x18(%esp)
		mov    %eax,0x1c(%esp)
		mov    %esp,%eax
		xor    %edx,%edx
		call   ac_transform_point
		xor    %eax,%eax
		mov    0x4e(%esp),%dl
		mov    0x26(%esp),%al
		sar    %ebx
		and    %edx,%eax
		add    %ebx,%esi
		test   $0xf,%al
		jne    jump_6a2d3
		mov    (%esp),%eax
		mov    0x4(%esp),%ebp
		mov    0x1c(%esp),%edx
		shl    $0x8,%eax
		shl    $0x8,%ebp
		sub    %esi,%eax
		shl    $0x8,%edx
		mov    %eax,0xac(%esp)
		mov    0xa8(%esp),%eax
		sub    %edi,%ebp
		sub    %eax,%edx
		mov    %ebp,%eax
		imul   %ebp,%eax
		mov    %edx,0xa4(%esp)
		mov    0xac(%esp),%edx
		imul   %edx,%edx
		add    %eax,%edx
		mov    %edx,%eax
		mov    %edx,0x80(%esp)
		call   ac_LbSqrL
		mov    %eax,%ebx
		mov    %eax,0x80(%esp)
		test   %eax,%eax
		je     jump_6a2d3
		mov    %eax,%edx
		mov    $0x14,%ecx
		sar    $0x1f,%edx
		idiv   %ecx
		sar    $0x8,%eax
		mov    0xac(%esp),%edx
		mov    %eax,0x84(%esp)
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x4,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		idiv   %ebx
		shl    $0x2,%eax
		add    %eax,%esi
		lea    0x0(,%ebp,4),%eax
		add    %ebp,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x4,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		idiv   %ebx
		shl    $0x2,%eax
		add    %eax,%edi
		mov    0xa8(%esp),%eax
		sar    $0x8,%eax
		add    $0x1107,%eax
		test   %eax,%eax
		jge    jump_69c7c
		xor    %eax,%eax
	jump_69c7c:
		cmp    $0x2710,%eax
		jl     jump_69c88
		mov    $0x270f,%eax
	jump_69c88:
		and    $0xffff,%eax
		push   %eax
		push   $0x7f
		mov    %eax,0x64(%esp)
		xor    %eax,%eax
		push   $0x20
		mov    EXPORT_SYMBOL(colour_lookup)+1,%al
		push   %eax
		mov    game_textures,%eax
		push   %eax
		mov    %edi,%eax
		mov    $0xd,%ecx
		sar    $0x8,%eax
		mov    %ecx,%ebx
		mov    %eax,0x74(%esp)
		mov    %esi,%eax
		push   $0xf
		sar    $0x8,%eax
		mov    0x78(%esp),%edx
		mov    %eax,0x7c(%esp)
		call   ac_build_polygon_circle_2d
		mov    0x5c(%esp),%edx
		push   %edx
		push   $0x7f
		xor    %eax,%eax
		push   $0x20
		mov    EXPORT_SYMBOL(colour_lookup)+1,%al
		push   %eax
		mov    game_textures,%ebx
		push   %ebx
		mov    $0xa,%ecx
		mov    0x74(%esp),%edx
		push   $0xf
		mov    0x7c(%esp),%eax
		mov    %ecx,%ebx
		call   ac_build_polygon_circle_2d
		mov    0xac(%esp),%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x4,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		mov    0x80(%esp),%ecx
		sar    $0x1f,%edx
		idiv   %ecx
		shl    $0x4,%eax
		add    %eax,%esi
		lea    0x0(,%ebp,4),%eax
		add    %ebp,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x4,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		idiv   %ecx
		shl    $0x4,%eax
		mov    0x84(%esp),%ecx
		add    %eax,%edi
		cmp    $0x1,%ecx
		jge    jump_69d57
		movl   $0x1,0x84(%esp)
	jump_69d57:
		mov    0xda(%esp),%eax
		sar    $0x10,%eax
		cmp    $0x2,%eax
		jle    jump_69d75
		xor    %ecx,%ecx
		mov    %ecx,0x50(%esp)
		mov    %ecx,0x54(%esp)
		jmp    jump_69df3
	jump_69d75:
		mov    %ebp,%eax
		sar    $0x3,%eax
		mov    %eax,0x70(%esp)
		imul   %eax,%eax
		mov    0xac(%esp),%ecx
		sar    $0x3,%ecx
		neg    %ecx
		mov    %ecx,%ebx
		imul   %ecx,%ebx
		lea    0x50(%esp),%edx
		mov    %edx,0x6c(%esp)
		add    %ebx,%eax
		lea    0x54(%esp),%edx
		shl    $0x4,%eax
		mov    %edx,0x68(%esp)
		call   ac_LbSqrL
		mov    %eax,%ebx
		test   %eax,%eax
		jne    jump_69db7
		mov    $0x1,%ebx
	jump_69db7:
		mov    0x70(%esp),%edx
		shl    $0xa,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    0x6c(%esp),%edx
		mov    %eax,(%edx)
		mov    %ecx,%edx
		shl    $0xa,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    0x68(%esp),%edx
		mov    %eax,(%edx)
		mov    0x50(%esp),%edx
		mov    0x54(%esp),%ebx
		shl    $0x2,%edx
		shl    $0x2,%ebx
		mov    %edx,0x50(%esp)
		mov    %ebx,0x54(%esp)
	jump_69df3:
		mov    0xac(%esp),%eax
		mov    %eax,%edx
		mov    0x84(%esp),%ebx
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,0xac(%esp)
		mov    %ebp,%edx
		mov    %ebp,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,%ebp
		mov    0xa4(%esp),%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,0xa4(%esp)
		mov    0xa8(%esp),%eax
		mov    %eax,0x74(%esp)
		mov    0xda(%esp),%eax
		mov    %esi,0x78(%esp)
		sar    $0x10,%eax
		mov    %edi,0x7c(%esp)
		cmp    $0x2,%eax
		jle    jump_69e5d
		movw   $0x8,0xb8(%esp)
		jmp    jump_69e6c
	jump_69e5d:
		mov    0xdc(%esp),%eax
		mov    %ax,0xb8(%esp)
	jump_69e6c:
		mov    $0x1,%ecx
		mov    0x84(%esp),%eax
		add    %ecx,%eax
		mov    %ecx,0x94(%esp)
		mov    %eax,0x88(%esp)
		cmp    %ecx,%eax
		jle    jump_69fc0
		jmp    jump_69edb
	jump_69e92:
		mov    0xac(%esp),%edx
		mov    0xa4(%esp),%eax
		mov    0xa8(%esp),%ebx
		mov    0x94(%esp),%ecx
		add    %ebp,%edi
		inc    %ecx
		add    %edx,%esi
		add    %eax,%ebx
		mov    0x88(%esp),%edx
		mov    %ebx,0xa8(%esp)
		mov    $0x1,%bl
		mov    %ecx,0x94(%esp)
		mov    %bl,0xc0(%esp)
		cmp    %edx,%ecx
		jge    jump_69fc0
	jump_69edb:
		test   %esi,%esi
		jle    jump_69e92
		mov    %esi,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+32,%ecx # lbDisplay.GraphicsScreenWidth
		sar    $0x8,%eax
		cmp    %ecx,%eax
		jge    jump_69e92
		test   %edi,%edi
		jle    jump_69e92
		mov    %edi,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+36,%edx # lbDisplay.GraphicsScreenHeight
		sar    $0x8,%eax
		cmp    %edx,%eax
		jge    jump_69e92
		mov    0xa8(%esp),%eax
		sar    $0x8,%eax
		add    $0x1107,%eax
		test   %eax,%eax
		jge    jump_69f16
		xor    %eax,%eax
	jump_69f16:
		cmp    $0x2710,%eax
		jl     jump_69f22
		mov    $0x270f,%eax
	jump_69f22:
		xor    %edx,%edx
		mov    0xc0(%esp),%dl
		push   %edx
		and    $0xffff,%eax
		mov    0xde(%esp),%edx
		push   %eax
		sar    $0x10,%edx
		xor    %eax,%eax
		shl    $0x9,%edx
		mov    EXPORT_SYMBOL(colour_lookup)+4,%al
		mov    EXPORT_SYMBOL(pixmap)+0x2000(%edx,%eax,1),%al # pixmap.fade_table[0x2000+?]
		and    $0xff,%eax
		push   %eax
		mov    0xc2(%esp),%eax
		sar    $0x10,%eax
		push   %eax
		push   %eax
		lea    (%edi,%ebp,1),%eax
		sar    $0x8,%eax
		movswl %ax,%ecx
		mov    0xc0(%esp),%eax
		add    %esi,%eax
		sar    $0x8,%eax
		movswl %ax,%ebx
		mov    %edi,%eax
		sar    $0x8,%eax
		movswl %ax,%edx
		mov    %esi,%eax
		sar    $0x8,%eax
		mov    %eax,0x78(%esp)
		mov    0x78(%esp),%eax
		mov    %ax,0xd0(%esp)
		mov    0xce(%esp),%eax
		sar    $0x10,%eax
		call   ac_build_polygon_slice
		test   %eax,%eax
		je     jump_69e92
		xor    %dh,%dh
		movb   $0xf,0xb(%eax)
		mov    EXPORT_SYMBOL(colour_lookup)+1,%dl
		mov    %dx,0xc(%eax)
		jmp    jump_69e92
	jump_69fc0:
		mov    0x74(%esp),%eax
		mov    0x78(%esp),%edi
		mov    0x50(%esp),%ebx
		mov    0x7c(%esp),%esi
		mov    0x54(%esp),%ecx
		xor    %dl,%dl
		mov    %eax,0x9c(%esp)
		mov    0xda(%esp),%eax
		add    %ebx,%edi
		sar    $0x10,%eax
		add    %ecx,%esi
		cmp    $0x2,%eax
		jle    jump_69ffc
		movw   $0x6,0xb4(%esp)
		jmp    jump_6a00b
	jump_69ffc:
		mov    0xdc(%esp),%eax
		mov    %ax,0xb4(%esp)
	jump_6a00b:
		movl   $0x1,0x90(%esp)
		mov    0x84(%esp),%eax
		inc    %eax
		mov    %eax,0x58(%esp)
		cmp    $0x1,%eax
		jle    jump_6a13d
		jmp    jump_6a06c
	jump_6a02d:
		mov    0xac(%esp),%ebx
		mov    0xa4(%esp),%eax
		mov    0x9c(%esp),%ecx
		mov    $0x1,%dl
		add    %ebp,%esi
		add    %ebx,%edi
		add    %eax,%ecx
		mov    0x90(%esp),%eax
		mov    0x58(%esp),%ebx
		inc    %eax
		mov    %ecx,0x9c(%esp)
		mov    %eax,0x90(%esp)
		cmp    %ebx,%eax
		jge    jump_6a13d
	jump_6a06c:
		test   %edi,%edi
		jle    jump_6a02d
		mov    %edi,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+32,%ebx # lbDisplay.GraphicsScreenWidth
		sar    $0x8,%eax
		cmp    %ebx,%eax
		jge    jump_6a02d
		test   %esi,%esi
		jle    jump_6a02d
		mov    %esi,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+36,%ecx # lbDisplay.GraphicsScreenHeight
		sar    $0x8,%eax
		cmp    %ecx,%eax
		jge    jump_6a02d
		mov    0x9c(%esp),%eax
		sar    $0x8,%eax
		add    $0x1107,%eax
		test   %eax,%eax
		jge    jump_6a0a7
		xor    %eax,%eax
	jump_6a0a7:
		cmp    $0x2710,%eax
		jl     jump_6a0b3
		mov    $0x270f,%eax
	jump_6a0b3:
		and    $0xff,%edx
		push   %edx
		and    $0xffff,%eax
		mov    0xde(%esp),%edx
		push   %eax
		sar    $0x10,%edx
		xor    %eax,%eax
		shl    $0x9,%edx
		mov    EXPORT_SYMBOL(colour_lookup)+4,%al
		mov    EXPORT_SYMBOL(pixmap)+0x2000(%edx,%eax,1),%al # pixmap.fade_table[0x2000+?]
		and    $0xff,%eax
		push   %eax
		mov    0xbe(%esp),%eax
		sar    $0x10,%eax
		push   %eax
		push   %eax
		lea    (%esi,%ebp,1),%eax
		sar    $0x8,%eax
		movswl %ax,%ecx
		mov    0xc0(%esp),%eax
		add    %edi,%eax
		sar    $0x8,%eax
		movswl %ax,%ebx
		mov    %esi,%eax
		sar    $0x8,%eax
		movswl %ax,%edx
		mov    %edi,%eax
		sar    $0x8,%eax
		mov    %eax,0x78(%esp)
		mov    0x78(%esp),%eax
		cwtl
		call   ac_build_polygon_slice
		test   %eax,%eax
		je     jump_6a02d
		xor    %dh,%dh
		movb   $0xf,0xb(%eax)
		mov    EXPORT_SYMBOL(colour_lookup)+1,%dl
		mov    %dx,0xc(%eax)
		jmp    jump_6a02d
	jump_6a13d:
		mov    0x74(%esp),%eax
		mov    0x78(%esp),%edi
		mov    0x7c(%esp),%esi
		mov    %eax,0x98(%esp)
		mov    0x54(%esp),%eax
		mov    0x50(%esp),%ecx
		sub    %eax,%esi
		mov    0xda(%esp),%eax
		xor    %dl,%dl
		sar    $0x10,%eax
		sub    %ecx,%edi
		cmp    $0x2,%eax
		jle    jump_6a179
		movw   $0x2,0xb0(%esp)
		jmp    jump_6a188
	jump_6a179:
		mov    0xdc(%esp),%eax
		mov    %ax,0xb0(%esp)
	jump_6a188:
		mov    $0x1,%ebx
		mov    0x84(%esp),%eax
		add    %ebx,%eax
		mov    %ebx,0xa0(%esp)
		mov    %eax,0x8c(%esp)
		cmp    %ebx,%eax
		jle    jump_6a2d3
		jmp    jump_6a1f0
	jump_6a1ae:
		mov    0xac(%esp),%eax
		mov    0x98(%esp),%edx
		mov    0xa0(%esp),%ebx
		mov    0x8c(%esp),%ecx
		add    %ebp,%esi
		add    %eax,%edi
		mov    0xa4(%esp),%eax
		inc    %ebx
		add    %eax,%edx
		mov    %ebx,0xa0(%esp)
		mov    %edx,0x98(%esp)
		mov    $0x1,%dl
		cmp    %ecx,%ebx
		jge    jump_6a2d3
	jump_6a1f0:
		test   %edi,%edi
		jle    jump_6a1ae
		mov    %edi,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+32,%ebx # lbDisplay.GraphicsScreenWidth
		sar    $0x8,%eax
		cmp    %ebx,%eax
		jge    jump_6a1ae
		test   %esi,%esi
		jle    jump_6a1ae
		mov    %esi,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+36,%ecx # lbDisplay.GraphicsScreenHeight
		sar    $0x8,%eax
		cmp    %ecx,%eax
		jge    jump_6a1ae
		mov    0x98(%esp),%eax
		sar    $0x8,%eax
		add    $0x1107,%eax
		test   %eax,%eax
		jge    jump_6a22b
		xor    %eax,%eax
	jump_6a22b:
		cmp    $0x2710,%eax
		jl     jump_6a237
		mov    $0x270f,%eax
	jump_6a237:
		and    $0xff,%edx
		push   %edx
		and    $0xffff,%eax
		push   %eax
		mov    0xe2(%esp),%eax
		xor    %edx,%edx
		sar    $0x10,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+4,%dl
		shl    $0x9,%eax
		mov    EXPORT_SYMBOL(pixmap)+0x2000(%edx,%eax,1),%al # pixmap.fade_table[0x2000+?]
		and    $0xff,%eax
		push   %eax
		mov    0xba(%esp),%eax
		sar    $0x10,%eax
		push   %eax
		push   %eax
		lea    (%esi,%ebp,1),%eax
		sar    $0x8,%eax
		movswl %ax,%ecx
		mov    0xc0(%esp),%eax
		add    %edi,%eax
		sar    $0x8,%eax
		movswl %ax,%ebx
		mov    %esi,%eax
		sar    $0x8,%eax
		movswl %ax,%edx
		mov    %edi,%eax
		sar    $0x8,%eax
		mov    %eax,0x78(%esp)
		mov    0x78(%esp),%eax
		mov    %ax,0xd0(%esp)
		mov    0xce(%esp),%eax
		sar    $0x10,%eax
		call   ac_build_polygon_slice
		test   %eax,%eax
		je     jump_6a1ae
		xor    %dh,%dh
		movb   $0xf,0xb(%eax)
		mov    EXPORT_SYMBOL(colour_lookup)+1,%dl
		mov    %dx,0xc(%eax)
		jmp    jump_6a1ae
	jump_6a2d3:
		add    $0xc4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x10


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_build_laser_beam_q)	/* 0x06A2E0 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc4,%esp
		mov    %eax,%esi
		mov    %edx,%edi
		mov    %ebx,0xa8(%esp)
		mov    %ecx,%ebp
		mov    0xd8(%esp),%edx
		mov    0xd4(%esp),%ebx
		xor    %ah,%ah
		push   %edx
		mov    %ah,0xc4(%esp)
		mov    %edi,%eax
		push   %ebx
		add    $0x14,%eax
		mov    0xb0(%esp),%ebx
		mov    %eax,0x68(%esp)
		mov    %eax,%edx
		mov    %esi,%eax
		call   do_beam_electric
		mov    0xd8(%esp),%ecx
		mov    0xd4(%esp),%eax
		push   %ecx
		mov    0xac(%esp),%ebx
		mov    0x64(%esp),%edx
		push   %eax
		mov    %ebp,%ecx
		mov    %esi,%eax
		call   do_beam_electric
		mov    0xd8(%esp),%edx
		mov    0xd4(%esp),%ebx
		push   %edx
		mov    %ebp,%ecx
		mov    %esi,%eax
		push   %ebx
		mov    0x68(%esp),%edx
		mov    0xb0(%esp),%ebx
		call   do_beam_electric
		mov    0xd8(%esp),%ecx
		mov    0xd4(%esp),%eax
		push   %ecx
		mov    0xac(%esp),%ebx
		mov    0x64(%esp),%edx
		push   %eax
		mov    %ebp,%ecx
		mov    %esi,%eax
		shl    $0x3,%edi
		call   do_beam_electric
		mov    engn_yc,%eax
		xor    %dl,%dl
		mov    engn_zc,%ebx
		mov    %dl,0x4e(%esp)
		mov    %dl,0x26(%esp)
		sar    $0x3,%eax
		mov    engn_xc,%edx
		sub    %eax,%edi
		mov    0xa8(%esp),%eax
		mov    %edi,0x40(%esp)
		sub    %ebx,%eax
		sub    %edx,%esi
		mov    %eax,0x44(%esp)
		lea    0x28(%esp),%eax
		mov    %esi,0x3c(%esp)
		call   ac_transform_point
		mov    0x44(%esp),%eax
		shl    $0x8,%eax
		mov    0xe0(%esp),%edx
		mov    %eax,0xa8(%esp)
		xor    %eax,%eax
		mov    0x57(%edx),%al
		xor    %edx,%edx
		add    $0x8,%eax
		mov    EXPORT_SYMBOL(byte_176D49),%dl
		mov    0xe0(%esp),%ebx
		sub    %edx,%eax
		xor    %edx,%edx
		and    $0x7,%eax
		mov    0x26(%ebx),%dx
		add    %edx,%eax
		mov    data_19ab13(,%eax,2),%ebx
		mov    EXPORT_SYMBOL(overall_scale)-2,%edx
		sar    $0x18,%ebx
		sar    $0x10,%edx
		imul   %edx,%ebx
		mov    EXPORT_SYMBOL(bul_starts)(,%eax,2),%eax
		sar    $0x18,%eax
		imul   %edx,%eax
		mov    0x28(%esp),%esi
		mov    engn_xc,%ecx
		mov    0x2c(%esp),%edi
		sub    %ecx,%ebp
		shl    $0x8,%edi
		mov    %ebp,0x14(%esp)
		sar    %eax
		mov    0xd4(%esp),%edx
		add    %eax,%edi
		mov    engn_yc,%eax
		shl    $0x3,%edx
		sar    $0x3,%eax
		mov    engn_zc,%ebp
		sub    %eax,%edx
		mov    0xd8(%esp),%eax
		shl    $0x8,%esi
		sub    %ebp,%eax
		mov    %edx,0x18(%esp)
		mov    %eax,0x1c(%esp)
		mov    %esp,%eax
		xor    %edx,%edx
		call   ac_transform_point
		xor    %eax,%eax
		mov    0x26(%esp),%dl
		mov    0x4e(%esp),%al
		sar    %ebx
		and    %edx,%eax
		add    %ebx,%esi
		test   $0xf,%al
		jne    jump_6a2d3
		mov    (%esp),%eax
		mov    0x4(%esp),%ebp
		mov    0x1c(%esp),%edx
		shl    $0x8,%eax
		shl    $0x8,%ebp
		sub    %esi,%eax
		shl    $0x8,%edx
		mov    %eax,0xac(%esp)
		mov    0xa8(%esp),%eax
		sub    %edi,%ebp
		sub    %eax,%edx
		mov    %ebp,%eax
		imul   %ebp,%eax
		mov    %edx,0xa4(%esp)
		mov    0xac(%esp),%edx
		imul   %edx,%edx
		add    %eax,%edx
		mov    %edx,%eax
		mov    %edx,0x58(%esp)
		call   ac_LbSqrL
		mov    %eax,%ebx
		mov    %eax,0x58(%esp)
		test   %eax,%eax
		je     jump_6a2d3
		mov    %eax,%edx
		mov    $0x14,%ecx
		sar    $0x1f,%edx
		idiv   %ecx
		sar    $0x8,%eax
		mov    0xac(%esp),%edx
		mov    %eax,0x84(%esp)
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x4,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		idiv   %ebx
		shl    $0x2,%eax
		add    %eax,%esi
		lea    0x0(,%ebp,4),%eax
		add    %ebp,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x4,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		idiv   %ebx
		shl    $0x2,%eax
		add    %eax,%edi
		mov    0xa8(%esp),%eax
		sar    $0x8,%eax
		add    $0x1288,%eax
		test   %eax,%eax
		jge    jump_6a564
		xor    %eax,%eax
	jump_6a564:
		cmp    $0x2710,%eax
		jl     jump_6a570
		mov    $0x270f,%eax
	jump_6a570:
		and    $0xffff,%eax
		push   %eax
		push   $0x7f
		mov    %eax,0x68(%esp)
		xor    %eax,%eax
		push   $0x20
		mov    EXPORT_SYMBOL(colour_lookup)+4,%al
		push   %eax
		mov    game_textures,%eax
		push   %eax
		mov    %edi,%eax
		mov    $0xd,%ecx
		sar    $0x8,%eax
		mov    %ecx,%ebx
		mov    %eax,0x78(%esp)
		mov    %esi,%eax
		push   $0xf
		sar    $0x8,%eax
		mov    0x7c(%esp),%edx
		mov    %eax,0x80(%esp)
		call   ac_build_polygon_circle_2d
		mov    0x60(%esp),%edx
		push   %edx
		push   $0x7f
		xor    %eax,%eax
		push   $0x20
		mov    EXPORT_SYMBOL(colour_lookup)+4,%al
		push   %eax
		mov    game_textures,%ebx
		push   %ebx
		mov    $0xa,%ecx
		mov    0x78(%esp),%edx
		push   $0xf
		mov    0x80(%esp),%eax
		mov    %ecx,%ebx
		call   ac_build_polygon_circle_2d
		mov    0xac(%esp),%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x4,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		mov    0x58(%esp),%ecx
		sar    $0x1f,%edx
		idiv   %ecx
		shl    $0x4,%eax
		add    %eax,%esi
		lea    0x0(,%ebp,4),%eax
		add    %ebp,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x4,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		idiv   %ecx
		shl    $0x4,%eax
		mov    0x84(%esp),%ecx
		add    %eax,%edi
		cmp    $0x1,%ecx
		jge    jump_6a642
		movl   $0x1,0x84(%esp)
	jump_6a642:
		mov    0xda(%esp),%eax
		sar    $0x10,%eax
		cmp    $0x2,%eax
		jle    jump_6a660
		xor    %ecx,%ecx
		mov    %ecx,0x50(%esp)
		mov    %ecx,0x54(%esp)
		jmp    jump_6a6de
	jump_6a660:
		mov    %ebp,%eax
		sar    $0x3,%eax
		mov    %eax,0x6c(%esp)
		imul   %eax,%eax
		mov    0xac(%esp),%ecx
		sar    $0x3,%ecx
		neg    %ecx
		mov    %ecx,%ebx
		imul   %ecx,%ebx
		lea    0x50(%esp),%edx
		mov    %edx,0x70(%esp)
		add    %ebx,%eax
		lea    0x54(%esp),%edx
		shl    $0x4,%eax
		mov    %edx,0x74(%esp)
		call   ac_LbSqrL
		mov    %eax,%ebx
		test   %eax,%eax
		jne    jump_6a6a2
		mov    $0x1,%ebx
	jump_6a6a2:
		mov    0x6c(%esp),%edx
		shl    $0xa,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    0x70(%esp),%edx
		mov    %eax,(%edx)
		mov    %ecx,%edx
		shl    $0xa,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    0x74(%esp),%edx
		mov    %eax,(%edx)
		mov    0x50(%esp),%edx
		mov    0x54(%esp),%ebx
		shl    $0x2,%edx
		shl    $0x2,%ebx
		mov    %edx,0x50(%esp)
		mov    %ebx,0x54(%esp)
	jump_6a6de:
		mov    0xac(%esp),%eax
		mov    %eax,%edx
		mov    0x84(%esp),%ebx
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,0xac(%esp)
		mov    %ebp,%edx
		mov    %ebp,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,%ebp
		mov    0xa4(%esp),%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,0xa4(%esp)
		mov    0xa8(%esp),%eax
		mov    %eax,0x78(%esp)
		mov    0xda(%esp),%eax
		mov    %esi,0x80(%esp)
		sar    $0x10,%eax
		mov    %edi,0x7c(%esp)
		cmp    $0x2,%eax
		jle    jump_6a74b
		movw   $0xc,0xbc(%esp)
		jmp    jump_6a75a
	jump_6a74b:
		mov    0xdc(%esp),%eax
		mov    %ax,0xbc(%esp)
	jump_6a75a:
		mov    $0x1,%ecx
		mov    0x84(%esp),%eax
		add    %ecx,%eax
		mov    %ecx,0x94(%esp)
		mov    %eax,0x88(%esp)
		cmp    %ecx,%eax
		jle    jump_6a8ae
		jmp    jump_6a7c9
	jump_6a780:
		mov    0xac(%esp),%edx
		mov    0xa4(%esp),%eax
		mov    0xa8(%esp),%ebx
		mov    0x94(%esp),%ecx
		add    %ebp,%edi
		inc    %ecx
		add    %edx,%esi
		add    %eax,%ebx
		mov    0x88(%esp),%edx
		mov    %ebx,0xa8(%esp)
		mov    $0x1,%bl
		mov    %ecx,0x94(%esp)
		mov    %bl,0xc0(%esp)
		cmp    %edx,%ecx
		jge    jump_6a8ae
	jump_6a7c9:
		test   %esi,%esi
		jle    jump_6a780
		mov    %esi,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+32,%ecx # lbDisplay.GraphicsScreenWidth
		sar    $0x8,%eax
		cmp    %ecx,%eax
		jge    jump_6a780
		test   %edi,%edi
		jle    jump_6a780
		mov    %edi,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+36,%edx # lbDisplay.GraphicsScreenHeight
		sar    $0x8,%eax
		cmp    %edx,%eax
		jge    jump_6a780
		mov    0xa8(%esp),%eax
		sar    $0x8,%eax
		add    $0x1107,%eax
		test   %eax,%eax
		jge    jump_6a804
		xor    %eax,%eax
	jump_6a804:
		cmp    $0x2710,%eax
		jl     jump_6a810
		mov    $0x270f,%eax
	jump_6a810:
		xor    %edx,%edx
		mov    0xc0(%esp),%dl
		push   %edx
		and    $0xffff,%eax
		mov    0xde(%esp),%edx
		push   %eax
		sar    $0x10,%edx
		xor    %eax,%eax
		shl    $0x9,%edx
		mov    EXPORT_SYMBOL(colour_lookup)+4,%al
		mov    EXPORT_SYMBOL(pixmap)+0x2000(%edx,%eax,1),%al # pixmap.fade_table[0x2000+?]
		and    $0xff,%eax
		push   %eax
		mov    0xc6(%esp),%eax
		sar    $0x10,%eax
		push   %eax
		push   %eax
		lea    (%edi,%ebp,1),%eax
		sar    $0x8,%eax
		movswl %ax,%ecx
		mov    0xc0(%esp),%eax
		add    %esi,%eax
		sar    $0x8,%eax
		movswl %ax,%ebx
		mov    %edi,%eax
		sar    $0x8,%eax
		movswl %ax,%edx
		mov    %esi,%eax
		sar    $0x8,%eax
		mov    %eax,0x7c(%esp)
		mov    0x7c(%esp),%eax
		mov    %ax,0xcc(%esp)
		mov    0xca(%esp),%eax
		sar    $0x10,%eax
		call   ac_build_polygon_slice
		test   %eax,%eax
		je     jump_6a780
		xor    %dh,%dh
		movb   $0xf,0xb(%eax)
		mov    EXPORT_SYMBOL(colour_lookup)+4,%dl
		mov    %dx,0xc(%eax)
		jmp    jump_6a780
	jump_6a8ae:
		mov    0x78(%esp),%eax
		mov    0x80(%esp),%edi
		mov    0x50(%esp),%ebx
		mov    0x7c(%esp),%esi
		mov    0x54(%esp),%ecx
		xor    %dl,%dl
		mov    %eax,0x9c(%esp)
		mov    0xda(%esp),%eax
		add    %ebx,%edi
		sar    $0x10,%eax
		add    %ecx,%esi
		cmp    $0x2,%eax
		jle    jump_6a8ed
		movw   $0x8,0xb4(%esp)
		jmp    jump_6a8fc
	jump_6a8ed:
		mov    0xdc(%esp),%eax
		mov    %ax,0xb4(%esp)
	jump_6a8fc:
		movl   $0x1,0x90(%esp)
		mov    0x84(%esp),%eax
		inc    %eax
		mov    %eax,0x5c(%esp)
		cmp    $0x1,%eax
		jle    jump_6aa2e
		jmp    jump_6a95d
	jump_6a91e:
		mov    0xac(%esp),%ebx
		mov    0xa4(%esp),%eax
		mov    0x9c(%esp),%ecx
		mov    $0x1,%dl
		add    %ebp,%esi
		add    %ebx,%edi
		add    %eax,%ecx
		mov    0x90(%esp),%eax
		mov    0x5c(%esp),%ebx
		inc    %eax
		mov    %ecx,0x9c(%esp)
		mov    %eax,0x90(%esp)
		cmp    %ebx,%eax
		jge    jump_6aa2e
	jump_6a95d:
		test   %edi,%edi
		jle    jump_6a91e
		mov    %edi,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+32,%ebx # lbDisplay.GraphicsScreenWidth
		sar    $0x8,%eax
		cmp    %ebx,%eax
		jge    jump_6a91e
		test   %esi,%esi
		jle    jump_6a91e
		mov    %esi,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+36,%ecx # lbDisplay.GraphicsScreenHeight
		sar    $0x8,%eax
		cmp    %ecx,%eax
		jge    jump_6a91e
		mov    0x9c(%esp),%eax
		sar    $0x8,%eax
		add    $0x1107,%eax
		test   %eax,%eax
		jge    jump_6a998
		xor    %eax,%eax
	jump_6a998:
		cmp    $0x2710,%eax
		jl     jump_6a9a4
		mov    $0x270f,%eax
	jump_6a9a4:
		and    $0xff,%edx
		push   %edx
		and    $0xffff,%eax
		mov    0xde(%esp),%edx
		push   %eax
		sar    $0x10,%edx
		xor    %eax,%eax
		shl    $0x9,%edx
		mov    EXPORT_SYMBOL(colour_lookup)+4,%al
		mov    EXPORT_SYMBOL(pixmap)+0x2000(%edx,%eax,1),%al # pixmap.fade_table[0x2000+?]
		and    $0xff,%eax
		push   %eax
		mov    0xbe(%esp),%eax
		sar    $0x10,%eax
		push   %eax
		push   %eax
		lea    (%esi,%ebp,1),%eax
		sar    $0x8,%eax
		movswl %ax,%ecx
		mov    0xc0(%esp),%eax
		add    %edi,%eax
		sar    $0x8,%eax
		movswl %ax,%ebx
		mov    %esi,%eax
		sar    $0x8,%eax
		movswl %ax,%edx
		mov    %edi,%eax
		sar    $0x8,%eax
		mov    %eax,0x7c(%esp)
		mov    0x7c(%esp),%eax
		cwtl
		call   ac_build_polygon_slice
		test   %eax,%eax
		je     jump_6a91e
		xor    %dh,%dh
		movb   $0xf,0xb(%eax)
		mov    EXPORT_SYMBOL(colour_lookup)+4,%dl
		mov    %dx,0xc(%eax)
		jmp    jump_6a91e
	jump_6aa2e:
		mov    0x78(%esp),%eax
		mov    0x80(%esp),%edi
		mov    0x7c(%esp),%esi
		mov    %eax,0x98(%esp)
		mov    0x54(%esp),%eax
		mov    0x50(%esp),%ecx
		sub    %eax,%esi
		mov    0xda(%esp),%eax
		xor    %dl,%dl
		sar    $0x10,%eax
		sub    %ecx,%edi
		cmp    $0x2,%eax
		jle    jump_6aa6d
		movw   $0x4,0xb0(%esp)
		jmp    jump_6aa7c
	jump_6aa6d:
		mov    0xdc(%esp),%eax
		mov    %ax,0xb0(%esp)
	jump_6aa7c:
		mov    $0x1,%ebx
		mov    0x84(%esp),%eax
		add    %ebx,%eax
		mov    %ebx,0xa0(%esp)
		mov    %eax,0x8c(%esp)
		cmp    %ebx,%eax
		jle    jump_6a2d3
		jmp    jump_6aae4
	jump_6aaa2:
		mov    0xac(%esp),%eax
		mov    0x98(%esp),%edx
		mov    0xa0(%esp),%ebx
		mov    0x8c(%esp),%ecx
		add    %ebp,%esi
		add    %eax,%edi
		mov    0xa4(%esp),%eax
		inc    %ebx
		add    %eax,%edx
		mov    %ebx,0xa0(%esp)
		mov    %edx,0x98(%esp)
		mov    $0x1,%dl
		cmp    %ecx,%ebx
		jge    jump_6a2d3
	jump_6aae4:
		test   %edi,%edi
		jle    jump_6aaa2
		mov    %edi,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+32,%ebx # lbDisplay.GraphicsScreenWidth
		sar    $0x8,%eax
		cmp    %ebx,%eax
		jge    jump_6aaa2
		test   %esi,%esi
		jle    jump_6aaa2
		mov    %esi,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+36,%ecx # lbDisplay.GraphicsScreenHeight
		sar    $0x8,%eax
		cmp    %ecx,%eax
		jge    jump_6aaa2
		mov    0x98(%esp),%eax
		sar    $0x8,%eax
		add    $0x1107,%eax
		test   %eax,%eax
		jge    jump_6ab1f
		xor    %eax,%eax
	jump_6ab1f:
		cmp    $0x2710,%eax
		jl     jump_6ab2b
		mov    $0x270f,%eax
	jump_6ab2b:
		and    $0xff,%edx
		push   %edx
		and    $0xffff,%eax
		push   %eax
		mov    0xe2(%esp),%eax
		xor    %edx,%edx
		sar    $0x10,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+4,%dl
		shl    $0x9,%eax
		mov    EXPORT_SYMBOL(pixmap)+0x2000(%edx,%eax,1),%al # pixmap.fade_table[0x2000+?]
		and    $0xff,%eax
		push   %eax
		mov    0xba(%esp),%eax
		sar    $0x10,%eax
		push   %eax
		push   %eax
		lea    (%esi,%ebp,1),%eax
		sar    $0x8,%eax
		movswl %ax,%ecx
		mov    0xc0(%esp),%eax
		add    %edi,%eax
		sar    $0x8,%eax
		movswl %ax,%ebx
		mov    %esi,%eax
		sar    $0x8,%eax
		movswl %ax,%edx
		mov    %edi,%eax
		sar    $0x8,%eax
		mov    %eax,0x7c(%esp)
		mov    0x7c(%esp),%eax
		mov    %ax,0xcc(%esp)
		mov    0xca(%esp),%eax
		sar    $0x10,%eax
		call   ac_build_polygon_slice
		test   %eax,%eax
		je     jump_6aaa2
		xor    %dh,%dh
		movb   $0xf,0xb(%eax)
		mov    EXPORT_SYMBOL(colour_lookup)+4,%dl
		mov    %dx,0xc(%eax)
		jmp    jump_6aaa2
	jump_6af7d:
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
gproc3_unkn_null_func_3:	/* 0x06B138 */
/*----------------------------------------------------------------*/
		ret


/*----------------------------------------------------------------*/
build_continuos_slice_3d:	/* 0x06B13C */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x28,%esp
		mov    %edx,%esi
		xor    %edx,%edx
		mov    0x48(%esp),%dl
		test   %edx,%edx
		jne    jump_6b195
		xor    %dl,%dl
		mov    %dl,0x26(%esp)
		mov    engn_xc,%edx
		sub    %edx,%eax
		mov    %eax,0x14(%esp)
		mov    engn_yc,%eax
		shl    $0x3,%esi
		sar    $0x3,%eax
		sub    %eax,%esi
		mov    %esi,0x18(%esp)
		sub    engn_zc,%ebx
		mov    %esp,%eax
		mov    %ebx,0x1c(%esp)
		call   ac_transform_point
		mov    (%esp),%eax
		mov    %ax,data_1aa662
		mov    0x4(%esp),%eax
		mov    %ax,data_1aa664
	jump_6b195:
		mov    engn_xc,%edi
		xor    %dh,%dh
		mov    engn_yc,%eax
		mov    %dh,0x26(%esp)
		mov    0x38(%esp),%edx
		sar    $0x3,%eax
		shl    $0x3,%edx
		mov    engn_zc,%ebp
		sub    %eax,%edx
		mov    0x3c(%esp),%eax
		sub    %edi,%ecx
		sub    %ebp,%eax
		mov    %ecx,0x14(%esp)
		mov    %eax,0x1c(%esp)
		mov    %esp,%eax
		mov    %edx,0x18(%esp)
		call   ac_transform_point
		mov    0x1c(%esp),%eax
		add    $0x1288,%eax
		mov    (%esp),%esi
		movswl %ax,%edx
		mov    0x4(%esp),%edi
		test   %edx,%edx
		jge    jump_6b1ec
		xor    %eax,%eax
	jump_6b1ec:
		movswl %ax,%edx
		cmp    $0x2710,%edx
		jl     jump_6b1fc
		mov    $0x270f,%eax
	jump_6b1fc:
		xor    %edx,%edx
		mov    0x48(%esp),%dl
		push   %edx
		and    $0xffff,%eax
		push   %eax
		xor    %eax,%eax
		mov    0x54(%esp),%al
		push   %eax
		mov    0x4e(%esp),%eax
		sar    $0x10,%eax
		mov    data_1aa662,%edx
		push   %eax
		mov    0x4e(%esp),%eax
		movswl %di,%ecx
		sar    $0x10,%eax
		movswl %si,%ebx
		push   %eax
		mov    data_1aa660,%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		call   ac_build_polygon_slice
		mov    %si,data_1aa662
		mov    %di,data_1aa664
		add    $0x28,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x18


/*----------------------------------------------------------------*/
calc_angle_rate:	/* 0x06B3D4 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		mov    %edx,%ecx
		sub    %ecx,%eax
		movswl %ax,%ecx
		xor    %edx,%edx
		cmp    $0xfffffc00,%ecx
		jge    jump_6b3ec
		add    $0x8,%ah
		jmp    jump_6b3fa
	jump_6b3ec:
		cmp    $0x400,%ecx
		jle    jump_6b3fa
		sub    $0x800,%eax
	jump_6b3fa:
		movswl %ax,%ecx
		test   %ecx,%ecx
		jge    jump_6b403
		neg    %ecx
	jump_6b403:
		cmp    $0x100,%ecx
		jle    jump_6b412
		movw   $0x30,(%ebx)
		jmp    jump_6b430
	jump_6b412:
		movswl %ax,%ecx
		test   %ecx,%ecx
		jge    jump_6b41b
		neg    %ecx
	jump_6b41b:
		mov    $0x400,%esi
		sub    %ecx,%esi
		mov    %esi,%ecx
		sar    $0x2,%ecx
		mov    %cx,(%ebx)
		add    $0x10,%ecx
		mov    %cx,(%ebx)
	jump_6b430:
		cwtl
		cmp    $0xfffffe00,%eax
		jge    jump_6b442
		mov    $0xffffff9c,%edx
		mov    %edx,%eax
		pop    %esi
		pop    %ecx
		ret
	jump_6b442:
		cmp    $0xffffff9c,%eax
		jge    jump_6b451
		mov    $0xffffffba,%edx
		mov    %edx,%eax
		pop    %esi
		pop    %ecx
		ret
	jump_6b451:
		test   %eax,%eax
		jge    jump_6b45f
		mov    $0xfffffff6,%edx
		mov    %edx,%eax
		pop    %esi
		pop    %ecx
		ret
	jump_6b45f:
		cmp    $0x200,%eax
		jle    jump_6b470
		mov    $0x64,%edx
		mov    %edx,%eax
		pop    %esi
		pop    %ecx
		ret
	jump_6b470:
		cmp    $0x64,%eax
		jle    jump_6b47f
		mov    $0x46,%edx
		mov    %edx,%eax
		pop    %esi
		pop    %ecx
		ret
	jump_6b47f:
		test   %eax,%eax
		jle    jump_6b488
		mov    $0xa,%edx
	jump_6b488:
		mov    %edx,%eax
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_build_laser_guided_piece)	/* 0x06B490 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x30,%esp
		mov    %eax,%ebp
		mov    $0x40,%edx
		mov    $0x5,%ecx
		xor    %ebx,%ebx
		mov    %dx,0x18(%esp)
		mov    %bx,0x14(%esp)
		mov    %cx,0x28(%esp)
		mov    0x18(%eax),%esi
		mov    0x20(%ebp),%edi
		mov    0x40(%ebp),%edx
		mov    0x1c(%eax),%eax
		sar    $0x8,%esi
		sar    $0x8,%eax
		sar    $0x8,%edi
		mov    %eax,0x10(%esp)
		test   %edx,%edx
		je     jump_6af7d
		mov    %edx,%eax
		mov    0x18(%edx),%edx
		mov    0x20(%eax),%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		mov    %edx,(%esp)
		mov    %eax,0x4(%esp)
		mov    %eax,%ecx
		mov    %edx,%ebx
		mov    %edi,%edx
		mov    %esi,%eax
		call   ac_angle_between_points
		mov    0x60(%ebp),%dx
		mov    %dx,0x20(%esp)
		lea    0x18(%esp),%ebx
		mov    0x1e(%esp),%edx
		cwtl
		sar    $0x10,%edx
		call   calc_angle_rate
		mov    EXPORT_SYMBOL(colour_lookup)+2,%al
		mov    %al,0x2c(%esp)
		movl   $0x14,0x24(%esp)
	jump_6b524:
		mov    0x26(%esp),%ebp
		sar    $0x10,%ebp
		test   %ebp,%ebp
		jle    jump_6af7d
		mov    0x4(%esp),%ecx
		mov    (%esp),%ebx
		mov    %edi,%edx
		mov    %esi,%eax
		call   ac_angle_between_points
		mov    0x1e(%esp),%ecx
		lea    0x18(%esp),%ebx
		sar    $0x10,%ecx
		cwtl
		mov    %ecx,%edx
		call   calc_angle_rate
		mov    %eax,0x1c(%esp)
		mov    0x16(%esp),%eax
		mov    EXPORT_SYMBOL(lbSinTable)(,%ecx,4),%ebx
		sar    $0x10,%eax
		imul   %eax,%ebx
		sar    $0x11,%ebx
		lea    (%esi,%ebx,1),%edx
		imul   EXPORT_SYMBOL(lbSinTable)+2048(,%ecx,4),%eax
		mov    %edx,0xc(%esp)
		sar    $0x11,%eax
		xor    %ebx,%ebx
		lea    (%edi,%eax,1),%edx
		mov    %ebp,%eax
		mov    0x2c(%esp),%bl
		shl    $0xb,%eax
		mov    %edx,0x8(%esp)
		mov    EXPORT_SYMBOL(pixmap)+0x1F00(%ebx,%eax,1),%al # pixmap.fade_table[0x1F00+?]
		and    $0xff,%eax
		push   %eax
		xor    %eax,%eax
		mov    0x18(%esp),%al
		push   %eax
		push   $0x2
		push   $0x2
		mov    0x1c(%esp),%ecx
		push   %edx
		mov    0x24(%esp),%eax
		mov    %edi,%ebx
		push   %eax
		mov    %eax,%edx
		mov    %esi,%eax
		call   build_continuos_slice_3d
		test   %eax,%eax
		je     jump_6af7d
		cmp    $0x1,%ebp
		jne    jump_6b5de
		xor    %bh,%bh
		movb   $0x0,0xb(%eax)
		mov    EXPORT_SYMBOL(colour_lookup)+1,%bl
		mov    %bx,0xc(%eax)
		jmp    jump_6b5f1
	jump_6b5de:
		mov    $0x35,%edx
		mov    0x24(%esp),%ebx
		movb   $0xa,0xb(%eax)
		sub    %ebx,%edx
		mov    %dx,0xc(%eax)
	jump_6b5f1:
		mov    $0x1,%ecx
		mov    0x20(%esp),%eax
		mov    0x1c(%esp),%esi
		mov    0x8(%esp),%edi
		add    %esi,%eax
		mov    0x28(%esp),%edx
		add    $0x8,%ah
		mov    %cx,0x14(%esp)
		and    $0x7,%ah
		sub    %ecx,%edx
		mov    %ax,0x20(%esp)
		mov    0x24(%esp),%eax
		mov    0xc(%esp),%esi
		sub    $0x4,%eax
		mov    %dx,0x28(%esp)
		mov    %eax,0x24(%esp)
		jmp    jump_6b524


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_build_glare)	/* 0x06B634 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x38,%esp
		mov    EXPORT_SYMBOL(next_screen_point),%si
		mov    %eax,%edi
		mov    engn_xc,%edi
		cwtl
		sub    %edi,%eax
		mov    %eax,0x14(%esp)
		mov    engn_yc,%eax
		movswl %dx,%edx
		sar    $0x3,%eax
		mov    engn_zc,%ebp
		sub    %eax,%edx
		movswl %bx,%eax
		sub    %ebp,%eax
		mov    %eax,0x1c(%esp)
		xor    %ah,%ah
		mov    %ah,0x26(%esp)
		mov    %esp,%eax
		mov    %edx,0x18(%esp)
		call   ac_transform_point
		movswl %cx,%eax
		mov    0x1c(%esp),%ebx
		shl    $0x4,%eax
		sub    %eax,%ebx
		mov    (%esp),%edi
		lea    0x1388(%ebx),%eax
		mov    0x4(%esp),%edx
		mov    %eax,0x28(%esp)
		test   %eax,%eax
		jge    jump_6b6b0
		mov    $0x1,%eax
		mov    EXPORT_SYMBOL(next_screen_point),%si
		mov    %eax,0x28(%esp)
		jmp    jump_6b6c6
	jump_6b6b0:
		mov    EXPORT_SYMBOL(next_screen_point),%si
		cmp    $0x2710,%eax
		jl     jump_6b6c6
		movl   $0x270f,0x28(%esp)
	jump_6b6c6:
		mov    EXPORT_SYMBOL(overall_scale)-2,%eax
		movswl %cx,%ebx
		sar    $0x10,%eax
		imul   %ebx,%eax
		sar    $0x8,%eax
		movswl %di,%ebx
		mov    %eax,%ecx
		cwtl
		lea    (%ebx,%eax,1),%ebp
		test   %ebp,%ebp
		jl     jump_6b704
		mov    EXPORT_SYMBOL(vec_window_width),%ebp
		sub    %eax,%ebx
		cmp    %ebp,%ebx
		jg     jump_6b704
		movswl %dx,%ebx
		lea    (%ebx,%eax,1),%ebp
		test   %ebp,%ebp
		jl     jump_6b704
		sub    %eax,%ebx
		cmp    EXPORT_SYMBOL(vec_window_height),%ebx
		jle    jump_6b70b
	jump_6b704:
		xor    %eax,%eax
		jmp    jump_6b8b0
	jump_6b70b:
		mov    %edi,%eax
		sub    %ecx,%eax
		mov    %eax,0x34(%esp)
		xor    %eax,%eax
		mov    %si,%ax
		lea    0x0(,%eax,8),%ebp
		mov    EXPORT_SYMBOL(game_screen_point_pool),%eax
		mov    0x34(%esp),%ebx
		mov    %bx,(%eax,%ebp,1)
		mov    %edx,%ebx
		sub    %ecx,%ebx
		mov    %ebx,0x30(%esp)
		xor    %ebx,%ebx
		mov    %si,%bx
		shl    $0x3,%ebx
		add    %eax,%ebx
		mov    %ebx,0x2c(%esp)
		mov    0x2c(%esp),%ebp
		mov    0x30(%esp),%ebx
		inc    %esi
		mov    %bx,0x2(%ebp)
		xor    %ebx,%ebx
		mov    %si,%bx
		add    %ecx,%edi
		mov    %di,(%eax,%ebx,8)
		xor    %ebx,%ebx
		mov    %si,%bx
		shl    $0x3,%ebx
		lea    (%eax,%ebx,1),%ebp
		mov    0x30(%esp),%ebx
		inc    %esi
		mov    %bx,0x2(%ebp)
		xor    %ebx,%ebx
		mov    %si,%bx
		mov    %di,(%eax,%ebx,8)
		xor    %ebx,%ebx
		mov    %si,%bx
		add    %ecx,%edx
		inc    %esi
		mov    %dx,0x2(%eax,%ebx,8)
		xor    %ebx,%ebx
		mov    %si,%bx
		mov    0x34(%esp),%ecx
		mov    %cx,(%eax,%ebx,8)
		xor    %ebx,%ebx
		mov    %si,%bx
		mov    %dx,0x2(%eax,%ebx,8)
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(tnext_floor_texture),%dx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    game_textures,%edx
		movb   $0x60,(%edx,%eax,2)
		movb   $0x60,0x1(%edx,%eax,2)
		movb   $0x7f,0x2(%edx,%eax,2)
		movb   $0x60,0x3(%edx,%eax,2)
		movb   $0x7f,0x6(%edx,%eax,2)
		movb   $0x7f,0x7(%edx,%eax,2)
		inc    %esi
		movb   $0x60,0x4(%edx,%eax,2)
		mov    EXPORT_SYMBOL(tnext_floor_texture),%bx
		movb   $0x7f,0x5(%edx,%eax,2)
		inc    %ebx
		movb   $0x4,0x8(%edx,%eax,2)
		mov    EXPORT_SYMBOL(mem_game)+585,%edx
		mov    EXPORT_SYMBOL(next_special_face),%eax
		dec    %edx
		sar    $0x10,%eax
		mov    %bx,EXPORT_SYMBOL(tnext_floor_texture)
		cmp    %edx,%eax
		jle    jump_6b812
		xor    %eax,%eax
		mov    %si,EXPORT_SYMBOL(next_screen_point)
		add    $0x38,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_6b812:
		mov    %eax,%edx
		shl    $0x2,%eax
		add    %edx,%eax
		mov    game_special_object_faces4,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		mov    %ebx,%edx
		dec    %edx
		mov    %dx,0x8(%eax)
		mov    %esi,%edx
		sub    $0x4,%edx
		mov    %dx,(%eax)
		mov    %esi,%edx
		sub    $0x3,%edx
		mov    %dx,0x2(%eax)
		mov    %esi,%edx
		sub    $0x2,%edx
		mov    %dx,0x6(%eax)
		mov    %esi,%edx
		dec    %edx
		mov    %dx,0x4(%eax)
		xor    %edx,%edx
		movb   $0x9,0xb(%eax)
		mov    EXPORT_SYMBOL(next_draw_item),%dx
		movb   $0x1,0xa(%eax)
		cmp    $0xafc7,%edx
		jge    jump_6b8a9
		mov    EXPORT_SYMBOL(p_current_draw_item),%edx
		mov    EXPORT_SYMBOL(next_special_face4),%bx
		movb   $0xc,(%edx)
		mov    0x28(%esp),%ecx
		mov    %bx,0x1(%edx)
		mov    EXPORT_SYMBOL(buckets)(,%ecx,2),%bx
		mov    %bx,0x3(%edx)
		mov    EXPORT_SYMBOL(next_draw_item),%bx
		add    $0x5,%edx
		mov    %bx,EXPORT_SYMBOL(buckets)(,%ecx,2)
		inc    %ebx
		mov    %edx,EXPORT_SYMBOL(p_current_draw_item)
		mov    %bx,EXPORT_SYMBOL(next_draw_item)
	jump_6b8a9:
		incw   EXPORT_SYMBOL(next_special_face4)
	jump_6b8b0:
		mov    %si,EXPORT_SYMBOL(next_screen_point)
		add    $0x38,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
check_unlock_target:	/* 0x06B8C0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    %eax,%ebx
		mov    0x40(%eax),%edx
		test   %edx,%edx
		je     jump_6b984
		mov    0xc(%edx),%ah
		mov    %edx,%esi
		test   $0x2,%ah
		je     jump_6b8e5
		andb   $0xdf,0x46(%ebx)
		jmp    jump_6b984
	jump_6b8e5:
		mov    0x18(%ebx),%eax
		mov    0x20(%ebx),%esi
		mov    0x20(%edx),%edi
		mov    0x18(%edx),%ecx
		sub    %edi,%esi
		sub    %ecx,%eax
		sar    $0x8,%esi
		mov    %eax,%ecx
		mov    %esi,%edx
		sar    $0x8,%ecx
		neg    %edx
		mov    %ecx,%eax
		call   ac_arctan
		xor    %edx,%edx
		mov    0x57(%ebx),%dl
		shl    $0x8,%edx
		sub    %eax,%edx
		add    $0x8,%dh
		mov    %edx,%eax
		and    $0x7,%ah
		cwtl
		cmp    $0x737,%eax
		jg     jump_6b929
		cmp    $0xc8,%eax
		jge    jump_6b93f
	jump_6b929:
		mov    0x46(%ebx),%ch
		movl   $0x0,0x40(%ebx)
		and    $0xdf,%ch
		mov    %ch,0x46(%ebx)
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_6b93f:
		imul   %ecx,%ecx
		imul   %esi,%esi
		mov    %ebx,%eax
		call   ac_get_weapon_range
		imul   %eax,%eax
		add    %esi,%ecx
		cmp    %eax,%ecx
		jle    jump_6b96b
		mov    0x46(%ebx),%cl
		movl   $0x0,0x40(%ebx)
		and    $0xdf,%cl
		mov    %cl,0x46(%ebx)
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_6b96b:
		mov    0x40(%ebx),%eax
		testb  $0x2,0x44(%eax)
		je     jump_6b984
		mov    0x46(%ebx),%dh
		movl   $0x0,0x40(%ebx)
		and    $0xdf,%dh
		mov    %dh,0x46(%ebx)
	jump_6b984:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
make_peep_flee:	/* 0x06B98C */
/*----------------------------------------------------------------*/
		push   %ecx
		testb  $0x18,0x44(%ebx)
		jne    jump_6b9e6
		xor    %ecx,%ecx
		mov    0xa(%ebx),%cx
		cmp    $0x24,%ecx
		je     jump_6b9e6
		testb  $0xd,0xe(%ebx)
		jne    jump_6b9e6
		neg    %edx
		call   ac_arctan
		movswl %ax,%edx
		sar    $0x3,%edx
		and    $0x7,%ah
		mov    %edx,%ecx
		mov    %eax,%edx
		sar    $0x8,%dx
		mov    %ebx,%eax
		mov    %dl,0x57(%ebx)
		call   ac_set_person_animmode_run
		movw   $0xffc0,0x72(%ebx)
		mov    0xe(%ebx),%al
		movb   $0x32,0x7d(%ebx)
		or     $0x4,%al
		mov    %al,0xe(%ebx)
		mov    %al,%ah
		mov    %cl,0x98(%ebx)
		and    $0xfe,%ah
		mov    %ah,0xe(%ebx)
	jump_6b9e6:
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
search_for_danger:	/* 0x06B9E8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x1c,%esp
		mov    %eax,%edi
		mov    $0x7fffffff,%ecx
		xor    %edx,%edx
		mov    in_network_game,%ah
		mov    %edx,(%esp)
		mov    %edx,0x4(%esp)
		mov    %ecx,0xc(%esp)
		test   %ah,%ah
		jne    jump_6ba3f
		mov    0x51(%edi),%al
		xor    %ebx,%ebx
		and    $0x1f,%al
		mov    %al,%bl
		lea    0x0(,%ebx,4),%eax
		add    %eax,%ebx
		mov    level_def__PlayableGroups,%cl
		shl    $0x3,%ebx
		mov    $0x1,%eax
		mov    war_flags__Truce(%ebx),%esi
		shl    %cl,%eax
		test   %esi,%eax
		jne    jump_6bb6b
	jump_6ba3f:
		xor    %edx,%edx
		mov    %dx,0x14(%esp)
		jmp    jump_6ba4d
	jump_6ba48:
		incw   0x14(%esp)
	jump_6ba4d:
		mov    0x12(%esp),%eax
		sar    $0x10,%eax
		cmp    $0x8,%eax
		jge    jump_6bb4c
		mov    0x12(%esp),%ecx
		mov    $0x1,%eax
		xor    %ebx,%ebx
		sar    $0x10,%ecx
		mov    ingame__InNetGame_UNSURE,%bl
		shl    %cl,%eax
		test   %eax,%ebx
		je     jump_6ba48
		xor    %ebx,%ebx
		mov    %bx,0x18(%esp)
		jmp    jump_6bacf
	jump_6ba80:
		sar    %ebx
	jump_6ba82:
		add    %ebx,%eax
		mov    0xc(%esp),%ecx
		mov    %eax,0x8(%esp)
		cmp    %ecx,%eax
		jge    jump_6baca
		cmp    $0x600,%eax
		jge    jump_6baca
		cmpb   $0x0,in_network_game
		jne    jump_6bab7
		mov    $0x1,%ecx
		mov    $0x190000,%ebx
		mov    %esi,%edx
		mov    %edi,%eax
		call   ac_can_i_see_thing
		test   %eax,%eax
		je     jump_6baca
	jump_6bab7:
		mov    0x8(%esp),%eax
		mov    %eax,0xc(%esp)
		mov    0x10(%esp),%eax
		mov    %ebp,(%esp)
		mov    %eax,0x4(%esp)
	jump_6baca:
		incw   0x18(%esp)
	jump_6bacf:
		xor    %ebx,%ebx
		mov    0x16(%esp),%eax
		mov    EXPORT_SYMBOL(playable_agents),%bl
		sar    $0x10,%eax
		cmp    %ebx,%eax
		jge    jump_6ba48
		mov    0x12(%esp),%ebx
		sar    $0x10,%ebx
		imul   $0x1aa,%ebx,%ebx
		mov    EXPORT_SYMBOL(players)+0x09C(%ebx,%eax,4),%esi # players[0].MyAgent[0]
		test   %esi,%esi
		je     jump_6baca
		mov    0x99(%esi),%dl
		test   %dl,%dl
		je     jump_6baca
		xor    %eax,%eax
		mov    %dl,%al
		cmp    $0x1e,%eax
		je     jump_6baca
		mov    0x18(%edi),%ebp
		mov    0x20(%edi),%eax
		mov    0x20(%esi),%ebx
		mov    0x18(%esi),%edx
		sub    %ebx,%eax
		sub    %edx,%ebp
		sar    $0x8,%eax
		sar    $0x8,%ebp
		mov    %eax,0x10(%esp)
		mov    %ebp,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebx
		mov    0x10(%esp),%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%ebx
		jle    jump_6ba80
		sar    %eax
		jmp    jump_6ba82
	jump_6bb4c:
		cmpl   $0x500,0xc(%esp)
		jge    jump_6bb6b
		mov    0x4(%esp),%edx
		mov    (%esp),%eax
		mov    %edi,%ebx
		call   make_peep_flee
		mov    $0x1,%eax
		jmp    jump_6bb6d
	jump_6bb6b:
		xor    %eax,%eax
	jump_6bb6d:
		add    $0x1c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_current_hand_weapon_range)	/* 0x06BB9C */
/*----------------------------------------------------------------*/
		push   %edx
		xor    %edx,%edx
		mov    0x99(%eax),%dl
		imul   $0x19,%edx,%eax # sizeof(struct WeaponDef)
		mov    EXPORT_SYMBOL(weapon_defs)(%eax),%ax
		and    $0xffff,%eax
		shl    $0x8,%eax
		pop    %edx
		ret


/*----------------------------------------------------------------*/
get_target_priority:	/* 0x06BBC0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		sub    $0x8,%esp
		mov    %eax,%ebx
		mov    0x51(%eax),%al
		mov    0x51(%edx),%ch
		and    $0x1f,%al
		and    $0x1f,%ch
		mov    %al,0x4(%esp)
		cmp    %al,%ch
		je     jump_6bce3
		movzbl %al,%esi
		lea    0x0(,%esi,4),%eax
		add    %eax,%esi
		mov    %ch,%cl
		shl    $0x3,%esi
		mov    $0x1,%eax
		mov    war_flags__Truce(%esi),%edi
		shl    %cl,%eax
		test   %edi,%eax
		jne    jump_6bce3
		cmp    0x40(%edx),%ebx
		jne    jump_6bc15
		mov    $0x5,%eax
		jmp    jump_6bce5
	jump_6bc15:
		testb  $0x20,0xd(%ebx)
		je     jump_6bc33
		mov    0x70(%ebx),%eax
		sar    $0x10,%eax
		cmp    $0xffffffce,%eax
		jge    jump_6bc33
		mov    $0x4,%eax
		add    $0x8,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_6bc33:
		movzbl 0x4(%esp),%esi
		lea    0x0(,%esi,4),%eax
		add    %esi,%eax
		movzbl %ch,%esi
		mov    %esi,(%esp)
		shl    $0x3,%eax
		mov    (%esp),%cl
		mov    $0x1,%esi
		mov    EXPORT_SYMBOL(war_flags)(%eax),%edi
		shl    %cl,%esi
		test   %edi,%esi
		je     jump_6bc6b
		mov    $0x4,%eax
		add    $0x8,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_6bc6b:
		test   %esi,data_19eca0(%eax)
		je     jump_6bc8c
		testl  $0x1fbfffff,0xa4(%edx)
		je     jump_6bc8c
		mov    $0x3,%eax
		add    $0x8,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_6bc8c:
		movzbl 0x4(%esp),%esi
		lea    0x0(,%esi,4),%eax
		mov    %ch,%cl
		add    %esi,%eax
		mov    $0x1,%esi
		and    $0xff,%ecx
		shl    %cl,%esi
		mov    %esi,%ecx
		test   %ecx,data_19ec9c(,%eax,8)
		je     jump_6bcd0
		xor    %eax,%eax
		mov    0x99(%edx),%al
		test   $0x1fffffff,%eax
		je     jump_6bcd0
		mov    $0x2,%eax
		add    $0x8,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_6bcd0:
		testb  $0x20,0xd(%ebx)
		je     jump_6bce3
		mov    $0x1,%eax
		add    $0x8,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_6bce3:
		xor    %eax,%eax
	jump_6bce5:
		add    $0x8,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
find_a_target:	/* 0x06BCF0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x24,%esp
		mov    %eax,%esi
		xor    %ah,%ah
		movzbl 0x99(%esi),%edi
		mov    %ah,0x20(%esp)
		xor    %edx,%edx
		mov    $0x7fffffff,%ebp
		mov    %edx,0x14(%esp)
		imul   $0x19,%edi,%eax # sizeof(struct WeaponDef)
		mov    EXPORT_SYMBOL(weapon_defs)(%eax),%ax
		and    $0xffff,%eax
		shl    $0x8,%eax
		add    $0x100,%eax
		mov    %eax,(%esp)
		mov    EXPORT_SYMBOL(same_type_head)+2,%ax
		mov    %eax,0x10(%esp)
		test   %ax,%ax
		je     jump_6bdcf
		mov    (%esp),%eax
		imul   %eax,%eax
		mov    %eax,0x8(%esp)
	jump_6bd51:
		xor    %edi,%edi
		mov    0x10(%esp),%di
		imul   $0xa8,%edi,%edi
		mov    things,%eax
		add    %eax,%edi
		cmp    %esi,%edi
		je     jump_6bdc2
		testb  $0x2,0xc(%edi)
		jne    jump_6bdc2
		mov    %edi,%edx
		mov    %esi,%eax
		call   get_target_priority
		test   %ax,%ax
		je     jump_6bdc2
		mov    0x8(%esp),%ebx
		mov    %edi,%edx
		mov    %esi,%eax
		xor    %ecx,%ecx
		call   ac_can_i_see_thing
		test   %eax,%eax
		je     jump_6bdc2
		cmp    %ebp,%eax
		jge    jump_6bdc2
		cmpb   $0x0,0x20(%esp)
		je     jump_6bdac
		cmp    0x40(%edi),%esi
		jne    jump_6bdc2
		mov    %eax,%ebp
		mov    0x10(%esp),%eax
		mov    %eax,0x14(%esp)
		jmp    jump_6bdc2
	jump_6bdac:
		mov    %eax,%ebp
		mov    0x10(%esp),%eax
		mov    0x40(%edi),%ebx
		mov    %eax,0x14(%esp)
		cmp    %ebx,%esi
		jne    jump_6bdc2
		movb   $0x1,0x20(%esp)
	jump_6bdc2:
		mov    0x10(%edi),%ax
		mov    %eax,0x10(%esp)
		test   %ax,%ax
		jne    jump_6bd51
	jump_6bdcf:
		mov    EXPORT_SYMBOL(same_type_head)+12,%ax
		mov    %eax,0x1c(%esp)
		test   %ax,%ax
		je     jump_6be65
		mov    (%esp),%eax
		imul   %eax,%eax
		mov    %eax,0x4(%esp)
	jump_6bdec:
		xor    %eax,%eax
		mov    0x1c(%esp),%ax
		imul   $0xa8,%eax,%eax
		mov    things,%edi
		add    %eax,%edi
		testb  $0x2,0xc(%edi)
		jne    jump_6be58
		mov    %edi,%edx
		mov    %esi,%eax
		call   get_target_priority
		test   %ax,%ax
		je     jump_6be58
		mov    0x4(%esp),%ebx
		mov    %edi,%edx
		mov    %esi,%eax
		xor    %ecx,%ecx
		call   ac_can_i_see_thing
		test   %eax,%eax
		je     jump_6be58
		cmp    %ebp,%eax
		jge    jump_6be58
		cmpb   $0x0,0x20(%esp)
		je     jump_6be44
		cmp    0x40(%edi),%esi
		jne    jump_6be58
		mov    %eax,%ebp
		mov    0x1c(%esp),%eax
		mov    %eax,0x14(%esp)
		jmp    jump_6be58
	jump_6be44:
		mov    %eax,%ebp
		mov    0x1c(%esp),%eax
		mov    %eax,0x14(%esp)
		cmp    0x40(%edi),%esi
		jne    jump_6be58
		movb   $0x1,0x20(%esp)
	jump_6be58:
		mov    0x10(%edi),%ax
		mov    %eax,0x1c(%esp)
		test   %ax,%ax
		jne    jump_6bdec
	jump_6be65:
		mov    EXPORT_SYMBOL(same_type_head)+14,%ax
		mov    %eax,0x18(%esp)
		test   %ax,%ax
		je     jump_6befc
		mov    (%esp),%eax
		imul   %eax,%eax
		mov    %eax,0xc(%esp)
	jump_6be82:
		xor    %edi,%edi
		mov    0x18(%esp),%di
		imul   $0xa8,%edi,%edi
		mov    things,%eax
		add    %eax,%edi
		testb  $0x2,0xc(%edi)
		jne    jump_6beef
		mov    %edi,%edx
		mov    %esi,%eax
		call   get_target_priority
		test   %ax,%ax
		je     jump_6beef
		mov    0xc(%esp),%ebx
		mov    %edi,%edx
		mov    %esi,%eax
		xor    %ecx,%ecx
		call   ac_can_i_see_thing
		test   %eax,%eax
		je     jump_6beef
		cmp    %ebp,%eax
		jge    jump_6beef
		cmpb   $0x0,0x20(%esp)
		je     jump_6bed9
		cmp    0x40(%edi),%esi
		jne    jump_6beef
		mov    %eax,%ebp
		mov    0x18(%esp),%eax
		mov    %eax,0x14(%esp)
		jmp    jump_6beef
	jump_6bed9:
		mov    %eax,%ebp
		mov    0x18(%esp),%eax
		mov    0x40(%edi),%ecx
		mov    %eax,0x14(%esp)
		cmp    %ecx,%esi
		jne    jump_6beef
		movb   $0x1,0x20(%esp)
	jump_6beef:
		mov    0x10(%edi),%ax
		mov    %eax,0x18(%esp)
		test   %ax,%ax
		jne    jump_6be82
	jump_6befc:
		mov    0x14(%esp),%eax
		mov    %ebp,data_1aa67c
		add    $0x24,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
available_for_guard_duty:	/* 0x06BF10 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		mov    0x56(%eax),%edx
		sar    $0x10,%edx
		mov    0xa(%eax),%bx
		test   %edx,%edx
		jg     jump_6bf96
		testl  $0x12097402,0xc(%eax)
		jne    jump_6bf96
		cmpw   $0x0,0x8e(%eax)
		jne    jump_6bf96
		cmpw   $0x0,0x62(%eax)
		jne    jump_6bf96
		testb  $0x8,0xc(%eax)
		je     jump_6bf56
		xor    %al,%al
		pop    %edx
		pop    %ebx
		ret
	jump_6bf51:
		mov    $0x1,%al
		pop    %edx
		pop    %ebx
		ret
	jump_6bf56:
		and    $0x7f,%bh
		mov    %ebx,%eax
		and    $0xffff,%eax
		cmp    $0x5,%eax
		jb     jump_6bf86
		cmp    $0x6,%eax
		jbe    jump_6bf51
		cmp    $0xc,%eax
		jb     jump_6bf7e
		jbe    jump_6bf96
		cmp    $0xd,%eax
		jbe    jump_6bf96
		cmp    $0x24,%eax
		xor    %al,%al
		pop    %edx
		pop    %ebx
		ret
	jump_6bf7e:
		cmp    $0xa,%eax
		xor    %al,%al
		pop    %edx
		pop    %ebx
		ret
	jump_6bf86:
		cmp    $0x1,%eax
		jb     jump_6bf92
		jbe    jump_6bf51
		cmp    $0x3,%eax
		jmp    jump_6bf94
	jump_6bf92:
		test   %eax,%eax
	jump_6bf94:
		je     jump_6bf51
	jump_6bf96:
		xor    %al,%al
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
find_best_guardian:	/* 0x06BFC0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    %eax,%edi
		xor    %ebx,%ebx
		xor    %ecx,%ecx
		xor    %ebp,%ebp
		mov    %dx,%cx
		mov    %ebx,0x4(%esp)
		mov    $0x3e80,%ebx
		mov    EXPORT_SYMBOL(same_type_head)+512(,%ecx,2),%cx
		mov    %ebx,(%esp)
		test   %cx,%cx
		je     jump_6c07e
	jump_6bff0:
		cmp    $0x3e8,%ebp
		jge    jump_6c07e
		xor    %eax,%eax
		mov    %cx,%ax
		cmp    $0x3e8,%eax
		jg     jump_6c0af
		imul   $0xa8,%eax,%ebx
		mov    things,%esi
		add    %esi,%ebx
		mov    0x16(%edi),%si
		inc    %ebp
		cmp    %si,%cx
		je     jump_6c071
		mov    0x46(%edi),%esi
		sar    $0x10,%esi
		cmp    %eax,%esi
		je     jump_6c071
		mov    %ebx,%eax
		call   available_for_guard_duty
		test   %al,%al
		je     jump_6c071
		mov    0x18(%ebx),%eax
		sub    0x18(%edi),%eax
		sar    $0x8,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%esi
		mov    0x20(%edi),%edx
		mov    0x20(%ebx),%eax
		sub    %edx,%eax
		sar    $0x8,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%esi
		jle    jump_6c061
		sar    %eax
		jmp    jump_6c063
	jump_6c061:
		sar    %esi
	jump_6c063:
		add    %esi,%eax
		cmp    (%esp),%eax
		jae    jump_6c071
		mov    %eax,(%esp)
		mov    %ecx,0x4(%esp)
	jump_6c071:
		mov    0x12(%ebx),%cx
		test   %cx,%cx
		jne    jump_6bff0
	jump_6c07e:
		mov    (%esp),%eax
		mov    0x4(%esp),%ecx
		mov    %eax,data_1aa680
		test   %cx,%cx
		je     jump_6c0af
		xor    %ebx,%ebx
		mov    %cx,%bx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    things,%ebx
		shl    $0x3,%eax
		add    %ebx,%eax
		jmp    jump_6c0b1
	jump_6c0af:
		xor    %eax,%eax
	jump_6c0b1:
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
find_and_alert_guardian:	/* 0x06C0BC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		sub    $0x8,%esp
		mov    %eax,%ebx
		mov    %edx,%esi
		xor    %ecx,%ecx
		mov    %ecx,(%esp)
		jmp    jump_6c0d6
	jump_6c0ce:
		inc    %ecx
	jump_6c0cf:
		test   %edi,%edi
		jne    jump_6c10d
	jump_6c0d3:
		incl   (%esp)
	jump_6c0d6:
		xor    %eax,%eax
		mov    (%esp),%ax
		cmp    $0x8,%eax
		jge    jump_6c16c
		xor    %edx,%edx
		mov    0x51(%ebx),%dl
		imul   $0x28,%edx,%edx
		add    %edx,%eax
		xor    %dh,%dh
		mov    data_19eca8(%eax),%dl
		mov    %edx,0x4(%esp)
		mov    %dl,%al
		and    $0xff,%eax
		je     jump_6c16c
		mov    things,%eax
		test   %eax,%eax
		je     jump_6c0d3
	jump_6c10d:
		xor    %edx,%edx
		mov    %ebx,%eax
		mov    0x4(%esp),%dx
		call   find_best_guardian
		mov    %eax,%edi
		test   %eax,%eax
		je     jump_6c0cf
		movw   $0xe,0xa(%eax)
		mov    0x16(%esi),%dx
		movb   $0x14,0x5b(%eax)
		mov    %dx,0x48(%eax)
		mov    0xe(%eax),%dl
		mov    %esi,0x40(%eax)
		or     $0x80,%dl
		mov    %dl,0xe(%eax)
		mov    0x16(%ebx),%dx
		mov    %dx,0x3c(%eax)
		orb    $0x40,0xe(%ebx)
		cmpl   $0x1000,data_1aa680
		jge    jump_6c165
		xor    %eax,%eax
		mov    %cx,%ax
		cmp    $0xa,%eax
		jl     jump_6c0ce
	jump_6c165:
		mov    $0x1,%eax
		jmp    jump_6c16e
	jump_6c16c:
		xor    %eax,%eax
	jump_6c16e:
		add    $0x8,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
do_vect_colide:	/* 0x06C178 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    %edx,(%esp)
		mov    %ecx,%ebp
		mov    0xa(%eax),%si
		xor    %edi,%edi
		test   %si,%si
		je     jump_6c27e
		shl    $0x3,%ebx
		mov    %ebx,0x4(%esp)
	jump_6c199:
		xor    %eax,%eax
		mov    %di,%ax
		cmp    $0x1e,%eax
		jge    jump_6c27e
		xor    %eax,%eax
		mov    %si,%ax
		imul   $0x6,%eax,%eax
		mov    game_col_vects_list,%edx
		add    %edx,%eax
		mov    0x2(%eax),%edx
		sar    $0x10,%edx
		inc    %edi
		test   %edx,%edx
		jl     jump_6c260
		mov    (%eax),%ax
		and    $0xffff,%eax
		imul   $0xe,%eax,%eax
		mov    game_col_vects,%edx
		add    %edx,%eax
		mov    0xa(%eax),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		jge    jump_6c1f9
		neg    %edx
		imul   $0x28,%edx,%edx
		mov    game_object_faces4,%ebx
		testb  $0x4,0xa(%edx,%ebx,1)
		jne    jump_6c260
	jump_6c1f9:
		mov    0xa(%eax),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		jle    jump_6c215
		neg    %edx
		mov    game_object_faces,%ebx
		shl    $0x5,%edx
		testb  $0x4,0x8(%edx,%ebx,1)
		jne    jump_6c260
	jump_6c215:
		mov    0x4(%esp),%edx
		sub    0x2(%eax),%dx
		movswl %dx,%edx
		test   %edx,%edx
		jge    jump_6c226
		neg    %edx
	jump_6c226:
		cmp    $0xa0,%edx
		jge    jump_6c260
		mov    0x20(%esp),%edx
		push   %edx
		mov    0x1c(%esp),%ebx
		push   %ebx
		mov    0x8(%esp),%ecx
		mov    0x2(%eax),%edx
		push   %ebp
		sar    $0x10,%edx
		mov    0x4(%eax),%ebx
		push   %ecx
		mov    0x8(%eax),%ecx
		sar    $0x10,%ebx
		sar    $0x10,%ecx
		movswl (%eax),%eax
		call   ac_two4_line_intersection
		test   %al,%al
		je     jump_6c260
		mov    %esi,%eax
		jmp    jump_6c280
	jump_6c260:
		xor    %eax,%eax
		mov    %si,%ax
		imul   $0x6,%eax,%eax
		mov    game_col_vects_list,%edx
		mov    0x2(%edx,%eax,1),%si
		and    $0x7fff,%si
		jne    jump_6c199
	jump_6c27e:
		xor    %eax,%eax
	jump_6c280:
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0xc


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_can_i_see_thing)	/* 0x06C28C */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x80,%esp
		mov    %eax,0x2c(%esp)
		mov    %edx,0x30(%esp)
		mov    %cx,0x6c(%esp)
		mov    %ebx,%edx
		xor    %ebx,%ebx
		mov    %ebx,0x4c(%esp)
		test   %eax,%eax
		je     jump_6c2b6
		mov    0x30(%esp),%esi
		test   %esi,%esi
		jne    jump_6c2bd
	jump_6c2b6:
		xor    %eax,%eax
		jmp    jump_6c96d
	jump_6c2bd:
		testl  $0x1000002,0x44(%esi)
		je     jump_6c2d2
		xor    %eax,%eax
		add    $0x80,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_6c2d2:
		mov    0x2c(%esp),%ebx
		xor    %eax,%eax
		mov    0x9(%ebx),%al
		cmp    $0x2,%eax
		jne    jump_6c2f1
		mov    0x1c(%ebx),%ebp
		mov    $0x1,%eax
		sar    $0x8,%ebp
		mov    %eax,0x4c(%esp)
		jmp    jump_6c2f7
	jump_6c2f1:
		mov    0x1c(%ebx),%ebp
		sar    $0x8,%ebp
	jump_6c2f7:
		mov    0x30(%esp),%ebx
		xor    %eax,%eax
		mov    0x9(%ebx),%al
		cmp    $0x2,%eax
		jne    jump_6c31a
		mov    0x1c(%ebx),%eax
		sar    $0x8,%eax
		mov    $0x1,%ebx
		mov    %eax,0x1c(%esp)
		mov    %ebx,0x4c(%esp)
		jmp    jump_6c324
	jump_6c31a:
		mov    0x1c(%ebx),%eax
		sar    $0x8,%eax
		mov    %eax,0x1c(%esp)
	jump_6c324:
		mov    0x2c(%esp),%eax
		testb  $0x10,0xf(%eax)
		jne    jump_6c338
		mov    0x30(%esp),%eax
		testb  $0x10,0xf(%eax)
		je     jump_6c340
	jump_6c338:
		movl   $0x1,0x4c(%esp)
	jump_6c340:
		mov    0x1c(%esp),%eax
		sub    %ebp,%eax
		mov    %eax,0xc(%esp)
		mov    0x30(%esp),%eax
		mov    0x2c(%esp),%ebx
		mov    0x2c(%esp),%ecx
		mov    0x18(%eax),%eax
		mov    0x18(%ebx),%edi
		mov    %eax,%ebx
		mov    0x30(%esp),%eax
		mov    0x20(%ecx),%esi
		mov    0x20(%eax),%eax
		sub    %edi,%ebx
		mov    %eax,%ecx
		sar    $0x8,%ebx
		sub    %esi,%ecx
		mov    %ebx,%esi
		imul   %ebx,%esi
		sar    $0x8,%ecx
		mov    %ecx,%eax
		imul   %ecx,%eax
		add    %eax,%esi
		mov    %esi,0x28(%esp)
		cmp    %esi,%edx
		jge    jump_6c394
		xor    %eax,%eax
		add    $0x80,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_6c394:
		mov    0xc(%esp),%eax
		imul   %eax,%eax
		mov    %ecx,%edx
		shl    $0x6,%eax
		neg    %edx
		add    %eax,%esi
		mov    %ebx,%eax
		mov    %esi,0x28(%esp)
		call   ac_arctan
		mov    0x6c(%esp),%dl
		mov    %ax,0x74(%esp)
		test   $0x1,%dl
		jne    jump_6c3ee
		mov    0x2c(%esp),%esi
		xor    %edx,%edx
		mov    0x57(%esi),%dl
		shl    $0x8,%edx
		sub    %eax,%edx
		add    $0x8,%dh
		mov    %edx,%eax
		and    $0x7,%ah
		cwtl
		cmp    $0xc8,%eax
		jle    jump_6c3ee
		cmp    $0x737,%eax
		jge    jump_6c3ee
		xor    %eax,%eax
		add    $0x80,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_6c3ee:
		mov    0x28(%esp),%eax
		call   ac_LbSqrL
		mov    %eax,0x28(%esp)
		sar    $0x6,%eax
		mov    %eax,0x78(%esp)
		xor    %eax,%eax
		mov    0x78(%esp),%ax
		test   %eax,%eax
		jne    jump_6c415
		movl   $0x1,0x78(%esp)
	jump_6c415:
		mov    0x30(%esp),%eax
		mov    0x18(%eax),%eax
		sar    $0x8,%eax
		mov    %eax,0x5c(%esp)
		mov    0x1c(%esp),%eax
		mov    %eax,0x50(%esp)
		mov    0x30(%esp),%eax
		mov    0x20(%eax),%eax
		sar    $0x8,%eax
		mov    %eax,0x54(%esp)
		mov    0x30(%esp),%eax
		mov    0x20(%eax),%eax
		sar    $0x10,%eax
		shl    $0x7,%eax
		mov    %eax,0x20(%esp)
		mov    0x30(%esp),%eax
		mov    0x2c(%esp),%esi
		mov    0x2c(%esp),%edi
		mov    0x18(%eax),%eax
		add    $0x12,%ebp
		sar    $0x10,%eax
		mov    0x20(%esp),%edx
		add    %edx,%eax
		mov    %ebp,0x60(%esp)
		mov    %eax,0x24(%esp)
		mov    0x18(%esi),%esi
		mov    0x24(%esp),%edx
		shl    $0x3,%eax
		mov    0x20(%edi),%edi
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		add    %eax,%eax
		sar    $0x8,%esi
		add    %edx,%eax
		sar    $0x8,%edi
		mov    %esi,0x58(%esp)
		mov    0xe(%eax),%al
		mov    %edi,0x64(%esp)
		mov    %al,0x7c(%esp)
		mov    0x28(%esp),%eax
		test   %eax,%eax
		jne    jump_6c4ab
		movl   $0x1,0x28(%esp)
	jump_6c4ab:
		xor    %eax,%eax
		mov    %ebx,%edx
		mov    0x78(%esp),%ax
		sar    $0x1f,%edx
		mov    %eax,0x20(%esp)
		mov    %ebx,%eax
		idivl  0x20(%esp)
		mov    %eax,0x10(%esp)
		mov    0xc(%esp),%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		idivl  0x20(%esp)
		mov    %eax,0x40(%esp)
		mov    %ecx,%edx
		mov    %ecx,%eax
		sar    $0x1f,%edx
		idivl  0x20(%esp)
		mov    %eax,0x3c(%esp)
		test   %ebx,%ebx
		jle    jump_6c4f3
		movl   $0x1,0x38(%esp)
		jmp    jump_6c4fb
	jump_6c4f3:
		movl   $0xffffffff,0x38(%esp)
	jump_6c4fb:
		test   %ecx,%ecx
		jle    jump_6c509
		movl   $0x1,0x34(%esp)
		jmp    jump_6c511
	jump_6c509:
		movl   $0xffffffff,0x34(%esp)
	jump_6c511:
		cmpl   $0x0,0xc(%esp)
		je     jump_6c51e
		xor    %dh,%dh
		mov    %dh,0x7c(%esp)
	jump_6c51e:
		mov    0x78(%esp),%eax
		mov    0x34(%esp),%edx
		mov    %ax,0x70(%esp)
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x8,%eax
		mov    0x38(%esp),%edx
		mov    %eax,0x48(%esp)
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		add    %eax,%eax
		mov    %eax,0x18(%esp)
		mov    0x34(%esp),%eax
		shl    $0x8,%eax
		mov    %eax,0x14(%esp)
		mov    %edx,%eax
		shl    $0x8,%eax
		mov    %eax,0x44(%esp)
		jmp    jump_6c8f6
	jump_6c567:
		cmpl   $0x0,0x4c(%esp)
		je     jump_6c589
		mov    %edi,%ebx
		mov    %ebp,%edx
		mov    %esi,%eax
		call   ac_check_col_collision
		test   %eax,%eax
		je     jump_6c5a4
		xor    %eax,%eax
		add    $0x80,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_6c589:
		mov    %edi,%ebx
		mov    %ebp,%edx
		mov    %esi,%eax
		call   check_col_collision_floor
		test   %eax,%eax
		je     jump_6c5a4
		xor    %eax,%eax
		add    $0x80,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_6c5a4:
		cmpb   $0x0,EXPORT_SYMBOL(debug_hud_collision)
		jne    jump_6c5b6
		cmpb   $0x0,EXPORT_SYMBOL(byte_1C844F)
		je     jump_6c5f7
	jump_6c5b6:
		mov    %edi,%eax
		mov    %esi,%edx
		sar    $0x8,%eax
		sar    $0x8,%edx
		shl    $0x7,%eax
		add    %edx,%eax
		imul   $0x12,%eax,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0xe(%edx,%eax,1),%al
		and    $0xff,%eax
		push   %eax
		push   $aD_2
		lea    0x8(%esp),%eax
		push   %eax
		lea    0xc(%esp),%ebx
		call   ac_sprintf
		add    $0xc,%esp
		mov    %edi,%edx
		mov    %esi,%eax
		call   ac_draw_text_transformed_at_ground
	jump_6c5f7:
		mov    0x7c(%esp),%cl
		test   %cl,%cl
		je     jump_6c622
		mov    %edi,%eax
		mov    %esi,%edx
		sar    $0x8,%eax
		sar    $0x8,%edx
		shl    $0x7,%eax
		add    %edx,%eax
		imul   $0x12,%eax,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		add    %edx,%eax
		cmp    0xe(%eax),%cl
		je     jump_6c929
	jump_6c622:
		cmpl   $0x0,0x4c(%esp)
		jne    jump_6c860
		mov    %edi,%edx
		mov    %esi,%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		shl    $0x7,%edx
		add    %edx,%eax
		imul   $0x12,%eax,%edx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %edx,%eax
		mov    %eax,0x68(%esp)
		cmpb   $0x0,EXPORT_SYMBOL(debug_hud_collision)
		jne    jump_6c65c
		cmpb   $0x0,EXPORT_SYMBOL(byte_1C844F)
		je     jump_6c689
	jump_6c65c:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(colour_lookup),%al
		mov    $0x100,%ecx
		push   %eax
		mov    %edi,%ebx
		lea    0x0(,%ebp,8),%edx
		push   $0x100
		mov    %esi,%eax
		and    $0xff00,%ebx
		and    $0xff00,%eax
		call   ac_draw_map_flat_rect
	jump_6c689:
		mov    0x54(%esp),%ebx
		push   %ebx
		mov    0x54(%esp),%ecx
		mov    0x60(%esp),%eax
		push   %ecx
		mov    0x60(%esp),%edx
		mov    0x68(%esp),%ebx
		push   %eax
		mov    0x70(%esp),%ecx
		mov    0x74(%esp),%eax
		call   do_vect_colide
		test   %ax,%ax
		je     jump_6c6be
		xor    %eax,%eax
		add    $0x80,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_6c6be:
		cmpl   $0x0,0x38(%esp)
		je     jump_6c749
		cmpb   $0x0,EXPORT_SYMBOL(debug_hud_collision)
		jne    jump_6c6db
		cmpb   $0x0,EXPORT_SYMBOL(byte_1C844F)
		je     jump_6c70e
	jump_6c6db:
		mov    0x44(%esp),%ecx
		xor    %eax,%eax
		mov    %edi,%ebx
		mov    EXPORT_SYMBOL(colour_lookup)+2,%al
		lea    0x0(,%ebp,8),%edx
		push   %eax
		mov    %esi,%eax
		and    $0xff00,%ebx
		and    $0xff00,%eax
		push   $0x100
		add    %ecx,%eax
		mov    $0x100,%ecx
		call   ac_draw_map_flat_rect
	jump_6c70e:
		mov    0x54(%esp),%eax
		mov    0x50(%esp),%edx
		push   %eax
		mov    0x60(%esp),%ebx
		mov    0x1c(%esp),%ecx
		push   %edx
		mov    0x70(%esp),%eax
		mov    0x60(%esp),%edx
		push   %ebx
		add    %ecx,%eax
		mov    0x70(%esp),%ecx
		mov    0x6c(%esp),%ebx
		call   do_vect_colide
		test   %ax,%ax
		je     jump_6c749
		xor    %eax,%eax
		add    $0x80,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_6c749:
		cmpl   $0x0,0x34(%esp)
		je     jump_6c7d4
		cmpb   $0x0,EXPORT_SYMBOL(debug_hud_collision)
		jne    jump_6c766
		cmpb   $0x0,EXPORT_SYMBOL(byte_1C844F)
		je     jump_6c799
	jump_6c766:
		mov    0x14(%esp),%edx
		xor    %eax,%eax
		mov    %edi,%ebx
		mov    EXPORT_SYMBOL(colour_lookup)+4,%al
		and    $0xff00,%ebx
		push   %eax
		mov    $0x100,%ecx
		add    %edx,%ebx
		push   $0x100
		mov    %esi,%eax
		lea    0x0(,%ebp,8),%edx
		and    $0xff00,%eax
		call   ac_draw_map_flat_rect
	jump_6c799:
		mov    0x54(%esp),%ebx
		push   %ebx
		mov    0x54(%esp),%ecx
		mov    0x60(%esp),%eax
		push   %ecx
		mov    0x50(%esp),%edx
		mov    0x68(%esp),%ebx
		push   %eax
		mov    0x74(%esp),%eax
		mov    0x70(%esp),%ecx
		add    %edx,%eax
		mov    0x64(%esp),%edx
		call   do_vect_colide
		test   %ax,%ax
		je     jump_6c7d4
		xor    %eax,%eax
		add    $0x80,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_6c7d4:
		cmpb   $0x0,EXPORT_SYMBOL(debug_hud_collision)
		jne    jump_6c7e6
		cmpb   $0x0,EXPORT_SYMBOL(byte_1C844F)
		je     jump_6c81f
	jump_6c7e6:
		mov    0x14(%esp),%ecx
		mov    %edi,%ebx
		xor    %eax,%eax
		lea    0x0(,%ebp,8),%edx
		mov    EXPORT_SYMBOL(colour_lookup)+3,%al
		and    $0xff00,%ebx
		push   %eax
		add    %ecx,%ebx
		mov    %esi,%eax
		mov    0x48(%esp),%ecx
		and    $0xff00,%eax
		push   $0x100
		add    %ecx,%eax
		mov    $0x100,%ecx
		call   ac_draw_map_flat_rect
	jump_6c81f:
		mov    0x54(%esp),%eax
		mov    0x50(%esp),%edx
		push   %eax
		mov    0x60(%esp),%ebx
		mov    0x4c(%esp),%ecx
		push   %edx
		mov    0x70(%esp),%eax
		mov    0x20(%esp),%edx
		push   %ebx
		add    %ecx,%eax
		mov    0x70(%esp),%ecx
		mov    0x6c(%esp),%ebx
		add    %edx,%eax
		mov    0x64(%esp),%edx
		call   do_vect_colide
		test   %ax,%ax
		je     jump_6c860
		xor    %eax,%eax
		add    $0x80,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_6c860:
		cmpb   $0x0,EXPORT_SYMBOL(debug_hud_collision)
		jne    jump_6c872
		cmpb   $0x0,EXPORT_SYMBOL(byte_1C844F)
		je     jump_6c8da
	jump_6c872:
		testb  $0x1,0x70(%esp)
		je     jump_6c880
		mov    EXPORT_SYMBOL(colour_lookup)+4,%al
		jmp    jump_6c885
	jump_6c880:
		mov    EXPORT_SYMBOL(colour_lookup)+2,%al
	jump_6c885:
		and    $0xff,%eax
		push   %eax
		mov    0x40(%esp),%eax
		add    %edi,%eax
		mov    %eax,0x24(%esp)
		push   %eax
		mov    0x48(%esp),%eax
		add    %ebp,%eax
		shl    $0x3,%eax
		push   %eax
		mov    0x1c(%esp),%eax
		mov    %edi,%ebx
		add    %esi,%eax
		lea    0x0(,%ebp,8),%edx
		mov    %eax,0x30(%esp)
		mov    %eax,%ecx
		mov    %esi,%eax
		call   ac_func_6fd1c
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(colour_lookup),%al
		push   %eax
		mov    0x24(%esp),%ecx
		push   %ecx
		mov    %edi,%ebx
		xor    %edx,%edx
		push   $0x0
		mov    %esi,%eax
		mov    0x30(%esp),%ecx
		call   ac_func_6fd1c
	jump_6c8da:
		mov    0x10(%esp),%eax
		mov    0x3c(%esp),%ebx
		mov    0x40(%esp),%edx
		add    %ebx,%edi
		mov    0x70(%esp),%ebx
		add    %eax,%esi
		dec    %ebx
		add    %edx,%ebp
		mov    %bx,0x70(%esp)
	jump_6c8f6:
		mov    0x6e(%esp),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jle    jump_6c929
		test   %esi,%esi
		jl     jump_6c91d
		test   %edi,%edi
		jl     jump_6c91d
		cmp    $0x8000,%esi
		jge    jump_6c91d
		cmp    $0x8000,%edi
		jl     jump_6c567
	jump_6c91d:
		xor    %eax,%eax
		add    $0x80,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_6c929:
		xor    %eax,%eax
		mov    0x6c(%esp),%ax
		cmp    $0x1,%eax
		jne    jump_6c969
		mov    0x2c(%esp),%eax
		xor    %edx,%edx
		mov    0x57(%eax),%dl
		mov    0x72(%esp),%eax
		sar    $0x10,%eax
		mov    %eax,%ebx
		sar    $0x8,%ebx
		cmp    %edx,%ebx
		je     jump_6c969
		add    $0x80,%eax
		and    $0x7ff,%eax
		xor    %edx,%edx
		sar    $0x8,%eax
		mov    %ax,%dx
		mov    0x2c(%esp),%eax
		call   change_player_angle
	jump_6c969:
		mov    0x28(%esp),%eax
	jump_6c96d:
		add    $0x80,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_can_i_see_building)	/* 0x06C978 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x18,%esp
		mov    %eax,%edi
		mov    %edx,0x4(%esp)
		mov    %cx,0x14(%esp)
		mov    %ebx,%edx
		mov    0x4(%esp),%eax
		mov    0x18(%edi),%ebx
		mov    0x18(%eax),%eax
		sub    %ebx,%eax
		mov    %eax,%ebx
		sar    $0x8,%ebx
		mov    %ebx,%esi
		imul   %ebx,%esi
		mov    0x4(%esp),%eax
		mov    0x20(%edi),%ecx
		mov    0x20(%eax),%eax
		sub    %ecx,%eax
		mov    %eax,%ecx
		sar    $0x8,%ecx
		mov    %ecx,%eax
		imul   %ecx,%eax
		add    %eax,%esi
		mov    %esi,(%esp)
		cmp    %esi,%edx
		jge    jump_6c9c7
		xor    %eax,%eax
		jmp    jump_6cb2b
	jump_6c9c7:
		mov    %ecx,%edx
		mov    %ebx,%eax
		neg    %edx
		call   ac_arctan
		testb  $0x1,0x14(%esp)
		je     jump_6c9f4
		cwtl
		xor    %edx,%edx
		sar    $0x8,%eax
		mov    0x57(%edi),%dl
		cmp    %edx,%eax
		je     jump_6ca1e
		xor    %edx,%edx
		mov    %ax,%dx
		mov    %edi,%eax
		call   change_player_angle
		jmp    jump_6ca1e
	jump_6c9f4:
		xor    %edx,%edx
		mov    0x57(%edi),%dl
		shl    $0x8,%edx
		sub    %eax,%edx
		mov    %edx,%eax
		add    $0x8,%ah
		and    $0x7,%ah
		cwtl
		cmp    $0xc8,%eax
		jle    jump_6ca1e
		cmp    $0x737,%eax
		jge    jump_6ca1e
		xor    %eax,%eax
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_6ca1e:
		mov    (%esp),%eax
		call   ac_LbSqrL
		mov    %eax,(%esp)
		sar    $0x7,%eax
		mov    %eax,0x10(%esp)
		xor    %eax,%eax
		mov    0x10(%esp),%ax
		test   %eax,%eax
		jne    jump_6ca43
		movl   $0x1,0x10(%esp)
	jump_6ca43:
		movzwl 0x10(%esp),%ebp
		mov    %ebx,%edx
		mov    %ebx,%eax
		sar    $0x1f,%edx
		idiv   %ebp
		mov    %eax,0x8(%esp)
		mov    %ecx,%edx
		mov    %ecx,%eax
		sar    $0x1f,%edx
		idiv   %ebp
		mov    0x18(%edi),%esi
		sar    $0x8,%esi
		mov    0x20(%edi),%edi
		mov    %eax,%ebp
		mov    0x10(%esp),%eax
		sar    $0x8,%edi
		mov    %ax,0xc(%esp)
		jmp    jump_6ca89
	jump_6ca77:
		mov    0x8(%esp),%eax
		mov    0xc(%esp),%ecx
		add    %ebp,%edi
		dec    %ecx
		add    %eax,%esi
		mov    %cx,0xc(%esp)
	jump_6ca89:
		mov    0xa(%esp),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jle    jump_6cb1b
		mov    %esi,%edx
		sar    $0x8,%edx
		test   %edx,%edx
		jl     jump_6ca77
		cmp    $0x80,%edx
		jge    jump_6ca77
		mov    %edi,%eax
		sar    $0x8,%eax
		test   %eax,%eax
		jl     jump_6ca77
		cmp    $0x80,%eax
		jge    jump_6ca77
		shl    $0x7,%eax
		add    %edx,%eax
		imul   $0x12,%eax,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		add    %edx,%eax
		cmpw   $0x0,0xa(%eax)
		je     jump_6ca77
		mov    0x8(%esp),%ebx
		lea    (%edi,%ebp,1),%ecx
		push   %eax
		mov    %edi,%edx
		mov    %esi,%eax
		add    %esi,%ebx
		call   do_fvect_colide
		test   %ax,%ax
		je     jump_6ca77
		movswl %ax,%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    game_col_vects_list,%edx
		mov    0x4(%esp),%ebx
		mov    0x2(%edx,%eax,2),%edx
		xor    %eax,%eax
		sar    $0x10,%edx
		mov    0x16(%ebx),%ax
		cmp    %eax,%edx
		je     jump_6cb28
		mov    $0xffffffff,%eax
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_6cb1b:
		cmpl   $0x0,(%esp)
		jne    jump_6cb28
		movl   $0x1,(%esp)
	jump_6cb28:
		mov    (%esp),%eax
	jump_6cb2b:
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
kill_flags:	/* 0x06CC40 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		xor    %ebx,%ebx
		mov    0x9(%edx),%bl
		cmp    $0x3,%ebx
		jne    jump_6cc52
		testb  $0x40,0x46(%edx)
		jne    jump_6cca9
	jump_6cc52:
		xor    %ebx,%ebx
		mov    0x9(%eax),%bl
		cmp    $0x9,%ebx
		jne    jump_6cc61
		mov    0x50(%eax),%al
		jmp    jump_6cc64
	jump_6cc61:
		mov    0x51(%eax),%al
	jump_6cc64:
		xor    %ah,%ah
		xor    %ebx,%ebx
		mov    0x9(%edx),%bl
		cmp    $0x9,%ebx
		jne    jump_6cc75
		mov    0x50(%edx),%dl
		jmp    jump_6cc78
	jump_6cc75:
		mov    0x51(%edx),%dl
	jump_6cc78:
		xor    %dh,%dh
		xor    %ebx,%ebx
		mov    %ax,%bx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		mov    $EXPORT_SYMBOL(war_flags),%ebx
		shl    $0x3,%eax
		add    %eax,%ebx
		mov    %edx,%ecx
		mov    $0x1,%eax
		mov    (%ebx),%edx
		shl    %cl,%eax
		test   %edx,%eax
		je     jump_6cca9
		mov    $0x1,%eax
		pop    %ecx
		pop    %ebx
		ret
	jump_6cca9:
		xor    %eax,%eax
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
find_target_from_players:	/* 0x06CCB0 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x20,%esp
		mov    %eax,%ebp
		mov    %bl,0x14(%esp)
		mov    %edx,%eax
		mov    EXPORT_SYMBOL(playable_agents),%bl
		xor    %dl,%dl
		xor    %edi,%edi
		mov    %dl,0x18(%esp)
		xor    %dh,%dh
		mov    %edi,0x40(%ebp)
		mov    %dh,0x1c(%esp)
		test   %bl,%bl
		jbe    jump_6cd75
		imul   %eax,%eax
		mov    %eax,0x10(%esp)
	jump_6cce5:
		xor    %eax,%eax
		mov    0x1c(%esp),%al
		mov    EXPORT_SYMBOL(players)+0x09C(,%eax,4),%esi # players[0].MyAgent[0]
		testb  $0x40,0x46(%esi)
		je     jump_6ccfc
		xor    %al,%al
		jmp    jump_6cd20
	jump_6ccfc:
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0x24,%eax
		jne    jump_6cd0b
		xor    %al,%al
		jmp    jump_6cd20
	jump_6cd0b:
		cmp    $0xc,%eax
		jne    jump_6cd14
		xor    %al,%al
		jmp    jump_6cd20
	jump_6cd14:
		testb  $0x2,0xc(%esi)
		je     jump_6cd1e
		xor    %al,%al
		jmp    jump_6cd20
	jump_6cd1e:
		mov    $0x1,%al
	jump_6cd20:
		test   %al,%al
		je     jump_6cd52
		mov    0x10(%esp),%ebx
		mov    %esi,%edx
		xor    %ecx,%ecx
		mov    %ebp,%eax
		mov    0x14(%esp),%cl
		call   ac_can_i_see_thing
		test   %eax,%eax
		je     jump_6cd47
		xor    %eax,%eax
		mov    0x1c(%esp),%al
		inc    %edi
		mov    %edi,(%esp,%eax,4)
		jmp    jump_6cd5d
	jump_6cd47:
		mov    0x1c(%esp),%al
		xor    %ecx,%ecx
		mov    %ecx,(%esp,%eax,4)
		jmp    jump_6cd5d
	jump_6cd52:
		xor    %eax,%eax
		mov    0x1c(%esp),%al
		xor    %ebx,%ebx
		mov    %ebx,(%esp,%eax,4)
	jump_6cd5d:
		mov    0x1c(%esp),%bh
		inc    %bh
		mov    EXPORT_SYMBOL(playable_agents),%cl
		mov    %bh,0x1c(%esp)
		cmp    %cl,%bh
		jb     jump_6cce5
	jump_6cd75:
		test   %edi,%edi
		jne    jump_6cd80
		xor    %al,%al
		jmp    jump_6cdfc
	jump_6cd80:
		xor    %eax,%eax
		mov    gameturn,%edx
		mov    0x16(%ebp),%ax
		add    %edx,%eax
		xor    %edx,%edx
		div    %edi
		lea    0x1(%edx),%eax
		mov    %al,%ah
		mov    EXPORT_SYMBOL(playable_agents),%ch
		xor    %al,%al
		test   %ch,%ch
		ja     jump_6cdb3
		jmp    jump_6cde5
	jump_6cda5:
		mov    EXPORT_SYMBOL(playable_agents),%dl
		inc    %al
		cmp    %dl,%al
		jb     jump_6cdb6
		jmp    jump_6cde5
	jump_6cdb3:
		movzbl %ah,%edi
	jump_6cdb6:
		xor    %ecx,%ecx
		mov    %al,%cl
		shl    $0x2,%ecx
		cmp    (%esp,%ecx,1),%edi
		jne    jump_6cda5
		movzbl 0x18(%esp),%esi
		lea    0x0(,%esi,8),%eax
		add    %esi,%eax
		shl    $0x3,%eax
		sub    %esi,%eax
		add    %eax,%eax
		mov    %eax,%esi
		shl    $0x2,%eax
		sub    %esi,%eax
		mov    EXPORT_SYMBOL(players)+0x09C(%ecx,%eax,1),%esi # players[0].MyAgent[0]
	jump_6cde5:
		mov    %esi,%edx
		mov    %ebp,%eax
		call   set_interrupt_target
		mov    $0x1,%edx
		mov    $0x1,%al
		mov    %dx,ingame__fld_unkC8B
	jump_6cdfc:
		add    $0x20,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
find_target_from_persuaded_peeps:	/* 0x06CE04 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x14,%esp
		mov    %eax,%ebp
		mov    %bl,0x10(%esp)
		xor    %ecx,%ecx
		mov    0x51(%eax),%cl
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		mov    $0x1,%edi
		mov    EXPORT_SYMBOL(war_flags)(,%eax,8),%ecx
		mov    EXPORT_SYMBOL(word_1531DA),%bx
		mov    %ecx,0x8(%esp)
		mov    data_19ec9c(,%eax,8),%ecx
		mov    data_19eca0(,%eax,8),%eax
		mov    %ecx,0x4(%esp)
		mov    %eax,(%esp)
		cmp    %di,%bx
		ja     jump_6ce67
		jmp    jump_6cf33
	jump_6ce55:
		mov    EXPORT_SYMBOL(word_1531DA),%cx
		inc    %edi
		cmp    %cx,%di
		jb     jump_6ce6e
		jmp    jump_6cf33
	jump_6ce67:
		imul   %edx,%edx
		mov    %edx,0xc(%esp)
	jump_6ce6e:
		xor    %eax,%eax
		mov    %di,%ax
		xor    %esi,%esi
		mov    EXPORT_SYMBOL(word_17FA58)(,%eax,2),%si
		imul   $0xa8,%esi,%esi
		mov    things,%eax
		add    %eax,%esi
		mov    0x51(%esi),%al
		testb  $0x2,0xc(%esi)
		jne    jump_6ce55
		mov    $0x1,%edx
		mov    %al,%cl
		mov    0x8(%esp),%ebx
		shl    %cl,%edx
		test   %ebx,%edx
		jne    jump_6cecf
		cmpb   $0x0,0x99(%esi)
		je     jump_6ceb3
		test   %edx,0x4(%esp)
		jne    jump_6cecf
	jump_6ceb3:
		testl  $0x283ceff,0xa4(%esi)
		je     jump_6ce55
		mov    %al,%cl
		mov    $0x1,%eax
		mov    (%esp),%ebx
		shl    %cl,%eax
		test   %ebx,%eax
		je     jump_6ce55
	jump_6cecf:
		testb  $0x40,0x46(%esi)
		je     jump_6ced9
		xor    %al,%al
		jmp    jump_6cefd
	jump_6ced9:
		xor    %edx,%edx
		mov    0xa(%esi),%dx
		cmp    $0x24,%edx
		jne    jump_6cee8
		xor    %al,%al
		jmp    jump_6cefd
	jump_6cee8:
		cmp    $0xc,%edx
		jne    jump_6cef1
		xor    %al,%al
		jmp    jump_6cefd
	jump_6cef1:
		testb  $0x2,0xc(%esi)
		je     jump_6cefb
		xor    %al,%al
		jmp    jump_6cefd
	jump_6cefb:
		mov    $0x1,%al
	jump_6cefd:
		test   %al,%al
		je     jump_6ce55
		mov    0xc(%esp),%ebx
		mov    %esi,%edx
		xor    %ecx,%ecx
		mov    %ebp,%eax
		mov    0x10(%esp),%cl
		call   ac_can_i_see_thing
		test   %eax,%eax
		je     jump_6ce55
		mov    %esi,%edx
		mov    %ebp,%eax
		call   set_interrupt_target
		mov    $0x1,%al
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_6cf33:
		xor    %al,%al
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
find_target_from_group:	/* 0x06CF40 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x14,%esp
		mov    %eax,%edi
		xor    %edx,%edx
		mov    %edx,0x4(%esp)
		mov    0x51(%edi),%dl
		mov    $0x1,%ah
		and    $0x1f,%dl
		mov    %ah,0x10(%esp)
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    war_flags__Truce(,%eax,8),%edx
		mov    EXPORT_SYMBOL(war_flags)(,%eax,8),%ebx
		not    %edx
		and    %edx,%ebx
		mov    %ebx,EXPORT_SYMBOL(war_flags)(,%eax,8)
		mov    0x51(%edi),%al
		xor    %ecx,%ecx
		and    $0x1f,%al
		mov    %al,%cl
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		and    %edx,data_19ec9c(,%eax,8)
		mov    0x51(%edi),%al
		xor    %ecx,%ecx
		and    $0x1f,%al
		mov    %al,%cl
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		and    %edx,data_19eca0(,%eax,8)
		mov    0x51(%edi),%al
		xor    %edx,%edx
		and    $0x1f,%al
		mov    %al,%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(war_flags)(,%eax,8),%edx
		mov    %edx,0x8(%esp)
		mov    data_19ec9c(,%eax,8),%edx
		mov    %edx,(%esp)
		mov    data_19eca0(,%eax,8),%eax
		mov    0x51(%edi),%dl
		mov    %eax,0xc(%esp)
		test   $0x80,%dl
		je     jump_6cff5
		movl   $0xffffffff,0x8(%esp)
		jmp    jump_6d001
	jump_6cff5:
		cmpl   $0x0,0x40(%edi)
		je     jump_6d001
		xor    %dh,%dh
		mov    %dh,0x10(%esp)
	jump_6d001:
		xor    %edx,%edx
		mov    0x99(%edi),%dl
		test   %edx,%edx
		jne    jump_6d043
		mov    $0x500,%edx
		mov    %edi,%eax
		call   ac_choose_best_weapon_for_range
		xor    %edx,%edx
		mov    0x99(%edi),%dl
		imul   $0x19,%edx,%eax # sizeof(struct WeaponDef)
		mov    EXPORT_SYMBOL(weapon_defs)(%eax),%ax
		mov    %eax,%ebp
		and    $0xffff,%ebp
		movb   $0x0,0x99(%edi)
		jmp    jump_6d05c
	jump_6d043:
		imul   $0x19,%edx,%eax # sizeof(struct WeaponDef)
		mov    EXPORT_SYMBOL(weapon_defs)(%eax),%ax
		mov    %eax,%ebp
		and    $0xffff,%ebp
	jump_6d05c:
		shl    $0x8,%ebp
		test   %ebp,%ebp
		je     jump_6d242
		mov    0x70(%edi),%ax
		shl    $0x4,%eax
		mov    0xd(%edi),%bl
		shr    $0xd,%ax
		test   $0x20,%bl
		jne    jump_6d090
		mov    0x8(%esp),%edx
		mov    (%esp),%ebx
		mov    0xc(%esp),%ecx
		or     %ebx,%edx
		or     %ecx,%edx
		jne    jump_6d092
		jmp    jump_6d242
	jump_6d090:
		xor    %eax,%eax
	jump_6d092:
		cmpw   $0x0,0x8e(%edi)
		jne    jump_6d0a3
		movl   $0x0,0x40(%edi)
	jump_6d0a3:
		xor    %edx,%edx
		mov    %ax,%dx
		cmp    $0x4,%edx
		jl     jump_6d0b2
		mov    $0x1,%eax
	jump_6d0b2:
		and    $0xffff,%eax
		shl    $0x8,%eax
		mov    in_network_game,%bh
		add    %eax,%ebp
		test   %bh,%bh
		jne    jump_6d139
		testb  $0x8,0x44(%edi)
		jne    jump_6d139
		mov    $0x1,%eax
		mov    level_def__PlayableGroups,%cl
		mov    0x8(%esp),%esi
		shl    %cl,%eax
		test   %esi,%eax
		je     jump_6d139
		xor    %ecx,%ecx
		mov    %ebp,%edx
		mov    0x10(%esp),%cl
		mov    %edi,%eax
		mov    %ecx,%ebx
		call   find_target_from_players
		test   %al,%al
		je     jump_6d101
		mov    $0x1,%al
		jmp    jump_6d244
	jump_6d101:
		mov    %ecx,%ebx
		mov    %ebp,%edx
		mov    %edi,%eax
		call   find_target_from_persuaded_peeps
		test   %al,%al
		je     jump_6d117
		mov    $0x1,%al
		jmp    jump_6d244
	jump_6d117:
		mov    $0x1,%eax
		mov    level_def__PlayableGroups,%cl
		shl    %cl,%eax
		not    %eax
		mov    (%esp),%ebx
		and    %esi,%eax
		mov    0xc(%esp),%ecx
		or     %ebx,%eax
		or     %ecx,%eax
		je     jump_6d242
	jump_6d139:
		testb  $0x20,0xd(%edi)
		je     jump_6d14a
		mov    0x70(%edi),%eax
		sar    $0x10,%eax
		cmp    $0xffffffce,%eax
		jl     jump_6d150
	jump_6d14a:
		testb  $0x8,0x44(%edi)
		je     jump_6d15f
	jump_6d150:
		mov    $0x1,%esi
		mov    $0x1,%ah
		mov    %esi,0x4(%esp)
		mov    %ah,0x10(%esp)
	jump_6d15f:
		mov    EXPORT_SYMBOL(same_type_head)+2,%si
		test   %si,%si
		je     jump_6d242
		imul   %ebp,%ebp
	jump_6d172:
		xor    %eax,%eax
		mov    %si,%ax
		imul   $0xa8,%eax,%eax
		mov    things,%esi
		add    %eax,%esi
		mov    0x4(%esp),%edx
		mov    0x51(%esi),%al
		test   %edx,%edx
		je     jump_6d195
		cmp    0x51(%edi),%al
		jne    jump_6d1d9
	jump_6d195:
		mov    $0x1,%edx
		mov    %al,%cl
		mov    0x8(%esp),%ebx
		shl    %cl,%edx
		test   %ebx,%edx
		jne    jump_6d1d9
		cmpb   $0x0,0x99(%esi)
		je     jump_6d1b4
		test   %edx,(%esp)
		jne    jump_6d1d9
	jump_6d1b4:
		testl  $0x283ceff,0xa4(%esi)
		je     jump_6d235
		mov    %al,%cl
		mov    $0x1,%eax
		mov    0xc(%esp),%ebx
		shl    %cl,%eax
		test   %ebx,%eax
		je     jump_6d235
	jump_6d1d9:
		testb  $0x40,0x46(%esi)
		je     jump_6d1e3
		xor    %al,%al
		jmp    jump_6d207
	jump_6d1e3:
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0x24,%eax
		jne    jump_6d1f2
		xor    %al,%al
		jmp    jump_6d207
	jump_6d1f2:
		cmp    $0xc,%eax
		jne    jump_6d1fb
		xor    %al,%al
		jmp    jump_6d207
	jump_6d1fb:
		testb  $0x2,0xc(%esi)
		je     jump_6d205
		xor    %al,%al
		jmp    jump_6d207
	jump_6d205:
		mov    $0x1,%al
	jump_6d207:
		test   %al,%al
		je     jump_6d235
		mov    %ebp,%ebx
		mov    %esi,%edx
		xor    %ecx,%ecx
		mov    %edi,%eax
		mov    0x10(%esp),%cl
		call   ac_can_i_see_thing
		test   %eax,%eax
		je     jump_6d235
		mov    %esi,%edx
		mov    %edi,%eax
		call   set_interrupt_target
		mov    $0x1,%al
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_6d235:
		mov    0x10(%esi),%si
		test   %si,%si
		jne    jump_6d172
	jump_6d242:
		xor    %al,%al
	jump_6d244:
		add    $0x14,%esp
		pop    %ebp
	jump_6d248:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_intel)	/* 0x06D250 */
/*----------------------------------------------------------------*/
		push   %edx
		cmpw   $0x0,0x8e(%eax)
		jne    jump_6d27f
		mov    0xc(%eax),%edx
		and    $0x20002000,%edx
		cmp    $0x20002000,%edx
		je     jump_6d270
		andb   $0xf7,0xd(%eax)
	jump_6d270:
		mov    0x56(%eax),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		jne    jump_6d27f
		call   find_target_from_group
	jump_6d27f:
		pop    %edx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_person_becomes_persuaded)	/* 0x06D284 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		mov    %eax,%esi
		mov    %edx,%edi
		mov    0x40(%eax),%edx
		test   %edx,%edx
		je     jump_6d399
		mov    %edx,%eax
		testb  $0x20,0xd(%edx)
		jne    jump_6d399
		mov    0xa(%eax),%ax
		and    $0xffff,%eax
		cmp    $0xd,%eax
		je     jump_6d399
		push   $0x3
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x14,%edx
		mov    %esi,%eax
		call   ac_play_dist_sample
		mov    0x40(%esi),%eax
		call   ac_remove_path
		mov    %esi,%eax
		call   ac_set_person_animmode_walk
		sub    %di,0x96(%esi)
		mov    0x94(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_6d2fd
		movw   $0x0,0x96(%esi)
	jump_6d2fd:
		mov    0x40(%esi),%eax
		movl   $0x0,0x40(%eax)
		mov    0x40(%esi),%eax
		movw   $0x0,0xa(%eax)
		mov    0x40(%esi),%eax
		mov    0x16(%esi),%dx
		mov    %dx,0x3c(%eax)
		mov    0x40(%esi),%eax
		orb    $0x8,0xe(%eax)
		mov    0x40(%esi),%eax
		movw   $0x0,0xa(%eax)
		mov    0x40(%esi),%eax
		movw   $0xffff,0x66(%eax)
		mov    0x40(%esi),%eax
		movb   $0x3,0x5b(%eax)
		mov    0x40(%esi),%eax
		movw   $0x5,0x68(%eax)
		mov    0x40(%esi),%eax
		movw   $0x5,0x6a(%eax)
		mov    0x40(%esi),%eax
		movb   $0x0,0x3f(%eax)
		mov    0x40(%esi),%edx
		mov    0x51(%esi),%al
		mov    %al,0x51(%edx)
		mov    0x40(%esi),%eax
		xor    %edx,%edx
		mov    0x8(%eax),%dl
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    0x92(%esi),%bx
		add    EXPORT_SYMBOL(peep_type_stats)+10(,%eax,4),%bx
		mov    0x40(%esi),%eax
		mov    %bx,0x92(%esi)
		mov    0x50(%eax),%al
		and    $0xff,%eax
		shl    $0x4,%eax
		incw   data_19f1a4(%eax)
	jump_6d399:
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret

vtable_6d3a0:
		.long   func_6d505
		.long   func_6d51e
		.long   func_6d51e
		.long   func_6d53e
		.long   func_6d53e
		.long   func_6d55e
		.long   func_6d55e
		.long   func_6d55e
		.long   func_6d51e
		.long   func_6d53e
		.long   func_6d53e
		.long   func_6d51e
		.long   func_6d53e
		.long   func_6d53e


/*----------------------------------------------------------------*/
stop_being_persuaded:	/* 0x06D3D8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    %eax,%esi
		mov    $0x1,%eax
		mov    $0x2,%edx
		jmp    jump_6d3ef
	jump_6d3eb:
		add    $0x2,%edx
		inc    %eax
	jump_6d3ef:
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(word_1531DA),%bx
		cmp    %ebx,%eax
		jge    jump_6d436
		mov    EXPORT_SYMBOL(word_17FA58)(%edx),%bx
		cmp    0x16(%esi),%bx
		jne    jump_6d3eb
		mov    %eax,%edx
		add    %eax,%eax
		jmp    jump_6d421
	jump_6d40f:
		add    $0x2,%eax
		mov    EXPORT_SYMBOL(word_17FA58)(%eax),%bx
		inc    %edx
		mov    %bx,EXPORT_SYMBOL(word_17FA58)-2(%eax)
	jump_6d421:
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(word_1531DA),%bx
		dec    %ebx
		cmp    %ebx,%edx
		jl     jump_6d40f
		decw   EXPORT_SYMBOL(word_1531DA)
	jump_6d436:
		push   $0x3
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x13,%edx
		mov    %esi,%eax
		call   ac_play_dist_sample
		xor    %edx,%edx
		mov    0x3c(%esi),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		mov    things,%ebx
		add    %edx,%eax
		xor    %ecx,%ecx
		shl    $0x3,%eax
		mov    0x8(%esi),%cl
		lea    (%ebx,%eax,1),%edx
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		mov    EXPORT_SYMBOL(peep_type_stats)+10(,%eax,4),%ax
		sub    %ax,0x92(%edx)
		mov    0xc(%esi),%edx
		mov    0x50(%esi),%al
		and    $0xfff7ffbb,%edx
		mov    %al,0x51(%esi)
		mov    %edx,0xc(%esi)
		orb    $0x44,0xc(%esi)
		mov    0x50(%esi),%al
		movw   $0x0,0xa(%esi)
		and    $0x1f,%al
		and    $0xff,%eax
		shl    $0x4,%eax
		mov    data_19f1a4(%eax),%di
		dec    %edi
		mov    in_network_game,%dl
		mov    %di,data_19f1a4(%eax)
		test   %dl,%dl
		jne    jump_6d248
		xor    %edx,%edx
		mov    0x3c(%esi),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x51(%ebx,%eax,8),%dl
		mov    ingame__TrainMode,%eax
		sar    $0x10,%eax
		cmp    %eax,%edx
		je     jump_6d57e
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_6d505:
/*----------------------------------------------------------------*/
		mov    EXPORT_SYMBOL(open_brief)-2,%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		decb   data_19984f(,%eax,8)


/*----------------------------------------------------------------*/
func_6d51e:
/*----------------------------------------------------------------*/
		mov    EXPORT_SYMBOL(open_brief)-2,%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		decw   data_199842(,%eax,8)
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_6d53e:
/*----------------------------------------------------------------*/
		mov    EXPORT_SYMBOL(open_brief)-2,%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		decw   data_19983a(,%eax,8)
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_6d55e:
/*----------------------------------------------------------------*/
		mov    EXPORT_SYMBOL(open_brief)-2,%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		decw   data_19983e(,%eax,8)
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_6d57e:
		mov    0x8(%esi),%al
		dec    %al
		cmp    $0xd,%al
		ja     jump_6d248
		and    $0xff,%eax
		jmp    *%cs:vtable_6d3a0(,%eax,4)

/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_people_intel)	/* 0x06D9F8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		movl   $0xf,(%esp)
		and    $0xff,%eax
		cmp    $0x1,%eax
		jne    jump_6da20
		xor    %ebx,%ebx
		mov    %bx,data_1aa678
		jmp    jump_6dde8
	jump_6da20:
		mov    $0x66,%ebp
		xor    %edi,%edi
		jmp    jump_6da2a
	jump_6da29:
		inc    %edi
	jump_6da2a:
		xor    %eax,%eax
		mov    %di,%ax
		cmp    $0x8,%eax
		jge    jump_6dacb
		mov    $0x1,%edx
		xor    %eax,%eax
		mov    %edi,%ecx
		mov    ingame__InNetGame_UNSURE,%al
		shl    %cl,%edx
		test   %edx,%eax
		je     jump_6da29
		xor    %edi,%ecx
		jmp    jump_6da51
	jump_6da50:
		inc    %ecx
	jump_6da51:
		xor    %edx,%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(playable_agents),%dl
		mov    %cx,%ax
		cmp    %edx,%eax
		jge    jump_6da29
		xor    %edx,%edx
		mov    %di,%dx
		imul   $0x1aa,%edx,%edx
		mov    EXPORT_SYMBOL(players)+0x09C(%edx,%eax,4),%ebx # players[0].MyAgent[0]
		test   %ebx,%ebx
		jz     jump_6da50 // avoid crash when MyAgent[] is NULL
		testw  $0x1002,0xc(%ebx)
		jne    jump_6da50
		xor    %eax,%eax
		mov    0xa(%ebx),%ax
		cmp    $0x2b,%eax
		jne    jump_6da97
		mov    0x70(%ebx),%eax
		sar    $0x10,%eax
		cmp    $0xfffffff6,%eax
		jle    jump_6da97
		cmp    $0x14,%eax
		jl     jump_6da50
	jump_6da97:
		mov    0x70(%ebx),%eax
		sar    $0x10,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %ebp,%edx
		sub    %eax,%edx
		mov    %edx,%eax
		sar    $0x2,%eax
		movswl %ax,%edx
		test   %edx,%edx
		jle    jump_6da50
		movswl %ax,%esi
		xor    %edx,%edx
		mov    gameturn,%eax
		div    %esi
		test   %edx,%edx
		jne    jump_6da50
		mov    %ebx,%eax
		call   find_target_from_group
		jmp    jump_6da50
	jump_6dacb:
		xor    %ecx,%ecx
		mov    %ecx,0x4(%esp)
		mov    $0x80080000,%ebp
		jmp    jump_6dadc
	jump_6dad8:
		incl   0x4(%esp)
	jump_6dadc:
		xor    %eax,%eax
		mov    0x4(%esp),%ax
		cmp    $0x8,%eax
		jge    jump_6dba0
		mov    0x4(%esp),%ecx
		xor    %eax,%eax
		mov    $0x1,%edx
		mov    ingame__InNetGame_UNSURE,%al
		shl    %cl,%edx
		test   %edx,%eax
		je     jump_6dad8
		xor    %ecx,%ecx
		jmp    jump_6db17
	jump_6db06:
		movl   $0x0,0x40(%ebx)
		jmp    jump_6db16
	jump_6db0f:
		mov    %ebx,%eax
		call   check_unlock_target
	jump_6db16:
		inc    %ecx
	jump_6db17:
		xor    %eax,%eax
		mov    0x4(%esp),%ax
		imul   $0x1aa,%eax,%eax
		xor    %edx,%edx
		movzbl data_1a63ae(%eax),%esi
		mov    %cx,%dx
		inc    %esi
		cmp    %esi,%edx
		jge    jump_6dad8
		imul   $0x22,%edx,%esi
		mov    EXPORT_SYMBOL(players)+0x01e(%esi,%eax,1),%si # players[0].UserInput[0].ControlMode
		and    $0x1fff,%esi
		cmp    $0x1,%si
		je     jump_6db16
		imul   $0xa8,EXPORT_SYMBOL(players)+0x088(%eax,%edx,4),%ebx # players[0].DirectControl[0]
		mov    things,%eax
		add    %eax,%ebx
		testb  $0x10,0xd(%ebx)
		je     jump_6db16
		test   %ebp,0x44(%ebx)
		jne    jump_6db0f
		cmpl   $0x0,0x40(%ebx)
		jne    jump_6db73
		andb   $0xdf,0x46(%ebx)
	jump_6db73:
		testb  $0x20,0x46(%ebx)
		jne    jump_6db0f
		mov    %ebx,%eax
		call   find_a_target
		test   %ax,%ax
		je     jump_6db06
		and    $0xffff,%eax
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %eax,%edx
		mov    %edx,0x40(%ebx)
		jmp    jump_6db16
	jump_6dba0:
		mov    EXPORT_SYMBOL(same_type_head)+2,%ax
		xor    %edx,%edx
		mov    %ax,%dx
		xor    %ecx,%ecx
		test   %edx,%edx
		je     jump_6dde8
		mov    data_1aa678,%di
	jump_6dbbc:
		cmp    %di,%cx
		jae    jump_6dbdf
		xor    %edx,%edx
		mov    %ax,%dx
		test   %edx,%edx
		je     jump_6dbdf
		imul   $0xa8,%edx,%edx
		mov    things,%ebx
		add    %edx,%ebx
		inc    %ecx
		mov    0x10(%ebx),%ax
		jmp    jump_6dbbc
	jump_6dbdf:
		xor    %edx,%edx
		mov    %ax,%dx
		test   %edx,%edx
		jne    jump_6dbf6
		xor    %eax,%eax
		mov    %ax,data_1aa678
		mov    EXPORT_SYMBOL(same_type_head)+2,%ax
	jump_6dbf6:
		mov    $0xfffff7ff,%edi
		mov    $0x20002000,%ebp
		xor    %esi,%esi
	jump_6dc02:
		and    $0xffff,%eax
		je     jump_6ddbe
		imul   $0xa8,%eax,%eax
		mov    things,%ebx
		add    %eax,%ebx
		xor    %eax,%eax
		mov    0x99(%ebx),%al
		cmp    $0x1e,%eax
		je     jump_6ddc5
		testl  $0x81080010,0x44(%ebx)
		jne    jump_6ddc5
		testw  $0x6002,0xc(%ebx)
		je     jump_6dccf
		jmp    jump_6ddc5
	jump_6dc4a:
		mov    %ebx,%eax
		mov    0x8e(%ebx),%dx
		mov    0x40(%ebx),%ecx
		cmp    %dx,%si
		jne    jump_6dc7a
		mov    0xc(%ebx),%edx
		and    %ebp,%edx
		cmp    $0x20002000,%edx
		je     jump_6dc6b
		and    %edi,0xc(%ebx)
	jump_6dc6b:
		mov    0x56(%eax),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		jne    jump_6dc7a
		call   find_target_from_group
	jump_6dc7a:
		cmp    0x40(%ebx),%esi
		jne    jump_6ddc5
		mov    %ecx,0x40(%ebx)
		jmp    jump_6ddc5
	jump_6dc8b:
		testb  $0x20,0xd(%ebx)
		jne    jump_6ddc5
		mov    0x8e(%ebx),%cx
		mov    %ebx,%eax
		cmp    %cx,%si
		jne    jump_6ddc5
		mov    0xc(%ebx),%edx
		and    %ebp,%edx
		cmp    $0x20002000,%edx
		je     jump_6dcb7
		and    %edi,0xc(%ebx)
	jump_6dcb7:
		mov    0x56(%eax),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		jne    jump_6ddc5
		call   find_target_from_group
		jmp    jump_6ddc5
	jump_6dccf:
		mov    0xa(%ebx),%ax
		and    $0x7f,%ah
		and    $0xffff,%eax
		cmp    $0xd,%eax
		jb     jump_6dd2e
		jbe    jump_6ddc5
		cmp    $0x1c,%eax
		jb     jump_6dd17
		cmp    $0x1d,%eax
		jbe    jump_6ddc5
		cmp    $0x2b,%eax
		jb     jump_6dd09
		jbe    jump_6dc8b
		cmp    $0x33,%eax
		je     jump_6ddc5
		jmp    jump_6dd8f
	jump_6dd09:
		cmp    $0x24,%eax
		je     jump_6ddc5
		jmp    jump_6dd8f
	jump_6dd17:
		cmp    $0xe,%eax
		jbe    jump_6ddc5
		cmp    $0x1b,%eax
		je     jump_6dc4a
		jmp    jump_6dd8f
	jump_6dd2e:
		cmp    $0x3,%eax
		jb     jump_6dd86
		jbe    jump_6dd53
		cmp    $0x7,%eax
		jb     jump_6dd4e
		cmp    $0xa,%eax
		jbe    jump_6ddc5
		cmp    $0xc,%eax
		je     jump_6ddc5
		jmp    jump_6dd8f
	jump_6dd4e:
		cmp    $0x5,%eax
		jb     jump_6dd8f
	jump_6dd53:
		mov    0x8e(%ebx),%cx
		mov    %ebx,%eax
		cmp    %cx,%si
		jne    jump_6ddc5
		mov    0xc(%ebx),%edx
		and    %ebp,%edx
		cmp    $0x20002000,%edx
		je     jump_6dd75
		and    %edi,0xc(%ebx)
	jump_6dd75:
		mov    0x56(%eax),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		jne    jump_6ddc5
		call   find_target_from_group
		jmp    jump_6ddc5
	jump_6dd86:
		test   %eax,%eax
		jbe    jump_6dd53
		cmp    $0x1,%eax
		je     jump_6dd53
	jump_6dd8f:
		mov    0x8e(%ebx),%dx
		mov    %ebx,%eax
		cmp    %dx,%si
		jne    jump_6ddc5
		mov    0xc(%ebx),%edx
		and    %ebp,%edx
		cmp    $0x20002000,%edx
		je     jump_6ddad
		and    %edi,0xc(%ebx)
	jump_6ddad:
		mov    0x56(%eax),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		jne    jump_6ddc5
		call   find_target_from_group
		jmp    jump_6ddc5
	jump_6ddbe:
		mov    %si,data_1aa678
	jump_6ddc5:
		mov    (%esp),%edx
		mov    data_1aa678,%cx
		mov    0x10(%ebx),%ax
		inc    %ecx
		dec    %edx
		mov    %cx,data_1aa678
		mov    %edx,(%esp)
		cmp    %dx,%si
		jne    jump_6dc02
	jump_6dde8:
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_setup_host_sub6)	/* 0x6DE00 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		xor    %eax,%eax
		xor    %ebx,%ebx
	jump_6de06:
		add    $0x70,%eax
		mov    %bx,data_1aaa28(%eax)
		mov    %bx,data_1aaa2a(%eax)
		mov    %bx,data_1aaa8a(%eax)
		mov    data_1aaa26(%eax),%edx
		mov    %bx,data_1aaa24(%eax)
		sar    $0x10,%edx
		mov    %bx,data_1aaa26(%eax)
		mov    %edx,data_1aaa20(%eax)
		movl   $0xffffffff,data_1aaa54(%eax)
		mov    data_1aaa8a(%eax),%dl
		mov    %dl,data_1aaa58(%eax)
		cmp    $0xe0,%eax
		jne    jump_6de06
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_merged_noop_unkn1)	/* 0x6F828 */
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    %eax,%eax
		ret


/*----------------------------------------------------------------*/
show_message:	/* 0x06FA04 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		mov    %eax,%esi
		xor    %eax,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		cmp    $0x1,%eax
		jne    jump_6fa3e
		xor    %eax,%eax
		mov    $0xf,%ecx
		mov    EXPORT_SYMBOL(colour_lookup)+4,%al
		mov    $0xfa,%ebx
		push   %eax
		mov    $0x32,%edx
		mov    $0x1e,%eax
		jmp    jump_6fa5a
	jump_6fa3e:
		xor    %eax,%eax
		mov    $0x1e,%ecx
		mov    EXPORT_SYMBOL(colour_lookup)+4,%al
		mov    $0x1f4,%ebx
		push   %eax
		mov    $0x64,%edx
		mov    $0x3c,%eax
	jump_6fa5a:
		call   ac_LbDrawBox
		mov    $0x66,%edx
		mov    $0x69,%eax
		xor    %ecx,%ecx
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(colour_lookup)+1,%cl
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    %esi,%ebx
		call   ac_draw_text
		call   ac_swap_wscreen
		call   ac_dos_clock
		mov    %eax,%edx
	jump_6fa8d:
		call   ac_dos_clock
		sub    %edx,%eax
		cmp    $0xc8,%eax
		jae    jump_6faa4
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+1
		je     jump_6fa8d
	jump_6faa4:
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx


/*----------------------------------------------------------------*/
nullsub_7:	/* 0x06FAA8 */
/*----------------------------------------------------------------*/
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_line_transformed_at_ground)	/* 0x06FB84 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x50,%esp
		mov    %edx,%esi
		mov    engn_xc,%edi
		mov    %eax,%edx
		sub    %edi,%edx
		cwtl
		mov    %edx,0x14(%esp)
		movswl %si,%edx
		call   ac_alt_at_point
		sar    $0x5,%eax
		mov    engn_zc,%ebp
		mov    %eax,0x18(%esp)
		xor    %ah,%ah
		sub    %ebp,%esi
		mov    %ah,0x26(%esp)
		mov    %esp,%eax
		mov    %esi,0x1c(%esp)
		call   ac_transform_point
		mov    engn_xc,%edx
		mov    %ebx,%eax
		sub    %edx,%eax
		mov    %eax,0x3c(%esp)
		movswl %cx,%edx
		movswl %bx,%eax
		call   ac_alt_at_point
		mov    engn_yc,%ebx
		mov    engn_zc,%esi
		xor    %dl,%dl
		sar    $0x5,%eax
		mov    %dl,0x4e(%esp)
		sub    %ebx,%eax
		sub    %esi,%ecx
		mov    %eax,0x40(%esp)
		lea    0x28(%esp),%eax
		mov    %ecx,0x44(%esp)
		call   ac_transform_point
		mov    (%esp),%edi
		test   %edi,%edi
		jle    jump_6fc58
		cmp    $0x280,%edi
		jge    jump_6fc58
		mov    0x4(%esp),%eax
		test   %eax,%eax
		jle    jump_6fc58
		cmp    $0x190,%eax
		jge    jump_6fc58
		mov    0x28(%esp),%ebx
		test   %ebx,%ebx
		jle    jump_6fc58
		cmp    $0x280,%ebx
		jge    jump_6fc58
		mov    0x2c(%esp),%esi
		test   %esi,%esi
		jle    jump_6fc58
		cmp    $0x190,%esi
		jge    jump_6fc58
		xor    %eax,%eax
		mov    0x60(%esp),%al
		mov    0x4(%esp),%edx
		push   %eax
		mov    %esi,%ecx
		mov    %edi,%eax
		call   ac_LbDrawLine
	jump_6fc58:
		add    $0x50,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_func_6fd1c)	/* 0x6fd1c */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x50,%esp
		mov    %ebx,%esi
		mov    engn_xc,%ebx
		mov    engn_yc,%edi
		mov    engn_zc,%ebp
		sub    %ebx,%eax
		sub    %edi,%edx
		sub    %ebp,%esi
		mov    %eax,0x3c(%esp)
		xor    %ah,%ah
		mov    %edx,0x40(%esp)
		mov    %ah,0x4e(%esp)
		lea    0x28(%esp),%eax
		mov    %esi,0x44(%esp)
		call   ac_transform_point
		mov    engn_xc,%eax
		mov    engn_yc,%edx
		sub    %eax,%ecx
		mov    0x60(%esp),%eax
		sub    %edx,%eax
		mov    engn_zc,%ebx
		mov    %eax,0x18(%esp)
		mov    0x64(%esp),%eax
		mov    %ecx,0x14(%esp)
		sub    %ebx,%eax
		xor    %dl,%dl
		mov    %eax,0x1c(%esp)
		mov    %esp,%eax
		mov    %dl,0x26(%esp)
		call   ac_transform_point
		xor    %eax,%eax
		mov    0x4(%esp),%ecx
		mov    0x68(%esp),%al
		mov    (%esp),%ebx
		push   %eax
		mov    0x30(%esp),%edx
		mov    0x2c(%esp),%eax
		call   ac_LbDrawLine
		add    $0x50,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0xc


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_unkn_draw_transformed_point)	/* 0x06FDB4 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %ebp
		sub    $0x28,%esp
		mov    %eax,%esi
		sub    engn_xc,%ebx
		mov    0x34(%esp),%eax
		mov    %ebx,0x14(%esp)
		sub    engn_zc,%eax
		mov    engn_yc,%ebp
		mov    %eax,0x1c(%esp)
		xor    %ah,%ah
		sub    %ebp,%ecx
		mov    %ah,0x26(%esp)
		mov    %esp,%eax
		mov    %ecx,0x18(%esp)
		call   ac_transform_point
		xor    %eax,%eax
		mov    0x38(%esp),%al
		mov    0x4(%esp),%ecx
		push   %eax
		mov    0x4(%esp),%ebx
		mov    %esi,%eax
		call   ac_LbDrawLine
		add    $0x28,%esp
		pop    %ebp
		pop    %esi
		ret    $0x8


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_func_6fe80)	/* 0x6fe80 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x130,%esp
		mov    %eax,0x118(%esp)
		mov    %edx,0xf4(%esp)
		mov    %ebx,0x114(%esp)
		mov    %ecx,0xfc(%esp)
		mov    0x118(%esp),%edx
		mov    %ecx,%eax
		sub    %edx,%eax
		mov    0xf4(%esp),%ebx
		mov    %eax,0x11c(%esp)
		mov    0x140(%esp),%eax
		sub    %ebx,%eax
		mov    0x114(%esp),%ecx
		mov    %eax,0x108(%esp)
		mov    0x144(%esp),%eax
		sub    %ecx,%eax
		mov    %eax,0xf8(%esp)
		mov    0x11c(%esp),%eax
		mov    %eax,0x120(%esp)
		mov    %eax,%esi
		mov    0xf8(%esp),%eax
		imul   %eax,%eax
		neg    %esi
		mov    %esi,%edx
		imul   %esi,%edx
		add    %edx,%eax
		mov    %esi,0x120(%esp)
		call   ac_LbSqrL
		mov    %eax,%ebx
		test   %eax,%eax
		je     jump_702b2
		mov    0xf8(%esp),%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x3,%eax
		add    %eax,%edx
		add    %edx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,0x110(%esp)
		lea    0x0(,%esi,4),%eax
		sub    %esi,%eax
		shl    $0x3,%eax
		lea    (%esi,%eax,1),%edx
		add    %edx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    0x11c(%esp),%edx
		mov    %eax,0x120(%esp)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x3,%eax
		add    %eax,%edx
		add    %edx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    0x108(%esp),%edx
		mov    %eax,0x11c(%esp)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x3,%eax
		add    %eax,%edx
		add    %edx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,0x108(%esp)
		mov    0x110(%esp),%eax
		mov    $0x32,%esi
		mov    %eax,0xf8(%esp)
		mov    0x148(%esp),%al
		mov    %ebx,%edx
		dec    %al
		sar    $0x1f,%edx
		mov    %al,0x12c(%esp)
		mov    %ebx,%eax
		idiv   %esi
		mov    $0x1,%edi
		mov    %eax,0x104(%esp)
		jmp    jump_701f3
	jump_6ffe9:
		mov    0xf8(%esp),%ebp
		lea    -0x1(%eax),%edx
		imul   %edx,%ebp
		mov    0x108(%esp),%esi
		imul   %eax,%esi
		add    0xf4(%esp),%esi
		imul   0x11c(%esp),%edx
		mov    0x118(%esp),%ecx
		add    %edx,%ecx
		mov    %ecx,0xf0(%esp)
		mov    %ecx,%edx
		add    0x110(%esp),%edx
		mov    0xf8(%esp),%ecx
		imul   %eax,%ecx
		mov    %ecx,0x10c(%esp)
		mov    0x114(%esp),%ecx
		add    0x10c(%esp),%ecx
		mov    %ecx,0x100(%esp)
		imul   0x11c(%esp),%eax
		mov    0x118(%esp),%ecx
		add    %eax,%ecx
		mov    %ecx,0x124(%esp)
		mov    %ecx,%eax
		mov    engn_xc,%ecx
		mov    0x114(%esp),%ebx
		sub    %ecx,%eax
		mov    engn_yc,%ecx
		mov    %eax,0x14(%esp)
		mov    %esi,%eax
		add    %ebx,%ebp
		sub    %ecx,%eax
		mov    engn_zc,%ecx
		mov    %eax,0x18(%esp)
		mov    0x100(%esp),%eax
		mov    0x120(%esp),%ebx
		sub    %ecx,%eax
		add    %ebp,%ebx
		mov    %eax,0x1c(%esp)
		xor    %cl,%cl
		mov    %esp,%eax
		mov    %cl,0x26(%esp)
		call   ac_transform_point
		mov    engn_xc,%eax
		mov    engn_zc,%ecx
		sub    %eax,%edx
		sub    %ecx,%ebx
		mov    %edx,0xb4(%esp)
		mov    %esi,%eax
		mov    engn_yc,%edx
		mov    %ebx,0xbc(%esp)
		sub    %edx,%eax
		xor    %ch,%ch
		mov    %eax,0xb8(%esp)
		lea    0xa0(%esp),%eax
		mov    %ch,0xc6(%esp)
		call   ac_transform_point
		mov    0xa4(%esp),%ecx
		xor    %eax,%eax
		mov    0xa0(%esp),%ebx
		mov    0x12c(%esp),%al
		mov    0x4(%esp),%edx
		push   %eax
		mov    %eax,0x12c(%esp)
		mov    0x4(%esp),%eax
		call   ac_LbDrawLine
		mov    0x120(%esp),%edx
		mov    0x110(%esp),%ebx
		mov    0x124(%esp),%eax
		mov    engn_xc,%ecx
		sub    %edx,%ebp
		sub    %ecx,%eax
		mov    0xf0(%esp),%edx
		mov    %eax,0xdc(%esp)
		mov    %esi,%eax
		sub    %ebx,%edx
		sub    engn_yc,%eax
		mov    engn_zc,%ecx
		mov    %eax,0xe0(%esp)
		mov    0x100(%esp),%eax
		sub    %ecx,%eax
		mov    %eax,0xe4(%esp)
		xor    %al,%al
		mov    %al,0xee(%esp)
		lea    0xc8(%esp),%eax
		mov    0x128(%esp),%ecx
		call   ac_transform_point
		mov    engn_xc,%eax
		mov    engn_zc,%ebx
		sub    %eax,%edx
		sub    %ebx,%ebp
		mov    %edx,0x8c(%esp)
		mov    %ebp,0x94(%esp)
		xor    %ah,%ah
		mov    engn_yc,%edx
		mov    %ah,0x9e(%esp)
		sub    %edx,%esi
		lea    0x78(%esp),%eax
		mov    %esi,0x90(%esp)
		call   ac_transform_point
		mov    0x78(%esp),%ebx
		mov    0xcc(%esp),%edx
		mov    0xc8(%esp),%eax
		push   %ecx
		mov    0x80(%esp),%ecx
		add    $0x8,%edi
		call   ac_LbDrawLine
	jump_701f3:
		xor    %eax,%eax
		mov    0x104(%esp),%edx
		mov    %di,%ax
		cmp    %edx,%eax
		jl     jump_6ffe9
		mov    0x118(%esp),%eax
		sub    engn_xc,%eax
		mov    engn_yc,%ecx
		mov    %eax,0x3c(%esp)
		mov    0xf4(%esp),%eax
		sub    %ecx,%eax
		mov    engn_zc,%esi
		mov    %eax,0x40(%esp)
		mov    0x114(%esp),%eax
		sub    %esi,%eax
		mov    %eax,0x44(%esp)
		xor    %ah,%ah
		mov    %ah,0x4e(%esp)
		lea    0x28(%esp),%eax
		call   ac_transform_point
		mov    0xfc(%esp),%eax
		sub    engn_xc,%eax
		mov    engn_yc,%ebp
		mov    %eax,0x64(%esp)
		mov    0x140(%esp),%eax
		sub    %ebp,%eax
		mov    engn_zc,%edx
		mov    %eax,0x68(%esp)
		mov    0x144(%esp),%eax
		sub    %edx,%eax
		mov    %eax,0x6c(%esp)
		xor    %dl,%dl
		lea    0x50(%esp),%eax
		mov    %dl,0x76(%esp)
		call   ac_transform_point
		xor    %eax,%eax
		mov    0x54(%esp),%ecx
		mov    0x148(%esp),%al
		mov    0x50(%esp),%ebx
		push   %eax
		mov    0x30(%esp),%edx
		mov    0x2c(%esp),%eax
		call   ac_LbDrawLine
	jump_702b2:
		add    $0x130,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0xc


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_func_702c0)	/* 0x702c0 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x14c,%esp
		mov    %edx,%esi
		mov    %ebx,%ebp
		mov    0x15c(%esp),%edx
		mov    %ebx,%edi
		sub    %edx,%edi
		mov    %edi,0x140(%esp)
		lea    (%eax,%ecx,1),%edi
		sub    %ecx,%eax
		mov    engn_xc,%ebx
		mov    %eax,0x148(%esp)
		sub    %ebx,%eax
		mov    engn_yc,%ecx
		mov    %eax,0x14(%esp)
		mov    %esi,%eax
		sub    %ecx,%eax
		mov    engn_zc,%edx
		mov    %eax,0x18(%esp)
		mov    0x140(%esp),%eax
		sub    %edx,%eax
		mov    %eax,0x1c(%esp)
		xor    %ah,%ah
		mov    %ah,0x26(%esp)
		mov    %esp,%eax
		call   ac_transform_point
		mov    engn_xc,%ebx
		mov    %edi,%eax
		sub    %ebx,%eax
		mov    engn_yc,%ecx
		mov    %eax,0x64(%esp)
		mov    %esi,%eax
		sub    %ecx,%eax
		mov    engn_zc,%edx
		mov    %eax,0x68(%esp)
		mov    0x140(%esp),%eax
		sub    %edx,%eax
		mov    %eax,0x6c(%esp)
		xor    %dl,%dl
		lea    0x50(%esp),%eax
		mov    %dl,0x76(%esp)
		call   ac_transform_point
		mov    0x54(%esp),%ecx
		xor    %eax,%eax
		mov    0x50(%esp),%ebx
		mov    0x160(%esp),%al
		mov    0x4(%esp),%edx
		push   %eax
		mov    %eax,0x148(%esp)
		mov    0x4(%esp),%eax
		call   ac_LbDrawLine
		mov    engn_xc,%edx
		mov    %edi,%eax
		mov    0x15c(%esp),%ecx
		sub    %edx,%eax
		mov    engn_yc,%ebx
		mov    %eax,0x3c(%esp)
		mov    %esi,%eax
		add    %ecx,%ebp
		sub    %ebx,%eax
		mov    engn_zc,%ecx
		mov    %eax,0x40(%esp)
		mov    0x140(%esp),%eax
		sub    %ecx,%eax
		xor    %dh,%dh
		mov    %eax,0x44(%esp)
		lea    0x28(%esp),%eax
		mov    %dh,0x4e(%esp)
		call   ac_transform_point
		mov    engn_xc,%edx
		mov    %edi,%eax
		sub    %edx,%eax
		mov    engn_yc,%ebx
		mov    %eax,0xb4(%esp)
		mov    %esi,%eax
		sub    %ebx,%eax
		mov    engn_zc,%ecx
		mov    %eax,0xb8(%esp)
		mov    %ebp,%eax
		sub    %ecx,%eax
		xor    %bl,%bl
		mov    %eax,0xbc(%esp)
		lea    0xa0(%esp),%eax
		mov    %bl,0xc6(%esp)
		call   ac_transform_point
		mov    0x144(%esp),%eax
		mov    0xa4(%esp),%ecx
		mov    0xa0(%esp),%ebx
		push   %eax
		mov    0x30(%esp),%edx
		mov    0x2c(%esp),%eax
		call   ac_LbDrawLine
		mov    engn_xc,%edx
		mov    engn_yc,%ebx
		mov    %esi,%eax
		mov    engn_zc,%ecx
		sub    %ebx,%eax
		sub    %edx,%edi
		mov    %eax,0x130(%esp)
		mov    %ebp,%eax
		mov    %edi,0x12c(%esp)
		sub    %ecx,%eax
		xor    %bh,%bh
		mov    %eax,0x134(%esp)
		lea    0x118(%esp),%eax
		mov    %bh,0x13e(%esp)
		call   ac_transform_point
		mov    0x148(%esp),%eax
		sub    engn_xc,%eax
		mov    engn_yc,%edx
		mov    %eax,0x104(%esp)
		mov    %esi,%eax
		sub    %edx,%eax
		mov    engn_zc,%ebx
		mov    %eax,0x108(%esp)
		mov    %ebp,%eax
		xor    %cl,%cl
		sub    %ebx,%eax
		mov    %cl,0x116(%esp)
		mov    %eax,0x10c(%esp)
		lea    0xf0(%esp),%eax
		mov    0x144(%esp),%ecx
		call   ac_transform_point
		mov    0xf0(%esp),%ebx
		mov    0x11c(%esp),%edx
		push   %ecx
		mov    0x11c(%esp),%eax
		mov    0xf8(%esp),%ecx
		call   ac_LbDrawLine
		mov    0x148(%esp),%eax
		mov    engn_xc,%edi
		mov    engn_yc,%edx
		mov    engn_zc,%ebx
		sub    %edi,%eax
		xor    %ch,%ch
		mov    %eax,0xdc(%esp)
		mov    %esi,%eax
		mov    %ch,0xee(%esp)
		sub    %edx,%eax
		sub    %ebx,%ebp
		mov    %eax,0xe0(%esp)
		lea    0xc8(%esp),%eax
		mov    %ebp,0xe4(%esp)
		call   ac_transform_point
		mov    0x148(%esp),%eax
		sub    engn_xc,%eax
		mov    engn_zc,%ebp
		mov    %eax,0x8c(%esp)
		mov    0x140(%esp),%eax
		sub    %ebp,%eax
		mov    engn_yc,%edi
		mov    %eax,0x94(%esp)
		xor    %al,%al
		sub    %edi,%esi
		mov    %al,0x9e(%esp)
		lea    0x78(%esp),%eax
		mov    %esi,0x90(%esp)
		call   ac_transform_point
		mov    0x144(%esp),%eax
		mov    0x7c(%esp),%ecx
		mov    0x78(%esp),%ebx
		push   %eax
		mov    0xd0(%esp),%edx
		mov    0xcc(%esp),%eax
		call   ac_LbDrawLine
		add    $0x14c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x8


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_map_flat_rect)	/* 0x705bc */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x14c,%esp
		mov    %eax,%ebp
		mov    %edx,%esi
		mov    %ebx,%edi
		add    %ecx,%eax
		mov    engn_xc,%edx
		mov    %eax,0x140(%esp)
		mov    %ebp,%eax
		sub    %edx,%eax
		mov    engn_yc,%ebx
		mov    %eax,0x64(%esp)
		mov    %esi,%eax
		sub    %ebx,%eax
		mov    engn_zc,%ecx
		mov    %eax,0x68(%esp)
		mov    %edi,%eax
		sub    %ecx,%eax
		mov    %eax,0x6c(%esp)
		xor    %ah,%ah
		mov    %ah,0x76(%esp)
		lea    0x50(%esp),%eax
		call   ac_transform_point
		mov    0x140(%esp),%eax
		sub    engn_xc,%eax
		mov    engn_yc,%ebx
		mov    %eax,0x12c(%esp)
		mov    %esi,%eax
		sub    %ebx,%eax
		mov    engn_zc,%ecx
		mov    %eax,0x130(%esp)
		mov    %edi,%eax
		sub    %ecx,%eax
		xor    %dl,%dl
		mov    %eax,0x134(%esp)
		lea    0x118(%esp),%eax
		mov    %dl,0x13e(%esp)
		call   ac_transform_point
		mov    0x11c(%esp),%ecx
		xor    %eax,%eax
		mov    0x118(%esp),%ebx
		mov    0x160(%esp),%al
		mov    0x54(%esp),%edx
		push   %eax
		mov    %eax,0x148(%esp)
		mov    0x54(%esp),%eax
		call   ac_LbDrawLine
		mov    0x15c(%esp),%eax
		add    %edi,%eax
		mov    engn_xc,%edx
		mov    %eax,0x148(%esp)
		mov    0x140(%esp),%eax
		sub    %edx,%eax
		mov    engn_yc,%ebx
		mov    %eax,0x8c(%esp)
		mov    %esi,%eax
		sub    %ebx,%eax
		mov    engn_zc,%ecx
		mov    %eax,0x90(%esp)
		mov    %edi,%eax
		sub    %ecx,%eax
		xor    %dh,%dh
		mov    %eax,0x94(%esp)
		lea    0x78(%esp),%eax
		mov    %dh,0x9e(%esp)
		call   ac_transform_point
		mov    0x140(%esp),%eax
		sub    engn_xc,%eax
		mov    engn_yc,%ebx
		mov    %eax,0x104(%esp)
		mov    %esi,%eax
		sub    %ebx,%eax
		mov    engn_zc,%ecx
		mov    %eax,0x108(%esp)
		mov    0x148(%esp),%eax
		sub    %ecx,%eax
		xor    %bl,%bl
		mov    %eax,0x10c(%esp)
		lea    0xf0(%esp),%eax
		mov    %bl,0x116(%esp)
		call   ac_transform_point
		mov    0x144(%esp),%eax
		mov    0xf4(%esp),%ecx
		mov    0xf0(%esp),%ebx
		push   %eax
		mov    0x80(%esp),%edx
		mov    0x7c(%esp),%eax
		call   ac_LbDrawLine
		mov    0x140(%esp),%eax
		sub    engn_xc,%eax
		mov    engn_yc,%ebx
		mov    %eax,0xb4(%esp)
		mov    %esi,%eax
		sub    %ebx,%eax
		mov    engn_zc,%ecx
		mov    %eax,0xb8(%esp)
		mov    0x148(%esp),%eax
		sub    %ecx,%eax
		xor    %bh,%bh
		mov    %eax,0xbc(%esp)
		lea    0xa0(%esp),%eax
		mov    %bh,0xc6(%esp)
		call   ac_transform_point
		mov    engn_xc,%edx
		mov    %ebp,%eax
		sub    %edx,%eax
		mov    engn_yc,%ebx
		mov    %eax,0xdc(%esp)
		mov    %esi,%eax
		sub    %ebx,%eax
		mov    engn_zc,%ecx
		mov    %eax,0xe0(%esp)
		mov    0x148(%esp),%eax
		sub    %ecx,%eax
		mov    %eax,0xe4(%esp)
		xor    %cl,%cl
		lea    0xc8(%esp),%eax
		mov    %cl,0xee(%esp)
		call   ac_transform_point
		mov    0x144(%esp),%eax
		mov    0xcc(%esp),%ecx
		mov    0xc8(%esp),%ebx
		push   %eax
		mov    0xa8(%esp),%edx
		mov    0xa4(%esp),%eax
		call   ac_LbDrawLine
		mov    engn_xc,%edx
		mov    %ebp,%eax
		sub    %edx,%eax
		mov    engn_yc,%ebx
		mov    %eax,0x14(%esp)
		mov    %esi,%eax
		sub    %ebx,%eax
		mov    engn_zc,%ecx
		mov    %eax,0x18(%esp)
		mov    0x148(%esp),%eax
		sub    %ecx,%eax
		mov    %eax,0x1c(%esp)
		xor    %ch,%ch
		mov    %esp,%eax
		mov    %ch,0x26(%esp)
		call   ac_transform_point
		mov    engn_xc,%eax
		mov    engn_yc,%edx
		mov    engn_zc,%ebx
		mov    %ch,0x4e(%esp)
		mov    0x144(%esp),%ecx
		sub    %eax,%ebp
		sub    %edx,%esi
		sub    %ebx,%edi
		lea    0x28(%esp),%eax
		mov    %ebp,0x3c(%esp)
		mov    %esi,0x40(%esp)
		mov    %edi,0x44(%esp)
		call   ac_transform_point
		mov    0x28(%esp),%ebx
		mov    0x4(%esp),%edx
		push   %ecx
		mov    0x4(%esp),%eax
		mov    0x30(%esp),%ecx
		call   ac_LbDrawLine
		add    $0x14c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x8


/*----------------------------------------------------------------*/
draw_3d_map_corn_square:	/* 0x070958 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x28,%esp
		mov    %ebx,%edi
		mov    %ecx,%esi
		mov    engn_xc,%ecx
		mov    engn_zc,%ebp
		sub    %ecx,%eax
		mov    %edx,0x18(%esp)
		mov    %eax,0x14(%esp)
		xor    %ah,%ah
		sub    %ebp,%edi
		mov    %ah,0x26(%esp)
		mov    %esp,%eax
		mov    %edi,0x1c(%esp)
		call   ac_transform_point
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		mov    $0x4,%ebx
		cmp    $0x1,%eax
		je     jump_709a2
		mov    $0x8,%ebx
	jump_709a2:
		movzbl 0x3c(%esp),%edi
		mov    0x4(%esp),%edx
		mov    0x38(%esp),%eax
		movswl %bx,%ebp
		sub    %eax,%edx
		mov    (%esp),%eax
		push   %edi
		sub    %esi,%eax
		mov    %edx,%ecx
		lea    (%eax,%ebp,1),%ebx
		call   ac_LbDrawLine
		mov    0x4(%esp),%edx
		sub    0x38(%esp),%edx
		mov    (%esp),%ebx
		add    %esi,%ebx
		push   %edi
		mov    %ebx,%eax
		mov    %edx,%ecx
		sub    %ebp,%eax
		call   ac_LbDrawLine
		mov    0x4(%esp),%edx
		mov    0x38(%esp),%ecx
		mov    (%esp),%eax
		push   %edi
		add    %esi,%eax
		sub    %ecx,%edx
		mov    %eax,%ebx
		lea    (%edx,%ebp,1),%ecx
		call   ac_LbDrawLine
		mov    0x4(%esp),%ecx
		mov    0x38(%esp),%eax
		push   %edi
		add    %eax,%ecx
		mov    0x4(%esp),%eax
		mov    %ecx,%edx
		add    %esi,%eax
		sub    %ebp,%edx
		mov    %eax,%ebx
		call   ac_LbDrawLine
		mov    0x4(%esp),%edx
		mov    0x38(%esp),%ebx
		mov    (%esp),%eax
		push   %edi
		add    %esi,%eax
		add    %ebx,%edx
		mov    %eax,%ebx
		mov    %edx,%ecx
		sub    %ebp,%ebx
		call   ac_LbDrawLine
		mov    0x4(%esp),%edx
		mov    0x38(%esp),%ecx
		mov    (%esp),%eax
		push   %edi
		add    %ecx,%edx
		sub    %esi,%eax
		mov    %edx,%ecx
		lea    (%eax,%ebp,1),%ebx
		call   ac_LbDrawLine
		mov    0x4(%esp),%edx
		mov    0x38(%esp),%eax
		push   %edi
		add    %eax,%edx
		mov    0x4(%esp),%eax
		mov    %edx,%ecx
		sub    %esi,%eax
		sub    %ebp,%ecx
		mov    %eax,%ebx
		call   ac_LbDrawLine
		mov    0x4(%esp),%edx
		mov    0x38(%esp),%ebx
		mov    (%esp),%eax
		push   %edi
		sub    %esi,%eax
		sub    %ebx,%edx
		mov    %eax,%ebx
		lea    (%edx,%ebp,1),%ecx
		call   ac_LbDrawLine
		add    $0x28,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x8


/*----------------------------------------------------------------*/
func_70a88:
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x30,%esp
		mov    %eax,%esi
		mov    engn_xc,%edi
		mov    (%eax),%eax
		sub    %edi,%eax
		mov    %eax,0x14(%esp)
		mov    (%edx),%eax
		mov    engn_yc,%ebp
		shl    $0x3,%eax
		sub    %ebp,%eax
		mov    %eax,0x18(%esp)
		sub    engn_zc,%ebx
		xor    %ah,%ah
		mov    %ah,0x26(%esp)
		mov    %esp,%eax
		mov    %ebx,0x1c(%esp)
		call   ac_transform_point
		mov    (%esp),%eax
		mov    %ax,0x2c(%esp)
		mov    -0x2(%esp),%eax
		sar    $0x10,%eax
		mov    0x4(%esp),%edi
		mov    %eax,(%esi)
		movswl %di,%eax
		mov    %eax,(%edx)
		xor    %eax,%eax
		mov    %cx,%ax
		mov    frame,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    (%eax),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    melement_ani,%esi
		add    %eax,%eax
		mov    melement_ani,%edx
		add    %eax,%esi
		cmp    %edx,%esi
		ja     jump_70b34
		jmp    jump_70bc5
	jump_70b17:
		mov    0x8(%esi),%si
		and    $0xffff,%esi
		imul   $0xa,%esi,%esi
		mov    melement_ani,%ebx
		add    %ebx,%esi
		cmp    %ebx,%esi
		jbe    jump_70bc5
	jump_70b34:
		xor    %ebx,%ebx
		mov    m_sprites,%ebp
		mov    (%esi),%bx
		add    %ebp,%ebx
		cmp    %ebp,%ebx
		jbe    jump_70b17
		mov    0x6(%esi),%ax
		xor    %ah,%ah
		and    $0x7,%al
		mov    0x7(%esi),%dl
		mov    %ax,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		test   $0xfe,%dl
		jne    jump_70b17
		mov    0x40(%esp),%dh
		test   %dh,%dh
		je     jump_70b93
		xor    %ecx,%ecx
		mov    %dh,%cl
		mov    0x2(%esi),%edx
		sar    $0x10,%edx
		movswl %di,%eax
		sar    %edx
		add    %eax,%edx
		mov    (%esi),%eax
		sar    $0x10,%eax
		sar    %eax
		mov    %eax,0x28(%esp)
		mov    0x2a(%esp),%eax
		mov    0x28(%esp),%ebp
		sar    $0x10,%eax
		add    %ebp,%eax
		call   ac_LbSpriteDrawOneColour
		jmp    jump_70b17
	jump_70b93:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		mov    0x2(%esi),%eax
		sar    $0x10,%eax
		movswl %di,%edx
		sar    %eax
		add    %eax,%edx
		mov    (%esi),%eax
		mov    0x2a(%esp),%ecx
		sar    $0x10,%eax
		sar    $0x10,%ecx
		sar    %eax
		add    %ecx,%eax
		call   ac_LbSpriteDraw
		jmp    jump_70b17
	jump_70bc5:
		xor    %edx,%edx
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_text_transformed_at_ground)	/* 0x070C50 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x28,%esp
		mov    %edx,%ecx
		mov    engn_xc,%esi
		mov    %eax,%edx
		sub    %esi,%edx
		cwtl
		mov    %edx,0x14(%esp)
		movswl %cx,%edx
		call   ac_alt_at_point
		mov    engn_yc,%edi
		sar    $0x8,%eax
		sub    %edi,%eax
		mov    engn_zc,%ebp
		mov    %eax,0x18(%esp)
		xor    %ah,%ah
		sub    %ebp,%ecx
		mov    %ah,0x26(%esp)
		mov    %esp,%eax
		mov    %ecx,0x1c(%esp)
		call   ac_transform_point
		mov    (%esp),%eax
		test   %eax,%eax
		jle    jump_70cd2
		mov    0x4(%esp),%edx
		test   %edx,%edx
		jle    jump_70cd2
		cmp    $0x280,%eax
		jge    jump_70cd2
		cmp    $0x190,%edx
		jge    jump_70cd2
		mov    0x4(%esp),%eax
		add    %eax,%eax
		movswl %ax,%edx
		mov    (%esp),%eax
		xor    %ecx,%ecx
		add    %eax,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+2,%cl
		cwtl
		call   ac_draw_text
	jump_70cd2:
		add    $0x28,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_text_transformed)	/* 0x70D80 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x28,%esp
		mov    %ebx,%esi
		mov    %ecx,%ebx
		mov    engn_xc,%ecx
		mov    engn_yc,%edi
		mov    engn_zc,%ebp
		sub    %ecx,%eax
		sub    %edi,%edx
		sub    %ebp,%esi
		mov    %eax,0x14(%esp)
		xor    %ah,%ah
		mov    %edx,0x18(%esp)
		mov    %ah,0x26(%esp)
		mov    %esp,%eax
		mov    %esi,0x1c(%esp)
		call   ac_transform_point
		mov    (%esp),%eax
		test   %eax,%eax
		jle    jump_70df5
		mov    0x4(%esp),%edx
		test   %edx,%edx
		jle    jump_70df5
		cmp    $0x280,%eax
		jge    jump_70df5
		cmp    $0x190,%edx
		jge    jump_70df5
		mov    0x4(%esp),%eax
		add    %eax,%eax
		movswl %ax,%edx
		mov    (%esp),%eax
		xor    %ecx,%ecx
		add    %eax,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+3,%cl
		cwtl
		call   ac_draw_text
	jump_70df5:
		add    $0x28,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_unkn1_bar)	/* 0x070E90 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x70,%esp
		xor    %esi,%esi
		mov    %ax,%si
		lea    0x0(,%esi,8),%ecx
		sub    %esi,%ecx
		mov    game_col_vects,%edx
		add    %ecx,%ecx
		mov    engn_xc,%ebx
		movswl (%ecx,%edx,1),%eax
		sub    %ebx,%eax
		mov    %eax,0x14(%esp)
		mov    (%ecx,%edx,1),%eax
		sar    $0x10,%eax
		mov    %eax,0x18(%esp)
		mov    0x2(%ecx,%edx,1),%eax
		mov    engn_zc,%edi
		sar    $0x10,%eax
		sub    %edi,%eax
		mov    %eax,0x1c(%esp)
		xor    %ah,%ah
		mov    %ah,0x26(%esp)
		mov    %esp,%eax
		call   ac_transform_point
		mov    game_col_vects,%edx
		mov    0x4(%ecx,%edx,1),%eax
		mov    engn_xc,%ebp
		sar    $0x10,%eax
		sub    %ebp,%eax
		mov    %eax,0x3c(%esp)
		mov    0x6(%ecx,%edx,1),%eax
		sar    $0x10,%eax
		mov    %eax,0x40(%esp)
		mov    0x8(%ecx,%edx,1),%eax
		mov    engn_zc,%edx
		sar    $0x10,%eax
		sub    %edx,%eax
		mov    %eax,0x44(%esp)
		xor    %dl,%dl
		lea    0x28(%esp),%eax
		mov    %dl,0x4e(%esp)
		call   ac_transform_point
		xor    %eax,%eax
		mov    0x2c(%esp),%ecx
		mov    EXPORT_SYMBOL(colour_lookup)+1,%al
		mov    0x28(%esp),%ebx
		push   %eax
		mov    0x8(%esp),%edx
		mov    0x4(%esp),%eax
		call   ac_LbDrawLine
		mov    (%esp),%ebx
		push   %esi
		mov    0x2c(%esp),%ecx
		mov    0x8(%esp),%edx
		push   $ascD_54
		lea    0x58(%esp),%eax
		mov    0x34(%esp),%edi
		push   %eax
		add    %ecx,%ebx
		add    %edi,%edx
		call   ac_sprintf
		xor    %ecx,%ecx
		movswl %dx,%edx
		mov    EXPORT_SYMBOL(colour_lookup)+7,%cl
		add    $0xc,%esp
		movswl %bx,%eax
		lea    0x50(%esp),%ebx
		call   ac_draw_text
		add    $0x70,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_engine_unk3_last)	/* 0x070F94 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x78,%esp
		mov    %ax,0x68(%esp)
		mov    %dx,0x6c(%esp)
		mov    0x66(%esp),%edx
		xor    %eax,%eax
		sar    $0x10,%edx
		mov    EXPORT_SYMBOL(render_area_a),%ax
		sar    $0x8,%edx
		sar    %eax
		sub    %eax,%edx
		mov    %dx,0x64(%esp)
		jmp    jump_70fc8
	jump_70fc3:
		incw   0x64(%esp)
	jump_70fc8:
		mov    0x66(%esp),%edx
		xor    %eax,%eax
		sar    $0x10,%edx
		mov    EXPORT_SYMBOL(render_area_a),%ax
		sar    $0x8,%edx
		sar    %eax
		add    %eax,%edx
		mov    0x62(%esp),%eax
		sar    $0x10,%eax
		cmp    %edx,%eax
		jge    jump_711e8
		mov    0x6a(%esp),%edx
		xor    %eax,%eax
		sar    $0x10,%edx
		mov    EXPORT_SYMBOL(render_area_b),%ax
		sar    $0x8,%edx
		sar    %eax
		sub    %eax,%edx
		mov    %dx,0x74(%esp)
		jmp    jump_7100f
	jump_7100a:
		incw   0x74(%esp)
	jump_7100f:
		mov    0x6a(%esp),%edx
		xor    %eax,%eax
		sar    $0x10,%edx
		mov    EXPORT_SYMBOL(render_area_b),%ax
		sar    $0x8,%edx
		sar    %eax
		add    %eax,%edx
		mov    0x72(%esp),%eax
		sar    $0x10,%eax
		cmp    %edx,%eax
		jge    jump_70fc3
		mov    0x62(%esp),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		jle    jump_7100a
		cmp    $0x80,%edx
		jge    jump_7100a
		test   %eax,%eax
		jle    jump_7100a
		cmp    $0x80,%eax
		jge    jump_7100a
		shl    $0x7,%eax
		add    %edx,%eax
		imul   $0x12,%eax,%edx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %edx,%eax
		mov    %eax,0x60(%esp)
		mov    0xa(%eax),%ax
		mov    %eax,0x70(%esp)
		test   %ax,%ax
		je     jump_7100a
	jump_7106e:
		mov    0x60(%esp),%esi
		sub    EXPORT_SYMBOL(game_my_big_map),%esi
		mov    $0x900,%ebx
		mov    %esi,%eax
		xor    %edx,%edx
		div    %ebx
		xor    %edi,%edi
		mov    %ax,%di
		mov    %edi,%eax
		shl    $0x7,%eax
		imul   $0x12,%eax,%eax
		mov    $0x12,%ebx
		sub    %eax,%esi
		xor    %edx,%edx
		mov    %esi,%eax
		div    %ebx
		xor    %esi,%esi
		push   $0x63
		mov    %ax,%si
		shl    $0x8,%edi
		shl    $0x8,%esi
		mov    %edi,%ecx
		lea    0x100(%esi),%eax
		mov    %edi,%edx
		mov    %eax,0x60(%esp)
		mov    %eax,%ebx
		mov    %esi,%eax
		lea    0x100(%edi),%ebp
		call   ac_draw_line_transformed_at_ground
		push   $0x63
		mov    0x60(%esp),%ebx
		mov    %ebp,%ecx
		mov    %edi,%edx
		mov    %ebx,%eax
		call   ac_draw_line_transformed_at_ground
		push   $0x63
		mov    0x60(%esp),%ebx
		mov    %ebp,%ecx
		mov    %ebp,%edx
		mov    %esi,%eax
		call   ac_draw_line_transformed_at_ground
		push   $0x63
		mov    %edi,%ecx
		mov    %esi,%ebx
		mov    %ebp,%edx
		mov    %esi,%eax
		call   ac_draw_line_transformed_at_ground
		xor    %edx,%edx
		mov    0x70(%esp),%dx
		imul   $0x6,%edx,%edx
		mov    game_col_vects_list,%eax
		mov    (%edx,%eax,1),%ax
		and    $0xffff,%eax
		call   ac_draw_unkn1_bar
		mov    game_col_vects_list,%ebp
		mov    0x2(%edx,%ebp,1),%ax
		and    $0x7f,%ah
		mov    %eax,0x70(%esp)
		xor    %eax,%eax
		mov    0x70(%esp),%ax
		imul   $0x6,%eax,%eax
		mov    0x2(%eax,%ebp,1),%eax
		sar    $0x10,%eax
		push   %eax
		add    $0x80,%esi
		push   $ascD_55
		lea    0x8(%esp),%eax
		add    $0x80,%edi
		push   %eax
		movswl %di,%edx
		call   ac_sprintf
		mov    engn_xc,%ebx
		add    $0xc,%esp
		mov    %esi,%eax
		sub    %ebx,%esi
		cwtl
		mov    %esi,0x48(%esp)
		call   ac_alt_at_point
		mov    engn_yc,%ecx
		sar    $0x8,%eax
		sub    %ecx,%eax
		mov    engn_zc,%esi
		mov    %eax,0x4c(%esp)
		xor    %ah,%ah
		sub    %esi,%edi
		mov    %ah,0x5a(%esp)
		lea    0x34(%esp),%eax
		mov    %edi,0x50(%esp)
		call   ac_transform_point
		mov    0x34(%esp),%edi
		test   %edi,%edi
		jle    jump_711d7
		mov    0x38(%esp),%ebp
		test   %ebp,%ebp
		jle    jump_711d7
		cmp    $0x280,%edi
		jge    jump_711d7
		cmp    $0x190,%ebp
		jge    jump_711d7
		mov    0x38(%esp),%eax
		add    %eax,%eax
		mov    %esp,%ebx
		movswl %ax,%edx
		mov    0x34(%esp),%eax
		xor    %ecx,%ecx
		add    %eax,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+2,%cl
		cwtl
		call   ac_draw_text
	jump_711d7:
		cmpw   $0x0,0x70(%esp)
		jne    jump_7106e
		jmp    jump_7100a
	jump_711e8:
		add    $0x78,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_draw_map_flat_circle)	/* 0x711f4 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xbc,%esp
		mov    %ax,0xb0(%esp)
		mov    %dx,0xb4(%esp)
		mov    %bx,0xb8(%esp)
		mov    %ecx,0xac(%esp)
		mov    0xb8(%esp),%ecx
		mov    0xac(%esp),%edx
		mov    $0x1,%esi
		mov    %eax,%ebx
		add    %edx,%ecx
		jmp    jump_7136a
	jump_71238:
		xor    %edx,%edx
		shl    $0x7,%eax
		mov    0xac(%esp),%dx
		mov    EXPORT_SYMBOL(lbSinTable)(%eax),%edi
		imul   %edx,%edi
		sar    $0x10,%edi
		mov    %edi,0xa0(%esp)
		mov    0xa0(%esp),%edi
		mov    %di,0xa8(%esp)
		mov    EXPORT_SYMBOL(lbSinTable)+2048(%eax),%edi
		imul   %edx,%edi
		mov    0xb6(%esp),%eax
		sar    $0x10,%edi
		sar    $0x10,%eax
		movswl %di,%ebp
		add    %eax,%ebp
		mov    0xae(%esp),%eax
		sar    $0x10,%eax
		mov    %eax,0xa0(%esp)
		mov    0xa6(%esp),%eax
		sar    $0x10,%eax
		mov    %eax,0xa4(%esp)
		mov    0xa0(%esp),%eax
		add    0xa4(%esp),%eax
		mov    0xb2(%esp),%edx
		mov    %eax,0xa4(%esp)
		movswl %bx,%eax
		mov    engn_xc,%ebx
		sar    $0x10,%edx
		sub    %ebx,%eax
		mov    engn_yc,%ebx
		mov    %eax,0x14(%esp)
		mov    %edx,%eax
		sub    %ebx,%eax
		movswl %cx,%ecx
		mov    %eax,0x18(%esp)
		sub    engn_zc,%ecx
		xor    %ah,%ah
		mov    %ah,0x26(%esp)
		mov    %esp,%eax
		mov    %ecx,0x1c(%esp)
		call   ac_transform_point
		mov    0xa4(%esp),%eax
		mov    engn_xc,%ebx
		mov    engn_yc,%ecx
		sub    %ebx,%eax
		sub    %ecx,%edx
		mov    %eax,0x3c(%esp)
		mov    %edx,0x40(%esp)
		xor    %dl,%dl
		mov    engn_zc,%eax
		mov    %dl,0x4e(%esp)
		sub    %eax,%ebp
		lea    0x28(%esp),%eax
		mov    %ebp,0x44(%esp)
		call   ac_transform_point
		xor    %eax,%eax
		mov    0x2c(%esp),%ecx
		mov    0xcc(%esp),%al
		mov    0x28(%esp),%ebx
		push   %eax
		mov    0x8(%esp),%edx
		mov    0x4(%esp),%eax
		call   ac_LbDrawLine
		mov    0xb0(%esp),%ebx
		add    0xa8(%esp),%ebx
		mov    0xb8(%esp),%ecx
		inc    %esi
		add    %edi,%ecx
	jump_7136a:
		xor    %eax,%eax
		mov    %si,%ax
		cmp    $0x40,%eax
		jl     jump_71238
		mov    0xb6(%esp),%edx
		mov    0xae(%esp),%edi
		xor    %eax,%eax
		mov    engn_yc,%esi
		mov    0xac(%esp),%ax
		sar    $0x10,%edx
		movswl %cx,%ecx
		lea    (%edx,%eax,1),%ebp
		movswl %bx,%eax
		mov    engn_xc,%ebx
		mov    0xb2(%esp),%edx
		sub    %ebx,%eax
		sar    $0x10,%edx
		mov    %eax,0x64(%esp)
		mov    %edx,%eax
		sar    $0x10,%edi
		sub    %esi,%eax
		xor    %bl,%bl
		mov    %eax,0x68(%esp)
		mov    engn_zc,%eax
		mov    %bl,0x76(%esp)
		sub    %eax,%ecx
		lea    0x50(%esp),%eax
		mov    %ecx,0x6c(%esp)
		call   ac_transform_point
		lea    0x78(%esp),%eax
		mov    engn_xc,%ebx
		mov    engn_yc,%ecx
		mov    engn_zc,%esi
		sub    %ebx,%edi
		sub    %ecx,%edx
		sub    %esi,%ebp
		mov    %edi,0x8c(%esp)
		mov    %edx,0x90(%esp)
		xor    %bh,%bh
		mov    %ebp,0x94(%esp)
		mov    %bh,0x9e(%esp)
		call   ac_transform_point
		xor    %eax,%eax
		mov    0x7c(%esp),%ecx
		mov    0xcc(%esp),%al
		mov    0x78(%esp),%ebx
		push   %eax
		mov    0x58(%esp),%edx
		mov    0x54(%esp),%eax
		call   ac_LbDrawLine
		add    $0xbc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_gproc3_unknsub2)	/* 0x73798 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x1c,%esp
		andb   $0xfe,EXPORT_SYMBOL(ingame)+0x92F # ingame.Flags+0
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+16
		je     jump_737db
		mov    $0x4000,%edx
		mov    $0x32,%edi
		xor    %ecx,%ecx
		mov    %edx,EXPORT_SYMBOL(dword_155010)
		mov    %edx,EXPORT_SYMBOL(dword_155014)
		mov    %ecx,EXPORT_SYMBOL(dword_1AAB74)
		mov    %ecx,EXPORT_SYMBOL(dword_1AAB78)
		mov    %edi,EXPORT_SYMBOL(dword_155018)
	jump_737db:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(render_area_b),%ax
		mov    %eax,0x8(%esp)
		mov    EXPORT_SYMBOL(overall_scale)-2,%eax
		sar    $0x10,%eax
		mov    %eax,0x10(%esp)
		mov    engn_xc,%eax
		mov    $0x18,%edx
		mov    %eax,(%esp)
		mov    engn_yc,%eax
		mov    EXPORT_SYMBOL(ingame)+0x92F,%ebp # ingame.Flags+0
		mov    %eax,0x18(%esp)
		mov    engn_zc,%eax
		mov    EXPORT_SYMBOL(engn_anglexz),%edi
		mov    %eax,0x14(%esp)
		mov    EXPORT_SYMBOL(dword_152EEC),%eax
		xor    %esi,%esi
		mov    %eax,0x4(%esp)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(render_area_a),%si
		mov    unkn_flags_01,%al
		mov    %dx,EXPORT_SYMBOL(render_area_a)
		mov    %eax,0xc(%esp)
		xor    %eax,%eax
		mov    %dx,EXPORT_SYMBOL(render_area_b)
		mov    %eax,EXPORT_SYMBOL(ingame)+0x92F # ingame.Flags+0
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_73864
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
		add    %eax,%eax
		jmp    jump_73869
	jump_73864:
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
	jump_73869:
		cmp    $0xc8,%eax
		jge    jump_73877
		subl   $0x10,EXPORT_SYMBOL(dword_1AAB74)
	jump_73877:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_7388d
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
		add    %eax,%eax
		jmp    jump_73892
	jump_7388d:
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
	jump_73892:
		cmp    $0x1b8,%eax
		jle    jump_738a0
		addl   $0x10,EXPORT_SYMBOL(dword_1AAB74)
	jump_738a0:
		mov    EXPORT_SYMBOL(dword_1AAB74),%ecx
		and    $0x7ff,%ecx
		mov    %ecx,EXPORT_SYMBOL(dword_1AAB74)
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+107 # lbDisplay.MRightButton
		jne    jump_738eb
		mov    EXPORT_SYMBOL(lbSinTable)(,%ecx,4),%eax
		mov    EXPORT_SYMBOL(dword_155010),%edx
		sar    $0x9,%eax
		add    %eax,%edx
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%ecx,4),%eax
		mov    EXPORT_SYMBOL(dword_155014),%ebx
		sar    $0x9,%eax
		add    %eax,%ebx
		mov    %edx,EXPORT_SYMBOL(dword_155010)
		mov    %ebx,EXPORT_SYMBOL(dword_155014)
	jump_738eb:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_73901
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		add    %eax,%eax
		jmp    jump_73906
	jump_73901:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
	jump_73906:
		cmp    $0xb4,%eax
		jge    jump_73942
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_73923
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		add    %eax,%eax
		jmp    jump_73928
	jump_73923:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
	jump_73928:
		mov    $0xb4,%edx
		sub    %eax,%edx
		mov    %edx,%eax
		mov    EXPORT_SYMBOL(dword_1AAB78),%ecx
		sar    $0x5,%eax
		sub    %eax,%ecx
		mov    %ecx,EXPORT_SYMBOL(dword_1AAB78)
	jump_73942:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_73958
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		add    %eax,%eax
		jmp    jump_7395d
	jump_73958:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
	jump_7395d:
		cmp    $0xdc,%eax
		jle    jump_73999
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_7397a
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		add    %eax,%eax
		jmp    jump_7397f
	jump_7397a:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
	jump_7397f:
		mov    $0xdc,%edx
		sub    %eax,%edx
		mov    %edx,%eax
		mov    EXPORT_SYMBOL(dword_1AAB78),%edx
		sar    $0x5,%eax
		sub    %eax,%edx
		mov    %edx,EXPORT_SYMBOL(dword_1AAB78)
	jump_73999:
		cmpl   $0x12c,EXPORT_SYMBOL(dword_1AAB78)
		jle    jump_739af
		movl   $0x12c,EXPORT_SYMBOL(dword_1AAB78)
	jump_739af:
		cmpl   $0xfffffed4,EXPORT_SYMBOL(dword_1AAB78)
		jge    jump_739c5
		movl   $0xfffffed4,EXPORT_SYMBOL(dword_1AAB78)
	jump_739c5:
		mov    data_155012,%edx
		mov    data_15500e,%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		call   ac_alt_at_point
		sar    $0x8,%eax
		mov    EXPORT_SYMBOL(dword_155018),%ebx
		sub    $0x32,%eax
		cmp    %ebx,%eax
		jle    jump_73a0c
		mov    data_155012,%edx
		mov    data_15500e,%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		call   ac_alt_at_point
		sar    $0x8,%eax
		sub    $0x32,%eax
		mov    %eax,EXPORT_SYMBOL(dword_155018)
	jump_73a0c:
		cmpl   $0x0,EXPORT_SYMBOL(dword_155010)
		jge    jump_73a1f
		movl   $0x8000,EXPORT_SYMBOL(dword_155010)
	jump_73a1f:
		cmpl   $0x8000,EXPORT_SYMBOL(dword_155010)
		jle    jump_73a33
		xor    %ebx,%ebx
		mov    %ebx,EXPORT_SYMBOL(dword_155010)
	jump_73a33:
		cmpl   $0x0,EXPORT_SYMBOL(dword_155014)
		jge    jump_73a46
		movl   $0x8000,EXPORT_SYMBOL(dword_155014)
	jump_73a46:
		cmpl   $0x8000,EXPORT_SYMBOL(dword_155014)
		jle    jump_73a5a
		xor    %ebx,%ebx
		mov    %ebx,EXPORT_SYMBOL(dword_155014)
	jump_73a5a:
		mov    EXPORT_SYMBOL(dword_1AAB78),%eax
		mov    %eax,EXPORT_SYMBOL(dword_152EEC)
		mov    EXPORT_SYMBOL(dword_155010),%eax
		mov    %eax,engn_xc
		mov    EXPORT_SYMBOL(dword_155018),%eax
		push   $0x40
		mov    %eax,engn_yc
		mov    EXPORT_SYMBOL(dword_155014),%eax
		mov    $0x60,%ecx
		mov    %eax,engn_zc
		mov    EXPORT_SYMBOL(dword_1AAB74),%eax
		mov    $0x100,%ebx
		shl    $0x5,%eax
		mov    EXPORT_SYMBOL(vec_tmap),%edx
		mov    %eax,EXPORT_SYMBOL(engn_anglexz)
		mov    EXPORT_SYMBOL(vec_tmap)+20,%eax
		call   ac_setup_vecs
		call   ac_process_engine_unk1
		mov    $0x12,%ecx
		mov    $0x1,%bl
		mov    EXPORT_SYMBOL(vec_tmap)+20,%eax
		xor    %edx,%edx
		mov    %bl,unkn_flags_01
		mov    $0x4000,%ebx
		mov    %cx,EXPORT_SYMBOL(overall_scale)
		call   ac_memset
		subl   $0xa,gameturn
		call   ac_func_2e440
		addl   $0xa,gameturn
		mov    EXPORT_SYMBOL(lbDisplay)+28,%edx # lbDisplay.PhysicalScreenHeight
		mov    EXPORT_SYMBOL(lbDisplay)+24,%ecx # lbDisplay.PhysicalScreenWidth
		push   %edx
		mov    EXPORT_SYMBOL(lbDisplay)+24,%ebx # lbDisplay.PhysicalScreenWidth
		mov    EXPORT_SYMBOL(vec_tmap),%edx
		mov    EXPORT_SYMBOL(lbDisplay)+4,%eax # lbDisplay.WScreen
		call   ac_setup_vecs
		mov    EXPORT_SYMBOL(vec_window_width),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    %eax
		mov    EXPORT_SYMBOL(vec_window_height),%edx
		mov    %eax,EXPORT_SYMBOL(dword_176D3C)
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    %eax
		mov    %eax,EXPORT_SYMBOL(dword_176D40)
		mov    0x8(%esp),%eax
		mov    %ax,EXPORT_SYMBOL(render_area_b)
		mov    0x10(%esp),%eax
		mov    %ax,EXPORT_SYMBOL(overall_scale)
		mov    (%esp),%eax
		mov    %eax,engn_xc
		mov    0x14(%esp),%eax
		mov    %eax,engn_zc
		mov    0x4(%esp),%eax
		mov    %ebp,EXPORT_SYMBOL(ingame)+0x92F # ingame.Flags+0
		mov    %eax,EXPORT_SYMBOL(dword_152EEC)
		mov    0x18(%esp),%eax
		mov    %si,EXPORT_SYMBOL(render_area_a)
		mov    %eax,engn_yc
		mov    0xc(%esp),%al
		mov    %edi,EXPORT_SYMBOL(engn_anglexz)
		mov    %al,unkn_flags_01
		call   ac_process_engine_unk1
		add    $0x1c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_sub_73C64)	/* 0x73C64 */
/*----------------------------------------------------------------*/
		push   %ecx
		test   %dl,%dl
		je     jump_73c8e
		mov    $0x1,%ecx
		mov    game_object_faces4,%eax
		mov    %ecx,data_1aab7c
		mov    0x769c(%eax),%ax
		and    $0xffff,%eax
		mov    %eax,data_1aab80
		xor    %eax,%eax
		pop    %ecx
		ret
	jump_73c8e:
		cmpl   $0x0,data_1aab7c
		jne    jump_73c9b
		xor    %eax,%eax
		pop    %ecx
		ret
	jump_73c9b:
		mov    game_object_faces4,%eax
		mov    0x769c(%eax),%ax
		mov    data_1aab80,%ebx
		and    $0xffff,%eax
		cmp    %ebx,%eax
		je     jump_73cc2
		mov    %eax,data_1aab80
		mov    $0x1,%eax
		pop    %ecx
		ret
	jump_73cc2:
		xor    %ebx,%eax
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_init_scanner)	/* 0x0740FC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		mov    ingame__fld_unkCA0,%eax
		sar    $0x18,%eax
		cmp    $0x2,%eax
		je     jump_74114
		cmp    $0xfffffffd,%eax
		jne    jump_7411b
	jump_74114:
		mov    $0x1,%eax
		jmp    jump_74120
	jump_7411b:
		mov    $0x2,%eax
	jump_74120:
		call   ac_SCANNER_set_colour
		mov    $0x8,%ecx
		mov    $0x5,%esi
		xor    %edx,%edx
		mov    $0x80,%edi
		mov    %edx,EXPORT_SYMBOL(dword_1AA5C4)
		mov    %edx,EXPORT_SYMBOL(dword_1AA5C8)
		call   ac_SCANNER_fill_in
		mov    $ingame__Scanner__Width,%eax
		mov    %ecx,ingame__Scanner__Brightness
		mov    %esi,ingame__Scanner__Contrast
		mov    %eax,SCANNER_width
		xor    %eax,%eax
		mov    %edi,ingame__Scanner__Zoom
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		mov    %edx,ingame__Scanner__Angle
		cmp    $0x1,%eax
		je     jump_741e3
		mov    $0x1,%edi
		mov    $0x155,%ebp
		mov    $0x82,%eax
		mov    $0x1cc,%edx
		mov    $0x81,%ecx
		xor    %ebx,%ebx
		mov    %edi,ingame__Scanner__X1 # ingame.Scanner.X1
		mov    %ebp,ingame__Scanner__Y1
		mov    %eax,ingame__Scanner__X2
		mov    %edx,ingame__Scanner__Y2
		jmp    jump_741ab
	jump_741aa:
		inc    %ebx
	jump_741ab:
		mov    ingame__Scanner__Y1,%eax
		movswl %bx,%edx
		mov    ingame__Scanner__Y2,%ebp
		add    %edx,%eax
		cmp    %ebp,%eax
		jg     jump_74245
		lea    0x0(,%edx,4),%eax
		add    $0x69,%edx
		mov    %edx,ingame__Scanner__Width(%eax)
		cmp    $0x81,%edx
		jle    jump_741aa
		mov    %ecx,ingame__Scanner__Width(%eax)
		jmp    jump_741aa
	jump_741e3:
		mov    $0x7f,%ebx
		mov    $0x41,%ecx
		mov    $0xbd,%esi
		mov    $0x40,%edi
		mov    %eax,ingame__Scanner__X1 # ingame.Scanner.X1
		mov    %ebx,ingame__Scanner__Y1
		mov    %ecx,ingame__Scanner__X2
		mov    %esi,ingame__Scanner__Y2
		xor    %ebx,%ebx
		jmp    jump_74213
	jump_74212:
		inc    %ebx
	jump_74213:
		mov    ingame__Scanner__Y1,%edx
		movswl %bx,%eax
		mov    ingame__Scanner__Y2,%ecx
		add    %eax,%edx
		cmp    %ecx,%edx
		jg     jump_74245
		lea    0x0(,%eax,4),%edx
		add    $0x28,%eax
		mov    %eax,ingame__Scanner__Width(%edx)
		cmp    $0x40,%eax
		jle    jump_74212
		mov    %edi,ingame__Scanner__Width(%edx)
		jmp    jump_74212
	jump_74245:
		call   ac_SCANNER_init
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
ASM_engine_reset:	/* 0x074398 */
/*----------------------------------------------------------------*/
		mov    engine_mem_alloc_ptr,%eax
		jmp    ac_LbMemoryFree


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_init_level_3d)	/* 0x07445C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		test   %al,%al
		je     jump_744d3
		mov    EXPORT_SYMBOL(stored_l3d_next_object),%ax
		mov    %ax,EXPORT_SYMBOL(next_object)
		mov    EXPORT_SYMBOL(stored_l3d_next_object_face),%ax
		mov    %ax,EXPORT_SYMBOL(next_object_face)
		mov    EXPORT_SYMBOL(stored_l3d_next_object_face4),%ax
		mov    %ax,EXPORT_SYMBOL(next_object_face4)
		mov    EXPORT_SYMBOL(stored_l3d_next_object_point),%ax
		mov    %ax,EXPORT_SYMBOL(next_object_point)
		mov    EXPORT_SYMBOL(stored_l3d_next_normal),%ax
		mov    %ax,EXPORT_SYMBOL(next_normal)
		mov    EXPORT_SYMBOL(stored_l3d_next_face_texture),%ax
		mov    %ax,EXPORT_SYMBOL(next_face_texture)
		mov    EXPORT_SYMBOL(stored_l3d_next_floor_texture),%ax
		xor    %ebx,%ebx
		mov    %ax,EXPORT_SYMBOL(next_floor_texture)
		mov    EXPORT_SYMBOL(stored_l3d_next_local_mat),%ax
		mov    %ebx,stored_level3d_inuse
		mov    %ax,EXPORT_SYMBOL(next_local_mat)
		jmp    jump_745aa
	jump_744d3:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(next_object),%ax
		mov    %eax,EXPORT_SYMBOL(stored_l3d_next_object)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(next_object_face),%ax
		mov    %eax,EXPORT_SYMBOL(stored_l3d_next_object_face)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(next_object_face4),%ax
		mov    %eax,EXPORT_SYMBOL(stored_l3d_next_object_face4)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(next_object_point),%ax
		mov    %eax,EXPORT_SYMBOL(stored_l3d_next_object_point)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(next_normal),%ax
		mov    %eax,EXPORT_SYMBOL(stored_l3d_next_normal)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(next_face_texture),%ax
		mov    %eax,EXPORT_SYMBOL(stored_l3d_next_face_texture)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(next_floor_texture),%ax
		mov    $0x1,%edx
		mov    %eax,EXPORT_SYMBOL(stored_l3d_next_floor_texture)
		xor    %eax,%eax
		xor    %esi,%esi
		mov    EXPORT_SYMBOL(next_local_mat),%ax
		mov    %edx,stored_level3d_inuse
		mov    %eax,EXPORT_SYMBOL(stored_l3d_next_local_mat)
		xor    %ebp,%ebp
		jmp    jump_74586
	jump_7454c:
		mov    prim_unknprop01,%ax
		neg    %eax
		mov    %ebp,%ecx
		sub    $0x14,%eax
		mov    %ebp,%edx
		movswl %ax,%ebx
		mov    %ebp,%eax
		call   ac_sub_6031C
		mov    EXPORT_SYMBOL(next_object),%ax
		dec    %eax
		and    $0xffff,%eax
		call   ac_unkn_object_shift_03
		mov    EXPORT_SYMBOL(next_object),%ax
		dec    %eax
		inc    %esi
		mov    %ax,ingame__Rocket1(,%edi,2)
	jump_74586:
		xor    %edi,%edi
		mov    %si,%di
		cmp    $0xa,%edi
		jl     jump_7454c
		mov    $0x40,%edx
		mov    %dx,unkn2_pos_x
		mov    %dx,unkn2_pos_y
		mov    %dx,unkn2_pos_z
	jump_745aa:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_search_for_station)	/* 0x074718 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x14,%esp
		mov    things,%edi
		mov    %eax,(%esp)
		mov    %edx,0x4(%esp)
		xor    %edx,%edx
		mov    %edx,0xc(%esp)
		xor    %edx,%edx
		mov    %ax,%dx
		sar    $0x8,%edx
		sub    $0xf,%edx
		mov    $0xffffffff,%esi
		mov    %dx,0x8(%esp)
		jmp    jump_7474f
	jump_7474a:
		incw   0x8(%esp)
	jump_7474f:
		xor    %ebx,%ebx
		mov    (%esp),%bx
		mov    0x6(%esp),%edx
		sar    $0x8,%ebx
		sar    $0x10,%edx
		add    $0xf,%ebx
		cmp    %ebx,%edx
		jge    jump_74857
		xor    %edx,%edx
		mov    0x4(%esp),%dx
		sar    $0x8,%edx
		sub    $0xf,%edx
		mov    %dx,0x10(%esp)
		jmp    jump_74796
	jump_7477e:
		imul   $0x3c,%edx,%edx
		mov    EXPORT_SYMBOL(sthings),%ebx
	jump_74787:
		mov    0x2(%edx,%ebx,1),%ax
		test   %ax,%ax
		jne    jump_747e7
	jump_74791:
		incw   0x10(%esp)
	jump_74796:
		xor    %edx,%edx
		mov    0x4(%esp),%dx
		mov    %edx,%ebx
		mov    0xe(%esp),%edx
		sar    $0x8,%ebx
		sar    $0x10,%edx
		add    $0xf,%ebx
		cmp    %ebx,%edx
		jge    jump_7474a
		mov    0x6(%esp),%ebx
		sar    $0x10,%ebx
		test   %ebx,%ebx
		jle    jump_74791
		cmp    $0x80,%ebx
		jge    jump_74791
		test   %edx,%edx
		jle    jump_74791
		cmp    $0x80,%edx
		jge    jump_74791
		shl    $0x7,%edx
		add    %ebx,%edx
		imul   $0x12,%edx,%ebx
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0x8(%edx,%ebx,1),%ax
		test   %ax,%ax
		je     jump_74791
	jump_747e7:
		movswl %ax,%edx
		test   %edx,%edx
		jle    jump_7477e
		imul   $0xa8,%edx,%edx
		mov    %edi,%ebx
		add    %edi,%edx
		xor    %edi,%ebx
		mov    0x9(%edx),%bl
		cmp    $0x9,%ebx
		jne    jump_74847
		xor    %ebx,%ebx
		mov    0x8(%edx),%bl
		cmp    $0x2f,%ebx
		jne    jump_74847
		xor    %ecx,%ecx
		mov    $0x8,%ebx
		mov    (%esp),%cx
		sub    %ecx,%ebx
		mov    %ebx,%ecx
		mov    0x18(%edx),%ebx
		sar    %cl,%ebx
		imul   %ebx,%ebx
		xor    %ecx,%ecx
		mov    $0x8,%ebp
		mov    0x4(%esp),%cx
		sub    %ecx,%ebp
		mov    0x20(%edx),%edx
		mov    %ebp,%ecx
		sar    %cl,%edx
		imul   %edx,%edx
		add    %ebx,%edx
		cmp    %esi,%edx
		jae    jump_74847
		mov    %edx,%esi
		mov    %eax,0xc(%esp)
	jump_74847:
		movswl %ax,%ebx
		imul   $0xa8,%ebx,%ebx
		mov    %edi,%edx
		jmp    jump_74787
	jump_74857:
		mov    0xc(%esp),%eax
		mov    %edi,things
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
train_related_func_01:	/* 0x07486C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    %eax,%esi
		mov    0x20(%eax),%eax
		xor    %edx,%edx
		sar    $0x8,%eax
		mov    %ax,%dx
		mov    0x18(%esi),%eax
		sar    $0x8,%eax
		and    $0xffff,%eax
		call   ac_search_for_station
		test   %ax,%ax
		je     jump_7492b
		movswl %ax,%ecx
		lea    0x0(,%ecx,4),%edi
		add    %ecx,%edi
		shl    $0x2,%edi
		add    %ecx,%edi
		mov    things,%eax
		shl    $0x3,%edi
		mov    0x52(%edi,%eax,1),%ax
		mov    $0x2,%ebx
		mov    $0x4,%edx
		and    $0xffff,%eax
		xor    %ecx,%ecx
		call   ac_search_object_for_qface
		xor    %ecx,%ecx
		mov    %ax,%cx
		test   %ecx,%ecx
		jne    jump_748d8
		xor    %eax,%eax
		jmp    jump_7492b
	jump_748d8:
		mov    things,%edx
		mov    %ax,0x68(%esi)
		mov    %ax,0x68(%edx,%edi,1)
		xor    %eax,%eax
		mov    $0x2,%ebx
		mov    0x52(%edx,%edi,1),%ax
		mov    $0x4,%edx
		call   ac_search_object_for_qface
		xor    %edx,%edx
		mov    %ax,%dx
		test   %edx,%edx
		jne    jump_7490e
		xor    %eax,%eax
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_7490e:
		mov    things,%edx
		mov    %ax,0x6a(%esi)
		mov    %ax,0x6a(%edx,%edi,1)
		mov    0x16(%esi),%ax
		mov    %ax,0x48(%edx,%edi,1)
		mov    $0x1,%eax
	jump_7492b:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_func_74934)	/* 0x74934 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		xor    %esi,%esi
		xor    %edi,%edi
		jmp    jump_74940
	jump_7493f:
		inc    %esi
	jump_74940:
		movswl %si,%eax
		cmp    $0x80,%eax
		jge    jump_7492b
		mov    %edi,%ecx
		jmp    jump_74962
	jump_7494e:
		imul   $0x3c,%eax,%eax
		mov    EXPORT_SYMBOL(sthings),%ebx
	jump_74957:
		mov    0x2(%ebx,%eax,1),%dx
		test   %dx,%dx
		jne    jump_74987
	jump_74961:
		inc    %ecx
	jump_74962:
		movswl %cx,%eax
		cmp    $0x80,%eax
		jge    jump_7493f
		shl    $0x7,%eax
		movswl %si,%ebx
		add    %ebx,%eax
		imul   $0x12,%eax,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%ebx
		mov    0x8(%ebx,%eax,1),%dx
		test   %dx,%dx
		je     jump_74961
	jump_74987:
		movswl %dx,%eax
		test   %eax,%eax
		jle    jump_7494e
		imul   $0xa8,%eax,%eax
		mov    things,%ebx
		add    %ebx,%eax
		xor    %ebx,%ebx
		mov    0x9(%eax),%bl
		cmp    $0x9,%ebx
		jne    jump_749e5
		xor    %ebx,%ebx
		mov    0x8(%eax),%bl
		cmp    $0x1c,%ebx
		jne    jump_749e5
		testb  $0x8,0xf(%eax)
		jne    jump_749e5
		mov    0x4a(%eax),%ebx
		sar    $0x10,%ebx
		test   %ebx,%ebx
		je     jump_749ca
		mov    0x4c(%eax),%ebx
		sar    $0x10,%ebx
		test   %ebx,%ebx
		jne    jump_749e5
	jump_749ca:
		mov    %di,0x68(%eax)
		mov    %di,0x6a(%eax)
		call   train_related_func_01
		and    $0xffff,%eax
		je     jump_749e5
		orb    $0x2,ingame__TrainMode
	jump_749e5:
		movswl %dx,%eax
		imul   $0xa8,%eax,%eax
		mov    things,%ebx
		jmp    jump_74957


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_func_749fc)	/* 0x749fc */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		xor    %edx,%edx
		mov    %edx,0x4(%esp)
		mov    $0x5,%ebp
	jump_74a10:
		call   func_617f0
		test   %eax,%eax
		je     jump_74aee
		xor    %eax,%eax
		mov    0x4(%esp),%ax
		cmp    $0xa,%eax
		jge    jump_74aee
		mov    $0x4,%ecx
		mov    %eax,%ebx
		xor    %edx,%edx
		inc    %ebx
		xor    %eax,%eax
		mov    %ebx,0x4(%esp)
		xor    %ebx,%ebx
		call   func_61628
		mov    $0x226,%ebx
		mov    %ax,(%esp)
		mov    %ebp,%ecx
		xor    %edx,%edx
		xor    %eax,%eax
		call   func_61628
		mov    $0x44c,%ebx
		mov    %eax,%edi
		mov    %ebp,%ecx
		xor    %edx,%edx
		xor    %eax,%eax
		call   func_61628
		mov    $0x672,%ebx
		mov    %eax,%esi
		mov    %ebp,%ecx
		xor    %edx,%edx
		xor    %eax,%eax
		call   func_61628
		mov    %eax,%edx
		mov    -0x2(%esp),%eax
		sar    $0x10,%eax
		imul   $0xa8,%eax,%ebx
		mov    things,%eax
		movw   $0x0,0x3c(%ebx,%eax,1)
		mov    %di,0x6a(%ebx,%eax,1)
		movswl %di,%ebx
		imul   $0xa8,%ebx,%ebx
		mov    (%esp),%ecx
		mov    %cx,0x3c(%ebx,%eax,1)
		mov    %si,0x6a(%ebx,%eax,1)
		movswl %si,%ebx
		imul   $0xa8,%ebx,%ebx
		mov    %di,0x3c(%ebx,%eax,1)
		mov    %dx,0x6a(%ebx,%eax,1)
		movswl %dx,%ebx
		imul   $0xa8,%ebx,%ebx
		mov    data_180c59,%cx
		inc    %ecx
		movw   $0x0,0x6a(%ebx,%eax,1)
		mov    %cx,data_180c59
		mov    %si,0x3c(%ebx,%eax,1)
		jmp    jump_74a10
	jump_74aee:
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
clear_mission_status:	/* 0x074C4C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		xor    %edx,%edx
		mov    in_network_game,%dl
		cmp    $0x1,%edx
		jne    jump_74c7b
		xor    %eax,%eax
		jmp    jump_74c6d
	jump_74c60:
		imul   $0x28,%edx,%edx
		xor    %ecx,%ecx
		inc    %eax
		mov    %cx,data_199838(%edx)
	jump_74c6d:
		xor    %edx,%edx
		mov    %ax,%dx
		cmp    $0x8,%edx
		jl     jump_74c60
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_74c7b:
		test   %edx,%edx
		jne    jump_74cd6
		mov    EXPORT_SYMBOL(open_brief)-2,%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,4),%edx
		add    %eax,%edx
		xor    %ebx,%ebx
		mov    %bx,data_199838(,%edx,8)
		mov    %bx,data_19983a(,%edx,8)
		mov    %bx,data_19983c(,%edx,8)
		mov    %bx,data_19983e(,%edx,8)
		mov    %bx,data_199840(,%edx,8)
		xor    %eax,%eax
		mov    %bx,data_199842(,%edx,8)
		xor    %bh,%ah
		xor    %bl,%bl
		mov    %ah,data_19984e(,%edx,8)
		mov    %bl,data_19984f(,%edx,8)
	jump_74cd6:
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_init_level)	/* 0x074CDC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    $0x1,%eax
		call   ac_people_intel
		cmpb   $0x0,in_network_game
		je     jump_74d1c
		mov    $0x1,%dl
		xor    %eax,%eax
		mov    %dl,ingame__DetailLevel
		xor    %edx,%edx
		xor    %bl,%bl
	jump_74d02:
		add    $0x80,%edx
		mov    %bl,player_unkn0C9(%eax)
		inc    %eax
		mov    %bl,EXPORT_SYMBOL(player_unknCC9)-0x80(%edx)
		cmp    $0x8,%eax
		jge    jump_74d21
		jmp    jump_74d02
	jump_74d1c:
		call   ac_init_mission_states
	jump_74d21:
		xor    %esi,%esi
		jmp    jump_74d9b
	jump_74d25:
		xor    %ecx,%ecx
		mov    %si,%cx
		imul   $0x1aa,%ecx,%ecx
		xor    %edi,%edi
		mov    %di,data_1a647a(%ecx,%edx,2)
		mov    %di,data_1a63c8(%ecx,%edx,2)
		mov    %di,data_1a6482(%ecx,%edx,2)
		xor    %al,%al
		mov    %di,data_1a63d0(%ecx,%edx,2)
		mov    %al,data_1a6394(%ecx,%edx,1)
		xor    %ah,%ah
		inc    %ebx
		mov    %ah,data_1a6390(%ecx,%edx,1)
	jump_74d65:
		xor    %edx,%edx
		mov    %bx,%dx
		cmp    $0x4,%edx
		jl     jump_74d25
		xor    %eax,%eax
		mov    %si,%ax
		imul   $0x1aa,%eax,%eax
		xor    %edi,%edi
		xor    %ebx,%edx
		mov    %di,data_1a63e4(%eax)
		mov    %dx,data_1a63d8(%eax)
		mov    %di,data_1a63e0(%eax)
		inc    %esi
		mov    %di,data_1a63e2(%eax)
	jump_74d9b:
		xor    %eax,%eax
		mov    %si,%ax
		cmp    $0x8,%eax
		jge    jump_74da9
		xor    %ebx,%ebx
		jmp    jump_74d65
	jump_74da9:
		call   ac_set_default_brightness
		mov    EXPORT_SYMBOL(ingame)+0x930,%dh # ingame.Flags+1
		and    $0x7f,%dh
		mov    in_network_game,%bl
		mov    %dh,EXPORT_SYMBOL(ingame)+0x930 # ingame.Flags+1
		test   %bl,%bl
		jne    jump_74dce
		movb   $0x1,ingame__InNetGame_UNSURE
	jump_74dce:
		mov    nstart_ani,%eax
		mov    0x7b0(%eax),%ax
		mov    %ax,EXPORT_SYMBOL(shield_frm)
		xor    %eax,%eax
		mov    $0x1,%edx
		mov    EXPORT_SYMBOL(shield_frm),%ax
		mov    %dx,EXPORT_SYMBOL(word_1531DA)
		lea    0x0(,%eax,8),%edx
		mov    frame,%eax
		mov    0x6(%edx,%eax,1),%dx
		and    $0xffff,%edx
		mov    0x6(%eax,%edx,8),%dx
		mov    %dx,EXPORT_SYMBOL(shield_frm)+2
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(shield_frm)+2,%dx
		mov    0x6(%eax,%edx,8),%dx
		and    $0xffff,%edx
		mov    0x6(%eax,%edx,8),%dx
		mov    %dx,EXPORT_SYMBOL(shield_frm)+4
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(shield_frm)+4,%dx
		mov    0x6(%eax,%edx,8),%dx
		and    $0xffff,%edx
		mov    $0x32,%esi
		xor    %ebx,%ebx
		mov    0x6(%eax,%edx,8),%ax
		xor    %ecx,%ecx
		mov    %ax,EXPORT_SYMBOL(shield_frm)+6
		mov    %bx,ingame__fld_unkCB7
		mov    %bx,data_180c59
		mov    %bx,ingame__FlameCount
		mov    %bx,ingame__SoundThing
		mov    %bx,ingame__fld_unkCB5
		call   clear_mission_status
		call   ac_init_free_explode_faces
		call   ac_StopAllSamples
		mov    %bx,ingame__TrackThing
		call   ac_func_74934
		mov    engn_xc,%ax
		mov    $0x78,%ebx
		mov    %ax,ingame__TrackX
		mov    engn_zc,%ax
		mov    %cx,ingame__fld_unkCA6
		mov    %ax,ingame__TrackZ
		mov    EXPORT_SYMBOL(next_floor_texture),%ax
		mov    %bx,ingame__UserZoom
		mov    %ax,EXPORT_SYMBOL(word_1AABD0)
		call   ac_init_crater_textures
		call   ASM_bang_init
		call   ac_FIRE_init_or_samples_init
		call   ac_func_749fc
	jump_74ee8:
		dec    %esi
		cmp    $0xffffffff,%esi
		je     jump_74f3d
		xor    %eax,%eax
		xor    %edx,%edx
		mov    things_used_head,%ax
		mov    EXPORT_SYMBOL(things_used),%dx
		test   %eax,%eax
		jle    jump_74ee8
	jump_74f03:
		dec    %edx
		cmp    $0xffffffff,%edx
		je     jump_74ee8
		imul   $0xa8,%eax,%ebx
		mov    things,%eax
		add    %ebx,%eax
		xor    %ecx,%ecx
		mov    0x4(%eax),%ebx
		mov    0x9(%eax),%cl
		sar    $0x10,%ebx
		cmp    $0x2,%ecx
		jne    jump_74f35
		xor    %ecx,%ecx
		mov    0x8(%eax),%cl
		cmp    $0x1d,%ecx
		jne    jump_74f35
		call   ac_process_vehicle
	jump_74f35:
		mov    %ebx,%eax
		test   %ebx,%ebx
		jg     jump_74f03
		jmp    jump_74ee8
	jump_74f3d:
		mov    EXPORT_SYMBOL(next_floor_texture),%ax
		xor    %edx,%edx
		inc    %eax
		mov    %dx,EXPORT_SYMBOL(link__MapColListEmptyHead)
		mov    %dx,EXPORT_SYMBOL(link__MapColVectEmptyHead)
		mov    %ax,EXPORT_SYMBOL(tnext_floor_texture)
		xor    %eax,%eax
		jmp    jump_74f90
	jump_74f5e:
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(next_vects_list),%bx
		add    %ebx,%edx
		imul   $0x6,%edx,%edx
		mov    game_col_vects_list,%ebx
		add    %edx,%ebx
		mov    EXPORT_SYMBOL(link__MapColListEmptyHead),%dx
		mov    %dx,0x2(%ebx)
		mov    EXPORT_SYMBOL(next_vects_list),%dx
		add    %eax,%edx
		mov    %dx,EXPORT_SYMBOL(link__MapColListEmptyHead)
		inc    %eax
	jump_74f90:
		xor    %edx,%edx
		mov    %ax,%dx
		cmp    $0x3e8,%edx
		jl     jump_74f5e
		xor    %eax,%edx
		jmp    jump_74fd0
	jump_74fa1:
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(next_col_vect),%bx
		add    %ebx,%eax
		imul   $0xe,%eax,%eax
		mov    game_col_vects,%ebx
		add    %eax,%ebx
		mov    EXPORT_SYMBOL(link__MapColVectEmptyHead),%ax
		mov    %ax,0xc(%ebx)
		mov    EXPORT_SYMBOL(next_col_vect),%ax
		add    %edx,%eax
		mov    %ax,EXPORT_SYMBOL(link__MapColVectEmptyHead)
		inc    %edx
	jump_74fd0:
		xor    %eax,%eax
		mov    %dx,%ax
		cmp    $0x258,%eax
		jl     jump_74fa1
		call   ac_dos_clock
		mov    %eax,ingame__fld_unkC91
		xor    %eax,%eax
		mov    current_map,%ax
		cmp    $0xb,%eax
		je     jump_74ff8
		cmp    $0x41,%eax
		jne    jump_75011
	jump_74ff8:
		push   $0x2
		push   $0xffffffff
		mov    $0x40,%ecx
		mov    $0x4e,%edx
		push   $0x64
		xor    %eax,%eax
		mov    %ecx,%ebx
		jmp    jump_750a9
	jump_75011:
		testb  $0x3,EXPORT_SYMBOL(things_used)
		jne    jump_75066
		cmp    $0x1e,%eax
		je     jump_75066
		xor    %eax,%eax
		mov    in_network_game,%al
		test   %eax,%eax
		jne    jump_75066
		mov    $0x1,%edi
		mov    EXPORT_SYMBOL(vec_tmap),%edx
		mov    EXPORT_SYMBOL(tex00dat_fname),%eax
		mov    %di,EXPORT_SYMBOL(gamep_scene_effect_type)
		call   ac_LbFileLoadAt
		push   $0x2
		mov    $0x40,%ecx
		push   $0xffffffff
		mov    %ecx,%ebx
		push   $0x64
		mov    $0x4d,%edx
		xor    %eax,%eax
		call   ac_play_sample_using_heap
		call   ac_func_3d904
		jmp    jump_750ae
	jump_75066:
		cmpw   $0x0,EXPORT_SYMBOL(gamep_scene_effect_type)
		je     jump_7507c
		mov    $0x4d,%edx
		xor    %eax,%eax
		call   ac_stop_sample_using_heap
	jump_7507c:
		mov    EXPORT_SYMBOL(vec_tmap),%edx
		mov    EXPORT_SYMBOL(tex00dat_fname),%eax
		call   ac_LbFileLoadAt
		push   $0x2
		mov    $0x40,%ecx
		xor    %esi,%esi
		push   $0xffffffff
		mov    $0x8,%edx
		mov    %ecx,%ebx
		push   $0x64
		xor    %eax,%eax
		mov    %si,EXPORT_SYMBOL(gamep_scene_effect_type)
	jump_750a9:
		call   ac_play_sample_using_heap
	jump_750ae:
		xor    %edx,%edx
		mov    %edx,gamep_unknval_10
		mov    %edx,gamep_unknval_12
		mov    %edx,nav_stats__ThisTurn
		mov    %edx,gamep_unknval_16
		mov    $0x1,%dh
		xor    %eax,%eax
		mov    %dh,ingame__byte_180CB1
		mov    %dh,ingame__byte_180CB2
		jmp    jump_750e5
	jump_750da:
		xor    %ebx,%ebx
		inc    %eax
		mov    %bx,EXPORT_SYMBOL(word_1774E8)(,%edx,4)
	jump_750e5:
		xor    %edx,%edx
		mov    %ax,%dx
		cmp    $0x96,%edx
		jl     jump_750da
		mov    $0x1,%eax
		cmp    EXPORT_SYMBOL(next_mission),%ax
		jae    jump_75123
		mov    EXPORT_SYMBOL(next_mission),%cx
		xor    %bl,%bl
	jump_75109:
		xor    %edx,%edx
		mov    %ax,%dx
		imul   $0x4c,%edx,%edx
		mov    %bl,data_1974a5(%edx)
		inc    %eax
		mov    %bl,data_1974c0(%edx)
		cmp    %cx,%ax
		jb     jump_75109
	jump_75123:
		xor    %edx,%edx
		xor    %ebx,%ebx
		jmp    jump_75155
	jump_75129:
		shl    $0x4,%eax
		mov    %bx,data_19f1a2(%eax)
		mov    %bx,data_19f1a0(%eax)
		mov    %ebx,data_19f19c(%eax)
		mov    %ebx,EXPORT_SYMBOL(group_actions)(%eax)
		mov    %bx,data_19f1a4(%eax)
		inc    %edx
		mov    %bx,data_19f1a6(%eax)
	jump_75155:
		xor    %eax,%eax
		mov    %dx,%ax
		cmp    $0x20,%eax
		jl     jump_75129
		call   ac_init_my_paths
		mov    things_used_head,%ax
		mov    $0x1000000,%esi
		movswl %ax,%ebx
		test   %ebx,%ebx
		jg     jump_75472
	jump_7517a:
		mov    things_used_head,%ax
		mov    EXPORT_SYMBOL(things_used),%bx
	jump_75187:
		cwtl
		test   %eax,%eax
		jle    jump_754b4
		dec    %ebx
		cmp    $0xffffffff,%bx
		je     jump_754b4
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %eax,%edx
		xor    %eax,%eax
		mov    0x9(%edx),%al
		cmp    $0x9,%eax
		jne    jump_751c4
		xor    %eax,%eax
		mov    0x8(%edx),%al
		cmp    $0x15,%eax
		jne    jump_751c4
		mov    %edx,%eax
		call   ac_VNAV_process_bezier
	jump_751c4:
		mov    0x6(%edx),%ax
		jmp    jump_75187
	jump_751ca:
		xor    %eax,%eax
		mov    0x52(%ebx),%ax
		mov    game_commands,%edx
		shl    $0x5,%eax
		mov    0xa(%edx,%eax,1),%al
		and    $0xff,%eax
		cmp    $0x88,%eax
		jne    jump_7520b
		mov    $0x1,%edx
		mov    %ebx,%eax
		call   ac_set_person_stats_type
		xor    %edx,%edx
		mov    0x52(%ebx),%dx
		mov    game_commands,%eax
		shl    $0x5,%edx
		mov    (%edx,%eax,1),%ax
		mov    %ax,0x52(%ebx)
	jump_7520b:
		xor    %eax,%eax
		mov    0x52(%ebx),%ax
		mov    %eax,%edx
		mov    game_commands,%eax
		shl    $0x5,%edx
		mov    0xa(%edx,%eax,1),%dl
		and    $0xff,%edx
		cmp    $0x90,%edx
		jne    jump_75253
		mov    EXPORT_SYMBOL(peep_type_stats)+24,%dx
		mov    %dx,0xa0(%ebx)
		mov    %dx,0xa2(%ebx)
		xor    %edx,%edx
		mov    0x52(%ebx),%dx
		shl    $0x5,%edx
		mov    (%edx,%eax,1),%ax
		mov    %ax,0x52(%ebx)
	jump_75253:
		test   %esi,0x44(%ebx)
		jne    jump_7526d
		testb  $0x2,0xc(%ebx)
		jne    jump_7526d
		xor    %eax,%eax
		mov    0x50(%ebx),%al
		shl    $0x4,%eax
		incw   data_19f1a2(%eax)
	jump_7526d:
		movb   $0x0,0x99(%ebx)
		movw   $0x0,0x4c(%ebx)
		movw   $0x0,0x8e(%ebx)
		mov    0x50(%ebx),%al
		movw   $0x0,0x62(%ebx)
		mov    %al,0x51(%ebx)
		mov    0xa6(%ebx),%al
		movl   $0x0,0x40(%ebx)
		or     $0x40,%al
		mov    %al,0xa6(%ebx)
		mov    0xc(%ebx),%ah
		movw   $0x0,0x4a(%ebx)
		test   $0x2,%ah
		je     jump_752ba
		movw   $0xd,0xa(%ebx)
		jmp    jump_752c0
	jump_752ba:
		movw   $0x0,0xa(%ebx)
	jump_752c0:
		testb  $0x20,0xd(%ebx)
		je     jump_752ce
		movw   $0x0,0x54(%ebx)
		jmp    jump_752df
	jump_752ce:
		mov    0xc(%ebx),%dh
		mov    0x52(%ebx),%ax
		or     $0x40,%dh
		mov    %ax,0x54(%ebx)
		mov    %dh,0xc(%ebx)
	jump_752df:
		test   %esi,0x44(%ebx)
		je     jump_752ed
		mov    %ebx,%eax
		call   ac_delete_node
		jmp    jump_752f1
	jump_752ed:
		andb   $0xdf,0x47(%ebx)
	jump_752f1:
		testb  $0x2,0xc(%ebx)
		jne    jump_754a4
		cmpb   $0x0,0x99(%ebx)
		je     jump_753a2
		xor    %eax,%eax
		mov    0x8(%ebx),%al
		imul   $0x2c,%eax,%edx
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		add    %eax,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    0x57(%ebx),%al
		add    %edx,%eax
		lea    0x0(,%eax,2),%edx
		mov    nstart_ani,%eax
		mov    0x24(%ebx),%cx
		mov    (%edx,%eax,1),%dx
		sub    %edx,%ecx
		mov    %cx,0x24(%ebx)
		xor    %ecx,%ecx
		mov    0x8(%ebx),%cl
		imul   $0x2c,%ecx,%ecx
		movb   $0x1,0x6c(%ebx)
		xor    %edx,%edx
		mov    0x6c(%ebx),%dl
		add    %edx,%edx
		add    %ecx,%edx
		xor    %ecx,%ecx
		mov    EXPORT_SYMBOL(people_frames)(%edx),%cx
		xor    %edx,%edx
		mov    0x57(%ebx),%dl
		add    %ecx,%edx
		mov    0x24(%ebx),%di
		add    (%eax,%edx,2),%di
		xor    %eax,%eax
		mov    0x8(%ebx),%al
		imul   $0x2c,%eax,%eax
		xor    %edx,%edx
		mov    0x6c(%ebx),%dl
		mov    %di,0x24(%ebx)
		mov    EXPORT_SYMBOL(people_frames)(%eax,%edx,2),%ax
		dec    %eax
		mov    %ax,0x26(%ebx)
		mov    0x6(%ebx),%ax
		movswl %ax,%ebx
		test   %ebx,%ebx
		jg     jump_75472
		jmp    jump_7517a
	jump_753a2:
		xor    %eax,%eax
		mov    0x8(%ebx),%al
		imul   $0x2c,%eax,%edx
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		add    %eax,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    0x57(%ebx),%al
		add    %edx,%eax
		lea    0x0(,%eax,2),%edx
		mov    nstart_ani,%eax
		mov    0x24(%ebx),%cx
		sub    (%edx,%eax,1),%cx
		xor    %edx,%edx
		mov    0x8(%ebx),%dl
		mov    %cx,0x24(%ebx)
		imul   $0x2c,%edx,%ecx
		movb   $0x0,0x6c(%ebx)
		xor    %edx,%edx
		mov    0x6c(%ebx),%dl
		add    %edx,%edx
		add    %ecx,%edx
		xor    %ecx,%ecx
		mov    EXPORT_SYMBOL(people_frames)(%edx),%cx
		xor    %edx,%edx
		mov    0x57(%ebx),%dl
		add    %ecx,%edx
		mov    0x24(%ebx),%di
		add    (%eax,%edx,2),%di
		xor    %eax,%eax
		mov    0x8(%ebx),%al
		imul   $0x2c,%eax,%edx
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		mov    %di,0x24(%ebx)
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		dec    %eax
		mov    %ax,0x26(%ebx)
		mov    0x6(%ebx),%ax
		movswl %ax,%ebx
		test   %ebx,%ebx
		jg     jump_75472
		jmp    jump_7517a
	jump_75436:
		mov    0xd(%ebx),%cl
		xor    %eax,%eax
		and    $0xf7,%cl
		mov    0x8(%ebx),%al
		mov    %cl,0xd(%ebx)
		cmp    $0x20,%eax
		jne    jump_75456
		mov    0x50(%ebx),%al
		movl   $0x0,0x40(%ebx)
		mov    %al,0x51(%ebx)
	jump_75456:
		test   %esi,0x44(%ebx)
		je     jump_754a4
		mov    %ebx,%eax
		call   ac_delete_node
		mov    0x6(%ebx),%ax
		movswl %ax,%ebx
		test   %ebx,%ebx
		jg     jump_75472
		jmp    jump_7517a
	jump_75472:
		imul   $0xa8,%ebx,%ebx
		mov    things,%eax
		add    %eax,%ebx
		mov    0x9(%ebx),%al
		cmp    $0x3,%al
		jb     jump_754a0
		jbe    jump_751ca
		cmp    $0x9,%al
		je     jump_75436
		mov    0x6(%ebx),%ax
		movswl %ax,%ebx
		test   %ebx,%ebx
		jg     jump_75472
		jmp    jump_7517a
	jump_754a0:
		cmp    $0x2,%al
		je     jump_75456
	jump_754a4:
		mov    0x6(%ebx),%ax
		movswl %ax,%ebx
		test   %ebx,%ebx
		jg     jump_75472
		jmp    jump_7517a
	jump_754b4:
		call   ac_VNAV_init_new_traffic_system
		xor    %eax,%eax
		mov    data_15501a,%edx
		mov    current_map,%ax
		sar    $0x10,%edx
		cmp    %eax,%edx
		je     jump_754d3
		call   ac_map_lights_update
	jump_754d3:
		call   ac_init_scanner
		mov    current_map,%ax
		mov    %ax,EXPORT_SYMBOL(last_map_for_lights_func_11)
		call   ac_find_the_tall_buildings
		xor    %eax,%eax
		mov    ingame__CDTrack,%al
		xor    %edx,%edx
		call   ac_PlayCDTrack
		xor    %eax,%eax
		mov    ingame__DangerTrack,%al
		call   ac_StartMusic
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_create_building_thing)	/* 0x7554C */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		mov    game_objects,%edi
		mov    %eax,0x4(%esp)
		mov    %edx,%ebp
		mov    %ebx,0x8(%esp)
		mov    %ecx,%esi
		mov    0x20(%esp),%ecx
		movswl %cx,%eax
		test   %eax,%eax
		jl     jump_7557e
		xor    %eax,%eax
		mov    %cx,%ax
		call   func_75ef8
		test   %ax,%ax
		jne    jump_75585
	jump_7557e:
		call   ac_get_new_thing
		mov    %eax,%ecx
	jump_75585:
		xor    %ebx,%ebx
		mov    %cx,%bx
		lea    0x0(,%ebx,4),%edx
		add    %ebx,%edx
		shl    $0x2,%edx
		add    %ebx,%edx
		mov    things,%eax
		shl    $0x3,%edx
		add    %edx,%eax
		mov    %eax,(%esp)
		movb   $0x9,0x9(%eax)
		mov    0x4(%esp),%eax
		mov    (%esp),%edx
		shl    $0x8,%eax
		mov    %eax,0x18(%edx)
		mov    0x8(%esp),%eax
		shl    $0x8,%eax
		mov    game_objects,%edi
		mov    %eax,0x20(%edx)
		mov    %edx,%eax
		movb   $0x0,0x57(%edx)
		xor    %edx,%eax
		mov    %ebp,0x1c(%edx)
		mov    0x1c(%esp),%ax
		mov    %si,0x52(%edx)
		test   %eax,%eax
		je     jump_755e5
		cmp    $0xfa,%eax
		jle    jump_755ec
	jump_755e5:
		movw   $0x1,0x1c(%esp)
	jump_755ec:
		mov    (%esp),%edx
		mov    0x1c(%esp),%al
		mov    0x1c(%esp),%ebx
		mov    %al,0x56(%edx)
		mov    %edx,%eax
		movw   $0x1f58,0x3a(%edx)
		xor    %edx,%eax
		test   %bx,%bx
		jbe    jump_75627
	jump_75609:
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    %si,%bx
		mov    %ax,%dx
		add    %ebx,%edx
		imul   $0x24,%edx,%edx
		mov    %edi,%ebx
		inc    %eax
		mov    %cx,0xa(%edx,%ebx,1)
		cmp    0x1c(%esp),%ax
		jb     jump_75609
	jump_75627:
		xor    %eax,%eax
		mov    %cx,%ax
		mov    %edi,game_objects
		call   ac_add_node_thing
		mov    (%esp),%eax
		mov    game_objects,%edi
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x8


/*----------------------------------------------------------------*/
replace_thing_given_thing_idx:	/* 0x075674 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    %eax,%edi
		mov    %edx,%esi
		mov    %cl,(%esp)
		mov    0x10(%esp),%ecx
		xor    %edx,%edx
		mov    %cx,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		add    %eax,%edx
		mov    %edx,%eax
		call   ac_on_mapwho
		test   %al,%al
		je     jump_756b4
		mov    %edx,%eax
		call   ac_delete_node
	jump_756b4:
		mov    %cx,unkn01_thing_idx
		mov    %esi,%edx
		mov    %edi,%eax
		mov    $0x65,%ecx
		call   ac_new_sim_person
		mov    %eax,%edx
		xor    %ah,%ah
		movw   $0x0,0xa(%edx)
		mov    (%esp),%al
		mov    %ax,0x3c(%edx)
		mov    %edx,%eax
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
func_756e4:
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		mov    %eax,%esi
		mov    %edx,%edi
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(things_used),%dx
		mov    $0xc,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %edx,%eax
		xor    %edx,%edx
		mov    %ax,%dx
		test   %edx,%edx
		jne    jump_7570f
		mov    $0x1,%eax
	jump_7570f:
		xor    %ecx,%ecx
		mov    %edi,%edx
		mov    %al,%cl
		mov    %esi,%eax
		call   ac_new_sim_person
		mov    EXPORT_SYMBOL(things_used),%dl
		movzbl 0x8(%eax),%esi
		movw   $0xa,0x6a(%eax)
		lea    0x0(,%esi,4),%ebx
		and    $0x7,%dl
		sub    %esi,%ebx
		mov    %dl,0x57(%eax)
		shl    $0x2,%ebx
		xor    %edx,%edx
		sub    %esi,%ebx
		mov    0x6c(%eax),%dl
		shl    $0x2,%ebx
		movw   $0xa,0x68(%eax)
		mov    EXPORT_SYMBOL(people_frames)(%ebx,%edx,2),%dx
		dec    %edx
		movzbl 0x8(%eax),%esi
		mov    %dx,0x26(%eax)
		lea    0x0(,%esi,4),%edx
		xor    %ebx,%ebx
		sub    %esi,%edx
		mov    0x6c(%eax),%bl
		shl    $0x2,%edx
		add    %ebx,%ebx
		sub    %esi,%edx
		mov    EXPORT_SYMBOL(people_frames)(%ebx,%edx,4),%bx
		xor    %edx,%edx
		and    $0xffff,%ebx
		mov    0x57(%eax),%dl
		xor    %ecx,%ecx
		add    %ebx,%edx
		mov    nstart_ani,%ebx
		mov    0x99(%eax),%cl
		mov    (%ebx,%edx,2),%dx
		dec    %ecx
		mov    %dx,0x24(%eax)
		mov    $0x1,%edx
		mov    0xa4(%eax),%ebx
		shl    %cl,%edx
		movw   $0x3,0xa(%eax)
		or     %edx,%ebx
		mov    %ebx,0xa4(%eax)
		pop    %edi
		pop    %esi
		ret    $0x8

vtable_757c0:
		.long   func_75879
		.long   func_758ba
		.long   func_758d2
		.long   func_758d2
		.long   func_758d2
		.long   func_758ba
		.long   func_758ea
		.long   func_758ba
		.long   func_758d2
		.long   func_758ba
		.long   func_75902
		.long   func_758ea
		.long   func_75902
		.long   func_758ea
		.long   func_758ba
		.long   func_758d2
		.long   func_758ba
		.long   func_758d2
		.long   func_758ba
		.long   func_758ba
		.long   func_758d2
		.long   func_758ba
		.long   func_758ba
		.long   func_758ba
		.long   func_758ba
		.long   func_758ba


/*----------------------------------------------------------------*/
create_item:	/* 0x075828 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    %eax,%esi
		mov    %edx,%ebp
		mov    %ebx,%edi
		mov    0x18(%esp),%bl
		cmp    $0x8000,%eax
		jae    jump_75847
		cmp    $0x8000,%edi
		jb     jump_7584e
	jump_75847:
		xor    %edx,%edx
		jmp    jump_758af
	jump_7584e:
		call   ac_get_new_sthing
		movswl %ax,%edx
		mov    %ax,0x4(%esp)
		cmp    $0xffffffff,%edx
		jg     jump_7586c
		cmp    $0xfffffa24,%edx
		jge    jump_7591d
	jump_7586c:
		xor    %edx,%edx
		mov    %edx,%eax
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
func_75879:
/*----------------------------------------------------------------*/
		mov    0x846(%esi),%ax
		movw   $0x422,0x26(%edx)
		mov    %ax,0x24(%edx)
	jump_7588a:
		mov    ingame__fld_unkCB7,%cx
		mov    0x2(%esp),%eax
		inc    %ecx
		sar    $0x10,%eax
		mov    %cx,ingame__fld_unkCB7
		call   ac_add_node_sthing
		movl   $0x4,0xc(%edx)
		mov    %bl,0x8(%edx)
	jump_758af:
		mov    %edx,%eax
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
func_758ba:
/*----------------------------------------------------------------*/
		mov    nstart_ani,%eax
		mov    0x7d8(%eax),%ax
		movw   $0x3eb,0x26(%edx)
		mov    %ax,0x24(%edx)
		jmp    jump_7588a


/*----------------------------------------------------------------*/
func_758d2:
/*----------------------------------------------------------------*/
		mov    nstart_ani,%eax
		mov    0x840(%eax),%ax
		movw   $0x41f,0x26(%edx)
		mov    %ax,0x24(%edx)
		jmp    jump_7588a


/*----------------------------------------------------------------*/
func_758ea:
/*----------------------------------------------------------------*/
		mov    nstart_ani,%eax
		mov    0x880(%eax),%ax
		movw   $0x43f,0x26(%edx)
		mov    %ax,0x24(%edx)
		jmp    jump_7588a


/*----------------------------------------------------------------*/
func_75902:
/*----------------------------------------------------------------*/
		mov    nstart_ani,%eax
		mov    0x882(%eax),%ax
		movw   $0x440,0x26(%edx)
		mov    %ax,0x24(%edx)
		jmp    jump_7588a
	jump_7591d:
		mov    %edx,(%esp)
		mov    (%esp),%eax
		shl    $0x4,%edx
		sub    %eax,%edx
		shl    $0x2,%edx
		mov    %edx,(%esp)
		mov    (%esp),%eax
		mov    EXPORT_SYMBOL(sthings),%edx
		add    %eax,%edx
		shl    $0x8,%esi
		movw   $0x5,0x2a(%edx)
		shl    $0x8,%edi
		movw   $0x5,0x28(%edx)
		shl    $0x8,%ebp
		mov    %esi,0x18(%edx)
		xor    %eax,%eax
		mov    %edi,0x20(%edx)
		mov    nstart_ani,%esi
		mov    %cx,%ax
		mov    %ebp,0x1c(%edx)
		mov    (%esi,%eax,2),%ax
		movb   $0x19,0x9(%edx)
		movw   $0x0,0x34(%edx)
		movw   $0x0,0x30(%edx)
		movw   $0x1e,0x14(%edx)
		dec    %ecx
		mov    %ax,0x24(%edx)
		xor    %ah,%ah
		mov    %cx,0x26(%edx)
		mov    %bl,%al
		mov    %ax,0x2c(%edx)
		cmp    $0x19,%bl
		ja     func_758ba
		xor    %eax,%eax
		mov    %bl,%al
		jmp    *%cs:vtable_757c0(,%eax,4)

vtable_759a4:
		.long   func_75a8d
		.long   func_75aa7
		.long   func_75afc
		.long   func_75ae9
		.long   func_75ae9
		.long   func_75ae9
		.long   func_75abd
		.long   func_75ad3
		.long   func_75b2e
		.long   func_75ae9
		.long   func_75b47
		.long   func_75aa7
		.long   func_75ae9
		.long   func_75ae9


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_new_sim_person)	/* 0x0759DC */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    %eax,%esi
		mov    %ebx,(%esp)
		mov    %cl,%ch
		xor    %eax,%eax
		mov    %cl,%al
		cmp    $0x64,%eax
		jle    jump_759ff
		mov    $0x1,%ch
		mov    unkn01_thing_idx,%di
		jmp    jump_75a06
	jump_759ff:
		call   ac_get_new_thing
		mov    %eax,%edi
	jump_75a06:
		xor    %edx,%edx
		mov    %di,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%ebx
		shl    $0x3,%eax
		add    %eax,%ebx
		mov    %esi,%eax
		shl    $0x8,%eax
		mov    %eax,0x18(%ebx)
		mov    (%esp),%eax
		mov    -0x2(%esp),%edx
		shl    $0x8,%eax
		sar    $0x10,%edx
		mov    %eax,0x20(%ebx)
		movswl %si,%eax
		movw   $0x0,0x8e(%ebx)
		call   ac_alt_at_point
		movw   $0x200,0x38(%ebx)
		movb   $0x0,0x57(%ebx)
		movb   $0x0,0x6c(%ebx)
		movw   $0x30,0x2a(%ebx)
		movw   $0x30,0x28(%ebx)
		mov    %eax,0x1c(%ebx)
		mov    %ch,%al
		movw   $0x0,0x6e(%ebx)
		dec    %al
		movb   $0x3,0x9(%ebx)
		cmp    $0xd,%al
		ja     jump_75b5e
		and    $0xff,%eax
		jmp    *%cs:vtable_759a4(,%eax,4)


/*----------------------------------------------------------------*/
func_75a8d:
/*----------------------------------------------------------------*/
		movb   $0x0,0x57(%ebx)
		movw   $0x50,0x14(%ebx)
		movb   $0x1,0x6c(%ebx)
		movb   $0x2,0x99(%ebx)
		jmp    jump_75b5e


/*----------------------------------------------------------------*/
func_75aa7:
/*----------------------------------------------------------------*/
		movw   $0x64,0x14(%ebx)
		movb   $0x1,0x6c(%ebx)
		movb   $0x4,0x99(%ebx)
		jmp    jump_75b5e


/*----------------------------------------------------------------*/
func_75abd:
/*----------------------------------------------------------------*/
		movw   $0x180,0x14(%ebx)
		movb   $0x1,0x6c(%ebx)
		movb   $0x3,0x99(%ebx)
		jmp    jump_75b5e


/*----------------------------------------------------------------*/
func_75ad3:
/*----------------------------------------------------------------*/
		movw   $0x50,0x14(%ebx)
		movb   $0x1,0x6c(%ebx)
		movb   $0x3,0x99(%ebx)
		jmp    jump_75b5e


/*----------------------------------------------------------------*/
func_75ae9:
/*----------------------------------------------------------------*/
		movw   $0x64,0x14(%ebx)
		movb   $0x0,0x6c(%ebx)
		movb   $0x0,0x99(%ebx)
		jmp    jump_75b5e


/*----------------------------------------------------------------*/
func_75afc:
/*----------------------------------------------------------------*/
		movw   $0x50,0x14(%ebx)
		xor    %edx,%edx
		call   ac_LbRandomAnyShort
		mov    %ax,%dx
		mov    $0x3,%esi
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %esi
		movw   $0x190,0x38(%ebx)
		movb   $0x1,0x6c(%ebx)
		movb   $0x1,0x99(%ebx)
		mov    %dl,0x74(%ebx)
		jmp    jump_75b5e


/*----------------------------------------------------------------*/
func_75b2e:
/*----------------------------------------------------------------*/
		movw   $0x50,0x14(%ebx)
		movw   $0x190,0x38(%ebx)
		movb   $0x1,0x6c(%ebx)
		movb   $0x1,0x99(%ebx)
		jmp    jump_75b5e


/*----------------------------------------------------------------*/
func_75b47:
/*----------------------------------------------------------------*/
		movw   $0x64,0x14(%ebx)
		movw   $0x190,0x38(%ebx)
		movb   $0x1,0x6c(%ebx)
		movb   $0x1,0x99(%ebx)
	jump_75b5e:
		mov    %ch,%al
		mov    %ch,0x8(%ebx)
		add    $0x4,%al
		mov    %al,0x50(%ebx)
		xor    %edx,%edx
		mov    0x50(%ebx),%al
		mov    0x8(%ebx),%dl
		mov    %al,0x51(%ebx)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		xor    %edx,%edx
		dec    %eax
		mov    0x8(%ebx),%dl
		mov    %ax,0x26(%ebx)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%ebx),%al
		add    %eax,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    0x57(%ebx),%al
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		mov    %ax,0x24(%ebx)
		mov    %ebx,%eax
		call   ac_init_person_thing
		xor    %eax,%eax
		mov    0x99(%ebx),%al
		dec    %eax
		mov    %al,%cl
		mov    $0x1,%eax
		shl    %cl,%eax
		add    $0x400000,%eax
		mov    %eax,0xa4(%ebx)
		xor    %edx,%edx
		mov    0x50(%ebx),%al
		mov    %ch,%dl
		mov    %al,0x51(%ebx)
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(peep_type_stats)+12(,%eax,4),%ax
		mov    %ax,0x38(%ebx)
		xor    %eax,%eax
		mov    %di,%ax
		call   ac_add_node_thing
		movw   $0x0,0x52(%ebx)
		mov    %ebx,%eax
		movw   $0x0,0x54(%ebx)
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
init_just_things:	/* 0x075CF0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    $0x1,%ecx
		xor    %esi,%esi
		jmp    jump_75d3f
	jump_75cfe:
		neg    %eax
		imul   $0x3c,%eax,%edi
		mov    $0x3c,%ebx
		mov    EXPORT_SYMBOL(sthings),%eax
		xor    %edx,%edx
		add    %edi,%eax
		call   ac_memset
		mov    EXPORT_SYMBOL(sthings),%eax
		mov    %esi,%edx
		add    %edi,%eax
		neg    %edx
		inc    %esi
		mov    %dx,0x4(%eax)
		mov    %ecx,%edx
		movw   $0x0,0x30(%eax)
		inc    %edx
		neg    %ecx
		mov    %edx,%edi
		mov    %cx,0x16(%eax)
		neg    %edi
		mov    %edx,%ecx
		mov    %di,0x6(%eax)
	jump_75d3f:
		movswl %cx,%eax
		cmp    $0x5dc,%eax
		jl     jump_75cfe
		mov    $0xffffffff,%edx
		mov    $0x1,%ecx
		xor    %ebx,%ebx
		xor    %esi,%esi
		mov    %dx,sthings_empty_head
		mov    %bx,sthings_used_head
		jmp    jump_75d9a
	jump_75d67:
		imul   $0xa8,%eax,%edi
		mov    $0xa8,%ebx
		mov    things,%eax
		xor    %edx,%edx
		add    %edi,%eax
		call   ac_memset
		mov    things,%eax
		mov    %ecx,%edx
		mov    %si,0x4(%edi,%eax,1)
		inc    %edx
		mov    %cx,0x16(%edi,%eax,1)
		inc    %esi
		mov    %edx,%ecx
		mov    %dx,0x6(%edi,%eax,1)
	jump_75d9a:
		movswl %cx,%eax
		cmp    $0x3e8,%eax
		jl     jump_75d67
		mov    $0x1,%ecx
		mov    things,%eax
		xor    %esi,%esi
		mov    %cx,things_empty_head
		mov    %si,things_used_head
		mov    %si,EXPORT_SYMBOL(things_used)
		mov    %si,EXPORT_SYMBOL(sthings_used)
		movw   $0x3e8,0x29056(%eax)
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_init_things)	/* 0x75DDC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		mov    game_user_heap,%eax
		mov    EXPORT_SYMBOL(things_init_times),%ebx
		xor    %edx,%edx
		inc    %ebx
		add    $0x84d0,%eax
		mov    %ebx,EXPORT_SYMBOL(things_init_times)
		mov    $0x3efd0,%ebx
		mov    %edx,gameturn
		call   ac_memset
		mov    game_user_heap,%eax
		add    $0x1e460,%eax
		mov    $0x1,%edx
		mov    %eax,things
		mov    %eax,EXPORT_SYMBOL(sthings)
		call   init_just_things
		mov    %dx,EXPORT_SYMBOL(next_command)
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_get_new_thing)	/* 0x075E30 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    things_empty_head,%si
		mov    things_used_head,%di
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(things_used),%ax
		cmp    $0x3e3,%eax
		jle    jump_75e59
		xor    %eax,%eax
		jmp    jump_75ee2
	jump_75e59:
		xor    %edx,%edx
		mov    %di,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    things,%ebx
		mov    %si,%dx
		mov    %si,0x4(%ebx,%eax,8)
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		movw   $0x0,0x4(%ebx,%eax,8)
		movl   $0x0,0xc(%ebx,%eax,8)
		mov    0x6(%ebx,%eax,8),%cx
		movl   $0x0,0x44(%ebx,%eax,8)
		xor    %edx,%edx
		movb   $0x0,0x80(%ebx,%eax,8)
		mov    %cx,%dx
		mov    %di,0x6(%ebx,%eax,8)
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		mov    %esi,%edi
		add    %edx,%eax
		mov    %ecx,%esi
		mov    EXPORT_SYMBOL(things_used),%dx
		movw   $0x0,0x4(%ebx,%eax,8)
		inc    %edx
		mov    %edi,%eax
		mov    %dx,EXPORT_SYMBOL(things_used)
	jump_75ee2:
		mov    %di,things_used_head
		mov    %si,things_empty_head
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_75ef8:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    things,%ecx
		mov    things_used_head,%di
		mov    %eax,%ebx
		xor    %edx,%edx
		mov    %ax,%dx
		cmp    $0x3e8,%edx
		jle    jump_75f20
		xor    %eax,%eax
		jmp    jump_7603b
	jump_75f20:
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		shl    $0x3,%eax
		lea    (%ecx,%eax,1),%esi
		mov    %edi,%eax
		test   %di,%di
		je     jump_75f6c
	jump_75f3b:
		cmp    %bx,%ax
		jne    jump_75f55
		xor    %ebx,%eax
		mov    %di,things_used_head
		mov    %ecx,things
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_75f55:
		and    $0xffff,%eax
		imul   $0xa8,%eax,%edx
		mov    %ecx,%eax
		mov    0x6(%edx,%eax,1),%ax
		test   %ax,%ax
		jne    jump_75f3b
	jump_75f6c:
		cmp    things_empty_head,%bx
		jne    jump_75fa1
		mov    0x4(%esi),%edx
		mov    0x6(%esi),%ax
		sar    $0x10,%edx
		mov    %ax,things_empty_head
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %eax,%edx
		shl    $0x3,%edx
		mov    %ecx,%eax
		movw   $0x0,0x4(%edx,%eax,1)
		jmp    jump_75ff2
	jump_75fa1:
		cmpw   $0x0,0x4(%esi)
		je     jump_75fc9
		mov    0x2(%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %eax,%edx
		shl    $0x3,%edx
		add    %ecx,%edx
		mov    0x6(%esi),%ax
		mov    %ax,0x6(%edx)
	jump_75fc9:
		cmpw   $0x0,0x6(%esi)
		je     jump_75ff2
		mov    0x4(%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		shl    $0x3,%eax
		lea    (%ecx,%eax,1),%edx
		mov    0x4(%esi),%ax
		mov    %ax,0x4(%edx)
	jump_75ff2:
		xor    %edx,%edx
		mov    %di,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    %ecx,%edx
		mov    %bx,0x4(%edx,%eax,8)
		movw   $0x0,0x4(%esi)
		mov    $0x1,%eax
		mov    %di,0x6(%esi)
		mov    %ebx,%edi
		mov    EXPORT_SYMBOL(things_used),%bx
		movl   $0x0,0xc(%esi)
		add    %eax,%ebx
		movl   $0x0,0x44(%esi)
		mov    %bx,EXPORT_SYMBOL(things_used)
	jump_7603b:
		mov    %di,things_used_head
		mov    %ecx,things
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_remove_thing)	/* 0x076050 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    %eax,%edx
		xor    %ebx,%ebx
		mov    %ax,%bx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		mov    things,%edi
		add    %ebx,%eax
		mov    0x6(%edi,%eax,8),%bx
		mov    0x4(%edi,%eax,8),%cx
		test   %bx,%bx
		je     jump_76097
		xor    %esi,%esi
		mov    %bx,%si
		lea    0x0(,%esi,4),%eax
		add    %esi,%eax
		shl    $0x2,%eax
		add    %esi,%eax
		mov    %cx,0x4(%edi,%eax,8)
	jump_76097:
		test   %cx,%cx
		je     jump_760bc
		xor    %esi,%esi
		mov    %cx,%si
		lea    0x0(,%esi,4),%eax
		add    %esi,%eax
		shl    $0x2,%eax
		add    %esi,%eax
		mov    things,%esi
		mov    %bx,0x6(%esi,%eax,8)
		jmp    jump_760c3
	jump_760bc:
		mov    %bx,things_used_head
	jump_760c3:
		xor    %ebx,%ebx
		mov    %dx,%bx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		mov    things,%esi
		add    %ebx,%eax
		mov    things_empty_head,%bx
		mov    %bx,0x6(%esi,%eax,8)
		xor    %ebx,%ebx
		mov    things_empty_head,%bx
		movw   $0x0,0x4(%esi,%eax,8)
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    %dx,things_empty_head
		mov    %dx,0x4(%esi,%eax,8)
		decw   EXPORT_SYMBOL(things_used)
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_get_new_sthing)	/* 0x076120 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    sthings_empty_head,%si
		mov    sthings_used_head,%di
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(sthings_used),%ax
		cmp    $0x5d7,%eax
		jle    jump_76146
		xor    %eax,%eax
		jmp    jump_761a4
	jump_76146:
		movswl %di,%edx
		mov    %edx,%eax
		shl    $0x4,%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(sthings),%edx
		movswl %si,%ebx
		mov    %si,0x4(%edx,%eax,4)
		mov    %ebx,%eax
		shl    $0x4,%eax
		sub    %ebx,%eax
		movw   $0x0,0x4(%edx,%eax,4)
		mov    0x6(%edx,%eax,4),%cx
		movl   $0x0,0xc(%edx,%eax,4)
		movswl %cx,%ebx
		mov    %di,0x6(%edx,%eax,4)
		mov    %ebx,%eax
		shl    $0x4,%eax
		sub    %ebx,%eax
		mov    %esi,%edi
		movw   $0x0,0x4(%edx,%eax,4)
		mov    EXPORT_SYMBOL(sthings_used),%dx
		mov    %ecx,%esi
		inc    %edx
		mov    %edi,%eax
		mov    %dx,EXPORT_SYMBOL(sthings_used)
	jump_761a4:
		mov    %di,sthings_used_head
		mov    %si,sthings_empty_head
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_remove_sthing)	/* 0x0761B8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    %eax,%edx
		movswl %ax,%ecx
		mov    %ecx,%eax
		shl    $0x4,%eax
		mov    EXPORT_SYMBOL(sthings),%edi
		sub    %ecx,%eax
		mov    0x6(%edi,%eax,4),%bx
		movb   $0x0,0x9(%edi,%eax,4)
		movswl %bx,%ecx
		mov    0x4(%edi,%eax,4),%si
		test   %ecx,%ecx
		jge    jump_761f1
		mov    %ecx,%eax
		shl    $0x4,%eax
		sub    %ecx,%eax
		mov    %si,0x4(%edi,%eax,4)
	jump_761f1:
		cmp    sthings_used_head,%dx
		jne    jump_76203
		mov    %bx,sthings_used_head
		jmp    jump_76218
	jump_76203:
		movswl %si,%ecx
		mov    %ecx,%eax
		shl    $0x4,%eax
		sub    %ecx,%eax
		mov    EXPORT_SYMBOL(sthings),%ecx
		mov    %bx,0x6(%ecx,%eax,4)
	jump_76218:
		movswl %dx,%ecx
		mov    %ecx,%eax
		shl    $0x4,%eax
		sub    %ecx,%eax
		mov    EXPORT_SYMBOL(sthings),%ecx
		mov    sthings_empty_head,%bx
		mov    EXPORT_SYMBOL(sthings_used),%edi
		movw   $0x0,0x4(%ecx,%eax,4)
		sar    $0x10,%edi
		mov    %bx,0x6(%ecx,%eax,4)
		mov    %edi,%eax
		mov    EXPORT_SYMBOL(sthings_used),%si
		shl    $0x4,%eax
		dec    %esi
		sub    %edi,%eax
		mov    %dx,sthings_empty_head
		mov    %si,EXPORT_SYMBOL(sthings_used)
		mov    %dx,0x4(%ecx,%eax,4)
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
swoosh_veh:	/* 0x076270 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		mov    %eax,%esi
		mov    data_1aabd8,%ax
		cmp    0x16(%esi),%ax
		jne    jump_76298
		mov    gameturn,%eax
		sub    data_1aabd4,%eax
		cmp    $0x96,%eax
		jb     jump_7634c
	jump_76298:
		mov    ingame__TrackThing,%ax
		cmp    0x16(%esi),%ax
		jne    jump_76333
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_762ad:
		mov    0x18(%esi),%eax
		mov    engn_xc,%ebx
		sar    $0x8,%eax
		sub    %ebx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebx
		mov    0x20(%esi),%eax
		mov    engn_zc,%ecx
		sar    $0x8,%eax
		sub    %ecx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%ebx
		jle    jump_762dd
		sar    %eax
		jmp    jump_762df
	jump_762dd:
		sar    %ebx
	jump_762df:
		add    %ebx,%eax
		cmp    $0x400,%eax
		jge    jump_7634c
		mov    $0x11,%edx
		xor    %eax,%eax
		xor    %ebx,%ebx
		mov    0x16(%esi),%ax
		call   ac_IsSamplePlaying
		test   %al,%al
		jne    jump_7634c
		push   $0x1
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		mov    $0x11,%edx
		mov    0x16(%esi),%ax
		push   $0x0
		mov    %ax,data_1aabd8
		mov    gameturn,%eax
		push   $0x64
		mov    %eax,data_1aabd4
		mov    %esi,%eax
		call   ac_play_dist_sample
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_76333:
		mov    0x8(%esi),%al
		cmp    $0x2b,%al
		jb     jump_76344
		jbe    jump_762ad
		cmp    $0x32,%al
		jmp    jump_76346
	jump_76344:
		cmp    $0x28,%al
	jump_76346:
		je     jump_762ad
	jump_7634c:
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_remove_locks)	/* 0x076354 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		mov    0x7c(%eax),%dl
		test   $0x10,%dl
		je     jump_7639b
		mov    0x5e(%eax),%ebx
		mov    %dl,%dh
		sar    $0x10,%ebx
		and    $0xef,%dh
		neg    %ebx
		mov    %dh,0x7c(%eax)
		lea    0x0(,%ebx,8),%edx
		add    %ebx,%edx
		mov    EXPORT_SYMBOL(game_traffic_nodes),%ebx
		andb   $0xbf,0x12(%ebx,%edx,4)
		mov    0x5e(%eax),%ecx
		sar    $0x10,%ecx
		neg    %ecx
		lea    0x0(,%ecx,8),%edx
		add    %ecx,%edx
		movw   $0x0,0x14(%ebx,%edx,4)
	jump_7639b:
		mov    0x7c(%eax),%ch
		test   $0x20,%ch
		je     jump_763e5
		mov    0x88(%eax),%ebx
		mov    %ch,%dl
		sar    $0x10,%ebx
		and    $0xdf,%dl
		neg    %ebx
		mov    %dl,0x7c(%eax)
		lea    0x0(,%ebx,8),%edx
		mov    EXPORT_SYMBOL(game_traffic_nodes),%ecx
		add    %ebx,%edx
		andb   $0xbf,0x12(%ecx,%edx,4)
		mov    0x88(%eax),%ebx
		sar    $0x10,%ebx
		neg    %ebx
		lea    0x0(,%ebx,8),%edx
		add    %ebx,%edx
		movw   $0x0,0x14(%ecx,%edx,4)
	jump_763e5:
		mov    0x7c(%eax),%bh
		test   $0x40,%bh
		je     jump_7642f
		mov    %bh,%cl
		mov    0x94(%eax),%ebx
		sar    $0x10,%ebx
		and    $0xbf,%cl
		neg    %ebx
		mov    %cl,0x7c(%eax)
		lea    0x0(,%ebx,8),%edx
		mov    EXPORT_SYMBOL(game_traffic_nodes),%ecx
		add    %ebx,%edx
		andb   $0xbf,0x12(%ecx,%edx,4)
		mov    0x94(%eax),%ebx
		sar    $0x10,%ebx
		neg    %ebx
		lea    0x0(,%ebx,8),%edx
		add    %ebx,%edx
		movw   $0x0,0x14(%ecx,%edx,4)
	jump_7642f:
		andb   $0xf7,0x7c(%eax)
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_remove_locks_apart_from_agok)	/* 0x076438 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		mov    0x7c(%eax),%dl
		test   $0x10,%dl
		je     jump_7647f
		mov    0x5e(%eax),%ebx
		mov    %dl,%dh
		sar    $0x10,%ebx
		and    $0xef,%dh
		neg    %ebx
		mov    %dh,0x7c(%eax)
		lea    0x0(,%ebx,8),%edx
		mov    EXPORT_SYMBOL(game_traffic_nodes),%ecx
		add    %ebx,%edx
		andb   $0xbf,0x12(%ecx,%edx,4)
		mov    0x5e(%eax),%ebx
		sar    $0x10,%ebx
		neg    %ebx
		lea    0x0(,%ebx,8),%edx
		add    %ebx,%edx
		movw   $0x0,0x14(%ecx,%edx,4)
	jump_7647f:
		mov    0x7c(%eax),%bh
		test   $0x20,%bh
		je     jump_764c9
		mov    %bh,%cl
		mov    0x88(%eax),%ebx
		sar    $0x10,%ebx
		and    $0xdf,%cl
		neg    %ebx
		mov    %cl,0x7c(%eax)
		lea    0x0(,%ebx,8),%edx
		mov    EXPORT_SYMBOL(game_traffic_nodes),%ecx
		add    %ebx,%edx
		andb   $0xbf,0x12(%ecx,%edx,4)
		mov    0x88(%eax),%ebx
		sar    $0x10,%ebx
		neg    %ebx
		lea    0x0(,%ebx,8),%edx
		add    %ebx,%edx
		movw   $0x0,0x14(%ecx,%edx,4)
	jump_764c9:
		andb   $0xf7,0x7c(%eax)
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
can_the_tank_run_over:	/* 0x0764D4 */
/*----------------------------------------------------------------*/
		push   %edx
		xor    %edx,%edx
		mov    0x26(%eax),%dx
		cmp    $0x400,%edx
		jle    jump_764f2
		cmp    $0x405,%edx
		jge    jump_764f2
		mov    $0x1,%eax
		pop    %edx
		ret
	jump_764f2:
		xor    %edx,%edx
		mov    0x26(%eax),%dx
		cmp    $0x3ec,%edx
		jle    jump_7650f
		cmp    $0x3f0,%edx
		jge    jump_7650f
		mov    $0x1,%eax
		pop    %edx
		ret
	jump_7650f:
		mov    0x26(%eax),%ax
		and    $0xffff,%eax
		cmp    $0x3e7,%eax
		je     jump_76550
		cmp    $0x3ea,%eax
		je     jump_76550
		cmp    $0x3ec,%eax
		je     jump_76550
		cmp    $0x3f0,%eax
		je     jump_76550
		cmp    $0x408,%eax
		je     jump_76550
		cmp    $0x40d,%eax
		je     jump_76550
		cmp    $0x40e,%eax
		je     jump_76550
		cmp    $0x41a,%eax
		jne    jump_76557
	jump_76550:
		mov    $0x1,%eax
		pop    %edx
		ret
	jump_76557:
		cmp    $0x3e9,%eax
		je     jump_76581
		cmp    $0x406,%eax
		je     jump_76581
		cmp    $0x40a,%eax
		je     jump_76581
		cmp    $0x40b,%eax
		je     jump_76581
		cmp    $0x417,%eax
		je     jump_76581
		cmp    $0x419,%eax
		jne    jump_76588
	jump_76581:
		mov    $0x1,%eax
		pop    %edx
		ret
	jump_76588:
		xor    %eax,%eax
		pop    %edx
		ret


/*----------------------------------------------------------------*/
flatten_vehicle:	/* 0x07658C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    EXPORT_SYMBOL(game_object_points),%ebp
		mov    %eax,(%esp)
		mov    (%esp),%edx
		xor    %eax,%eax
		mov    0x8(%edx),%al
		cmp    $0x28,%eax
		jne    jump_76626
		xor    %eax,%eax
		mov    0xa(%edx),%ax
		cmp    $0x21,%eax
		je     jump_765be
		cmp    $0x3d,%eax
		jne    jump_76626
	jump_765be:
		mov    (%esp),%edx
		mov    0x50(%edx),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    game_objects,%edi
		shl    $0x2,%eax
		add    %eax,%edi
		xor    %eax,%eax
		mov    0x18(%edi),%ax
		lea    0x0(,%eax,4),%edx
		add    %eax,%edx
		mov    %ebp,%ecx
		add    %edx,%edx
		jmp    jump_76607
	jump_765f0:
		mov    0x2(%ecx,%edx,1),%ebx
		sar    $0x10,%ebx
		mov    %ebx,%esi
		sar    $0x4,%esi
		add    $0xa,%edx
		sub    %esi,%ebx
		inc    %eax
		mov    %bx,-0x6(%ecx,%edx,1)
	jump_76607:
		xor    %ebx,%ebx
		mov    0x1a(%edi),%bx
		cmp    %ebx,%eax
		jle    jump_765f0
		mov    (%esp),%eax
		mov    0x1c(%eax),%edx
		test   %edx,%edx
		jle    jump_76626
		mov    %edx,%eax
		mov    (%esp),%edx
		sar    $0x4,%eax
		sub    %eax,0x1c(%edx)
	jump_76626:
		mov    %ebp,EXPORT_SYMBOL(game_object_points)
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
check_tank_collision:	/* 0x076638 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x30,%esp
		mov    %eax,%ecx
		mov    0x52(%eax),%ebx
		sar    $0x10,%ebx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		mov    $EXPORT_SYMBOL(local_mats),%ebx
		shl    $0x2,%eax
		add    %eax,%ebx
		mov    0x8(%ebx),%eax
		mov    0x18(%ecx),%esi
		neg    %eax
		mov    0x20(%ebx),%ebx
		shl    $0x2,%eax
		neg    %ebx
		add    %eax,%esi
		shl    $0x2,%ebx
		mov    %esi,0x28(%esp)
		mov    0x20(%ecx),%esi
		add    %ebx,%esi
		mov    %esi,0x24(%esp)
		mov    0x18(%ecx),%esi
		sub    %eax,%esi
		mov    0x28(%esp),%edx
		mov    %esi,0x2c(%esp)
		sar    $0x4,%eax
		mov    0x2c(%esp),%edi
		add    %eax,%edx
		mov    0x20(%ecx),%esi
		mov    %edx,0x28(%esp)
		sub    %ebx,%esi
		add    %eax,%edi
		mov    %esi,0xc(%esp)
		sar    $0x4,%ebx
		mov    %edi,0x2c(%esp)
		mov    0x18(%ecx),%eax
		mov    0x24(%esp),%esi
		mov    0xc(%esp),%ebp
		add    %ebx,%esi
		add    %ebx,%ebp
		mov    0x20(%ecx),%ebx
		sar    $0x10,%eax
		sar    $0x10,%ebx
		mov    %esi,0x24(%esp)
		mov    %ebx,0x10(%esp)
		lea    -0x3(%eax),%ebx
		mov    %ebp,0xc(%esp)
		add    $0x4,%eax
		mov    %ebx,0x4(%esp)
		mov    %eax,(%esp)
		jmp    jump_766f1
	jump_766dd:
		mov    0x4(%esp),%eax
		inc    %eax
		mov    (%esp),%edx
		mov    %eax,0x4(%esp)
		cmp    %edx,%eax
		je     jump_76980
	jump_766f1:
		mov    0x4(%esp),%ebx
		test   %ebx,%ebx
		jl     jump_766dd
		cmp    $0x7f,%ebx
		jg     jump_766dd
		mov    0x10(%esp),%eax
		sub    $0x3,%eax
		mov    %eax,0x1c(%esp)
		mov    0x10(%esp),%eax
		add    $0x4,%eax
		mov    %ebx,0x14(%esp)
		mov    %eax,0x18(%esp)
		jmp    jump_768f1
	jump_7671d:
		sar    %edi
	jump_7671f:
		add    %edi,%eax
		mov    0x2c(%esp),%edi
		mov    %eax,%ebp
		mov    0x18(%ebx),%eax
		sub    %edi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    0xc(%esp),%edx
		mov    %eax,%edi
		mov    0x20(%ebx),%eax
		sub    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%edi
		jle    jump_76749
		sar    %eax
		jmp    jump_7674b
	jump_76749:
		sar    %edi
	jump_7674b:
		add    %edi,%eax
		xor    %edi,%edi
		mov    0x14(%ebx),%di
		shl    $0x8,%edi
		add    $0x13800,%edi
		cmp    %edi,%ebp
		jl     jump_76768
		cmp    %edi,%eax
		jge    jump_768d8
	jump_76768:
		xor    %eax,%eax
		mov    0x8(%ebx),%al
		cmp    $0x33,%eax
		jne    jump_767b0
		xor    %edi,%edi
		mov    0x5e(%ecx),%di
		imul   $0xa8,%edi,%edi
		mov    things,%eax
		add    %edi,%eax
		mov    0xd(%eax),%dl
		test   $0x20,%dl
		jne    jump_76792
		test   $0x20,%dl
		je     jump_7679d
	jump_76792:
		movw   $0x0,0x5a(%ecx)
		jmp    jump_768d8
	jump_7679d:
		cmp    %ebx,%ecx
		jae    jump_768d8
		movw   $0x0,0x5a(%ecx)
		jmp    jump_768d8
	jump_767b0:
		mov    0x38(%ebx),%eax
		sar    $0x10,%eax
		mov    %eax,%edi
		sar    $0x2,%edi
		sub    %edi,%eax
		mov    %eax,%edx
		mov    %ax,0x3a(%ebx)
		sub    $0x10,%edx
		mov    %dx,0x3a(%ebx)
		mov    0x38(%ebx),%eax
		sar    $0x10,%eax
		movw   $0x5,0x84(%ebx)
		test   %eax,%eax
		jg     jump_767e8
		mov    %ebx,%eax
		call   ac_init_vehicle_explode
		orb    $0x2,0xc(%ebx)
	jump_767e8:
		decw   0x3a(%ecx)
		mov    0x38(%ecx),%eax
		sar    $0x10,%eax
		movw   $0x5,0x84(%ecx)
		test   %eax,%eax
		jg     jump_7680a
		mov    %ecx,%eax
		call   ac_start_crashing
		orb    $0x2,0xc(%ecx)
	jump_7680a:
		mov    %ecx,%edx
		mov    %ebx,%eax
		call   flatten_vehicle
		jmp    jump_768d8
	jump_76818:
		imul   $0x3c,%esi,%ebx
		mov    EXPORT_SYMBOL(sthings),%eax
		add    %eax,%ebx
		mov    (%ebx),%esi
		mov    0xc(%ebx),%ah
		sar    $0x10,%esi
		test   $0x2,%ah
		jne    jump_768d8
		mov    0x28(%esp),%edi
		mov    0x18(%ebx),%eax
		sub    %edi,%eax
		mov    0x24(%esp),%ebp
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%edi
		mov    0x20(%ebx),%eax
		sub    %ebp,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%edi
		jle    jump_76859
		sar    %eax
		jmp    jump_7685b
	jump_76859:
		sar    %edi
	jump_7685b:
		add    %edi,%eax
		mov    0x2c(%esp),%edx
		mov    %eax,0x8(%esp)
		mov    0x18(%ebx),%eax
		sub    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    0xc(%esp),%edx
		mov    %eax,%edi
		mov    %eax,%ebp
		mov    0x20(%ebx),%eax
		sub    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,0x20(%esp)
		cmp    %eax,%edi
		jle    jump_7688d
		sar    %eax
		jmp    jump_7688f
	jump_7688d:
		sar    %edi
	jump_7688f:
		add    %edi,%eax
		xor    %edi,%edi
		mov    0x14(%ebx),%di
		shl    $0x8,%edi
		mov    0x8(%esp),%edx
		add    $0x13800,%edi
		cmp    %edx,%edi
		jg     jump_768ac
		cmp    %edi,%eax
		jge    jump_768d8
	jump_768ac:
		mov    %ebp,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0x2,%eax
		je     jump_768d8
		mov    0x20(%esp),%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0x2,%eax
		je     jump_768d8
		mov    %ebx,%eax
		call   can_the_tank_run_over
		test   %eax,%eax
		je     jump_768d8
		mov    %ebx,%eax
		call   ac_set_static_on_fire
	jump_768d8:
		test   %esi,%esi
		jne    jump_7691b
	jump_768dc:
		mov    0x1c(%esp),%edi
		inc    %edi
		mov    0x18(%esp),%ebp
		mov    %edi,0x1c(%esp)
		cmp    %ebp,%edi
		je     jump_766dd
	jump_768f1:
		mov    0x1c(%esp),%eax
		test   %eax,%eax
		jl     jump_768dc
		cmp    $0x7f,%eax
		jg     jump_768dc
		mov    0x14(%esp),%ebx
		shl    $0x7,%eax
		add    %ebx,%eax
		imul   $0x12,%eax,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%ebx
		mov    0x6(%ebx,%eax,1),%esi
		sar    $0x10,%esi
		test   %esi,%esi
		je     jump_768dc
	jump_7691b:
		jle    jump_76818
		imul   $0xa8,%esi,%ebx
		mov    things,%eax
		add    %eax,%ebx
		xor    %eax,%eax
		mov    (%ebx),%esi
		mov    0x9(%ebx),%al
		sar    $0x10,%esi
		cmp    $0x2,%eax
		jne    jump_768d8
		cmp    %ecx,%ebx
		je     jump_768d8
		mov    0x1c(%ecx),%eax
		sub    0x1c(%ebx),%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0x1000,%eax
		jge    jump_768d8
		mov    0x28(%esp),%ebp
		mov    0x18(%ebx),%eax
		sub    %ebp,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    0x24(%esp),%edx
		mov    %eax,%edi
		mov    0x20(%ebx),%eax
		sub    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%edi
		jle    jump_7671d
		sar    %eax
		jmp    jump_7671f
	jump_76980:
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_tank_stationary)	/* 0x07698C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		mov    %eax,%esi
		xor    %edx,%edx
		mov    0x94(%eax),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		add    %eax,%edx
		mov    0x52(%edx),%ecx
		sar    $0x10,%ecx
		xor    %ebx,%ebx
		lea    0x0(,%ecx,8),%eax
		mov    0x64(%edx),%edx
		add    %ecx,%eax
		mov    $EXPORT_SYMBOL(local_mats),%ecx
		shl    $0x2,%eax
		sar    $0x10,%edx
		add    %eax,%ecx
		xor    %eax,%eax
		call   rotate_obj
		testb  $0x7,gameturn
		jne    jump_76a38
		mov    $0x31,%edx
		xor    %eax,%eax
		xor    %ebx,%ebx
		mov    0x16(%esi),%ax
		call   ac_IsSamplePlaying
		test   %al,%al
		jne    jump_76a20
		cmpw   $0x0,0x5e(%esi)
		je     jump_76a38
		push   $0x1
		push   $0xffffffff
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x31,%edx
		mov    %esi,%eax
		call   ac_play_dist_sample
		jmp    jump_76a38
	jump_76a20:
		xor    %eax,%eax
		mov    0x5e(%esi),%ax
		test   %eax,%eax
		jne    jump_76a38
		mov    $0x31,%edx
		mov    0x16(%esi),%ax
		call   ac_stop_sample_using_heap
	jump_76a38:
		mov    %esi,%eax
		call   check_tank_collision
		mov    0x20(%esi),%eax
		mov    0x18(%esi),%edx
		sar    $0x10,%eax
		sar    $0x10,%edx
		shl    $0x7,%eax
		add    %eax,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0xf(%edx,%eax,2),%al
		test   $0x5,%al
		je     jump_76a6b
		test   $0x8,%al
		je     jump_76a98
	jump_76a6b:
		mov    0x20(%esi),%eax
		mov    0x18(%esi),%edx
		sar    $0x10,%eax
		sar    $0x10,%edx
		shl    $0x7,%eax
		add    %eax,%edx
		lea    0x0(,%edx,8),%eax
		add    %eax,%edx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %edx,%edx
		mov    0xf(%edx,%eax,1),%al
		test   $0x5,%al
		je     jump_76a9f
		test   $0x8,%al
		jne    jump_76a9f
	jump_76a98:
		mov    %esi,%eax
		call   ac_init_vehicle_explode
	jump_76a9f:
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_mech_stationary)	/* 0x076AA4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    %eax,%ebx
		mov    0x40(%eax),%edx
		test   %edx,%edx
		je     jump_76b34
		mov    0x18(%eax),%esi
		mov    0x20(%eax),%edi
		sar    $0x8,%esi
		mov    %edx,%eax
		sar    $0x8,%edi
		mov    0x18(%edx),%edx
		mov    0x20(%eax),%ecx
		sar    $0x8,%edx
		sar    $0x8,%ecx
		mov    %edx,%eax
		mov    %ecx,%edx
		sub    %esi,%eax
		sub    %edi,%edx
		xor    %ecx,%ecx
		call   ac_arctan
		mov    %ax,%cx
		mov    0x64(%ebx),%eax
		sar    $0x10,%eax
		sub    %eax,%ecx
		mov    %ecx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %ax,0x4a(%ebx)
		cmp    $0x400,%ecx
		jle    jump_76b03
		sub    $0x7ff,%ecx
	jump_76b03:
		cmp    $0xfffffc00,%ecx
		jge    jump_76b11
		add    $0x7ff,%ecx
	jump_76b11:
		cmp    $0x186,%ecx
		jle    jump_76b1e
		mov    $0x186,%ecx
	jump_76b1e:
		cmp    $0xfffffe7a,%ecx
		jge    jump_76b2b
		mov    $0xfffffe7a,%ecx
	jump_76b2b:
		mov    %cx,0x62(%ebx)
		jmp    jump_76bde
	jump_76b34:
		testb  $0x20,0xf(%eax)
		je     jump_76bb7
		mov    0x18(%ebx),%eax
		mov    0x20(%ebx),%edx
		mov    0x72(%ebx),%ecx
		mov    0x76(%ebx),%esi
		sar    $0x8,%eax
		sar    $0x8,%edx
		sar    $0x10,%ecx
		sar    $0x10,%esi
		sub    %eax,%ecx
		sub    %edx,%esi
		mov    %ecx,%eax
		mov    %esi,%edx
		call   ac_arctan
		mov    0x64(%ebx),%ecx
		and    $0xffff,%eax
		sar    $0x10,%ecx
		sub    %ecx,%eax
		mov    %eax,%ecx
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %ax,0x4a(%ebx)
		cmp    $0x400,%ecx
		jle    jump_76b89
		sub    $0x7ff,%ecx
	jump_76b89:
		cmp    $0xfffffc00,%ecx
		jge    jump_76b97
		add    $0x7ff,%ecx
	jump_76b97:
		cmp    $0x186,%ecx
		jle    jump_76ba4
		mov    $0x186,%ecx
	jump_76ba4:
		cmp    $0xfffffe7a,%ecx
		jge    jump_76bb1
		mov    $0xfffffe7a,%ecx
	jump_76bb1:
		mov    %cx,0x62(%ebx)
		jmp    jump_76bde
	jump_76bb7:
		mov    0x60(%ebx),%eax
		sar    $0x10,%eax
		mov    %eax,%edx
		sar    $0x4,%edx
		sub    %edx,%eax
		mov    %ax,0x62(%ebx)
		mov    0x60(%ebx),%eax
		sar    $0x10,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0x10,%eax
		jge    jump_76bde
		movw   $0x0,0x62(%ebx)
	jump_76bde:
		mov    0x60(%ebx),%eax
		mov    0x64(%ebx),%ecx
		sar    $0x10,%eax
		sar    $0x10,%ecx
		sar    $0x2,%eax
		add    %eax,%ecx
		mov    0x52(%ebx),%eax
		mov    %cx,0x66(%ebx)
		sar    $0x10,%eax
		mov    0x67(%ebx),%dl
		lea    0x0(,%eax,8),%ecx
		and    $0x7,%dl
		add    %eax,%ecx
		mov    %dl,0x67(%ebx)
		shl    $0x2,%ecx
		mov    0x66(%ebx),%ax
		add    $EXPORT_SYMBOL(local_mats),%ecx
		neg    %eax
		xor    %ebx,%ebx
		movswl %ax,%edx
		xor    %eax,%eax
		call   rotate_obj
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_mech)	/* 0x076C2C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    %eax,%esi
		xor    %eax,%eax
		mov    gameturn,%edx
		mov    0x16(%esi),%ax
		add    %edx,%eax
		test   $0x7f,%al
		jne    jump_76c65
		push   $0x3
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x63,%edx
		mov    %esi,%eax
		call   ac_play_dist_sample
	jump_76c65:
		mov    0x20(%esi),%eax
		mov    0x18(%esi),%edx
		sar    $0x10,%eax
		sar    $0x10,%edx
		shl    $0x7,%eax
		add    %eax,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		testb  $0x8,0xf(%edx,%eax,2)
		jne    jump_76cd6
		mov    0x20(%esi),%eax
		sar    $0x8,%eax
		movswl %ax,%edx
		mov    0x18(%esi),%eax
		sar    $0x8,%eax
		cwtl
		call   ac_alt_at_point
		add    $0xdac,%eax
		mov    0x1c(%esi),%ebx
		cmp    %ebx,%eax
		jle    jump_76cbc
		mov    %eax,%edx
		sub    %ebx,%edx
		sar    $0x4,%edx
		add    $0x40,%edx
		add    %edx,%ebx
		mov    %ebx,0x1c(%esi)
	jump_76cbc:
		mov    0x1c(%esi),%ecx
		cmp    %ecx,%eax
		jge    jump_76cd6
		mov    %ecx,%edx
		sub    %eax,%edx
		mov    %edx,%eax
		sar    $0x4,%eax
		mov    %ecx,%edx
		add    $0x40,%eax
		sub    %eax,%edx
		mov    %edx,0x1c(%esi)
	jump_76cd6:
		mov    0x18(%esi),%ebx
		mov    0x20(%esi),%edx
		xor    %eax,%eax
		sar    $0x8,%ebx
		mov    0xa(%esi),%ax
		sar    $0x8,%edx
		cmp    $0x33,%eax
		jne    jump_76d1c
		cmpl   $0x0,0x40(%esi)
		jne    jump_76cf9
		testb  $0x20,0xf(%esi)
		je     jump_76d1c
	jump_76cf9:
		mov    0x40(%esi),%eax
		test   %eax,%eax
		je     jump_76d0e
		mov    0x18(%eax),%edi
		mov    0x20(%eax),%ebp
		sar    $0x8,%edi
		sar    $0x8,%ebp
		jmp    jump_76d28
	jump_76d0e:
		testb  $0x20,0xf(%esi)
		je     jump_76d28
		mov    0x72(%esi),%edi
		mov    0x76(%esi),%ebp
		jmp    jump_76d22
	jump_76d1c:
		mov    0x68(%esi),%edi
		mov    0x6c(%esi),%ebp
	jump_76d22:
		sar    $0x10,%edi
		sar    $0x10,%ebp
	jump_76d28:
		sub    %ebx,%edi
		mov    %edi,%ebx
		mov    %ebp,%edi
		sub    %edx,%edi
		mov    %ebx,%eax
		mov    %edi,%edx
		call   ac_arctan
		xor    %edx,%edx
		mov    %ax,%dx
		mov    0x64(%esi),%eax
		sar    $0x10,%eax
		sub    %eax,%edx
		mov    %edx,%eax
		cmp    $0x400,%edx
		jle    jump_76d56
		lea    -0x7ff(%edx),%eax
	jump_76d56:
		cmp    $0xfffffc00,%eax
		jge    jump_76d62
		add    $0x7ff,%eax
	jump_76d62:
		cmp    $0x186,%eax
		jle    jump_76d6e
		mov    $0x186,%eax
	jump_76d6e:
		cmp    $0xfffffe7a,%eax
		jge    jump_76d7a
		mov    $0xfffffe7a,%eax
	jump_76d7a:
		imul   %ebx,%ebx
		imul   %edi,%edi
		mov    %ax,0x62(%esi)
		mov    0x60(%esi),%eax
		sar    $0x10,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    $0x384,%edx
		add    %eax,%eax
		sub    %eax,%edx
		xor    %eax,%eax
		mov    %dx,0x5a(%esi)
		mov    0xa(%esi),%ax
		add    %edi,%ebx
		cmp    $0x33,%eax
		jne    jump_76dd4
		mov    0x36(%esi),%eax
		sar    $0x10,%eax
		movw   $0x0,0x5a(%esi)
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0x32,%eax
		jge    jump_76e49
		movw   $0x21,0xa(%esi)
		movw   $0x0,0x38(%esi)
		jmp    jump_76e49
	jump_76dd4:
		cmp    $0x30000,%ebx
		jge    jump_76e49
		mov    %esi,%eax
		call   do_next_navigate_index
		test   %al,%al
		je     jump_76df5
		movw   $0x0,0x4c(%esi)
		movw   $0x33,0xa(%esi)
		jmp    jump_76e49
	jump_76df5:
		mov    0x4a(%esi),%ebx
		sar    $0x10,%ebx
		lea    0x0(,%ebx,4),%edx
		add    %ebx,%edx
		mov    0x3e(%esi),%al
		shl    $0x2,%edx
		and    $0x3,%al
		sub    %ebx,%edx
		mov    0x4a(%esi),%ebx
		and    $0xff,%eax
		sar    $0x10,%ebx
		mov    data_1777cd(%edx,%eax,2),%ax
		lea    0x0(,%ebx,4),%edx
		mov    %ax,0x6a(%esi)
		add    %ebx,%edx
		mov    0x3e(%esi),%al
		shl    $0x2,%edx
		and    $0x3,%al
		sub    %ebx,%edx
		and    $0xff,%eax
		mov    data_1777d5(%edx,%eax,2),%ax
		mov    %ax,0x6e(%esi)
	jump_76e49:
		mov    0x38(%esi),%ax
		cmp    0x5a(%esi),%ax
		jge    jump_76e5c
		mov    %eax,%ebx
		add    $0x30,%ebx
		mov    %bx,0x38(%esi)
	jump_76e5c:
		mov    0x38(%esi),%ax
		cmp    0x5a(%esi),%ax
		jle    jump_76e6f
		mov    %eax,%edi
		sub    $0x30,%edi
		mov    %di,0x38(%esi)
	jump_76e6f:
		mov    0x60(%esi),%edx
		mov    0x64(%esi),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		sar    $0x3,%edx
		add    %edx,%eax
		mov    %ax,0x66(%esi)
		mov    0x67(%esi),%al
		mov    0x52(%esi),%edx
		and    $0x7,%al
		sar    $0x10,%edx
		mov    %al,0x67(%esi)
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(local_mats),%edi
		shl    $0x2,%eax
		add    %eax,%edi
		mov    0x66(%esi),%ax
		xor    %ebx,%ebx
		neg    %eax
		mov    %edi,%ecx
		movswl %ax,%edx
		xor    %eax,%eax
		call   rotate_obj
		mov    0x8(%edi),%edx
		mov    0x36(%esi),%eax
		neg    %edx
		sar    $0x10,%eax
		imul   %edx,%eax
		sar    $0xa,%eax
		mov    %eax,0x2c(%esi)
		mov    0x14(%edi),%edx
		mov    0x36(%esi),%eax
		neg    %edx
		sar    $0x10,%eax
		imul   %edx,%eax
		sar    $0xa,%eax
		mov    %eax,0x30(%esi)
		mov    0x36(%esi),%edx
		mov    0x20(%edi),%eax
		sar    $0x10,%edx
		neg    %eax
		imul   %edx,%eax
		sar    $0xa,%eax
		mov    %eax,0x34(%esi)
		mov    0x2c(%esi),%edx
		mov    0x18(%esi),%eax
		add    %edx,%eax
		mov    %eax,(%esp)
		mov    0x1c(%esi),%eax
		mov    0x30(%esi),%ebx
		mov    0x34(%esi),%ecx
		add    %eax,%ebx
		mov    0x20(%esi),%eax
		add    %ecx,%eax
		mov    (%esp),%edx
		mov    %eax,0x4(%esp)
		mov    %eax,%ecx
		mov    %esi,%eax
		call   ac_move_mapwho
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_check_person_close)	/* 0x076F2C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x10,%esp
		mov    things,%ebx
		mov    EXPORT_SYMBOL(sthings),%ecx
		movswl (%eax),%edx
		mov    0x2(%eax),%eax
		sar    $0x10,%eax
		sar    $0x8,%eax
		sar    $0x8,%edx
		mov    %eax,(%esp)
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		add    %eax,%eax
		mov    $0xffffffff,%esi
		lea    0x11ee(%eax),%edx
		mov    %esi,0x8(%esp)
		sub    $0x12,%eax
		mov    %edx,0xc(%esp)
		mov    %eax,0x4(%esp)
		mov    $0x10,%ebp
	jump_76f7d:
		imul   $0x900,(%esp),%edi
		mov    0x4(%esp),%esi
		sub    $0x900,%esi
		mov    0xc(%esp),%edx
		add    %edi,%esi
		add    %edx,%edi
	jump_76f96:
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		mov    0x8(%esi,%eax,1),%ax
		test   %ax,%ax
		je     jump_76faf
	jump_76fa5:
		cwtl
		test   %eax,%eax
		jg     jump_77000
		jmp    jump_77016
	jump_76faf:
		add    $0x900,%esi
		cmp    %edi,%esi
		jl     jump_76f96
		mov    0xc(%esp),%esi
		mov    0x4(%esp),%edi
		mov    0x8(%esp),%eax
		add    $0x12,%esi
		add    $0x12,%edi
		inc    %eax
		mov    %esi,0xc(%esp)
		mov    %edi,0x4(%esp)
		mov    %eax,0x8(%esp)
		cmp    $0x2,%eax
		jl     jump_76f7d
		jmp    jump_77027
	jump_76fdf:
		xor    %edx,%edx
		mov    0xa(%eax),%dx
		cmp    $0xd,%edx
		je     jump_77010
		cmp    $0x24,%edx
		je     jump_77010
		cmp    $0xc,%edx
		je     jump_77010
		test   %ebp,0x44(%eax)
		jne    jump_77010
		mov    $0x1,%eax
		jmp    jump_77029
	jump_77000:
		imul   $0xa8,%eax,%eax
		add    %ebx,%eax
		mov    0x9(%eax),%dl
		cmp    $0x3,%dl
		je     jump_76fdf
	jump_77010:
		mov    0x2(%eax),%ax
		jmp    jump_77020
	jump_77016:
		imul   $0x3c,%eax,%eax
		mov    %ecx,%edx
		mov    0x2(%edx,%eax,1),%ax
	jump_77020:
		test   %ax,%ax
		jne    jump_76fa5
		jmp    jump_76faf
	jump_77027:
		xor    %eax,%eax
	jump_77029:
		mov    %ecx,EXPORT_SYMBOL(sthings)
		mov    %ebx,things
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_tank)	/* 0x077040 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    %eax,%esi
		testb  $0x7,gameturn
		jne    jump_770a7
		mov    $0x31,%edx
		xor    %eax,%eax
		xor    %ebx,%ebx
		mov    0x16(%esi),%ax
		call   ac_IsSamplePlaying
		test   %al,%al
		jne    jump_7708f
		cmpw   $0x0,0x5e(%esi)
		je     jump_770a7
		push   $0x1
		push   $0xffffffff
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x31,%edx
		mov    %esi,%eax
		call   ac_play_dist_sample
		jmp    jump_770a7
	jump_7708f:
		xor    %eax,%eax
		mov    0x5e(%esi),%ax
		test   %eax,%eax
		jne    jump_770a7
		mov    $0x31,%edx
		mov    0x16(%esi),%ax
		call   ac_stop_sample_using_heap
	jump_770a7:
		mov    0x20(%esi),%eax
		mov    0x18(%esi),%edx
		sar    $0x10,%eax
		sar    $0x10,%edx
		shl    $0x7,%eax
		add    %eax,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		testb  $0x8,0xf(%edx,%eax,2)
		jne    jump_7711a
		mov    0x20(%esi),%eax
		sar    $0x8,%eax
		movswl %ax,%edx
		mov    0x18(%esi),%eax
		sar    $0x8,%eax
		cwtl
		call   ac_alt_at_point
		add    $0xdac,%eax
		cmp    0x1c(%esi),%eax
		jle    jump_77100
		mov    %eax,%edx
		mov    0x1c(%esi),%ebx
		sub    %ebx,%edx
		sar    $0x4,%edx
		add    $0x40,%edx
		lea    (%ebx,%edx,1),%ecx
		mov    %ecx,0x1c(%esi)
	jump_77100:
		mov    0x1c(%esi),%edi
		cmp    %edi,%eax
		jge    jump_7711a
		mov    %edi,%edx
		sub    %eax,%edx
		mov    %edx,%eax
		sar    $0x4,%eax
		mov    %edi,%ebp
		add    $0x40,%eax
		sub    %eax,%ebp
		mov    %ebp,0x1c(%esi)
	jump_7711a:
		mov    0x18(%esi),%edi
		mov    0x20(%esi),%ebx
		mov    0x68(%esi),%eax
		mov    0x6c(%esi),%edx
		sar    $0x8,%edi
		sar    $0x8,%ebx
		sar    $0x10,%eax
		sar    $0x10,%edx
		sub    %edi,%eax
		sub    %ebx,%edx
		mov    %eax,%edi
		mov    %edx,%ebx
		call   ac_arctan
		xor    %edx,%edx
		mov    %ax,%dx
		mov    0x64(%esi),%eax
		sar    $0x10,%eax
		sub    %eax,%edx
		mov    %edx,%eax
		cmp    $0x400,%edx
		jle    jump_7715c
		lea    -0x7ff(%edx),%eax
	jump_7715c:
		cmp    $0xfffffc00,%eax
		jge    jump_77168
		add    $0x7ff,%eax
	jump_77168:
		sar    %eax
		mov    %ax,0x62(%esi)
		mov    0x60(%esi),%eax
		sar    $0x10,%eax
		cmp    $0x12c,%eax
		jle    jump_77183
		movw   $0x12c,0x62(%esi)
		jmp    jump_77190
	jump_77183:
		cmp    $0xfffffed4,%eax
		jge    jump_77190
		movw   $0xfed4,0x62(%esi)
	jump_77190:
		imul   %edi,%edi
		imul   %ebx,%ebx
		mov    0x60(%esi),%eax
		sar    $0x10,%eax
		mov    $0x1f4,%ecx
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		add    %eax,%eax
		sub    %eax,%ecx
		mov    0x60(%esi),%eax
		sar    $0x10,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		sub    %eax,%ecx
		xor    %eax,%eax
		add    %edi,%ebx
		mov    0xa(%esi),%ax
		mov    %cx,0x5a(%esi)
		cmp    $0x33,%eax
		jne    jump_77225
		mov    0x60(%esi),%eax
		sar    $0x10,%eax
		movw   $0x0,0x5a(%esi)
		test   %eax,%eax
		jle    jump_771dd
		subw   $0x8,0x62(%esi)
	jump_771dd:
		mov    0x60(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_771ec
		addw   $0x8,0x62(%esi)
	jump_771ec:
		mov    0x60(%esi),%eax
		sar    $0x10,%eax
		cmp    $0x8,%eax
		setle  %al
		and    $0xff,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		test   %eax,%eax
		je     jump_7720c
		movw   $0x0,0x62(%esi)
	jump_7720c:
		mov    0x36(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_7729c
		movw   $0x21,0xa(%esi)
		jmp    jump_7729c
	jump_77225:
		cmp    $0x30000,%ebx
		jge    jump_7729c
		mov    %esi,%eax
		call   do_next_navigate_index
		test   %al,%al
		je     jump_77246
		movw   $0x0,0x4c(%esi)
		movw   $0x33,0xa(%esi)
		jmp    jump_7729c
	jump_77246:
		mov    0x4a(%esi),%ebx
		sar    $0x10,%ebx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		mov    0x3e(%esi),%dl
		shl    $0x2,%eax
		and    $0x3,%dl
		sub    %ebx,%eax
		mov    0x4a(%esi),%ebx
		and    $0xff,%edx
		sar    $0x10,%ebx
		mov    data_1777cd(%eax,%edx,2),%ax
		lea    0x0(,%ebx,4),%edx
		mov    %ax,0x6a(%esi)
		add    %ebx,%edx
		mov    0x3e(%esi),%al
		shl    $0x2,%edx
		and    $0x3,%al
		sub    %ebx,%edx
		and    $0xff,%eax
		mov    data_1777d5(%edx,%eax,2),%ax
		mov    %ax,0x6e(%esi)
	jump_7729c:
		mov    %esi,%eax
		call   check_tank_collision
		mov    0x38(%esi),%ax
		cmp    0x5a(%esi),%ax
		jge    jump_772b6
		add    $0xc,%eax
		mov    %ax,0x38(%esi)
	jump_772b6:
		mov    0x38(%esi),%ax
		cmp    0x5a(%esi),%ax
		jle    jump_772c9
		mov    %eax,%ebx
		sub    $0x26,%ebx
		mov    %bx,0x38(%esi)
	jump_772c9:
		mov    0x60(%esi),%edx
		mov    0x64(%esi),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		sar    $0x3,%edx
		mov    $EXPORT_SYMBOL(local_mats),%edi
		add    %edx,%eax
		mov    0x52(%esi),%edx
		mov    %ax,0x66(%esi)
		sar    $0x10,%edx
		mov    0x67(%esi),%bh
		lea    0x0(,%edx,8),%eax
		and    $0x7,%bh
		add    %edx,%eax
		mov    %bh,0x67(%esi)
		xor    %ebx,%ebx
		shl    $0x2,%eax
		mov    0x94(%esi),%bx
		add    %eax,%edi
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    things,%ebx
		shl    $0x3,%eax
		add    %eax,%ebx
		mov    0x52(%ebx),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,8),%eax
		mov    $EXPORT_SYMBOL(local_mats),%ecx
		add    %edx,%eax
		mov    0x64(%ebx),%edx
		shl    $0x2,%eax
		sar    $0x10,%edx
		add    %eax,%ecx
		xor    %ebx,%ebx
		xor    %eax,%eax
		call   rotate_obj
		mov    0x66(%esi),%ax
		mov    %edi,%ecx
		neg    %eax
		xor    %ebx,%ebx
		movswl %ax,%edx
		xor    %eax,%eax
		call   rotate_obj
		mov    0x8(%edi),%eax
		mov    0x36(%esi),%edx
		neg    %eax
		sar    $0x10,%edx
		imul   %edx,%eax
		sar    $0xa,%eax
		mov    %eax,0x2c(%esi)
		mov    0x14(%edi),%edx
		mov    0x36(%esi),%eax
		neg    %edx
		sar    $0x10,%eax
		imul   %edx,%eax
		sar    $0xa,%eax
		mov    %eax,0x30(%esi)
		mov    0x20(%edi),%edx
		mov    0x36(%esi),%eax
		neg    %edx
		sar    $0x10,%eax
		imul   %edx,%eax
		sar    $0xa,%eax
		mov    %eax,0x34(%esi)
		mov    0x2c(%esi),%edx
		mov    0x18(%esi),%eax
		add    %edx,%eax
		mov    %eax,(%esp)
		mov    0x20(%esi),%eax
		mov    0x34(%esi),%edi
		mov    0x1c(%esi),%ebx
		add    %edi,%eax
		mov    0x30(%esi),%ecx
		mov    %eax,0x4(%esp)
		mov    0x20(%esi),%eax
		mov    0x18(%esi),%edx
		sar    $0x10,%eax
		sar    $0x10,%edx
		shl    $0x7,%eax
		add    %eax,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0xf(%edx,%eax,2),%al
		add    %ecx,%ebx
		test   $0x5,%al
		je     jump_773ee
		test   $0x8,%al
		jne    jump_773ee
		mov    %esi,%eax
		call   ac_init_vehicle_explode
		jmp    jump_7742a
	jump_773ee:
		mov    0x4(%esp),%eax
		mov    (%esp),%edx
		sar    $0x10,%eax
		sar    $0x10,%edx
		shl    $0x7,%eax
		add    %eax,%edx
		lea    0x0(,%edx,8),%eax
		add    %eax,%edx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %edx,%edx
		mov    0xf(%edx,%eax,1),%al
		test   $0x5,%al
		je     jump_7741c
		test   $0x8,%al
		je     jump_7742a
	jump_7741c:
		mov    0x4(%esp),%ecx
		mov    (%esp),%edx
		mov    %esi,%eax
		call   ac_move_mapwho
	jump_7742a:
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_stop_as_soon_as_you_can)	/* 0x077434 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		mov    %eax,%ebx
		mov    0x88(%eax),%eax
		mov    0x88(%ebx),%ecx
		mov    0x60(%ebx),%edx
		sar    $0x10,%eax
		sar    $0x6,%ecx
		sar    $0x10,%edx
		and    $0x3,%ecx
		cmp    $0x14,%edx
		jge    jump_7757c
		mov    0x5e(%ebx),%esi
		sar    $0x10,%esi
		test   %esi,%esi
		jge    jump_7757c
		test   %eax,%eax
		jge    jump_7757c
		neg    %eax
		mov    %eax,%edi
		shl    $0x3,%eax
		add    %edi,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edi
		shl    $0x2,%eax
		add    %edi,%eax
		testb  $0x80,0x13(%eax)
		jne    jump_7757c
		testb  $0x40,0xe(%ecx,%eax,1)
		jne    jump_7757c
		mov    %esi,%ecx
		neg    %ecx
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		movswl (%edi,%eax,4),%esi
		mov    0x2(%edi,%eax,4),%ebp
		mov    0x20(%ebx),%ecx
		sar    $0x10,%ebp
		mov    0x18(%ebx),%edi
		sar    $0x8,%ecx
		sar    $0x8,%edi
		mov    %ebp,%edx
		sub    %edi,%esi
		sub    %ecx,%edx
		mov    %esi,%eax
		mov    %esi,%edi
		call   ac_arctan
		and    $0xffff,%eax
		mov    %eax,%edx
		mov    %eax,0x8c(%ebx)
		shl    $0x10,%edx
		mov    %edx,0x8c(%ebx)
		mov    0x8c(%ebx),%al
		or     $0x11,%al
		sub    %ebp,%ecx
		mov    %al,0x8c(%ebx)
		mov    %ecx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebp
		mov    %esi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%ebp
		jle    jump_77522
		mov    %esi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%edi
		mov    %ecx,%eax
		sar    %edi
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		add    %eax,%edi
		jmp    jump_77537
	jump_77522:
		mov    %ecx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebp
		mov    %esi,%eax
		sar    %ebp
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		lea    (%eax,%ebp,1),%edi
	jump_77537:
		shl    $0x5,%ecx
		shl    $0x5,%esi
		test   %edi,%edi
		je     jump_77557
		mov    %ecx,%edx
		mov    %ecx,%eax
		sar    $0x1f,%edx
		idiv   %edi
		mov    %eax,%ecx
		mov    %esi,%edx
		mov    %esi,%eax
		sar    $0x1f,%edx
		idiv   %edi
		mov    %eax,%esi
	jump_77557:
		and    $0xffff,%esi
		mov    %ecx,0x90(%ebx)
		shl    $0x10,%ecx
		movw   $0x36,0xa(%ebx)
		mov    %ecx,%edi
		mov    %ecx,0x90(%ebx)
		or     %esi,%edi
		mov    %edi,0x90(%ebx)
	jump_7757c:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_alt_at_point_under_height)	/* 0x077624 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    %eax,(%esp)
		mov    %ebx,%ecx
		mov    %edx,%eax
		lea    0x0(,%ebx,8),%ecx
		sar    $0x8,%eax
		mov    (%esp),%ebx
		shl    $0x7,%eax
		sar    $0x8,%ebx
		add    %eax,%ebx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%ebx
		mov    0x10(%ebx,%eax,2),%ax
		xor    %edi,%edi
		and    $0xf,%ah
		mov    %ax,%di
		testb  $0x80,(%esp)
		je     jump_7767c
		test   $0x80,%dl
		je     jump_77675
		mov    $0x2,%ebx
		jmp    jump_7768a
	jump_77675:
		mov    $0x1,%ebx
		jmp    jump_7768a
	jump_7767c:
		test   $0x80,%dl
		je     jump_77688
		mov    $0x3,%ebx
		jmp    jump_7768a
	jump_77688:
		xor    %ebx,%ebx
	jump_7768a:
		mov    -0x2(%esp),%eax
		movswl %dx,%edx
		sar    $0x10,%eax
		call   ac_alt_at_point
		shl    $0x3,%eax
		mov    %eax,%esi
		test   %edi,%edi
		jne    jump_776a4
		jmp    jump_776d6
	jump_776a4:
		mov    $0x1,%edx
		shl    $0x2,%ebx
		shl    $0x4,%edi
		mov    %ebx,0x4(%esp)
	jump_776b3:
		cmp    %ecx,%eax
		jg     jump_776d6
		mov    game_col_columns,%ebx
		mov    0x4(%esp),%ebp
		add    %edi,%ebx
		add    %ebp,%ebx
		test   %edx,(%ebx)
		je     jump_776cb
		mov    %eax,%esi
	jump_776cb:
		add    %edx,%edx
		add    $0x8000,%eax
		test   %edx,%edx
		jne    jump_776b3
	jump_776d6:
		mov    %esi,%eax
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
flying_alt:	/* 0x077770 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x1c,%esp
		mov    things,%esi
		mov    EXPORT_SYMBOL(sthings),%edi
		mov    %eax,%ecx
		mov    0x18(%eax),%ebx
		mov    0x20(%eax),%eax
		mov    $0x32000,%edx
		sar    $0x10,%eax
		sar    $0x10,%ebx
		mov    %eax,0xc(%esp)
		test   %ebx,%ebx
		jl     jump_778c4
		cmp    $0x80,%ebx
		jge    jump_778c4
		test   %eax,%eax
		jl     jump_778c4
		cmp    $0x80,%eax
		jge    jump_778c4
		shl    $0x7,%eax
		add    %ebx,%eax
		mov    %eax,0x4(%esp)
		mov    0x4(%esp),%ebp
		shl    $0x3,%eax
		add    %ebp,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%ebp
		add    %eax,%eax
		add    %ebp,%eax
		testw  $0xfff,0x10(%eax)
		jne    jump_777f8
		testb  $0x8,0xf(%eax)
		jne    jump_777f8
		mov    0x4(%eax),%eax
		sar    $0x10,%eax
		shl    $0xb,%eax
		add    %eax,%edx
	jump_777f8:
		lea    -0x2(%ebx),%eax
		add    $0x3,%ebx
		mov    %eax,(%esp)
		mov    %ebx,0x8(%esp)
		xor    %ebp,%ebp
		jmp    jump_7781c
	jump_77809:
		mov    (%esp),%eax
		inc    %eax
		mov    0x8(%esp),%ebx
		mov    %eax,(%esp)
		cmp    %ebx,%eax
		je     jump_778c4
	jump_7781c:
		mov    (%esp),%eax
		mov    %eax,0x14(%esp)
		mov    0xc(%esp),%eax
		sub    $0x2,%eax
		mov    %eax,0x18(%esp)
		mov    0xc(%esp),%eax
		add    $0x3,%eax
		mov    %eax,0x10(%esp)
		jmp    jump_77886
	jump_7783b:
		xor    %ebx,%ebx
		mov    0x8(%eax),%bl
		cmp    $0x32,%ebx
		jne    jump_77862
		cmp    %ecx,%eax
		jae    jump_77862
		add    $0x1a000,%edx
		jmp    jump_77862
	jump_77851:
		imul   $0xa8,%eax,%ebx
		lea    (%esi,%ebx,1),%eax
		mov    0x9(%eax),%bl
		cmp    $0x2,%bl
		je     jump_7783b
	jump_77862:
		mov    (%eax),%eax
		jmp    jump_7786e
	jump_77866:
		imul   $0x3c,%eax,%eax
		mov    %edi,%ebx
		mov    (%ebx,%eax,1),%eax
	jump_7786e:
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_778c0
	jump_77875:
		mov    0x18(%esp),%eax
		inc    %eax
		mov    0x10(%esp),%ebx
		mov    %eax,0x18(%esp)
		cmp    %ebx,%eax
		je     jump_77809
	jump_77886:
		mov    0x14(%esp),%eax
		cmp    %eax,%ebp
		jge    jump_77875
		cmp    $0x80,%eax
		jge    jump_77875
		mov    0x18(%esp),%eax
		cmp    %eax,%ebp
		jge    jump_77875
		cmp    $0x80,%eax
		jge    jump_77875
		mov    0x14(%esp),%ebx
		shl    $0x7,%eax
		add    %ebx,%eax
		imul   $0x12,%eax,%ebx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		mov    0x6(%ebx,%eax,1),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		je     jump_77875
	jump_778c0:
		jg     jump_77851
		jmp    jump_77866
	jump_778c4:
		mov    %edx,%eax
		mov    %edi,EXPORT_SYMBOL(sthings)
		mov    %esi,things
		add    $0x1c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_parked_flyer)	/* 0x0778DC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		mov    %eax,%ebx
		xor    %eax,%eax
		mov    0x5c(%ebx),%ax
		test   %eax,%eax
		jne    jump_77910
		mov    0x20(%ebx),%eax
		sar    $0x8,%eax
		movswl %ax,%edx
		mov    0x18(%ebx),%eax
		sar    $0x8,%eax
		cwtl
		call   ac_alt_at_point
		add    $0xbb8,%eax
		movw   $0x1,0x5c(%ebx)
		mov    %eax,0x1c(%ebx)
		pop    %edx
		pop    %ebx
		ret
	jump_77910:
		xor    %edx,%edx
		mov    %ax,%dx
		inc    %eax
		mov    %ax,0x5c(%ebx)
		mov    quiver-3(%edx),%eax
		sar    $0x18,%eax
		mov    0x1c(%ebx),%edx
		shl    $0x4,%eax
		add    %eax,%edx
		xor    %eax,%eax
		mov    0x5c(%ebx),%ax
		mov    %edx,0x1c(%ebx)
		mov    quiver-3(%eax),%eax
		sar    $0x18,%eax
		cmp    $0x63,%eax
		jne    jump_77947
		subw   $0x1a,0x5c(%ebx)
	jump_77947:
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_hovering_vehicle)	/* 0x07794C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    %eax,%ebx
		movw   $0x0,0x5a(%eax)
		movw   $0x0,0x62(%eax)
		call   flying_alt
		mov    %eax,%ecx
		mov    0x1c(%ebx),%eax
		sub    %ecx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0x6000,%eax
		jge    jump_7799b
		mov    0x5c(%ebx),%cx
		xor    %eax,%eax
		mov    %cx,%ax
		inc    %ecx
		mov    %cx,0x5c(%ebx)
		mov    quiver-3(%eax),%eax
		sar    $0x18,%eax
		mov    0x1c(%ebx),%edi
		shl    $0x7,%eax
		add    %eax,%edi
		mov    %edi,0x1c(%ebx)
		jmp    jump_779a9
	jump_7799b:
		mov    0x1c(%ebx),%edx
		sub    %edx,%ecx
		sar    $0x3,%ecx
		lea    (%edx,%ecx,1),%esi
		mov    %esi,0x1c(%ebx)
	jump_779a9:
		xor    %eax,%eax
		mov    0x5c(%ebx),%ax
		mov    quiver-3(%eax),%eax
		sar    $0x18,%eax
		cmp    $0x63,%eax
		jne    jump_779c2
		subw   $0x1a,0x5c(%ebx)
	jump_779c2:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_my_takeoff)	/* 0x0779C8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    %eax,%ebx
		call   flying_alt
		mov    %eax,%esi
		mov    0x18(%ebx),%ecx
		mov    0x20(%ebx),%edx
		mov    0x68(%ebx),%edi
		mov    0x6c(%ebx),%ebp
		sar    $0x8,%ecx
		sar    $0x8,%edx
		sar    $0x10,%ebp
		sar    %eax
		mov    %ebp,(%esp)
		mov    0x1c(%ebx),%ebp
		sar    $0x10,%edi
		cmp    %ebp,%eax
		jge    jump_77a70
		mov    %edi,%eax
		sub    %ecx,%eax
		mov    (%esp),%ecx
		sub    %edx,%ecx
		mov    %ecx,%edx
		xor    %edi,%edi
		call   ac_arctan
		mov    0x64(%ebx),%ecx
		mov    %ax,%di
		sar    $0x10,%ecx
		mov    %edi,%eax
		sub    %ecx,%eax
		mov    %eax,%ecx
		cmp    $0x400,%eax
		jle    jump_77a30
		lea    -0x7ff(%eax),%ecx
	jump_77a30:
		cmp    $0xfffffc00,%ecx
		jge    jump_77a3e
		add    $0x7ff,%ecx
	jump_77a3e:
		mov    %ecx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0xf,%eax
		jge    jump_77a56
		movw   $0x0,0x62(%ebx)
		mov    %di,0x66(%ebx)
		jmp    jump_77a70
	jump_77a56:
		mov    %cx,0x62(%ebx)
		test   %ecx,%ecx
		jle    jump_77a67
		mov    %ecx,%edx
		add    $0xa,%edx
		mov    %dx,0x62(%ebx)
	jump_77a67:
		test   %ecx,%ecx
		jge    jump_77a70
		subw   $0xa,0x62(%ebx)
	jump_77a70:
		mov    %esi,%ecx
		sub    0x1c(%ebx),%ecx
		sar    $0x3,%ecx
		cmp    $0x3e8,%ecx
		jge    jump_77a85
		mov    $0x3e8,%ecx
	jump_77a85:
		cmp    $0x2710,%ecx
		jle    jump_77a92
		mov    $0x2710,%ecx
	jump_77a92:
		mov    0x5e(%ebx),%eax
		sar    $0x10,%eax
		cmp    %ecx,%eax
		jge    jump_77aa2
		addw   $0x3e8,0x60(%ebx)
	jump_77aa2:
		mov    0x5e(%ebx),%eax
		sar    $0x10,%eax
		cmp    %ecx,%eax
		jle    jump_77ab2
		subw   $0x3e8,0x60(%ebx)
	jump_77ab2:
		mov    0x5e(%ebx),%eax
		mov    0x1c(%ebx),%edx
		sar    $0x10,%eax
		add    %eax,%edx
		mov    %esi,%eax
		sub    %edx,%eax
		mov    %edx,0x1c(%ebx)
		cmp    $0xfa0,%eax
		jge    jump_77aec
		xor    %eax,%eax
		mov    0xa(%ebx),%ax
		cmp    $0x44,%eax
		jne    jump_77ade
		movw   $0x42,0xa(%ebx)
		jmp    jump_77ae4
	jump_77ade:
		movw   $0x3a,0xa(%ebx)
	jump_77ae4:
		movw   $0x0,0x62(%ebx)
		jmp    jump_77b18
	jump_77aec:
		mov    %esi,%eax
		sar    $0x4,%eax
		sub    %eax,%esi
		cmp    %edx,%esi
		jge    jump_77b12
		mov    0x60(%ebx),%eax
		sar    $0x10,%eax
		cmp    $0xf,%eax
		jge    jump_77b12
		movw   $0x3e8,0x5a(%ebx)
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_77b12:
		movw   $0x0,0x5a(%ebx)
	jump_77b18:
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_my_flying_vehicle)	/* 0x077B24 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		mov    %eax,%ebx
		mov    $0x1,%edx
		call   ac_unkn_path_func_001
		mov    %ebx,%eax
		call   flying_alt
		mov    0x1c(%ebx),%edx
		cmp    %edx,%eax
		jle    jump_77b54
		sub    %edx,%eax
		sar    $0x2,%eax
		lea    (%edx,%eax,1),%ebp
		mov    %ebp,0x1c(%ebx)
		jmp    jump_77b5f
	jump_77b54:
		sub    %edx,%eax
		sar    $0x4,%eax
		lea    (%edx,%eax,1),%esi
		mov    %esi,0x1c(%ebx)
	jump_77b5f:
		mov    0x18(%ebx),%eax
		mov    0x68(%ebx),%edi
		sar    $0x8,%eax
		sar    $0x10,%edi
		mov    0x20(%ebx),%esi
		sub    %eax,%edi
		mov    0x6c(%ebx),%eax
		sar    $0x8,%esi
		sar    $0x10,%eax
		sub    %esi,%eax
		mov    %eax,%esi
		mov    %eax,%edx
		mov    %edi,%eax
		call   ac_arctan
		mov    0x64(%ebx),%ecx
		and    $0xffff,%eax
		sar    $0x10,%ecx
		mov    %eax,0x8(%esp)
		sub    %ecx,%eax
		mov    %eax,%ecx
		cmp    $0x400,%eax
		jle    jump_77ba6
		lea    -0x7ff(%eax),%ecx
	jump_77ba6:
		cmp    $0xfffffc00,%ecx
		jge    jump_77bb4
		add    $0x7ff,%ecx
	jump_77bb4:
		mov    %ecx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0xf,%eax
		jge    jump_77bd0
		mov    0x8(%esp),%eax
		movw   $0x0,0x62(%ebx)
		mov    %ax,0x66(%ebx)
		jmp    jump_77bea
	jump_77bd0:
		mov    %cx,0x62(%ebx)
		test   %ecx,%ecx
		jle    jump_77be1
		mov    %ecx,%edx
		add    $0xa,%edx
		mov    %dx,0x62(%ebx)
	jump_77be1:
		test   %ecx,%ecx
		jge    jump_77bea
		subw   $0xa,0x62(%ebx)
	jump_77bea:
		imul   %edi,%edi
		mov    %esi,%eax
		imul   %esi,%eax
		add    %edi,%eax
		cmp    $0x40000,%eax
		jge    jump_77d50
		xor    %eax,%eax
		mov    0xa(%ebx),%ax
		cmp    $0x43,%eax
		jne    jump_77c16
		mov    %ebx,%eax
		call   continue_flying_wander
		jmp    jump_77d50
	jump_77c16:
		mov    %ebx,%eax
		call   do_next_navigate_index
		test   %al,%al
		je     jump_77cfc
		xor    %eax,%eax
		mov    0xa(%ebx),%ax
		cmp    $0x42,%eax
		jne    jump_77cd6
		mov    $0x800000,%eax
		mov    0x18(%ebx),%ecx
		sub    %ecx,%eax
		mov    %eax,(%esp)
		mov    $0x800000,%esi
		mov    0x20(%ebx),%eax
		sub    %eax,%esi
		mov    (%esp),%edx
		mov    %esi,0x4(%esp)
		cmp    %edx,%ecx
		jge    jump_77c5a
		mov    %ecx,%esi
		jmp    jump_77c5c
	jump_77c5a:
		mov    %edx,%esi
	jump_77c5c:
		mov    0x4(%esp),%edi
		cmp    %edi,%eax
		jge    jump_77c66
		mov    %eax,%edi
	jump_77c66:
		cmp    %edi,%esi
		jge    jump_77c79
		mov    (%esp),%edx
		cmp    %edx,%ecx
		jge    jump_77c75
		mov    %ecx,%esi
		jmp    jump_77c91
	jump_77c75:
		mov    %edx,%esi
		jmp    jump_77c91
	jump_77c79:
		mov    0x4(%esp),%ebp
		cmp    %ebp,%eax
		jge    jump_77c8f
		mov    %eax,%esi
		cmp    %esi,%ecx
		jne    jump_77c9d
		movw   $0x1,0x6a(%ebx)
		jmp    jump_77cce
	jump_77c8f:
		mov    %ebp,%esi
	jump_77c91:
		cmp    %esi,%ecx
		jne    jump_77c9d
		movw   $0x1,0x6a(%ebx)
		jmp    jump_77cce
	jump_77c9d:
		cmp    (%esp),%esi
		jne    jump_77cb3
		movw   $0x7e00,0x6a(%ebx)
		movw   $0x43,0xa(%ebx)
		jmp    jump_77d50
	jump_77cb3:
		cmp    %esi,%eax
		jne    jump_77cc8
		movw   $0x1,0x6e(%ebx)
		movw   $0x43,0xa(%ebx)
		jmp    jump_77d50
	jump_77cc8:
		movw   $0x7e00,0x6e(%ebx)
	jump_77cce:
		movw   $0x43,0xa(%ebx)
		jmp    jump_77d50
	jump_77cd6:
		movw   $0x0,0x4c(%ebx)
		movw   $0x41,0xa(%ebx)
		movw   $0x0,0x60(%ebx)
		movw   $0x0,0x5a(%ebx)
		movw   $0x0,0x62(%ebx)
		movw   $0x0,0x5c(%ebx)
		jmp    jump_77d50
	jump_77cfc:
		mov    0x4a(%ebx),%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,4),%ecx
		add    %eax,%ecx
		shl    $0x2,%ecx
		sub    %eax,%ecx
		mov    0x3e(%ebx),%al
		and    $0x3,%al
		and    $0xff,%eax
		mov    data_1777cd(%ecx,%eax,2),%ax
		mov    %ax,0x6a(%ebx)
		mov    0x4a(%ebx),%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,4),%ecx
		add    %eax,%ecx
		shl    $0x2,%ecx
		sub    %eax,%ecx
		mov    0x3e(%ebx),%al
		and    $0x3,%al
		and    $0xff,%eax
		mov    data_1777d5(%ecx,%eax,2),%ax
		mov    %ax,0x6e(%ebx)
	jump_77d50:
		mov    0x60(%ebx),%eax
		sar    $0x10,%eax
		shl    $0x2,%eax
		mov    $0x7d0,%ecx
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		sub    %eax,%ecx
		mov    %cx,0x5a(%ebx)
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_my_land_vehicle)	/* 0x077D74 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		mov    %eax,%ebx
		movw   $0x0,0x5a(%eax)
		mov    0x20(%eax),%eax
		sar    $0x8,%eax
		movswl %ax,%edx
		mov    0x18(%ebx),%eax
		sar    $0x8,%eax
		cwtl
		call   ac_alt_at_point
		lea    0x0(,%eax,8),%ecx
		add    $0x5dc0,%ecx
		mov    0x1c(%ebx),%edx
		mov    %ecx,%eax
		sub    %edx,%eax
		sar    $0x3,%eax
		cmp    $0xfffffe0c,%eax
		jle    jump_77db8
		mov    $0xfffffe0c,%eax
	jump_77db8:
		cmp    $0xffffd8f0,%eax
		jge    jump_77dc4
		mov    $0xffffd8f0,%eax
	jump_77dc4:
		mov    0x5e(%ebx),%edx
		sar    $0x10,%edx
		cmp    %eax,%edx
		jge    jump_77dd4
		addw   $0x5dc,0x60(%ebx)
	jump_77dd4:
		mov    0x5e(%ebx),%edx
		sar    $0x10,%edx
		cmp    %eax,%edx
		jle    jump_77de4
		subw   $0x5dc,0x60(%ebx)
	jump_77de4:
		mov    0x5e(%ebx),%eax
		mov    0x1c(%ebx),%esi
		sar    $0x10,%eax
		add    %eax,%esi
		mov    0x60(%ebx),%eax
		sar    $0x10,%eax
		mov    %eax,%edx
		sar    $0x3,%edx
		sub    %edx,%eax
		mov    %ax,0x62(%ebx)
		mov    0x60(%ebx),%eax
		sar    $0x10,%eax
		mov    %esi,0x1c(%ebx)
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0x8,%eax
		jge    jump_77e19
		movw   $0x0,0x62(%ebx)
	jump_77e19:
		cmp    0x1c(%ebx),%ecx
		jle    jump_77e2a
		movw   $0x21,0xa(%ebx)
		movw   $0x0,0x5c(%ebx)
	jump_77e2a:
		mov    $0x499602d2,%eax
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_my_crashing_vehicle)	/* 0x077E34 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		mov    %eax,%esi
		call   ac_LbRandomAnyShort
		test   $0xf,%al
		jne    jump_77f33
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		mov    0x64(%esi),%dx
		and    $0x7f,%al
		sub    %eax,%edx
		mov    %edx,%ebx
		xor    %eax,%eax
		mov    %dx,0x64(%esi)
		add    $0x3f,%ebx
		mov    0x8(%esi),%al
		mov    %bx,0x64(%esi)
		cmp    $0x28,%eax
		je     jump_77ec7
		mov    0x30(%esi),%edx
		mov    0x1c(%esi),%ebx
		add    $0x400,%edx
		add    $0x2000,%ebx
		mov    %edx,0x30(%esi)
		mov    %ebx,0x1c(%esi)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		mov    0x66(%esi),%bx
		and    $0x7f,%al
		sub    %eax,%ebx
		mov    %bx,0x66(%esi)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		mov    0x68(%esi),%cx
		and    $0x7f,%al
		sub    %eax,%ecx
		mov    0x66(%esi),%di
		mov    %cx,0x68(%esi)
		add    $0x3f,%edi
		mov    0x68(%esi),%ax
		mov    %di,0x66(%esi)
		add    $0x3f,%eax
		mov    %ax,0x68(%esi)
		jmp    jump_77f05
	jump_77ec7:
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		mov    0x66(%esi),%cx
		and    $0x3f,%al
		sub    %eax,%ecx
		mov    %cx,0x66(%esi)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		mov    0x68(%esi),%di
		and    $0x3f,%al
		sub    %eax,%edi
		mov    %di,0x68(%esi)
		mov    0x66(%esi),%ax
		mov    0x68(%esi),%dx
		add    $0x1f,%eax
		add    $0x1f,%edx
		mov    %ax,0x66(%esi)
		mov    %dx,0x68(%esi)
	jump_77f05:
		call   ac_LbRandomAnyShort
		mov    0x20(%esi),%ecx
		xor    %ebx,%ebx
		mov    0x1c(%esi),%edx
		mov    %ax,%bx
		sar    $0x3,%edx
		call   ac_LbRandomAnyShort
		add    %ecx,%ebx
		and    $0xffff,%eax
		mov    0x18(%esi),%edi
		mov    $0x64,%ecx
		add    %edi,%eax
		call   ac_bang_new4
	jump_77f33:
		testb  $0x1,gameturn
		je     jump_77f52
		mov    $0x35,%ecx
		mov    0x20(%esi),%ebx
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		sar    $0x3,%edx
		call   ac_bang_new4
	jump_77f52:
		mov    0x64(%esi),%dx
		xor    %eax,%eax
		add    $0x5,%edx
		mov    0x8(%esi),%al
		mov    %dx,0x64(%esi)
		cmp    $0x28,%eax
		je     jump_77f7f
		mov    0x30(%esi),%eax
		sub    $0x110,%eax
		mov    %eax,0x30(%esi)
		mov    %eax,%edx
		mov    0x66(%esi),%eax
		sar    $0x7,%edx
		sar    $0x10,%eax
		jmp    jump_77f96
	jump_77f7f:
		mov    0x30(%esi),%ebp
		sub    $0x80,%ebp
		mov    0x66(%esi),%eax
		mov    %ebp,%edx
		sar    $0x10,%eax
		sar    $0x8,%edx
		mov    %ebp,0x30(%esi)
	jump_77f96:
		sub    %edx,%eax
		mov    %ax,0x68(%esi)
		mov    0x62(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_77fac
		movw   $0x0,0x64(%esi)
	jump_77fac:
		mov    0x64(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_77fbc
		movw   $0x0,0x66(%esi)
	jump_77fbc:
		mov    0x66(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_77fcc
		movw   $0x0,0x68(%esi)
	jump_77fcc:
		andb   $0x7,0x65(%esi)
		mov    0x69(%esi),%dh
		and    $0x7,%dh
		mov    0x20(%esi),%eax
		mov    %dh,0x69(%esi)
		sar    $0x10,%eax
		mov    0x18(%esi),%edx
		shl    $0x7,%eax
		sar    $0x10,%edx
		add    %eax,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edi
		add    %eax,%eax
		add    %eax,%edi
		xor    %eax,%eax
		mov    0x8(%esi),%al
		cmp    $0x28,%eax
		jne    jump_78039
		testb  $0x1,gameturn
		je     jump_78039
		mov    0x20(%esi),%ebx
		mov    %ebx,%eax
		sar    $0x8,%eax
		movswl %ax,%edx
		mov    0x18(%esi),%eax
		sar    $0x8,%eax
		cwtl
		call   ac_alt_at_point
		mov    %eax,%edx
		mov    $0x5,%ecx
		sar    $0x5,%edx
		mov    0x18(%esi),%eax
		call   FIRE_new
	jump_78039:
		xor    %eax,%eax
		mov    0x8(%esi),%al
		cmp    $0x32,%eax
		jne    jump_7807b
		xor    %edx,%edx
		mov    0x14(%esi),%dx
		lea    0x0(,%edx,4),%ebx
		sub    %edx,%ebx
		mov    0x20(%esi),%eax
		shl    $0x6,%ebx
		sar    $0x8,%eax
		add    %edx,%ebx
		movswl %ax,%edx
		mov    0x18(%esi),%eax
		sar    $0x8,%eax
		add    %ebx,%ebx
		cwtl
		sar    $0x5,%ebx
		call   ac_alt_at_point
		add    %ebx,%eax
		shl    $0x3,%eax
		cmp    0x1c(%esi),%eax
		jmp    jump_7809d
	jump_7807b:
		mov    0x20(%esi),%eax
		sar    $0x8,%eax
		movswl %ax,%edx
		mov    0x18(%esi),%eax
		sar    $0x8,%eax
		cwtl
		call   ac_alt_at_point
		shl    $0x3,%eax
		mov    0x1c(%esi),%edx
		add    $0x320,%eax
		cmp    %edx,%eax
	jump_7809d:
		setg   %al
		and    $0xff,%eax
		jne    jump_780f3
		mov    0x18(%esi),%ecx
		cmp    $0x10000,%ecx
		jl     jump_780f3
		mov    0x20(%esi),%ebp
		cmp    $0x10000,%ebp
		jl     jump_780f3
		cmp    $0x7e0000,%ecx
		jg     jump_780f3
		cmp    $0x7e0000,%ebp
		jg     jump_780f3
		testw  $0xfff,-0x2(%edi)
		jne    jump_780f3
		testw  $0xfff,0x22(%edi)
		jne    jump_780f3
		testw  $0xfff,-0x8f0(%edi)
		jne    jump_780f3
		testw  $0xfff,0x910(%edi)
		je     jump_78110
	jump_780f3:
		mov    0x1c(%esi),%ebx
		sar    $0x3,%ebx
		mov    %esi,%eax
		mov    %ebx,0x1c(%esi)
		call   ac_init_vehicle_explode
		mov    0x1c(%esi),%ecx
		shl    $0x3,%ecx
		xor    %eax,%eax
		mov    %ecx,0x1c(%esi)
		jmp    jump_78115
	jump_78110:
		mov    $0x2a,%eax
	jump_78115:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_start_crashing)	/* 0x07811C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		xor    %edx,%edx
		mov    0x8(%eax),%dl
		cmp    $0x3b,%edx
		jne    jump_7813f
		mov    0xc(%eax),%cl
		movw   $0xd,0xa(%eax)
		or     $0x2,%cl
		mov    %cl,0xc(%eax)
		call   init_mech_explode
		jmp    jump_781ad
	jump_7813f:
		xor    %edx,%edx
		mov    0xa(%eax),%dx
		cmp    $0x45,%edx
		je     jump_781ad
		orb    $0x2,0xc(%eax)
		xor    %edx,%edx
		mov    0x8(%eax),%dl
		movw   $0x45,0xa(%eax)
		cmp    $0x1d,%edx
		jne    jump_78187
		mov    0x5e(%eax),%ebx
		sar    $0x10,%ebx
		lea    0x0(,%ebx,4),%edx
		add    %ebx,%edx
		shl    $0x2,%edx
		add    %ebx,%edx
		mov    things,%ebx
		shl    $0x3,%edx
		add    %ebx,%edx
		testb  $0x2,0xc(%edx)
		jne    jump_78187
		orb    $0x4,0xe(%edx)
	jump_78187:
		mov    0x36(%eax),%edx
		sar    $0x10,%edx
		movl   $0x0,0x30(%eax)
		sar    %edx
		mov    %dx,0x5a(%eax)
		mov    $0x5f,%ecx
		mov    0x20(%eax),%ebx
		mov    0x1c(%eax),%edx
		mov    0x18(%eax),%eax
		call   ac_bang_new4
	jump_781ad:
		mov    $0x2a,%eax
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_start_landing)	/* 0x078240 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		mov    %eax,%ebx
		xor    %eax,%eax
		mov    0xa(%ebx),%ax
		cmp    $0x3b,%eax
		jne    jump_78254
		xor    %eax,%eax
		pop    %edx
		pop    %ebx
		ret
	jump_78254:
		mov    0x20(%ebx),%edx
		mov    0x18(%ebx),%eax
		call   is_this_a_nice_place_for_a_picnic
		test   %eax,%eax
		je     jump_7827a
		movw   $0x0,0x4c(%ebx)
		movw   $0x3b,0xa(%ebx)
		mov    $0x1,%eax
		movw   $0x0,0x60(%ebx)
	jump_7827a:
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
continue_flying_wander:	/* 0x078280 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x14,%esp
		mov    %eax,%esi
		xor    %edi,%edi
	jump_7828d:
		call   ac_LbRandomAnyShort
		and    $0xffff,%eax
		mov    %eax,%ecx
		mov    %eax,%edx
		and    $0x7f00,%ecx
		and    $0x7f,%edx
		sar    $0x8,%ecx
		test   $0x80,%al
		je     jump_782e5
		test   $0x80,%ah
		je     jump_782d7
		mov    $0x3,%eax
		mov    %edx,%ebx
		mov    $0x7d,%edx
		jmp    jump_78308
	jump_782be:
		mov    0xc(%esp),%eax
		mov    %eax,0x18(%esi)
		mov    0x8(%esp),%eax
		inc    %edi
		mov    %eax,0x20(%esi)
		cmp    $0x20,%edi
		jl     jump_7828d
		jmp    jump_7840a
	jump_782d7:
		mov    $0x7d,%eax
		mov    %edx,%ebx
		mov    $0x3,%edx
		jmp    jump_78308
	jump_782e5:
		test   $0x80,%ah
		je     jump_782fa
		mov    $0x3,%ebx
		mov    %edx,%eax
		mov    %ecx,%edx
		mov    $0x7d,%ecx
		jmp    jump_78308
	jump_782fa:
		mov    $0x7d,%ebx
		mov    %edx,%eax
		mov    %ecx,%edx
		mov    $0x3,%ecx
	jump_78308:
		shl    $0x10,%eax
		mov    0x18(%esi),%ebp
		shl    $0x8,%edx
		mov    %ebp,0xc(%esp)
		mov    %eax,0x18(%esi)
		mov    %eax,0x10(%esp)
		mov    0x20(%esi),%ebp
		mov    %esi,%eax
		mov    %ebp,0x8(%esp)
		mov    %ebx,%ebp
		mov    %ecx,%ebx
		shl    $0x10,%ebp
		shl    $0x8,%ebx
		mov    %ebp,0x20(%esi)
		call   ariadne_initialise_route
		test   %eax,%eax
		jle    jump_782be
		mov    $0x1,%edx
		mov    %esi,%eax
		call   ac_unkn_path_func_001
		mov    0xc(%esp),%eax
		mov    %eax,0x18(%esi)
		mov    0x8(%esp),%eax
		mov    %ebp,%ecx
		mov    %eax,0x20(%esi)
		mov    0x10(%esp),%eax
		mov    %ebp,0x4(%esp)
		mov    %eax,(%esp)
		mov    %eax,%edx
		mov    %esi,%eax
		mov    0x1c(%esi),%ebx
		call   ac_move_mapwho
		mov    0x4a(%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		mov    0x3e(%esi),%al
		and    $0x3,%al
		and    $0xff,%eax
		mov    data_1777cd(%edx,%eax,2),%ax
		mov    0x4a(%esi),%edx
		sar    $0x10,%edx
		mov    %ax,0x6a(%esi)
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		mov    0x3e(%esi),%al
		and    $0x3,%al
		and    $0xff,%eax
		mov    data_1777d5(%edx,%eax,2),%ax
		mov    %ax,0x6e(%esi)
		mov    0x68(%esi),%edx
		mov    0x18(%esi),%eax
		sar    $0x10,%edx
		sar    $0x8,%eax
		sub    %eax,%edx
		mov    0x6c(%esi),%ebx
		mov    %edx,%eax
		mov    0x20(%esi),%edx
		sar    $0x10,%ebx
		sar    $0x8,%edx
		sub    %edx,%ebx
		movw   $0x42,0xa(%esi)
		mov    %ebx,%edx
		movw   $0x0,0x60(%esi)
		call   ac_arctan
		mov    %ax,0x66(%esi)
		mov    $0x1,%eax
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_7840a:
		movw   $0x41,0xa(%esi)
		xor    %eax,%eax
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_start_goto_vehicle)	/* 0x07841C */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		mov    %eax,%ecx
		mov    %edx,%edi
		mov    %ebx,%esi
		xor    %eax,%eax
		mov    0xa(%ecx),%ax
		cmp    $0x45,%eax
		je     jump_78725
		test   %edx,%edx
		jge    jump_78440
		mov    $0x80,%edi
		jmp    jump_7844d
	jump_78440:
		cmp    $0x8000,%edx
		jl     jump_7844d
		mov    $0x7f80,%edi
	jump_7844d:
		test   %esi,%esi
		jge    jump_7845b
		mov    $0x80,%esi
		jmp    jump_7846c
	jump_7845b:
		cmp    $0x8000,%esi
		jl     jump_7846c
		mov    $0x7f80,%esi
	jump_7846c:
		mov    0x8(%ecx),%al
		cmp    $0x33,%al
		jb     jump_78713
		jbe    jump_78681
		cmp    $0x36,%al
		jb     jump_78725
		jbe    jump_786ff
		cmp    $0x3b,%al
		je     jump_78681
		xor    %eax,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_7849a:
		mov    %ecx,%eax
		call   ac_remove_path
		mov    %esi,%ebx
		mov    %edi,%edx
		mov    %ecx,%eax
		call   ariadne_initialise_route
		test   %eax,%eax
		jle    jump_78725
		mov    $0x1,%edx
		mov    %ecx,%eax
		call   ac_unkn_path_func_001
		mov    0x4a(%ecx),%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,4),%esi
		add    %eax,%esi
		shl    $0x2,%esi
		sub    %eax,%esi
		mov    0x3e(%ecx),%al
		and    $0x3,%al
		and    $0xff,%eax
		mov    data_1777cd(%esi,%eax,2),%ax
		mov    %ax,0x6a(%ecx)
		mov    0x4a(%ecx),%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,4),%esi
		add    %eax,%esi
		shl    $0x2,%esi
		sub    %eax,%esi
		mov    0x3e(%ecx),%al
		and    $0x3,%al
		and    $0xff,%eax
		mov    data_1777d5(%esi,%eax,2),%ax
		movw   $0x39,0xa(%ecx)
		movw   $0x0,0x60(%ecx)
		mov    %ax,0x6e(%ecx)
		mov    $0x1,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_7852a:
		cmp    $0x200,%edi
		jge    jump_78537
		mov    $0x200,%edi
	jump_78537:
		cmp    $0x200,%esi
		jge    jump_78544
		mov    $0x200,%esi
	jump_78544:
		cmp    $0x7e00,%edi
		jle    jump_78551
		mov    $0x7e00,%edi
	jump_78551:
		cmp    $0x7e00,%esi
		jle    jump_7855e
		mov    $0x7e00,%esi
	jump_7855e:
		mov    0x5e(%ecx),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jl     jump_7862b
		xor    %eax,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_78573:
		movswl %si,%ebp
		mov    %ecx,%eax
		movswl %di,%esi
		mov    %ebp,%ebx
		mov    %esi,%edx
		call   VNAV_can_i_get_there
		test   %eax,%eax
		je     jump_78725
		mov    %ebp,%ebx
		mov    %esi,%edx
		mov    %ecx,%eax
		call   VNAV_goto_and_unstop
		andb   $0xfb,0xc(%ecx)
		xor    %eax,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_785a2:
		movswl %si,%esi
		movswl %di,%edi
		mov    %ecx,%eax
		mov    %esi,%ebx
		mov    %edi,%edx
		call   VNAV_can_i_get_there
		test   %eax,%eax
		je     jump_78725
		mov    %esi,%ebx
		mov    %edi,%edx
		mov    %ecx,%eax
		call   VNAV_goto_and_unpark
		andb   $0xfb,0xc(%ecx)
		xor    %eax,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_785d1:
		movswl %si,%ebp
		mov    %ecx,%eax
		movswl %di,%esi
		mov    %ebp,%ebx
		mov    %esi,%edx
		call   VNAV_can_i_get_there
		test   %eax,%eax
		je     jump_78725
		mov    %ebp,%ebx
		mov    %esi,%edx
		mov    %ecx,%eax
		call   VNAV_goto_and_unplace
		andb   $0xfb,0xc(%ecx)
		xor    %eax,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_78600:
		cmp    $0x2,%eax
		jne    jump_7860f
		mov    $0x1,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_7860f:
		xor    %eax,%eax
		mov    0xa(%ecx),%ax
		cmp    $0x36,%eax
		je     jump_78725
		movw   $0x3c,0xa(%ecx)
		xor    %eax,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_7862b:
		mov    0xa(%ecx),%ax
		cmp    $0x36,%ax
		jb     jump_78643
		jbe    jump_78573
		cmp    $0x3d,%ax
		je     jump_785d1
		jmp    jump_7864d
	jump_78643:
		cmp    $0x21,%ax
		je     jump_785a2
	jump_7864d:
		movswl %si,%ebx
		movswl %di,%edx
		mov    %ecx,%eax
		call   VNAV_goto
		cmp    $0x1,%eax
		jne    jump_78600
		movw   $0x32,0xa(%ecx)
		movw   $0x0,0x6c(%ecx)
		mov    %di,0x6a(%ecx)
		mov    0xc(%ecx),%dh
		mov    %si,0x6e(%ecx)
		and    $0xfb,%dh
		mov    %dh,0xc(%ecx)
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_78681:
		mov    %ecx,%eax
		call   ac_remove_path
		mov    %esi,%ebx
		mov    %edi,%edx
		mov    %ecx,%eax
		call   build_tank_path
		test   %eax,%eax
		je     jump_78725
		mov    0x4a(%ecx),%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,4),%esi
		add    %eax,%esi
		shl    $0x2,%esi
		sub    %eax,%esi
		mov    0x3e(%ecx),%al
		and    $0x3,%al
		and    $0xff,%eax
		mov    data_1777cd(%esi,%eax,2),%ax
		mov    %ax,0x6a(%ecx)
		mov    0x4a(%ecx),%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,4),%esi
		add    %eax,%esi
		shl    $0x2,%esi
		sub    %eax,%esi
		mov    0x3e(%ecx),%al
		and    $0x3,%al
		and    $0xff,%eax
		mov    data_1777d5(%esi,%eax,2),%ax
		movw   $0x32,0xa(%ecx)
		mov    %ax,0x6e(%ecx)
		mov    $0x1,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_786ff:
		movswl %si,%ebx
		movswl %di,%edx
		mov    %ecx,%eax
		call   send_ship_to
		xor    %eax,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_78713:
		cmp    $0x28,%al
		jb     jump_78725
		jbe    jump_7852a
		cmp    $0x32,%al
		je     jump_7849a
	jump_78725:
		xor    %eax,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_stopping)	/* 0x07872C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		mov    %eax,%ebx
		mov    0x8c(%eax),%edx
		mov    0x8c(%eax),%edi
		mov    0x90(%eax),%esi
		mov    0x90(%eax),%ecx
		and    $0xffff,%edx
		sar    $0x10,%edi
		shl    $0x10,%ecx
		sar    $0x10,%esi
		sar    $0x10,%ecx
		cmp    $0xa,%edx
		jle    jump_7877f
		mov    $0x11,%eax
		sub    %edx,%eax
		imul   $0x50,%eax,%eax
		mov    %ax,0x68(%ebx)
		mov    %esi,%eax
		sar    %eax
		add    %eax,%esi
		mov    %ecx,%eax
		sar    %eax
		add    %eax,%ecx
		jmp    jump_78794
	jump_7877f:
		imul   $0x28,%edx,%eax
		mov    %ax,0x68(%ebx)
		mov    %esi,%eax
		sar    $0x2,%eax
		sub    %eax,%esi
		mov    %ecx,%eax
		sar    $0x2,%eax
		sub    %eax,%ecx
	jump_78794:
		and    $0xffff,%ecx
		mov    0x64(%ebx),%eax
		mov    %esi,0x90(%ebx)
		shl    $0x10,%esi
		sar    $0x10,%eax
		mov    %esi,%ebp
		mov    %esi,0x90(%ebx)
		or     %ecx,%ebp
		sub    %edi,%eax
		mov    %ebp,0x90(%ebx)
		cmp    $0xfffffc00,%eax
		jge    jump_787c9
		add    $0x800,%eax
		jmp    jump_787d5
	jump_787c9:
		cmp    $0x400,%eax
		jle    jump_787d5
		sub    $0x800,%eax
	jump_787d5:
		test   %eax,%eax
		jge    jump_787fb
		cmp    $0xffffffce,%eax
		jle    jump_787e4
		neg    %eax
		add    %eax,%eax
		jmp    jump_78829
	jump_787e4:
		mov    0x36(%ebx),%eax
		sar    $0x10,%eax
		mov    $0x800,%ecx
		sar    $0x3,%eax
		sub    %eax,%ecx
		mov    %ecx,%eax
		sar    $0x2,%eax
		jmp    jump_78829
	jump_787fb:
		jle    jump_7882d
		cmp    $0x32,%eax
		jge    jump_78812
		add    %eax,%eax
		mov    %eax,%ecx
		mov    %ax,0x62(%ebx)
		neg    %ecx
		mov    %cx,0x62(%ebx)
		jmp    jump_7882d
	jump_78812:
		mov    0x36(%ebx),%eax
		sar    $0x10,%eax
		mov    $0x800,%ecx
		sar    $0x3,%eax
		sub    %eax,%ecx
		mov    %ecx,%eax
		sar    $0x2,%eax
		neg    %eax
	jump_78829:
		mov    %ax,0x62(%ebx)
	jump_7882d:
		movw   $0x0,0x5a(%ebx)
		test   %edx,%edx
		jle    jump_78838
		dec    %edx
	jump_78838:
		movw   $0x0,0x8c(%ebx)
		or     %edx,0x8c(%ebx)
		mov    0x36(%ebx),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_788c3
		test   %edx,%edx
		jne    jump_788c3
		mov    0x60(%ebx),%eax
		sar    $0x10,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0x14,%eax
		jge    jump_788c3
		mov    0x5e(%ebx),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_788a5
		neg    %eax
		mov    %eax,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edx
		testb  $0x8,0x13(%edx,%eax,4)
		je     jump_788a5
		movw   $0x3d,0xa(%ebx)
		mov    0xc(%ebx),%ah
		mov    0x7d(%ebx),%dl
		or     $0x4,%ah
		and    $0xfe,%dl
		mov    %ah,0xc(%ebx)
		mov    %ebx,%eax
		mov    %dl,0x7d(%ebx)
		jmp    jump_788be
	jump_788a5:
		movw   $0x21,0xa(%ebx)
		mov    0x7d(%ebx),%al
		mov    0xc(%ebx),%ch
		and    $0xfe,%al
		or     $0x4,%ch
		mov    %al,0x7d(%ebx)
		mov    %ebx,%eax
		mov    %ch,0xc(%ebx)
	jump_788be:
		call   ac_remove_locks
	jump_788c3:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
check_for_a_moving_vehicle_here:	/* 0x0788CC */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x34,%esp
		mov    %eax,%edi
		mov    %edx,0x30(%esp)
		mov    %ebx,0x28(%esp)
		sar    $0x8,%edx
		sar    $0x8,%eax
		mov    %edx,0x14(%esp)
		lea    -0x2(%eax),%edx
		add    $0x2,%eax
		mov    %edx,0x18(%esp)
		mov    %eax,0x10(%esp)
	jump_788f5:
		mov    0x18(%esp),%eax
		mov    %eax,0x20(%esp)
		mov    0x14(%esp),%eax
		sub    $0x2,%eax
		mov    %eax,0x24(%esp)
		mov    0x14(%esp),%eax
		add    $0x2,%eax
		mov    %eax,0x1c(%esp)
	jump_78913:
		mov    0x20(%esp),%edx
		test   %edx,%edx
		jl     jump_78a94
		cmp    $0x7f,%edx
		jg     jump_78a94
		mov    0x24(%esp),%ecx
		test   %ecx,%ecx
		jl     jump_78a94
		cmp    $0x7f,%ecx
		jg     jump_78a94
		mov    %ecx,%eax
		shl    $0x7,%eax
		add    %edx,%eax
		imul   $0x12,%eax,%ebx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		mov    0x6(%ebx,%eax,1),%ebx
		sar    $0x10,%ebx
		test   %ebx,%ebx
		je     jump_78a94
	jump_7895b:
		jle    jump_78a7e
		imul   $0xa8,%ebx,%eax
		mov    things,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    (%eax),%ebx
		mov    0x9(%eax),%dl
		sar    $0x10,%ebx
		cmp    $0x2,%edx
		jne    jump_78a8c
		cmp    0x28(%esp),%eax
		je     jump_78a8c
		xor    %edx,%edx
		mov    0x8(%eax),%dl
		cmp    $0x28,%edx
		jne    jump_78a8c
		xor    %ecx,%ecx
		mov    0x14(%eax),%cx
		imul   $0x190,%ecx,%ecx
		mov    0x52(%eax),%edx
		sar    $0x10,%edx
		imul   $0x24,%edx,%edx
		mov    $EXPORT_SYMBOL(local_mats),%esi
		add    %edx,%esi
		mov    0x8(%esi),%edx
		neg    %edx
		shl    $0x2,%edx
		sar    $0x9,%ecx
		mov    %edx,(%esp)
		mov    0x20(%esi),%edx
		mov    (%esp),%esi
		imul   %ecx,%esi
		neg    %edx
		shl    $0x2,%edx
		mov    %edx,0x4(%esp)
		mov    0x18(%eax),%edx
		sar    $0x8,%esi
		add    %esi,%edx
		sar    $0x8,%edx
		mov    %edx,0x8(%esp)
		mov    0x4(%esp),%edx
		imul   %ecx,%edx
		mov    0x20(%eax),%ebp
		sar    $0x8,%edx
		add    %edx,%ebp
		sar    $0x8,%ebp
		mov    %ebp,0xc(%esp)
		mov    0x18(%eax),%ebp
		sub    %esi,%ebp
		mov    %ebp,%esi
		sar    $0x8,%esi
		mov    0x20(%eax),%ebp
		mov    %esi,0x2c(%esp)
		mov    %edi,%eax
		sub    0x8(%esp),%eax
		sub    %edx,%ebp
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    0xc(%esp),%edx
		mov    %eax,%esi
		mov    0x30(%esp),%eax
		sub    %edx,%eax
		sar    $0x8,%ebp
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%esi
		jle    jump_78a35
		sar    %eax
		jmp    jump_78a37
	jump_78a35:
		sar    %esi
	jump_78a37:
		add    %esi,%eax
		cmp    %ecx,%eax
		jge    jump_78a47
		mov    $0x1,%eax
		jmp    jump_78ac0
	jump_78a47:
		mov    0x2c(%esp),%esi
		mov    %edi,%eax
		sub    %esi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%esi
		mov    0x30(%esp),%eax
		sub    %ebp,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%esi
		jle    jump_78a69
		sar    %eax
		jmp    jump_78a6b
	jump_78a69:
		sar    %esi
	jump_78a6b:
		add    %esi,%eax
		cmp    %ecx,%eax
		jge    jump_78a8c
		mov    $0x1,%eax
		add    $0x34,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_78a7e:
		imul   $0x3c,%ebx,%ebx
		mov    EXPORT_SYMBOL(sthings),%eax
		mov    (%ebx,%eax,1),%ebx
		sar    $0x10,%ebx
	jump_78a8c:
		test   %ebx,%ebx
		jne    jump_7895b
	jump_78a94:
		mov    0x24(%esp),%ebp
		inc    %ebp
		mov    0x1c(%esp),%edx
		mov    %ebp,0x24(%esp)
		cmp    %edx,%ebp
		jle    jump_78913
		mov    0x18(%esp),%ebx
		inc    %ebx
		mov    0x10(%esp),%ecx
		mov    %ebx,0x18(%esp)
		cmp    %ecx,%ebx
		jle    jump_788f5
		xor    %eax,%eax
	jump_78ac0:
		add    $0x34,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_unstopping)	/* 0x078AC8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x10,%esp
		mov    %eax,%ecx
		mov    0x90(%eax),%ebp
		mov    0x90(%eax),%esi
		mov    0x88(%eax),%edi
		sar    $0x10,%ebp
		shl    $0x10,%esi
		and    $0x3f,%edi
		sar    $0x10,%esi
		cmp    $0xa,%edi
		jne    jump_78b93
		mov    0x18(%eax),%edx
		sar    $0x8,%edx
		lea    0x0(,%ebp,8),%eax
		sub    %eax,%edx
		mov    0x20(%ecx),%eax
		mov    %edx,0xc(%esp)
		sar    $0x8,%eax
		lea    0x0(,%esi,8),%edx
		sub    %edx,%eax
		mov    %eax,0x8(%esp)
		lea    (%esi,%esi,1),%eax
		mov    %eax,(%esp)
		mov    0xc(%esp),%eax
		add    (%esp),%eax
		lea    0x0(%ebp,%ebp,1),%edx
		mov    %edx,0x4(%esp)
		mov    0x8(%esp),%edx
		sub    0x4(%esp),%edx
		mov    %ecx,%ebx
		call   check_for_a_moving_vehicle_here
		test   %eax,%eax
		je     jump_78b5c
		mov    0x7d(%ecx),%bl
		movw   $0x0,0x5a(%ecx)
		or     $0x2,%bl
		mov    %bl,0x7d(%ecx)
		jmp    jump_78c2f
	jump_78b5c:
		mov    0xc(%esp),%eax
		mov    (%esp),%edx
		mov    0x4(%esp),%ebx
		sub    %edx,%eax
		mov    0x8(%esp),%edx
		add    %ebx,%edx
		mov    %ecx,%ebx
		call   check_for_a_moving_vehicle_here
		test   %eax,%eax
		je     jump_78b93
		mov    0x7d(%ecx),%dh
		movw   $0x0,0x5a(%ecx)
		or     $0x2,%dh
		mov    %dh,0x7d(%ecx)
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_78b93:
		andb   $0xfd,0x7d(%ecx)
		cmp    $0x5,%edi
		jle    jump_78bb8
		mov    $0xb,%eax
		sub    %edi,%eax
		imul   $0xffffff9c,%eax,%eax
		mov    %ax,0x68(%ecx)
		mov    %ebp,%eax
		sar    %eax
		add    %eax,%ebp
		mov    %esi,%eax
		sar    %eax
		add    %eax,%esi
		jmp    jump_78bcd
	jump_78bb8:
		imul   $0xffffff9c,%edi,%eax
		mov    %ax,0x68(%ecx)
		mov    %ebp,%eax
		sar    $0x2,%eax
		sub    %eax,%ebp
		mov    %esi,%eax
		sar    $0x2,%eax
		sub    %eax,%esi
	jump_78bcd:
		and    $0xffff,%esi
		mov    0x5a(%ecx),%dx
		mov    %ebp,0x90(%ecx)
		shl    $0x10,%ebp
		add    $0x64,%edx
		mov    %ebp,0x90(%ecx)
		mov    %ebp,%eax
		mov    %dx,0x5a(%ecx)
		or     %esi,%eax
		mov    %eax,0x90(%ecx)
		test   %edi,%edi
		jle    jump_78bfc
		dec    %edi
	jump_78bfc:
		andb   $0xc0,0x88(%ecx)
		or     %edi,0x88(%ecx)
		test   %edi,%edi
		jne    jump_78c2f
		mov    %ecx,%eax
		mov    0x8c(%ecx),%ebx
		mov    0x8c(%ecx),%edx
		shl    $0x10,%ebx
		sar    $0x10,%edx
		sar    $0x10,%ebx
		movw   $0x32,0xa(%ecx)
		call   ac_start_goto_vehicle
	jump_78c2f:
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_unplacing)	/* 0x078C3C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edi
		mov    %eax,%ecx
		mov    0x88(%eax),%esi
		and    $0x3f,%esi
		cmp    $0x14,%esi
		je     jump_78c63
		jmp    jump_78ca9
	jump_78c59:
		add    $0x2,%eax
		cmp    $0x8,%eax
		jl     jump_78c8b
		jmp    jump_78ca4
	jump_78c63:
		movw   $0x0,0x8a(%eax)
		mov    0x5e(%eax),%eax
		mov    0x88(%ecx),%edx
		sar    $0x10,%eax
		mov    0x5e(%ecx),%esi
		shl    $0x10,%eax
		sar    $0x10,%esi
		or     %eax,%edx
		xor    %eax,%eax
		mov    %edx,0x88(%ecx)
	jump_78c8b:
		mov    %esi,%edx
		neg    %edx
		imul   $0x24,%edx,%ebx
		lea    (%edi,%ebx,1),%edx
		add    %eax,%edx
		mov    0x6(%edx),%bx
		test   %bx,%bx
		je     jump_78c59
		mov    %bx,0x60(%ecx)
	jump_78ca4:
		mov    $0x13,%esi
	jump_78ca9:
		cmp    $0x12,%esi
		jg     jump_78d15
		lea    0x0(,%esi,4),%eax
		sub    %esi,%eax
		mov    data_155060(,%eax,2),%dx
		mov    %dx,0x5a(%ecx)
		mov    unplace(,%eax,2),%dx
		shl    $0x3,%edx
		mov    %dx,0x62(%ecx)
		mov    data_15505e(,%eax,2),%ax
		add    %ax,0x64(%ecx)
		test   %esi,%esi
		jle    jump_78ce3
		dec    %esi
	jump_78ce3:
		mov    %edi,EXPORT_SYMBOL(game_traffic_nodes)
		test   %esi,%esi
		jne    jump_78d69
		mov    %ecx,%eax
		mov    0x8c(%ecx),%ebx
		mov    0x8c(%ecx),%edx
		shl    $0x10,%ebx
		sar    $0x10,%edx
		sar    $0x10,%ebx
		movw   $0x32,0xa(%ecx)
		call   ac_start_goto_vehicle
		jmp    jump_78d69
	jump_78d15:
		mov    0x5e(%ecx),%edx
		sar    $0x10,%edx
		neg    %edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		movw   $0xfda8,0x5a(%ecx)
		shl    $0x2,%eax
		mov    0x18(%ecx),%ebx
		lea    (%edi,%eax,1),%edx
		sar    $0x8,%ebx
		movswl (%edx),%eax
		sub    %eax,%ebx
		mov    %ebx,%eax
		imul   %eax,%eax
		mov    0x2(%edx),%edx
		mov    0x20(%ecx),%ebx
		sar    $0x10,%edx
		sar    $0x8,%ebx
		sub    %edx,%ebx
		mov    %ebx,%edx
		imul   %ebx,%edx
		add    %edx,%eax
		mov    %edi,EXPORT_SYMBOL(game_traffic_nodes)
		cmp    $0x10000,%eax
		jge    jump_78d69
		mov    $0x12,%esi
	jump_78d69:
		andb   $0xc0,0x88(%ecx)
		mov    0x88(%ecx),%ebx
		or     %esi,%ebx
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edi
		mov    %ebx,0x88(%ecx)
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
exit_pod:	/* 0x078D8C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		mov    %eax,%ecx
		mov    0x5e(%eax),%ax
		cwtl
		test   %eax,%eax
		jne    jump_78db1
		mov    $0x9,%edx
		mov    0x16(%ecx),%ax
		call   ac_stop_sample_using_heap
		mov    $0x1,%eax
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_78db1:
		jg     jump_78dbc
		mov    $0x1,%eax
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_78dbc:
		mov    %eax,%ebx
		shl    $0x2,%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    things,%ebx
		shl    $0x3,%eax
		add    %eax,%ebx
		mov    0x2c(%ecx),%eax
		shl    $0x10,%eax
		add    $0x8000,%eax
		mov    %eax,0x18(%ebx)
		mov    0x34(%ecx),%eax
		shl    $0x10,%eax
		add    $0x8000,%eax
		mov    %eax,0x20(%ebx)
		sar    $0x8,%eax
		movswl %ax,%edx
		mov    0x18(%ebx),%eax
		sar    $0x8,%eax
		cwtl
		call   ac_alt_at_point
		mov    0xc(%ebx),%dx
		mov    %eax,0x1c(%ebx)
		and    $0xbfeb,%edx
		mov    %dx,0xc(%ebx)
		orb    $0x14,0xc(%ebx)
		mov    0x2(%ebx),%ax
		mov    %ax,0x5e(%ecx)
		xor    %eax,%eax
		mov    0x16(%ebx),%ax
		call   ac_add_node_thing
		xor    %eax,%eax
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_shuttle_pod)	/* 0x078E90 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    %eax,%ebx
		mov    0x60(%eax),%si
		movswl %si,%edx
		test   %edx,%edx
		jge    jump_78ef1
		call   exit_pod
		test   %ax,%ax
		je     jump_78fa1
		neg    %esi
		xor    %ecx,%ecx
		mov    %si,%cx
		lea    0x0(,%ecx,4),%edx
		add    %ecx,%edx
		shl    $0x2,%edx
		add    %ecx,%edx
		mov    things,%eax
		shl    $0x3,%edx
		mov    0x52(%edx,%eax,1),%ax
		mov    $0x15,%edx
		and    $0xffff,%eax
		call   set_object_flag
		xor    %eax,%eax
		mov    0x16(%ebx),%ax
		call   ac_remove_thing
		jmp    jump_78fa1
	jump_78ef1:
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		mov    things,%edi
		add    %edx,%eax
		xor    %edx,%edx
		shl    $0x3,%eax
		mov    %si,%dx
		lea    (%edi,%eax,1),%ecx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    0x52(%edi,%eax,8),%ax
		mov    $0x5,%edx
		and    $0xffff,%eax
		call   set_object_flag
		mov    0x4e(%ecx),%dx
		test   %dx,%dx
		je     jump_78f6a
		mov    %edx,%eax
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		mov    0x52(%edx,%eax,8),%ax
		mov    $0x15,%edx
		and    $0xffff,%eax
		call   set_object_flag
	jump_78f6a:
		mov    0x18(%ecx),%eax
		mov    %eax,0x18(%ebx)
		mov    0x1c(%ecx),%eax
		mov    %eax,0x1c(%ebx)
		mov    0x20(%ecx),%eax
		mov    %eax,0x20(%ebx)
		mov    0x4c(%ecx),%ax
		movswl %ax,%edx
		test   %edx,%edx
		jne    jump_78f9d
		negw   0x60(%ebx)
		mov    0x2c(%ecx),%eax
		mov    %eax,0x2c(%ebx)
		mov    0x34(%ecx),%eax
		mov    %eax,0x34(%ebx)
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_78f9d:
		mov    %ax,0x60(%ebx)
	jump_78fa1:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
good_node:	/* 0x078FA8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		push   %esi
		push   %edi
		mov    $0xfffff,%esi
		test   %eax,%eax
		jle    jump_78fbf
		mov    $0x1,%eax
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ebx
		ret
	jump_78fbf:
		neg    %eax
		mov    %eax,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edi
		shl    $0x2,%eax
		add    %eax,%edi
		mov    %edi,%edx
		mov    %edi,%ebx
		xor    %eax,%eax
	jump_78fd9:
		cmpw   $0x0,0x6(%edx)
		je     jump_78ff2
		testb  $0x80,0xe(%ebx)
		jne    jump_78ff0
		mov    $0x1,%eax
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ebx
		ret
	jump_78ff0:
		mov    %eax,%esi
	jump_78ff2:
		add    $0x2,%edx
		inc    %eax
		inc    %ebx
		cmp    $0x4,%eax
		jl     jump_78fd9
		cmp    $0xfffff,%esi
		je     jump_79058
		mov    0x4(%edi,%esi,2),%esi
		sar    $0x10,%esi
		test   %esi,%esi
		jle    jump_79025
		mov    $0x1,%eax
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ebx
		ret
	jump_79019:
		add    $0x2,%edx
		inc    %ebx
		inc    %eax
		cmp    $0x4,%ebx
		jl     jump_79041
		jmp    jump_79058
	jump_79025:
		mov    %esi,%edx
		neg    %edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edx
		shl    $0x2,%eax
		add    %edx,%eax
		xor    %ebx,%ebx
		mov    %eax,%edx
	jump_79041:
		cmpw   $0x0,0x6(%edx)
		je     jump_79019
		testb  $0x80,0xe(%eax)
		jne    jump_79019
		mov    $0x1,%eax
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ebx
		ret
	jump_79058:
		xor    %eax,%eax
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_get_next_tnode)	/* 0x0790AC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    %eax,(%esp)
		mov    %edx,%ebp
		mov    %ebp,%eax
		xor    %esi,%esi
		xor    %edx,%edx
		cmpw   $0x0,0x6(%eax)
		je     jump_790c9
		mov    %esi,%ebx
		inc    %edx
	jump_790c9:
		inc    %esi
		add    $0x2,%eax
		cmp    $0x4,%esi
		jge    jump_790de
		cmpw   $0x0,0x6(%eax)
		je     jump_790c9
		mov    %esi,%ebx
		inc    %edx
		jmp    jump_790c9
	jump_790de:
		test   %edx,%edx
		je     jump_79301
		cmp    $0x1,%edx
		jne    jump_79123
		mov    (%esp),%eax
		orb    $0x4,0x7c(%eax)
		testb  $0x80,0xe(%ebx,%ebp,1)
		je     jump_7910d
		sarw   0x72(%eax)
		mov    0x72(%eax),%cl
		or     $0x2,%cl
		mov    %ebx,%esi
		mov    %cl,0x72(%eax)
		jmp    jump_79303
	jump_7910d:
		sarw   0x72(%eax)
		mov    %ebx,%esi
		jmp    jump_79303
	jump_79118:
		inc    %esi
		cmp    $0x8,%esi
		jl     jump_79125
		jmp    jump_79244
	jump_79123:
		xor    %esi,%esi
	jump_79125:
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		xor    %edi,%edi
		and    $0x3,%al
		mov    %ax,%di
		lea    0x0(,%edi,2),%eax
		add    %ebp,%eax
		cmpw   $0x0,0x6(%eax)
		je     jump_79118
		mov    0x4(%eax),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jg     jump_7915f
		neg    %eax
		imul   $0x24,%eax,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edx
		testb  $0x18,0x13(%edx,%eax,1)
		jne    jump_79118
	jump_7915f:
		testb  $0x80,0xe(%edi,%ebp,1)
		je     jump_7921d
		mov    0x4(%ebp,%edi,2),%eax
		sar    $0x10,%eax
		mov    %eax,%edx
		neg    %edx
		imul   $0x24,%edx,%edx
		mov    EXPORT_SYMBOL(game_traffic_nodes),%ebx
		add    %ebx,%edx
		testb  $0x40,0x12(%edx)
		jne    jump_79118
		mov    (%esp),%ebx
		mov    0x70(%ebx),%ebx
		sar    $0x10,%ebx
		cmp    $0x2,%ebx
		jne    jump_791ea
		test   %eax,%eax
		jle    jump_791ab
		mov    $0x1,%ebx
		jmp    jump_791c5
	jump_7919f:
		add    $0x2,%eax
		inc    %ebx
		inc    %edx
		cmp    $0x4,%ebx
		jl     jump_791af
		jmp    jump_791c3
	jump_791ab:
		mov    %edx,%eax
		xor    %ebx,%ebx
	jump_791af:
		cmpw   $0x0,0x6(%eax)
		je     jump_7919f
		testb  $0x80,0xe(%edx)
		jne    jump_7919f
		mov    $0x1,%ebx
		jmp    jump_791c5
	jump_791c3:
		xor    %ebx,%ebx
	jump_791c5:
		test   %ebx,%ebx
		je     jump_79118
		mov    (%esp),%eax
		sarw   0x72(%eax)
		mov    0x72(%eax),%ch
		or     $0x2,%ch
		mov    %edi,%esi
		mov    %ch,0x72(%eax)
		mov    %esi,%eax
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_791ea:
		cmp    $0x3,%ebx
		je     jump_79118
		call   good_node
		test   %eax,%eax
		je     jump_79118
		mov    (%esp),%eax
		sarw   0x72(%eax)
		mov    0x72(%eax),%bh
		or     $0x2,%bh
		mov    %edi,%esi
		mov    %bh,0x72(%eax)
		mov    %esi,%eax
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_7921d:
		mov    (%esp),%eax
		mov    0x72(%eax),%bx
		sar    %bx
		mov    %edi,%esi
		mov    %bx,0x72(%eax)
		mov    %esi,%eax
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_79238:
		add    $0x2,%eax
		inc    %esi
		inc    %edx
		cmp    $0x4,%esi
		jl     jump_7924a
		jmp    jump_79290
	jump_79244:
		mov    %ebp,%eax
		mov    %ebp,%edx
		xor    %esi,%esi
	jump_7924a:
		cmpw   $0x0,0x6(%eax)
		je     jump_79238
		testb  $0x80,0xe(%edx)
		jne    jump_79238
		mov    0x4(%eax),%ebx
		sar    $0x10,%ebx
		test   %ebx,%ebx
		jge    jump_79273
		neg    %ebx
		imul   $0x24,%ebx,%ebx
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edi
		testb  $0x18,0x13(%edi,%ebx,1)
		jne    jump_79238
	jump_79273:
		mov    (%esp),%eax
		sarw   0x72(%eax)
		mov    %esi,%eax
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_79285:
		inc    %esi
		add    $0x2,%eax
		cmp    $0x4,%esi
		jl     jump_79296
		jmp    jump_792d9
	jump_79290:
		mov    %ebp,%eax
		xor    %esi,%esi
		xor    %edi,%edi
	jump_79296:
		cmp    0x6(%eax),%di
		je     jump_79285
		mov    0x4(%eax),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		jge    jump_792b8
		neg    %edx
		imul   $0x24,%edx,%edx
		mov    EXPORT_SYMBOL(game_traffic_nodes),%ebx
		testb  $0x18,0x13(%edx,%ebx,1)
		jne    jump_79285
	jump_792b8:
		mov    (%esp),%eax
		sarw   0x72(%eax)
		orb    $0x2,0x72(%eax)
		mov    %esi,%eax
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_792ce:
		inc    %esi
		add    $0x2,%eax
		cmp    $0x4,%esi
		jl     jump_792dd
		jmp    jump_79301
	jump_792d9:
		mov    %ebp,%eax
		xor    %esi,%esi
	jump_792dd:
		cmpw   $0x0,0x6(%eax)
		je     jump_792ce
		testb  $0x80,0xe(%esi,%ebp,1)
		je     jump_79273
		mov    (%esp),%eax
		sarw   0x72(%eax)
		orb    $0x2,0x72(%eax)
		mov    %esi,%eax
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_79301:
		xor    %esi,%esi
	jump_79303:
		mov    %esi,%eax
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_next_vnav_turn)	/* 0x079350 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		mov    %eax,%edx
		call   VNAV_there
		test   %eax,%eax
		je     jump_7947e
		mov    0x90(%edx),%eax
		mov    0x5e(%edx),%ebx
		sar    $0x10,%eax
		sar    $0x10,%ebx
		cmp    %eax,%ebx
		je     jump_7938d
		mov    %edx,%eax
		call   VNAV_renavigate
		test   %eax,%eax
		jne    jump_7947e
		movw   $0x3c,0xa(%edx)
	jump_7938d:
		mov    0x5e(%edx),%ebx
		sar    $0x10,%ebx
		neg    %ebx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		mov    0x5e(%edx),%ebx
		movw   $0x0,0x8a(%edx)
		sar    $0x10,%ebx
		mov    0x88(%edx),%esi
		shl    $0x10,%ebx
		mov    EXPORT_SYMBOL(game_traffic_nodes),%ecx
		or     %ebx,%esi
		mov    0x90(%edx),%ebx
		mov    %esi,0x88(%edx)
		and    $0xf,%ebx
		andb   $0x3f,0x88(%edx)
		mov    %ebx,%esi
		mov    0x88(%edx),%edi
		shl    $0x6,%esi
		shl    $0x2,%eax
		or     %esi,%edi
		add    %ecx,%eax
		mov    %edi,0x88(%edx)
		mov    0x6(%eax,%ebx,2),%bx
		mov    %bx,0x60(%edx)
		mov    0x5e(%edx),%ebx
		movw   $0x33,0xa(%edx)
		sar    $0x10,%ebx
		movswl (%eax),%edi
		neg    %ebx
		mov    0x2(%eax),%esi
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		movswl (%ecx,%eax,4),%ebx
		mov    0x2(%ecx,%eax,4),%eax
		mov    0x88(%edx),%ecx
		and    $0xff00,%ecx
		sar    $0x10,%esi
		sar    $0x8,%ecx
		sar    $0x10,%eax
		cmp    $0x30,%ecx
		jge    jump_7943b
		mov    $0x30,%ecx
		jmp    jump_79448
	jump_7943b:
		cmp    $0xe0,%ecx
		jle    jump_79448
		mov    $0xe0,%ecx
	jump_79448:
		sub    %edi,%ebx
		imul   %ecx,%ebx
		sub    %esi,%eax
		imul   %ecx,%eax
		sar    $0x8,%ebx
		add    %edi,%ebx
		sar    $0x8,%eax
		mov    %ebx,%ebp
		add    %esi,%eax
		shl    $0x10,%ebp
		mov    %ebx,0x8c(%edx)
		mov    %ebp,%ebx
		mov    %ebp,0x8c(%edx)
		or     %eax,%ebx
		mov    %ebx,0x8c(%edx)
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_7947e:
		mov    0x5e(%edx),%ebx
		sar    $0x10,%ebx
		neg    %ebx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%ebx
		shl    $0x2,%eax
		add    %eax,%ebx
		mov    0x5e(%edx),%eax
		movw   $0x0,0x8a(%edx)
		sar    $0x10,%eax
		mov    0x88(%edx),%ecx
		shl    $0x10,%eax
		or     %eax,%ecx
		mov    %edx,%eax
		mov    %ecx,0x88(%edx)
		call   VNAV_turn
		andb   $0x3f,0x88(%edx)
		mov    %eax,%ecx
		mov    0x88(%edx),%esi
		shl    $0x6,%ecx
		or     %ecx,%esi
		mov    %esi,0x88(%edx)
		mov    0x6(%ebx,%eax,2),%cx
		mov    %cx,0x60(%edx)
		testb  $0x1,0xe(%ebx,%eax,1)
		je     jump_794f1
		orb    $0x8,0xf(%edx)
		jmp    jump_794f5
	jump_794f1:
		andb   $0xf7,0xf(%edx)
	jump_794f5:
		mov    0x5e(%edx),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_79506
		mov    %edx,%eax
		call   ac_start_crashing
	jump_79506:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_set_vehicle_alt)	/* 0x079510 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		mov    %eax,%ebx
		mov    0x5e(%eax),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_79584
		mov    0x20(%ebx),%edx
		mov    0x18(%ebx),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		shl    $0x7,%edx
		add    %eax,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		add    %eax,%eax
		add    %edx,%eax
		testb  $0x8,0xf(%eax)
		jne    jump_79584
		testw  $0xfff,0x10(%eax)
		jne    jump_79584
		mov    0x20(%ebx),%eax
		sar    $0x8,%eax
		movswl %ax,%edx
		mov    0x18(%ebx),%eax
		sar    $0x8,%eax
		cwtl
		call   ac_alt_at_point
		add    $0xf00,%eax
		sub    0x1c(%ebx),%eax
		sar    $0x3,%eax
		mov    0x1c(%ebx),%ecx
		mov    %eax,%edx
		add    %eax,%ecx
		neg    %edx
		mov    %ecx,0x1c(%ebx)
		sar    $0x3,%edx
		mov    %dx,0x64(%ebx)
	jump_79584:
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_check_for_a_vehicle_here)	/* 0x079588 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x34,%esp
		mov    %eax,0x30(%esp)
		mov    %edx,%edi
		mov    %ebx,0x28(%esp)
		sar    $0x8,%edx
		sar    $0x8,%eax
		mov    %edx,0x14(%esp)
		lea    -0x2(%eax),%edx
		add    $0x2,%eax
		mov    %edx,0x18(%esp)
		mov    %eax,0x10(%esp)
	jump_795b1:
		mov    0x18(%esp),%eax
		mov    %eax,0x20(%esp)
		mov    0x14(%esp),%eax
		sub    $0x2,%eax
		mov    %eax,0x24(%esp)
		mov    0x14(%esp),%eax
		add    $0x2,%eax
		mov    %eax,0x1c(%esp)
	jump_795cf:
		mov    0x20(%esp),%edx
		test   %edx,%edx
		jl     jump_7975f
		cmp    $0x7f,%edx
		jg     jump_7975f
		mov    0x24(%esp),%ecx
		test   %ecx,%ecx
		jl     jump_7975f
		cmp    $0x7f,%ecx
		jg     jump_7975f
		mov    %ecx,%eax
		shl    $0x7,%eax
		add    %edx,%eax
		imul   $0x12,%eax,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0x6(%edx,%eax,1),%ebx
		sar    $0x10,%ebx
		test   %ebx,%ebx
		je     jump_7975f
	jump_79618:
		jle    jump_79749
		imul   $0xa8,%ebx,%eax
		mov    things,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    (%eax),%ebx
		mov    0x9(%eax),%dl
		sar    $0x10,%ebx
		cmp    $0x2,%edx
		jne    jump_79757
		cmp    0x28(%esp),%eax
		je     jump_79757
		xor    %edx,%edx
		mov    0x8(%eax),%dl
		cmp    $0x28,%edx
		jne    jump_79757
		xor    %edx,%edx
		mov    0xa(%eax),%dx
		cmp    $0x21,%edx
		jne    jump_79757
		xor    %edx,%edx
		mov    0x14(%eax),%dx
		imul   $0x190,%edx,%ecx
		mov    0x52(%eax),%esi
		sar    $0x10,%esi
		imul   $0x24,%esi,%esi
		add    $EXPORT_SYMBOL(local_mats),%esi
		mov    0x8(%esi),%edx
		neg    %edx
		shl    $0x2,%edx
		mov    %edx,(%esp)
		mov    0x20(%esi),%edx
		neg    %edx
		shl    $0x2,%edx
		sar    $0x9,%ecx
		mov    %edx,0x4(%esp)
		mov    (%esp),%edx
		imul   %ecx,%edx
		mov    0x18(%eax),%esi
		sar    $0x8,%edx
		add    %edx,%esi
		sar    $0x8,%esi
		mov    %esi,0x8(%esp)
		mov    0x4(%esp),%esi
		imul   %ecx,%esi
		mov    0x20(%eax),%ebp
		sar    $0x8,%esi
		add    %esi,%ebp
		sar    $0x8,%ebp
		mov    %ebp,0xc(%esp)
		mov    0x18(%eax),%ebp
		sub    %edx,%ebp
		mov    %ebp,%edx
		mov    0x20(%eax),%ebp
		mov    0x30(%esp),%eax
		sub    %esi,%ebp
		mov    0x8(%esp),%esi
		sar    $0x8,%edx
		sub    %esi,%eax
		mov    %edx,0x2c(%esp)
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    0xc(%esp),%edx
		mov    %eax,%esi
		mov    %edi,%eax
		sub    %edx,%eax
		sar    $0x8,%ebp
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%esi
		jle    jump_79702
		sar    %eax
		jmp    jump_79704
	jump_79702:
		sar    %esi
	jump_79704:
		add    %esi,%eax
		cmp    %ecx,%eax
		jge    jump_79714
		mov    $0x1,%eax
		jmp    jump_7978b
	jump_79714:
		mov    0x30(%esp),%eax
		sub    0x2c(%esp),%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%esi
		mov    %edi,%eax
		sub    %ebp,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%esi
		jle    jump_79734
		sar    %eax
		jmp    jump_79736
	jump_79734:
		sar    %esi
	jump_79736:
		add    %esi,%eax
		cmp    %ecx,%eax
		jge    jump_79757
		mov    $0x1,%eax
		add    $0x34,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_79749:
		imul   $0x3c,%ebx,%ebx
		mov    EXPORT_SYMBOL(sthings),%eax
		mov    (%ebx,%eax,1),%ebx
		sar    $0x10,%ebx
	jump_79757:
		test   %ebx,%ebx
		jne    jump_79618
	jump_7975f:
		mov    0x24(%esp),%ebp
		inc    %ebp
		mov    0x1c(%esp),%edx
		mov    %ebp,0x24(%esp)
		cmp    %edx,%ebp
		jle    jump_795cf
		mov    0x18(%esp),%ebx
		inc    %ebx
		mov    0x10(%esp),%ecx
		mov    %ebx,0x18(%esp)
		cmp    %ecx,%ebx
		jle    jump_795b1
		xor    %eax,%eax
	jump_7978b:
		add    $0x34,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_next_tnode)	/* 0x079794 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4c,%esp
		mov    %eax,%edi
		mov    0x60(%eax),%ax
		mov    %ax,0x44(%esp)
		mov    0x42(%esp),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_797bf
		mov    %edi,%eax
		call   ac_start_crashing
		jmp    process_next_tnode_end1
	jump_797bf:
		xor    %eax,%eax
		mov    0xa(%edi),%ax
		cmp    $0x34,%eax
		je     jump_797cf
		cmp    $0x33,%eax
		jne    jump_79803
	jump_797cf:
		cmpw   $0x0,0x44(%esp)
		jne    jump_79803
		mov    0x36(%edi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_79803
		movw   $0x21,0xa(%edi)
		mov    0xc(%edi),%ah
		mov    0x7d(%edi),%dl
		movl   $0x0,0x90(%edi)
		or     $0x4,%ah
		and    $0xfe,%dl
		mov    %ah,0xc(%edi)
		mov    %dl,0x7d(%edi)
	jump_79803:
		mov    0x42(%esp),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jle    jump_79893
		mov    %eax,%edx
		shl    $0x2,%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%esi
		shl    $0x3,%eax
		mov    0xf(%edi),%dh
		add    %eax,%esi
		test   $0x8,%dh
		je     jump_79863
		mov    0x57(%esi),%edx
		sar    $0x18,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    0x18(%esi),%edx
		mov    0x58(%esi),%ecx
		sar    $0x8,%edx
		sar    $0x18,%ecx
		sub    %eax,%edx
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		mov    0x20(%esi),%ecx
		sar    $0x8,%ecx
		sub    %eax,%ecx
		mov    %ecx,%eax
		jmp    jump_798d1
	jump_79863:
		mov    0x57(%esi),%edx
		sar    $0x18,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    0x18(%esi),%edx
		mov    0x58(%esi),%ecx
		sar    $0x8,%edx
		sar    $0x18,%ecx
		add    %eax,%edx
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		mov    0x20(%esi),%ecx
		sar    $0x8,%ecx
		add    %ecx,%eax
		jmp    jump_798d1
	jump_79893:
		neg    %eax
		mov    %eax,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%ebx
		shl    $0x2,%eax
		add    %eax,%ebx
		xor    %eax,%eax
		mov    0xa(%edi),%ax
		cmp    $0x33,%eax
		je     jump_798bd
		mov    0x2(%ebx),%eax
		movswl (%ebx),%edx
		sar    $0x10,%eax
		jmp    jump_798d1
	jump_798bd:
		mov    0x8c(%edi),%edx
		mov    0x8c(%edi),%eax
		shr    $0x10,%edx
		and    $0xffff,%eax
	jump_798d1:
		mov    0x18(%edi),%ecx
		sar    $0x8,%ecx
		sub    %ecx,%edx
		mov    %edx,0x40(%esp) # store tndt_x
		mov    0x20(%edi),%edx
		sar    $0x8,%edx
		sub    %edx,%eax
		mov    0x40(%esp),%edx
		imul   %edx,%edx
		mov    %eax,0x3c(%esp) # store tndt_z
		imul   %eax,%eax
		add    %eax,%edx
		mov    0x42(%esp),%eax
		sar    $0x10,%eax
		mov    %edx,0x34(%esp) # store nxdist_sq
		test   %eax,%eax
		jge    jump_799dc
		mov    0x60(%edi),%eax
		sar    $0x10,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    $0x4b0,%edx
		add    %eax,%eax
		sub    %eax,%edx
		mov    0x7c(%edi),%cl
		mov    %dx,0x5a(%edi)
		test   $0x8,%cl
		je     jump_7995c
		test   $0x10,%cl
		je     jump_7995c
		mov    0x5e(%edi),%edx
		sar    $0x10,%edx
		neg    %edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edx
		mov    0x12(%edx,%eax,4),%edx
		xor    %eax,%eax
		sar    $0x10,%edx
		mov    0x16(%edi),%ax
		cmp    %eax,%edx
		jne    jump_7995c
		mov    %cl,%al
		and    $0xf7,%al
		mov    %al,0x7c(%edi)
	jump_7995c:
		testb  $0x8,0x7c(%edi)
		je     jump_79984
		mov    0x5e(%edi),%edx
		sar    $0x10,%edx
		neg    %edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edx
		testb  $0x30,0x12(%edx,%eax,4)
		jne    jump_79984
		andb   $0xf7,0x7c(%edi)
	jump_79984:
		testb  $0x10,0x7c(%edi)
		je     jump_799e4
		mov    0x5e(%edi),%edx
		sar    $0x10,%edx
		neg    %edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edx
		testb  $0x30,0x12(%edx,%eax,4)
		jne    jump_799e4
		andb   $0xef,0x7c(%edi)
		mov    0x5e(%edi),%ecx
		sar    $0x10,%ecx
		neg    %ecx
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		andb   $0xbf,0x12(%edx,%eax,4)
		mov    0x5e(%edi),%ecx
		sar    $0x10,%ecx
		neg    %ecx
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		movw   $0x0,0x14(%edx,%eax,4)
		jmp    jump_799e4
	jump_799dc:
		jle    jump_799e4
		movw   $0x5e8,0x5a(%edi)
	jump_799e4:
		mov    0x42(%esp),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_79a4a
		cmpw   $0x0,0x14(%ebx)
		je     jump_79a4a
		testb  $0x80,0x13(%ebx)
		je     jump_79a4a
		cmpl   $0x90000,0x34(%esp)
		jge    jump_79a4a
		mov    0x12(%ebx),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %eax,%edx
		mov    things,%eax
		shl    $0x3,%edx
		add    %edx,%eax
		mov    0xc(%eax),%dl
		test   $0x40,%dl
		jne    jump_79a4a
		mov    %dl,%cl
		or     $0x20,%cl
		mov    %cl,0xc(%eax)
		movw   $0x0,0x5a(%edi)
		movw   $0x0,0x62(%edi)
		jmp    process_next_tnode_end1

	jump_79a4a:
		mov    0x42(%esp),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_79a8b
		cmpw   $0x0,0x14(%ebx)
		je     jump_79a8b
		testb  $0x80,0x13(%ebx)
		jne    jump_79a8b
		cmpl   $0x10000,0x34(%esp) # 0x34(%esp) is nxdist_sq
		jge    jump_79a8b
		mov    0x12(%ebx),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		orb    $0x1,0xd(%edx,%eax,8)
	jump_79a8b:
		mov    0x42(%esp),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_7a11b
		mov    0x34(%esp),%ecx # 0x34(%esp) is nxdist_sq
		cmp    $0x20000,%ecx
		jge    jump_7a11b
		cmpw   $0x0,0x14(%ebx)
		je     jump_79abd
		cmp    $0x10000,%ecx
		jl     do_process_next_tnode_switch_state
	jump_79abd:
		cmpw   $0x0,0x14(%ebx)
		jne    do_process_next_tnode_part3
		jmp    do_process_next_tnode_switch_state
	jump_7a11b:
		cmpl   $0xc000,0x34(%esp)
		jge    do_process_next_tnode_part3
		testb  $0x8,0xf(%edi)
		je     jump_7a131
		mov    0x4e(%esi),%ax
		jmp    jump_7a135
	jump_7a131:
		mov    0x4c(%esi),%ax
	jump_7a135:
		mov    %ax,0x60(%edi)
        jmp    do_process_next_tnode_part3

    do_process_next_tnode_switch_state:
		# param p_vehicle
		mov    %edi,%eax
		# param tndt_x
		mov    0x40(%esp),%edx
		# param tndt_z
		mov    0x3c(%esp),%ebx
		# param nxdist_sq
		mov    0x34(%esp),%ecx
		call   ASM_process_next_tnode_switch_state
		# store possibly updated nxdist_sq
		mov    %eax,0x34(%esp)

	do_process_next_tnode_part3:
		# param p_vehicle
		mov    %edi,%eax
		# param tndt_x
		mov    0x40(%esp),%edx
		# param tndt_z
		mov    0x3c(%esp),%ebx
		# param nxdist_sq
		mov    0x34(%esp),%ecx
		call   ASM_process_next_tnode_part3
	process_next_tnode_end1:
		add    $0x4c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


	GLOBAL_FUNC(ASM_process_next_tnode_switch_state)	/* 0x79ac8 */
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4c,%esp
        # store p_vehicle
		mov    %eax,%edi
        # store p_vehicle->U.UVehicle.TNode
		mov    0x60(%eax),%ax
		mov    %ax,0x44(%esp)
		# store tndt_x
		mov    %edx,0x40(%esp)
		# store tndt_z
		mov    %ebx,0x3c(%esp)
		# store nxdist_sq
		mov    %ecx,0x34(%esp)
        # store p_tnode in %ebx
		mov    0x44(%esp),%ax
		movsx  %ax,%eax
		neg    %eax
		mov    %eax,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%ebx
		shl    $0x2,%eax
		add    %eax,%ebx

		mov    0xa(%edi),%ax
		cmp    $0x33,%ax
		jb     jump_7a010
		jbe    jump_79b1e
		cmp    $0x34,%ax
		jne    jump_7a01a
		mov    0x5e(%edi),%eax
		movw   $0x0,0x8a(%edi)
		sar    $0x10,%eax
		or     %eax,0x88(%edi)
		mov    0x5e(%edi),%edx
		sar    $0x10,%edx
		neg    %edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edx
		movw   $0x36,0xa(%edi)
		mov    0x6(%edx,%eax,4),%ax
		mov    %ax,0x60(%edi)
		jmp    do_process_next_tnode_switch_end
	jump_79b1e:
		mov    0x88(%edi),%edx
		sar    $0x10,%edx
		neg    %edx
		lea    0x0(,%edx,8),%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%ebx
		add    %edx,%eax
		movswl (%ebx,%eax,4),%edx
		mov    %edx,0x2c(%esp)
		mov    0x5e(%edi),%edx
		mov    0x2(%ebx,%eax,4),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		neg    %edx
		mov    %eax,0x30(%esp)
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    0x2c(%esp),%esi
		movswl (%eax),%edx
		mov    0x2(%eax),%ecx
		mov    %edx,0x28(%esp)
		sar    $0x10,%ecx
		mov    %edx,%ebx
		mov    0x13(%eax),%dl
		sub    %esi,%ebx
		test   $0x8,%dl
		jne    jump_79d02
		mov    0x30(%esp),%esi
		sub    %ecx,%esi
		mov    %esi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,0x18(%esp)
		mov    %ebx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    0x18(%esp),%edx
		mov    %ebx,%ebp
		cmp    %edx,%eax
		jge    jump_79bb3
		mov    %ebx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebx
		mov    %esi,%eax
		sar    %ebx
		jmp    jump_79bc6
	jump_79bb3:
		mov    %esi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		sar    %eax
		mov    %eax,0x18(%esp)
		mov    %ebx,%eax
		mov    0x18(%esp),%ebx
	jump_79bc6:
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		add    %eax,%ebx
		shl    $0x5,%esi
		shl    $0x5,%ebp
		test   %ebx,%ebx
		je     jump_79bed
		mov    %esi,%edx
		mov    %esi,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,%esi
		mov    %ebp,%edx
		mov    %ebp,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,%ebp
	jump_79bed:
		testb  $0x1,0x7d(%edi)
		jne    jump_79c9c
		mov    0x18(%edi),%eax
		lea    0x0(,%esi,8),%edx
		sar    $0x8,%eax
		add    %eax,%edx
		lea    0x0(,%ebp,4),%eax
		add    %eax,%edx
		mov    %edx,0x18(%esp)
		mov    0x18(%esp),%ebx
		lea    0x0(,%esi,4),%edx
		add    %edx,%ebx
		mov    %ebx,0x14(%esp)
		mov    0x20(%edi),%ebx
		sar    $0x8,%ebx
		mov    %ebx,0x18(%esp)
		lea    0x0(,%ebp,8),%ebx
		mov    %ebx,0x1c(%esp)
		mov    0x18(%esp),%ebx
		add    0x1c(%esp),%ebx
		sub    %edx,%ebx
		lea    (%ebx,%eax,1),%edx
		mov    0x14(%esp),%eax
		mov    %edi,%ebx
		call   ac_check_for_a_vehicle_here
		test   %eax,%eax
		je     jump_79c9c
		shl    $0x5,%ebp
		mov    0x8c(%edi),%edx
		shl    $0x5,%esi
		shr    $0x10,%edx
		mov    0x8c(%edi),%eax
		add    %ebp,%edx
		and    $0xffff,%eax
		mov    %edx,%ebx
		mov    %edx,0x8c(%edi)
		shl    $0x10,%ebx
		sub    %esi,%eax
		mov    %ebx,0x8c(%edi)
		mov    %ebx,%ecx
		mov    0x7d(%edi),%bl
		or     %eax,%ecx
		or     $0x1,%bl
		mov    %ecx,0x8c(%edi)
		mov    %bl,0x7d(%edi)
		jmp    do_process_next_tnode_switch_end
	jump_79c9c:
		mov    0x30(%esp),%eax
		mov    %ecx,%edx
		mov    0x2c(%esp),%ebx
		sub    %eax,%edx
		mov    0x28(%esp),%eax
		sub    %ebx,%eax
		call   ac_arctan
		and    $0xffff,%eax
		movw   $0x36,0xa(%edi)
		and    $0xffff,%ebp
		mov    %esi,0x90(%edi)
		mov    %eax,%ecx
		shl    $0x10,%esi
		mov    %eax,0x8c(%edi)
		shl    $0x10,%ecx
		mov    %esi,0x90(%edi)
		mov    %esi,%eax
		mov    %ecx,0x8c(%edi)
		or     %ebp,%eax
		mov    0x8c(%edi),%bh
		mov    %eax,0x90(%edi)
		or     $0x11,%bh
		mov    %bh,0x8c(%edi)
		jmp    do_process_next_tnode_switch_end
	jump_79d02:
		sub    0x30(%esp),%ecx
		mov    %ebx,%eax
		mov    %ecx,%edx
		call   ac_arctan
		movl   $0x0,0x90(%edi)
		and    $0xffff,%eax
		movw   $0x36,0xa(%edi)
		mov    %eax,%ebx
		mov    %eax,0x8c(%edi)
		shl    $0x10,%ebx
		mov    %ebx,0x8c(%edi)
		jmp    do_process_next_tnode_switch_end
	jump_79d3a:
		testb  $0x30,0x12(%ebx)
		je     jump_79d46
		orb    $0x1,0x7c(%edi)
		jmp    jump_79d4a
	jump_79d46:
		andb   $0xfe,0x7c(%edi)
	jump_79d4a:
		mov    0x7c(%edi),%ah
		test   $0x20,%ah
		je     jump_79db6
		test   $0x40,%ah
		je     jump_79d95
		mov    0x94(%edi),%edx
		sar    $0x10,%edx
		neg    %edx
		lea    0x0(,%edx,8),%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%ebx
		add    %edx,%eax
		andb   $0xbf,0x12(%ebx,%eax,4)
		mov    0x94(%edi),%edx
		sar    $0x10,%edx
		neg    %edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		movw   $0x0,0x14(%ebx,%eax,4)
		andb   $0xbf,0x7c(%edi)
	jump_79d95:
		mov    0x88(%edi),%eax
		mov    0x7c(%edi),%bh
		sar    $0x10,%eax
		and    $0x9f,%bh
		mov    %ax,0x96(%edi)
		mov    %bh,%cl
		mov    %bh,0x7c(%edi)
		or     $0x40,%cl
		mov    %cl,0x7c(%edi)
	jump_79db6:
		mov    0x7c(%edi),%ch
		test   $0x10,%ch
		je     jump_79dcd
		mov    %ch,%al
		or     $0x20,%al
		mov    %al,0x7c(%edi)
		mov    %al,%ah
		and    $0xef,%ah
		mov    %ah,0x7c(%edi)
	jump_79dcd:
		mov    %edi,%eax
		call   ac_process_next_vnav_turn
		mov    0x5e(%edi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    do_process_next_tnode_switch_end
		neg    %eax
		mov    %eax,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edx
		testb  $0x30,0x12(%edx,%eax,4)
		je     do_process_next_tnode_switch_end
		mov    0x7c(%edi),%bh
		mov    $0x7fffffff,%ebp
		or     $0x8,%bh
		mov    %ebp,0x34(%esp)
		mov    %bh,0x7c(%edi)
		jmp    do_process_next_tnode_switch_end
	jump_79e13:
		add    $0x2,%esi
		cmp    $0x8,%esi
		jl     jump_7a0aa
		jmp    jump_79ea5
	jump_79e24:
		mov    (%esp),%edx
		mov    %ebx,%ecx
		mov    %edi,%eax
		mov    0x38(%esp),%ebx
		call   ac_move_mapwho
		mov    %edi,%eax
		call   ac_remove_locks
		mov    0x5e(%edi),%edx
		mov    0x7c(%edi),%al
		sar    $0x10,%edx
		or     $0x40,%al
		neg    %edx
		mov    %al,0x7c(%edi)
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edx
		shl    $0x2,%eax
		add    %edx,%eax
		mov    0x6(%esi,%eax,1),%ax
		mov    %ax,0x96(%edi)
		mov    0x94(%edi),%ebx
		sar    $0x10,%ebx
		neg    %ebx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		orb    $0x40,0x12(%edx,%eax,4)
		mov    0x94(%edi),%ebx
		sar    $0x10,%ebx
		neg    %ebx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0x16(%edi),%ax
		mov    %ax,0x14(%edx)
	jump_79ea5:
		mov    0x3c(%esp),%edx
		mov    0x40(%esp),%eax
		movw   $0x0,0x62(%edi)
		call   ac_arctan
		mov    %ax,0x66(%edi)
		jmp    do_process_next_tnode_switch_end
	jump_79ec1:
    # code path: if ((p_tnode->Flags & 0x80) == 0)
		test   $0x30,%ch
		je     jump_79ed0
		mov    %cl,%dl
		or     $0x1,%dl
		mov    %dl,0x7c(%edi)
		jmp    jump_79ed8
	jump_79ed0:
		mov    %cl,%ah
		and    $0xfe,%ah
		mov    %ah,0x7c(%edi)
	jump_79ed8:
		mov    0x7c(%edi),%dh
		test   $0x20,%dh
		je     jump_79f44
		test   $0x40,%dh
		je     jump_79f23
		mov    0x94(%edi),%edx
		sar    $0x10,%edx
		neg    %edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edx
		andb   $0xbf,0x12(%edx,%eax,4)
		mov    0x94(%edi),%ecx
		sar    $0x10,%ecx
		neg    %ecx
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		movw   $0x0,0x14(%edx,%eax,4)
		andb   $0xbf,0x7c(%edi)
	jump_79f23:
		mov    0x88(%edi),%eax
		sar    $0x10,%eax
		mov    %ax,0x96(%edi)
		mov    0x7c(%edi),%ah
		and    $0x9f,%ah
		mov    %ah,%dl
		mov    %ah,0x7c(%edi)
		or     $0x40,%dl
		mov    %dl,0x7c(%edi)
	jump_79f44:
		mov    0x5e(%edi),%eax
		movw   $0x0,0x8a(%edi)
		sar    $0x10,%eax
		mov    0x88(%edi),%ecx
		shl    $0x10,%eax
		or     %eax,%ecx
		mov    0x7c(%edi),%dh
		mov    %ecx,0x88(%edi)
		test   $0x10,%dh
		je     jump_79f7c
		mov    %dh,%cl
		or     $0x20,%cl
		mov    %cl,0x7c(%edi)
		mov    %cl,%ch
		and    $0xef,%ch
		mov    %ch,0x7c(%edi)
	jump_79f7c:
		mov    %ebx,%edx
		mov    %edi,%eax
		call   ac_get_next_tnode
		mov    %ax,0x44(%esp)
		cwtl
		mov    0x6(%ebx,%eax,2),%ax
		mov    %ax,0x60(%edi)
		mov    0x5e(%edi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_79fa5
		mov    %edi,%eax
		call   ac_start_crashing
	jump_79fa5:
		mov    0x42(%esp),%eax
		sar    $0x10,%eax
		mov    0x4(%ebx,%eax,2),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		jge    jump_79ff0
		testb  $0x80,0xe(%ebx,%eax,1)
		jne    jump_79fde
		mov    0x5e(%edi),%edx
		sar    $0x10,%edx
		neg    %edx
		lea    0x0(,%edx,8),%eax
		add    %eax,%edx
		mov    EXPORT_SYMBOL(game_traffic_nodes),%eax
		shl    $0x2,%edx
		testb  $0x30,0x12(%edx,%eax,1)
		je     jump_79ff0
	jump_79fde:
		mov    0x7c(%edi),%ch
		mov    $0x7fffffff,%esi
		or     $0x8,%ch
		mov    %esi,0x34(%esp)
		mov    %ch,0x7c(%edi)
	jump_79ff0:
		mov    0x42(%esp),%eax
		sar    $0x10,%eax
		testb  $0x1,0xe(%ebx,%eax,1)
		je     jump_7a007
		orb    $0x8,0xf(%edi)
		jmp    do_process_next_tnode_switch_end
	jump_7a007:
		andb   $0xf7,0xf(%edi)
		jmp    do_process_next_tnode_switch_end
	jump_7a010:
		cmp    $0x32,%ax
		je     jump_79d3a
	jump_7a01a:
    # switch (p_vehicle->State) default:
		mov    0x7c(%edi),%cl
		and    $0xfb,%cl
		mov    %cl,0x7c(%edi)
		mov    0x12(%ebx),%ch
		test   $0x80,%ch
		je     jump_79ec1
		xor    %ebp,%ebp
	jump_7a031:
    # code path: if ((p_tnode->Flags & 0x80) == 0) else
		xor    %edx,%edx
		call   ac_LbRandomAnyShort
		mov    %ax,%dx
		mov    EXPORT_SYMBOL(dword_1C8470),%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    EXPORT_SYMBOL(dword_1C8474)(,%edx,4),%ax
		mov    %eax,%esi
		mov    %ax,0x60(%edi)
		neg    %esi
		mov    %si,0x60(%edi)
		mov    0x5e(%edi),%eax
		sar    $0x10,%eax
		neg    %eax
		imul   $0x24,%eax,%edx
		mov    EXPORT_SYMBOL(game_traffic_nodes),%eax
		movswl (%edx,%eax,1),%edx
		shl    $0x8,%edx
		mov    %edx,(%esp)
		mov    0x5e(%edi),%edx
		sar    $0x10,%edx
		neg    %edx
		imul   $0x24,%edx,%edx
		add    %edx,%eax
		mov    (%eax),%edx
		mov    0x2(%eax),%eax
		xor    %esi,%esi
		sar    $0x10,%eax
		sar    $0x10,%edx
		shl    $0x8,%eax
		shl    $0x8,%edx
		mov    %eax,0x4(%esp)
		add    $0xf00,%edx
		mov    0x5e(%edi),%ebx
		mov    %edx,0x38(%esp)
		sar    $0x10,%ebx
	jump_7a0aa:
		mov    %ebx,%eax
		neg    %eax
		imul   $0x24,%eax,%edx
		mov    EXPORT_SYMBOL(game_traffic_nodes),%eax
		add    %eax,%edx
		add    %esi,%edx
		cmpw   $0x0,0x6(%edx)
		je     jump_79e13
		mov    0x4(%edx),%edx
		sar    $0x10,%edx
		neg    %edx
		imul   $0x24,%edx,%edx
		add    %edx,%eax
		movswl (%eax),%edx
		mov    (%esp),%ecx
		shl    $0x8,%edx
		sub    %ecx,%edx
		mov    %edx,0x40(%esp)
		mov    0x2(%eax),%edx
		sar    $0x10,%edx
		mov    0x4(%esp),%ebx
		shl    $0x8,%edx
		sub    %ebx,%edx
		mov    0x12(%eax),%ch
		mov    %edx,0x3c(%esp)
		test   $0x40,%ch
		je     jump_79e24
		inc    %ebp
		cmp    $0x8,%ebp
		jl     jump_7a031
		mov    %edi,%eax
		call   ac_start_crashing
		jmp    do_process_next_tnode_switch_end

	do_process_next_tnode_switch_end:
		# return possibly updated nxdist_sq
		mov    0x34(%esp),%eax
		add    $0x4c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


	GLOBAL_FUNC(ASM_process_next_tnode_part3)
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4c,%esp
        # store p_vehicle
		mov    %eax,%edi
        # store p_vehicle->U.UVehicle.TNode
		mov    0x60(%eax),%ax
		mov    %ax,0x44(%esp)
		# store tndt_x
		mov    %edx,0x40(%esp)
		# store tndt_z
		mov    %ebx,0x3c(%esp)
		# store nxdist_sq
		mov    %ecx,0x34(%esp)

        # inlined update_vehicle_elevation()
		mov    0x42(%esp),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		jle    jump_7a421
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		testb  $0x2,0xc(%eax)
		je     jump_7a178
		mov    %edi,%eax
		call   ac_start_crashing
		add    $0x4c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_7a178:
		testb  $0x8,0xf(%edi)
		je     jump_7a2d8
		mov    0x4a(%eax),%ebx
		sar    $0x10,%ebx
		test   %ebx,%ebx
		jle    jump_7a421
		mov    %ebx,%ecx
		shl    $0x2,%ebx
		add    %ecx,%ebx
		shl    $0x2,%ebx
		add    %ecx,%ebx
		shl    $0x3,%ebx
		add    %ebx,%edx
		mov    0x57(%edx),%ecx
		sar    $0x18,%ecx
		lea    0x0(,%ecx,4),%ebx
		mov    0x18(%edx),%ebp
		add    %ecx,%ebx
		mov    0x58(%edx),%ecx
		sar    $0x8,%ebp
		sar    $0x18,%ecx
		sub    %ebx,%ebp
		lea    0x0(,%ecx,4),%ebx
		add    %ecx,%ebx
		mov    0x20(%edx),%ecx
		mov    0x1c(%edx),%edx
		sar    $0x8,%ecx
		sar    $0x3,%edx
		sub    %ebx,%ecx
		mov    0x57(%eax),%ebx
		lea    0xf00(%edx),%esi
		sar    $0x18,%ebx
		lea    0x0(,%ebx,4),%edx
		add    %edx,%ebx
		mov    0x18(%eax),%edx
		mov    %ecx,0x8(%esp)
		sar    $0x8,%edx
		mov    0x1c(%eax),%ecx
		sub    %ebx,%edx
		mov    0x58(%eax),%ebx
		sar    $0x3,%ecx
		sar    $0x18,%ebx
		mov    %edx,0xc(%esp)
		lea    0x0(,%ebx,4),%edx
		add    $0xf00,%ecx
		add    %ebx,%edx
		mov    0x20(%eax),%ebx
		mov    %ecx,%eax
		sub    %esi,%eax
		sar    $0x8,%ebx
		mov    %eax,%esi
		mov    0xc(%esp),%eax
		sub    %edx,%ebx
		sub    %ebp,%eax
		mov    %ebx,0x10(%esp)
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    0x8(%esp),%ebp
		mov    %eax,%ebx
		mov    0x10(%esp),%eax
		sub    %ebp,%eax
		sar    $0x5,%esi
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebp
		mov    %ebx,%edx
		sar    $0x7,%ebp
		sar    $0x7,%edx
		mov    %ebp,0x20(%esp)
		cmp    %eax,%ebx
		jge    jump_7a284
		mov    %eax,%ebp
		sar    $0x5,%ebp
		sub    %ebp,%eax
		mov    0x20(%esp),%ebp
		sub    %ebp,%eax
		mov    %eax,0x1c(%esp)
		mov    %ebx,%eax
		mov    0x1c(%esp),%ebp
		sar    $0x2,%eax
		add    %ebp,%eax
		mov    %ebx,%ebp
		sar    $0x3,%ebp
		sar    $0x6,%ebx
		add    %ebp,%eax
		add    %eax,%ebx
		add    %edx,%ebx
		jmp    jump_7a2a6
	jump_7a284:
		mov    %ebx,%ebp
		sar    $0x5,%ebp
		sub    %ebp,%ebx
		sub    %edx,%ebx
		mov    %eax,%edx
		sar    $0x2,%edx
		add    %edx,%ebx
		mov    %eax,%edx
		sar    $0x3,%edx
		sar    $0x6,%eax
		add    %ebx,%edx
		mov    0x20(%esp),%ebx
		add    %edx,%eax
		add    %eax,%ebx
	jump_7a2a6:
		mov    %esi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %ebx,%edx
		xor    %ebx,%ebx
		call   ac_arctan
		mov    %ax,%bx
		sub    $0x400,%ebx
		test   %esi,%esi
		jge    jump_7a2c5
		neg    %ebx
	jump_7a2c5:
		mov    0x1c(%edi),%eax
		sub    %eax,%ecx
		sar    $0x3,%ecx
		lea    (%eax,%ecx,1),%edx
		mov    %edx,0x1c(%edi)
		jmp    jump_7a423
	jump_7a2d8:
		mov    0x4c(%eax),%ebx
		sar    $0x10,%ebx
		test   %ebx,%ebx
		jle    jump_7a421
		mov    %ebx,%ecx
		shl    $0x2,%ebx
		add    %ecx,%ebx
		shl    $0x2,%ebx
		add    %ecx,%ebx
		shl    $0x3,%ebx
		add    %edx,%ebx
		mov    0x57(%ebx),%ecx
		sar    $0x18,%ecx
		lea    0x0(,%ecx,4),%edx
		mov    0x18(%ebx),%ebp
		add    %ecx,%edx
		mov    0x58(%ebx),%ecx
		sar    $0x8,%ebp
		sar    $0x18,%ecx
		sub    %edx,%ebp
		lea    0x0(,%ecx,4),%edx
		add    %ecx,%edx
		mov    0x20(%ebx),%ecx
		sar    $0x8,%ecx
		sub    %edx,%ecx
		mov    0x1c(%ebx),%edx
		sar    $0x3,%edx
		mov    0x57(%eax),%ebx
		lea    0xf00(%edx),%esi
		sar    $0x18,%ebx
		lea    0x0(,%ebx,4),%edx
		add    %ebx,%edx
		mov    0x18(%eax),%ebx
		sar    $0x8,%ebx
		sub    %edx,%ebx
		mov    %ecx,0x8(%esp)
		mov    %ebx,0xc(%esp)
		mov    0x58(%eax),%ebx
		mov    0x1c(%eax),%ecx
		sar    $0x18,%ebx
		sar    $0x3,%ecx
		lea    0x0(,%ebx,4),%edx
		add    $0xf00,%ecx
		add    %ebx,%edx
		mov    0x20(%eax),%ebx
		mov    %ecx,%eax
		sub    %esi,%eax
		sar    $0x8,%ebx
		mov    %eax,%esi
		mov    0xc(%esp),%eax
		sub    %edx,%ebx
		sub    %ebp,%eax
		mov    %ebx,0x10(%esp)
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    0x8(%esp),%ebp
		mov    %eax,%ebx
		mov    0x10(%esp),%eax
		sub    %ebp,%eax
		sar    $0x5,%esi
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebp
		mov    %ebx,%edx
		sar    $0x7,%ebp
		sar    $0x7,%edx
		mov    %ebp,0x24(%esp)
		cmp    %eax,%ebx
		jge    jump_7a3d0
		mov    %eax,%ebp
		sar    $0x5,%ebp
		sub    %ebp,%eax
		sub    0x24(%esp),%eax
		mov    %ebx,%ebp
		sar    $0x2,%ebp
		add    %eax,%ebp
		mov    %ebx,%eax
		sar    $0x3,%eax
		sar    $0x6,%ebx
		add    %ebp,%eax
		add    %eax,%ebx
		add    %edx,%ebx
		jmp    jump_7a3f2
	jump_7a3d0:
		mov    %ebx,%ebp
		sar    $0x5,%ebp
		sub    %ebp,%ebx
		sub    %edx,%ebx
		mov    %eax,%edx
		sar    $0x2,%edx
		add    %ebx,%edx
		mov    %eax,%ebx
		sar    $0x3,%ebx
		sar    $0x6,%eax
		add    %ebx,%edx
		mov    0x24(%esp),%ebx
		add    %edx,%eax
		add    %eax,%ebx
	jump_7a3f2:
		mov    %esi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %ebx,%edx
		xor    %ebx,%ebx
		call   ac_arctan
		mov    %ax,%bx
		sub    $0x400,%ebx
		test   %esi,%esi
		jge    jump_7a411
		neg    %ebx
	jump_7a411:
		mov    0x1c(%edi),%eax
		sub    %eax,%ecx
		sar    $0x3,%ecx
		lea    (%eax,%ecx,1),%edx
		mov    %edx,0x1c(%edi)
		jmp    jump_7a423
	jump_7a421:
		xor    %ebx,%ebx
	jump_7a423:
		xor    %eax,%eax
		mov    0xa(%edi),%ax
		cmp    $0x32,%eax
		jne    jump_7a48e
		testb  $0x3,gameturn
		jne    jump_7a48e
		mov    0x88(%edi),%eax
		and    $0x3f,%eax
		cmp    $0x2,%eax
		jle    jump_7a48e
		mov    0x18(%edi),%edx
		xor    %eax,%eax
		sar    $0x8,%edx
		mov    0xa4(%edi),%ax
		sub    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%esi
		xor    %edx,%edx
		mov    0x20(%edi),%eax
		mov    0xa6(%edi),%dx
		sar    $0x8,%eax
		sub    %eax,%edx
		mov    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%esi
		jle    jump_7a47d
		sar    %eax
		jmp    jump_7a47f
	jump_7a47d:
		sar    %esi
	jump_7a47f:
		add    %esi,%eax
		cmp    $0x300,%eax
		jge    jump_7a48e
		movw   $0x3c,0xa(%edi)
	jump_7a48e:
		mov    0x62(%edi),%eax
		sar    $0x10,%eax
		cmp    %ebx,%eax
		jge    jump_7a49d
		addw   $0x4,0x64(%edi)
	jump_7a49d:
		mov    0x62(%edi),%eax
		sar    $0x10,%eax
		cmp    %ebx,%eax
		jle    jump_7a4ac
		subw   $0x4,0x64(%edi)
	jump_7a4ac:
		mov    0x3c(%esp),%edx
		mov    0x40(%esp),%eax
		call   ac_arctan
		mov    0x66(%edi),%dx
		sub    %eax,%edx
		mov    %edx,%eax
		movswl %dx,%edx
		cmp    $0xfffffc00,%edx
		jge    jump_7a4d1
		add    $0x8,%ah
		jmp    jump_7a4df
	jump_7a4d1:
		cmp    $0x400,%edx
		jle    jump_7a4df
		sub    $0x800,%eax
	jump_7a4df:
		movswl %ax,%edx
		test   %edx,%edx
		jge    jump_7a50a
		cmp    $0xffffffce,%edx
		jle    jump_7a4f3
		mov    %eax,%edx
		neg    %edx
		add    %edx,%edx
		jmp    jump_7a532
	jump_7a4f3:
		mov    0x36(%edi),%edx
		sar    $0x10,%edx
		mov    $0x800,%ebx
		sar    $0x3,%edx
		sub    %edx,%ebx
		mov    %ebx,%edx
		sar    $0x2,%edx
		jmp    jump_7a532
	jump_7a50a:
		jle    jump_7a536
		cmp    $0x32,%edx
		jge    jump_7a51b
		mov    %eax,%edx
		add    %eax,%edx
		mov    %dx,0x62(%edi)
		jmp    jump_7a530
	jump_7a51b:
		mov    0x36(%edi),%edx
		sar    $0x10,%edx
		mov    $0x800,%ebx
		sar    $0x3,%edx
		sub    %edx,%ebx
		mov    %ebx,%edx
		sar    $0x2,%edx
	jump_7a530:
		neg    %edx
	jump_7a532:
		mov    %dx,0x62(%edi)
	jump_7a536:
		movswl %ax,%edx
		cmp    $0x200,%edx
		jg     jump_7a549
		cmp    $0xfffffe00,%edx
		jge    jump_7a54e
	jump_7a549:
		mov    $0x200,%eax
	jump_7a54e:
		xor    %edx,%edx
		mov    0x3f(%edi),%dl
		cmp    $0x2,%edx
		jne    jump_7a58f
		cmpl   $0x8000,0x34(%esp)
		jge    jump_7a56a
		movw   $0x200,0x5a(%edi)
		jmp    jump_7a57e
	jump_7a56a:
		cwtl
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    $0x800,%edx
		shl    $0x2,%eax
		sub    %eax,%edx
		mov    %dx,0x5a(%edi)
	jump_7a57e:
		mov    0x58(%edi),%eax
		sar    $0x10,%eax
		cmp    $0xa,%eax
		jge    jump_7a58f
		movw   $0xa,0x5a(%edi)
	jump_7a58f:
		cmpl   $0xc0000,0x34(%esp)
		jge    jump_7a7b5
		mov    0x5e(%edi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_7a7b5
		neg    %eax
		mov    %eax,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		testb  $0x8,0x7c(%edi)
		je     jump_7a74a
		xor    %eax,%eax
		mov    0xa(%edi),%ax
		cmp    $0x32,%eax
		je     jump_7a5dd
		cmp    $0x11,%eax
		jne    jump_7a74a
	jump_7a5dd:
		testb  $0x40,0x12(%edx)
		je     jump_7a726
		movw   $0x0,0x5a(%edi)
		mov    0x12(%edx),%ebx
		sar    $0x10,%ebx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    things,%ebx
		shl    $0x3,%eax
		add    %ebx,%eax
		testb  $0x8,0x7c(%eax)
		je     jump_7a74a
		mov    0x5e(%eax),%ecx
		sar    $0x10,%ecx
		neg    %ecx
		lea    0x0(,%ecx,8),%ebx
		add    %ecx,%ebx
		mov    EXPORT_SYMBOL(game_traffic_nodes),%esi
		shl    $0x2,%ebx
		add    %esi,%ebx
		testb  $0x40,0x12(%ebx)
		je     jump_7a74a
		mov    0x12(%ebx),%ebp
		xor    %ecx,%ecx
		sar    $0x10,%ebp
		mov    0x16(%edi),%cx
		cmp    %ecx,%ebp
		jne    jump_7a74a
		mov    0x88(%edi),%ecx
		sar    $0x10,%ecx
		mov    %ecx,0x1c(%esp)
		mov    0x1c(%esp),%ecx
		mov    %cx,0x48(%esp)
		cmp    0x60(%eax),%cx
		jne    jump_7a696
		mov    0x46(%esp),%ecx
		sar    $0x10,%ecx
		neg    %ecx
		lea    0x0(,%ecx,8),%ebx
		add    %ecx,%ebx
		mov    0x12(%esi,%ebx,4),%cl
		movw   $0x0,0x14(%esi,%ebx,4)
		and    $0xbf,%cl
		mov    %cl,0x12(%esi,%ebx,4)
		andb   $0xdf,0x7c(%edi)
		jmp    jump_7a6b6
	jump_7a696:
		andb   $0xbf,0x12(%ebx)
		mov    0x5e(%eax),%ecx
		sar    $0x10,%ecx
		neg    %ecx
		lea    0x0(,%ecx,8),%ebx
		add    %ecx,%ebx
		movw   $0x0,0x14(%esi,%ebx,4)
		andb   $0xbf,0x7c(%edi)
	jump_7a6b6:
		mov    0x88(%eax),%ebx
		mov    0x60(%edi),%cx
		sar    $0x10,%ebx
		cmp    %cx,%bx
		jne    jump_7a6ec
		movswl %cx,%ebx
		neg    %ebx
		mov    %ebx,%ecx
		shl    $0x3,%ebx
		add    %ecx,%ebx
		mov    EXPORT_SYMBOL(game_traffic_nodes),%ecx
		movw   $0x0,0x14(%ecx,%ebx,4)
		andb   $0xbf,0x12(%ecx,%ebx,4)
		andb   $0xdf,0x7c(%eax)
		jmp    jump_7a74a
	jump_7a6ec:
		mov    0x5e(%edi),%ecx
		sar    $0x10,%ecx
		neg    %ecx
		lea    0x0(,%ecx,8),%ebx
		mov    EXPORT_SYMBOL(game_traffic_nodes),%esi
		add    %ecx,%ebx
		andb   $0xbf,0x12(%esi,%ebx,4)
		mov    0x5e(%edi),%ecx
		sar    $0x10,%ecx
		neg    %ecx
		lea    0x0(,%ecx,8),%ebx
		add    %ecx,%ebx
		movw   $0x0,0x14(%esi,%ebx,4)
		andb   $0xbf,0x7c(%eax)
		jmp    jump_7a74a
	jump_7a726:
		mov    %edi,%eax
		call   ac_remove_locks_apart_from_agok
		orb    $0x40,0x12(%edx)
		mov    0x16(%edi),%ax
		mov    %ax,0x14(%edx)
		mov    0x7c(%edi),%bh
		or     $0x10,%bh
		mov    %bh,%cl
		mov    %bh,0x7c(%edi)
		and    $0xf7,%cl
		mov    %cl,0x7c(%edi)
	jump_7a74a:
		testb  $0x8,0x12(%edx)
		je     jump_7a7ae
		mov    %edx,%eax
		call   ac_check_person_close
		test   %eax,%eax
		je     jump_7a7ae
		xor    %eax,%eax
		mov    0xa1(%edi),%al
		cmp    $0x64,%eax
		jge    jump_7a7b5
		test   %al,%al
		jne    jump_7a777
		mov    0x3a(%edi),%ax
		mov    %ax,0xa2(%edi)
	jump_7a777:
		mov    0xa2(%edi),%ax
		cmp    0x3a(%edi),%ax
		je     jump_7a78d
		movb   $0xc8,0xa1(%edi)
		jmp    jump_7a7b5
	jump_7a78d:
		movw   $0x0,0x5a(%edi)
		mov    0xa1(%edi),%ch
		mov    0x3a(%edi),%ax
		inc    %ch
		mov    %ax,0xa2(%edi)
		mov    %ch,0xa1(%edi)
		jmp    jump_7a7b5
	jump_7a7ae:
		movb   $0x0,0xa1(%edi)
	jump_7a7b5:
		testb  $0x20,0x7c(%edi)
		je     jump_7a81a
		mov    0x88(%edi),%edx
		sar    $0x10,%edx
		neg    %edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edx
		shl    $0x2,%eax
		mov    0x18(%edi),%ebx
		add    %edx,%eax
		sar    $0x8,%ebx
		movswl (%eax),%edx
		sub    %edx,%ebx
		mov    %ebx,%edx
		imul   %edx,%edx
		mov    0x20(%edi),%ecx
		mov    0x2(%eax),%ebx
		sar    $0x8,%ecx
		sar    $0x10,%ebx
		sub    %ebx,%ecx
		mov    %ecx,%ebx
		imul   %ecx,%ebx
		add    %ebx,%edx
		cmp    $0x20000,%edx
		jle    jump_7a81a
		mov    0x12(%eax),%dl
		movw   $0x0,0x14(%eax)
		and    $0xbf,%dl
		mov    %dl,0x12(%eax)
		andb   $0xdf,0x7c(%edi)
	jump_7a81a:
		testb  $0x40,0x7c(%edi)
		je     jump_7a87c
		mov    0x94(%edi),%edx
		sar    $0x10,%edx
		neg    %edx
		lea    0x0(,%edx,8),%eax
		add    %eax,%edx
		mov    EXPORT_SYMBOL(game_traffic_nodes),%eax
		shl    $0x2,%edx
		mov    0x18(%edi),%ebx
		add    %edx,%eax
		sar    $0x8,%ebx
		movswl (%eax),%edx
		sub    %edx,%ebx
		mov    %ebx,%edx
		imul   %edx,%edx
		mov    0x2(%eax),%ecx
		mov    0x20(%edi),%ebx
		sar    $0x10,%ecx
		sar    $0x8,%ebx
		sub    %ecx,%ebx
		imul   %ebx,%ebx
		add    %ebx,%edx
		cmp    $0x20000,%edx
		jle    jump_7a87c
		mov    0x12(%eax),%bh
		movw   $0x0,0x14(%eax)
		and    $0xbf,%bh
		mov    %bh,0x12(%eax)
		andb   $0xbf,0x7c(%edi)
	jump_7a87c:
		add    $0x4c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
thing_unkn_change_speed:	/* 0x07A888 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		mov    %eax,%ecx
		and    $0xffff,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x14(%ecx),%dx
		lea    0x0(,%edx,4),%edi
		mov    things,%esi
		sub    %edx,%edi
		shl    $0x3,%eax
		shl    $0x6,%edi
		add    %eax,%esi
		add    %edx,%edi
		xor    %edx,%edx
		mov    0x14(%esi),%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x6,%eax
		add    %edx,%eax
		add    %edi,%edi
		add    %eax,%eax
		sar    $0x8,%edi
		sar    $0x8,%eax
		add    %edi,%eax
		add    $0x40,%eax
		imul   %eax,%eax
		mov    0x18(%ecx),%edx
		mov    0x18(%esi),%edi
		sub    %edi,%edx
		mov    %edx,%edi
		sar    $0x8,%edi
		imul   %edi,%edi
		mov    0x20(%esi),%ebp
		mov    0x20(%ecx),%edx
		sub    %ebp,%edx
		sar    $0x8,%edx
		imul   %edx,%edx
		lea    0x100(%eax),%esi
		add    %edi,%edx
		cmp    %esi,%edx
		jle    jump_7a91a
		add    %bx,0x38(%ecx)
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_7a91a:
		sub    $0x100,%eax
		cmp    %eax,%edx
		jge    jump_7a927
		sub    %bx,0x38(%ecx)
	jump_7a927:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_train_unkn_st18_func_2)	/* 0x07A92C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x10,%esp
		mov    %eax,%esi
		mov    0x60(%eax),%ax
		mov    %ax,0xc(%esp)
		mov    0xa(%esp),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		jle    jump_7a97e
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edi
		shl    $0x3,%eax
		add    %eax,%edi
		mov    0x18(%edi),%ebx
		mov    0x1c(%edi),%eax
		mov    0x20(%edi),%ecx
		add    $0xf00,%eax
		sar    $0x8,%ebx
		sar    $0x3,%eax
		sar    $0x8,%ecx
		mov    %eax,(%esp)
	jump_7a97e:
		mov    0x18(%esi),%ebp
		sar    $0x8,%ebp
		sub    %ebp,%ebx
		mov    %ebx,%edx
		imul   %ebx,%edx
		mov    0x20(%esi),%eax
		sar    $0x8,%eax
		sub    %eax,%ecx
		mov    %ecx,%eax
		imul   %ecx,%eax
		movw   $0x546,0x5a(%esi)
		add    %eax,%edx
		mov    %ebx,%ebp
		mov    %edx,0x4(%esp)
		mov    0x3c(%esi),%dx
		mov    %ecx,0x8(%esp)
		test   %dx,%dx
		je     jump_7aade
		xor    %edx,%edx
		mov    0x3c(%esi),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		xor    %ecx,%ecx
		add    %edx,%eax
		mov    things,%edx
		mov    0x3c(%esi),%cx
		mov    0x5a(%edx,%eax,8),%ax
		mov    %ax,0x5a(%esi)
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		shl    $0x2,%eax
		add    %ecx,%eax
		mov    0xc(%esi),%ebx
		mov    0xc(%edx,%eax,8),%eax
		and    $0x8000000,%ebx
		and    $0x8000000,%eax
		cmp    %ebx,%eax
		je     jump_7aad0
		orb    $0x8,0xf(%esi)
		mov    0x4c(%edi),%ecx
		sar    $0x10,%ecx
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		shl    $0x2,%eax
		add    %ecx,%eax
		mov    0x4c(%edx,%eax,8),%ecx
		sar    $0x10,%ecx
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		shl    $0x2,%eax
		add    %ecx,%eax
		mov    0x4c(%edx,%eax,8),%ecx
		sar    $0x10,%ecx
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		shl    $0x2,%eax
		add    %ecx,%eax
		mov    0x4c(%edx,%eax,8),%ecx
		sar    $0x10,%ecx
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		shl    $0x2,%eax
		add    %ecx,%eax
		mov    0x4e(%edx,%eax,8),%ax
		movw   $0x15,0xa(%esi)
		mov    0x7e(%esi),%bx
		mov    %ax,0x60(%esi)
		test   %bx,%bx
		je     jump_7aa93
		push   $0x1
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x62,%edx
		mov    %esi,%eax
		call   ac_play_dist_sample
	jump_7aa93:
		xor    %edx,%edx
		mov    0x3c(%esi),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		mov    0x7e(%eax),%dx
		mov    %dx,0x7e(%esi)
		mov    0x80(%eax),%ax
		movw   $0x0,0x5a(%esi)
		mov    %ax,0x80(%esi)
		jmp    jump_7aade
	jump_7aad0:
		mov    $0xc8,%ebx
		mov    %ecx,%edx
		mov    %esi,%eax
		call   thing_unkn_change_speed
	jump_7aade:
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0x15,%eax
		je     jump_7abbd
		cmpl   $0x40000,0x4(%esp)
		jge    jump_7abbd
		mov    0xa(%esp),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jle    jump_7abbd
		mov    0x4a(%edi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_7abb5
		mov    0x36(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_7abad
		orb    $0x8,0xf(%esi)
		mov    0x4c(%edi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		mov    0x4c(%edx,%eax,8),%ecx
		sar    $0x10,%ecx
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		shl    $0x2,%eax
		add    %ecx,%eax
		mov    0x4c(%edx,%eax,8),%ecx
		sar    $0x10,%ecx
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		shl    $0x2,%eax
		add    %ecx,%eax
		mov    0x4c(%edx,%eax,8),%ecx
		sar    $0x10,%ecx
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		shl    $0x2,%eax
		add    %ecx,%eax
		mov    0x4e(%edx,%eax,8),%ax
		movw   $0x13,0xa(%esi)
		mov    %ax,0x60(%esi)
		mov    0x68(%edi),%ax
		mov    %ax,0x7e(%esi)
		mov    0x6a(%edi),%ax
		movw   $0x0,0x5a(%esi)
		mov    %ax,0x80(%esi)
		jmp    jump_7abbd
	jump_7abad:
		movw   $0x0,0x5a(%esi)
		jmp    jump_7abbd
	jump_7abb5:
		mov    0x4c(%edi),%ax
		mov    %ax,0x60(%esi)
	jump_7abbd:
		cmpl   $0x4000,0x4(%esp)
		jle    jump_7ac24
		mov    0x8(%esp),%edx
		imul   %edx,%edx
		mov    0x1c(%esi),%ecx
		mov    (%esp),%eax
		sar    $0x6,%ecx
		sar    $0x6,%eax
		sub    %ecx,%eax
		mov    %eax,%ecx
		mov    %ebp,%eax
		imul   %ebp,%eax
		add    %eax,%edx
		mov    %ecx,%eax
		imul   %ecx,%eax
		call   ac_arctan
		sub    $0x400,%eax
		movswl %ax,%edx
		cmp    $0x64,%edx
		jle    jump_7ac04
		mov    $0x64,%eax
		jmp    jump_7ac0e
	jump_7ac04:
		cmp    $0xffffff9c,%edx
		jge    jump_7ac0e
		mov    $0xffffff9c,%eax
	jump_7ac0e:
		test   %ecx,%ecx
		jge    jump_7ac20
		mov    %eax,%ecx
		mov    %ax,0x64(%esi)
		neg    %ecx
		mov    %cx,0x64(%esi)
		jmp    jump_7ac24
	jump_7ac20:
		mov    %ax,0x64(%esi)
	jump_7ac24:
		mov    0x8(%esp),%edx
		mov    %ebp,%eax
		call   ac_arctan
		mov    0x66(%esi),%dx
		sub    %eax,%edx
		mov    %edx,%eax
		movswl %dx,%edx
		cmp    $0xfffffc00,%edx
		jge    jump_7ac47
		add    $0x8,%ah
		jmp    jump_7ac55
	jump_7ac47:
		cmp    $0x400,%edx
		jle    jump_7ac55
		sub    $0x800,%eax
	jump_7ac55:
		movswl %ax,%edx
		test   %edx,%edx
		jge    jump_7ac8e
		cmp    $0xffffff9c,%edx
		jge    jump_7ac67
		movw   $0x0,0x38(%esi)
	jump_7ac67:
		movswl %ax,%edx
		cmp    $0xffffffce,%edx
		jle    jump_7ac77
		mov    %eax,%edx
		neg    %edx
		add    %edx,%edx
		jmp    jump_7accc
	jump_7ac77:
		mov    0x36(%esi),%edx
		sar    $0x10,%edx
		mov    $0x800,%ebx
		sar    $0x3,%edx
		sub    %edx,%ebx
		mov    %ebx,%edx
		sar    $0x2,%edx
		jmp    jump_7accc
	jump_7ac8e:
		jle    jump_7acd0
		cmp    $0x64,%edx
		jle    jump_7ac9b
		movw   $0x0,0x38(%esi)
	jump_7ac9b:
		movswl %ax,%edx
		cmp    $0x32,%edx
		jge    jump_7acb5
		mov    %eax,%edx
		add    %eax,%edx
		mov    %edx,%edi
		mov    %dx,0x62(%esi)
		neg    %edi
		mov    %di,0x62(%esi)
		jmp    jump_7acd0
	jump_7acb5:
		mov    0x36(%esi),%edx
		sar    $0x10,%edx
		mov    $0x800,%ebx
		sar    $0x3,%edx
		sub    %edx,%ebx
		mov    %ebx,%edx
		sar    $0x2,%edx
		neg    %edx
	jump_7accc:
		mov    %dx,0x62(%esi)
	jump_7acd0:
		cwtl
		cmp    $0x200,%eax
		jg     jump_7acdd
		cmp    $0xfffffe00,%eax
	jump_7acdd:
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_train_unkn_st18_func_1)	/* 0x07ACE8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x10,%esp
		mov    %eax,%esi
		mov    0x60(%eax),%ax
		mov    %ax,0xc(%esp)
		mov    0xa(%esp),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		jle    jump_7ad3a
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edi
		shl    $0x3,%eax
		add    %eax,%edi
		mov    0x18(%edi),%ebp
		mov    0x1c(%edi),%eax
		mov    0x20(%edi),%ebx
		add    $0xf00,%eax
		sar    $0x8,%ebp
		sar    $0x3,%eax
		sar    $0x8,%ebx
		mov    %eax,(%esp)
	jump_7ad3a:
		mov    0x18(%esi),%eax
		sar    $0x8,%eax
		sub    %eax,%ebp
		mov    %ebp,0x8(%esp)
		mov    0x8(%esp),%edx
		imul   %edx,%edx
		mov    0x20(%esi),%ebp
		sar    $0x8,%ebp
		sub    %ebp,%ebx
		mov    %ebx,%eax
		imul   %ebx,%eax
		add    %eax,%edx
		movw   $0xfaba,0x5a(%esi)
		mov    %edx,0x4(%esp)
		mov    0x6a(%esi),%dx
		mov    %ebx,%ebp
		test   %dx,%dx
		je     jump_7aea5
		mov    0x68(%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		mov    0x68(%esi),%ebx
		mov    0x5a(%edx,%eax,8),%ax
		sar    $0x10,%ebx
		mov    %ax,0x5a(%esi)
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    0xc(%edx,%eax,8),%eax
		mov    0xc(%esi),%ebx
		and    $0x8000000,%eax
		and    $0x8000000,%ebx
		cmp    %eax,%ebx
		je     jump_7ae93
		mov    0x4a(%edi),%ebx
		sar    $0x10,%ebx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    0x4a(%edx,%eax,8),%ebx
		sar    $0x10,%ebx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    0x4a(%edx,%eax,8),%ebx
		sar    $0x10,%ebx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    0x4a(%edx,%eax,8),%ebx
		sar    $0x10,%ebx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    0x4c(%edx,%eax,8),%ax
		mov    %ax,0x60(%esi)
		mov    0xf(%esi),%ah
		and    $0xf7,%ah
		mov    0x7e(%esi),%bx
		mov    %ah,0xf(%esi)
		test   %bx,%bx
		je     jump_7ae50
		push   $0x1
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x62,%edx
		mov    %esi,%eax
		call   ac_play_dist_sample
	jump_7ae50:
		mov    0x68(%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		movw   $0x15,0xa(%esi)
		mov    0x7e(%eax),%dx
		mov    %dx,0x7e(%esi)
		mov    0x80(%eax),%ax
		movw   $0x0,0x5a(%esi)
		mov    %ax,0x80(%esi)
		jmp    jump_7aea5
	jump_7ae93:
		mov    $0xffffff38,%ebx
		xor    %edx,%edx
		mov    %esi,%eax
		mov    0x6a(%esi),%dx
		call   thing_unkn_change_speed
	jump_7aea5:
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0x15,%eax
		je     jump_7af84
		cmpl   $0x40000,0x4(%esp)
		jge    jump_7af84
		mov    0xa(%esp),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jle    jump_7af84
		mov    0x4c(%edi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_7af7c
		mov    0x36(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_7af74
		andb   $0xf7,0xf(%esi)
		mov    0x4a(%edi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		mov    0x4a(%edx,%eax,8),%ebx
		sar    $0x10,%ebx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    0x4a(%edx,%eax,8),%ebx
		sar    $0x10,%ebx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    0x4a(%edx,%eax,8),%ebx
		sar    $0x10,%ebx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    0x4c(%edx,%eax,8),%ax
		movw   $0x13,0xa(%esi)
		mov    %ax,0x60(%esi)
		mov    0x68(%edi),%ax
		mov    %ax,0x7e(%esi)
		mov    0x6a(%edi),%ax
		movw   $0x0,0x5a(%esi)
		mov    %ax,0x80(%esi)
		jmp    jump_7af84
	jump_7af74:
		movw   $0x0,0x5a(%esi)
		jmp    jump_7af84
	jump_7af7c:
		mov    0x4e(%edi),%ax
		mov    %ax,0x60(%esi)
	jump_7af84:
		cmpl   $0x4000,0x4(%esp)
		jle    jump_7afeb
		mov    %ebp,%edx
		imul   %ebp,%edx
		mov    0x1c(%esi),%ebx
		mov    (%esp),%eax
		sar    $0x6,%ebx
		sar    $0x6,%eax
		sub    %ebx,%eax
		mov    %eax,%ebx
		mov    0x8(%esp),%eax
		imul   %eax,%eax
		add    %eax,%edx
		mov    %ebx,%eax
		imul   %ebx,%eax
		call   ac_arctan
		sub    $0x400,%eax
		movswl %ax,%edx
		cmp    $0x64,%edx
		jle    jump_7afcb
		mov    $0x64,%eax
		jmp    jump_7afd5
	jump_7afcb:
		cmp    $0xffffff9c,%edx
		jge    jump_7afd5
		mov    $0xffffff9c,%eax
	jump_7afd5:
		test   %ebx,%ebx
		jle    jump_7afe7
		mov    %eax,%ecx
		mov    %ax,0x64(%esi)
		neg    %ecx
		mov    %cx,0x64(%esi)
		jmp    jump_7afeb
	jump_7afe7:
		mov    %ax,0x64(%esi)
	jump_7afeb:
		mov    0x8(%esp),%eax
		mov    %ebp,%edx
		call   ac_arctan
		add    $0x4,%ah
		and    $0x7,%ah
		mov    %eax,%edx
		mov    0x66(%esi),%ax
		sub    %edx,%eax
		movswl %ax,%edx
		cmp    $0xfffffc00,%edx
		jge    jump_7b014
		add    $0x8,%ah
		jmp    jump_7b022
	jump_7b014:
		cmp    $0x400,%edx
		jle    jump_7b022
		sub    $0x800,%eax
	jump_7b022:
		movswl %ax,%edx
		test   %edx,%edx
		jge    jump_7b050
		cmp    $0xffffff9c,%edx
		jge    jump_7b034
		movw   $0x0,0x38(%esi)
	jump_7b034:
		movswl %ax,%edx
		cmp    $0xffffffce,%edx
		jle    jump_7b048
		mov    %eax,%edx
		neg    %edx
		add    %edx,%edx
		mov    %dx,0x62(%esi)
		jmp    jump_7b07d
	jump_7b048:
		movw   $0x1e0,0x62(%esi)
		jmp    jump_7b07d
	jump_7b050:
		jle    jump_7b07d
		cmp    $0x64,%edx
		jle    jump_7b05d
		movw   $0x0,0x38(%esi)
	jump_7b05d:
		movswl %ax,%edx
		cmp    $0x32,%edx
		jge    jump_7b077
		mov    %eax,%edx
		add    %eax,%edx
		mov    %edx,%edi
		mov    %dx,0x62(%esi)
		neg    %edi
		mov    %di,0x62(%esi)
		jmp    jump_7b07d
	jump_7b077:
		movw   $0xfe20,0x62(%esi)
	jump_7b07d:
		cwtl
		cmp    $0x200,%eax
		jg     jump_7b08a
		cmp    $0xfffffe00,%eax
	jump_7b08a:
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_check_two_vehicles)	/* 0x07B0A0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x1c,%esp
		mov    %eax,%ecx
		mov    %edx,%ebx
		mov    0x60(%eax),%eax
		sar    $0x10,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0x14,%eax
		jg     jump_7b25a
		mov    0x52(%ecx),%esi
		sar    $0x10,%esi
		lea    0x0(,%esi,8),%eax
		mov    $EXPORT_SYMBOL(local_mats),%edx
		add    %esi,%eax
		xor    %esi,%esi
		shl    $0x2,%eax
		mov    0x14(%ecx),%si
		add    %eax,%edx
		mov    0x18(%ecx),%eax
		lea    0x0(,%esi,4),%edi
		mov    %eax,(%esp)
		mov    0x1c(%ecx),%eax
		sub    %esi,%edi
		mov    %eax,0x18(%esp)
		mov    0x20(%ecx),%eax
		shl    $0x6,%edi
		mov    %eax,0x4(%esp)
		mov    0x36(%ecx),%eax
		add    %esi,%edi
		sar    $0x10,%eax
		add    %edi,%edi
		mov    %eax,%esi
		sar    $0x8,%edi
		sar    $0x3,%esi
		sar    $0x4,%eax
		add    %edi,%esi
		lea    (%esi,%eax,1),%edi
		mov    0x8(%edx),%eax
		neg    %eax
		shl    $0x2,%eax
		mov    %eax,%esi
		imul   %edi,%esi
		mov    0x20(%edx),%edx
		neg    %edx
		shl    $0x2,%edx
		imul   %edx,%edi
		mov    (%esp),%ebp
		sar    $0x8,%esi
		sar    $0x2,%eax
		add    %ebp,%esi
		mov    0x4(%esp),%ebp
		sar    $0x8,%edi
		sar    $0x2,%edx
		add    %ebp,%edi
		sub    %edx,%esi
		add    %eax,%edi
		cmp    %ecx,%ebx
		je     jump_7b25a
		testb  $0x4,0xc(%ebx)
		jne    jump_7b25a
		mov    0x18(%esp),%edx
		mov    0x1c(%ebx),%eax
		sub    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0x800,%eax
		jge    jump_7b25a
		mov    0x18(%ecx),%edx
		mov    0x18(%ebx),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		cmp    %eax,%edx
		jne    jump_7b19e
		mov    0x20(%ecx),%edx
		mov    0x20(%ebx),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		cmp    %eax,%edx
		jne    jump_7b19e
		mov    $0x1,%al
		jmp    jump_7b25c
	jump_7b19e:
		mov    0x52(%ebx),%ecx
		sar    $0x10,%ecx
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		shl    $0x2,%eax
		xor    %ecx,%ecx
		add    $EXPORT_SYMBOL(local_mats),%eax
		mov    0x14(%ebx),%cx
		mov    0x8(%eax),%edx
		mov    0x20(%eax),%ebp
		lea    0x0(,%ecx,4),%eax
		sub    %ecx,%eax
		neg    %edx
		mov    %eax,%ecx
		shl    $0x2,%edx
		shl    $0x7,%ecx
		mov    %edx,%eax
		sar    $0x9,%ecx
		imul   %ecx,%eax
		mov    0x18(%ebx),%edx
		sar    $0x8,%eax
		neg    %ebp
		add    %eax,%edx
		shl    $0x2,%ebp
		mov    %edx,0x8(%esp)
		mov    %ebp,%edx
		imul   %ecx,%edx
		mov    0x20(%ebx),%ebp
		sar    $0x8,%edx
		add    %edx,%ebp
		mov    %ebp,0xc(%esp)
		mov    0x18(%ebx),%ebp
		sub    %eax,%ebp
		mov    0xc(%esp),%eax
		sub    %edi,%eax
		sar    $0x8,%eax
		imul   %eax,%eax
		mov    %ebp,0x10(%esp)
		mov    0x20(%ebx),%ebp
		mov    0x10(%esp),%ebx
		sub    %esi,%ebx
		sar    $0x8,%ebx
		imul   %ebx,%ebx
		sub    %edx,%ebp
		mov    0x8(%esp),%edx
		sub    %esi,%edx
		sar    $0x8,%edx
		imul   %edx,%edx
		add    %eax,%edx
		mov    %ebp,%eax
		sub    %edi,%eax
		sar    $0x8,%eax
		imul   %eax,%eax
		add    %eax,%ebx
		mov    %ebx,0x14(%esp)
		cmp    %ebx,%edx
		jl     jump_7b248
		mov    %ebx,%edx
	jump_7b248:
		imul   %ecx,%ecx
		cmp    %ecx,%edx
		jge    jump_7b25a
		mov    $0x1,%al
		add    $0x1c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_7b25a:
		xor    %al,%al
	jump_7b25c:
		add    $0x1c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_check_vehicle_col)	/* 0x07B268 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x3c,%esp
		mov    %eax,%ecx
		mov    0x60(%eax),%eax
		sar    $0x10,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0x14,%eax
		jle    jump_7b288
		jmp    jump_check_vehicle_col_end
	jump_7b288:
		xor    %ebx,%ebx
		mov    0x14(%ecx),%bx
		lea    0x0(,%ebx,4),%edi
		sub    %ebx,%edi
		shl    $0x6,%edi
		add    %ebx,%edi
		imul   %ebx,%ebx
		mov    0x52(%ecx),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(local_mats),%esi
		shl    $0x2,%eax
		add    %eax,%esi
		mov    0x18(%ecx),%eax
		mov    %eax,0x28(%esp)
		mov    0x1c(%ecx),%eax
		mov    %eax,0x38(%esp)
		mov    0x20(%ecx),%eax
		mov    %eax,0x2c(%esp)
		mov    0x36(%ecx),%eax
		sar    $0x10,%eax
		add    %edi,%edi
		mov    %eax,%edx
		sar    $0x8,%edi
		sar    $0x3,%edx
		sar    $0x4,%eax
		add    %edx,%edi
		add    %eax,%edi
		mov    0x8(%esi),%eax
		neg    %eax
		shl    $0x2,%eax
		mov    0x20(%esi),%edx
		mov    %eax,%esi
		imul   %edi,%esi
		neg    %edx
		shl    $0x2,%edx
		imul   %edx,%edi
		mov    0x28(%esp),%ebp
		mov    %ebx,0x24(%esp)
		sar    $0x8,%esi
		sar    $0x2,%eax
		add    %esi,%ebp
		mov    0x2c(%esp),%esi
		sar    $0x8,%edi
		mov    %ebp,0x34(%esp)
		add    %edi,%esi
		sar    $0x2,%edx
		mov    %esi,0x30(%esp)
		mov    %ebp,%esi
		mov    0x30(%esp),%edi
		sub    %edx,%esi
		add    %eax,%edi
		mov    %esi,0x34(%esp)
		mov    %edi,%edx
		mov    %esi,%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		mov    %edx,(%esp)
		lea    -0x2(%eax),%edx
		mov    %edi,0x30(%esp)
		add    $0x3,%eax
		mov    %edx,0x14(%esp)
		mov    %eax,0x10(%esp)
	jump_7b34d:
		mov    0x14(%esp),%ebp
		test   %ebp,%ebp
		jl     jump_7b370
		cmp    $0x80,%ebp
		jge    jump_7b370
		jmp    jump_7b386
	jump_7b35f:
		mov    0x20(%esp),%ebx
		inc    %ebx
		mov    0x18(%esp),%esi
		mov    %ebx,0x20(%esp)
		cmp    %esi,%ebx
		jl     jump_7b39e

	jump_7b370:
		mov    0x14(%esp),%edi
		inc    %edi
		mov    0x10(%esp),%ebp
		mov    %edi,0x14(%esp)
		cmp    %ebp,%edi
		jl     jump_7b34d
		jmp    jump_7b5db
	jump_7b386:
		mov    (%esp),%eax
		sub    $0x2,%eax
		mov    %eax,0x20(%esp)
		mov    (%esp),%eax
		add    $0x3,%eax
		mov    %ebp,0x1c(%esp)
		mov    %eax,0x18(%esp)
	jump_7b39e:
		mov    0x20(%esp),%edx
		test   %edx,%edx
		jl     jump_7b35f
		cmp    $0x80,%edx
		jge    jump_7b35f
		mov    %edx,%eax
		mov    0x1c(%esp),%esi
		shl    $0x7,%eax
		add    %esi,%eax
		imul   $0x12,%eax,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0x8(%edx,%eax,1),%ax
		test   %ax,%ax
		je     jump_7b35f
	jump_7b3cc:
		cwtl
		test   %eax,%eax
		jg     jump_7b5a2
		imul   $0x3c,%eax,%eax
		mov    EXPORT_SYMBOL(sthings),%ebx
		add    %eax,%ebx
		xor    %eax,%eax
		mov    0x9(%ebx),%al
		cmp    $0xf,%eax
		jne    jump_7b40b
		xor    %eax,%eax
		mov    0x8(%ebx),%al
		cmp    $0xc,%eax
		jne    jump_7b40b
		mov    0x26(%ebx),%eax
		sar    $0x10,%eax
		cmp    $0x3e7,%eax
		je     jump_7b40b
		test   %eax,%eax
		jle    jump_7b40b
		movw   $0x0,0x28(%ebx)
	jump_7b40b:
		mov    0x2(%ebx),%ax
		test   %ax,%ax
		jne    jump_7b3cc
		jmp    jump_7b35f
	jump_7b419:
		testb  $0x10,0x44(%ebx)
		jne    jump_7b40b
		xor    %eax,%eax
		mov    0xa(%ebx),%ax
		cmp    $0xd,%eax
		je     jump_7b40b
		testb  $0x2,0xc(%ebx)
		jne    jump_7b40b
		cmp    $0x24,%eax
		je     jump_7b40b
		mov    0x1c(%ebx),%eax
		mov    0x38(%esp),%edi
		sar    $0x3,%eax
		sub    %edi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0x800,%eax
		jge    jump_7b40b
		mov    0x28(%esp),%ebp
		mov    0x18(%ebx),%eax
		sub    %ebp,%eax
		sar    $0x8,%eax
		imul   %eax,%eax
		mov    0x2c(%esp),%esi
		mov    0x20(%ebx),%edx
		sub    %esi,%edx
		sar    $0x8,%edx
		imul   %edx,%edx
		add    %eax,%edx
		xor    %eax,%eax
		mov    0x14(%ebx),%ax
		imul   %eax,%eax
		add    0x24(%esp),%eax
		cmp    %eax,%edx
		jge    jump_7b40b
		mov    %ecx,%edx
		mov    %ebx,%eax
		call   ac_person_hit_by_car
		mov    0x2(%ebx),%ax
		test   %ax,%ax
		jne    jump_7b3cc
		jmp    jump_7b35f
	jump_7b499:
		cmp    %ecx,%ebx
		je     jump_7b40b
		testb  $0x4,0xc(%ebx)
		jne    jump_7b40b
		mov    0x38(%esp),%ebp
		mov    0x1c(%ebx),%eax
		sub    %ebp,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0x800,%eax
		jge    jump_7b40b
		mov    0x52(%ebx),%eax
		sar    $0x10,%eax
		imul   $0x24,%eax,%eax
		add    $EXPORT_SYMBOL(local_mats),%eax
		mov    0x8(%eax),%edi
		mov    0x20(%eax),%edx
		xor    %eax,%eax
		mov    0x14(%ebx),%ax
		imul   $0x180,%eax,%esi
		neg    %edi
		shl    $0x2,%edi
		sar    $0x9,%esi
		mov    %edi,%eax
		imul   %esi,%eax
		neg    %edx
		shl    $0x2,%edx
		imul   %esi,%edx
		mov    0x18(%ebx),%ebp
		mov    0x18(%ebx),%edi
		sar    $0x8,%eax
		sar    $0x8,%edx
		add    %eax,%edi
		sub    %eax,%ebp
		mov    0x34(%esp),%eax
		mov    %edi,0x4(%esp)
		mov    %ebp,0x8(%esp)
		mov    0x20(%ebx),%edi
		mov    0x20(%ebx),%ebp
		add    %edx,%edi
		sub    %edx,%ebp
		mov    0x4(%esp),%edx
		sub    %eax,%edx
		sar    $0x8,%edx
		imul   %edx,%edx
		mov    0x30(%esp),%eax
		sub    %eax,%edi
		mov    %edi,%eax
		sar    $0x8,%eax
		imul   %eax,%eax
		lea    (%edx,%eax,1),%edi
		mov    0x8(%esp),%edx
		sub    0x34(%esp),%edx
		sar    $0x8,%edx
		imul   %edx,%edx
		mov    0x30(%esp),%eax
		sub    %eax,%ebp
		mov    %ebp,%eax
		sar    $0x8,%eax
		imul   %eax,%eax
		add    %eax,%edx
		mov    %edx,0xc(%esp)
		cmp    %edx,%edi
		jl     jump_7b564
		mov    %edx,%edi
	jump_7b564:
		imul   %esi,%esi
		cmp    %esi,%edi
		jge    jump_7b40b
		cmp    %ecx,%ebx
		jae    jump_7b584
		mov    %ecx,%edx
		mov    %ebx,%eax
		call   ac_check_two_vehicles
		test   %al,%al
		jne    jump_7b40b
	jump_7b584:
		movb   $0x3,0x3f(%ecx)
		movw   $0x0,0x5a(%ecx)
		mov    $0x1,%dl
		movw   $0x0,0x62(%ecx)
		mov    %dl,%al
		add    $0x3c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_7b5a2:
		imul   $0xa8,%eax,%eax
		mov    things,%ebx
		add    %eax,%ebx
		mov    0x9(%ebx),%al
		cmp    $0x2,%al
		jb     jump_7b40b
		jbe    jump_7b499
		cmp    $0x3,%al
		je     jump_7b419
		mov    0x2(%ebx),%ax
		test   %ax,%ax
		jne    jump_7b3cc
		jmp    jump_7b35f
	jump_7b5db:
		mov    0x20(%ecx),%eax
		mov    0x18(%ecx),%edx
		sar    $0x10,%eax
		sar    $0x10,%edx
		shl    $0x7,%eax
		add    %eax,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0x8(%edx,%eax,2),%bx
		test   %bx,%bx
		je     jump_check_vehicle_col_end
		xor    %esi,%esi
	jump_7b60b:
		movswl %bx,%ebx
		test   %ebx,%ebx
		jle    jump_7b65a
		imul   $0xa8,%ebx,%ebx
		mov    things,%eax
		add    %ebx,%eax
		xor    %edx,%edx
		mov    0x9(%eax),%dl
		mov    0x2(%eax),%bx
		cmp    $0x2,%edx
		jne    jump_7b667
		cmp    %ecx,%eax
		jbe    jump_7b667
		testb  $0x4,0xc(%eax)
		jne    jump_7b667
		mov    0x38(%esp),%edx
		mov    0x1c(%eax),%eax
		sub    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0x800,%eax
		jge    jump_7b667
		movb   $0x3,0x3f(%ecx)
		mov    %si,0x5a(%ecx)
		mov    %si,0x62(%ecx)
		jmp    jump_7b667
	jump_7b65a:
		imul   $0x3c,%ebx,%ebx
		mov    EXPORT_SYMBOL(sthings),%eax
		mov    0x2(%ebx,%eax,1),%bx
	jump_7b667:
		test   %bx,%bx
		jne    jump_7b60b
	jump_check_vehicle_col_end:	/* 0x7b66c */
		xor    %dl,%dl
		mov    %dl,%al
		add    $0x3c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_move_flying_vehicle)	/* 0x07B67C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    %eax,%esi
		xor    %eax,%eax
		mov    gameturn,%edx
		mov    0x16(%esi),%ax
		add    %edx,%eax
		test   $0x3,%al
		jne    jump_7b6a0
		mov    %esi,%eax
		call   swoosh_veh
	jump_7b6a0:
		mov    0x60(%esi),%edx
		mov    0x64(%esi),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		sar    $0x3,%edx
		add    %edx,%eax
		mov    %ax,0x66(%esi)
		add    $0x8,%ah
		and    $0x7,%ah
		mov    %ax,0x66(%esi)
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0x45,%eax
		je     jump_7b6fd
		mov    0x68(%esi),%ax
		sub    0x62(%esi),%ax
		cwtl
		cmp    $0xffffff9c,%eax
		jge    jump_7b6df
		addw   $0x64,0x68(%esi)
		jmp    jump_7b6fd
	jump_7b6df:
		cmp    $0x64,%eax
		jle    jump_7b6eb
		subw   $0x64,0x68(%esi)
		jmp    jump_7b6fd
	jump_7b6eb:
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0x32,%eax
		jle    jump_7b6fd
		mov    0x62(%esi),%ax
		mov    %ax,0x68(%esi)
	jump_7b6fd:
		cmpl   $0x0,0x98(%esi)
		jne    jump_7b70f
		cmpl   $0x0,0x9c(%esi)
		je     jump_7b75a
	jump_7b70f:
		mov    0x98(%esi),%edx
		mov    0x66(%esi),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		add    %edx,%eax
		mov    %ax,0x68(%esi)
		mov    0x98(%esi),%edi
		mov    0x9c(%esi),%eax
		add    %eax,%edi
		mov    %edi,%eax
		mov    0x9c(%esi),%ebp
		sar    $0x4,%eax
		sub    %eax,%ebp
		mov    %edi,0x98(%esi)
		mov    %ebp,%eax
		mov    %ebp,%edx
		sar    $0x6,%eax
		mov    %ebp,0x9c(%esi)
		sub    %eax,%edx
		mov    %edx,0x9c(%esi)
	jump_7b75a:
		mov    0x52(%esi),%edi
		sar    $0x10,%edi
		lea    0x0(,%edi,8),%eax
		add    %edi,%eax
		mov    $EXPORT_SYMBOL(local_mats),%edi
		shl    $0x2,%eax
		add    %eax,%edi
		mov    0x66(%esi),%eax
		sar    $0x10,%eax
		sar    %eax
		neg    %eax
		movswl %ax,%ebx
		mov    0x66(%esi),%ax
		neg    %eax
		mov    %edi,%ecx
		movswl %ax,%edx
		xor    %eax,%eax
		call   rotate_obj
		cmpw   $0x0,0x64(%esi)
		je     jump_7b7aa
		mov    %edi,%eax
		mov    0x62(%esi),%ebx
		xor    %ecx,%ecx
		xor    %edx,%edx
		sar    $0x10,%ebx
		call   ac_rotate_object_axis
	jump_7b7aa:
		mov    0x8(%edi),%edx
		mov    0x36(%esi),%eax
		neg    %edx
		sar    $0x10,%eax
		imul   %edx,%eax
		sar    $0xa,%eax
		mov    %eax,0x2c(%esi)
		mov    0x36(%esi),%edx
		mov    0x20(%edi),%eax
		sar    $0x10,%edx
		neg    %eax
		imul   %edx,%eax
		sar    $0xa,%eax
		mov    %eax,0x34(%esi)
		mov    0x2c(%esi),%ebx
		mov    0x18(%esi),%eax
		add    %ebx,%eax
		mov    %eax,(%esp)
		mov    (%esp),%edx
		mov    0x1c(%esi),%ebx
		mov    0x20(%esi),%eax
		mov    0x34(%esi),%edi
		mov    0x30(%esi),%ecx
		add    %edi,%eax
		add    %ecx,%ebx
		mov    %eax,0x4(%esp)
		mov    %eax,%ecx
		mov    %esi,%eax
		call   ac_move_mapwho
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_move_vehicle)	/* 0x07B808 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    %eax,%esi
		xor    %eax,%eax
		mov    gameturn,%edx
		mov    0x16(%esi),%ax
		add    %edx,%eax
		xor    %ebp,%ebp
		test   $0x3,%al
		jne    jump_7b82e
		mov    %esi,%eax
		call   swoosh_veh
	jump_7b82e:
		xor    %eax,%eax
		mov    0x8(%esi),%al
		cmp    $0x1d,%eax
		je     jump_7b844
		cmp    $0x32,%eax
		je     jump_7b844
		mov    %esi,%eax
		call   ac_check_vehicle_col
	jump_7b844:
		mov    0x60(%esi),%edx
		mov    0x64(%esi),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		sar    $0x3,%edx
		add    %edx,%eax
		mov    %ax,0x66(%esi)
		add    $0x8,%ah
		and    $0x7,%ah
		mov    %ax,0x66(%esi)
		mov    0x62(%esi),%dx
		mov    0x68(%esi),%ax
		sub    %edx,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		mov    0x8(%esi),%al
		cmp    $0x1d,%eax
		jne    jump_7b881
		movw   $0x0,0x68(%esi)
		jmp    jump_7b8ae
	jump_7b881:
		movswl %dx,%eax
		cmp    $0xffffff9c,%eax
		jge    jump_7b890
		addw   $0x64,0x68(%esi)
		jmp    jump_7b8ae
	jump_7b890:
		cmp    $0x64,%eax
		jle    jump_7b89c
		subw   $0x64,0x68(%esi)
		jmp    jump_7b8ae
	jump_7b89c:
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0x32,%eax
		jle    jump_7b8ae
		mov    0x62(%esi),%ax
		mov    %ax,0x68(%esi)
	jump_7b8ae:
		mov    0x52(%esi),%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,8),%edi
		add    %eax,%edi
		mov    0x66(%esi),%eax
		sar    $0x10,%eax
		sar    %eax
		neg    %eax
		shl    $0x2,%edi
		movswl %ax,%ebx
		mov    0x66(%esi),%ax
		add    $EXPORT_SYMBOL(local_mats),%edi
		neg    %eax
		mov    %edi,%ecx
		movswl %ax,%edx
		xor    %eax,%eax
		call   rotate_obj
		cmpw   $0x0,0x64(%esi)
		je     jump_7b912
		mov    %edi,%eax
		mov    0x62(%esi),%ebx
		xor    %ecx,%ecx
		xor    %edx,%edx
		sar    $0x10,%ebx
		call   ac_rotate_object_axis
		test   %ebp,%ebp
		je     jump_7b912
		mov    %ebp,%eax
		mov    0x62(%esi),%ebx
		xor    %ecx,%ecx
		xor    %edx,%edx
		sar    $0x10,%ebx
		call   ac_rotate_object_axis
	jump_7b912:
		mov    0x8(%edi),%edx
		mov    0x36(%esi),%eax
		neg    %edx
		sar    $0x10,%eax
		imul   %edx,%eax
		sar    $0xa,%eax
		mov    %eax,0x2c(%esi)
		xor    %eax,%eax
		mov    0x8(%esi),%al
		cmp    $0x1d,%eax
		jne    jump_7b946
		mov    0x14(%edi),%edx
		mov    0x36(%esi),%eax
		neg    %edx
		sar    $0x10,%eax
		imul   %edx,%eax
		sar    $0xa,%eax
		mov    %eax,0x30(%esi)
		jmp    jump_7b94d
	jump_7b946:
		movl   $0x0,0x30(%esi)
	jump_7b94d:
		mov    0x20(%edi),%edx
		mov    0x36(%esi),%eax
		neg    %edx
		sar    $0x10,%eax
		imul   %edx,%eax
		sar    $0xa,%eax
		mov    0x64(%esi),%dx
		mov    %eax,0x34(%esi)
		test   %dx,%dx
		je     jump_7b990
		mov    %edi,%eax
		mov    0x62(%esi),%ebx
		xor    %ecx,%ecx
		xor    %edx,%edx
		sar    $0x10,%ebx
		call   ac_rotate_object_axis
		test   %ebp,%ebp
		je     jump_7b990
		mov    %ebp,%eax
		mov    0x62(%esi),%ebx
		xor    %ecx,%ecx
		xor    %edx,%edx
		sar    $0x10,%ebx
		call   ac_rotate_object_axis
	jump_7b990:
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0x36,%eax
		jne    jump_7b9c8
		mov    0x90(%esi),%eax
		mov    0x90(%esi),%edx
		mov    0x2c(%esi),%edi
		mov    0x34(%esi),%ebp
		shl    $0x10,%edx
		sar    $0x10,%eax
		sar    $0x10,%edx
		shl    $0x5,%eax
		shl    $0x5,%edx
		add    %eax,%edi
		add    %edx,%ebp
		mov    %edi,0x2c(%esi)
		mov    %ebp,0x34(%esi)
		jmp    jump_7b9fe
	jump_7b9c8:
		cmp    $0x38,%eax
		jne    jump_7b9fe
		testb  $0x2,0x7d(%esi)
		jne    jump_7b9fe
		mov    0x90(%esi),%edx
		mov    0x90(%esi),%eax
		mov    0x2c(%esi),%ebx
		mov    0x34(%esi),%ecx
		shl    $0x10,%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		shl    $0x5,%edx
		shl    $0x5,%eax
		sub    %edx,%ebx
		sub    %eax,%ecx
		mov    %ebx,0x2c(%esi)
		mov    %ecx,0x34(%esi)
	jump_7b9fe:
		mov    0x18(%esi),%eax
		mov    0x2c(%esi),%edx
		add    %edx,%eax
		mov    %eax,(%esp)
		mov    0x1c(%esi),%eax
		mov    0x30(%esi),%ebx
		mov    0x34(%esi),%ecx
		add    %eax,%ebx
		mov    0x20(%esi),%eax
		add    %ecx,%eax
		mov    (%esp),%edx
		mov    %eax,0x4(%esp)
		mov    %eax,%ecx
		mov    %esi,%eax
		call   ac_move_mapwho
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_set_passengers_location)	/* 0x07BA34 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		mov    things,%esi
		mov    0x45(%eax),%dl
		mov    0x5e(%eax),%bx
		and    $0xdf,%dl
		xor    %ecx,%ecx
		mov    %dl,0x45(%eax)
		test   %bx,%bx
		je     jump_7baa4
	jump_7ba52:
		xor    %edx,%edx
		mov    %cx,%dx
		cmp    $0x19a,%edx
		jge    jump_7baa4
		xor    %edx,%edx
		mov    %bx,%dx
		imul   $0xa8,%edx,%edx
		add    %esi,%edx
		mov    0x18(%eax),%ebx
		mov    %ebx,0x18(%edx)
		xor    %ebx,%ebx
		mov    0x8(%eax),%bl
		cmp    $0x32,%ebx
		jne    jump_7ba84
		mov    0x1c(%eax),%ebx
		sar    $0x3,%ebx
		jmp    jump_7ba87
	jump_7ba84:
		mov    0x1c(%eax),%ebx
	jump_7ba87:
		mov    %ebx,0x1c(%edx)
		mov    0x20(%eax),%ebx
		mov    %ebx,0x20(%edx)
		mov    0x60(%edx),%bx
		testb  $0x10,0xd(%edx)
		je     jump_7ba9e
		orb    $0x20,0x45(%eax)
	jump_7ba9e:
		inc    %ecx
		test   %bx,%bx
		jne    jump_7ba52
	jump_7baa4:
		xor    %edx,%edx
		mov    %cx,%dx
		cmp    $0x190,%edx
		jle    jump_7badf
		mov    0x5e(%eax),%bx
		xor    %ecx,%edx
		test   %bx,%bx
		je     jump_7badf
	jump_7babc:
		xor    %eax,%eax
		mov    %dx,%ax
		cmp    $0x64,%eax
		jge    jump_7badf
		and    $0xffff,%ebx
		imul   $0xa8,%ebx,%ebx
		mov    %esi,%eax
		mov    0x60(%ebx,%eax,1),%bx
		inc    %edx
		test   %bx,%bx
		jne    jump_7babc
	jump_7badf:
		mov    %esi,things
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_vehicle_goto_point_land)	/* 0x07BB78 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		mov    %eax,%ebx
		call   ac_set_passengers_location
		mov    0x20(%ebx),%eax
		sar    $0x8,%eax
		movswl %ax,%edx
		mov    0x18(%ebx),%eax
		sar    $0x8,%eax
		cwtl
		call   ac_alt_at_point
		shl    $0x3,%eax
		mov    0x1c(%ebx),%edx
		cmp    %edx,%eax
		jge    jump_7bbb2
		lea    -0x800(%edx),%ecx
		movw   $0x0,0x38(%ebx)
		mov    %ecx,0x1c(%ebx)
		jmp    jump_7bbb8
	jump_7bbb2:
		movw   $0x21,0xa(%ebx)
	jump_7bbb8:
		mov    0x62(%ebx),%eax
		sar    $0x10,%eax
		cmp    $0x14,%eax
		jle    jump_7bbcc
		subw   $0x14,0x64(%ebx)
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_7bbcc:
		cmp    $0xffffffec,%eax
		jge    jump_7bbd6
		addw   $0x14,0x64(%ebx)
	jump_7bbd6:
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
scan_max_height_ahead:	/* 0x07BBDC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x10,%esp
		mov    %eax,%ebp
		mov    0x2c(%eax),%edx
		mov    0x34(%eax),%ecx
		mov    %edx,%eax
		imul   %edx,%eax
		mov    %ecx,%ebx
		imul   %ecx,%ebx
		add    %ebx,%eax
		mov    $0xfffe7960,%edi
		call   ac_LbSqrL
		mov    %eax,%ebx
		mov    %eax,(%esp)
		test   %eax,%eax
		je     jump_7bd0c
		shl    $0x8,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %ecx,%edx
		shl    $0x8,%edx
		mov    %eax,0x4(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    0x18(%ebp),%esi
		mov    0x20(%ebp),%ecx
		sar    $0x8,%esi
		sar    $0x8,%ecx
		mov    %eax,0x8(%esp)
		xor    %ebx,%ebx
		jmp    jump_7bc4b
	jump_7bc3e:
		mov    0x4(%esp),%edx
		mov    0x8(%esp),%eax
		inc    %ebx
		add    %edx,%esi
		add    %eax,%ecx
	jump_7bc4b:
		xor    %eax,%eax
		mov    %bx,%ax
		cmp    $0x5,%eax
		jge    jump_7bc6c
		movswl %cx,%edx
		movswl %si,%eax
		call   ac_alt_at_point
		cmp    %edi,%eax
		jl     jump_7bc3e
		mov    %eax,%edi
		mov    %ebx,0xc(%esp)
		jmp    jump_7bc3e
	jump_7bc6c:
		cmpl   $0x2,(%esp)
		lea    0x0(,%edi,8),%eax
		mov    0x1c(%ebp),%ebx
		add    $0x19000,%eax
		sub    %ebx,%eax
		mov    %eax,%ebx
		xor    %eax,%eax
		mov    0xc(%esp),%ax
		mov    %eax,%edx
		imul   %eax,%edx
		sar    $0x3,%ebx
		mov    %ebx,%eax
		imul   %ebx,%eax
		shl    $0x10,%edx
		call   ac_arctan
		sub    $0x400,%eax
		movswl %ax,%edx
		cmp    $0xa0,%edx
		jle    jump_7bcb7
		mov    $0xa0,%eax
		jmp    jump_7bcc4
	jump_7bcb7:
		cmp    $0xffffff60,%edx
		jge    jump_7bcc4
		mov    $0xffffff60,%eax
	jump_7bcc4:
		test   %ebx,%ebx
		jge    jump_7bcd7
		movswl %ax,%edx
		mov    0x62(%ebp),%eax
		sar    %edx
		sar    $0x10,%eax
		sub    %edx,%eax
		jmp    jump_7bce4
	jump_7bcd7:
		cwtl
		mov    %eax,%edx
		mov    0x62(%ebp),%eax
		sar    %edx
		sar    $0x10,%eax
		add    %edx,%eax
	jump_7bce4:
		mov    %ax,0x64(%ebp)
		mov    0x62(%ebp),%eax
		sar    $0x10,%eax
		cmp    $0x8c,%eax
		jle    jump_7bcfd
		movw   $0x8c,0x64(%ebp)
		jmp    jump_7bd0a
	jump_7bcfd:
		cmp    $0xffffff74,%eax
		jge    jump_7bd0a
		movw   $0xff74,0x64(%ebp)
	jump_7bd0a:
		mov    %edi,%eax
	jump_7bd0c:
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_vehicle_goto_point_fly)	/* 0x07BD18 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		mov    %eax,%ebx
		call   scan_max_height_ahead
		mov    %ebx,%eax
		call   ac_set_passengers_location
		mov    0x18(%ebx),%eax
		mov    0x68(%ebx),%edx
		sar    $0x8,%eax
		sar    $0x10,%edx
		sub    %eax,%edx
		mov    0x6c(%ebx),%ecx
		mov    %edx,%eax
		mov    0x20(%ebx),%edx
		sar    $0x10,%ecx
		sar    $0x8,%edx
		sub    %edx,%ecx
		mov    %ecx,%edx
		mov    %eax,%ecx
		imul   %eax,%ecx
		mov    %edx,%esi
		imul   %edx,%esi
		add    %esi,%ecx
		cmp    $0x8000,%ecx
		jge    jump_7bd62
		movb   $0x7,0x3f(%ebx)
	jump_7bd62:
		call   ac_arctan
		mov    0x66(%ebx),%dx
		sub    %eax,%edx
		mov    %edx,%eax
		movswl %dx,%edx
		cmp    $0xfffffc00,%edx
		jge    jump_7bd7f
		add    $0x8,%ah
		jmp    jump_7bd8d
	jump_7bd7f:
		cmp    $0x400,%edx
		jle    jump_7bd8d
		sub    $0x800,%eax
	jump_7bd8d:
		cmp    $0x400000,%ecx
		jle    jump_7bd9d
		movw   $0x5e8,0x5a(%ebx)
		jmp    jump_7bdb3
	jump_7bd9d:
		cmp    $0x100000,%ecx
		jle    jump_7bdad
		movw   $0x400,0x5a(%ebx)
		jmp    jump_7bdb3
	jump_7bdad:
		movw   $0x200,0x5a(%ebx)
	jump_7bdb3:
		movswl %ax,%edx
		test   %edx,%edx
		jge    jump_7bdd7
		cmp    $0xffffffce,%edx
		jle    jump_7bdcc
		neg    %eax
		add    %eax,%eax
		mov    %ax,0x62(%ebx)
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_7bdcc:
		movw   $0x200,0x62(%ebx)
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_7bdd7:
		jle    jump_7bdf7
		cmp    $0x32,%edx
		jge    jump_7bdf1
		add    %eax,%eax
		mov    %eax,%edx
		mov    %ax,0x62(%ebx)
		neg    %edx
		mov    %dx,0x62(%ebx)
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_7bdf1:
		movw   $0xfe00,0x62(%ebx)
	jump_7bdf7:
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
person_clear_route_and_teleport_to_vehicle:	/* 0x07BDFC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		mov    %eax,%ebx
		mov    0x5e(%eax),%cx
		mov    0x16(%edx),%ax
		mov    %ax,0x5e(%ebx)
		movw   $0x0,0x6e(%edx)
		mov    %cx,0x60(%edx)
		mov    0x80(%edx),%ah
		mov    0xf(%edx),%cl
		and    $0xdf,%ah
		or     $0x12,%cl
		mov    %ah,0x80(%edx)
		mov    %edx,%eax
		mov    %cl,0xf(%edx)
		call   ac_delete_node
		mov    0x16(%ebx),%ax
		mov    %ax,0x5e(%edx)
		mov    0x18(%ebx),%eax
		mov    %eax,0x18(%edx)
		mov    0x1c(%ebx),%eax
		sar    $0x3,%eax
		mov    %eax,0x1c(%edx)
		mov    0x20(%ebx),%eax
		mov    %eax,0x20(%edx)
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
train_unkn_func_02:	/* 0x07BE58 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		mov    things,%ebp
		mov    %eax,%edi
		mov    EXPORT_SYMBOL(same_type_head)+2,%si
		test   %si,%si
		je     jump_7bf6b
	jump_7be76:
		xor    %eax,%eax
		mov    %si,%ax
		imul   $0xa8,%eax,%eax
		add    %ebp,%eax
		mov    0x6c(%eax),%ebx
		sar    $0x10,%ebx
		mov    %ebp,%edx
		test   %ebx,%ebx
		jge    jump_7bf5e
		mov    %ebx,%ecx
		xor    %ebx,%ebx
		neg    %ecx
		mov    %di,%bx
		cmp    %ebx,%ecx
		jne    jump_7bf5e
		testb  $0x10,0xf(%eax)
		jne    jump_7bf5e
		testb  $0x8,0xe(%eax)
		je     jump_7bef0
		xor    %ebx,%ebx
		mov    0x3c(%eax),%bx
		imul   $0xa8,%ebx,%ebx
		add    %ebp,%ebx
		testb  $0x10,0xf(%ebx)
		je     jump_7bf5e
		mov    0x5c(%ebx),%ebx
		sar    $0x10,%ebx
		imul   $0xa8,%ebx,%ebx
		mov    0x8(%edx,%ebx,1),%dl
		and    $0xff,%edx
		cmp    $0x1d,%edx
		jne    jump_7bf5e
		jmp    jump_7bf6d
	jump_7bef0:
		testb  $0x20,0xd(%eax)
		je     jump_7bf55
		testb  $0x20,0x80(%eax)
		jne    jump_7bf6d
		xor    %ebx,%ebx
		mov    0xa(%eax),%bx
		cmp    $0x2b,%ebx
		jne    jump_7bf5e
		xor    %ebx,%ebx
		mov    0x3c(%eax),%bx
		imul   $0xa8,%ebx,%ebx
		add    %ebp,%ebx
		testb  $0x20,0x80(%ebx)
		jne    jump_7bf6d
		testb  $0x10,0xf(%ebx)
		je     jump_7bf5e
		mov    0x5c(%ebx),%ebx
		sar    $0x10,%ebx
		imul   $0xa8,%ebx,%ebx
		mov    0x8(%edx,%ebx,1),%dl
		and    $0xff,%edx
		cmp    $0x1d,%edx
		jne    jump_7bf5e
		mov    %esi,%eax
		mov    %ebp,things
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_7bf55:
		testb  $0x80,0x80(%eax)
		je     jump_7bf6d
	jump_7bf5e:
		mov    0x10(%eax),%si
		test   %si,%si
		jne    jump_7be76
	jump_7bf6b:
		xor    %esi,%esi
	jump_7bf6d:
		mov    %esi,%eax
		mov    %ebp,things
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_train_unkn_st20_func_1)	/* 0x07BF7C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    %eax,(%esp)
		xor    %esi,%esi
	jump_7bf8a:
		mov    (%esp),%eax
		cmpw   $0x0,0x7e(%eax)
		je     jump_7c08d
		mov    0x7c(%eax),%eax
		sar    $0x10,%eax
		imul   $0x28,%eax,%eax
		mov    game_object_faces4,%edx
		mov    0x20(%edx,%eax,1),%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,4),%edx
		mov    EXPORT_SYMBOL(game_walk_headers),%eax
		lea    (%eax,%edx,1),%edi
		movzwl 0x2(%edi),%ebp
		lea    0x0(,%ebp,2),%eax
		mov    %eax,0x4(%esp)
		jmp    jump_7bfda
	jump_7bfce:
		mov    0x4(%esp),%ebx
		add    $0x2,%ebx
		inc    %ebp
		mov    %ebx,0x4(%esp)
	jump_7bfda:
		mov    %edi,%edx
		xor    %eax,%eax
		xor    %edi,%edx
		mov    0x2(%edi),%ax
		mov    (%edi),%dx
		add    %edx,%eax
		cmp    %eax,%ebp
		jge    jump_7c07d
		mov    0x4(%esp),%edx
		mov    game_walk_items,%eax
		add    %edx,%eax
		mov    (%eax),%dx
		mov    %edx,%eax
		neg    %eax
		and    $0xffff,%eax
		call   train_unkn_func_02
		mov    %eax,%esi
		test   %ax,%ax
		jne    jump_7c092
		movswl %dx,%eax
		neg    %eax
		imul   $0x28,%eax,%eax
		mov    game_object_faces4,%ecx
		mov    0x20(%ecx,%eax,1),%ecx
		sar    $0x10,%ecx
		mov    EXPORT_SYMBOL(game_walk_headers),%eax
		shl    $0x2,%ecx
		add    %eax,%ecx
		xor    %edx,%edx
		mov    0x2(%ecx),%dx
		lea    0x0(,%edx,2),%ebx
		jmp    jump_7c04a
	jump_7c046:
		add    $0x2,%ebx
		inc    %edx
	jump_7c04a:
		xor    %esi,%esi
		xor    %eax,%eax
		mov    0x2(%ecx),%si
		mov    (%ecx),%ax
		add    %esi,%eax
		cmp    %eax,%edx
		jge    jump_7bfce
		mov    game_walk_items,%eax
		mov    (%ebx,%eax,1),%ax
		neg    %eax
		and    $0xffff,%eax
		call   train_unkn_func_02
		mov    %eax,%esi
		test   %ax,%ax
		jne    jump_7c092
		jmp    jump_7c046
	jump_7c07d:
		mov    (%esp),%edx
		xor    %eax,%eax
		mov    0x7e(%edx),%ax
		call   train_unkn_func_02
		mov    %eax,%esi
	jump_7c08d:
		test   %si,%si
		je     jump_7c0bd
	jump_7c092:
		xor    %edx,%edx
		mov    %si,%dx
		imul   $0xa8,%edx,%edx
		mov    things,%eax
		add    %eax,%edx
		mov    (%esp),%eax
		call   person_clear_route_and_teleport_to_vehicle
		mov    (%esp),%eax
		movw   $0x64,0x82(%eax)
		jmp    jump_7bf8a
	jump_7c0bd:
		mov    (%esp),%eax
		decw   0x82(%eax)
		mov    0x80(%eax),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jg     jump_7c0f8
		push   $0x1
		mov    0x4(%esp),%eax
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x61,%edx
		movw   $0x12,0xa(%eax)
		call   ac_play_dist_sample
	jump_7c0f8:
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
set_xz_for_unkn3:	/* 0x07C104 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x10,%esp
		mov    %eax,%ecx
		mov    %edx,0x8(%esp)
		mov    %ebx,0xc(%esp)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0xf,%al
		and    $0xffff,%eax
		mov    %eax,(%esp)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0xf,%al
		xor    %edx,%edx
		and    $0xffff,%eax
		mov    0xe(%ecx),%dx
		mov    %eax,0x4(%esp)
		lea    0x0(,%edx,8),%eax
		mov    game_objects,%ebp
		add    %edx,%eax
		xor    %edx,%edx
		shl    $0x2,%eax
		mov    0x2(%ecx),%dx
		add    %eax,%ebp
		lea    0x0(,%edx,4),%eax
		mov    EXPORT_SYMBOL(game_object_points),%esi
		add    %edx,%eax
		xor    %edx,%edx
		add    %eax,%eax
		mov    (%ecx),%dx
		lea    (%esi,%eax,1),%edi
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		add    %eax,%eax
		lea    (%esi,%eax,1),%ebx
		mov    0x2(%edi),%ax
		sub    0x2(%ebx),%ax
		imul   (%esp),%eax
		mov    0x4(%ecx),%cx
		and    $0xffff,%ecx
		lea    0x0(,%ecx,4),%edx
		add    %ecx,%edx
		add    %edx,%edx
		add    %edx,%esi
		mov    0x2(%ebx),%cx
		mov    0x2(%esi),%dx
		sub    %ecx,%edx
		mov    $0x10,%ecx
		sub    (%esp),%ecx
		imul   %ecx,%edx
		add    %edx,%eax
		mov    0x6(%edi),%dx
		mov    0x6(%ebx),%di
		mov    0x4(%esp),%ecx
		sub    %edi,%edx
		imul   %ecx,%edx
		mov    0x6(%esi),%cx
		mov    $0x10,%esi
		sub    %edi,%ecx
		sub    0x4(%esp),%esi
		imul   %esi,%ecx
		sar    $0x4,%ax
		mov    0x14(%ebp),%di
		add    %ecx,%edx
		mov    0x6(%ebx),%si
		sar    $0x4,%dx
		mov    0x2(%ebx),%cx
		mov    0x16(%ebp),%bx
		add    %ecx,%eax
		add    %esi,%edx
		add    %edi,%eax
		add    %ebx,%edx
		mov    0x8(%esp),%ebx
		cwtl
		mov    %eax,(%ebx)
		movswl %dx,%eax
		mov    0xc(%esp),%edx
		mov    %eax,(%edx)
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_train_unkn_st21_exit_func_1)	/* 0x07C288 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		sub    $0x8,%esp
		mov    0x5e(%eax),%dx
		mov    %eax,%edi
		test   %dx,%dx
		je     jump_7c34b
	jump_7c29f:
		xor    %esi,%esi
		mov    0x5e(%edi),%si
		imul   $0xa8,%esi,%esi
		mov    things,%eax
		andb   $0xed,0xf(%esi,%eax,1)
		xor    %edx,%edx
		mov    0x5e(%edi),%dx
		imul   $0xa8,%edx,%edx
		lea    (%eax,%edx,1),%esi
		mov    0x60(%esi),%ax
		mov    0x80(%edi),%cx
		mov    %ax,0x5e(%edi)
		movswl %cx,%eax
		imul   $0x28,%eax,%eax
		mov    game_object_faces4,%edx
		lea    0x4(%esp),%ebx
		add    %edx,%eax
		mov    %esp,%edx
		call   set_xz_for_unkn3
		mov    (%esp),%eax
		shl    $0x8,%eax
		mov    %eax,0x18(%esi)
		mov    0x4(%esp),%eax
		mov    %ecx,%ebx
		shl    $0x8,%eax
		mov    %cx,0x6e(%esi)
		neg    %ebx
		mov    %eax,0x20(%esi)
		mov    %bx,0x6e(%esi)
		mov    0x4(%esp),%ebx
		mov    (%esp),%edx
		and    $0xffff,%ecx
		mov    %esi,%eax
		shl    $0x8,%ebx
		shl    $0x8,%edx
		call   ac_set_thing_height_on_face_quad
		mov    0xc(%esi),%dh
		xor    %eax,%eax
		or     $0x4,%dh
		mov    0x16(%esi),%ax
		mov    %dh,0xc(%esi)
		call   ac_add_node_thing
		orb    $0x80,0x80(%esi)
		cmpw   $0x0,0x5e(%edi)
		jne    jump_7c29f
	jump_7c34b:
		xor    %eax,%eax
		add    $0x8,%esp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


vtable_7c614:
		.long   func_7cc03
		.long   func_7cc56
		.long   func_7cc3b
		.long   func_7ccbb


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_vehicle)	/* 0x07C624 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x80,%esp
		mov    %eax,%esi
		testb  $0x2,0xc(%eax)
		jne    jump_7c63e
		movw   $0x0,0x4a(%esi)
	jump_7c63e:
		mov    0x84(%esi),%dx
		test   %dx,%dx
		je     jump_7c654
		mov    %edx,%ebx
		dec    %ebx
		mov    %bx,0x84(%esi)
	jump_7c654:
		testb  $0x80,0x7c(%esi)
		je     jump_7c692
		subw   $0x10,0x3a(%esi)
		mov    0x38(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_7c674
		mov    %esi,%eax
		call   ac_start_crashing
	jump_7c674:
		testb  $0x7,gameturn
		jne    jump_7c692
		call   ac_LbRandomAnyShort
		test   $0x7,%al
		jne    jump_7c692
		andb   $0x7f,0x7c(%esi)
	jump_7c692:
		mov    0x8(%esi),%al
		cmp    $0x2b,%al
		jb     jump_7cdb2
		jbe    jump_7c7a2
		cmp    $0x33,%al
		jb     jump_7cd9d
		jbe    jump_7c709
		cmp    $0x36,%al
		jb     jump_7cdd5
		jbe    jump_7c6f6
		cmp    $0x3b,%al
		jne    jump_7cdd5
		mov    %esi,%eax
		xor    %edx,%edx
		call   ac_unkn_path_func_001
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0x21,%eax
		je     jump_7c6dc
		mov    %esi,%eax
		call   ac_process_mech
		jmp    jump_7c6e3
	jump_7c6dc:
		mov    %esi,%eax
		call   ac_process_mech_stationary
	jump_7c6e3:
		mov    %esi,%eax
		call   ac_process_mech_unknown1
		mov    %esi,%eax
		call   ac_set_passengers_location
		jmp    jump_7cdd5
	jump_7c6f6:
		mov    %esi,%eax
		call   ac_process_ship
		mov    %esi,%eax
		call   ac_set_passengers_location
		jmp    jump_7cdd5
	jump_7c709:
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0x45,%eax
		jne    jump_7c730
		mov    $0xa,%ecx
		mov    0x20(%esi),%ebx
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		call   ac_bang_new4
		mov    %esi,%eax
		call   ac_init_vehicle_explode
		jmp    jump_7c75e
	jump_7c730:
		cmp    $0x21,%eax
		je     jump_7c757
		mov    %esi,%eax
		call   ac_process_tank
		mov    %esi,%eax
		call   ac_set_passengers_location
		mov    %esi,%eax
		call   ac_process_tank_turret
		add    $0x80,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_7c757:
		mov    %esi,%eax
		call   ac_process_tank_stationary
	jump_7c75e:
		mov    %esi,%eax
		call   ac_process_tank_turret
		add    $0x80,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_7c772:
		mov    0x18(%esi),%edx
		test   %edx,%edx
		jle    jump_7c790
		cmp    $0x800000,%edx
		jge    jump_7c790
		mov    0x20(%esi),%ecx
		test   %ecx,%ecx
		jle    jump_7c790
		cmp    $0x800000,%ecx
		jl     jump_7c7a2
	jump_7c790:
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0x45,%eax
		je     jump_7c7a2
		mov    %esi,%eax
		call   ac_start_crashing
	jump_7c7a2:
		mov    0x58(%esi),%edx
		sar    $0x10,%edx
		mov    0x38(%esi),%di
		mov    %edx,%eax
		sub    %di,%ax
		je     jump_7c7de
		cwtl
		cmp    $0x64,%eax
		jle    jump_7c7cb
		mov    %edi,%edx
		add    $0x64,%edx
	jump_7c7c2:
		mov    %dx,0x38(%esi)
		jmp    jump_7c7de
	jump_7c7cb:
		cmp    $0xfffffe70,%eax
		jge    jump_7c7c2
		mov    %edi,%eax
		sub    $0x190,%eax
		mov    %ax,0x38(%esi)
	jump_7c7de:
		mov    0xa(%esi),%ax
		cmp    $0x3a,%ax
		jb     jump_7caa8
		jbe    jump_7c857
		cmp    $0x3e,%ax
		jb     jump_7ca85
		jbe    jump_7ca5c
		cmp    $0x42,%ax
		jb     jump_7ca76
		cmp    $0x43,%ax
		jbe    jump_7c857
		cmp    $0x44,%ax
		jbe    jump_7c87e
		cmp    $0x45,%ax
		je     jump_7c8ff
		jmp    jump_7cafa
	jump_7c823:
		mov    %esi,%eax
		call   ac_process_stopping
		mov    %esi,%eax
		call   ac_move_vehicle
		mov    %esi,%eax
		call   ac_set_passengers_location
		jmp    jump_7cafa
	jump_7c83d:
		mov    %esi,%eax
		call   ac_process_unstopping
		mov    %esi,%eax
		call   ac_move_vehicle
		mov    %esi,%eax
		call   ac_set_passengers_location
		jmp    jump_7cafa
	jump_7c857:
		mov    0x1c(%esi),%ebp
		shl    $0x3,%ebp
		mov    %esi,%eax
		mov    %ebp,0x1c(%esi)
		call   ac_process_my_flying_vehicle
		mov    %esi,%eax
		call   ac_move_flying_vehicle
		mov    %esi,%eax
		call   ac_set_passengers_location
		sarl   $0x3,0x1c(%esi)
		jmp    jump_7cafa
	jump_7c87e:
		mov    0x1c(%esi),%edx
		shl    $0x3,%edx
		mov    %esi,%eax
		mov    %edx,0x1c(%esi)
		call   ac_process_my_takeoff
		mov    %esi,%eax
		call   ac_move_flying_vehicle
		mov    %esi,%eax
		call   ac_set_passengers_location
		sarl   $0x3,0x1c(%esi)
		jmp    jump_7cafa
	jump_7c8a5:
		mov    0x1c(%esi),%ecx
		shl    $0x3,%ecx
		mov    %esi,%eax
		mov    %ecx,0x1c(%esi)
		call   ac_process_my_land_vehicle
		mov    %esi,%eax
		call   ac_move_flying_vehicle
		mov    %esi,%eax
		call   ac_set_passengers_location
		sarl   $0x3,0x1c(%esi)
		jmp    jump_7cafa
	jump_7c8cc:
		movw   $0x0,0x5a(%esi)
		mov    0x1c(%esi),%edx
		movw   $0x0,0x62(%esi)
		shl    $0x3,%edx
		mov    %esi,%eax
		mov    %edx,0x1c(%esi)
		call   ac_process_hovering_vehicle
		mov    %esi,%eax
		call   ac_move_flying_vehicle
		mov    %esi,%eax
		call   ac_set_passengers_location
		sarl   $0x3,0x1c(%esi)
		jmp    jump_7cafa
	jump_7c8ff:
		mov    0x1c(%esi),%ebp
		shl    $0x3,%ebp
		mov    %esi,%eax
		mov    %ebp,0x1c(%esi)
		call   ac_process_my_crashing_vehicle
		test   %eax,%eax
		je     jump_7c921
		mov    %esi,%eax
		call   ac_move_flying_vehicle
		mov    %esi,%eax
		call   ac_set_passengers_location
	jump_7c921:
		sarl   $0x3,0x1c(%esi)
		jmp    jump_7cafa
	jump_7c92a:
		mov    0x60(%esi),%bx
		movw   $0x11,0xa(%esi)
		test   %bx,%bx
		je     jump_7c940
		mov    %esi,%eax
		call   ac_process_next_tnode
	jump_7c940:
		mov    %esi,%eax
		call   ac_move_vehicle
		mov    %esi,%eax
		call   ac_set_passengers_location
		mov    %esi,%eax
		movw   $0x3c,0xa(%esi)
		call   ac_process_stop_as_soon_as_you_can
		jmp    jump_7cafa
	jump_7c960:
		cmpw   $0x0,0x60(%esi)
		je     jump_7c96e
		mov    %esi,%eax
		call   ac_process_next_tnode
	jump_7c96e:
		mov    %esi,%eax
		call   ac_move_vehicle
		mov    %esi,%eax
		call   ac_set_passengers_location
		jmp    jump_7cafa
	jump_7c981:
		mov    %esi,%eax
		call   ac_process_vehicle_goto_point_fly
		mov    %esi,%eax
		call   ac_move_vehicle
		mov    %esi,%eax
		call   ac_set_passengers_location
		jmp    jump_7cafa
	jump_7c99b:
		mov    %esi,%eax
		call   ac_set_passengers_location
		mov    0x20(%esi),%eax
		sar    $0x8,%eax
		movswl %ax,%edx
		mov    0x18(%esi),%eax
		sar    $0x8,%eax
		cwtl
		call   ac_alt_at_point
		shl    $0x3,%eax
		mov    0x1c(%esi),%ecx
		add    $0x19000,%eax
		mov    %esi,%ebx
		cmp    %ecx,%eax
		jle    jump_7c9ea
		lea    0x800(%ecx),%edi
		movw   $0x0,0x38(%esi)
		mov    %edi,0x1c(%esi)
		mov    %esi,%eax
		call   ac_move_vehicle
		mov    %esi,%eax
		call   ac_set_passengers_location
		jmp    jump_7cafa
	jump_7c9ea:
		movb   $0x6,0x3f(%esi)
		mov    %esi,%eax
		call   ac_move_vehicle
		mov    %esi,%eax
		call   ac_set_passengers_location
		jmp    jump_7cafa
	jump_7ca01:
		mov    %esi,%eax
		call   ac_process_vehicle_goto_point_land
		mov    %esi,%eax
		call   ac_move_vehicle
		mov    %esi,%eax
		call   ac_set_passengers_location
		jmp    jump_7cafa
	jump_7ca1b:
		mov    0x3f(%esi),%al
		mov    %al,%ah
		cmp    $0x6,%al
		jb     jump_7ca41
		jbe    jump_7c981
		cmp    $0x7,%al
		je     jump_7ca01
		mov    %esi,%eax
		call   ac_move_vehicle
		mov    %esi,%eax
		call   ac_set_passengers_location
		jmp    jump_7cafa
	jump_7ca41:
		cmp    $0x5,%al
		je     jump_7c99b
		mov    %esi,%eax
		call   ac_move_vehicle
		mov    %esi,%eax
		call   ac_set_passengers_location
		jmp    jump_7cafa
	jump_7ca5c:
		mov    %esi,%eax
		call   ac_process_unplacing
		mov    %esi,%eax
		call   ac_move_vehicle
		mov    %esi,%eax
		call   ac_set_passengers_location
		jmp    jump_7cafa
	jump_7ca76:
		cmp    $0x41,%ax
		je     jump_7c8cc
		jmp    jump_7cafa
	jump_7ca85:
		cmp    $0x3c,%ax
		jb     jump_7c8a5
		jbe    jump_7c92a
	jump_7ca95:
		xor    %eax,%eax
		mov    0x8(%esi),%al
		cmp    $0x32,%eax
		jne    jump_7cafa
		mov    %esi,%eax
		call   ac_process_parked_flyer
		jmp    jump_7cafa
	jump_7caa8:
		cmp    $0x27,%ax
		jb     jump_7cae3
		jbe    jump_7ca1b
		cmp    $0x36,%ax
		jb     jump_7cad1
		jbe    jump_7c823
		cmp    $0x38,%ax
		jb     jump_7cafa
		jbe    jump_7c83d
		jmp    jump_7c87e
	jump_7cad1:
		cmp    $0x32,%ax
		jb     jump_7cafa
		cmp    $0x34,%ax
		jbe    jump_7c960
		jmp    jump_7cafa
	jump_7cae3:
		cmp    $0x11,%ax
		jb     jump_7caf5
		jbe    jump_7c960
		cmp    $0x21,%ax
		jmp    jump_7caf8
	jump_7caf5:
		test   %ax,%ax
	jump_7caf8:
		je     jump_7ca95
	jump_7cafa:
		xor    %eax,%eax
		mov    0x8(%esi),%al
		cmp    $0x32,%eax
		je     jump_7cdd5
		testb  $0x2,0xc(%esi)
		jne    jump_7cdd5
		mov    %esi,%eax
		call   ac_set_vehicle_alt
		add    $0x80,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_7cb26:
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0xd,%eax
		je     jump_7cdd5
		mov    0x58(%esi),%edx
		mov    0x36(%esi),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		sub    %eax,%edx
		mov    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0x4,%eax
		jge    jump_7cb59
		mov    0x5a(%esi),%ax
		mov    %ax,0x38(%esi)
		jmp    jump_7cb73
	jump_7cb59:
		mov    0x58(%esi),%eax
		mov    0x36(%esi),%edx
		sar    $0x10,%eax
		sar    $0x10,%edx
		sub    %edx,%eax
		mov    0x38(%esi),%di
		sar    %eax
		add    %eax,%edi
		mov    %di,0x38(%esi)
	jump_7cb73:
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0x45,%eax
		jne    jump_7cbb5
		mov    0x1c(%esi),%ebp
		shl    $0x3,%ebp
		mov    %esi,%eax
		mov    %ebp,0x1c(%esi)
		call   ac_process_my_crashing_vehicle
		test   %eax,%eax
		je     jump_7cdd5
		mov    %esi,%eax
		call   ac_move_flying_vehicle
		sarl   $0x3,0x1c(%esi)
		mov    %esi,%eax
		call   ac_set_passengers_location
		add    $0x80,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_7cbb5:
		cmpw   $0x0,0x60(%esi)
		je     jump_7cd6f
		mov    0x5e(%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		testb  $0x2,0xc(%edx,%eax,8)
		je     jump_7cd6f
		orb    $0x2,0xc(%esi)
		mov    %esi,%eax
		call   ac_start_crashing
		movw   $0x0,0x5a(%esi)
		add    $0x80,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_7cc03:
/*----------------------------------------------------------------*/
		cmpw   $0x0,0x60(%esi)
		je     jump_7cc20
		testb  $0x8,0xf(%esi)
		je     jump_7cc19
		mov    %esi,%eax
		call   ac_train_unkn_st18_func_1
		jmp    jump_7cc20
	jump_7cc19:
		mov    %esi,%eax
		call   ac_train_unkn_st18_func_2
	jump_7cc20:
		mov    %esi,%eax
		call   ac_set_passengers_location
		mov    %esi,%eax
		call   ac_move_vehicle
		add    $0x80,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_7cc3b:
/*----------------------------------------------------------------*/
		mov    %esi,%eax
		call   ac_train_unkn_st20_func_1
		mov    %esi,%eax
		call   ac_set_passengers_location
		add    $0x80,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_7cc56:
/*----------------------------------------------------------------*/
		mov    %esi,%eax
		call   ac_train_unkn_st21_exit_func_1
		test   %ax,%ax
		jne    jump_7cdd5
		push   $0x1
		push   $0x0
		movw   $0x14,0xa(%esi)
		push   $0x64
		movw   $0x64,0x82(%esi)
		xor    %edx,%edx
		call   ac_LbRandomAnyShort
		mov    %ax,%dx
		mov    $0x4,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		add    $0xe1,%edx
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		and    $0xffff,%edx
		mov    %esi,%eax
		call   ac_play_dist_sample
		add    $0x80,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_7ccbb:
/*----------------------------------------------------------------*/
		mov    %esi,%eax
		call   ac_train_unkn_st21_exit_func_1
		mov    0x6a(%esi),%bx
		mov    %esi,%edx
		test   %bx,%bx
		je     jump_7ccfe
		mov    0x68(%esi),%ebx
		sar    $0x10,%ebx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    things,%ebx
		mov    0xa(%ebx,%eax,8),%ax
		and    $0xffff,%eax
		cmp    $0x12,%eax
		jne    jump_7ccfe
		movw   $0x12,0xa(%esi)
		jmp    jump_7cd35
	jump_7ccfe:
		mov    0x3c(%edx),%cx
		test   %cx,%cx
		je     jump_7cd35
		xor    %ebx,%ebx
		mov    %cx,%bx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    things,%ebx
		mov    0xa(%ebx,%eax,8),%ax
		and    $0xffff,%eax
		cmp    $0x12,%eax
		jne    jump_7cd35
		movw   $0x12,0xa(%edx)
	jump_7cd35:
		mov    %esi,%eax
		call   ac_set_passengers_location
		add    $0x80,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_7cd49:
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		push   %eax
		push   $aShaggedTrainSt
		lea    0x8(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
		add    $0x80,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_7cd6f:
		mov    0xa(%esi),%ax
		sub    $0x12,%eax
		cmp    $0x3,%ax
		ja     jump_7cd49
		and    $0xffff,%eax
		jmp    *%cs:vtable_7c614(,%eax,4)
	jump_7cd89:
		mov    %esi,%eax
		call   ac_process_shuttle_pod
		add    $0x80,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_7cd9d:
		cmp    $0x32,%al
		je     jump_7c772
		add    $0x80,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_7cdb2:
		cmp    $0x28,%al
		jb     jump_7cdcd
		jbe    jump_7c7a2
		cmp    $0x29,%al
		je     jump_7cd89
		add    $0x80,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_7cdcd:
		cmp    $0x1d,%al
		je     jump_7cb26
	jump_7cdd5:
		add    $0x80,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_init_vehicle_explode)	/* 0x07CDE4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		sub    $0x34,%esp
		mov    %eax,%esi
		xor    %eax,%eax
		mov    0x8(%esi),%al
		xor    %edi,%edi
		cmp    $0x33,%eax
		jne    jump_7ce0a
		xor    %eax,%eax
		mov    $0x31,%edx
		mov    0x16(%esi),%ax
		call   ac_stop_sample_using_heap
	jump_7ce0a:
		mov    %esi,%eax
		mov    $0x40,%ecx
		call   ac_remove_locks
		push   $0x3
		mov    $0x7f,%ebx
		mov    0xc(%esi),%ah
		push   $0x0
		mov    $0x25,%edx
		or     $0x2,%ah
		push   $0x64
		mov    %ah,0xc(%esi)
		mov    %esi,%eax
		call   ac_play_dist_sample
		mov    0x5e(%esi),%dx
		movw   $0xd,0xa(%esi)
		test   %dx,%dx
		je     jump_7ce9d
	jump_7ce45:
		xor    %eax,%eax
		mov    %di,%ax
		cmp    $0x64,%eax
		jge    jump_7ce9d
		mov    0x5e(%esi),%bx
		xor    %eax,%eax
		mov    %bx,%ax
		imul   $0xa8,%eax,%edx
		mov    things,%eax
		add    %edx,%eax
		mov    %esi,%edx
		call   ac_person_leave_vehicle
		test   %al,%al
		je     jump_7ce88
		and    $0xff,%eax
		push   %eax
		push   $aTellMdFailedEx
		lea    0x8(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
	jump_7ce88:
		xor    %edx,%edx
		movswl %bx,%eax
		mov    0x5e(%esi),%dx
		inc    %edi
		cmp    %eax,%edx
		je     jump_7ce9d
		cmpw   $0x0,0x5e(%esi)
		jne    jump_7ce45
	jump_7ce9d:
		mov    0x14(%esi),%eax
		xor    %ecx,%ecx
		xor    %ebx,%ebx
		xor    %edx,%edx
		sar    $0x10,%eax
		call   explode_thing_object
		xor    %eax,%eax
		mov    0x8(%esi),%al
		cmp    $0x32,%eax
		jne    jump_7cefc
		xor    %edx,%edx
		mov    0x14(%esi),%dx
		lea    0x0(,%edx,4),%ebx
		sub    %edx,%ebx
		mov    0x20(%esi),%eax
		shl    $0x6,%ebx
		sar    $0x8,%eax
		add    %edx,%ebx
		movswl %ax,%edx
		mov    0x18(%esi),%eax
		sar    $0x8,%eax
		add    %ebx,%ebx
		cwtl
		sar    $0x5,%ebx
		call   ac_alt_at_point
		add    %ebx,%eax
		mov    0x1c(%esi),%edx
		add    $0xfa,%eax
		cmp    %edx,%eax
		setg   %al
		and    $0xff,%eax
		jmp    jump_7cf01
	jump_7cefc:
		mov    $0x1,%eax
	jump_7cf01:
		test   %eax,%eax
		je     jump_7cf1b
		mov    $0x2,%ebx
		mov    0x20(%esi),%edx
		mov    0x18(%esi),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		call   ac_quick_crater
	jump_7cf1b:
		mov    $0xf,%ecx
		mov    0x20(%esi),%ebx
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		call   ac_bang_new4
		mov    %esi,%eax
		call   ac_delete_node
		mov    0x4a(%esi),%cx
		movb   $0x1,0x9(%esi)
		test   %cx,%cx
		je     jump_7cf83
		mov    0x48(%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    0x20(%esi),%ebx
		shl    $0x2,%eax
		xor    %ecx,%ecx
		add    %eax,%edx
		mov    things,%eax
		shl    $0x3,%edx
		sar    $0x8,%ebx
		add    %edx,%eax
		mov    0x14(%esi),%cx
		push   %eax
		shl    $0x2,%ecx
		mov    0x1c(%esi),%edx
		push   $0x1388
		mov    0x18(%esi),%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		jmp    jump_7cfa5
	jump_7cf83:
		push   $0x0
		mov    0x20(%esi),%ebx
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		xor    %ecx,%ecx
		push   $0x1388
		sar    $0x8,%ebx
		sar    $0x8,%edx
		mov    0x14(%esi),%cx
		sar    $0x8,%eax
		shl    $0x2,%ecx
	jump_7cfa5:
		call   do_shockwave
		add    $0x34,%esp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
track_target:	/* 0x07CFC0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %ebp
		sub    $0x4,%esp
		mov    %eax,%ebx
		xor    %ah,%ah
		mov    0x58(%ebx),%dx
		mov    %ah,(%esp)
		test   %dx,%dx
		je     jump_7cfdf
		mov    %edx,%ecx
		dec    %ecx
		mov    %cx,0x58(%ebx)
	jump_7cfdf:
		mov    0x20(%ebx),%ecx
		mov    0x40(%ebx),%edx
		sar    $0x8,%ecx
		mov    0x18(%edx),%esi
		mov    0x20(%edx),%eax
		mov    0x1c(%edx),%ebp
		sar    $0x8,%esi
		sar    $0x8,%eax
		mov    0x18(%ebx),%edx
		sub    %ecx,%eax
		sar    $0x8,%edx
		mov    %eax,%ecx
		sub    %edx,%esi
		mov    %eax,%edx
		mov    %esi,%eax
		call   ac_arctan
		mov    0x66(%ebx),%dx
		sub    %eax,%edx
		mov    %edx,%eax
		movswl %dx,%edx
		cmp    $0xfffffc00,%edx
		jge    jump_7d024
		add    $0x8,%ah
		jmp    jump_7d032
	jump_7d024:
		cmp    $0x400,%edx
		jle    jump_7d032
		sub    $0x800,%eax
	jump_7d032:
		movswl %ax,%edx
		test   %edx,%edx
		jge    jump_7d04e
		cmp    $0xffffffec,%edx
		jle    jump_7d046
		movw   $0x0,0x62(%ebx)
		jmp    jump_7d063
	jump_7d046:
		movw   $0x100,0x62(%ebx)
		jmp    jump_7d063
	jump_7d04e:
		jle    jump_7d063
		cmp    $0x14,%edx
		jge    jump_7d05d
		movw   $0x0,0x62(%ebx)
		jmp    jump_7d063
	jump_7d05d:
		movw   $0xff00,0x62(%ebx)
	jump_7d063:
		cwtl
		cmp    $0xffffff38,%eax
		jle    jump_7d0f2
		cmp    $0xc8,%eax
		jge    jump_7d0f2
		imul   %ecx,%ecx
		mov    %esi,%edx
		imul   %esi,%edx
		mov    0x1c(%ebx),%eax
		add    %ecx,%edx
		mov    %ebp,%ecx
		sar    $0x5,%eax
		sar    $0x4,%ecx
		sub    %eax,%ecx
		mov    %ecx,%eax
		imul   %ecx,%eax
		call   ac_arctan
		sub    $0x400,%eax
		mov    0x64(%ebx),%dx
		sub    %eax,%edx
		mov    %edx,%eax
		movswl %dx,%edx
		cmp    $0xfffffc00,%edx
		jge    jump_7d0b9
		add    $0x8,%ah
		jmp    jump_7d0c7
	jump_7d0b9:
		cmp    $0x400,%edx
		jle    jump_7d0c7
		sub    $0x800,%eax
	jump_7d0c7:
		cwtl
		mov    0x62(%ebx),%edx
		mov    %eax,%ecx
		sar    $0x10,%edx
		sar    %ecx
		sub    %ecx,%edx
		mov    %dx,0x64(%ebx)
		add    $0x8,%dh
		and    $0x7,%dh
		mov    %dx,0x64(%ebx)
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0xc8,%eax
		jge    jump_7d0f2
		movb   $0x1,(%esp)
	jump_7d0f2:
		mov    (%esp),%al
		add    $0x4,%esp
		pop    %ebp
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_init_mgun_laser)	/* 0x07D100 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x18,%esp
		mov    %eax,%edi
		mov    %edx,0xc(%esp)
		xor    %edx,%edx
		mov    %edx,0x14(%esp)
		cmpl   $0x0,0x40(%eax)
		je     jump_7d372
		call   ac_get_new_thing
		test   %ax,%ax
		je     jump_7d372
		and    $0xffff,%eax
		lea    0x0(,%eax,4),%esi
		add    %eax,%esi
		shl    $0x2,%esi
		add    %esi,%eax
		mov    things,%esi
		shl    $0x3,%eax
		add    %eax,%esi
		cmpb   $0x0,0x57(%edi)
		je     jump_7d15b
		mov    0x66(%edi),%ax
		add    $0x30,%eax
		jmp    jump_7d162
	jump_7d15b:
		mov    0x66(%edi),%ax
		sub    $0x30,%eax
	jump_7d162:
		add    $0x8,%ah
		and    $0x7,%ah
		movswl %ax,%ebx
		mov    EXPORT_SYMBOL(lbSinTable)(,%ebx,4),%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    %eax
		mov    0x18(%edi),%edx
		add    %eax,%edx
		mov    %edx,0x4(%esp)
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%ebx,4),%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		sub    %edx,%eax
		sar    %eax
		mov    0x20(%edi),%edx
		sub    %eax,%edx
		mov    0x66(%edi),%al
		mov    0x1c(%edi),%ebp
		mov    %al,0x57(%esi)
		mov    %edx,0x20(%esi)
		mov    %ebp,0x1c(%esi)
		mov    0x4(%esp),%eax
		mov    %eax,0x18(%esi)
		mov    0x40(%edi),%eax
		mov    0x18(%eax),%eax
		sar    $0x8,%eax
		mov    %eax,0x2c(%esi)
		mov    0x40(%edi),%eax
		mov    0x1c(%eax),%eax
		sar    $0x8,%eax
		add    $0xa,%eax
		mov    %eax,0x30(%esi)
		mov    things,%ebx
		mov    0x40(%edi),%eax
		mov    %edx,(%esp)
		mov    %edi,%edx
		mov    0x20(%eax),%eax
		sub    %ebx,%edx
		sar    $0x8,%eax
		mov    $0xa8,%ebx
		mov    %eax,0x34(%esi)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		push   %esi
		movw   $0x32,0x14(%esi)
		mov    0x4(%esp),%ebx
		mov    %ax,0x3c(%esi)
		lea    0x34(%esi),%eax
		mov    %ebp,%edx
		push   %eax
		lea    0x30(%esi),%eax
		sar    $0x8,%ebx
		push   %eax
		mov    0x10(%esp),%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		lea    0x2c(%esi),%ecx
		call   ac_laser_hit_at
		xor    %edx,%edx
		mov    0xc(%esp),%dx
		cmp    $0xf,%edx
		jle    jump_7d243
		movl   $0xf,0xc(%esp)
	jump_7d243:
		xor    %edx,%edx
		mov    0xc(%esp),%dx
		cmp    $0x5,%edx
		jge    jump_7d257
		movl   $0x5,0xc(%esp)
	jump_7d257:
		mov    0xc(%esp),%edx
		sub    $0x4,%edx
		mov    EXPORT_SYMBOL(weapon_defs)+77,%cx # sizeof(struct WeaponDef) * 3 + 2
		mov    %edx,0x10(%esp)
		imul   0x10(%esp),%ecx
		mov    %ebp,%ebx
		mov    (%esp),%ebp
		sar    $0x8,%ebx
		mov    0x4(%esp),%edx
		sar    $0x8,%ebp
		sar    $0x8,%edx
		mov    %cx,0x8(%esp)
		test   %eax,%eax
		jle    jump_7d2de
		test   $0x40000000,%eax
		je     jump_7d2d7
		mov    0x34(%esi),%ecx
		push   $0x4
		sub    %ebp,%ecx
		push   %edi
		movswl %cx,%ecx
		mov    %eax,%edi
		push   %ecx
		and    $0xbfffffff,%edi
		mov    0x30(%esi),%ecx
		neg    %edi
		sub    %ebx,%ecx
		mov    %edi,%eax
		movswl %cx,%ecx
		mov    0x2c(%esi),%ebx
		shl    $0x4,%eax
		sub    %edx,%ebx
		sub    %edi,%eax
		mov    0x12(%esp),%edx
		lea    0x0(,%eax,4),%edi
		movswl %bx,%ebx
		mov    EXPORT_SYMBOL(sthings),%eax
		sar    $0x10,%edx
		add    %edi,%eax
		jmp    jump_7d34b
	jump_7d2d7:
		mov    0x34(%esi),%ecx
		push   $0x4
		jmp    jump_7d315
	jump_7d2de:
		jge    jump_7d301
		push   $0x0
		mov    0x10(%esp),%edx
		neg    %eax
		add    %edx,%edx
		mov    0x34(%esi),%ebx
		movswl %dx,%edx
		movswl %ax,%ecx
		push   %edx
		mov    0x2c(%esi),%eax
		mov    0x30(%esi),%edx
		call   ac_bul_hit_vector
		jmp    jump_7d350
	jump_7d301:
		cmpw   $0x0,0x14(%esp)
		je     jump_7d350
		push   $0x4
		xor    %eax,%eax
		mov    0x34(%esi),%ecx
		mov    0x18(%esp),%ax
	jump_7d315:
		sub    %ebp,%ecx
		push   %edi
		movswl %cx,%ecx
		lea    0x0(,%eax,4),%edi
		push   %ecx
		add    %eax,%edi
		mov    0x30(%esi),%ecx
		shl    $0x2,%edi
		sub    %ebx,%ecx
		add    %eax,%edi
		mov    things,%eax
		movswl %cx,%ecx
		mov    0x2c(%esi),%ebx
		shl    $0x3,%edi
		sub    %edx,%ebx
		add    %edi,%eax
		mov    0x12(%esp),%edx
		movswl %bx,%ebx
		sar    $0x10,%edx
	jump_7d34b:
		call   ac_person_hit_by_bullet
	jump_7d350:
		mov    0xc(%esp),%eax
		mov    %ax,0x2a(%esi)
		mov    %ax,0x28(%esi)
		xor    %eax,%eax
		mov    0x16(%esi),%ax
		movl   $0x4,0xc(%esi)
		call   ac_add_node_thing
		movb   $0xb,0x9(%esi)
	jump_7d372:
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
rotate_object:	/* 0x07D3A4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    %eax,%esi
		mov    0x60(%eax),%edx
		sar    $0x10,%edx
		mov    0x64(%eax),%eax
		sar    $0x3,%edx
		sar    $0x10,%eax
		add    %edx,%eax
		mov    %ax,0x66(%esi)
		add    $0x8,%ah
		mov    0x52(%esi),%edi
		and    $0x7,%ah
		sar    $0x10,%edi
		mov    %ax,0x66(%esi)
		lea    0x0(,%edi,8),%eax
		add    %edi,%eax
		mov    $EXPORT_SYMBOL(local_mats),%edi
		shl    $0x2,%eax
		add    %eax,%edi
		mov    0x62(%esi),%eax
		sar    $0x10,%eax
		cmp    $0x400,%eax
		jle    jump_7d3f6
		subw   $0x800,0x64(%esi)
	jump_7d3f6:
		mov    0x66(%esi),%ax
		mov    %edi,%ecx
		neg    %eax
		xor    %ebx,%ebx
		movswl %ax,%edx
		xor    %eax,%eax
		call   rotate_obj
		mov    0x64(%esi),%ax
		xor    %ecx,%ecx
		neg    %eax
		xor    %edx,%edx
		movswl %ax,%ebx
		mov    %edi,%eax
		call   ac_rotate_object_axis
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
aquire_target:	/* 0x07D424 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x14,%esp
		mov    %eax,%ecx
		mov    $0x7fffffff,%ebp
		mov    $0xfffffff8,%ebx
		xor    %edx,%edx
		mov    0x1a(%eax),%ax
		mov    %dx,0x8(%esp)
		mov    %ax,0x4(%esp)
		mov    0x22(%ecx),%ax
		mov    %bx,(%esp)
		mov    %ax,0xc(%esp)
		jmp    jump_7d45c
	jump_7d458:
		incw   (%esp)
	jump_7d45c:
		mov    -0x2(%esp),%eax
		sar    $0x10,%eax
		cmp    $0x8,%eax
		jge    jump_7d598
		movw   $0xfff8,0x10(%esp)
		jmp    jump_7d4c2
	jump_7d475:
		mov    0x18(%ecx),%eax
		sub    0x18(%ebx),%eax
		sar    $0x8,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%edi
		mov    0x20(%ebx),%edx
		mov    0x20(%ecx),%eax
	jump_7d48b:
		sub    %edx,%eax
		sar    $0x8,%eax
		sar    %edi
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		add    %edi,%eax
		cmp    %ebp,%eax
		jge    jump_7d4a4
		mov    %eax,%ebp
		mov    %si,0x8(%esp)
	jump_7d4a4:
		mov    0x2(%ebx),%si
		jmp    jump_7d4b8
	jump_7d4aa:
		imul   $0x3c,%eax,%eax
		mov    EXPORT_SYMBOL(sthings),%esi
		mov    0x2(%esi,%eax,1),%si
	jump_7d4b8:
		test   %si,%si
		jne    jump_7d516
	jump_7d4bd:
		incw   0x10(%esp)
	jump_7d4c2:
		mov    0xe(%esp),%eax
		sar    $0x10,%eax
		cmp    $0x8,%eax
		jge    jump_7d458
		mov    0x2(%esp),%ebx
		sar    $0x10,%ebx
		add    %ebx,%eax
		test   %eax,%eax
		jle    jump_7d4bd
		cmp    $0x80,%eax
		jge    jump_7d4bd
		mov    0xa(%esp),%ebx
		mov    -0x2(%esp),%esi
		sar    $0x10,%ebx
		sar    $0x10,%esi
		add    %esi,%ebx
		test   %ebx,%ebx
		jle    jump_7d4bd
		cmp    $0x80,%ebx
		jge    jump_7d4bd
		shl    $0x7,%ebx
		add    %ebx,%eax
		imul   $0x12,%eax,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%ebx
		mov    0x8(%ebx,%eax,1),%si
		test   %si,%si
		je     jump_7d4bd
	jump_7d516:
		movswl %si,%eax
		test   %eax,%eax
		jle    jump_7d4aa
		imul   $0xa8,%eax,%eax
		mov    things,%ebx
		add    %eax,%ebx
		mov    %ebx,%edx
		mov    %ecx,%eax
		call   kill_flags
		test   %ax,%ax
		je     jump_7d4a4
		xor    %eax,%eax
		mov    0x9(%ebx),%al
		cmp    $0x3,%eax
		jne    jump_7d4a4
		testb  $0x2,0xc(%ebx)
		jne    jump_7d4a4
		mov    0x18(%ecx),%eax
		sub    0x18(%ebx),%eax
		sar    $0x8,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%edi
		mov    0x20(%ebx),%edx
		mov    0x20(%ecx),%eax
		sub    %edx,%eax
		sar    $0x8,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%edi
		jle    jump_7d475
		mov    0x20(%ecx),%eax
		sub    0x20(%ebx),%eax
		sar    $0x8,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%edi
		mov    0x18(%ebx),%edx
		mov    0x18(%ecx),%eax
		jmp    jump_7d48b
	jump_7d598:
		mov    0x6(%esp),%ebx
		sar    $0x10,%ebx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		add    %eax,%ebx
		mov    things,%eax
		shl    $0x3,%ebx
		add    %ebx,%eax
		mov    %eax,0x40(%ecx)
		mov    0x8(%esp),%eax
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
mounted_los:	/* 0x07D5C8 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x18,%esp
		mov    %eax,%edi
		mov    %edx,%ebp
		sub    %eax,%ecx
		mov    0x28(%esp),%eax
		sub    %edx,%eax
		mov    %eax,0x8(%esp)
		mov    0x2c(%esp),%eax
		sub    %ebx,%eax
		mov    %eax,0xc(%esp)
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%esi
		mov    0x8(%esp),%eax
		mov    %ecx,0x10(%esp)
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ecx
		mov    0x10(%esp),%eax
		mov    %esi,0x4(%esp)
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %ecx,(%esp)
		mov    %eax,%edx
		cmp    %ecx,%eax
		jle    jump_7d62e
		cmp    %esi,%eax
		jle    jump_7d64a
		add    %esi,%ecx
		mov    %eax,%esi
		mov    %ecx,%edx
		sar    $0x4,%esi
		sar    %edx
		sub    %esi,%eax
		sar    $0x3,%ecx
		add    %edx,%eax
		sub    %ecx,%eax
		jmp    jump_7d66b
	jump_7d62e:
		cmp    %esi,%ecx
		jle    jump_7d64a
		mov    %ecx,%edx
		sar    $0x4,%edx
		add    %esi,%eax
		sub    %edx,%ecx
		mov    %eax,%edx
		sar    %edx
		sar    $0x3,%eax
		add    %ecx,%edx
		sub    %eax,%edx
		mov    %edx,%eax
		jmp    jump_7d66b
	jump_7d64a:
		mov    (%esp),%eax
		add    %edx,%eax
		mov    0x4(%esp),%edx
		mov    0x4(%esp),%ecx
		sar    $0x4,%edx
		sub    %edx,%ecx
		mov    %ecx,%edx
		mov    %eax,%ecx
		sar    %ecx
		sar    $0x3,%eax
		add    %edx,%ecx
		sub    %eax,%ecx
		mov    %ecx,%eax
	jump_7d66b:
		cmp    $0xc00,%eax
		jle    jump_7d679
		xor    %eax,%eax
		jmp    jump_7d705
	jump_7d679:
		sar    $0x7,%eax
		mov    %eax,0x14(%esp)
		test   %eax,%eax
		je     jump_7d705
		mov    0x10(%esp),%eax
		mov    %eax,%edx
		mov    0x14(%esp),%ecx
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %eax,0x10(%esp)
		mov    0x8(%esp),%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %eax,0x8(%esp)
		mov    0xc(%esp),%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %ebp,%esi
		xor    %ebp,%ebp
		mov    %eax,0xc(%esp)
		mov    %edi,%ecx
		mov    0x14(%esp),%eax
		mov    %ebx,%edi
		test   %eax,%eax
		jg     jump_7d6e6
		jmp    jump_7d700
	jump_7d6cb:
		mov    0x10(%esp),%edx
		mov    0x8(%esp),%ebx
		mov    0xc(%esp),%eax
		inc    %ebp
		add    %edx,%ecx
		add    %ebx,%esi
		mov    0x14(%esp),%edx
		add    %eax,%edi
		cmp    %edx,%ebp
		jge    jump_7d700
	jump_7d6e6:
		mov    %edi,%ebx
		mov    %esi,%edx
		mov    %ecx,%eax
		call   ac_check_col_collision
		test   %eax,%eax
		je     jump_7d6cb
		xor    %eax,%eax
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x8
	jump_7d700:
		mov    $0x1,%eax
	jump_7d705:
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x8


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_mounted_gun)	/* 0x07D710 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    %eax,%esi
		mov    0x84(%eax),%dx
		test   %dx,%dx
		je     jump_7d731
		mov    %edx,%ebx
		dec    %ebx
		mov    %bx,0x84(%eax)
	jump_7d731:
		cmpl   $0x0,0x40(%esi)
		jne    jump_7d741
		movw   $0xa,0xa(%esi)
	jump_7d741:
		mov    0xa(%esi),%ax
		cmp    $0xa,%ax
		jb     jump_7d753
		jbe    jump_7d75d
		cmp    $0xb,%ax
		je     jump_7d783
	jump_7d753:
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_7d75d:
		xor    %eax,%eax
		mov    gameturn,%edx
		mov    0x16(%esi),%ax
		add    %edx,%eax
		test   $0x7,%al
		jne    jump_7d753
		mov    %esi,%eax
		call   aquire_target
		cwtl
		test   %eax,%eax
		jle    jump_7d753
		movw   $0xb,0xa(%esi)
		jmp    jump_7d753
	jump_7d783:
		xor    %eax,%eax
		mov    gameturn,%ebx
		mov    0x16(%esi),%ax
		add    %ebx,%eax
		test   $0x1f,%al
		jne    jump_7d7a7
		mov    %esi,%eax
		call   aquire_target
		cwtl
		test   %eax,%eax
		jne    jump_7d7a7
		movw   $0xa,0xa(%esi)
	jump_7d7a7:
		mov    %esi,%eax
		call   track_target
		test   %al,%al
		je     jump_7d835
		mov    0x40(%esi),%ecx
		test   %ecx,%ecx
		je     jump_7d753
		mov    0x18(%esi),%eax
		mov    0x1c(%esi),%edx
		mov    0x20(%esi),%edi
		sar    $0x8,%eax
		sar    $0x8,%edx
		mov    %eax,0x4(%esp)
		mov    %ecx,%eax
		sar    $0x8,%edi
		mov    0x18(%ecx),%ecx
		mov    0x1c(%eax),%ebx
		mov    0x20(%eax),%ebp
		sar    $0x8,%ecx
		sar    $0x8,%ebx
		sar    $0x8,%ebp
		mov    0x9(%eax),%al
		mov    %ebp,(%esp)
		and    $0xff,%eax
		add    $0x28,%edx
		cmp    $0x3,%eax
		jne    jump_7d7fd
		add    $0x14,%ebx
	jump_7d7fd:
		mov    (%esp),%ebp
		push   %ebp
		push   %ebx
		mov    0xc(%esp),%eax
		mov    %edi,%ebx
		call   mounted_los
		test   %eax,%eax
		je     jump_7d835
		mov    0x58(%esi),%cx
		mov    %esi,%eax
		test   %cx,%cx
		jne    jump_7d835
		mov    0x57(%esi),%dh
		movw   $0x8,0x58(%esi)
		test   %dh,%dh
		sete   0x57(%esi)
		mov    $0x7,%edx
		call   ac_init_mgun_laser
	jump_7d835:
		mov    %esi,%eax
		call   rotate_object
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
set_object_flag:	/* 0x07D848 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    %edx,%ebx
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,8),%eax
		add    %eax,%edx
		mov    game_objects,%eax
		shl    $0x2,%edx
		add    %edx,%eax
		mov    (%eax),%dx
		mov    0x6(%eax),%cx
		mov    0x2(%eax),%di
		mov    %ecx,(%esp)
		mov    %ecx,%esi
		add    %edx,%edi
		mov    0x8(%eax),%cx
		mov    %edx,%eax
		add    %ecx,%esi
		cmp    %di,%dx
		jae    jump_7d8a0
	jump_7d888:
		xor    %ecx,%ecx
		mov    %ax,%cx
		mov    game_object_faces,%edx
		shl    $0x5,%ecx
		inc    %eax
		mov    %bl,0x9(%ecx,%edx,1)
		cmp    %di,%ax
		jb     jump_7d888
	jump_7d8a0:
		mov    (%esp),%edx
		cmp    %dx,%si
		jbe    jump_7d8ff
		jmp    jump_7d8c8
	jump_7d8aa:
		movw   $0x20,0x10(%eax)
		movw   $0x20,0x12(%eax)
		movw   $0x20,0x14(%eax)
		movw   $0x20,0x16(%eax)
	jump_7d8c2:
		inc    %edx
		cmp    %si,%dx
		jae    jump_7d8ff
	jump_7d8c8:
		xor    %eax,%eax
		mov    %dx,%ax
		imul   $0x28,%eax,%eax
		mov    game_object_faces4,%ecx
		add    %ecx,%eax
		xor    %ecx,%ecx
		mov    %bx,%cx
		mov    %bl,0xb(%eax)
		cmp    $0x5,%ecx
		jne    jump_7d8aa
		movw   $0x80,0x10(%eax)
		movw   $0x80,0x12(%eax)
		movw   $0x3f,0x14(%eax)
		movw   $0x3f,0x16(%eax)
		jmp    jump_7d8c2
	jump_7d8ff:
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_do_dome_rotate1)	/* 0x07D974 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x24,%esp
		mov    %eax,0x4(%esp)
		mov    0x52(%eax),%ax
		xor    %ebx,%ebx
		mov    %ax,%bx
		lea    0x0(,%ebx,8),%edx
		add    %edx,%ebx
		mov    game_objects,%edx
		shl    $0x2,%ebx
		mov    %eax,0x14(%esp)
		mov    0x18(%edx,%ebx,1),%ax
		mov    %eax,0x1c(%esp)
		mov    0x1a(%edx,%ebx,1),%ax
		mov    0x1c(%esp),%edx
		sub    %edx,%eax
		mov    %eax,0x10(%esp)
		mov    0x14(%esp),%eax
		inc    %eax
		mov    %eax,0x18(%esp)
		jmp    jump_7d9c7
	jump_7d9c3:
		incl   0x18(%esp)
	jump_7d9c7:
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    0x14(%esp),%bx
		mov    0x18(%esp),%dx
		lea    0x8(%ebx),%ecx
		cmp    %ecx,%edx
		jge    jump_7da88
		imul   $0x24,%edx,%esi
		mov    0x4(%esp),%edi
		movzbl 0x3f(%edi),%edi
		sub    %ebx,%edx
		imul   %edx,%edi
		mov    game_objects,%ecx
		mov    0x18(%ecx,%esi,1),%ax
		mov    %eax,0x20(%esp)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%edi,4),%ebp
		mov    EXPORT_SYMBOL(lbSinTable)(,%edi,4),%edi
	jump_7da0f:
		xor    %ebx,%ebx
		xor    %ecx,%ecx
		mov    0x1c(%esp),%bx
		mov    %ax,%cx
		add    %ecx,%ebx
		imul   $0xa,%ebx,%ebx
		xor    %esi,%esi
		mov    0x20(%esp),%si
		add    %esi,%ecx
		imul   $0xa,%ecx,%ecx
		mov    EXPORT_SYMBOL(game_object_points),%edx
		mov    0x2(%edx,%ebx,1),%esi
		sar    $0x10,%esi
		add    %edx,%ecx
		mov    0x4(%edx,%ebx,1),%edx
		mov    %esi,%ebx
		imul   %edi,%ebx
		imul   %ebp,%esi
		sar    $0x10,%edx
		mov    %ebx,0x8(%esp)
		mov    %edx,%ebx
		imul   %ebp,%ebx
		imul   %edi,%edx
		mov    %ebx,0xc(%esp)
		mov    0x8(%esp),%ebx
		inc    %eax
		add    0xc(%esp),%ebx
		sub    %edx,%esi
		sar    $0x10,%ebx
		sar    $0x10,%esi
		mov    %ebx,(%esp)
		mov    %si,0x4(%ecx)
		mov    (%esp),%edx
		mov    0x10(%esp),%ebx
		mov    %dx,0x6(%ecx)
		cmp    %bx,%ax
		ja     jump_7d9c3
		jmp    jump_7da0f
	jump_7da88:
		add    $0x24,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret

vtable_7da94:
		.long   func_7dad7
		.long   func_7db52
		.long   func_7db52
		.long   func_7db40
		.long   func_7db52
		.long   func_7db52
		.long   func_7dbaa
		.long   func_7dbc0


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_dome1)	/* 0x07DAB4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    %eax,%ecx
		mov    0xa(%eax),%ax
		dec    %eax
		cmp    $0x7,%ax
		ja     func_7db52
		xor    %edx,%edx
		mov    %ax,%dx
		jmp    *%cs:vtable_7da94(,%edx,4)


/*----------------------------------------------------------------*/
func_7dad7:
/*----------------------------------------------------------------*/
		mov    0x3f(%ecx),%al
		xor    %edx,%edx
		sub    $0x4,%al
		mov    %al,%dl
		mov    %al,0x3f(%ecx)
		cmp    $0x7f,%edx
		jle    jump_7dafe
		movb   $0x0,0x3f(%ecx)
		movw   $0x64,0x28(%ecx)
		movw   $0x7,0xa(%ecx)
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_7dafe:
		cmp    $0x6f,%edx
		jne    jump_7db33
		mov    0x62(%ecx),%si
		mov    0x64(%ecx),%di
		mov    %esi,%eax
		jmp    jump_7db1e
	jump_7db0f:
		imul   $0x6,%edx,%ebx
		mov    game_col_vects_list,%edx
		inc    %eax
		orb    $0x80,0x3(%edx,%ebx,1)
	jump_7db1e:
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    %si,%bx
		mov    %di,%dx
		add    %edx,%ebx
		xor    %edx,%edx
		mov    %ax,%dx
		cmp    %ebx,%edx
		jl     jump_7db0f
	jump_7db33:
		mov    %ecx,%eax
		call   ac_do_dome_rotate1
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_7db40:
/*----------------------------------------------------------------*/
		mov    0x3f(%ecx),%bh
		xor    %edx,%edx
		add    $0x4,%bh
		mov    %bh,%dl
		mov    %bh,0x3f(%ecx)
		cmp    $0x7f,%edx
		jle    jump_7db68


/*----------------------------------------------------------------*/
func_7db52:
/*----------------------------------------------------------------*/
		movb   $0x7f,0x3f(%ecx)
		movw   $0x64,0x28(%ecx)
		movw   $0x8,0xa(%ecx)
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_7db68:
		cmp    $0x70,%edx
		jne    jump_7db9d
		mov    0x62(%ecx),%si
		mov    0x64(%ecx),%di
		mov    %esi,%eax
		jmp    jump_7db88
	jump_7db79:
		imul   $0x6,%edx,%ebx
		mov    game_col_vects_list,%edx
		inc    %eax
		andb   $0x7f,0x3(%edx,%ebx,1)
	jump_7db88:
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    %si,%bx
		mov    %di,%dx
		add    %edx,%ebx
		xor    %edx,%edx
		mov    %ax,%dx
		cmp    %ebx,%edx
		jl     jump_7db79
	jump_7db9d:
		mov    %ecx,%eax
		call   ac_do_dome_rotate1
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_7dbaa:
/*----------------------------------------------------------------*/
		testb  $0x80,0xc(%ecx)
		je     jump_7dbb6
		movw   $0x4,0xa(%ecx)
	jump_7dbb6:
		andb   $0x3f,0xc(%ecx)
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_7dbc0:
/*----------------------------------------------------------------*/
		testb  $0x40,0xc(%ecx)
		je     jump_7dbcc
		movw   $0x1,0xa(%ecx)
	jump_7dbcc:
		andb   $0x3f,0xc(%ecx)
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
apply_object_morph:	/* 0x07DC28 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		mov    EXPORT_SYMBOL(game_object_points),%edi
		mov    game_objects,%ebp
		test   %cx,%cx
		je     jump_7dd6b
		test   %dx,%dx
		je     jump_7dce1
		and    $0xffff,%eax
		mov    %eax,%ebx
		shl    $0x3,%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		lea    (%eax,%ebp,1),%ebx
		xor    %ecx,%ecx
		mov    0x18(%ebx),%cx
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		mov    %edi,%ecx
		add    %dx,0x2(%ecx,%eax,2)
		xor    %esi,%esi
		mov    0x18(%ebx),%si
		add    $0x3,%esi
		lea    0x0(,%esi,4),%eax
		add    %esi,%eax
		add    %dx,0x2(%ecx,%eax,2)
		xor    %esi,%esi
		mov    0x18(%ebx),%si
		add    $0x4,%esi
		lea    0x0(,%esi,4),%eax
		add    %esi,%eax
		add    %dx,0x2(%ecx,%eax,2)
		xor    %esi,%esi
		mov    0x18(%ebx),%si
		add    $0x7,%esi
		lea    0x0(,%esi,4),%eax
		add    %esi,%eax
		add    %dx,0x2(%ecx,%eax,2)
		mov    0x18(%ebx),%bx
		and    $0xffff,%ebx
		add    $0x9,%ebx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		add    %dx,0x2(%ecx,%eax,2)
		mov    %ebp,game_objects
		mov    %edi,EXPORT_SYMBOL(game_object_points)
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_7dce1:
		test   %bx,%bx
		je     jump_7de9b
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		lea    (%eax,%ebp,1),%ecx
		xor    %edx,%edx
		mov    0x18(%ecx),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    %edi,%edx
		add    %bx,0x6(%edx,%eax,2)
		xor    %esi,%esi
		mov    0x18(%ecx),%si
		add    $0x3,%esi
		lea    0x0(,%esi,4),%eax
		add    %esi,%eax
		add    %bx,0x6(%edx,%eax,2)
		xor    %eax,%eax
		mov    0x18(%ecx),%ax
		lea    0x4(%eax),%esi
		lea    0x0(,%esi,4),%eax
		add    %esi,%eax
		add    %bx,0x6(%edx,%eax,2)
		xor    %esi,%esi
		mov    0x18(%ecx),%si
		add    $0x7,%esi
		lea    0x0(,%esi,4),%eax
		add    %esi,%eax
		add    %bx,0x6(%edx,%eax,2)
		mov    0x18(%ecx),%cx
		and    $0xffff,%ecx
		add    $0x9,%ecx
		jmp    jump_7de8d
	jump_7dd6b:
		test   %dx,%dx
		je     jump_7de0b
		xor    %ebx,%ebx
		mov    %ax,%bx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		lea    (%eax,%ebp,1),%ebx
		xor    %ecx,%ecx
		mov    0x18(%ebx),%cx
		inc    %ecx
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		mov    %edi,%ecx
		add    %dx,0x2(%ecx,%eax,2)
		xor    %eax,%eax
		mov    0x18(%ebx),%ax
		lea    0x2(%eax),%esi
		lea    0x0(,%esi,4),%eax
		add    %esi,%eax
		add    %dx,0x2(%ecx,%eax,2)
		xor    %eax,%eax
		mov    0x18(%ebx),%ax
		lea    0x5(%eax),%esi
		lea    0x0(,%esi,4),%eax
		add    %esi,%eax
		add    %dx,0x2(%ecx,%eax,2)
		xor    %eax,%eax
		mov    0x18(%ebx),%ax
		lea    0x6(%eax),%esi
		lea    0x0(,%esi,4),%eax
		add    %esi,%eax
		add    %dx,0x2(%ecx,%eax,2)
		xor    %eax,%eax
		mov    0x18(%ebx),%ax
		lea    0x8(%eax),%ebx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		add    %dx,0x2(%ecx,%eax,2)
		mov    %ebp,game_objects
		mov    %edi,EXPORT_SYMBOL(game_object_points)
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_7de0b:
		test   %bx,%bx
		je     jump_7de9b
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		lea    (%eax,%ebp,1),%ecx
		xor    %edx,%edx
		mov    0x18(%ecx),%dx
		inc    %edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    %edi,%edx
		add    %bx,0x6(%edx,%eax,2)
		xor    %eax,%eax
		mov    0x18(%ecx),%ax
		lea    0x2(%eax),%esi
		lea    0x0(,%esi,4),%eax
		add    %esi,%eax
		add    %bx,0x6(%edx,%eax,2)
		xor    %eax,%eax
		mov    0x18(%ecx),%ax
		lea    0x5(%eax),%esi
		lea    0x0(,%esi,4),%eax
		add    %esi,%eax
		add    %bx,0x6(%edx,%eax,2)
		xor    %eax,%eax
		mov    0x18(%ecx),%ax
		lea    0x6(%eax),%esi
		lea    0x0(,%esi,4),%eax
		add    %esi,%eax
		add    %bx,0x6(%edx,%eax,2)
		xor    %eax,%eax
		mov    0x18(%ecx),%ax
		lea    0x8(%eax),%ecx
	jump_7de8d:
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		add    %bx,0x6(%edx,%eax,2)
	jump_7de9b:
		mov    %ebp,game_objects
		mov    %edi,EXPORT_SYMBOL(game_object_points)
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_gate1)	/* 0x07DEAC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    %eax,%esi
		mov    0x5c(%eax),%di
		mov    0x60(%eax),%ax
		mov    %ax,(%esp)
		mov    0xa(%esi),%ax
		cmp    $0xf,%ax
		jb     jump_7e4a3
		jbe    jump_7e132
		cmp    $0x13,%ax
		je     jump_7e444
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_7dee9:
		mov    0x78(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_7dfe8
		mov    0x70(%esi),%eax
		sar    $0x10,%eax
		cmp    $0xfffffe0c,%eax
		jle    jump_7dfa6
		mov    (%esp),%eax
		neg    %eax
		movswl %ax,%ebx
		mov    %edi,%eax
		neg    %eax
		movswl %ax,%edx
		mov    0x52(%esi),%ax
		inc    %eax
		mov    $0x1,%ecx
		and    $0xffff,%eax
		call   apply_object_morph
		mov    -0x2(%esp),%ebx
		movswl %di,%edx
		mov    0x52(%esi),%ax
		sar    $0x10,%ebx
		add    $0x3,%eax
		and    $0xffff,%eax
		xor    %ecx,%ecx
		call   apply_object_morph
		mov    0x72(%esi),%ax
		mov    0x76(%esi),%cx
		add    %eax,%ecx
		mov    0x50(%esi),%eax
		sar    $0x10,%eax
		lea    0x1(%eax),%edx
		lea    0x0(,%edx,8),%eax
		mov    game_objects,%ebx
		add    %edx,%eax
		add    $0x1f4,%ecx
		mov    %cx,0xe(%ebx,%eax,4)
		mov    0x72(%esi),%cx
		add    0x76(%esi),%cx
		mov    0x50(%esi),%edx
		sar    $0x10,%edx
		add    $0x3,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		add    $0x1f4,%ecx
		mov    %cx,0xe(%ebx,%eax,4)
		mov    0x6e(%esi),%ax
		add    %ax,0x72(%esi)
		jmp    jump_7dfec
	jump_7dfa6:
		mov    0x50(%esi),%eax
		sar    $0x10,%eax
		lea    0x1(%eax),%edx
		lea    0x0(,%edx,8),%eax
		mov    game_objects,%ebx
		add    %edx,%eax
		mov    0x76(%esi),%dx
		mov    %dx,0xe(%ebx,%eax,4)
		mov    0x50(%esi),%eax
		sar    $0x10,%eax
		lea    0x3(%eax),%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %eax,%ebx
		mov    0x76(%esi),%ax
		mov    %ax,0xe(%ebx)
		jmp    jump_7dfec
	jump_7dfe8:
		decw   0x7a(%esi)
	jump_7dfec:
		mov    0x7a(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_7e0f6
		mov    0x72(%esi),%eax
		sar    $0x10,%eax
		cmp    $0xfffffe0c,%eax
		jle    jump_7e0af
		mov    (%esp),%eax
		neg    %eax
		movswl %ax,%ebx
		mov    %edi,%eax
		neg    %eax
		movswl %ax,%edx
		mov    0x52(%esi),%ax
		add    $0x2,%eax
		and    $0xffff,%eax
		xor    %ecx,%ecx
		call   apply_object_morph
		mov    -0x2(%esp),%ebx
		movswl %di,%edx
		mov    0x52(%esi),%ax
		sar    $0x10,%ebx
		add    $0x4,%eax
		mov    $0x1,%ecx
		and    $0xffff,%eax
		call   apply_object_morph
		mov    0x50(%esi),%edx
		mov    game_objects,%ebx
		sar    $0x10,%edx
		mov    0x74(%esi),%cx
		add    $0x2,%edx
		mov    0x76(%esi),%di
		lea    0x0(,%edx,8),%eax
		add    %edi,%ecx
		add    %edx,%eax
		add    $0x1f4,%ecx
		mov    %cx,0xe(%ebx,%eax,4)
		mov    0x74(%esi),%cx
		mov    0x50(%esi),%eax
		mov    0x76(%esi),%dx
		sar    $0x10,%eax
		add    %edx,%ecx
		lea    0x4(%eax),%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		add    $0x1f4,%ecx
		mov    %cx,0xe(%ebx,%eax,4)
		mov    0x70(%esi),%ax
		add    %ax,0x74(%esi)
		jmp    jump_7e0fa
	jump_7e0af:
		mov    0x50(%esi),%eax
		sar    $0x10,%eax
		lea    0x2(%eax),%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    game_objects,%ebx
		shl    $0x2,%eax
		lea    (%ebx,%eax,1),%edx
		mov    0x76(%esi),%ax
		mov    %ax,0xe(%edx)
		mov    0x50(%esi),%eax
		sar    $0x10,%eax
		lea    0x4(%eax),%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %eax,%ebx
		mov    0x76(%esi),%ax
		mov    %ax,0xe(%ebx)
		jmp    jump_7e0fa
	jump_7e0f6:
		decw   0x7c(%esi)
	jump_7e0fa:
		mov    0x70(%esi),%eax
		sar    $0x10,%eax
		cmp    $0xfffffe0c,%eax
		jg     jump_7e4ad
		mov    0x72(%esi),%eax
		sar    $0x10,%eax
		cmp    $0xfffffe0c,%eax
		jg     jump_7e4ad
		movl   $0x40,0xc(%esi)
		movw   $0x13,0xa(%esi)
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_7e132:
		testb  $0x20,0xc(%esi)
		je     jump_7e166
		movw   $0xd,0xa(%esi)
		movl   $0x0,0xc(%esi)
		movw   $0x3,0x7a(%esi)
		movw   $0x0,0x7c(%esi)
		movw   $0xffce,0x6e(%esi)
		movw   $0xffce,0x70(%esi)
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_7e166:
		mov    0x78(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_7e26c
		mov    0x70(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_7e222
		mov    -0x2(%esp),%ebx
		movswl %di,%edx
		mov    0x52(%esi),%ax
		sar    $0x10,%ebx
		inc    %eax
		mov    $0x1,%ecx
		and    $0xffff,%eax
		call   apply_object_morph
		mov    (%esp),%eax
		neg    %eax
		movswl %ax,%ebx
		mov    %edi,%eax
		neg    %eax
		movswl %ax,%edx
		mov    0x52(%esi),%ax
		add    $0x3,%eax
		and    $0xffff,%eax
		xor    %ecx,%ecx
		call   apply_object_morph
		mov    0x72(%esi),%ax
		mov    0x76(%esi),%bx
		add    %eax,%ebx
		mov    0x50(%esi),%eax
		sar    $0x10,%eax
		lea    0x1(%eax),%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    game_objects,%edx
		add    $0x1f4,%ebx
		mov    %bx,0xe(%edx,%eax,4)
		mov    0x72(%esi),%ax
		mov    0x76(%esi),%cx
		add    %eax,%ecx
		mov    0x50(%esi),%eax
		sar    $0x10,%eax
		lea    0x3(%eax),%ebx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		add    $0x1f4,%ecx
		mov    %cx,0xe(%edx,%eax,4)
		mov    0x6e(%esi),%ax
		add    %ax,0x72(%esi)
		jmp    jump_7e270
	jump_7e222:
		mov    0x50(%esi),%eax
		sar    $0x10,%eax
		lea    0x1(%eax),%edx
		lea    0x0(,%edx,8),%eax
		mov    0x76(%esi),%bx
		add    %edx,%eax
		mov    game_objects,%edx
		add    $0x1f4,%ebx
		mov    %bx,0xe(%edx,%eax,4)
		mov    0x50(%esi),%eax
		sar    $0x10,%eax
		lea    0x3(%eax),%ebx
		lea    0x0(,%ebx,8),%eax
		mov    0x76(%esi),%cx
		add    %ebx,%eax
		add    $0x1f4,%ecx
		mov    %cx,0xe(%edx,%eax,4)
		jmp    jump_7e270
	jump_7e26c:
		decw   0x7a(%esi)
	jump_7e270:
		mov    0x7a(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_7e378
		mov    0x72(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_7e32e
		mov    -0x2(%esp),%ebx
		movswl %di,%edx
		mov    0x52(%esi),%ax
		sar    $0x10,%ebx
		add    $0x2,%eax
		and    $0xffff,%eax
		xor    %ecx,%ecx
		call   apply_object_morph
		mov    (%esp),%eax
		neg    %eax
		neg    %edi
		movswl %ax,%ebx
		mov    0x52(%esi),%ax
		movswl %di,%edx
		add    $0x4,%eax
		mov    $0x1,%ecx
		and    $0xffff,%eax
		call   apply_object_morph
		mov    0x74(%esi),%ax
		mov    0x76(%esi),%cx
		add    %eax,%ecx
		mov    0x50(%esi),%eax
		sar    $0x10,%eax
		lea    0x2(%eax),%edx
		lea    0x0(,%edx,8),%eax
		mov    game_objects,%ebx
		add    %edx,%eax
		add    $0x1f4,%ecx
		mov    %cx,0xe(%ebx,%eax,4)
		mov    0x50(%esi),%eax
		sar    $0x10,%eax
		mov    0x74(%esi),%cx
		lea    0x4(%eax),%edx
		mov    0x76(%esi),%di
		lea    0x0(,%edx,8),%eax
		add    %edi,%ecx
		add    %edx,%eax
		add    $0x1f4,%ecx
		mov    %cx,0xe(%ebx,%eax,4)
		mov    0x70(%esi),%ax
		add    %ax,0x74(%esi)
		jmp    jump_7e37c
	jump_7e32e:
		mov    0x50(%esi),%eax
		sar    $0x10,%eax
		lea    0x2(%eax),%edx
		lea    0x0(,%edx,8),%eax
		mov    0x76(%esi),%bx
		add    %edx,%eax
		mov    game_objects,%edx
		add    $0x1f4,%ebx
		mov    %bx,0xe(%edx,%eax,4)
		mov    0x50(%esi),%ebx
		sar    $0x10,%ebx
		add    $0x4,%ebx
		lea    0x0(,%ebx,8),%eax
		mov    0x76(%esi),%cx
		add    %ebx,%eax
		add    $0x1f4,%ecx
		mov    %cx,0xe(%edx,%eax,4)
		jmp    jump_7e37c
	jump_7e378:
		decw   0x7c(%esi)
	jump_7e37c:
		mov    0x70(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jl     jump_7e4ad
		mov    0x72(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jl     jump_7e4ad
		mov    0x50(%esi),%eax
		sar    $0x10,%eax
		lea    0x1(%eax),%edx
		movw   $0x0,0x72(%esi)
		lea    0x0(,%edx,8),%eax
		mov    0x76(%esi),%bx
		add    %edx,%eax
		mov    game_objects,%edx
		movw   $0x0,0x74(%esi)
		add    $0x1f4,%ebx
		mov    %bx,0xe(%edx,%eax,4)
		mov    0x50(%esi),%eax
		sar    $0x10,%eax
		lea    0x3(%eax),%ebx
		lea    0x0(,%ebx,8),%eax
		mov    0x76(%esi),%cx
		add    %ebx,%eax
		add    $0x1f4,%ecx
		mov    %cx,0xe(%edx,%eax,4)
		mov    0x50(%esi),%eax
		sar    $0x10,%eax
		lea    0x2(%eax),%ebx
		lea    0x0(,%ebx,8),%eax
		mov    0x76(%esi),%cx
		add    %ebx,%eax
		add    $0x1f4,%ecx
		mov    %cx,0xe(%edx,%eax,4)
		mov    0x50(%esi),%ebx
		sar    $0x10,%ebx
		add    $0x4,%ebx
		lea    0x0(,%ebx,8),%eax
		mov    0x76(%esi),%cx
		add    %ebx,%eax
		add    $0x1f4,%ecx
		mov    %cx,0xe(%edx,%eax,4)
		movl   $0x80,0xc(%esi)
		movw   $0x13,0xa(%esi)
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_7e444:
		testb  $0x20,0xc(%esi)
		je     jump_7e46f
		movw   $0xd,0xa(%esi)
		movl   $0x0,0xc(%esi)
		movw   $0x3,0x7a(%esi)
		movw   $0x0,0x7c(%esi)
		movw   $0xffce,0x6e(%esi)
		movw   $0xffce,0x70(%esi)
	jump_7e46f:
		testb  $0x1,0xd(%esi)
		je     jump_7e4ad
		movw   $0xf,0xa(%esi)
		movl   $0x0,0xc(%esi)
		movw   $0x0,0x7a(%esi)
		movw   $0x3,0x7c(%esi)
		movw   $0x32,0x6e(%esi)
		movw   $0x32,0x70(%esi)
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_7e4a3:
		cmp    $0xd,%ax
		je     jump_7dee9
	jump_7e4ad:
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_create_a_pod)	/* 0x07E4B8 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		mov    %eax,%esi
		test   %eax,%eax
		je     jump_7e4c6
		call   ac_delete_node
	jump_7e4c6:
		xor    %eax,%eax
		mov    %bx,%ax
		test   %eax,%eax
		jne    jump_7e530
		xor    %edi,%edi
		call   ac_get_new_thing
		mov    %ax,%di
		test   %edi,%edi
		je     jump_7e58d
		lea    0x0(,%edi,4),%eax
		add    %edi,%eax
		shl    $0x2,%eax
		add    %edi,%eax
		mov    things,%edi
		shl    $0x3,%eax
		add    %eax,%edi
		movb   $0x2,0x9(%edi)
		movb   $0x29,0x8(%edi)
		mov    0x16(%edx),%ax
		mov    %ax,0x60(%edi)
		test   %esi,%esi
		je     jump_7e530
		testb  $0x20,0xd(%esi)
		je     jump_7e530
		push   $0x1
		push   $0xffffffff
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x9,%edx
		mov    %edi,%eax
		call   ac_play_dist_sample
	jump_7e530:
		test   %esi,%esi
		je     jump_7e587
		mov    0x5e(%edi),%ax
		mov    0x2(%esi),%dx
		mov    %ax,0x2(%esi)
		mov    0x16(%edi),%ax
		mov    %ax,0x5e(%esi)
		mov    0x16(%esi),%ax
		mov    %ax,0x5e(%edi)
		mov    0x18(%esi),%eax
		sar    $0x8,%eax
		xor    %al,%al
		add    $0x80,%eax
		mov    %ax,0x9a(%esi)
		mov    0x20(%esi),%eax
		mov    0xd(%esi),%bl
		sar    $0x8,%eax
		or     $0x40,%bl
		xor    %al,%al
		mov    %bl,0xd(%esi)
		add    $0x80,%eax
		mov    %ax,0x9c(%esi)
		mov    %edx,%eax
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_7e587:
		movw   $0x0,0x5e(%edi)
	jump_7e58d:
		xor    %eax,%eax
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_shuttle_loader)	/* 0x07E594 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		mov    %eax,%ecx
		mov    0x2c(%eax),%edx
		test   %edx,%edx
		jl     jump_7e65a
		cmp    $0x80,%edx
		jg     jump_7e65a
		mov    0x34(%eax),%esi
		test   %esi,%esi
		jl     jump_7e65a
		cmp    $0x80,%esi
		jg     jump_7e65a
		test   %edx,%edx
		jl     jump_7e65a
		cmp    $0x80,%edx
		jge    jump_7e65a
		test   %esi,%esi
		jl     jump_7e65a
		cmp    $0x80,%esi
		jge    jump_7e65a
		mov    %esi,%eax
		mov    0x2c(%ecx),%edx
		shl    $0x7,%eax
		add    %eax,%edx
		lea    0x0(,%edx,8),%eax
		add    %eax,%edx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %edx,%edx
		mov    0x8(%edx,%eax,1),%ax
		test   %ax,%ax
		je     jump_7e65a
	jump_7e614:
		cwtl
		test   %eax,%eax
		jle    jump_7e648
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x9(%eax),%dl
		cmp    $0x3,%edx
		jne    jump_7e642
		testb  $0x40,0xd(%eax)
		jne    jump_7e642
		mov    %ecx,%edx
		xor    %ebx,%ebx
		call   ac_create_a_pod
		jmp    jump_7e655
	jump_7e642:
		mov    0x2(%eax),%ax
		jmp    jump_7e655
	jump_7e648:
		imul   $0x3c,%eax,%edx
		mov    EXPORT_SYMBOL(sthings),%eax
		mov    0x2(%edx,%eax,1),%ax
	jump_7e655:
		test   %ax,%ax
		jne    jump_7e614
	jump_7e65a:
		pop    %esi
	jump_7e65b:
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_building)	/* 0x07E660 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		mov    %eax,%ecx
		testb  $0x4,0xe(%eax)
		je     jump_7e753
		testb  $0x2,0xc(%ecx)
		je     jump_7e67d
		andb   $0xfb,0xe(%ecx)
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_7e67d:
		mov    0x20(%ecx),%ebx
		mov    0x1c(%ecx),%edx
		mov    0x18(%ecx),%eax
		sar    $0x8,%ebx
		sar    $0x8,%edx
		sar    $0x8,%eax
		call   ac_collapse_building
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_7e698:
		testb  $0x2,0xc(%ecx)
		jne    jump_7e65b
		mov    0x4c(%ecx),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_7e6b5
		testb  $0x8,0xf(%ecx)
		jne    jump_7e6b5
		mov    %ecx,%eax
		call   ac_process_shuttle_loader
	jump_7e6b5:
		mov    0x4c(%ecx),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_7e65b
		testb  $0x8,0xf(%ecx)
		je     jump_7e65b
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		jne    jump_7e65b
		xor    %eax,%eax
		mov    gameturn,%edx
		mov    0x16(%ecx),%ax
		add    %edx,%eax
		test   $0x7,%al
		jne    jump_7e65b
		mov    %ecx,%edx
		xor    %ebx,%ebx
		xor    %eax,%eax
		call   ac_create_a_pod
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_7e6f3:
		testb  $0x2,0xc(%ecx)
		jne    jump_7e65b
		mov    %ecx,%eax
		call   ac_process_dome1
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_7e708:
		testb  $0x2,0xc(%ecx)
		jne    jump_7e65b
		mov    %ecx,%eax
		call   ac_process_mounted_gun
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_7e71d:
		mov    %ecx,%eax
		call   ac_process_gate1
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_7e728:
		mov    0x52(%ecx),%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,8),%ecx
		xor    %ebx,%ebx
		add    %eax,%ecx
		mov    $EXPORT_SYMBOL(local_mats),%eax
		shl    $0x2,%ecx
		xor    %edx,%edx
		add    %ecx,%eax
		mov    $0x20,%ecx
		call   ac_rotate_object_axis
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_7e753:
		mov    0x8(%ecx),%al
		cmp    $0x20,%al
		jb     jump_7e768
		jbe    jump_7e708
		cmp    $0x25,%al
		jb     jump_7e77a
		jbe    jump_7e71d
		cmp    $0x36,%al
		je     jump_7e728
		jmp    jump_7e77a
	jump_7e768:
		cmp    $0x14,%al
		jb     jump_7e77a
		jbe    jump_7e698
		cmp    $0x18,%al
		je     jump_7e6f3
	jump_7e77a:
		mov    0xa(%ecx),%ax
		cmp    $0x9,%ax
		je     jump_7e67d
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
init_mgun_explode:	/* 0x07E78C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		mov    %eax,%esi
		testb  $0x2,0xc(%eax)
		jne    jump_7e837
		push   $0x3
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		mov    0xc(%esi),%dl
		push   $0x0
		mov    %esi,%eax
		or     $0x2,%dl
		push   $0x64
		mov    %dl,0xc(%esi)
		mov    $0x25,%edx
		call   ac_play_dist_sample
		mov    0x18(%esi),%edx
		movw   $0xd,0xa(%esi)
		test   %edx,%edx
		jl     jump_7e837
		mov    %edx,%eax
		sar    $0x8,%eax
		cmp    $0x8000,%eax
		jge    jump_7e837
		mov    0x20(%esi),%eax
		sar    $0x8,%eax
		test   %eax,%eax
		jl     jump_7e837
		cmp    $0x8000,%eax
		jge    jump_7e837
		mov    $0xf,%ecx
		mov    0x20(%esi),%ebx
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		call   ac_bang_new4
		mov    %esi,%eax
		call   ac_delete_node
		xor    %eax,%eax
		mov    0x16(%esi),%ax
		xor    %ecx,%ecx
		call   ac_remove_thing
		push   $0x0
		mov    0x14(%esi),%cx
		mov    0x20(%esi),%ebx
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		push   $0x1388
		shl    $0x2,%ecx
		sar    $0x8,%ebx
		sar    $0x8,%edx
		sar    $0x8,%eax
		call   do_shockwave
	jump_7e837:
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
Synd_nav_rulesA2B:	/* 0x07E85C */
/*----------------------------------------------------------------*/
		and    $0x6,%edx
		sete   %al
		and    $0xff,%eax
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_triangulation_initialize)	/* 0x7E898 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		mov    $0x1,%edx
		xor    %eax,%eax
		mov    %edx,EXPORT_SYMBOL(triangulation_initied)
		mov    $0xffffffff,%ebx
		xor    %edx,%edx
	jump_7e8ae:
		add    $0x3c,%eax
		mov    %edx,EXPORT_SYMBOL(stored_level3d_inuse)(%eax)
		mov    %edx,EXPORT_SYMBOL(stored_g3d_next_object)(%eax)
		mov    %ebx,EXPORT_SYMBOL(stored_g3d_next_object_face)(%eax)
		mov    %edx,EXPORT_SYMBOL(stored_g3d_next_object_face4)(%eax)
		mov    %edx,EXPORT_SYMBOL(stored_g3d_next_object_point)(%eax)
		mov    %ebx,EXPORT_SYMBOL(stored_g3d_next_normal)(%eax)
		mov    %edx,EXPORT_SYMBOL(stored_g3d_next_face_texture)(%eax)
		mov    %edx,EXPORT_SYMBOL(stored_g3d_next_floor_texture)(%eax)
		mov    %edx,EXPORT_SYMBOL(stored_g3d_next_local_mat)(%eax)
		mov    %edx,EXPORT_SYMBOL(stored_global3d_inuse)(%eax)
		mov    %edx,EXPORT_SYMBOL(things_init_times)(%eax)
		mov    %ebx,EXPORT_SYMBOL(word_1AABD0)(%eax)
		mov    %edx,EXPORT_SYMBOL(data_1aabd4)(%eax)
		mov    %edx,EXPORT_SYMBOL(data_1aabd8)(%eax)
		mov    %edx,EXPORT_SYMBOL(data_1aabdc)(%eax)
		cmp    $0x258,%eax
		jne    jump_7e8ae
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_triangulation_allocate)	/* 0x7e918 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		mov    %eax,%ecx
		mov    %edx,%ebx
		cmpl   $0x0,EXPORT_SYMBOL(triangulation_initied)
		jne    jump_7e92d
		call   ac_triangulation_initialize
	jump_7e92d:
		mov    %ecx,%eax
		mov    %ebx,%edx
		shl    $0x4,%ecx
		sar    $0x1f,%edx
		sub    %eax,%ecx
		mov    %ebx,%eax
		sub    %edx,%eax
		sar    %eax
		movl   $0x1,EXPORT_SYMBOL(triangulation)(,%ecx,4)
		mov    %ebx,EXPORT_SYMBOL(triangulation)+0x1C(,%ecx,4)
		mov    %ebx,EXPORT_SYMBOL(triangulation)+0x18(,%ecx,4)
		shl    $0x4,%ebx
		mov    %eax,EXPORT_SYMBOL(triangulation)+0x34(,%ecx,4)
		mov    %eax,%esi
		mov    %eax,EXPORT_SYMBOL(triangulation)+0x30(,%ecx,4)
		mov    %ebx,%eax
		call   ac_LbMemoryAlloc
		shl    $0x3,%esi
		mov    %eax,EXPORT_SYMBOL(triangulation)+0x20(,%ecx,4) # triangulation[0].Triangles
		mov    %esi,%eax
		call   ac_LbMemoryAlloc
		mov    %eax,EXPORT_SYMBOL(triangulation)+0x38(,%ecx,4) # triangulation[0].Points
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(triangulation)+0x20(,%ecx,4),%eax # triangulation[0].Triangles
		call   ac_memset
		mov    %esi,%ebx
		mov    EXPORT_SYMBOL(triangulation)+0x38(,%ecx,4),%eax # triangulation[0].Points
		xor    %edx,%edx
		call   ac_memset
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_triangulation_select)	/* 0x7E9AC */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		sub    $0x64,%esp
		mov    %eax,%edx
		cmp    EXPORT_SYMBOL(selected_triangulation_no),%eax
		je     jump_7ea48
		shl    $0x4,%eax
		sub    %edx,%eax
		mov    triangulation(,%eax,4),%ecx
		push   %ecx
		push   %edx
		push   $aTriIdDDTriangu
		lea    0xc(%esp),%eax
		push   %eax
		call   ac_sprintf
		mov    EXPORT_SYMBOL(selected_triangulation_no),%esi
		add    $0x10,%esp
		cmp    $0xffffffff,%esi
		je     jump_7ea17
		mov    %esi,%eax
		shl    $0x4,%eax
		mov    $triangulation,%edi
		sub    %esi,%eax
		mov    $0x3c,%ecx
		shl    $0x2,%eax
		mov    $triangulation,%esi
		add    %eax,%edi
		push   %edi
		mov    %ecx,%eax
		shr    $0x2,%ecx
		repnz movsl %ds:(%esi),%es:(%edi)
		mov    %al,%cl
		and    $0x3,%cl
		repnz movsb %ds:(%esi),%es:(%edi)
		pop    %edi
	jump_7ea17:
		mov    %edx,%eax
		shl    $0x4,%eax
		mov    $triangulation,%esi
		sub    %edx,%eax
		mov    $0x3c,%ecx
		shl    $0x2,%eax
		mov    $triangulation,%edi
		add    %eax,%esi
		mov    %edx,EXPORT_SYMBOL(selected_triangulation_no)
		push   %edi
		mov    %ecx,%eax
		shr    $0x2,%ecx
		repnz movsl %ds:(%esi),%es:(%edi)
		mov    %al,%cl
		and    $0x3,%cl
		repnz movsb %ds:(%esi),%es:(%edi)
		pop    %edi
	jump_7ea48:
		add    $0x64,%esp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
point_new:	/* 0x7EB48 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		mov    EXPORT_SYMBOL(triangulation)+0x2C,%edx # triangulation[0].free_Points
		cmp    $0xffffffff,%edx
		je     jump_7eb69
		mov    %edx,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx # triangulation[0].Points
		mov    (%edx,%eax,8),%edx
		mov    %edx,EXPORT_SYMBOL(triangulation)+0x2C # triangulation[0].free_Points
		jmp    jump_7eb78
	jump_7eb69:
		mov    EXPORT_SYMBOL(triangulation)+0x24,%edx
		mov    %edx,%eax
		inc    %edx
		mov    %edx,EXPORT_SYMBOL(triangulation)+0x24
	jump_7eb78:
		mov    EXPORT_SYMBOL(triangulation)+0x28,%ecx # triangulation[0].count_Points
		mov    EXPORT_SYMBOL(triangulation)+0x38,%ebx # triangulation[0].Points
		inc    %ecx
		movl   $0x0,0x4(%ebx,%eax,8)
		mov    %ecx,EXPORT_SYMBOL(triangulation)+0x28 # triangulation[0].count_Points
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_triangulation_init_edges)	/* 0x7eb98 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		mov    $0xfffff100,%edx
		mov    %edx,%eax
		call   ac_insert_point
		mov    $0xfffff100,%edx
		mov    $0x9100,%eax
		call   ac_insert_point
		mov    $0x9100,%edx
		mov    $0xfffff100,%eax
		call   ac_insert_point
		mov    $0x9100,%edx
		mov    $0xfffff100,%ecx
		mov    %edx,%eax
		mov    $0x9100,%ebx
		call   ac_insert_point
		mov    %ecx,%edx
		mov    %ecx,%eax
		call   ac_make_edge
		mov    $0x9100,%ecx
		mov    $0xfffff100,%edx
		mov    %ecx,%ebx
		mov    %ecx,%eax
		call   ac_make_edge
		mov    $0x9100,%ecx
		mov    $0xfffff100,%ebx
		mov    %ecx,%edx
		mov    %ecx,%eax
		call   ac_make_edge
		mov    $0xfffff100,%ecx
		mov    $0x9100,%edx
		mov    %ecx,%ebx
		mov    %ecx,%eax
		call   ac_make_edge
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_triangulation_initxy)	/* 0x7ec24 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    %eax,%esi
		mov    %edx,%ebp
		mov    %ebx,(%esp)
		mov    %ecx,%edi
		mov    EXPORT_SYMBOL(triangulation)+0x1C,%edx
		xor    %ebx,%ebx
		test   %edx,%edx
		jle    jump_7ec7a
		xor    %edx,%edx
	jump_7ec41:
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax # triangulation[0].Triangles
		add    $0x10,%edx
		movb   $0xff,-0x2(%edx,%eax,1)
		movw   $0xffff,-0xa(%edx,%eax,1)
		movw   $0xffff,-0x8(%edx,%eax,1)
		movw   $0xffff,-0x6(%edx,%eax,1)
		mov    EXPORT_SYMBOL(triangulation)+0x1C,%ecx
		movw   $0xffff,-0x4(%edx,%eax,1)
		inc    %ebx
		movb   $0x0,-0x1(%edx,%eax,1)
		cmp    %ecx,%ebx
		jl     jump_7ec41
	jump_7ec7a:
		mov    $0x1,%eax
		mov    $0x2,%edx
		mov    $0xffffffff,%ecx
		mov    %eax,EXPORT_SYMBOL(triangulation)+0x04
		mov    %edx,EXPORT_SYMBOL(triangulation)+0x0C # triangulation[0].ix_Triangles
		mov    %edx,EXPORT_SYMBOL(triangulation)+0x10
		mov    %ecx,EXPORT_SYMBOL(triangulation)+0x14 # triangulation[0].free_Triangles
		mov    EXPORT_SYMBOL(triangulation)+0x34,%eax
		xor    %edx,%edx
		test   %eax,%eax
		jle    jump_7ecc9
		xor    %eax,%eax
	jump_7ecad:
		mov    EXPORT_SYMBOL(triangulation)+0x38,%ebx # triangulation[0].Points
		inc    %edx
		movl   $0x80000000,0x4(%ebx,%eax,1)
		mov    EXPORT_SYMBOL(triangulation)+0x34,%ebx
		add    $0x8,%eax
		cmp    %ebx,%edx
		jl     jump_7ecad
	jump_7ecc9:
		mov    EXPORT_SYMBOL(triangulation)+0x38,%eax # triangulation.Points
		mov    %esi,(%eax)
		mov    %ebp,0x4(%eax)
		mov    %ebp,0xc(%eax)
		mov    %edi,0x14(%eax)
		mov    $0xffffffff,%edx
		mov    %esi,0x18(%eax)
		mov    %edx,EXPORT_SYMBOL(triangulation)+0x2C # triangulation[0].free_Points
		mov    %edi,0x1c(%eax)
		mov    (%esp),%edx
		mov    %edx,0x8(%eax)
		mov    %edx,0x10(%eax)
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax # triangulation[0].Triangles
		movw   $0x3,(%eax)
		movw   $0x1,0x2(%eax)
		movw   $0x0,0x4(%eax)
		movw   $0x1,0x10(%eax)
		movw   $0x3,0x12(%eax)
		movw   $0x2,0x14(%eax)
		movw   $0x1,0x6(%eax)
		movw   $0xffff,0x8(%eax)
		movw   $0xffff,0xa(%eax)
		movw   $0x0,0x16(%eax)
		movw   $0xffff,0x18(%eax)
		movw   $0xffff,0x1a(%eax)
		movb   $0x0,0xe(%eax)
		mov    $0x4,%ecx
		movb   $0x0,0x1e(%eax)
		mov    %ecx,EXPORT_SYMBOL(triangulation)+0x24
		movb   $0x7,0xf(%eax)
		mov    %ecx,EXPORT_SYMBOL(triangulation)+0x28 # triangulation[0].count_Points
		movb   $0x7,0x1f(%eax)
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
triangulation_clear:	/* 0x7eda0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		mov    $0x9200,%ecx
		mov    EXPORT_SYMBOL(triangulation)+0x1C,%eax
		mov    $0xfffff000,%edx
		mov    %eax,EXPORT_SYMBOL(triangulation)+0x18
		mov    EXPORT_SYMBOL(triangulation)+0x34,%eax
		mov    %ecx,%ebx
		mov    %eax,EXPORT_SYMBOL(triangulation)+0x30
		mov    %edx,%eax
		call   ac_triangulation_initxy
		movl   $0xffffffff,EXPORT_SYMBOL(triangulation)+0x08
		mov    $0xfffff100,%edx
		mov    %edx,%eax
		call   ac_insert_point
		mov    $0xfffff100,%edx
		mov    $0x9100,%eax
		call   ac_insert_point
		mov    $0x9100,%edx
		mov    $0xfffff100,%eax
		call   ac_insert_point
		mov    $0x9100,%edx
		mov    $0xfffff100,%ecx
		mov    %edx,%eax
		mov    $0x9100,%ebx
		call   ac_insert_point
		mov    %ecx,%edx
		mov    %ecx,%eax
		call   ac_make_edge
		mov    $0x9100,%ecx
		mov    $0xfffff100,%edx
		mov    %ecx,%ebx
		mov    %ecx,%eax
		call   ac_make_edge
		mov    $0x9100,%ecx
		mov    $0xfffff100,%ebx
		mov    %ecx,%edx
		mov    %ecx,%eax
		call   ac_make_edge
		mov    $0xfffff100,%ecx
		mov    $0x9100,%edx
		mov    %ecx,%ebx
		mov    %ecx,%eax
		call   ac_make_edge
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_pointed_at8)	/* 0x7EED8 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x24,%esp
		mov    %eax,0x1c(%esp)
		mov    %edx,0x4(%esp)
		mov    %ebx,0xc(%esp)
		mov    %ecx,0x10(%esp)
		mov    (%ebx),%esi
		mov    %esi,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx # triangulation[0].Triangles
		shl    $0x4,%eax
		mov    (%ecx),%edi
		add    %eax,%edx
		mov    (%edx,%edi,2),%ax
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		mov    (%eax),%edx
		mov    0x4(%eax),%eax
		shl    $0x8,%edx
		shl    $0x8,%eax
		mov    %edx,0x18(%esp)
		mov    %eax,0x14(%esp)
	jump_7ef26:
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx # triangulation[0].Triangles
		mov    %esi,%ebx
		lea    0x0(,%edi,4),%ecx
		shl    $0x4,%ebx
		mov    EXPORT_SYMBOL(MOD3)+4(%ecx),%eax
		add    %ebx,%edx
		mov    (%edx,%eax,2),%ax
		and    $0xffff,%eax
		lea    0x0(,%eax,8),%ebx
		mov    EXPORT_SYMBOL(triangulation)+0x38,%eax
		mov    (%ebx,%eax,1),%ebp
		mov    0x4(%ebx,%eax,1),%ebx
		shl    $0x8,%ebx
		mov    %ebx,0x8(%esp)
		mov    EXPORT_SYMBOL(MOD3)+8(%ecx),%ebx
		add    %ebx,%ebx
		add    %ebx,%edx
		shl    $0x8,%ebp
		mov    (%edx),%dx
		and    $0xffff,%edx
		shl    $0x3,%edx
		add    %edx,%eax
		mov    (%eax),%edx
		mov    0x4(%eax),%ebx
		mov    0x1c(%esp),%eax
		shl    $0x8,%edx
		mov    0x4(%esp),%ecx
		sub    %edx,%eax
		shl    $0x8,%ebx
		mov    %eax,(%esp)
		mov    0x14(%esp),%eax
		sub    %ebx,%ecx
		sub    %eax,%ebx
		mov    0x18(%esp),%eax
		sub    %eax,%edx
		mov    %edx,%eax
		mov    %ecx,%edx
		mov    (%esp),%ecx
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_7efc3
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_7efc3:
		mov    0x4(%esp),%edx
		movsbl %al,%eax
		mov    0x8(%esp),%ebx
		test   %eax,%eax
		setg   %al
		mov    0x1c(%esp),%ecx
		mov    %al,0x20(%esp)
		mov    0x14(%esp),%eax
		sub    %ebx,%edx
		sub    %eax,%ebx
		mov    0x18(%esp),%eax
		sub    %ebp,%ecx
		sub    %eax,%ebp
		mov    %ebp,%eax
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_7f005
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_7f005:
		movsbl %al,%eax
		test   %eax,%eax
		setg   %al
		cmpb   $0x0,0x20(%esp)
		je     jump_7f01c
		test   %al,%al
		je     jump_7f082
	jump_7f01c:
		mov    %esi,%edx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax # triangulation[0].Triangles
		shl    $0x4,%edx
		add    %eax,%edx
		mov    0x4(%edx,%edi,2),%edx
		sar    $0x10,%edx
		cmp    $0xffffffff,%edx
		jne    jump_7f038
		mov    %edx,%esi
		jmp    jump_7f095
	jump_7f038:
		mov    %edx,%ebx
		shl    $0x4,%ebx
		add    %ebx,%eax
		mov    0x4(%eax),%ebx
		sar    $0x10,%ebx
		cmp    %esi,%ebx
		jne    jump_7f04d
		xor    %esi,%esi
		jmp    jump_7f074
	jump_7f04d:
		mov    0x6(%eax),%ebx
		sar    $0x10,%ebx
		cmp    %esi,%ebx
		jne    jump_7f05e
		mov    $0x1,%esi
		jmp    jump_7f074
	jump_7f05e:
		mov    0x8(%eax),%eax
		sar    $0x10,%eax
		cmp    %esi,%eax
		jne    jump_7f06f
		mov    $0x2,%esi
		jmp    jump_7f074
	jump_7f06f:
		mov    $0xffffffff,%esi
	jump_7f074:
		mov    EXPORT_SYMBOL(MOD3)+4(,%esi,4),%edi
		mov    %edx,%esi
		jmp    jump_7ef26
	jump_7f082:
		mov    0xc(%esp),%eax
		mov    %esi,(%eax)
		mov    0x10(%esp),%eax
		mov    %edi,(%eax)
		mov    EXPORT_SYMBOL(MOD3)+4(,%edi,4),%esi
	jump_7f095:
		mov    %esi,%eax
		add    $0x24,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_triangle_contains8)	/* 0x07F128 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x14,%esp
		mov    %edx,%edi
		mov    %ebx,%esi
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx # triangulation[0].Triangles
		shl    $0x4,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(triangulation)+0x38,%ebp
		mov    (%eax),%dx
		mov    0x0(%ebp,%edx,8),%ebx
		mov    0x4(%ebp,%edx,8),%edx
		shl    $0x8,%edx
		mov    %edx,0x4(%esp)
		xor    %edx,%edx
		shl    $0x8,%ebx
		mov    0x2(%eax),%dx
		mov    %ebx,(%esp)
		mov    0x0(%ebp,%edx,8),%ebx
		mov    0x4(%eax),%ax
		mov    0x4(%ebp,%edx,8),%edx
		shl    $0x8,%ebx
		shl    $0x8,%edx
		mov    %ebx,0x8(%esp)
		mov    %edx,0xc(%esp)
		and    $0xffff,%eax
		shl    $0x3,%eax
		add    %ebp,%eax
		mov    (%eax),%ebp
		mov    0x4(%eax),%eax
		mov    0xc(%esp),%ebx
		shl    $0x8,%eax
		mov    %edi,%ecx
		mov    %eax,0x10(%esp)
		mov    0x8(%esp),%eax
		mov    %esi,%edx
		sub    %eax,%ecx
		mov    0x4(%esp),%eax
		sub    %ebx,%edx
		sub    %eax,%ebx
		mov    0x8(%esp),%eax
		sub    (%esp),%eax
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_7f1c9
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_7f1c9:
		movsbl %al,%eax
		shl    $0x8,%ebp
		test   %eax,%eax
		jg     jump_7f247
		mov    0x10(%esp),%ebx
		mov    0xc(%esp),%eax
		mov    %esi,%edx
		mov    %edi,%ecx
		sub    %ebx,%edx
		sub    %eax,%ebx
		mov    %ebp,%eax
		sub    %ebp,%ecx
		sub    0x8(%esp),%eax
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_7f203
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_7f203:
		movsbl %al,%eax
		test   %eax,%eax
		jg     jump_7f247
		mov    0x4(%esp),%edx
		mov    (%esp),%ebx
		mov    (%esp),%eax
		mov    %edi,%ecx
		sub    %edx,%esi
		sub    %ebx,%ecx
		mov    0x4(%esp),%ebx
		mov    %esi,%edx
		mov    0x10(%esp),%esi
		sub    %ebp,%eax
		sub    %esi,%ebx
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_7f240
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_7f240:
		movsbl %al,%eax
		test   %eax,%eax
		jle    jump_7f24e
	jump_7f247:
		mov    $0x1,%eax
		jmp    jump_7f250
	jump_7f24e:
		xor    %eax,%eax
	jump_7f250:
		test   %eax,%eax
		sete   %al
		and    $0xff,%eax
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
point_quad_status:	/* 0x7F264 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x2c,%esp
		mov    %edx,%ebp
		mov    %ebx,%esi
		mov    %ecx,%edi
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx # triangulation[0].Triangles
		mov    %eax,%ebx
		mov    %ebp,%ecx
		shl    $0x4,%ebx
		add    %ecx,%ecx
		add    %edx,%ebx
		add    %ecx,%ebx
		mov    0x4(%ebx),%ebx
		sar    $0x10,%ebx
		mov    %ebx,0xc(%esp)
		shl    $0x4,%ebx
		add    %ebx,%edx
		mov    0x4(%edx),%ebx
		sar    $0x10,%ebx
		cmp    %eax,%ebx
		jne    jump_7f2a0
		xor    %edx,%edx
		jmp    jump_7f2c7
	jump_7f2a0:
		mov    0x6(%edx),%ebx
		sar    $0x10,%ebx
		cmp    %eax,%ebx
		jne    jump_7f2b1
		mov    $0x1,%edx
		jmp    jump_7f2c7
	jump_7f2b1:
		mov    0x8(%edx),%edx
		sar    $0x10,%edx
		cmp    %eax,%edx
		jne    jump_7f2c2
		mov    $0x2,%edx
		jmp    jump_7f2c7
	jump_7f2c2:
		mov    $0xffffffff,%edx
	jump_7f2c7:
		mov    EXPORT_SYMBOL(triangulation)+0x20,%ecx # triangulation[0].Triangles
		shl    $0x2,%ebp
		shl    $0x4,%eax
		mov    EXPORT_SYMBOL(MOD3)+8(%ebp),%ebx
		mov    %ecx,0x4(%esp)
		add    %ebx,%ebx
		add    %eax,%ecx
		add    %ecx,%ebx
		xor    %eax,%eax
		mov    (%ebx),%ax
		lea    0x0(,%eax,8),%ebx
		mov    %ebp,(%esp)
		mov    EXPORT_SYMBOL(triangulation)+0x38,%eax # triangulation.Points
		mov    %ecx,0x8(%esp)
		mov    %ecx,%ebp
		mov    (%ebx,%eax,1),%ecx
		mov    0x4(%ebx,%eax,1),%ebx
		mov    %ebx,0x28(%esp)
		mov    (%esp),%ebx
		mov    %ecx,0x24(%esp)
		mov    EXPORT_SYMBOL(MOD3)(%ebx),%ebx
		mov    %ebp,%ecx
		add    %ebx,%ebx
		add    %ecx,%ebx
		mov    (%ebx),%bx
		and    $0xffff,%ebx
		mov    (%eax,%ebx,8),%ebp
		mov    0x4(%eax,%ebx,8),%ebx
		mov    %ebx,0x14(%esp)
		mov    EXPORT_SYMBOL(MOD3)+8(,%edx,4),%ebx
		mov    0xc(%esp),%edx
		mov    0x4(%esp),%ecx
		shl    $0x4,%edx
		add    %ecx,%edx
		mov    (%edx,%ebx,2),%dx
		and    $0xffff,%edx
		mov    (%eax,%edx,8),%ebx
		mov    0x4(%eax,%edx,8),%edx
		mov    %edx,0x1c(%esp)
		mov    (%esp),%edx
		mov    %ebx,0x18(%esp)
		mov    EXPORT_SYMBOL(MOD3)+4(%edx),%edx
		mov    0x8(%esp),%ebx
		add    %edx,%edx
		add    %ebx,%edx
		mov    (%edx),%dx
		and    $0xffff,%edx
		shl    $0x3,%edx
		add    %edx,%eax
		mov    0x24(%esp),%ecx
		mov    (%eax),%edx
		mov    0x4(%eax),%eax
		mov    %edx,0x20(%esp)
		mov    %eax,0x10(%esp)
		cmp    %ecx,%esi
		jne    jump_7f39d
		cmp    0x28(%esp),%edi
		jne    jump_7f39d
		xor    %eax,%eax
		jmp    jump_7f53e
	jump_7f39d:
		cmp    %ebp,%esi
		jne    jump_7f3b3
		cmp    0x14(%esp),%edi
		jne    jump_7f3b3
		mov    $0x1,%eax
		add    $0x2c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_7f3b3:
		cmp    0x18(%esp),%esi
		jne    jump_7f3cb
		cmp    0x1c(%esp),%edi
		jne    jump_7f3cb
		mov    $0x3,%eax
		add    $0x2c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_7f3cb:
		cmp    0x20(%esp),%esi
		jne    jump_7f3e3
		cmp    0x10(%esp),%edi
		jne    jump_7f3e3
		mov    $0x2,%eax
		add    $0x2c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_7f3e3:
		mov    0x14(%esp),%ebx
		mov    0x28(%esp),%eax
		mov    %edi,%edx
		mov    %esi,%ecx
		sub    %ebx,%edx
		sub    %eax,%ebx
		mov    %ebp,%eax
		sub    %ebp,%ecx
		sub    0x24(%esp),%eax
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_7f413
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_7f413:
		movsbl %al,%eax
		test   %eax,%eax
		jle    jump_7f426
		mov    $0xfffffffe,%eax
		add    $0x2c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_7f426:
		jne    jump_7f434
		mov    $0x4,%eax
		add    $0x2c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_7f434:
		mov    0x1c(%esp),%ebx
		mov    0x18(%esp),%eax
		mov    %esi,%ecx
		mov    %edi,%edx
		sub    %eax,%ecx
		mov    0x14(%esp),%eax
		sub    %ebx,%edx
		sub    %eax,%ebx
		mov    0x18(%esp),%eax
		sub    %ebp,%eax
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_7f468
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_7f468:
		movsbl %al,%eax
		test   %eax,%eax
		jle    jump_7f47b
		mov    $0xfffffffe,%eax
		add    $0x2c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_7f47b:
		jne    jump_7f489
		mov    $0x6,%eax
		add    $0x2c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_7f489:
		mov    0x10(%esp),%ebx
		mov    0x20(%esp),%ebp
		mov    0x1c(%esp),%eax
		mov    %edi,%edx
		mov    %esi,%ecx
		sub    %ebx,%edx
		sub    %ebp,%ecx
		sub    %eax,%ebx
		mov    %ebp,%eax
		sub    0x18(%esp),%eax
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_7f4bd
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_7f4bd:
		movsbl %al,%eax
		test   %eax,%eax
		jle    jump_7f4d0
		mov    $0xfffffffe,%eax
		add    $0x2c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_7f4d0:
		jne    jump_7f4de
		mov    $0x7,%eax
		add    $0x2c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_7f4de:
		mov    0x28(%esp),%eax
		mov    0x24(%esp),%ebx
		mov    %edi,%edx
		mov    %esi,%ecx
		mov    0x10(%esp),%esi
		mov    0x20(%esp),%edi
		sub    %eax,%edx
		sub    %ebx,%ecx
		mov    %eax,%ebx
		mov    0x24(%esp),%eax
		sub    %esi,%ebx
		sub    %edi,%eax
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_7f518
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_7f518:
		movsbl %al,%eax
		test   %eax,%eax
		jle    jump_7f52b
		mov    $0xfffffffe,%eax
		add    $0x2c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_7f52b:
		jne    jump_7f539
		mov    $0x5,%eax
		add    $0x2c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_7f539:
		mov    $0xffffffff,%eax
	jump_7f53e:
		add    $0x2c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_triangle_find8)	/* 0x7F5AC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x94,%esp
		mov    %eax,%esi
		mov    %edx,%edi
		mov    $0x7d0,%edx
		mov    EXPORT_SYMBOL(triangulation)+0x08,%eax # triangulation[0].last_tri
		mov    %edx,0x7c(%esp)
		mov    %eax,0x70(%esp)
		test   %eax,%eax
		jl     jump_7f5e6
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx # triangulation[0].Triangles
		shl    $0x4,%eax
		mov    0xb(%edx,%eax,1),%eax
		sar    $0x18,%eax
		cmp    $0xffffffff,%eax
		jne    jump_7f639
	jump_7f5e6:
		mov    %esi,%ebp
		mov    EXPORT_SYMBOL(triangulation)+0x0C,%esi # triangulation[0].ix_Triangles
		xor    %ecx,%ecx
		test   %esi,%esi
		jg     jump_7f605
		jmp    jump_7f62b
	jump_7f5f6:
		mov    EXPORT_SYMBOL(triangulation)+0x0C,%eax
		inc    %ecx
		add    $0x10,%esi
		cmp    %eax,%ecx
		jl     jump_7f607
		jmp    jump_7f62b
	jump_7f605:
		xor    %esi,%esi
	jump_7f607:
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax # triangulation[0].Triangles
		mov    0xb(%esi,%eax,1),%eax
		sar    $0x18,%eax
		cmp    $0xffffffff,%eax
		je     jump_7f5f6
		mov    %edi,%ebx
		mov    %ebp,%edx
		mov    %ecx,%eax
		call   ac_triangle_contains8
		test   %eax,%eax
		je     jump_7f5f6
		mov    %ecx,%eax
		jmp    jump_7f630
	jump_7f62b:
		mov    $0xffffffff,%eax
	jump_7f630:
		mov    %eax,0x70(%esp)
		jmp    jump_7f93d
	jump_7f639:
		mov    0x70(%esp),%ebp
		test   %ebp,%ebp
		jl     jump_7f919
		mov    0x7c(%esp),%eax
		lea    -0x1(%eax),%edx
		mov    %edx,0x7c(%esp)
		test   %eax,%eax
		jge    jump_7f676
		push   %edi
		push   %esi
		mov    $0xffffffff,%eax
		push   $aCannotFindDD
		mov    %eax,0x7c(%esp)
		lea    0xc(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0x10,%esp
		jmp    jump_7f919
	jump_7f676:
		mov    %ebp,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x20,%ecx # triangulation[0].Triangles
		shl    $0x4,%eax
		add    %eax,%ecx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(triangulation)+0x38,%eax
		mov    (%ecx),%dx
		mov    (%eax,%edx,8),%ebx
		mov    0x4(%eax,%edx,8),%edx
		shl    $0x8,%edx
		mov    %edx,0x8c(%esp)
		xor    %edx,%edx
		mov    0x2(%ecx),%dx
		mov    (%eax,%edx,8),%ebp
		mov    0x4(%eax,%edx,8),%edx
		shl    $0x8,%edx
		mov    %edx,0x90(%esp)
		xor    %edx,%edx
		shl    $0x8,%ebx
		mov    0x4(%ecx),%dx
		mov    %ebx,0x84(%esp)
		shl    $0x3,%edx
		shl    $0x8,%ebp
		add    %edx,%eax
		mov    0x90(%esp),%ebx
		mov    %esi,%ecx
		mov    (%eax),%edx
		mov    0x4(%eax),%eax
		shl    $0x8,%edx
		shl    $0x8,%eax
		mov    %edx,0x88(%esp)
		mov    %eax,0x80(%esp)
		mov    %edi,%edx
		mov    0x8c(%esp),%eax
		sub    %ebx,%edx
		sub    %eax,%ebx
		mov    %ebp,%eax
		sub    %ebp,%ecx
		sub    0x84(%esp),%eax
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_7f71f
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_7f71f:
		movsbl %al,%eax
		test   %eax,%eax
		setg   %al
		mov    0x80(%esp),%ebx
		and    $0xff,%eax
		mov    %esi,%ecx
		mov    %eax,0x78(%esp)
		mov    %eax,0x64(%esp)
		mov    0x88(%esp),%eax
		mov    %edi,%edx
		sub    %eax,%ecx
		mov    0x90(%esp),%eax
		sub    %ebx,%edx
		sub    %eax,%ebx
		mov    0x88(%esp),%eax
		sub    %ebp,%eax
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_7f774
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_7f774:
		movsbl %al,%eax
		mov    0x8c(%esp),%ebx
		test   %eax,%eax
		setg   %al
		mov    %esi,%ecx
		movzbl %al,%ebp
		mov    0x84(%esp),%eax
		mov    %edi,%edx
		sub    %eax,%ecx
		mov    0x80(%esp),%eax
		sub    %ebx,%edx
		sub    %eax,%ebx
		mov    0x84(%esp),%eax
		sub    0x88(%esp),%eax
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_7f7c4
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_7f7c4:
		movsbl %al,%eax
		mov    %ebp,0x68(%esp)
		test   %eax,%eax
		setg   %al
		and    $0xff,%eax
		mov    0x78(%esp),%edx
		mov    %eax,0x6c(%esp)
		test   %edx,%edx
		jne    jump_7f7ed
		test   %ebp,%ebp
		jne    jump_7f7ed
		test   %eax,%eax
		je     jump_7f919
	jump_7f7ed:
		cmpl   $0x0,0x64(%esp)
		je     jump_7f823
		cmpl   $0x0,0x68(%esp)
		jne    jump_7f823
		cmpl   $0x0,0x6c(%esp)
		jne    jump_7f823
		mov    0x70(%esp),%eax
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx # triangulation[0].Triangles
		shl    $0x4,%eax
		mov    0x4(%edx,%eax,1),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jl     jump_7f823
		mov    %eax,0x70(%esp)
		jmp    jump_7f639
	jump_7f823:
		cmpl   $0x0,0x68(%esp)
		je     jump_7f858
		cmpl   $0x0,0x6c(%esp)
		jne    jump_7f858
		cmpl   $0x0,0x64(%esp)
		jne    jump_7f858
		mov    0x70(%esp),%edx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax # triangulation[0].Triangles
		shl    $0x4,%edx
		mov    0x6(%edx,%eax,1),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jl     jump_7f858
		mov    %eax,0x70(%esp)
		jmp    jump_7f639
	jump_7f858:
		cmpl   $0x0,0x6c(%esp)
		je     jump_7f88d
		cmpl   $0x0,0x64(%esp)
		jne    jump_7f88d
		cmpl   $0x0,0x68(%esp)
		jne    jump_7f88d
		mov    0x70(%esp),%edx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax # triangulation[0].Triangles
		shl    $0x4,%edx
		mov    0x8(%edx,%eax,1),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jl     jump_7f88d
		mov    %eax,0x70(%esp)
		jmp    jump_7f639
	jump_7f88d:
		cmpl   $0x0,0x64(%esp)
		je     jump_7f8ba
		cmpl   $0x0,0x68(%esp)
		je     jump_7f8ba
		mov    $0x1,%ebp
		lea    0x74(%esp),%ecx
		lea    0x70(%esp),%ebx
		mov    %edi,%edx
		mov    %esi,%eax
		mov    %ebp,0x74(%esp)
		call   ac_pointed_at8
		jmp    jump_7f639
	jump_7f8ba:
		cmpl   $0x0,0x68(%esp)
		je     jump_7f8e7
		cmpl   $0x0,0x6c(%esp)
		je     jump_7f8e7
		mov    $0x2,%ecx
		lea    0x70(%esp),%ebx
		mov    %edi,%edx
		mov    %esi,%eax
		mov    %ecx,0x74(%esp)
		lea    0x74(%esp),%ecx
		call   ac_pointed_at8
		jmp    jump_7f639
	jump_7f8e7:
		cmpl   $0x0,0x6c(%esp)
		je     jump_7f639
		cmpl   $0x0,0x64(%esp)
		je     jump_7f639
		lea    0x74(%esp),%ecx
		mov    %edi,%edx
		xor    %ebx,%ebx
		mov    %esi,%eax
		mov    %ebx,0x74(%esp)
		lea    0x70(%esp),%ebx
		call   ac_pointed_at8
		jmp    jump_7f639
	jump_7f919:
		cmpl   $0x0,0x70(%esp)
		jl     jump_7f939
		mov    0x70(%esp),%eax
		mov    %edi,%ebx
		mov    %esi,%edx
		call   ac_triangle_contains8
		test   %eax,%eax
		jne    jump_7f939
		movl   $0xffffffff,0x70(%esp)
	jump_7f939:
		mov    0x70(%esp),%eax
	jump_7f93d:
		mov    %eax,EXPORT_SYMBOL(triangulation)+0x08
		add    $0x94,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_point_find)	/* 0x7F950 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    %eax,%esi
		mov    %edx,%edi
		mov    %ecx,(%esp)
		shl    $0x8,%edx
		shl    $0x8,%eax
		call   ac_triangle_find8
		mov    %eax,%edx
		test   %eax,%eax
		jl     jump_7fa33
		mov    %eax,%ecx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%ebp # triangulation[0].Triangles
		shl    $0x4,%ecx
		add    %ebp,%ecx
		mov    (%ecx),%cx
		and    $0xffff,%ecx
		mov    EXPORT_SYMBOL(triangulation)+0x38,%ebp # triangulation.Points
		shl    $0x3,%ecx
		add    %ebp,%ecx
		cmp    (%ecx),%esi
		jne    jump_7f9b1
		cmp    0x4(%ecx),%edi
		jne    jump_7f9b1
		mov    %eax,(%ebx)
		mov    (%esp),%eax
		movl   $0x0,(%eax)
		mov    $0x1,%eax
		jmp    jump_7fa35
	jump_7f9b1:
		mov    %edx,%ecx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax # triangulation[0].Triangles
		shl    $0x4,%ecx
		mov    0x2(%ecx,%eax,1),%ax
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%ecx # triangulation.Points
		shl    $0x3,%eax
		add    %ecx,%eax
		cmp    (%eax),%esi
		jne    jump_7f9f0
		cmp    0x4(%eax),%edi
		jne    jump_7f9f0
		mov    (%esp),%eax
		mov    %edx,(%ebx)
		movl   $0x1,(%eax)
		mov    $0x1,%eax
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_7f9f0:
		mov    %edx,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x20,%ecx # triangulation[0].Triangles
		shl    $0x4,%eax
		mov    0x4(%ecx,%eax,1),%ax
		and    $0xffff,%eax
		lea    0x0(,%eax,8),%ecx
		mov    EXPORT_SYMBOL(triangulation)+0x38,%eax # triangulation.Points
		add    %ecx,%eax
		cmp    (%eax),%esi
		jne    jump_7fa33
		cmp    0x4(%eax),%edi
		jne    jump_7fa33
		mov    (%esp),%eax
		mov    %edx,(%ebx)
		movl   $0x2,(%eax)
		mov    $0x1,%eax
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_7fa33:
		xor    %eax,%eax
	jump_7fa35:
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_edge_find)	/* 0x7FA3C */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x24,%esp
		mov    %eax,0x10(%esp)
		mov    %edx,0x1c(%esp)
		mov    %ebx,0x8(%esp)
		mov    %ecx,0xc(%esp)
		lea    0x4(%esp),%ecx
		mov    %esp,%ebx
		call   ac_point_find
		test   %eax,%eax
		je     jump_7fbd7
		mov    0xc(%esp),%eax
		sub    0x1c(%esp),%eax
		mov    0x10(%esp),%ebx
		mov    %eax,0x14(%esp)
		mov    0x8(%esp),%eax
		mov    (%esp),%esi
		sub    %ebx,%eax
		mov    0x4(%esp),%ebp
		mov    %eax,0x18(%esp)
	jump_7fa86:
		mov    %esi,%edx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%ebx # triangulation[0].Triangles
		shl    $0x4,%edx
		mov    EXPORT_SYMBOL(MOD3)+4(,%ebp,4),%ecx
		add    %ebx,%edx
		mov    (%edx,%ecx,2),%dx
		mov    EXPORT_SYMBOL(triangulation)+0x38,%ebx # triangulation.Points
		and    $0xffff,%edx
		mov    (%ebx,%edx,8),%edi
		mov    0x4(%ebx,%edx,8),%eax
		mov    0xc(%esp),%edx
		mov    %eax,0x20(%esp)
		mov    %eax,%ebx
		sub    %eax,%edx
		mov    0x1c(%esp),%eax
		mov    0x8(%esp),%ecx
		sub    %eax,%ebx
		mov    0x10(%esp),%eax
		sub    %edi,%ecx
		sub    %eax,%edi
		mov    %edi,%eax
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_7fae9
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_7fae9:
		movsbl %al,%edx
		test   %edx,%edx
		jne    jump_7fb64
		test   %edi,%edi
		jge    jump_7faff
		mov    $0xffffffff,%edx
		jmp    jump_7fb02
	jump_7faff:
		setne  %dl
	jump_7fb02:
		mov    0x18(%esp),%ebx
		test   %ebx,%ebx
		jge    jump_7fb11
		mov    $0xffffffff,%edi
		jmp    jump_7fb17
	jump_7fb11:
		setne  %al
		movzbl %al,%edi
	jump_7fb17:
		cmp    %edi,%edx
		jne    jump_7fb64
		mov    0x20(%esp),%edx
		sub    0x1c(%esp),%edx
		test   %edx,%edx
		jge    jump_7fb2e
		mov    $0xffffffff,%edi
		jmp    jump_7fb34
	jump_7fb2e:
		setne  %al
		movzbl %al,%edi
	jump_7fb34:
		mov    0x14(%esp),%eax
		test   %eax,%eax
		jge    jump_7fb43
		mov    $0xffffffff,%edx
		jmp    jump_7fb4a
	jump_7fb43:
		setne  %al
		xor    %edx,%edx
		mov    %al,%dl
	jump_7fb4a:
		cmp    %edx,%edi
		jne    jump_7fb64
		mov    0x34(%esp),%eax
		mov    %esi,(%eax)
		mov    0x38(%esp),%eax
		mov    $0x1,%edx
		mov    %ebp,(%eax)
		jmp    jump_7fbd9
	jump_7fb64:
		mov    %esi,%ebx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx # triangulation[0].Triangles
		shl    $0x4,%ebx
		add    %edx,%ebx
		mov    0x4(%ebx,%ebp,2),%edi
		sar    $0x10,%edi
		cmp    $0xffffffff,%edi
		je     jump_7fbd7
		mov    %edi,%ebx
		shl    $0x4,%ebx
		add    %ebx,%edx
		mov    0x4(%edx),%ebx
		sar    $0x10,%ebx
		cmp    %esi,%ebx
		jne    jump_7fb92
		xor    %esi,%esi
		jmp    jump_7fbb9
	jump_7fb92:
		mov    0x6(%edx),%ebx
		sar    $0x10,%ebx
		cmp    %esi,%ebx
		jne    jump_7fba3
		mov    $0x1,%esi
		jmp    jump_7fbb9
	jump_7fba3:
		mov    0x8(%edx),%edx
		sar    $0x10,%edx
		cmp    %esi,%edx
		jne    jump_7fbb4
		mov    $0x2,%esi
		jmp    jump_7fbb9
	jump_7fbb4:
		mov    $0xffffffff,%esi
	jump_7fbb9:
		lea    0x1(%esi),%edx
		mov    $0x3,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %edi,%esi
		mov    (%esp),%ebx
		mov    %edx,%ebp
		cmp    %ebx,%edi
		jne    jump_7fa86
	jump_7fbd7:
		xor    %edx,%edx
	jump_7fbd9:
		mov    %edx,%eax
		add    $0x24,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x8


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_triangle_findSE8)	/* 0x7FBE4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x14,%esp
		mov    %eax,0xc(%esp)
		mov    %edx,0x8(%esp)
		call   ac_triangle_find8
		mov    %eax,(%esp)
		test   %eax,%eax
		jge    jump_7fc1a
		mov    %eax,%edx
		jmp    jump_7fd81
	jump_7fc07:
		mov    0x4(%esp),%ebp
		inc    %ebp
		add    $0x2,%esi
		mov    %ebp,0x4(%esp)
		cmp    $0x6,%esi
		jl     jump_7fc30
		jmp    jump_7fc84
	jump_7fc1a:
		mov    0xc(%esp),%ebx
		mov    %eax,%edi
		xor    %edx,%edx
		xor    %esi,%esi
		mov    EXPORT_SYMBOL(triangulation)+0x38,%eax
		mov    %edx,0x4(%esp)
		shl    $0x4,%edi
	jump_7fc30:
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx # triangulation[0].Triangles
		add    %edi,%edx
		xor    %ecx,%ecx
		mov    (%edx,%esi,1),%cx
		shl    $0x3,%ecx
		add    %eax,%ecx
		mov    (%ecx),%edx
		shl    $0x8,%edx
		cmp    %ebx,%edx
		jne    jump_7fc07
		mov    0x4(%ecx),%edx
		mov    0x8(%esp),%ecx
		shl    $0x8,%edx
		cmp    %ecx,%edx
		jne    jump_7fc07
		lea    0x4(%esp),%ecx
		mov    $0x10100,%edx
		mov    %esp,%ebx
		mov    %edx,%eax
		call   ac_pointed_at8
		jmp    jump_7fd7e
	jump_7fc71:
		mov    0x4(%esp),%eax
		inc    %eax
		mov    %eax,0x4(%esp)
		cmp    $0x3,%eax
		jl     jump_7fc8a
		jmp    jump_7fd7e
	jump_7fc84:
		xor    %eax,%eax
		mov    %eax,0x4(%esp)
	jump_7fc8a:
		mov    (%esp),%eax
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edi # triangulation[0].Triangles
		shl    $0x4,%eax
		mov    0x4(%esp),%edx
		add    %eax,%edi
		mov    (%edi,%edx,2),%dx
		mov    EXPORT_SYMBOL(triangulation)+0x38,%ecx
		and    $0xffff,%edx
		mov    (%ecx,%edx,8),%eax
		mov    0x4(%ecx,%edx,8),%esi
		mov    0x4(%esp),%edx
		mov    EXPORT_SYMBOL(MOD3)+4(,%edx,4),%edx
		add    %edx,%edx
		add    %edx,%edi
		xor    %edx,%edx
		mov    (%edi),%dx
		shl    $0x3,%edx
		shl    $0x8,%eax
		add    %edx,%ecx
		shl    $0x8,%esi
		mov    (%ecx),%edx
		mov    0x4(%ecx),%ebp
		mov    0xc(%esp),%ecx
		shl    $0x8,%edx
		shl    $0x8,%ebp
		mov    %edx,0x10(%esp)
		mov    0x8(%esp),%edx
		mov    0x10(%esp),%ebx
		mov    0x10(%esp),%edi
		sub    %ebp,%edx
		sub    %ebx,%ecx
		mov    %ebp,%ebx
		sub    %eax,%edi
		sub    %esi,%ebx
		mov    %edi,%eax
		mov    %ebx,%esi
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_7fd17
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_7fd17:
		movsbl %al,%eax
		test   %eax,%eax
		jne    jump_7fc71
		mov    $0x10100,%edx
		mov    $0x10100,%ecx
		mov    %esi,%ebx
		sub    %ebp,%edx
		mov    0x10(%esp),%ebp
		mov    %edi,%eax
		sub    %ebp,%ecx
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_7fd50
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_7fd50:
		movsbl %al,%edx
		test   %edx,%edx
		jle    jump_7fc71
		mov    (%esp),%edx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax # triangulation[0].Triangles
		shl    $0x4,%edx
		add    %eax,%edx
		mov    0x4(%esp),%eax
		mov    0x4(%edx,%eax,2),%edx
		sar    $0x10,%edx
		mov    %edx,%eax
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_7fd7e:
		mov    (%esp),%edx
	jump_7fd81:
		mov    %edx,%eax
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_compare_point_cross_distances) /* function inlined in original code */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x58,%esp
		mov    $0xffffffff,%ebp
		mov    %eax,0x24(%esp)
		mov    %edx,0x28(%esp)
		mov    %ebx,0x2C(%esp)

		mov    0x24(%esp),%bx # ebx = point 1 idx
		and    $0xffff,%ebx
		mov    EXPORT_SYMBOL(triangulation)+0x38,%ecx # triangulation[0].Points
		shl    $0x3,%ebx
		mov    %ecx,0x4(%esp)
		add    %ecx,%ebx # ebx = triangulation[0].Points[ ebx (pt1) ]

		mov    0x28(%esp),%ax # eax = point 2 idx
		and    $0xffff,%eax
		lea    0x0(,%eax,8),%ecx
		add    0x4(%esp),%ecx # ecx = triangulation[0].Points[ eax (pt2) ]
		mov    0x4(%ebx),%eax
		sub    0x4(%ecx),%eax
		mov    %eax,0xc(%esp) # 0xc(%esp) = pt1->y - pt2->y
		mov    (%ebx),%eax
		mov    (%ecx),%ebx
		sub    %ebx,%eax
		mov    %eax,0x8(%esp) # 0x8(%esp) = pt1->x - pt2->x

		xor    %eax,%eax
		mov    0x2C(%esp),%ax # eax = point 3 idx
		mov    0x4(%esp),%edx
		shl    $0x3,%eax
		add    %eax,%edx # edx = triangulation[0].Points[ eax (pt3) ]
		mov    0x4(%ecx),%eax
		mov    0x4(%edx),%ebx
		sub    %ebx,%eax
		mov    %eax,%ebx # ebx = pt2->y - pt3->y
		mov    (%ecx),%eax
		mov    (%edx),%ecx
		mov    0xc(%esp),%edx
		sub    %ecx,%eax # eax = pt2->x - pt3->x

		mov    0x8(%esp),%ecx
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_cpcd_end
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_cpcd_end:
		movsbl %al,%eax
		add    $0x58,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_edge_rotateAC)	/* 0x7fd8c */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x58,%esp
		mov    %eax,%esi
		mov    %edx,0x1c(%esp)
		mov    %eax,%edx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax # triangulation[0].Triangles
		shl    $0x4,%edx
		lea    (%eax,%edx,1),%ebx
		mov    0x1c(%esp),%edx
		mov    0x4(%ebx,%edx,2),%edi
		sar    $0x10,%edi
		cmp    $0xffffffff,%edi
		jne    jump_7fdbe
		xor    %ecx,%ecx
		jmp    jump_80223
	jump_7fdbe:
		mov    %edi,%edx
		shl    $0x4,%edx
		add    %edx,%eax
		mov    0x4(%eax),%edx
		sar    $0x10,%edx
		cmp    %esi,%edx
		jne    jump_7fdd3
		xor    %ebp,%ebp
		jmp    jump_7fdfa
	jump_7fdd3:
		mov    0x6(%eax),%edx
		sar    $0x10,%edx
		cmp    %esi,%edx
		jne    jump_7fde4
		mov    $0x1,%ebp
		jmp    jump_7fdfa
	jump_7fde4:
		mov    0x8(%eax),%eax
		sar    $0x10,%eax
		cmp    %esi,%eax
		jne    jump_7fdf5
		mov    $0x2,%ebp
		jmp    jump_7fdfa
	jump_7fdf5:
		mov    $0xffffffff,%ebp
	jump_7fdfa:
		mov    0x1c(%esp),%eax
		mov    EXPORT_SYMBOL(MOD3)+4(,%eax,4),%edx
		mov    EXPORT_SYMBOL(MOD3)+8(,%eax,4),%eax
		mov    %eax,0x20(%esp)
		mov    EXPORT_SYMBOL(MOD3)+8(,%ebp,4),%eax
		mov    EXPORT_SYMBOL(MOD3)+4(,%ebp,4),%ebx
		mov    %eax,0x14(%esp)
		mov    %esi,%eax
		mov    %ebx,0x10(%esp)
		shl    $0x4,%eax
		mov    %edx,0x54(%esp)
		mov    %eax,0x48(%esp)
		mov    0x54(%esp),%ebx
		mov    0x48(%esp),%edx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax # triangulation[0].Triangles
		add    %ebx,%ebx
		add    %eax,%edx
		mov    %ebx,0x28(%esp)
		mov    0x4(%edx,%ebx,1),%ebx
		sar    $0x10,%ebx
		mov    %ebx,0x50(%esp)
		mov    %edi,%ebx
		shl    $0x4,%ebx
		mov    %ebx,0x38(%esp)
		add    %ebx,%eax
		mov    0x10(%esp),%ebx
		add    %ebx,%ebx
		mov    %ebx,0x34(%esp)
		mov    0x4(%ebx,%eax,1),%ebx
		sar    $0x10,%ebx
		mov    %ebx,0x4c(%esp)
		mov    0x1c(%esp),%ebx
		add    %ebx,%ebx
		mov    %ebp,0x44(%esp)
		mov    %ebx,0x2c(%esp)
		mov    (%edx,%ebx,1),%bx
		and    $0xffff,%ebx
		mov    EXPORT_SYMBOL(triangulation)+0x38,%ecx # triangulation.Points
		shl    $0x3,%ebx
		mov    %ecx,0x4(%esp)
		add    %ecx,%ebx
		mov    0x14(%esp),%ecx
		add    %ecx,%ecx
		add    %ecx,%eax
		mov    %ecx,0x40(%esp)
		mov    (%eax),%ax
		and    $0xffff,%eax
		lea    0x0(,%eax,8),%ecx
		add    0x4(%esp),%ecx
		mov    0x4(%ebx),%eax
		sub    0x4(%ecx),%eax
		mov    %eax,0xc(%esp)
		mov    (%ebx),%eax
		mov    (%ecx),%ebx
		sub    %ebx,%eax
		mov    %eax,0x8(%esp)
		mov    0x20(%esp),%eax
		add    %eax,%eax
		add    %eax,%edx
		mov    %eax,0x3c(%esp)
		xor    %eax,%eax
		mov    (%edx),%ax
		mov    0x4(%esp),%edx
		shl    $0x3,%eax
		add    %eax,%edx
		mov    0x4(%ecx),%eax
		mov    0x4(%edx),%ebx
		sub    %ebx,%eax
		mov    %eax,%ebx
		mov    (%ecx),%eax
		mov    (%edx),%ecx
		mov    0xc(%esp),%edx
		sub    %ecx,%eax
		mov    0x8(%esp),%ecx
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_7ff17
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_7ff17:
		movsbl %al,%eax
		test   %eax,%eax
		jg     jump_7ff2b
		xor    %ecx,%ecx
		mov    %ecx,%eax
		add    $0x58,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_7ff2b:
		mov    0x38(%esp),%edx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax # triangulation[0].Triangles
		add    %ebp,%ebp
		mov    %eax,0xc(%esp)
		add    %edx,%eax
		mov    %ebp,%edx
		mov    %ebp,0x30(%esp)
		mov    (%edx,%eax,1),%dx
		and    $0xffff,%edx
		mov    0x40(%esp),%ecx
		lea    0x0(,%edx,8),%ebx
		add    %ecx,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx # triangulation.Points
		mov    (%eax),%ax
		and    $0xffff,%eax
		shl    $0x3,%eax
		lea    (%edx,%eax,1),%ecx
		mov    0x4(%edx,%ebx,1),%eax
		mov    0x4(%ecx),%ebp
		sub    %ebp,%eax
		mov    %eax,0x8(%esp)
		mov    (%edx,%ebx,1),%eax
		sub    (%ecx),%eax
		mov    0x48(%esp),%ebp
		mov    %eax,%ebx
		mov    0xc(%esp),%eax
		add    %ebp,%eax
		add    0x3c(%esp),%eax
		mov    (%eax),%ax
		and    $0xffff,%eax
		shl    $0x3,%eax
		add    %eax,%edx
		mov    0x4(%ecx),%eax
		mov    0x4(%edx),%ebp
		sub    %ebp,%eax
		mov    %eax,%ebp
		mov    (%ecx),%eax
		mov    (%edx),%ecx
		mov    0x8(%esp),%edx
		sub    %ecx,%eax
		mov    %ebx,%ecx
		mov    %ebp,%ebx
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_7ffcc
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_7ffcc:
		movsbl %al,%eax
		test   %eax,%eax
		jl     jump_7ffe0
		xor    %ecx,%ecx
		mov    %ecx,%eax
		add    $0x58,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_7ffe0:
		mov    0x38(%esp),%ecx
		mov    0x40(%esp),%ebx
		mov    0x48(%esp),%eax
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx # triangulation[0].Triangles
		mov    0x28(%esp),%ebp
		add    %edx,%eax
		add    %edx,%ecx
		add    %eax,%ebp
		mov    (%ecx,%ebx,1),%bx
		mov    %ebp,0x8(%esp)
		mov    %bx,0x0(%ebp)
		mov    0x34(%esp),%ebp
		mov    0x3c(%esp),%ebx
		add    %ecx,%ebp
		mov    (%ebx,%eax,1),%bx
		mov    %ebp,0xc(%esp)
		mov    %bx,0x0(%ebp)
		add    0x2c(%esp),%eax
		mov    0x4c(%esp),%ebx
		mov    %bx,0x6(%eax)
		mov    0x8(%esp),%eax
		mov    %di,0x6(%eax)
		add    0x30(%esp),%ecx
		mov    0x50(%esp),%eax
		mov    %ax,0x6(%ecx)
		mov    0xc(%esp),%eax
		mov    0x50(%esp),%ebx
		mov    %si,0x6(%eax)
		cmp    $0xffffffff,%ebx
		je     jump_8009f
		mov    %ebx,%eax
		shl    $0x4,%eax
		add    %edx,%eax
		mov    0x4(%eax),%edx
		sar    $0x10,%edx
		cmp    %esi,%edx
		jne    jump_80064
		xor    %ecx,%ecx
		jmp    jump_8008b
	jump_80064:
		mov    0x6(%eax),%edx
		sar    $0x10,%edx
		cmp    %esi,%edx
		jne    jump_80075
		mov    $0x1,%ecx
		jmp    jump_8008b
	jump_80075:
		mov    0x8(%eax),%eax
		sar    $0x10,%eax
		cmp    %esi,%eax
		jne    jump_80086
		mov    $0x2,%ecx
		jmp    jump_8008b
	jump_80086:
		mov    $0xffffffff,%ecx
	jump_8008b:
		mov    0x50(%esp),%eax
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx # triangulation[0].Triangles
		shl    $0x4,%eax
		add    %edx,%eax
		mov    %di,0x6(%eax,%ecx,2)
	jump_8009f:
		mov    0x4c(%esp),%ecx
		cmp    $0xffffffff,%ecx
		je     jump_800fd
		mov    %ecx,%edx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax # triangulation[0].Triangles
		shl    $0x4,%edx
		add    %edx,%eax
		mov    0x4(%eax),%edx
		sar    $0x10,%edx
		cmp    %edi,%edx
		jne    jump_800c2
		xor    %ecx,%ecx
		jmp    jump_800e9
	jump_800c2:
		mov    0x6(%eax),%edx
		sar    $0x10,%edx
		cmp    %edi,%edx
		jne    jump_800d3
		mov    $0x1,%ecx
		jmp    jump_800e9
	jump_800d3:
		mov    0x8(%eax),%eax
		sar    $0x10,%eax
		cmp    %edi,%eax
		jne    jump_800e4
		mov    $0x2,%ecx
		jmp    jump_800e9
	jump_800e4:
		mov    $0xffffffff,%ecx
	jump_800e9:
		mov    0x4c(%esp),%eax
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx # triangulation[0].Triangles
		shl    $0x4,%eax
		add    %edx,%eax
		mov    %si,0x6(%eax,%ecx,2)
	jump_800fd:
		mov    %esi,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx # triangulation[0].Triangles
		shl    $0x4,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x1c(%esp),%cl
		mov    0xf(%eax),%dl
		mov    $0x1,%eax
		shl    %cl,%eax
		test   %eax,%edx
		setne  %al
		and    $0xff,%eax
		mov    %eax,0x18(%esp)
		mov    %esi,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx
		shl    $0x4,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x54(%esp),%cl
		mov    0xf(%eax),%dl
		mov    $0x1,%eax
		shl    %cl,%eax
		test   %eax,%edx
		setne  %al
		and    $0xff,%eax
		mov    %eax,0x24(%esp)
		mov    %edi,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx
		shl    $0x4,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x44(%esp),%cl
		mov    0xf(%eax),%dl
		mov    $0x1,%eax
		shl    %cl,%eax
		test   %eax,%edx
		setne  %al
		mov    %eax,%ebx
		mov    %edi,%edx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		shl    $0x4,%edx
		and    $0xff,%ebx
		mov    0xf(%edx,%eax,1),%al
		mov    0x10(%esp),%cl
		mov    $0x1,%edx
		and    $0xff,%eax
		shl    %cl,%edx
		test   %edx,%eax
		setne  %al
		mov    0x1c(%esp),%cl
		and    $0xff,%eax
		mov    $0x1,%dl
		mov    %eax,(%esp)
		shl    %cl,%dl
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		shl    $0x4,%esi
		not    %dl
		mov    0xf(%esi,%eax,1),%dh
		and    %dl,%dh
		mov    (%esp),%dl
		shl    %cl,%dl
		or     %dh,%dl
		mov    0x54(%esp),%cl
		mov    %dl,0xf(%esi,%eax,1)
		mov    $0x1,%dl
		shl    %cl,%dl
		not    %dl
		and    0xf(%esi,%eax,1),%dl
		mov    0x18(%esp),%dh
		shl    %cl,%dh
		or     %dh,%dl
		mov    %dl,0xf(%esi,%eax,1)
		mov    %edi,%esi
		shl    $0x4,%esi
		mov    0x44(%esp),%cl
		add    %eax,%esi
		mov    $0x1,%al
		shl    %cl,%al
		not    %al
		mov    0xf(%esi),%ah
		and    %al,%ah
		mov    0x24(%esp),%al
		shl    %cl,%al
		or     %ah,%al
		mov    0x10(%esp),%cl
		mov    %al,0xf(%esi)
		mov    $0x1,%al
		shl    %cl,%al
		mov    0xf(%esi),%bh
		not    %al
		and    %bh,%al
		mov    %bl,%ah
		shl    %cl,%ah
		or     %ah,%al
		mov    $0x1,%ecx
		mov    %al,0xf(%esi)
	jump_80223:
		mov    %ecx,%eax
		add    $0x58,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_tri_split3)	/* 0x80230 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x14,%esp
		mov    %eax,0x10(%esp)
		mov    %edx,0x8(%esp)
		mov    %ebx,0xc(%esp)
		mov    EXPORT_SYMBOL(triangulation)+0x14,%edx # triangulation[0].free_Triangles
		cmp    $0xffffffff,%edx
		je     jump_80266
		mov    %edx,%ebx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax # triangulation[0].Triangles
		shl    $0x4,%ebx
		mov    0x4(%ebx,%eax,1),%eax
		sar    $0x10,%eax
		mov    %eax,EXPORT_SYMBOL(triangulation)+0x14 # triangulation[0].free_Triangles
		jmp    jump_80273
	jump_80266:
		mov    EXPORT_SYMBOL(triangulation)+0x0C,%eax # triangulation[0].ix_Triangles
		mov    %eax,%edx
		inc    %eax
		mov    %eax,EXPORT_SYMBOL(triangulation)+0x0C
	jump_80273:
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax # triangulation[0].Triangles
		mov    EXPORT_SYMBOL(triangulation)+0x10,%ecx
		mov    EXPORT_SYMBOL(triangulation)+0x14,%esi # triangulation[0].free_Triangles
		mov    %edx,%ebx
		inc    %ecx
		shl    $0x4,%ebx
		mov    %ecx,EXPORT_SYMBOL(triangulation)+0x10
		movb   $0x0,0xe(%ebx,%eax,1)
		cmp    $0xffffffff,%esi
		je     jump_802af
		mov    %esi,%ecx
		shl    $0x4,%ecx
		mov    0x4(%ecx,%eax,1),%eax
		sar    $0x10,%eax
		mov    %esi,%ebx
		mov    %eax,EXPORT_SYMBOL(triangulation)+0x14 # triangulation[0].free_Triangles
		jmp    jump_802bc
	jump_802af:
		mov    EXPORT_SYMBOL(triangulation)+0x0C,%eax
		mov    %eax,%ebx
		inc    %eax
		mov    %eax,EXPORT_SYMBOL(triangulation)+0x0C
	jump_802bc:
		mov    %ebx,%eax
		mov    0x10(%esp),%ebp
		shl    $0x4,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x10,%edi
		mov    %eax,(%esp)
		inc    %edi
		mov    (%esp),%ecx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		shl    $0x4,%ebp
		movb   $0x0,0xe(%ecx,%eax,1)
		mov    %edx,%ecx
		mov    %edi,EXPORT_SYMBOL(triangulation)+0x10
		shl    $0x4,%ecx
		lea    (%eax,%ebp,1),%esi
		mov    %ecx,0x4(%esp)
		lea    (%ecx,%eax,1),%edi
		mov    $0x10,%ecx
		push   %edi
		mov    %ecx,%eax
		shr    $0x2,%ecx
		repnz movsl %ds:(%esi),%es:(%edi)
		mov    %al,%cl
		and    $0x3,%cl
		repnz movsb %ds:(%esi),%es:(%edi)
		pop    %edi
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edi
		mov    (%esp),%eax
		lea    (%edi,%ebp,1),%esi
		mov    $0x10,%ecx
		add    %eax,%edi
		push   %edi
		mov    %ecx,%eax
		shr    $0x2,%ecx
		repnz movsl %ds:(%esi),%es:(%edi)
		mov    %al,%cl
		and    $0x3,%cl
		repnz movsb %ds:(%esi),%es:(%edi)
		pop    %edi
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		movzbl 0xf(%eax,%ebp,1),%edi
		call   point_new
		mov    EXPORT_SYMBOL(triangulation)+0x38,%esi # triangulation.Points
		mov    %eax,%ecx
		shl    $0x3,%eax
		add    %esi,%eax
		mov    0x8(%esp),%esi
		mov    %esi,(%eax)
		mov    0xc(%esp),%esi
		mov    %esi,0x4(%eax)
		mov    EXPORT_SYMBOL(triangulation)+0x20,%esi
		lea    (%esi,%ebp,1),%eax
		mov    0x4(%esp),%ebp
		add    %esi,%ebp
		mov    %cx,0x4(%eax)
		mov    %cx,0x0(%ebp)
		add    (%esp),%esi
		mov    %cx,0x2(%esi)
		orb    $0x6,0xf(%eax)
		mov    %edi,%ecx
		mov    %dx,0x8(%eax)
		and    $0x18,%ecx
		mov    %bx,0xa(%eax)
		cmp    $0x18,%ecx
		je     jump_80398
		mov    0xf(%eax),%ch
		movw   $0xffff,0xc(%eax)
		and    $0x7,%ch
		mov    %ch,0xf(%eax)
	jump_80398:
		mov    %edx,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x20,%ecx
		shl    $0x4,%eax
		add    %ecx,%eax
		mov    0x10(%esp),%ecx
		mov    %cx,0x6(%eax)
		orb    $0x5,0xf(%eax)
		mov    %edi,%ecx
		and    $0x28,%ecx
		mov    %bx,0xa(%eax)
		cmp    $0x28,%ecx
		je     jump_803ce
		mov    0xf(%eax),%ch
		movw   $0xffff,0xc(%eax)
		and    $0x7,%ch
		mov    %ch,0xf(%eax)
	jump_803ce:
		mov    %ebx,%ecx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		shl    $0x4,%ecx
		add    %ecx,%eax
		mov    0x10(%esp),%ecx
		mov    %cx,0x6(%eax)
		mov    0xf(%eax),%cl
		mov    %dx,0x8(%eax)
		or     $0x3,%cl
		and    $0x48,%edi
		mov    %cl,0xf(%eax)
		cmp    $0x48,%edi
		je     jump_80405
		mov    %cl,%ch
		movw   $0xffff,0xc(%eax)
		and    $0x7,%ch
		mov    %ch,0xf(%eax)
	jump_80405:
		mov    %edx,%ecx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		shl    $0x4,%ecx
		mov    0x6(%ecx,%eax,1),%ecx
		sar    $0x10,%ecx
		cmp    $0xffffffff,%ecx
		je     jump_8046d
		mov    %ecx,%esi
		shl    $0x4,%esi
		add    %esi,%eax
		mov    0x4(%eax),%esi
		mov    0x10(%esp),%edi
		sar    $0x10,%esi
		cmp    %edi,%esi
		jne    jump_80434
		xor    %eax,%eax
		jmp    jump_8045b
	jump_80434:
		mov    0x6(%eax),%esi
		sar    $0x10,%esi
		cmp    %edi,%esi
		jne    jump_80445
		mov    $0x1,%eax
		jmp    jump_8045b
	jump_80445:
		mov    0x8(%eax),%eax
		sar    $0x10,%eax
		cmp    %edi,%eax
		jne    jump_80456
		mov    $0x2,%eax
		jmp    jump_8045b
	jump_80456:
		mov    $0xffffffff,%eax
	jump_8045b:
		mov    %ecx,%esi
		mov    EXPORT_SYMBOL(triangulation)+0x20,%ecx
		shl    $0x4,%esi
		add    %esi,%ecx
		mov    %dx,0x6(%ecx,%eax,2)
	jump_8046d:
		mov    %ebx,%edx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		shl    $0x4,%edx
		mov    0x8(%edx,%eax,1),%edx
		sar    $0x10,%edx
		cmp    $0xffffffff,%edx
		je     jump_804d3
		mov    %edx,%ecx
		shl    $0x4,%ecx
		add    %ecx,%eax
		mov    0x4(%eax),%ecx
		mov    0x10(%esp),%edi
		sar    $0x10,%ecx
		cmp    %edi,%ecx
		jne    jump_8049c
		xor    %eax,%eax
		jmp    jump_804c3
	jump_8049c:
		mov    0x6(%eax),%ecx
		sar    $0x10,%ecx
		cmp    %edi,%ecx
		jne    jump_804ad
		mov    $0x1,%eax
		jmp    jump_804c3
	jump_804ad:
		mov    0x8(%eax),%eax
		sar    $0x10,%eax
		cmp    %edi,%eax
		jne    jump_804be
		mov    $0x2,%eax
		jmp    jump_804c3
	jump_804be:
		mov    $0xffffffff,%eax
	jump_804c3:
		mov    EXPORT_SYMBOL(triangulation)+0x20,%ecx
		shl    $0x4,%edx
		add    %ecx,%edx
		mov    %bx,0x6(%edx,%eax,2)
	jump_804d3:
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_tri_split2)	/* 0x804DC */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    %eax,0x4(%esp)
		mov    %edx,%ebp
		mov    EXPORT_SYMBOL(triangulation)+0x14,%edx # triangulation[0].free_Triangles
		cmp    $0xffffffff,%edx
		je     jump_8050e
		mov    %edx,%ebx
		mov    %edx,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx # triangulation[0].Triangles
		shl    $0x4,%eax
		mov    0x4(%edx,%eax,1),%eax
		sar    $0x10,%eax
		mov    %eax,EXPORT_SYMBOL(triangulation)+0x14 # triangulation[0].free_Triangles
		jmp    jump_8051b
	jump_8050e:
		mov    EXPORT_SYMBOL(triangulation)+0x0C,%eax # triangulation[0].ix_Triangles
		mov    %eax,%ebx
		inc    %eax
		mov    %eax,EXPORT_SYMBOL(triangulation)+0x0C
	jump_8051b:
		mov    0x4(%esp),%edx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%esi # triangulation[0].Triangles
		mov    %ebx,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x10,%ecx
		shl    $0x4,%eax
		inc    %ecx
		shl    $0x4,%edx
		mov    %eax,(%esp)
		mov    %ecx,EXPORT_SYMBOL(triangulation)+0x10
		lea    (%eax,%esi,1),%edi
		mov    $0x10,%ecx
		add    %edx,%esi
		movb   $0x0,0xe(%edi)
		push   %edi
		mov    %ecx,%eax
		shr    $0x2,%ecx
		repnz movsl %ds:(%esi),%es:(%edi)
		mov    %al,%cl
		and    $0x3,%cl
		repnz movsb %ds:(%esi),%es:(%edi)
		pop    %edi
		mov    EXPORT_SYMBOL(MOD3)+4(,%ebp,4),%ecx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edi
		add    %ecx,%ecx
		lea    (%edi,%edx,1),%esi
		lea    (%esi,%ecx,1),%edx
		mov    0x18(%esp),%ecx
		mov    %cx,(%edx)
		mov    (%esp),%edx
		add    %edi,%edx
		mov    %cx,(%edx,%ebp,2)
		mov    EXPORT_SYMBOL(MOD3)+4(,%ebp,4),%ecx
		mov    %bx,0x6(%esi,%ecx,2)
		mov    EXPORT_SYMBOL(MOD3)+4(,%ebp,4),%cl
		mov    $0x1,%ch
		mov    0xf(%esi),%ah
		shl    %cl,%ch
		or     %ch,%ah
		mov    %ah,0xf(%esi)
		mov    EXPORT_SYMBOL(MOD3)+8(,%ebp,4),%esi
		mov    0x4(%esp),%ecx
		mov    %cx,0x6(%edx,%esi,2)
		mov    EXPORT_SYMBOL(MOD3)+8(,%ebp,4),%cl
		mov    $0x1,%ch
		shl    %cl,%ch
		mov    %ch,%cl
		or     %cl,0xf(%edx)
		mov    EXPORT_SYMBOL(MOD3)+4(,%ebp,4),%eax
		mov    0x4(%edx,%eax,2),%edx
		sar    $0x10,%edx
		cmp    $0xffffffff,%edx
		je     jump_80624
		mov    %edx,%eax
		shl    $0x4,%eax
		add    %edi,%eax
		mov    0x4(%eax),%esi
		mov    0x4(%esp),%edi
		sar    $0x10,%esi
		cmp    %edi,%esi
		jne    jump_805eb
		xor    %eax,%eax
		jmp    jump_80612
	jump_805eb:
		mov    0x6(%eax),%esi
		sar    $0x10,%esi
		cmp    %edi,%esi
		jne    jump_805fc
		mov    $0x1,%eax
		jmp    jump_80612
	jump_805fc:
		mov    0x8(%eax),%eax
		sar    $0x10,%eax
		cmp    %edi,%eax
		jne    jump_8060d
		mov    $0x2,%eax
		jmp    jump_80612
	jump_8060d:
		mov    $0xffffffff,%eax
	jump_80612:
		mov    %edx,%esi
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx
		shl    $0x4,%esi
		add    %esi,%edx
		mov    %bx,0x6(%edx,%eax,2)
	jump_80624:
		mov    %ebx,%eax
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_edge_split)	/* 0x80630 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x14,%esp
		mov    %eax,%esi
		mov    %edx,0x8(%esp)
		mov    %ebx,%ebp
		mov    %ecx,%edi
		call   point_new
		mov    %eax,0x4(%esp)
		lea    0x0(,%eax,8),%edx
		mov    EXPORT_SYMBOL(triangulation)+0x38,%eax # triangulation.Points
		mov    %ebx,(%edx,%eax,1)
		mov    %ecx,0x4(%edx,%eax,1)
		mov    %esi,%edx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax # triangulation[0].Triangles
		shl    $0x4,%edx
		lea    (%eax,%edx,1),%ebx
		mov    0x8(%esp),%edx
		mov    0x4(%ebx,%edx,2),%edx
		sar    $0x10,%edx
		mov    %edx,0xc(%esp)
		shl    $0x4,%edx
		add    %edx,%eax
		mov    0x4(%eax),%edx
		sar    $0x10,%edx
		cmp    %esi,%edx
		jne    jump_8068f
		xor    %eax,%eax
		mov    %eax,0x10(%esp)
		jmp    jump_806bf
	jump_8068f:
		mov    0x6(%eax),%edx
		sar    $0x10,%edx
		cmp    %esi,%edx
		jne    jump_806a3
		movl   $0x1,0x10(%esp)
		jmp    jump_806bf
	jump_806a3:
		mov    0x8(%eax),%eax
		sar    $0x10,%eax
		cmp    %esi,%eax
		jne    jump_806b7
		movl   $0x2,0x10(%esp)
		jmp    jump_806bf
	jump_806b7:
		movl   $0xffffffff,0x10(%esp)
	jump_806bf:
		mov    0x4(%esp),%edx
		mov    %edi,%ecx
		mov    %ebp,%ebx
		push   %edx
		mov    %esi,%eax
		mov    0xc(%esp),%edx
		call   ac_tri_split2
		mov    0x4(%esp),%ebx
		mov    0x10(%esp),%edx
		mov    %eax,(%esp)
		mov    %edi,%ecx
		mov    0xc(%esp),%eax
		push   %ebx
		mov    %ebp,%ebx
		shl    $0x4,%esi
		call   ac_tri_split2
		mov    %eax,%edx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		mov    0x8(%esp),%edi
		add    %eax,%esi
		mov    %dx,0x6(%esi,%edi,2)
		mov    0xc(%esp),%edx
		shl    $0x4,%edx
		add    %eax,%edx
		mov    0x10(%esp),%eax
		add    %eax,%eax
		add    %edx,%eax
		mov    (%esp),%edx
		mov    %dx,0x6(%eax)
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
line_intersect8:	/* 0x80720 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		mov    0x20(%esp),%ebp
		mov    %edx,%esi
		mov    %ecx,%edi
		mov    0x1c(%esp),%edx
		cmp    %ebx,%eax
		jle    jump_80742
		mov    %eax,%ecx
		mov    %ebx,%eax
		mov    %ecx,%ebx
		mov    %esi,%ecx
		mov    %edi,%esi
		mov    %ecx,%edi
	jump_80742:
		cmp    0x24(%esp),%edx
		jle    jump_8075c
		mov    %edx,%ecx
		mov    0x24(%esp),%edx
		mov    %ecx,0x24(%esp)
		mov    %ebp,%ecx
		mov    0x28(%esp),%ebp
		mov    %ecx,0x28(%esp)
	jump_8075c:
		sub    %eax,0x24(%esp)
		mov    0x28(%esp),%ecx
		sub    %esi,%ecx
		sub    %eax,%edx
		mov    %ecx,0x28(%esp)
		mov    0x24(%esp),%ecx
		sub    %edx,%ecx
		sub    %esi,%ebp
		mov    %ecx,(%esp)
		imul   %ebp,%ecx
		mov    %ecx,0x4(%esp)
		mov    0x28(%esp),%ecx
		sub    %ebp,%ecx
		imul   %ecx,%edx
		sub    %eax,%ebx
		mov    %ecx,%ebp
		imul   %ebx,%ebp
		mov    0x4(%esp),%ecx
		sub    %esi,%edi
		sub    %edx,%ecx
		mov    (%esp),%edx
		imul   %edi,%edx
		mov    %ecx,0x8(%esp)
		sub    %ebp,%edx
		mov    %edx,%ebp
		jne    jump_807b8
		mov    0x2c(%esp),%edx
		shl    $0x8,%eax
		mov    %eax,(%edx)
		mov    0x30(%esp),%eax
		shl    $0x8,%esi
		jmp    jump_807f2
	jump_807b8:
		shl    $0x8,%eax
		mov    %edx,%ecx
		mov    %eax,0x4(%esp)
		mov    %ebx,%eax
		mov    0x8(%esp),%ebx
		shl    $0x8,%eax
		imul   %ebx
		idiv   %ecx
		mov    0x4(%esp),%edx
		add    %eax,%edx
		mov    0x2c(%esp),%eax
		mov    0x8(%esp),%ebx
		mov    %edx,(%eax)
		mov    %edi,%eax
		mov    %ebp,%ecx
		shl    $0x8,%eax
		shl    $0x8,%esi
		imul   %ebx
		idiv   %ecx
		add    %eax,%esi
		mov    0x30(%esp),%eax
	jump_807f2:
		mov    %esi,(%eax)
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x18


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_insert_point)	/* 0x80800 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		mov    %eax,%esi
		mov    %edx,%edi
		shl    $0x8,%edx
		shl    $0x8,%eax
		call   ac_triangle_find8
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx # triangulation[0].Triangles
		mov    %eax,%ebp
		shl    $0x4,%eax
		mov    (%edx,%eax,1),%ax
		and    $0xffff,%eax
		lea    0x0(,%eax,8),%edx
		mov    EXPORT_SYMBOL(triangulation)+0x38,%eax # triangulation.Points
		add    %edx,%eax
		cmp    (%eax),%esi
		jne    jump_80846
		cmp    0x4(%eax),%edi
		je     jump_80a5a
	jump_80846:
		mov    %ebp,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx
		shl    $0x4,%eax
		mov    0x2(%edx,%eax,1),%ax
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx # triangulation.Points
		shl    $0x3,%eax
		add    %edx,%eax
		cmp    (%eax),%esi
		jne    jump_80873
		cmp    0x4(%eax),%edi
		je     jump_80a5a
	jump_80873:
		mov    %ebp,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx
		shl    $0x4,%eax
		mov    0x4(%edx,%eax,1),%ax
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx # triangulation.Points
		shl    $0x3,%eax
		add    %edx,%eax
		cmp    (%eax),%esi
		jne    jump_808a0
		cmp    0x4(%eax),%edi
		je     jump_80a5a
	jump_808a0:
		mov    %ebp,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx
		shl    $0x4,%eax
		add    %eax,%edx
		mov    %eax,0x8(%esp)
		xor    %eax,%eax
		mov    0x2(%edx),%ax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%ebx # triangulation.Points
		shl    $0x3,%eax
		add    %ebx,%eax
		mov    %edi,%ecx
		mov    %ebx,(%esp)
		sub    0x4(%eax),%ecx
		mov    %esi,%ebx
		sub    (%eax),%ebx
		mov    (%edx),%dx
		mov    %ebx,0x4(%esp)
		and    $0xffff,%edx
		lea    0x0(,%edx,8),%ebx
		add    (%esp),%ebx
		mov    0x4(%eax),%edx
		sub    0x4(%ebx),%edx
		mov    (%eax),%eax
		mov    %edx,(%esp)
		mov    (%ebx),%edx
		mov    (%esp),%ebx
		sub    %edx,%eax
		mov    %ecx,%edx
		mov    0x4(%esp),%ecx
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_80915
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_80915:
		movsbl %al,%eax
		test   %eax,%eax
		jne    jump_8092e
		mov    %edi,%ecx
		mov    %esi,%ebx
		mov    %ebp,%eax
		xor    %edx,%edx
		call   ac_edge_split
		jmp    jump_80a5a
	jump_8092e:
		mov    0x8(%esp),%ebx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx # triangulation[0].Triangles
		add    %ebx,%edx
		xor    %eax,%eax
		mov    0x4(%edx),%ax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%ebx # triangulation.Points
		shl    $0x3,%eax
		add    %ebx,%eax
		mov    %ebx,(%esp)
		mov    %edi,%ebx
		mov    0x4(%eax),%ecx
		sub    %ecx,%ebx
		mov    %ebx,0x4(%esp)
		mov    %esi,%ecx
		mov    (%eax),%ebx
		mov    0x2(%edx),%dx
		sub    %ebx,%ecx
		and    $0xffff,%edx
		mov    (%esp),%ebx
		shl    $0x3,%edx
		add    %edx,%ebx
		mov    0x4(%eax),%edx
		sub    0x4(%ebx),%edx
		mov    (%eax),%eax
		mov    %edx,(%esp)
		mov    (%ebx),%edx
		mov    (%esp),%ebx
		sub    %edx,%eax
		mov    0x4(%esp),%edx
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_8099f
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_8099f:
		movsbl %al,%eax
		test   %eax,%eax
		jne    jump_809bf
		mov    $0x1,%edx
		mov    %edi,%ecx
		mov    %esi,%ebx
		mov    %ebp,%eax
		call   ac_edge_split
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_809bf:
		mov    0x8(%esp),%ebx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx # triangulation[0].Triangles
		add    %ebx,%edx
		xor    %eax,%eax
		mov    (%edx),%ax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%ebx # triangulation.Points
		shl    $0x3,%eax
		add    %ebx,%eax
		mov    %edi,%ecx
		mov    %ebx,0x4(%esp)
		sub    0x4(%eax),%ecx
		mov    %esi,%ebx
		sub    (%eax),%ebx
		mov    0x4(%edx),%dx
		mov    %ebx,(%esp)
		and    $0xffff,%edx
		mov    0x4(%esp),%ebx
		shl    $0x3,%edx
		add    %edx,%ebx
		mov    0x4(%eax),%edx
		sub    0x4(%ebx),%edx
		mov    (%eax),%eax
		mov    %edx,0x4(%esp)
		mov    (%ebx),%edx
		mov    0x4(%esp),%ebx
		sub    %edx,%eax
		mov    %ecx,%edx
		mov    (%esp),%ecx
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_80a2f
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_80a2f:
		movsbl %al,%eax
		test   %eax,%eax
		jne    jump_80a4f
		mov    $0x2,%edx
		mov    %edi,%ecx
		mov    %esi,%ebx
		mov    %ebp,%eax
		call   ac_edge_split
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_80a4f:
		mov    %edi,%ebx
		mov    %esi,%edx
		mov    %ebp,%eax
		call   ac_tri_split3
	jump_80a5a:
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
reduce_point:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    %eax,0x4(%esp)
		mov    %edx,(%esp)
		mov    (%eax),%ebx
		mov    (%edx),%ecx
		xor    %edi,%edi
		mov    $0x1,%edx
		mov    %ebx,%ebp
		mov    %edx,data_1aae3c
	jump_80a86:
		mov    %ebx,%edx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax # triangulation[0].Triangles
		shl    $0x4,%edx
		add    %eax,%edx
		mov    0x4(%edx,%ecx,2),%esi
		sar    $0x10,%esi
		cmp    $0xffffffff,%esi
		jne    jump_80aa5
		mov    %esi,%eax
		jmp    jump_80b1b
	jump_80aa5:
		mov    %ecx,%edx
		mov    %ebx,%eax
		call   ac_edge_rotateAC
		test   %eax,%eax
		jne    jump_80b06
		mov    %esi,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx
		shl    $0x4,%eax
		add    %eax,%edx
		mov    0x4(%edx),%eax
		sar    $0x10,%eax
		cmp    %ebx,%eax
		jne    jump_80acd
		xor    %edx,%edx
		jmp    jump_80af4
	jump_80acd:
		mov    0x6(%edx),%eax
		sar    $0x10,%eax
		cmp    %ebx,%eax
		jne    jump_80ade
		mov    $0x1,%edx
		jmp    jump_80af4
	jump_80ade:
		mov    0x8(%edx),%eax
		sar    $0x10,%eax
		cmp    %ebx,%eax
		jne    jump_80aef
		mov    $0x2,%edx
		jmp    jump_80af4
	jump_80aef:
		mov    $0xffffffff,%edx
	jump_80af4:
		inc    %edx
		mov    $0x3,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		inc    %edi
		mov    %edx,%ecx
		mov    %esi,%ebx
	jump_80b06:
		cmp    %ebp,%esi
		jne    jump_80a86
		mov    0x4(%esp),%eax
		mov    %ebx,(%eax)
		mov    (%esp),%eax
		mov    %ecx,(%eax)
		mov    %edi,%eax
	jump_80b1b:
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_80b24:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x70,%esp
		mov    %eax,%ebp
		mov    %edx,0x68(%esp)
	jump_80b32:
		mov    0x68(%esp),%eax
		mov    0x0(%ebp),%edi
		xor    %esi,%esi
		mov    %edi,%edx
		mov    (%eax),%eax
	jump_80b3f:
		mov    %edx,%ebx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%ecx
		shl    $0x4,%ebx
		add    %ecx,%ebx
		mov    0x4(%ebx,%eax,2),%ebx
		sar    $0x10,%ebx
		cmp    $0xffffffff,%ebx
		jne    jump_80b5c
		mov    %ebx,%esi
		jmp    jump_80bae
	jump_80b5c:
		mov    %ebx,%eax
		shl    $0x4,%eax
		add    %ecx,%eax
		mov    0x4(%eax),%ecx
		sar    $0x10,%ecx
		cmp    %edx,%ecx
		jne    jump_80b71
		xor    %edx,%edx
		jmp    jump_80b98
	jump_80b71:
		mov    0x6(%eax),%ecx
		sar    $0x10,%ecx
		cmp    %edx,%ecx
		jne    jump_80b82
		mov    $0x1,%edx
		jmp    jump_80b98
	jump_80b82:
		mov    0x8(%eax),%eax
		sar    $0x10,%eax
		cmp    %edx,%eax
		jne    jump_80b93
		mov    $0x2,%edx
		jmp    jump_80b98
	jump_80b93:
		mov    $0xffffffff,%edx
	jump_80b98:
		inc    %edx
		mov    $0x3,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		inc    %esi
		mov    %edx,%eax
		mov    %ebx,%edx
		cmp    %edi,%ebx
		jne    jump_80b3f
	jump_80bae:
		mov    0x68(%esp),%edx
		mov    %ebp,%eax
		mov    %esi,0x64(%esp)
		call   reduce_point
		mov    %eax,0x6c(%esp)
		cmp    $0xffffffff,%eax
		je     jump_80c88
		mov    0x68(%esp),%eax
		mov    0x0(%ebp),%edi
		xor    %esi,%esi
		mov    %edi,%edx
		mov    (%eax),%eax
	jump_80bd7:
		mov    %edx,%ebx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%ecx
		shl    $0x4,%ebx
		add    %ecx,%ebx
		mov    0x4(%ebx,%eax,2),%ebx
		sar    $0x10,%ebx
		cmp    $0xffffffff,%ebx
		jne    jump_80bf4
		mov    %ebx,%esi
		jmp    jump_80c46
	jump_80bf4:
		mov    %ebx,%eax
		shl    $0x4,%eax
		add    %ecx,%eax
		mov    0x4(%eax),%ecx
		sar    $0x10,%ecx
		cmp    %edx,%ecx
		jne    jump_80c09
		xor    %edx,%edx
		jmp    jump_80c30
	jump_80c09:
		mov    0x6(%eax),%ecx
		sar    $0x10,%ecx
		cmp    %edx,%ecx
		jne    jump_80c1a
		mov    $0x1,%edx
		jmp    jump_80c30
	jump_80c1a:
		mov    0x8(%eax),%eax
		sar    $0x10,%eax
		cmp    %edx,%eax
		jne    jump_80c2b
		mov    $0x2,%edx
		jmp    jump_80c30
	jump_80c2b:
		mov    $0xffffffff,%edx
	jump_80c30:
		inc    %edx
		mov    $0x3,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		inc    %esi
		mov    %edx,%eax
		mov    %ebx,%edx
		cmp    %edi,%ebx
		jne    jump_80bd7
	jump_80c46:
		mov    0x6c(%esp),%edx
		mov    %esi,%eax
		cmp    %edx,%esi
		jne    jump_80c60
		cmp    $0x3,%edx
		je     jump_80c5a
		cmp    $0x4,%edx
		jne    jump_80c60
	jump_80c5a:
		mov    0x6c(%esp),%eax
		jmp    jump_80c88
	jump_80c60:
		push   %eax
		mov    0x70(%esp),%esi
		push   %esi
		mov    0x6c(%esp),%edi
		push   %edi
		push   $aL002ldN02ldL10
		lea    0x10(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0x14,%esp
		cmp    $0x4,%esi
		jg     jump_80b32
		mov    %esi,%eax
	jump_80c88:
		add    $0x70,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
edge_collapse:	/* 0x80c94 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    %eax,%esi
		mov    %edx,%edi
		mov    %ebx,%edx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		shl    $0x4,%edx
		lea    (%eax,%edx,1),%ebp
		mov    EXPORT_SYMBOL(MOD3)+4(,%ecx,4),%edx
		add    %edx,%edx
		mov    %edx,(%esp)
		mov    %ebp,%edx
		add    (%esp),%edx
		mov    0x4(%edx),%edx
		sar    $0x10,%edx
		mov    %edx,%ebp
		shl    $0x4,%ebp
		add    %ebp,%eax
		mov    0x4(%eax),%ebp
		sar    $0x10,%ebp
		cmp    %ebp,%ebx
		jne    jump_80cd7
		xor    %eax,%eax
		jmp    jump_80cfe
	jump_80cd7:
		mov    0x6(%eax),%ebp
		sar    $0x10,%ebp
		cmp    %ebp,%ebx
		jne    jump_80ce8
		mov    $0x1,%eax
		jmp    jump_80cfe
	jump_80ce8:
		mov    0x8(%eax),%eax
		sar    $0x10,%eax
		cmp    %ebx,%eax
		jne    jump_80cf9
		mov    $0x2,%eax
		jmp    jump_80cfe
	jump_80cf9:
		mov    $0xffffffff,%eax
	jump_80cfe:
		mov    EXPORT_SYMBOL(MOD3)+4(,%ecx,4),%ecx
		add    %ecx,%ecx
		mov    %ecx,(%esp)
		mov    %ebx,%ecx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%ebx
		shl    $0x4,%ecx
		mov    (%esp),%ebp
		add    %ebx,%ecx
		add    %ecx,%ebp
		mov    %esi,%ecx
		shl    $0x4,%ecx
		add    %ebx,%ecx
		add    %edi,%edi
		add    %edi,%ecx
		mov    0x0(%ebp),%di
		mov    %dx,0x6(%ecx)
		shl    $0x4,%edx
		add    %ebx,%edx
		mov    %di,(%ecx)
		mov    %si,0x6(%edx,%eax,2)
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
func_80d44:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x3c,%esp
		mov    %eax,%esi
		mov    %edx,%ebp
		mov    %eax,%edx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		shl    $0x4,%edx
		lea    (%eax,%edx,1),%ebx
		lea    0x0(,%ebp,2),%edx
		add    %ebx,%edx
		xor    %ebx,%ebx
		mov    (%edx),%bx
		mov    0x4(%edx),%edx
		sar    $0x10,%edx
		mov    %edx,0x38(%esp)
		shl    $0x4,%edx
		add    %edx,%eax
		mov    0x4(%eax),%edx
		sar    $0x10,%edx
		mov    %ebx,0x10(%esp)
		cmp    %esi,%edx
		jne    jump_80d8c
		xor    %edi,%edi
		jmp    jump_80db3
	jump_80d8c:
		mov    0x6(%eax),%edx
		sar    $0x10,%edx
		cmp    %esi,%edx
		jne    jump_80d9d
		mov    $0x1,%edi
		jmp    jump_80db3
	jump_80d9d:
		mov    0x8(%eax),%eax
		sar    $0x10,%eax
		cmp    %esi,%eax
		jne    jump_80dae
		mov    $0x2,%edi
		jmp    jump_80db3
	jump_80dae:
		mov    $0xffffffff,%edi
	jump_80db3:
		lea    0x1(%edi),%edx
		mov    $0x3,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %edx,0x2c(%esp)
		mov    0x38(%esp),%edx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		shl    $0x4,%edx
		mov    0x2c(%esp),%ebx
		add    %eax,%edx
		mov    0x4(%edx,%ebx,2),%edi
		sar    $0x10,%edi
		mov    %edi,%edx
		shl    $0x4,%edx
		add    %edx,%eax
		mov    0x4(%eax),%edx
		mov    0x38(%esp),%ebx
		sar    $0x10,%edx
		cmp    %ebx,%edx
		jne    jump_80df8
		xor    %ebx,%edx
		jmp    jump_80e1f
	jump_80df8:
		mov    0x6(%eax),%edx
		sar    $0x10,%edx
		cmp    %ebx,%edx
		jne    jump_80e09
		mov    $0x1,%edx
		jmp    jump_80e1f
	jump_80e09:
		mov    0x8(%eax),%eax
		sar    $0x10,%eax
		cmp    %ebx,%eax
		jne    jump_80e1a
		mov    $0x2,%edx
		jmp    jump_80e1f
	jump_80e1a:
		mov    $0xffffffff,%edx
	jump_80e1f:
		inc    %edx
		mov    $0x3,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %edx,0x30(%esp)
		mov    %edi,%edx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		shl    $0x4,%edx
		lea    (%eax,%edx,1),%ebx
		mov    0x30(%esp),%edx
		mov    0x4(%ebx,%edx,2),%edx
		sar    $0x10,%edx
		mov    %edx,0x34(%esp)
		shl    $0x4,%edx
		add    %edx,%eax
		mov    0x4(%eax),%edx
		sar    $0x10,%edx
		cmp    %edi,%edx
		jne    jump_80e5f
		xor    %edi,%edx
		jmp    jump_80e86
	jump_80e5f:
		mov    0x6(%eax),%edx
		sar    $0x10,%edx
		cmp    %edi,%edx
		jne    jump_80e70
		mov    $0x1,%edx
		jmp    jump_80e86
	jump_80e70:
		mov    0x8(%eax),%eax
		sar    $0x10,%eax
		cmp    %edi,%eax
		jne    jump_80e81
		mov    $0x2,%edx
		jmp    jump_80e86
	jump_80e81:
		mov    $0xffffffff,%edx
	jump_80e86:
		inc    %edx
		mov    $0x3,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    0x34(%esp),%eax
		shl    $0x4,%eax
		mov    %eax,0x14(%esp)
		mov    0x14(%esp),%ebx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %eax,%ebx
		mov    %edx,0x28(%esp)
		mov    0x4(%ebx,%edx,2),%edx
		sar    $0x10,%edx
		cmp    %esi,%edx
		je     jump_80ebf
		xor    %eax,%eax
		jmp    jump_8120e
	jump_80ebf:
		lea    0x0(,%ebp,4),%edx
		mov    %esi,%ebx
		mov    %edx,0x18(%esp)
		shl    $0x4,%ebx
		mov    EXPORT_SYMBOL(MOD3)+4(%edx),%edx
		mov    %ebx,0x24(%esp)
		add    %eax,%ebx
		mov    (%ebx,%edx,2),%dx
		and    $0xffff,%edx
		mov    EXPORT_SYMBOL(triangulation)+0x38,%ebx # triangulation[0].Points
		shl    $0x3,%edx
		lea    (%ebx,%edx,1),%ecx
		mov    0x30(%esp),%edx
		shl    $0x2,%edx
		mov    %edx,0x20(%esp)
		mov    EXPORT_SYMBOL(MOD3)+8(%edx),%edx
		add    %edx,%edx
		mov    %edx,(%esp)
		mov    %edi,%edx
		shl    $0x4,%edx
		mov    %ecx,0x8(%esp)
		mov    %edx,0x1c(%esp)
		add    %eax,%edx
		mov    (%esp),%ecx
		mov    %edx,0xc(%esp)
		lea    (%edx,%ecx,1),%eax
		mov    (%eax),%ax
		and    $0xffff,%eax
		shl    $0x3,%eax
		lea    (%ebx,%eax,1),%edx
		mov    0x8(%esp),%eax
		mov    0x4(%edx),%ecx
		mov    0x4(%eax),%eax
		sub    %ecx,%eax
		mov    %eax,0x4(%esp)
		mov    0x8(%esp),%eax
		mov    (%edx),%ecx
		mov    (%eax),%eax
		sub    %ecx,%eax
		mov    %eax,(%esp)
		mov    0x20(%esp),%eax
		mov    EXPORT_SYMBOL(MOD3)+4(%eax),%eax
		add    %eax,%eax
		mov    %eax,0x8(%esp)
		mov    0xc(%esp),%eax
		add    0x8(%esp),%eax
		mov    (%eax),%ax
		and    $0xffff,%eax
		shl    $0x3,%eax
		add    %eax,%ebx
		mov    0x4(%edx),%eax
		sub    0x4(%ebx),%eax
		mov    (%esp),%ecx
		mov    %eax,(%esp)
		mov    (%edx),%eax
		mov    (%ebx),%edx
		mov    (%esp),%ebx
		sub    %edx,%eax
		mov    0x4(%esp),%edx
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_80fa1
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_80fa1:
		movsbl %al,%eax
		test   %eax,%eax
		jge    jump_8107e
		mov    0x18(%esp),%eax
		mov    0x24(%esp),%ebx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx
		mov    EXPORT_SYMBOL(MOD3)+4(%eax),%eax
		mov    %edx,(%esp)
		add    %ebx,%edx
		mov    (%edx,%eax,2),%ax
		and    $0xffff,%eax
		lea    0x0(,%eax,8),%ebx
		mov    EXPORT_SYMBOL(triangulation)+0x38,%eax # triangulation[0].Points
		lea    (%eax,%ebx,1),%ecx
		mov    0x18(%esp),%ebx
		mov    EXPORT_SYMBOL(MOD3)+8(%ebx),%ebx
		add    %ebx,%ebx
		add    %ebx,%edx
		mov    %ecx,0x4(%esp)
		mov    (%edx),%dx
		and    $0xffff,%edx
		shl    $0x3,%edx
		add    %eax,%edx
		mov    0x4(%ecx),%ebx
		mov    0x4(%edx),%ecx
		sub    %ecx,%ebx
		mov    %ebx,0x8(%esp)
		mov    0x4(%esp),%ebx
		mov    (%edx),%ecx
		mov    (%ebx),%ebx
		sub    %ecx,%ebx
		mov    %ebx,0xc(%esp)
		mov    0x20(%esp),%ebx
		mov    EXPORT_SYMBOL(MOD3)+4(%ebx),%ebx
		add    %ebx,%ebx
		mov    0x1c(%esp),%ecx
		mov    %ebx,0x4(%esp)
		mov    (%esp),%ebx
		add    %ecx,%ebx
		add    0x4(%esp),%ebx
		mov    (%ebx),%bx
		and    $0xffff,%ebx
		shl    $0x3,%ebx
		lea    (%eax,%ebx,1),%ecx
		mov    0x4(%edx),%eax
		mov    0x4(%ecx),%ebx
		sub    %ebx,%eax
		mov    %eax,%ebx
		mov    (%edx),%eax
		mov    (%ecx),%edx
		mov    0xc(%esp),%ecx
		sub    %edx,%eax
		mov    0x8(%esp),%edx
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_81073
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_81073:
		movsbl %al,%eax
		test   %eax,%eax
		jg     jump_81128
	jump_8107e:
		mov    0x2c(%esp),%ecx
		mov    0x38(%esp),%ebx
		mov    %ebp,%edx
		mov    %esi,%eax
		call   edge_collapse
		mov    0x28(%esp),%ecx
		mov    0x34(%esp),%ebx
		mov    0x30(%esp),%edx
		mov    %edi,%eax
		call   edge_collapse
		mov    %esi,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx
		shl    $0x4,%eax
		mov    EXPORT_SYMBOL(MOD3)+8(,%ebp,4),%ebx
		add    %edx,%eax
		mov    %di,0x6(%eax,%ebx,2)
		mov    %edi,%ebx
		mov    0x30(%esp),%eax
		shl    $0x4,%ebx
		mov    EXPORT_SYMBOL(MOD3)+8(,%eax,4),%eax
		add    %edx,%ebx
		mov    %si,0x6(%ebx,%eax,2)
		mov    0x38(%esp),%eax
		shl    $0x4,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x14,%bx # triangulation[0].free_Triangles
		movb   $0xff,0xe(%edx,%eax,1)
		mov    %bx,0x6(%edx,%eax,1)
		mov    0x34(%esp),%eax
		mov    0x38(%esp),%ebx
		shl    $0x4,%eax
		mov    %ebx,EXPORT_SYMBOL(triangulation)+0x14 # triangulation[0].free_Triangles
		add    %eax,%edx
		mov    EXPORT_SYMBOL(triangulation)+0x10,%ebx
		mov    EXPORT_SYMBOL(triangulation)+0x14,%ax # triangulation[0].free_Triangles
		movb   $0xff,0xe(%edx)
		sub    $0x2,%ebx
		mov    %ax,0x6(%edx)
		mov    0x34(%esp),%eax
		mov    %ebx,EXPORT_SYMBOL(triangulation)+0x10
		mov    %eax,EXPORT_SYMBOL(triangulation)+0x14 # triangulation[0].free_Triangles
		jmp    jump_811d3
	jump_81128:
		mov    0x30(%esp),%ecx
		mov    0x2c(%esp),%edx
		mov    0x38(%esp),%eax
		mov    %edi,%ebx
		call   edge_collapse
		mov    0x28(%esp),%edx
		mov    0x34(%esp),%eax
		mov    %ebp,%ecx
		mov    %esi,%ebx
		call   edge_collapse
		mov    0x38(%esp),%eax
		mov    0x2c(%esp),%ebx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx
		shl    $0x4,%eax
		mov    EXPORT_SYMBOL(MOD3)+8(,%ebx,4),%ebx
		add    %edx,%eax
		add    %ebx,%ebx
		add    %ebx,%eax
		mov    0x34(%esp),%ebx
		mov    %bx,0x6(%eax)
		mov    0x28(%esp),%eax
		mov    0x14(%esp),%ebx
		mov    EXPORT_SYMBOL(MOD3)+8(,%eax,4),%eax
		add    %edx,%ebx
		add    %eax,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x10,%ecx
		add    %ebx,%eax
		mov    0x38(%esp),%ebx
		sub    $0x2,%ecx
		mov    %bx,0x6(%eax)
		mov    0x1c(%esp),%eax
		mov    EXPORT_SYMBOL(triangulation)+0x14,%bx
		mov    %edi,EXPORT_SYMBOL(triangulation)+0x14
		movb   $0xff,0xe(%edx,%eax,1)
		mov    0x24(%esp),%edi
		mov    %bx,0x6(%edx,%eax,1)
		add    %edi,%edx
		mov    %ecx,EXPORT_SYMBOL(triangulation)+0x10
		mov    EXPORT_SYMBOL(triangulation)+0x14,%ax
		movb   $0xff,0xe(%edx)
		mov    %esi,EXPORT_SYMBOL(triangulation)+0x14
		mov    %ax,0x6(%edx)
	jump_811d3:
		mov    0x10(%esp),%eax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx # triangulation[0].Points
		shl    $0x3,%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x2C,%edx # triangulation[0].free_Points
		movl   $0x80000000,0x4(%eax)
		mov    EXPORT_SYMBOL(triangulation)+0x28,%ebp # triangulation[0].count_Points
		mov    %edx,(%eax)
		mov    $0x1,%eax
		mov    0x10(%esp),%edx
		sub    %eax,%ebp
		mov    %edx,EXPORT_SYMBOL(triangulation)+0x2C
		mov    %ebp,EXPORT_SYMBOL(triangulation)+0x28 # triangulation[0].count_Points
	jump_8120e:
		add    $0x3c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_81218:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x30,%esp
		mov    %eax,%ecx
		mov    %edx,%ebp
		mov    %eax,%edx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		shl    $0x4,%edx
		lea    0x0(,%ebp,2),%ebx
		add    %eax,%edx
		add    %edx,%ebx
		xor    %edx,%edx
		mov    (%ebx),%dx
		mov    0x4(%ebx),%ebx
		sar    $0x10,%ebx
		mov    %edx,0x18(%esp)
		cmp    $0xffffffff,%ebx
		jne    jump_81254
		xor    %eax,%eax
		jmp    jump_81536
	jump_81254:
		mov    %ebx,%edx
		shl    $0x4,%edx
		add    %edx,%eax
		mov    0x4(%eax),%edx
		sar    $0x10,%edx
		cmp    %ecx,%edx
		jne    jump_81269
		xor    %eax,%eax
		jmp    jump_81290
	jump_81269:
		mov    0x6(%eax),%edx
		sar    $0x10,%edx
		cmp    %ecx,%edx
		jne    jump_8127a
		mov    $0x1,%eax
		jmp    jump_81290
	jump_8127a:
		mov    0x8(%eax),%eax
		sar    $0x10,%eax
		cmp    %ecx,%eax
		jne    jump_8128b
		mov    $0x2,%eax
		jmp    jump_81290
	jump_8128b:
		mov    $0xffffffff,%eax
	jump_81290:
		lea    0x1(%eax),%edx
		mov    $0x3,%esi
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %esi
		mov    %edx,%edi
		mov    %ebx,%edx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		shl    $0x4,%edx
		lea    (%eax,%edx,1),%esi
		lea    0x0(,%edi,2),%edx
		add    %esi,%edx
		mov    0x4(%edx),%esi
		sar    $0x10,%esi
		cmp    $0xffffffff,%esi
		jne    jump_812cd
		xor    %eax,%eax
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_812cd:
		mov    %esi,%edx
		shl    $0x4,%edx
		add    %edx,%eax
		mov    0x4(%eax),%edx
		sar    $0x10,%edx
		cmp    %edx,%ebx
		jne    jump_812e2
		xor    %edx,%edx
		jmp    jump_81309
	jump_812e2:
		mov    0x6(%eax),%edx
		sar    $0x10,%edx
		cmp    %edx,%ebx
		jne    jump_812f3
		mov    $0x1,%edx
		jmp    jump_81309
	jump_812f3:
		mov    0x8(%eax),%eax
		sar    $0x10,%eax
		cmp    %ebx,%eax
		jne    jump_81304
		mov    $0x2,%edx
		jmp    jump_81309
	jump_81304:
		mov    $0xffffffff,%edx
	jump_81309:
		mov    $0x3,%eax
		inc    %edx
		mov    %eax,0x2c(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idivl  0x2c(%esp)
		mov    %edx,0x10(%esp)
		mov    %esi,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx
		shl    $0x4,%eax
		mov    %edx,0x20(%esp)
		add    %eax,%edx
		mov    0x10(%esp),%eax
		add    %eax,%eax
		add    %edx,%eax
		mov    0x4(%eax),%eax
		sar    $0x10,%eax
		mov    %edx,0x14(%esp)
		cmp    %eax,%ecx
		je     jump_81352
		xor    %eax,%eax
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_81352:
		mov    %ebx,%eax
		mov    0x20(%esp),%edx
		shl    $0x4,%eax
		add    %eax,%edx
		mov    EXPORT_SYMBOL(MOD3)+4(,%edi,4),%eax
		add    %eax,%eax
		add    %edx,%eax
		mov    0x4(%eax),%eax
		sar    $0x10,%eax
		mov    %eax,0x1c(%esp)
		mov    0x10(%esp),%eax
		mov    EXPORT_SYMBOL(MOD3)+4(,%eax,4),%eax
		mov    0x14(%esp),%edx
		add    %eax,%eax
		add    %edx,%eax
		mov    0x4(%eax),%eax
		sar    $0x10,%eax
		mov    %eax,0x24(%esp)
		mov    0x1c(%esp),%eax
		mov    0x20(%esp),%edx
		shl    $0x4,%eax
		add    %edx,%eax
		mov    0x4(%eax),%edx
		sar    $0x10,%edx
		cmp    %edx,%ebx
		jne    jump_813aa
		xor    %eax,%eax
		jmp    jump_813d1
	jump_813aa:
		mov    0x6(%eax),%edx
		sar    $0x10,%edx
		cmp    %edx,%ebx
		jne    jump_813bb
		mov    $0x1,%eax
		jmp    jump_813d1
	jump_813bb:
		mov    0x8(%eax),%eax
		sar    $0x10,%eax
		cmp    %ebx,%eax
		jne    jump_813cc
		mov    $0x2,%eax
		jmp    jump_813d1
	jump_813cc:
		mov    $0xffffffff,%eax
	jump_813d1:
		mov    %eax,0xc(%esp)
		mov    0x24(%esp),%eax
		shl    $0x4,%eax
		mov    %eax,0x8(%esp)
		mov    0x8(%esp),%edx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %edx,%eax
		mov    0x4(%eax),%edx
		sar    $0x10,%edx
		cmp    %edx,%esi
		jne    jump_813fd
		xor    %edx,%edx
		mov    %edx,0x28(%esp)
		jmp    jump_8142d
	jump_813fd:
		mov    0x6(%eax),%edx
		sar    $0x10,%edx
		cmp    %edx,%esi
		jne    jump_81411
		movl   $0x1,0x28(%esp)
		jmp    jump_8142d
	jump_81411:
		mov    0x8(%eax),%eax
		sar    $0x10,%eax
		cmp    %esi,%eax
		jne    jump_81425
		movl   $0x2,0x28(%esp)
		jmp    jump_8142d
	jump_81425:
		movl   $0xffffffff,0x28(%esp)
	jump_8142d:
		mov    EXPORT_SYMBOL(MOD3)+4(,%edi,4),%eax
		mov    %ebx,%edx
		add    %eax,%eax
		shl    $0x4,%edx
		mov    %eax,0x4(%esp)
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		lea    (%eax,%edx,1),%edi
		mov    %edi,(%esp)
		mov    %edi,%edx
		mov    0x4(%esp),%edi
		add    %edi,%edx
		mov    %edx,0x4(%esp)
		mov    %ecx,%edx
		shl    $0x4,%edx
		lea    (%eax,%edx,1),%edi
		lea    0x0(,%ebp,2),%edx
		mov    %edi,0x2c(%esp)
		add    %edx,%edi
		mov    0x4(%esp),%edx
		mov    (%edx),%dx
		mov    %dx,(%edi)
		mov    0x1c(%esp),%edx
		mov    %dx,0x6(%edi)
		mov    EXPORT_SYMBOL(MOD3)+8(,%ebp,4),%edx
		mov    0x2c(%esp),%ebp
		add    %edx,%edx
		add    %ebp,%edx
		mov    0x24(%esp),%edi
		mov    %di,0x6(%edx)
		mov    0x1c(%esp),%edx
		shl    $0x4,%edx
		mov    0xc(%esp),%edi
		add    %eax,%edx
		mov    %cx,0x6(%edx,%edi,2)
		mov    0x24(%esp),%edx
		shl    $0x4,%edx
		mov    0x28(%esp),%edi
		add    %eax,%edx
		mov    %cx,0x6(%edx,%edi,2)
		mov    (%esp),%ecx
		mov    EXPORT_SYMBOL(triangulation)+0x14,%dx # triangulation[0].free_Triangles
		mov    %dx,0x6(%ecx)
		mov    %esi,%edx
		mov    %ebx,EXPORT_SYMBOL(triangulation)+0x14
		shl    $0x4,%edx
		movb   $0xff,0xe(%ecx)
		add    %edx,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x10,%ebx
		mov    EXPORT_SYMBOL(triangulation)+0x14,%dx
		movb   $0xff,0xe(%eax)
		mov    EXPORT_SYMBOL(triangulation)+0x28,%ecx # triangulation[0].count_Points
		mov    %dx,0x6(%eax)
		mov    0x18(%esp),%eax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx # triangulation[0].Points
		shl    $0x3,%eax
		sub    $0x2,%ebx
		add    %edx,%eax
		mov    %ebx,EXPORT_SYMBOL(triangulation)+0x10
		mov    EXPORT_SYMBOL(triangulation)+0x2C,%edx # triangulation[0].free_Points
		movl   $0x80000000,0x4(%eax)
		mov    %esi,EXPORT_SYMBOL(triangulation)+0x14
		mov    %edx,(%eax)
		mov    $0x1,%eax
		mov    0x18(%esp),%edx
		sub    %eax,%ecx
		mov    %edx,EXPORT_SYMBOL(triangulation)+0x2C # triangulation[0].free_Points
		mov    %ecx,EXPORT_SYMBOL(triangulation)+0x28 # triangulation[0].count_Points
	jump_81536:
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
delete_point:	/* 0x81540 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		sub    $0x5c,%esp
		mov    %eax,0x50(%esp)
		mov    %edx,0x54(%esp)
		lea    0x54(%esp),%edx
		lea    0x50(%esp),%eax
		call   func_80b24
		xor    %esi,%esi
		mov    0x50(%esp),%edi
		mov    %eax,0x58(%esp)
		mov    0x54(%esp),%eax
		mov    %edi,%edx
	jump_8156c:
		mov    %edx,%ebx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%ecx
		shl    $0x4,%ebx
		add    %ecx,%ebx
		mov    0x4(%ebx,%eax,2),%ebx
		sar    $0x10,%ebx
		cmp    $0xffffffff,%ebx
		jne    jump_81589
		mov    %ebx,%esi
		jmp    jump_815db
	jump_81589:
		mov    %ebx,%eax
		shl    $0x4,%eax
		add    %ecx,%eax
		mov    0x4(%eax),%ecx
		sar    $0x10,%ecx
		cmp    %edx,%ecx
		jne    jump_8159e
		xor    %edx,%edx
		jmp    jump_815c5
	jump_8159e:
		mov    0x6(%eax),%ecx
		sar    $0x10,%ecx
		cmp    %edx,%ecx
		jne    jump_815af
		mov    $0x1,%edx
		jmp    jump_815c5
	jump_815af:
		mov    0x8(%eax),%eax
		sar    $0x10,%eax
		cmp    %edx,%eax
		jne    jump_815c0
		mov    $0x2,%edx
		jmp    jump_815c5
	jump_815c0:
		mov    $0xffffffff,%edx
	jump_815c5:
		inc    %edx
		mov    $0x3,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		inc    %esi
		mov    %edx,%eax
		mov    %ebx,%edx
		cmp    %edi,%ebx
		jne    jump_8156c
	jump_815db:
		cmp    0x58(%esp),%esi
		je     jump_81678
		mov    0x50(%esp),%edi
		mov    0x54(%esp),%eax
		xor    %esi,%esi
		mov    %edi,%edx
	jump_815f1:
		mov    %edx,%ebx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%ecx
		shl    $0x4,%ebx
		add    %ecx,%ebx
		mov    0x4(%ebx,%eax,2),%ebx
		sar    $0x10,%ebx
		cmp    $0xffffffff,%ebx
		jne    jump_8160e
		mov    %ebx,%esi
		jmp    jump_81660
	jump_8160e:
		mov    %ebx,%eax
		shl    $0x4,%eax
		add    %ecx,%eax
		mov    0x4(%eax),%ecx
		sar    $0x10,%ecx
		cmp    %edx,%ecx
		jne    jump_81623
		xor    %edx,%edx
		jmp    jump_8164a
	jump_81623:
		mov    0x6(%eax),%ecx
		sar    $0x10,%ecx
		cmp    %edx,%ecx
		jne    jump_81634
		mov    $0x1,%edx
		jmp    jump_8164a
	jump_81634:
		mov    0x8(%eax),%eax
		sar    $0x10,%eax
		cmp    %edx,%eax
		jne    jump_81645
		mov    $0x2,%edx
		jmp    jump_8164a
	jump_81645:
		mov    $0xffffffff,%edx
	jump_8164a:
		inc    %edx
		mov    $0x3,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		inc    %esi
		mov    %edx,%eax
		mov    %ebx,%edx
		cmp    %edi,%ebx
		jne    jump_815f1
	jump_81660:
		push   %esi
		mov    0x5c(%esp),%ebx
		push   %ebx
		push   $aDelete_pointND
		lea    0xc(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0x10,%esp
	jump_81678:
		cmpl   $0x4,0x58(%esp)
		jne    jump_8168e
		mov    0x54(%esp),%edx
		mov    0x50(%esp),%eax
		call   func_80d44
		jmp    jump_8169b
	jump_8168e:
		mov    0x54(%esp),%edx
		mov    0x50(%esp),%eax
		call   func_81218
	jump_8169b:
		add    $0x5c,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
fill_concave:	/* 0x81804 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x14,%esp
		mov    %eax,0xc(%esp)
		mov    %ebx,0x8(%esp)
		shl    $0x4,%eax
		add    %edx,%edx
		mov    %eax,0x4(%esp)
		mov    %edx,(%esp)
	jump_8181f:
		mov    0x4(%esp),%edx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		mov    (%esp),%ebx
		add    %eax,%edx
		add    %ebx,%edx
		mov    0x4(%edx),%ebx
		sar    $0x10,%ebx
		cmp    $0xffffffff,%ebx
		jne    jump_81841
		xor    %eax,%eax
		jmp    jump_8195c
	jump_81841:
		mov    %ebx,%edx
		shl    $0x4,%edx
		add    %edx,%eax
		mov    0x4(%eax),%edx
		mov    0xc(%esp),%ecx
		sar    $0x10,%edx
		cmp    %ecx,%edx
		jne    jump_8185a
		xor    %eax,%eax
		jmp    jump_81881
	jump_8185a:
		mov    0x6(%eax),%edx
		sar    $0x10,%edx
		cmp    %ecx,%edx
		jne    jump_8186b
		mov    $0x1,%eax
		jmp    jump_81881
	jump_8186b:
		mov    0x8(%eax),%eax
		sar    $0x10,%eax
		cmp    %ecx,%eax
		jne    jump_8187c
		mov    $0x2,%eax
		jmp    jump_81881
	jump_8187c:
		mov    $0xffffffff,%eax
	jump_81881:
		lea    0x1(%eax),%edx
		mov    $0x3,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		xor    %ebp,%ebp
		mov    %ebp,0x10(%esp)
		mov    %edx,%ecx
	jump_81898:
		mov    %ebx,%esi
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		shl    $0x4,%esi
		lea    0x0(,%ecx,2),%edi
		add    %esi,%eax
		mov    0x4(%edi,%eax,1),%eax
		sar    $0x10,%eax
		mov    0x8(%esp),%edx
		cmp    %edx,%eax
		je     jump_81948
		mov    %ecx,%edx
		mov    %ebx,%eax
		call   ac_edge_rotateAC
		test   %eax,%eax
		je     jump_818d1
		incl   0x10(%esp)
		jmp    jump_81898
	jump_818d1:
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx
		add    %edx,%esi
		mov    0x4(%edi,%esi,1),%esi
		sar    $0x10,%esi
		cmp    $0xffffffff,%esi
		je     jump_818eb
		cmp    0xc(%esp),%esi
		jne    jump_818f5
	jump_818eb:
		xor    %eax,%eax
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_818f5:
		mov    %esi,%eax
		shl    $0x4,%eax
		add    %eax,%edx
		mov    0x4(%edx),%eax
		sar    $0x10,%eax
		cmp    %ebx,%eax
		jne    jump_8190a
		xor    %edx,%edx
		jmp    jump_81931
	jump_8190a:
		mov    0x6(%edx),%eax
		sar    $0x10,%eax
		cmp    %ebx,%eax
		jne    jump_8191b
		mov    $0x1,%edx
		jmp    jump_81931
	jump_8191b:
		mov    0x8(%edx),%eax
		sar    $0x10,%eax
		cmp    %ebx,%eax
		jne    jump_8192c
		mov    $0x2,%edx
		jmp    jump_81931
	jump_8192c:
		mov    $0xffffffff,%edx
	jump_81931:
		inc    %edx
		mov    $0x3,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		inc    %ebp
		mov    %edx,%ecx
		mov    %esi,%ebx
		jmp    jump_81898
	jump_81948:
		test   %ebp,%ebp
		je     jump_81957
		cmpl   $0x0,0x10(%esp)
		jne    jump_8181f
	jump_81957:
		mov    $0x1,%eax
	jump_8195c:
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_make_edge)	/* 0x81964 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x5c,%esp
		mov    %eax,0x30(%esp)
		mov    %edx,0x2c(%esp)
		mov    %ebx,0x44(%esp)
		mov    %ecx,0x48(%esp)
		cmp    %ebx,%eax
		jne    jump_81986
		cmp    %ecx,%edx
		je     jump_81dad
	jump_81986:
		mov    0x48(%esp),%eax
		sub    0x2c(%esp),%eax
		mov    0x30(%esp),%esi
		mov    %eax,0x3c(%esp)
		mov    0x44(%esp),%eax
		sub    %esi,%eax
		mov    %eax,0x38(%esp)
		mov    0x48(%esp),%eax
		shl    $0x8,%eax
		mov    %eax,0x28(%esp)
		mov    0x44(%esp),%eax
		shl    $0x8,%eax
		mov    %eax,0x24(%esp)
	jump_819b6:
		lea    0x8(%esp),%ecx
		lea    0x4(%esp),%ebx
		mov    0x2c(%esp),%edx
		mov    0x30(%esp),%eax
		call   ac_point_find
		test   %eax,%eax
		je     jump_81dad
		lea    0x10(%esp),%ecx
		lea    0xc(%esp),%ebx
		mov    0x48(%esp),%edx
		mov    0x44(%esp),%eax
		call   ac_point_find
		test   %eax,%eax
		je     jump_81dad
		lea    0x8(%esp),%ecx
		lea    0x4(%esp),%ebx
		mov    0x28(%esp),%edx
		mov    0x24(%esp),%eax
		call   ac_pointed_at8
		mov    0x4(%esp),%edi
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx
		mov    %eax,%ebp
		mov    %edi,%ebx
		mov    0x8(%esp),%eax
		shl    $0x4,%ebx
		mov    EXPORT_SYMBOL(MOD3)+4(,%eax,4),%eax
		add    %ebx,%edx
		mov    (%edx,%eax,2),%ax
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx # triangulation[0].Points
		shl    $0x3,%eax
		add    %edx,%eax
		mov    0x44(%esp),%ebx
		cmp    (%eax),%ebx
		jne    jump_81a4c
		mov    0x48(%esp),%ecx
		cmp    0x4(%eax),%ecx
		je     jump_81dad
	jump_81a4c:
		mov    0x4(%esp),%edx
		mov    0x8(%esp),%eax
		shl    $0x4,%edx
		mov    EXPORT_SYMBOL(MOD3)+8(,%eax,4),%ebx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %edx,%eax
		mov    (%eax,%ebx,2),%ax
		and    $0xffff,%eax
		lea    0x0(,%eax,8),%edx
		mov    EXPORT_SYMBOL(triangulation)+0x38,%eax # triangulation[0].Points
		add    %edx,%eax
		mov    0x44(%esp),%esi
		cmp    (%eax),%esi
		jne    jump_81a91
		mov    0x48(%esp),%edx
		cmp    0x4(%eax),%edx
		je     jump_81dad
	jump_81a91:
		mov    0x4(%esp),%edx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		shl    $0x4,%edx
		lea    (%eax,%edx,1),%ebx
		mov    0x8(%esp),%edx
		mov    0x4(%ebx,%edx,2),%edx
		sar    $0x10,%edx
		mov    %edx,0x40(%esp)
		shl    $0x4,%edx
		add    %edx,%eax
		mov    0x4(%eax),%edx
		mov    0x4(%esp),%ebx
		sar    $0x10,%edx
		cmp    %ebx,%edx
		jne    jump_81ac6
		xor    %eax,%eax
		jmp    jump_81aed
	jump_81ac6:
		mov    0x6(%eax),%edx
		sar    $0x10,%edx
		cmp    %ebx,%edx
		jne    jump_81ad7
		mov    $0x1,%eax
		jmp    jump_81aed
	jump_81ad7:
		mov    0x8(%eax),%eax
		sar    $0x10,%eax
		cmp    %ebx,%eax
		jne    jump_81ae8
		mov    $0x2,%eax
		jmp    jump_81aed
	jump_81ae8:
		mov    $0xffffffff,%eax
	jump_81aed:
		mov    0x40(%esp),%edx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%ebx
		shl    $0x4,%edx
		add    %ebx,%edx
		mov    %eax,0x58(%esp)
		mov    (%edx,%eax,2),%ax
		and    $0xffff,%eax
		lea    0x0(,%eax,8),%edx
		mov    EXPORT_SYMBOL(triangulation)+0x38,%eax # triangulation[0].Points
		add    %edx,%eax
		mov    0x44(%esp),%ebx
		mov    (%eax),%edx
		mov    0x4(%eax),%esi
		mov    0x48(%esp),%eax
		mov    %edx,0x34(%esp)
		mov    %esi,%edx
		mov    0x34(%esp),%ecx
		sub    %eax,%edx
		sub    %ebx,%ecx
		mov    0x3c(%esp),%ebx
		mov    0x38(%esp),%eax
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_81b52
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_81b52:
		movsbl %al,%eax
		test   %eax,%eax
		jne    jump_81b84
		mov    0x34(%esp),%ebx
		mov    0x2c(%esp),%edx
		mov    0x30(%esp),%eax
		mov    %esi,%ecx
		call   ac_make_edge
		mov    0x34(%esp),%ebx
		mov    0x48(%esp),%edx
		mov    0x44(%esp),%eax
		mov    %esi,%ecx
		call   ac_make_edge
		jmp    jump_81dad
	jump_81b84:
		mov    %edi,%edx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		shl    $0x4,%edx
		add    %eax,%edx
		mov    0x4(%edx,%ebp,2),%esi
		sar    $0x10,%esi
		mov    %esi,%edx
		shl    $0x4,%edx
		add    %edx,%eax
		mov    0x4(%eax),%edx
		sar    $0x10,%edx
		cmp    %edi,%edx
		jne    jump_81bac
		xor    %eax,%eax
		jmp    jump_81bd3
	jump_81bac:
		mov    0x6(%eax),%edx
		sar    $0x10,%edx
		cmp    %edi,%edx
		jne    jump_81bbd
		mov    $0x1,%eax
		jmp    jump_81bd3
	jump_81bbd:
		mov    0x8(%eax),%eax
		sar    $0x10,%eax
		cmp    %edi,%eax
		jne    jump_81bce
		mov    $0x2,%eax
		jmp    jump_81bd3
	jump_81bce:
		mov    $0xffffffff,%eax
	jump_81bd3:
		mov    %esi,%ebx
		shl    $0x4,%ebx
		mov    %ebx,0x50(%esp)
		mov    0x50(%esp),%ecx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%ebx
		mov    EXPORT_SYMBOL(MOD3)+8(,%eax,4),%edx
		add    %ecx,%ebx
		mov    %eax,0x14(%esp)
		mov    (%ebx,%edx,2),%dx
		and    $0xffff,%edx
		mov    EXPORT_SYMBOL(triangulation)+0x38,%ebx # triangulation[0].Points
		shl    $0x3,%edx
		add    %ebx,%edx
		mov    EXPORT_SYMBOL(MOD3)+4(,%eax,4),%ebp
		mov    (%edx),%ebx
		mov    0x48(%esp),%eax
		mov    %ebx,0x4c(%esp)
		mov    %ebx,%ecx
		mov    0x4(%edx),%edx
		mov    0x44(%esp),%ebx
		mov    %edx,0x54(%esp)
		sub    %eax,%edx
		sub    %ebx,%ecx
		mov    0x3c(%esp),%ebx
		mov    0x38(%esp),%eax
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_81c4a
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_81c4a:
		movsbl %al,%eax
		mov    %esi,%edi
		test   %eax,%eax
		jl     jump_81d8c
		mov    0x50(%esp),%edx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %eax,%edx
		mov    0x4(%edx,%ebp,2),%ebp
		sar    $0x10,%ebp
		mov    %ebp,%edx
		shl    $0x4,%edx
		add    %edx,%eax
		mov    0x4(%eax),%edx
		sar    $0x10,%edx
		cmp    %esi,%edx
		jne    jump_81c7e
		xor    %esi,%esi
		jmp    jump_81ca5
	jump_81c7e:
		mov    0x6(%eax),%edx
		sar    $0x10,%edx
		cmp    %esi,%edx
		jne    jump_81c8f
		mov    $0x1,%esi
		jmp    jump_81ca5
	jump_81c8f:
		mov    0x8(%eax),%eax
		sar    $0x10,%eax
		cmp    %esi,%eax
		jne    jump_81ca0
		mov    $0x2,%esi
		jmp    jump_81ca5
	jump_81ca0:
		mov    $0xffffffff,%esi
	jump_81ca5:
		mov    0x58(%esp),%eax
		mov    %ebp,%edx
		mov    EXPORT_SYMBOL(MOD3)+4(,%eax,4),%eax
		shl    $0x4,%edx
		mov    %eax,(%esp)
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		lea    (%eax,%edx,1),%ebx
		mov    (%ebx,%esi,2),%dx
		mov    0x40(%esp),%ebx
		shl    $0x4,%ebx
		add    %eax,%ebx
		mov    0x58(%esp),%eax
		and    $0xffff,%edx
		add    %eax,%eax
		lea    0x0(,%edx,8),%ecx
		add    %ebx,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx # triangulation[0].Points
		mov    %ebx,0x18(%esp)
		mov    (%eax),%ax
		and    $0xffff,%eax
		shl    $0x3,%eax
		add    %edx,%eax
		mov    0x4(%ecx,%edx,1),%ebx
		sub    0x4(%eax),%ebx
		mov    %ebx,0x1c(%esp)
		mov    (%ecx,%edx,1),%ebx
		mov    (%eax),%ecx
		sub    %ecx,%ebx
		mov    %ebx,0x20(%esp)
		mov    (%esp),%ebx
		mov    0x18(%esp),%ecx
		add    %ebx,%ebx
		add    %ecx,%ebx
		mov    (%ebx),%bx
		and    $0xffff,%ebx
		shl    $0x3,%ebx
		add    %edx,%ebx
		mov    0x4(%eax),%edx
		mov    0x4(%ebx),%ecx
		mov    (%eax),%eax
		sub    %ecx,%edx
		mov    0x20(%esp),%ecx
		mov    %edx,0x20(%esp)
		mov    (%ebx),%edx
		mov    0x20(%esp),%ebx
		sub    %edx,%eax
		mov    0x1c(%esp),%edx
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_81d5e
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_81d5e:
		movsbl %al,%eax
		test   %eax,%eax
		jge    jump_81d79
		mov    0x58(%esp),%edx
		mov    0x40(%esp),%eax
		mov    %ebp,%ebx
		call   fill_concave
		jmp    jump_819b6
	jump_81d79:
		mov    %ebp,0x40(%esp)
		mov    0x14(%esp),%ebp
		mov    %esi,0x58(%esp)
		mov    EXPORT_SYMBOL(MOD3)+8(,%ebp,4),%ebp
	jump_81d8c:
		mov    0x4c(%esp),%eax
		cmp    0x44(%esp),%eax
		jne    jump_81b84
		mov    0x54(%esp),%eax
		cmp    0x48(%esp),%eax
		jne    jump_81b84
		jmp    jump_819b6
	jump_81dad:
		add    $0x5c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
func_81db4:
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x10,%esp
		mov    0x24(%esp),%ebp
		mov    %eax,%edi
		mov    %edx,%esi
		mov    0x20(%esp),%eax
		sar    $0x8,%ebx
		sar    $0x8,%ecx
		mov    %ebx,(%eax)
		mov    %ecx,0x0(%ebp)
		mov    (%eax),%ebx
		mov    %edi,%eax
		call   point_quad_status
		cmp    $0xffffffff,%eax
		jne    jump_81df6
		mov    0x20(%esp),%ebx
		mov    %esi,%edx
		mov    %edi,%eax
		mov    0x0(%ebp),%ecx
		mov    (%ebx),%ebx
		call   ac_edge_split
		jmp    jump_81ea1
	jump_81df6:
		mov    0x20(%esp),%eax
		mov    (%eax),%eax
		mov    %eax,(%esp)
		mov    %edi,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x20,%ecx
		shl    $0x4,%eax
		add    %ecx,%eax
		mov    0x0(%ebp),%ebx
		mov    (%eax,%esi,2),%cx
		and    $0xffff,%ecx
		lea    0x0(,%ecx,8),%edi
		mov    EXPORT_SYMBOL(triangulation)+0x38,%ecx # triangulation[0].Points
		mov    EXPORT_SYMBOL(MOD3)+4(,%esi,4),%esi
		mov    (%ecx,%edi,1),%edx
		mov    (%eax,%esi,2),%ax
		mov    %edx,0xc(%esp)
		mov    0x4(%ecx,%edi,1),%edi
		and    $0xffff,%eax
		mov    (%esp),%edx
		mov    (%ecx,%eax,8),%esi
		mov    0x4(%ecx,%eax,8),%eax
		mov    %esi,%ecx
		sub    %edx,%ecx
		imul   %ecx,%ecx
		mov    %ecx,0x8(%esp)
		mov    %eax,%ecx
		sub    %ebx,%ecx
		imul   %ecx,%ecx
		mov    0x8(%esp),%edx
		add    %ecx,%edx
		mov    0xc(%esp),%ecx
		mov    %edx,0x4(%esp)
		sub    (%esp),%ecx
		imul   %ecx,%ecx
		mov    %edi,%edx
		sub    %ebx,%edx
		mov    %edx,%ebx
		imul   %edx,%ebx
		add    %ecx,%ebx
		cmp    0x4(%esp),%ebx
		jle    jump_81e94
		mov    0x20(%esp),%edx
		mov    %esi,(%edx)
		mov    %eax,0x0(%ebp)
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x8
	jump_81e94:
		mov    0x20(%esp),%edx
		mov    0xc(%esp),%eax
		mov    %eax,(%edx)
		mov    %edi,0x0(%ebp)
	jump_81ea1:
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x8


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_make_clip_list)	/* 0x81eac */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x50,%esp
		mov    %eax,0x24(%esp)
		mov    %edx,0x28(%esp)
		mov    %ebx,0x48(%esp)
		mov    %ecx,0x44(%esp)
		lea    0x4(%esp),%ecx
		mov    %esp,%ebx
		mov    0x44(%esp),%edi
		mov    0x48(%esp),%ebp
		mov    %eax,0x8(%esp)
		mov    %edx,0xc(%esp)
		call   ac_point_find
		mov    0x44(%esp),%eax
		mov    0x28(%esp),%edx
		shl    $0x8,%eax
		mov    0x24(%esp),%ebx
		mov    %eax,0x30(%esp)
		mov    0x48(%esp),%eax
		sub    %edx,%edi
		shl    $0x8,%eax
		sub    %ebx,%ebp
		mov    %eax,0x34(%esp)
	jump_81eff:
		mov    EXPORT_SYMBOL(ixE),%edx
		mov    0x8(%esp),%eax
		mov    0x48(%esp),%esi
		mov    %eax,EXPORT_SYMBOL(Ex)(,%edx,4)
		mov    0xc(%esp),%eax
		lea    0x1(%edx),%ecx
		mov    %eax,EXPORT_SYMBOL(Ey)(,%edx,4)
		mov    0x8(%esp),%eax
		mov    %ecx,EXPORT_SYMBOL(ixE)
		cmp    %esi,%eax
		jne    jump_81f3e
		mov    0xc(%esp),%eax
		cmp    0x44(%esp),%eax
		je     jump_82300
	jump_81f3e:
		lea    0x4(%esp),%ecx
		mov    %esp,%ebx
		mov    0x30(%esp),%edx
		mov    0x34(%esp),%eax
		call   ac_pointed_at8
		mov    (%esp),%edx
		mov    %eax,0x40(%esp)
		mov    %eax,0x4(%esp)
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		shl    $0x4,%edx
		add    %eax,%edx
		mov    0x40(%esp),%eax
		add    %eax,%eax
		add    %eax,%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%ebx # triangulation[0].Points
		mov    (%edx),%ax
		mov    (%ebx,%eax,8),%eax
		mov    0x48(%esp),%esi
		mov    %eax,0x8(%esp)
		xor    %eax,%eax
		mov    0x8(%esp),%ecx
		mov    (%edx),%ax
		sub    %esi,%ecx
		mov    0x4(%ebx,%eax,8),%eax
		mov    0x44(%esp),%ebx
		mov    %eax,0xc(%esp)
		mov    %eax,%edx
		mov    %ebp,%eax
		sub    %ebx,%edx
		mov    %edi,%ebx
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_81fbb
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_81fbb:
		movsbl %al,%eax
		test   %eax,%eax
		je     jump_81eff
		mov    0x40(%esp),%eax
		mov    (%esp),%edx
		mov    EXPORT_SYMBOL(MOD3)+4(,%eax,4),%eax
		shl    $0x4,%edx
		mov    %eax,0x4(%esp)
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %eax,%edx
		mov    0x4(%esp),%eax
		add    %eax,%eax
		add    %eax,%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%ebx # triangulation[0].Points
		mov    (%edx),%ax
		mov    (%ebx,%eax,8),%eax
		mov    %eax,0x8(%esp)
		xor    %eax,%eax
		mov    (%edx),%ax
		mov    0x8(%esp),%ecx
		mov    0x4(%ebx,%eax,8),%eax
		sub    %esi,%ecx
		mov    %eax,0xc(%esp)
		mov    %eax,%edx
		mov    0x44(%esp),%eax
		mov    %edi,%ebx
		sub    %eax,%edx
		mov    %ebp,%eax
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_82033
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_82033:
		movsbl %al,%eax
		test   %eax,%eax
		je     jump_81eff
		mov    0x40(%esp),%eax
	jump_82042:
		mov    (%esp),%esi
		mov    %eax,0x4c(%esp)
		mov    %esi,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx
		shl    $0x4,%eax
		lea    (%edx,%eax,1),%ebx
		mov    0x4c(%esp),%eax
		mov    0x4(%ebx,%eax,2),%eax
		sar    $0x10,%eax
		mov    %eax,(%esp)
		shl    $0x4,%eax
		add    %edx,%eax
		mov    0x4(%eax),%edx
		sar    $0x10,%edx
		cmp    %esi,%edx
		jne    jump_82078
		xor    %esi,%edx
		jmp    jump_8209f
	jump_82078:
		mov    0x6(%eax),%edx
		sar    $0x10,%edx
		cmp    %esi,%edx
		jne    jump_82089
		mov    $0x1,%edx
		jmp    jump_8209f
	jump_82089:
		mov    0x8(%eax),%eax
		sar    $0x10,%eax
		cmp    %esi,%eax
		jne    jump_8209a
		mov    $0x2,%edx
		jmp    jump_8209f
	jump_8209a:
		mov    $0xffffffff,%edx
	jump_8209f:
		mov    EXPORT_SYMBOL(MOD3)+8(,%edx,4),%eax
		mov    (%esp),%ebx
		mov    %eax,0x4(%esp)
		shl    $0x4,%ebx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		mov    0x4(%esp),%ecx
		add    %eax,%ebx
		mov    %eax,0x3c(%esp)
		xor    %eax,%eax
		mov    (%ebx,%ecx,2),%ax
		shl    $0x3,%eax
		mov    %eax,0x18(%esp)
		mov    EXPORT_SYMBOL(triangulation)+0x38,%eax # triangulation[0].Points
		mov    %eax,0x1c(%esp)
		add    0x18(%esp),%eax
		mov    (%eax),%eax
		mov    %eax,0x8(%esp)
		mov    %edx,0x38(%esp)
		mov    (%ebx,%ecx,2),%cx
		and    $0xffff,%ecx
		lea    0x0(,%ecx,8),%eax
		add    0x1c(%esp),%eax
		mov    0x4(%eax),%eax
		mov    %eax,0xc(%esp)
		mov    %esi,%eax
		mov    0x3c(%esp),%ecx
		shl    $0x4,%eax
		add    %ecx,%eax
		mov    0xe(%eax),%cl
		cmp    0xe(%ebx),%cl
		jne    jump_82147
		mov    0xf(%eax),%al
		and    $0xff,%eax
		mov    0x4c(%esp),%cl
		mov    %eax,0x1c(%esp)
		mov    $0x1,%eax
		shl    %cl,%eax
		mov    %eax,%ecx
		test   %ecx,0x1c(%esp)
		je     jump_82147
		mov    0xf(%ebx),%bl
		mov    $0x1,%eax
		mov    %dl,%cl
		and    $0xff,%ebx
		shl    %cl,%eax
		test   %eax,%ebx
		jne    jump_8214e
	jump_82147:
		mov    $0x1,%eax
		jmp    jump_82150
	jump_8214e:
		xor    %eax,%eax
	jump_82150:
		test   %eax,%eax
		jne    jump_821ae
		mov    0xc(%esp),%edx
		mov    0x44(%esp),%ebx
		mov    0x8(%esp),%ecx
		mov    0x48(%esp),%esi
		mov    %ebp,%eax
		sub    %ebx,%edx
		sub    %esi,%ecx
		mov    %edi,%ebx
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_82184
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_82184:
		movsbl %al,%edx
		mov    0x38(%esp),%eax
		shl    $0x2,%eax
		test   %edx,%edx
		jle    jump_8219d
		mov    EXPORT_SYMBOL(MOD3)+8(%eax),%eax
		jmp    jump_82042
	jump_8219d:
		jge    jump_81eff
		mov    EXPORT_SYMBOL(MOD3)+4(%eax),%eax
		jmp    jump_82042
	jump_821ae:
		lea    0x14(%esp),%eax
		push   %eax
		lea    0x14(%esp),%eax
		push   %eax
		mov    0x54(%esp),%eax
		mov    EXPORT_SYMBOL(MOD3)+4(,%eax,4),%edx
		mov    %esi,%eax
		shl    $0x4,%eax
		mov    %eax,0x28(%esp)
		mov    0x28(%esp),%ebx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %ebx,%eax
		mov    (%eax,%edx,2),%dx
		mov    EXPORT_SYMBOL(triangulation)+0x38,%ebx # triangulation[0].Points
		and    $0xffff,%edx
		mov    0x4(%ebx,%edx,8),%ecx
		push   %ecx
		mov    (%ebx,%edx,8),%ecx
		mov    0x58(%esp),%edx
		add    %edx,%edx
		add    %edx,%eax
		push   %ecx
		mov    %edx,0x3c(%esp)
		mov    (%eax),%ax
		and    $0xffff,%eax
		mov    0x4(%ebx,%eax,8),%ecx
		mov    (%ebx,%eax,8),%edx
		push   %ecx
		mov    0x5c(%esp),%ebx
		mov    0x38(%esp),%eax
		push   %edx
		mov    0x5c(%esp),%ecx
		mov    0x40(%esp),%edx
		call   line_intersect8
		mov    0x10(%esp),%eax
		add    $0x80,%eax
		sar    $0x8,%eax
		mov    %eax,0x8(%esp)
		mov    0x14(%esp),%eax
		add    $0x80,%eax
		sar    $0x8,%eax
		mov    0x20(%esp),%ebx
		mov    %eax,0xc(%esp)
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		mov    0x2c(%esp),%ecx
		add    %ebx,%eax
		add    %ecx,%eax
		mov    (%eax),%ax
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx # triangulation[0].Points
		shl    $0x3,%eax
		add    %eax,%edx
		mov    0x8(%esp),%eax
		cmp    (%edx),%eax
		jne    jump_82287
		mov    0xc(%esp),%eax
		cmp    0x4(%edx),%eax
		jne    jump_82287
		mov    0x4c(%esp),%eax
		mov    %esi,(%esp)
		mov    %eax,0x4(%esp)
		jmp    jump_81eff
	jump_82287:
		mov    (%esp),%eax
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx
		shl    $0x4,%eax
		add    %edx,%eax
		mov    0x38(%esp),%edx
		mov    (%eax,%edx,2),%ax
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx # triangulation[0].Points
		shl    $0x3,%eax
		add    %eax,%edx
		mov    0x8(%esp),%eax
		cmp    (%edx),%eax
		jne    jump_822cb
		mov    0xc(%esp),%eax
		cmp    0x4(%edx),%eax
		jne    jump_822cb
		mov    0x38(%esp),%eax
		mov    %eax,0x4(%esp)
		jmp    jump_81eff
	jump_822cb:
		lea    0xc(%esp),%eax
		mov    0x14(%esp),%ecx
		push   %eax
		lea    0xc(%esp),%eax
		mov    0x14(%esp),%ebx
		push   %eax
		mov    0x54(%esp),%edx
		mov    %esi,%eax
		call   func_81db4
		lea    0x4(%esp),%ecx
		mov    %esp,%ebx
		mov    0xc(%esp),%edx
		mov    0x8(%esp),%eax
		call   ac_point_find
		jmp    jump_81eff
	jump_82300:
		add    $0x50,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_make_clipped_edges)	/* 0x82308 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x10,%esp
		mov    %eax,0x8(%esp)
		mov    %edx,0xc(%esp)
		xor    %edi,%edi
		xor    %esi,%esi
		jmp    jump_82391
	jump_82321:
		mov    0x6(%eax),%ebx
		sar    $0x10,%ebx
		cmp    %ecx,%ebx
		jne    jump_82332
		mov    $0x1,%eax
		jmp    jump_82348
	jump_82332:
		mov    0x8(%eax),%eax
		sar    $0x10,%eax
		cmp    %ecx,%eax
		jne    jump_82343
		mov    $0x2,%eax
		jmp    jump_82348
	jump_82343:
		mov    $0xffffffff,%eax
	jump_82348:
		mov    (%esp),%ebx
		mov    0x4(%esp),%cl
		mov    $0x1,%ah
		mov    EXPORT_SYMBOL(triangulation)+0x20,%ebp
		shl    %cl,%ah
		shl    $0x4,%ebx
		not    %ah
		and    0xf(%ebx,%ebp,1),%ah
		mov    0x4(%esp),%cl
		mov    0x8(%esp),%ch
		shl    %cl,%ch
		or     %ch,%ah
		mov    %al,%cl
		mov    %ah,0xf(%ebx,%ebp,1)
		mov    $0x1,%ah
		shl    %cl,%ah
		shl    $0x4,%edx
		not    %ah
		and    0xf(%edx,%ebp,1),%ah
		mov    0xc(%esp),%al
		shl    %cl,%al
		add    $0x4,%esi
		or     %ah,%al
		inc    %edi
		mov    %al,0xf(%edx,%ebp,1)
	jump_82391:
		mov    EXPORT_SYMBOL(ixE),%eax
		dec    %eax
		cmp    %eax,%edi
		jge    jump_82417
		mov    EXPORT_SYMBOL(Ey)+0x04(%esi),%ecx
		mov    EXPORT_SYMBOL(Ex)+0x04(%esi),%ebx
		mov    EXPORT_SYMBOL(Ey)(%esi),%edx
		mov    EXPORT_SYMBOL(Ex)(%esi),%eax
		call   ac_make_edge
		lea    0x4(%esp),%eax
		mov    EXPORT_SYMBOL(Ey)+0x04(%esi),%ecx
		push   %eax
		lea    0x4(%esp),%eax
		mov    EXPORT_SYMBOL(Ex)+0x04(%esi),%ebx
		push   %eax
		mov    EXPORT_SYMBOL(Ey)(%esi),%edx
		mov    EXPORT_SYMBOL(Ex)(%esi),%eax
		call   ac_edge_find
		mov    (%esp),%edx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		shl    $0x4,%edx
		lea    (%eax,%edx,1),%ebx
		mov    0x4(%esp),%edx
		mov    0x4(%ebx,%edx,2),%edx
		sar    $0x10,%edx
		mov    %edx,%ebx
		shl    $0x4,%ebx
		add    %ebx,%eax
		mov    0x4(%eax),%ebx
		mov    (%esp),%ecx
		sar    $0x10,%ebx
		cmp    %ecx,%ebx
		jne    jump_82321
		xor    %eax,%eax
		jmp    jump_82348
	jump_82417:
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_thin_wall)	/* 0x82420 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		mov    %eax,%esi
		mov    %edx,%edi
		mov    %eax,EXPORT_SYMBOL(thin_wall_x1)
		mov    %edx,EXPORT_SYMBOL(thin_wall_y1)
		mov    %ebx,EXPORT_SYMBOL(thin_wall_x2)
		mov    %ecx,EXPORT_SYMBOL(thin_wall_y2)
		call   ac_insert_point
		mov    %ecx,%edx
		mov    %ebx,%eax
		call   ac_insert_point
		cmp    %ebx,%esi
		jne    jump_82453
		cmp    %ecx,%edi
		je     jump_82471
	jump_82453:
		xor    %edx,%edx
		mov    %esi,%eax
		mov    %edx,EXPORT_SYMBOL(ixE)
		mov    %edi,%edx
		call   ac_make_clip_list
		mov    0x10(%esp),%edx
		mov    0xc(%esp),%eax
		call   ac_make_clipped_edges
	jump_82471:
		pop    %edi
		pop    %esi
		ret    $0x8


/*----------------------------------------------------------------*/
func_82478:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    EXPORT_SYMBOL(triangulation)+0x20,%ebx
		shl    $0x4,%eax
		add    %eax,%ebx
		xor    %eax,%eax
		mov    (%ebx),%ax
		xor    %ecx,%ecx
		lea    0x0(,%eax,8),%edi
		mov    0x2(%ebx),%cx
		mov    EXPORT_SYMBOL(triangulation)+0x38,%eax # triangulation[0].Points
		shl    $0x3,%ecx
		add    %eax,%edi
		add    %eax,%ecx
		mov    0x4(%ebx),%bx
		mov    (%edi),%esi
		mov    (%ecx),%edx
		and    $0xffff,%ebx
		shl    $0x3,%ebx
		add    %ebx,%eax
		mov    0x4(%edi),%edi
		mov    (%eax),%ebx
		mov    0x4(%eax),%eax
		sub    %esi,%edx
		sub    %edi,%eax
		imul   %eax,%edx
		mov    0x4(%ecx),%ecx
		sub    %edi,%ecx
		sub    %esi,%ebx
		mov    %ecx,%eax
		imul   %ebx,%eax
		sub    %eax,%edx
		mov    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_brute_fill_rectangle)	/* 0x82528 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		mov    %eax,(%esp)
		mov    %edx,%esi
		mov    %ebx,%edi
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(triangulation)+0x0C,%ebx # triangulation[0].ix_Triangles
		mov    %edx,0x8(%esp)
		test   %ebx,%ebx
		jle    jump_82602
		mov    %edx,0x4(%esp)
	jump_8254d:
		mov    0x4(%esp),%ebp
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %ebp,%eax
		mov    0xb(%eax),%edx
		sar    $0x18,%edx
		cmp    $0xffffffff,%edx
		je     jump_825e0
		xor    %edx,%edx
		mov    (%eax),%dx
		mov    EXPORT_SYMBOL(triangulation)+0x38,%ebx # triangulation[0].Points
		shl    $0x3,%edx
		add    %ebx,%edx
		mov    (%esp),%ebp
		cmp    (%edx),%ebp
		jg     jump_825e0
		cmp    (%edx),%edi
		jl     jump_825e0
		mov    0x4(%edx),%ebp
		cmp    %ebp,%esi
		jg     jump_825e0
		cmp    %ebp,%ecx
		jl     jump_825e0
		xor    %edx,%edx
		mov    0x2(%eax),%dx
		shl    $0x3,%edx
		add    %ebx,%edx
		mov    (%esp),%ebp
		cmp    (%edx),%ebp
		jg     jump_825e0
		cmp    (%edx),%edi
		jl     jump_825e0
		mov    0x4(%edx),%ebp
		cmp    %ebp,%esi
		jg     jump_825e0
		cmp    %ebp,%ecx
		jl     jump_825e0
		xor    %edx,%edx
		mov    0x4(%eax),%dx
		shl    $0x3,%edx
		add    %ebx,%edx
		mov    (%esp),%ebx
		mov    (%edx),%ebp
		cmp    %ebp,%ebx
		jg     jump_825e0
		cmp    %ebp,%edi
		jl     jump_825e0
		mov    0x4(%edx),%ebp
		cmp    %ebp,%esi
		jg     jump_825e0
		cmp    %ebp,%ecx
		jl     jump_825e0
		mov    0x1c(%esp),%dl
		mov    %dl,0xe(%eax)
	jump_825e0:
		mov    0x4(%esp),%ebp
		mov    0x8(%esp),%eax
		mov    EXPORT_SYMBOL(triangulation)+0x0C,%edx
		add    $0x10,%ebp
		inc    %eax
		mov    %ebp,0x4(%esp)
		mov    %eax,0x8(%esp)
		cmp    %edx,%eax
		jl     jump_8254d
	jump_82602:
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_fill_rectangle)	/* 0x8260C */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x2c,%esp
		mov    %eax,%edi
		mov    %edx,%ebp
		mov    %ebx,%esi
		mov    %ecx,0x24(%esp)
		mov    %ebx,%eax
		sub    %edi,%eax
		lea    0x0(,%eax,2),%edx
		mov    %ecx,%eax
		sub    %ebp,%eax
		imul   %eax,%edx
		lea    0x4(%esp),%eax
		mov    %edi,%ebx
		push   %eax
		lea    0x4(%esp),%eax
		mov    %edx,0x24(%esp)
		push   %eax
		mov    %ebp,%edx
		mov    %edi,%eax
		call   ac_edge_find
		mov    (%esp),%edx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		shl    $0x4,%edx
		add    %edx,%eax
		mov    0x3c(%esp),%dl
		mov    %dl,0xe(%eax)
		mov    (%esp),%eax
		mov    0x20(%esp),%edx
		call   func_82478
		mov    %eax,0x28(%esp)
		cmp    %edx,%eax
		je     jump_82795
		lea    0x14(%esp),%eax
		mov    0x24(%esp),%edx
		push   %eax
		lea    0x14(%esp),%eax
		mov    %ebp,%ecx
		push   %eax
		mov    %esi,%ebx
		mov    %esi,%eax
		call   ac_edge_find
		mov    0x10(%esp),%eax
		cmp    (%esp),%eax
		je     jump_826ba
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx
		shl    $0x4,%eax
		add    %edx,%eax
		mov    0x3c(%esp),%dl
		mov    %dl,0xe(%eax)
		mov    0x10(%esp),%eax
		mov    0x28(%esp),%ecx
		call   func_82478
		add    %eax,%ecx
		mov    %ecx,0x28(%esp)
	jump_826ba:
		mov    0x28(%esp),%eax
		cmp    0x20(%esp),%eax
		je     jump_82795
		lea    0x1c(%esp),%eax
		mov    %ebp,%ecx
		push   %eax
		lea    0x1c(%esp),%eax
		mov    %edi,%ebx
		push   %eax
		mov    %ebp,%edx
		mov    %esi,%eax
		call   ac_edge_find
		mov    0x18(%esp),%eax
		cmp    (%esp),%eax
		je     jump_82714
		cmp    0x10(%esp),%eax
		je     jump_82714
		mov    %eax,%edx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		shl    $0x4,%edx
		add    %edx,%eax
		mov    0x3c(%esp),%dl
		mov    %dl,0xe(%eax)
		mov    0x18(%esp),%eax
		mov    0x28(%esp),%edx
		call   func_82478
		add    %eax,%edx
		mov    %edx,0x28(%esp)
	jump_82714:
		mov    0x28(%esp),%eax
		cmp    0x20(%esp),%eax
		je     jump_82795
		lea    0xc(%esp),%eax
		mov    0x24(%esp),%ecx
		push   %eax
		lea    0xc(%esp),%eax
		mov    %esi,%ebx
		push   %eax
		mov    %ecx,%edx
		mov    %edi,%eax
		call   ac_edge_find
		mov    0x8(%esp),%eax
		cmp    (%esp),%eax
		je     jump_82775
		cmp    0x10(%esp),%eax
		je     jump_82775
		cmp    0x18(%esp),%eax
		je     jump_82775
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx
		shl    $0x4,%eax
		add    %edx,%eax
		mov    0x3c(%esp),%dl
		mov    %dl,0xe(%eax)
		mov    0x8(%esp),%eax
		mov    0x28(%esp),%ecx
		call   func_82478
		add    %eax,%ecx
		mov    %ecx,0x28(%esp)
	jump_82775:
		mov    0x28(%esp),%eax
		cmp    0x20(%esp),%eax
		je     jump_82795
		xor    %eax,%eax
		mov    0x24(%esp),%ecx
		mov    0x3c(%esp),%al
		mov    %esi,%ebx
		push   %eax
		mov    %ebp,%edx
		mov    %edi,%eax
		call   ac_brute_fill_rectangle
	jump_82795:
		add    $0x2c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_tri_set_rectangle)	/* 0x827a0 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    %eax,%esi
		mov    %edx,%edi
		mov    %ebx,%ebp
		mov    %ecx,(%esp)
		cmp    %ebx,%eax
		jle    jump_827b7
		mov    %ebx,%esi
		mov    %eax,%ebp
	jump_827b7:
		mov    (%esp),%edx
		cmp    %edx,%edi
		jle    jump_827c5
		mov    %edi,%eax
		mov    %edx,%edi
		mov    %eax,(%esp)
	jump_827c5:
		mov    %edi,%edx
		mov    %esi,%eax
		call   ac_insert_point
		mov    %edi,%ecx
		mov    %edi,%edx
		mov    %ebp,%eax
		mov    %ebp,%ebx
		call   ac_insert_point
		mov    %edi,%edx
		mov    %esi,%eax
		call   ac_make_edge
		mov    (%esp),%edx
		mov    %ebp,%eax
		mov    (%esp),%ecx
		call   ac_insert_point
		mov    %ebp,%ebx
		mov    %edi,%edx
		mov    %ebp,%eax
		call   ac_make_edge
		mov    (%esp),%edx
		mov    %esi,%eax
		mov    (%esp),%ecx
		call   ac_insert_point
		mov    %esi,%ebx
		mov    %ecx,%edx
		mov    %ebp,%eax
		call   ac_make_edge
		mov    (%esp),%edx
		mov    %edi,%ecx
		mov    %esi,%ebx
		mov    %esi,%eax
		call   ac_make_edge
		xor    %eax,%eax
		mov    (%esp),%ecx
		mov    0x14(%esp),%al
		mov    %ebp,%ebx
		push   %eax
		mov    %edi,%edx
		mov    %esi,%eax
		call   ac_fill_rectangle
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
edge_points8:	/* 0x8297C */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		mov    0x10(%esp),%ebp
		mov    %eax,%edi
		mov    EXPORT_SYMBOL(triangulation)+0x20,%esi
		shl    $0x4,%edi
		add    %edi,%esi
		mov    0x4(%esi),%edi
		sar    $0x10,%edi
		cmp    %edx,%edi
		je     jump_829aa
		mov    0xa(%esi),%edi
		sar    $0x10,%edi
		cmp    %edx,%edi
		jne    jump_82a00
		testb  $0x10,0xf(%esi)
		je     jump_82a00
	jump_829aa:
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx
		shl    $0x4,%eax
		add    %eax,%edx
		xor    %esi,%esi
		mov    EXPORT_SYMBOL(triangulation)+0x38,%eax
		mov    0x2(%edx),%si
		mov    (%eax,%esi,8),%esi
		shl    $0x8,%esi
		mov    %esi,(%ebx)
		xor    %ebx,%ebx
		mov    0x2(%edx),%bx
		mov    0x4(%eax,%ebx,8),%ebx
		shl    $0x8,%ebx
		mov    %ebx,(%ecx)
		xor    %ebx,%ebx
		mov    (%edx),%bx
		mov    (%eax,%ebx,8),%ebx
		shl    $0x8,%ebx
		mov    %ebx,0x0(%ebp)
		mov    (%edx),%dx
		and    $0xffff,%edx
		mov    0x4(%eax,%edx,8),%eax
		mov    0x14(%esp),%edx
		shl    $0x8,%eax
		mov    %eax,(%edx)
		jmp    jump_82b21
	jump_82a00:
		mov    %eax,%esi
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edi
		shl    $0x4,%esi
		add    %edi,%esi
		mov    0x6(%esi),%edi
		sar    $0x10,%edi
		cmp    %edx,%edi
		je     jump_82a27
		mov    0xa(%esi),%edi
		sar    $0x10,%edi
		cmp    %edx,%edi
		jne    jump_82a8b
		testb  $0x20,0xf(%esi)
		je     jump_82a8b
	jump_82a27:
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx
		shl    $0x4,%eax
		add    %eax,%edx
		xor    %eax,%eax
		mov    0x4(%edx),%ax
		lea    0x0(,%eax,8),%esi
		mov    EXPORT_SYMBOL(triangulation)+0x38,%eax
		mov    (%esi,%eax,1),%esi
		shl    $0x8,%esi
		mov    %esi,(%ebx)
		xor    %ebx,%ebx
		mov    0x4(%edx),%bx
		mov    0x4(%eax,%ebx,8),%ebx
		shl    $0x8,%ebx
		mov    %ebx,(%ecx)
		xor    %ebx,%ebx
		mov    0x2(%edx),%bx
		mov    (%eax,%ebx,8),%ebx
		shl    $0x8,%ebx
		mov    %ebx,0x0(%ebp)
		mov    0x2(%edx),%dx
		and    $0xffff,%edx
		mov    0x4(%eax,%edx,8),%eax
		mov    0x14(%esp),%edx
		shl    $0x8,%eax
		mov    %eax,(%edx)
		xor    %ebx,%ebx
		mov    %ebx,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x8
	jump_82a8b:
		mov    %eax,%edi
		mov    EXPORT_SYMBOL(triangulation)+0x20,%esi
		shl    $0x4,%edi
		add    %edi,%esi
		mov    0x8(%esi),%edi
		sar    $0x10,%edi
		cmp    %edx,%edi
		je     jump_82ab2
		mov    0xa(%esi),%edi
		sar    $0x10,%edi
		cmp    %edx,%edi
		jne    jump_82b14
		testb  $0x40,0xf(%esi)
		je     jump_82b14
	jump_82ab2:
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx
		shl    $0x4,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    (%eax),%dx
		lea    0x0(,%edx,8),%esi
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx
		mov    (%edx,%esi,1),%esi
		shl    $0x8,%esi
		mov    %esi,(%ebx)
		xor    %ebx,%ebx
		mov    (%eax),%bx
		mov    0x4(%edx,%ebx,8),%ebx
		shl    $0x8,%ebx
		mov    %ebx,(%ecx)
		xor    %ebx,%ebx
		mov    0x4(%eax),%bx
		mov    (%edx,%ebx,8),%ebx
		shl    $0x8,%ebx
		mov    %ebx,0x0(%ebp)
		mov    0x4(%eax),%ax
		and    $0xffff,%eax
		mov    0x4(%edx,%eax,8),%eax
		mov    0x14(%esp),%edx
		shl    $0x8,%eax
		mov    %eax,(%edx)
		xor    %ebx,%ebx
		mov    %ebx,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x8
	jump_82b14:
		mov    $0xffffffd6,%ebx
		mov    %ebx,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x8
	jump_82b21:
		xor    %ebx,%ebx
		mov    %ebx,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x8


/*----------------------------------------------------------------*/
/* long triangle_route_do_given(long, long, long *, long *)
 */
triangle_route_do_given:	/* 0x082B5C */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x28,%esp
		mov    %eax,0x10(%esp)
		mov    %edx,0x14(%esp)
		mov    %ebx,0xc(%esp)
		mov    tag_current,%ah
		mov    $0xffffffff,%edx
		inc    %ah
		xor    %ebx,%ebx
		mov    %ah,tag_current
		xor    %eax,%eax
		mov    %edx,data_1c30c0
		mov    tag_current,%al
		mov    %ebx,heap_end
		test   %eax,%eax
		jne    jump_82bb2
		mov    $0x1f40,%ebx
		mov    $routeTags,%eax
		xor    %edx,%edx
		call   ac_memset
		movb   $0x1,tag_current
	jump_82bb2:
		mov    0x14(%esp),%eax
		mov    $0x1,%ecx
		mov    %eax,%edx
		mov    %ecx,tree_val(,%eax,4)
		mov    %eax,tree_dad(,%eax,4)
		mov    tag_current,%al
		mov    heap_end,%esi
		mov    %al,routeTags(%edx)
		cmp    $0x100,%esi
		jge    jump_82bed
		lea    (%esi,%ecx,1),%edi
		mov    %edi,heap_end
	jump_82bed:
		mov    heap_end,%eax
		mov    %edx,heap(,%eax,4)
		cmp    $0x1,%eax
		je     jump_82ce5
		test   $0x1,%al
		jne    jump_82c48
		mov    %eax,%ebx
		sar    %ebx
		shl    $0x2,%eax
		lea    0x0(,%ebx,4),%edx
		mov    heap(%eax),%esi
		mov    heap(%edx),%ecx
		mov    tree_val(,%esi,4),%ebp
		cmp    tree_val(,%ecx,4),%ebp
		jg     jump_82ce5
		mov    heap(%edx),%ecx
		mov    %esi,heap(%edx)
		mov    %ecx,heap(%eax)
		mov    %ebx,%eax
	jump_82c48:
		mov    $0x1,%ebp
	jump_82c4d:
		cmp    $0x1,%eax
		je     jump_82ce5
		mov    %eax,%edx
		mov    %eax,%ebx
		sar    %edx
		xor    %ebp,%ebx
		mov    %edx,(%esp)
		mov    heap(,%ebx,4),%ecx
		mov    heap(,%eax,4),%edx
		mov    (%esp),%esi
		shl    $0x2,%edx
		shl    $0x2,%ecx
		mov    tree_val(%edx),%edi
		shl    $0x2,%esi
		cmp    tree_val(%ecx),%edi
		jge    jump_82c9f
		mov    heap(%esi),%ebx
		cmp    tree_val(,%ebx,4),%edi
		jl     jump_82c9b
		mov    (%esp),%eax
	jump_82c9b:
		mov    %eax,%edx
		jmp    jump_82cbb
	jump_82c9f:
		mov    heap(%esi),%edx
		mov    tree_val(%ecx),%eax
		cmp    tree_val(,%edx,4),%eax
		jge    jump_82cb8
		mov    %ebx,%edx
		jmp    jump_82cbb
	jump_82cb8:
		mov    (%esp),%edx
	jump_82cbb:
		mov    (%esp),%edi
		cmp    %edi,%edx
		je     jump_82ce5
		mov    heap(,%edx,4),%ecx
		mov    heap(,%edi,4),%esi
		mov    %ecx,heap(,%edi,4)
		mov    %edi,%eax
		mov    %esi,heap(,%edx,4)
		jmp    jump_82c4d
	jump_82ce5:
		mov    0x10(%esp),%ebp
		mov    data_1c30c0,%eax
		cmp    %ebp,%eax
		je     jump_830ec
		cmp    $0xffffffff,%eax
		je     jump_830ec
		mov    heap_end,%edx
		mov    %eax,0x1c(%esp)
		mov    $0x1,%eax
		mov    heap(,%edx,4),%ebx
		mov    %edx,%ecx
		mov    %ebx,data_1c30c0
		mov    $0xffffffff,%ebx
		sub    %eax,%ecx
		mov    %ecx,heap_end
		mov    %ebx,heap(,%edx,4)
		je     jump_82e10
	jump_82d37:
		lea    0x0(,%eax,2),%ecx
		mov    %ecx,%edx
		mov    heap_end,%ebp
		xor    $0x1,%dl
		lea    0x0(,%eax,4),%ebx
		cmp    %ebp,%edx
		jg     jump_82dd1
		mov    heap(%ebx),%ebx
		lea    0x0(,%edx,4),%edi
		shl    $0x2,%ebx
		mov    heap(,%eax,8),%esi
		mov    tree_val(%ebx),%ebp
		shl    $0x2,%esi
		cmp    tree_val(%esi),%ebp
		jge    jump_82d93
		mov    heap(%edi),%ecx
		cmp    tree_val(,%ecx,4),%ebp
		jge    jump_82daa
		mov    %eax,%edx
		jmp    jump_82daa
	jump_82d93:
		mov    heap(%edi),%edi
		mov    tree_val(%esi),%ebx
		cmp    tree_val(,%edi,4),%ebx
		jge    jump_82daa
		mov    %ecx,%edx
	jump_82daa:
		cmp    %eax,%edx
		je     jump_82e10
		mov    heap(,%edx,4),%ecx
		mov    heap(,%eax,4),%esi
		mov    %ecx,heap(,%eax,4)
		mov    %edx,%eax
		mov    %esi,heap(,%edx,4)
		jmp    jump_82d37
	jump_82dd1:
		cmp    %ebp,%eax
		je     jump_82e10
		lea    0x0(,%ebp,4),%eax
		mov    heap(%ebx),%edx
		mov    heap(%eax),%ecx
		mov    tree_val(,%edx,4),%edx
		cmp    tree_val(,%ecx,4),%edx
		jl     jump_82e10
		mov    heap(%eax),%edx
		mov    heap(%ebx),%ecx
		mov    %edx,heap(%ebx)
		mov    %ecx,heap(%eax)
	jump_82e10:
		mov    0x1c(%esp),%eax
		shl    $0x4,%eax
		xor    %ebp,%ebp
		mov    %eax,0x18(%esp)
		jmp    jump_82e2b
	jump_82e1f:
		add    $0x2,%ebp
		cmp    $0x6,%ebp
		jge    jump_82ce5
	jump_82e2b:
		mov    0x18(%esp),%eax
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx
		add    %edx,%eax
		mov    0x4(%eax,%ebp,1),%ebx
		sar    $0x10,%ebx
		cmp    $0xffffffff,%ebx
		je     jump_82e1f
		mov    routeTags(%ebx),%cl
		cmp    tag_current,%cl
		je     jump_82e1f
		testb  $0x8,0xe(%eax)
		jne    jump_82e1f
		mov    tree_Ax8,%edi
		mov    tree_Ay8,%eax
		mov    %ebx,0x20(%esp)
		mov    %ebx,%esi
		sar    $0x8,%edi
		sar    $0x8,%eax
		shl    $0x4,%esi
		mov    %eax,0x24(%esp)
		mov    (%edx,%esi,1),%ax
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		mov    (%eax),%ecx
		mov    %edi,%eax
		sub    %ecx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ecx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		mov    (%esi,%eax,1),%ax
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		mov    0x24(%esp),%edx
		mov    0x4(%eax),%esi
		mov    %edx,%eax
		sub    %esi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%ecx
		jle    jump_82ec7
		sar    %eax
		jmp    jump_82ec9
	jump_82ec7:
		sar    %ecx
	jump_82ec9:
		add    %eax,%ecx
		mov    0x20(%esp),%eax
		shl    $0x4,%eax
		mov    %eax,0x4(%esp)
		mov    0x4(%esp),%edx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %edx,%eax
		mov    0x2(%eax),%ax
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		mov    (%eax),%esi
		mov    %edi,%eax
		sub    %esi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    0x4(%esp),%edx
		mov    %eax,%esi
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %edx,%eax
		mov    0x2(%eax),%ax
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		mov    0x24(%esp),%edx
		sub    0x4(%eax),%edx
		mov    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%esi
		jle    jump_82f37
		sar    %eax
		jmp    jump_82f39
	jump_82f37:
		sar    %esi
	jump_82f39:
		add    %esi,%eax
		cmp    %ecx,%eax
		jge    jump_82f41
		mov    %eax,%ecx
	jump_82f41:
		mov    0x20(%esp),%eax
		shl    $0x4,%eax
		mov    %eax,0x4(%esp)
		mov    0x4(%esp),%esi
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %esi,%eax
		mov    0x4(%eax),%ax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx
		and    $0xffff,%eax
		mov    (%edx,%eax,8),%esi
		mov    %edi,%eax
		sub    %esi,%eax
		mov    0x4(%esp),%edi
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%esi
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %edi,%eax
		mov    0x4(%eax),%ax
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		mov    0x24(%esp),%edx
		mov    0x4(%eax),%edi
		mov    %edx,%eax
		sub    %edi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%esi
		jle    jump_82fab
		sar    %eax
		jmp    jump_82fad
	jump_82fab:
		sar    %esi
	jump_82fad:
		add    %esi,%eax
		cmp    %ecx,%eax
		jge    jump_82fb5
		mov    %eax,%ecx
	jump_82fb5:
		mov    tag_current,%dl
		mov    heap_end,%eax
		mov    %dl,routeTags(%ebx)
		mov    0x1c(%esp),%edx
		mov    %ecx,tree_val(,%ebx,4)
		mov    %edx,tree_dad(,%ebx,4)
		cmp    $0x100,%eax
		jge    jump_82fe8
		lea    0x1(%eax),%edx
		mov    %edx,heap_end
	jump_82fe8:
		mov    heap_end,%eax
		mov    %ebx,heap(,%eax,4)
		cmp    $0x1,%eax
		je     jump_82e1f
		test   $0x1,%al
		jne    jump_83049
		mov    %eax,%ebx
		sar    %ebx
		shl    $0x2,%eax
		lea    0x0(,%ebx,4),%edx
		mov    heap(%eax),%esi
		mov    heap(%edx),%ecx
		mov    tree_val(,%esi,4),%edi
		cmp    tree_val(,%ecx,4),%edi
		jg     jump_82e1f
		mov    heap(%eax),%ecx
		mov    heap(%edx),%esi
		mov    %ecx,heap(%edx)
		mov    %esi,heap(%eax)
		mov    %ebx,%eax
	jump_83049:
		cmp    $0x1,%eax
		je     jump_82e1f
		mov    %eax,%edx
		mov    %eax,%esi
		mov    heap(,%eax,4),%ebx
		sar    %edx
		xor    $0x1,%si
		shl    $0x2,%ebx
		mov    %edx,0x8(%esp)
		mov    tree_val(%ebx),%edi
		mov    heap(,%esi,4),%edx
		mov    0x8(%esp),%ecx
		shl    $0x2,%edx
		shl    $0x2,%ecx
		cmp    tree_val(%edx),%edi
		jge    jump_830a0
		mov    heap(%ecx),%ecx
		cmp    tree_val(,%ecx,4),%edi
		jl     jump_8309c
		mov    0x8(%esp),%eax
	jump_8309c:
		mov    %eax,%edx
		jmp    jump_830bd
	jump_830a0:
		mov    heap(%ecx),%eax
		mov    tree_val(%edx),%edx
		cmp    tree_val(,%eax,4),%edx
		jge    jump_830b9
		mov    %esi,%edx
		jmp    jump_830bd
	jump_830b9:
		mov    0x8(%esp),%edx
	jump_830bd:
		mov    0x8(%esp),%edi
		cmp    %edi,%edx
		je     jump_82e1f
		mov    heap(,%edx,4),%esi
		mov    heap(,%edi,4),%ecx
		mov    %esi,heap(,%edi,4)
		mov    %edi,%eax
		mov    %ecx,heap(,%edx,4)
		jmp    jump_83049
	jump_830ec:
		mov    data_1c30c0,%edx
		cmp    $0xffffffff,%edx
		jne    jump_830fb
		mov    %edx,%eax
		jmp    jump_8311e
	jump_830fb:
		mov    0x10(%esp),%edx
		mov    0xc(%esp),%eax
		mov    0x14(%esp),%edi
		xor    %ebx,%ebx
		jmp    jump_83116
	jump_8310b:
		add    $0x4,%eax
		inc    %ebx
		mov    tree_dad(,%edx,4),%edx
	jump_83116:
		mov    %edx,(%eax)
		cmp    %edi,%edx
		jne    jump_8310b
		mov    %ebx,%eax
	jump_8311e:
		add    $0x28,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
triangle_route_do_bak:
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x28,%esp
		mov    %eax,0x10(%esp)
		mov    %edx,0x14(%esp)
		mov    %ebx,0xc(%esp)
		mov    tag_current,%ah
		mov    $0xffffffff,%edx
		inc    %ah
		xor    %ebx,%ebx
		mov    %ah,tag_current
		xor    %eax,%eax
		mov    %edx,data_1c30c0
		mov    tag_current,%al
		mov    %ebx,heap_end
		test   %eax,%eax
		jne    jump_8317e
		mov    $0x1f40,%ebx
		mov    $routeTags,%eax
		xor    %edx,%edx
		call   ac_memset
		movb   $0x1,tag_current
	jump_8317e:
		mov    0x14(%esp),%eax
		mov    $0x1,%ecx
		mov    %eax,%edx
		mov    %ecx,tree_val(,%eax,4)
		mov    %eax,tree_dad(,%eax,4)
		mov    tag_current,%al
		mov    heap_end,%esi
		mov    %al,routeTags(%edx)
		mov    %edx,%eax
		cmp    $0x100,%esi
		jge    jump_831bb
		lea    (%esi,%ecx,1),%edi
		mov    %edi,heap_end
	jump_831bb:
		mov    heap_end,%edx
		mov    %eax,heap(,%edx,4)
		mov    %edx,%eax
		cmp    $0x1,%edx
		je     jump_832b9
		test   $0x1,%dl
		jne    jump_83220
		mov    %edx,%ebx
		sar    %ebx
		shl    $0x2,%eax
		lea    0x0(,%ebx,4),%edx
		mov    heap(%eax),%ecx
		mov    heap(%edx),%esi
		mov    tree_val(,%ecx,4),%ebp
		cmp    tree_val(,%esi,4),%ebp
		jg     jump_832b9
		mov    heap(%eax),%esi
		mov    heap(%edx),%ecx
		mov    %esi,heap(%edx)
		mov    %ecx,heap(%eax)
		mov    %ebx,%eax
	jump_83220:
		mov    $0x1,%ebp
	jump_83225:
		cmp    $0x1,%eax
		je     jump_832b9
		mov    %eax,%edx
		sar    %edx
		mov    heap(,%eax,4),%ecx
		mov    %edx,(%esp)
		mov    %eax,%edx
		shl    $0x2,%ecx
		xor    %ebp,%edx
		mov    tree_val(%ecx),%edi
		mov    heap(,%edx,4),%esi
		mov    (%esp),%ebx
		shl    $0x2,%esi
		shl    $0x2,%ebx
		cmp    tree_val(%esi),%edi
		jge    jump_83277
		mov    heap(%ebx),%ebx
		cmp    tree_val(,%ebx,4),%edi
		jl     jump_83273
		mov    (%esp),%eax
	jump_83273:
		mov    %eax,%edx
		jmp    jump_8328f
	jump_83277:
		mov    heap(%ebx),%ebx
		mov    tree_val(%esi),%eax
		cmp    tree_val(,%ebx,4),%eax
		jl     jump_8328f
		mov    (%esp),%edx
	jump_8328f:
		mov    (%esp),%edi
		cmp    %edi,%edx
		je     jump_832b9
		mov    heap(,%edx,4),%esi
		mov    heap(,%edi,4),%ecx
		mov    %esi,heap(,%edi,4)
		mov    %edi,%eax
		mov    %ecx,heap(,%edx,4)
		jmp    jump_83225
	jump_832b9:
		mov    0x10(%esp),%ebp
		mov    data_1c30c0,%eax
		cmp    %ebp,%eax
		je     jump_836bf
		cmp    $0xffffffff,%eax
		je     jump_836bf
		mov    heap_end,%edx
		mov    %eax,0x1c(%esp)
		mov    $0x1,%eax
		mov    heap(,%edx,4),%ebx
		mov    %edx,%ecx
		mov    %ebx,data_1c30c0
		mov    $0xffffffff,%ebx
		sub    %eax,%ecx
		mov    %ecx,heap_end
		mov    %ebx,heap(,%edx,4)
		je     jump_833e4
	jump_8330b:
		lea    0x0(,%eax,2),%edi
		mov    %edi,%edx
		mov    heap_end,%ebp
		xor    $0x1,%dl
		lea    0x0(,%eax,4),%ebx
		cmp    %ebp,%edx
		jg     jump_833a5
		mov    heap(%ebx),%ebx
		lea    0x0(,%edx,4),%esi
		shl    $0x2,%ebx
		mov    heap(,%eax,8),%ecx
		mov    tree_val(%ebx),%ebp
		shl    $0x2,%ecx
		cmp    tree_val(%ecx),%ebp
		jge    jump_83367
		mov    heap(%esi),%ecx
		cmp    tree_val(,%ecx,4),%ebp
		jge    jump_8337e
		mov    %eax,%edx
		jmp    jump_8337e
	jump_83367:
		mov    heap(%esi),%esi
		mov    tree_val(%ecx),%ebx
		cmp    tree_val(,%esi,4),%ebx
		jge    jump_8337e
		mov    %edi,%edx
	jump_8337e:
		cmp    %eax,%edx
		je     jump_833e4
		mov    heap(,%edx,4),%ecx
		mov    heap(,%eax,4),%esi
		mov    %ecx,heap(,%eax,4)
		mov    %edx,%eax
		mov    %esi,heap(,%edx,4)
		jmp    jump_8330b
	jump_833a5:
		cmp    %ebp,%eax
		je     jump_833e4
		lea    0x0(,%ebp,4),%eax
		mov    heap(%ebx),%edx
		mov    heap(%eax),%ecx
		mov    tree_val(,%edx,4),%edx
		cmp    tree_val(,%ecx,4),%edx
		jl     jump_833e4
		mov    heap(%eax),%edx
		mov    heap(%ebx),%ecx
		mov    %edx,heap(%ebx)
		mov    %ecx,heap(%eax)
	jump_833e4:
		mov    0x1c(%esp),%eax
		shl    $0x4,%eax
		xor    %ebp,%ebp
		mov    %eax,0x18(%esp)
		jmp    jump_833ff
	jump_833f3:
		add    $0x2,%ebp
		cmp    $0x6,%ebp
		jge    jump_832b9
	jump_833ff:
		mov    0x18(%esp),%edx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %eax,%edx
		mov    0x4(%edx,%ebp,1),%ebx
		sar    $0x10,%ebx
		cmp    $0xffffffff,%ebx
		je     jump_833f3
		mov    routeTags(%ebx),%dl
		cmp    tag_current,%dl
		je     jump_833f3
		mov    %ebx,%esi
		shl    $0x4,%esi
		add    %esi,%eax
		testb  $0x8,0xe(%eax)
		jne    jump_833f3
		mov    tree_Ax8,%edi
		mov    tree_Ay8,%edx
		mov    %ebx,0x20(%esp)
		mov    (%eax),%ax
		sar    $0x8,%edx
		sar    $0x8,%edi
		mov    %edx,0x24(%esp)
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		mov    (%eax),%ecx
		mov    %edi,%eax
		sub    %ecx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ecx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		mov    (%esi,%eax,1),%ax
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		mov    0x24(%esp),%edx
		mov    0x4(%eax),%esi
		mov    %edx,%eax
		sub    %esi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%ecx
		jle    jump_8349c
		sar    %eax
		jmp    jump_8349e
	jump_8349c:
		sar    %ecx
	jump_8349e:
		add    %eax,%ecx
		mov    0x20(%esp),%eax
		shl    $0x4,%eax
		mov    %eax,0x4(%esp)
		mov    0x4(%esp),%edx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %edx,%eax
		mov    0x2(%eax),%ax
		and    $0xffff,%eax
		lea    0x0(,%eax,8),%edx
		mov    EXPORT_SYMBOL(triangulation)+0x38,%eax
		add    %edx,%eax
		mov    (%eax),%esi
		mov    %edi,%eax
		sub    %esi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    0x4(%esp),%edx
		mov    %eax,%esi
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %edx,%eax
		mov    0x2(%eax),%ax
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		mov    0x24(%esp),%edx
		sub    0x4(%eax),%edx
		mov    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%esi
		jle    jump_8350f
		sar    %eax
		jmp    jump_83511
	jump_8350f:
		sar    %esi
	jump_83511:
		add    %esi,%eax
		cmp    %ecx,%eax
		jge    jump_83519
		mov    %eax,%ecx
	jump_83519:
		mov    0x20(%esp),%eax
		shl    $0x4,%eax
		mov    %eax,0x4(%esp)
		mov    0x4(%esp),%esi
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %esi,%eax
		mov    0x4(%eax),%ax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx
		and    $0xffff,%eax
		mov    (%edx,%eax,8),%esi
		mov    %edi,%eax
		sub    %esi,%eax
		mov    0x4(%esp),%edi
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%esi
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %edi,%eax
		mov    0x4(%eax),%ax
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		mov    0x24(%esp),%edx
		mov    0x4(%eax),%edi
		mov    %edx,%eax
		sub    %edi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%esi
		jle    jump_83583
		sar    %eax
		jmp    jump_83585
	jump_83583:
		sar    %esi
	jump_83585:
		add    %esi,%eax
		cmp    %ecx,%eax
		jge    jump_8358d
		mov    %eax,%ecx
	jump_8358d:
		mov    tag_current,%dl
		mov    heap_end,%eax
		mov    %dl,routeTags(%ebx)
		mov    0x1c(%esp),%edx
		mov    %ecx,tree_val(,%ebx,4)
		mov    %edx,tree_dad(,%ebx,4)
		cmp    $0x100,%eax
		jge    jump_835c0
		lea    0x1(%eax),%edx
		mov    %edx,heap_end
	jump_835c0:
		mov    heap_end,%eax
		mov    %ebx,heap(,%eax,4)
		cmp    $0x1,%eax
		je     jump_833f3
		test   $0x1,%al
		jne    jump_83621
		mov    %eax,%ebx
		sar    %ebx
		shl    $0x2,%eax
		lea    0x0(,%ebx,4),%edx
		mov    heap(%eax),%esi
		mov    heap(%edx),%ecx
		mov    tree_val(,%esi,4),%edi
		cmp    tree_val(,%ecx,4),%edi
		jg     jump_833f3
		mov    heap(%eax),%ecx
		mov    heap(%edx),%esi
		mov    %ecx,heap(%edx)
		mov    %esi,heap(%eax)
		mov    %ebx,%eax
	jump_83621:
		cmp    $0x1,%eax
		je     jump_833f3
		mov    %eax,%edx
		sar    %edx
		mov    heap(,%eax,4),%ebx
		mov    %edx,0x8(%esp)
		mov    %eax,%edx
		shl    $0x2,%ebx
		xor    $0x1,%dl
		mov    tree_val(%ebx),%edi
		mov    heap(,%edx,4),%ecx
		mov    0x8(%esp),%esi
		shl    $0x2,%ecx
		shl    $0x2,%esi
		cmp    tree_val(%ecx),%edi
		jge    jump_83677
		mov    heap(%esi),%ecx
		cmp    tree_val(,%ecx,4),%edi
		jl     jump_83673
		mov    0x8(%esp),%eax
	jump_83673:
		mov    %eax,%edx
		jmp    jump_83690
	jump_83677:
		mov    heap(%esi),%eax
		mov    tree_val(%ecx),%ebx
		cmp    tree_val(,%eax,4),%ebx
		jl     jump_83690
		mov    0x8(%esp),%edx
	jump_83690:
		mov    0x8(%esp),%edi
		cmp    %edi,%edx
		je     jump_833f3
		mov    heap(,%edx,4),%esi
		mov    heap(,%edi,4),%ecx
		mov    %esi,heap(,%edi,4)
		mov    %edi,%eax
		mov    %ecx,heap(,%edx,4)
		jmp    jump_83621
	jump_836bf:
		mov    data_1c30c0,%edx
		cmp    $0xffffffff,%edx
		jne    jump_836ce
		mov    %edx,%eax
		jmp    jump_836f1
	jump_836ce:
		mov    0x10(%esp),%edx
		mov    0xc(%esp),%eax
		mov    0x14(%esp),%edi
		xor    %ebx,%ebx
		jmp    jump_836e9
	jump_836de:
		add    $0x4,%eax
		inc    %ebx
		mov    tree_dad(,%edx,4),%edx
	jump_836e9:
		mov    %edx,(%eax)
		cmp    %edi,%edx
		jne    jump_836de
		mov    %ebx,%eax
	jump_836f1:
		add    $0x28,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
ma_triangle_route:
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x10,%esp
		mov    %eax,%esi
		mov    %edx,0x8(%esp)
		mov    %ebx,%edi
		mov    %ecx,%ebp
		call   triangle_route_do_given
		mov    %eax,0xc(%esp)
		cmp    $0xffffffff,%eax
		je     jump_8382a
		mov    %esp,%eax
		push   %eax
		push   $fwd_path
		mov    0x14(%esp),%ebx
		push   %ebx
		mov    tree_By8,%ecx
		mov    tree_Ay8,%edx
		push   %edi
		mov    tree_Ax8,%eax
		mov    tree_Bx8,%ebx
		call   route_to_path
		cmp    $0xffffffff,%eax
		je     jump_8382a
		mov    tree_Ax8,%edx
		mov    tree_Ay8,%ebx
		mov    tree_Bx8,%eax
		mov    %ebp,%ecx
		mov    %eax,tree_Ax8
		mov    %edx,tree_Bx8
		mov    tree_By8,%eax
		mov    %esi,%edx
		mov    %eax,tree_Ay8
		mov    %ebx,tree_By8
		mov    $route_bak,%ebx
		mov    0x8(%esp),%eax
		call   triangle_route_do_bak
		mov    %eax,%esi
		mov    %eax,%ebp
		cmp    $0xffffffff,%eax
		je     jump_8382a
		lea    0x4(%esp),%eax
		push   %eax
		push   $fwd_path
		push   %esi
		mov    tree_By8,%ecx
		mov    tree_Bx8,%ebx
		push   $route_bak
		mov    tree_Ay8,%edx
		mov    tree_Ax8,%eax
		call   route_to_path
		cmp    $0xffffffff,%eax
		je     jump_8382a
		mov    0x4(%esp),%ecx
		mov    tree_Ax8,%eax
		mov    tree_Bx8,%ebx
		mov    tree_Ay8,%edx
		mov    %ebx,tree_Ax8
		mov    %eax,tree_Bx8
		mov    tree_By8,%ebx
		mov    (%esp),%eax
		mov    %ebx,tree_Ay8
		mov    %edx,tree_By8
		cmp    %ecx,%eax
		jge    jump_83808
		mov    0xc(%esp),%eax
		jmp    jump_8382a
	jump_83808:
		test   %esi,%esi
		jl     jump_83828
		mov    %edi,%edx
		lea    0x0(,%esi,4),%eax
	jump_83815:
		add    $0x4,%edx
		mov    route_bak(%eax),%ebx
		sub    $0x4,%eax
		mov    %ebx,-0x4(%edx)
		test   %eax,%eax
		jge    jump_83815
	jump_83828:
		mov    %ebp,%eax
	jump_8382a:
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
triangle_route_do_unkn3:	/* 0x083834 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x34,%esp
		mov    %eax,0x14(%esp)
		mov    %edx,0x10(%esp)
		mov    %ebx,0xc(%esp)
		mov    tag_current,%ah
		mov    $0xffffffff,%edx
		inc    %ah
		xor    %ebx,%ebx
		mov    %ah,tag_current
		xor    %eax,%eax
		mov    %edx,data_1c30c0
		mov    tag_current,%al
		mov    %ebx,heap_end
		test   %eax,%eax
		jne    jump_8388a
		mov    $0x1f40,%ebx
		mov    $routeTags,%eax
		xor    %edx,%edx
		call   ac_memset
		movb   $0x1,tag_current
	jump_8388a:
		mov    0x10(%esp),%eax
		mov    $0x1,%ecx
		mov    %eax,%edx
		mov    %ecx,tree_val(,%eax,4)
		mov    %eax,tree_dad(,%eax,4)
		mov    tag_current,%al
		mov    heap_end,%esi
		mov    %al,routeTags(%edx)
		cmp    $0x100,%esi
		jge    jump_838c5
		lea    (%esi,%ecx,1),%edi
		mov    %edi,heap_end
	jump_838c5:
		mov    heap_end,%eax
		mov    %edx,heap(,%eax,4)
		cmp    $0x1,%eax
		je     jump_839c3
		test   $0x1,%al
		jne    jump_83926
		mov    %eax,%ebx
		sar    %ebx
		shl    $0x2,%eax
		lea    0x0(,%ebx,4),%edx
		mov    heap(%eax),%esi
		mov    heap(%edx),%ecx
		mov    tree_val(,%esi,4),%ebp
		cmp    tree_val(,%ecx,4),%ebp
		jg     jump_839c3
		mov    heap(%eax),%ecx
		mov    heap(%edx),%esi
		mov    %ecx,heap(%edx)
		mov    %esi,heap(%eax)
		mov    %ebx,%eax
	jump_83926:
		mov    $0x1,%ebp
	jump_8392b:
		cmp    $0x1,%eax
		je     jump_839c3
		mov    %eax,%edx
		mov    %eax,%ebx
		sar    %edx
		xor    %ebp,%ebx
		mov    %edx,(%esp)
		mov    heap(,%ebx,4),%esi
		mov    heap(,%eax,4),%edx
		mov    (%esp),%ecx
		shl    $0x2,%edx
		shl    $0x2,%esi
		mov    tree_val(%edx),%edi
		shl    $0x2,%ecx
		cmp    tree_val(%esi),%edi
		jge    jump_8397d
		mov    heap(%ecx),%ebx
		cmp    tree_val(,%ebx,4),%edi
		jl     jump_83979
		mov    (%esp),%eax
	jump_83979:
		mov    %eax,%edx
		jmp    jump_83999
	jump_8397d:
		mov    heap(%ecx),%edx
		mov    tree_val(%esi),%eax
		cmp    tree_val(,%edx,4),%eax
		jge    jump_83996
		mov    %ebx,%edx
		jmp    jump_83999
	jump_83996:
		mov    (%esp),%edx
	jump_83999:
		mov    (%esp),%edi
		cmp    %edi,%edx
		je     jump_839c3
		mov    heap(,%edx,4),%ecx
		mov    heap(,%edi,4),%esi
		mov    %ecx,heap(,%edi,4)
		mov    %edi,%eax
		mov    %esi,heap(,%edx,4)
		jmp    jump_8392b
	jump_839c3:
		mov    0x14(%esp),%ebp
		mov    data_1c30c0,%eax
		cmp    %ebp,%eax
		je     jump_83f69
		cmp    $0xffffffff,%eax
		je     jump_83f69
		mov    heap_end,%edx
		mov    %eax,0x20(%esp)
		mov    $0x1,%eax
		mov    heap(,%edx,4),%ebx
		mov    %edx,%ecx
		mov    %ebx,data_1c30c0
		mov    $0xffffffff,%ebx
		sub    %eax,%ecx
		mov    %ecx,heap_end
		mov    %ebx,heap(,%edx,4)
		je     jump_83af0
	jump_83a15:
		lea    0x0(,%eax,2),%ecx
		mov    %ecx,%edx
		mov    heap_end,%ebp
		xor    $0x1,%dl
		lea    0x0(,%eax,4),%edi
		cmp    %ebp,%edx
		jg     jump_83ab1
		mov    heap(%edi),%edi
		lea    0x0(,%edx,4),%esi
		shl    $0x2,%edi
		mov    heap(,%eax,8),%ebx
		mov    tree_val(%edi),%ebp
		shl    $0x2,%ebx
		cmp    tree_val(%ebx),%ebp
		jge    jump_83a73
		mov    heap(%esi),%ecx
		mov    %ebp,%ebx
		cmp    tree_val(,%ecx,4),%ebx
		jge    jump_83a8a
		mov    %eax,%edx
		jmp    jump_83a8a
	jump_83a73:
		mov    heap(%esi),%esi
		mov    tree_val(%ebx),%ebx
		cmp    tree_val(,%esi,4),%ebx
		jge    jump_83a8a
		mov    %ecx,%edx
	jump_83a8a:
		cmp    %eax,%edx
		je     jump_83af0
		mov    heap(,%edx,4),%esi
		mov    heap(,%eax,4),%ecx
		mov    %esi,heap(,%eax,4)
		mov    %edx,%eax
		mov    %ecx,heap(,%edx,4)
		jmp    jump_83a15
	jump_83ab1:
		cmp    %ebp,%eax
		je     jump_83af0
		lea    0x0(,%ebp,4),%eax
		mov    heap(%edi),%edx
		mov    heap(%eax),%ebx
		mov    tree_val(,%edx,4),%edx
		cmp    tree_val(,%ebx,4),%edx
		jl     jump_83af0
		mov    heap(%eax),%edx
		mov    heap(%edi),%ebx
		mov    %edx,heap(%edi)
		mov    %ebx,heap(%eax)
	jump_83af0:
		mov    data_1c30c0,%eax
		cmp    $0xffffffff,%eax
		je     jump_83c1d
		mov    0x14(%esp),%ebx
		mov    %eax,0x18(%esp)
		cmp    %ebx,%eax
		je     jump_83f69
		mov    heap_end,%edx
		mov    $0x1,%eax
		mov    $0xffffffff,%ecx
		mov    heap(,%edx,4),%ebx
		mov    %edx,%esi
		mov    %ebx,data_1c30c0
		sub    %eax,%esi
		mov    %esi,heap_end
		mov    %ecx,heap(,%edx,4)
		je     jump_83c21
	jump_83b42:
		lea    0x0(,%eax,2),%edi
		mov    %edi,%edx
		mov    heap_end,%ebp
		xor    $0x1,%dl
		lea    0x0(,%eax,4),%ebx
		cmp    %ebp,%edx
		jg     jump_83bdc
		mov    heap(%ebx),%ebx
		lea    0x0(,%edx,4),%ecx
		shl    $0x2,%ebx
		mov    heap(,%eax,8),%esi
		mov    tree_val(%ebx),%ebp
		shl    $0x2,%esi
		cmp    tree_val(%esi),%ebp
		jge    jump_83b9e
		mov    heap(%ecx),%ecx
		cmp    tree_val(,%ecx,4),%ebp
		jge    jump_83bb5
		mov    %eax,%edx
		jmp    jump_83bb5
	jump_83b9e:
		mov    heap(%ecx),%ecx
		mov    tree_val(%esi),%ebx
		cmp    tree_val(,%ecx,4),%ebx
		jge    jump_83bb5
		mov    %edi,%edx
	jump_83bb5:
		cmp    %eax,%edx
		je     jump_83c21
		mov    heap(,%edx,4),%esi
		mov    heap(,%eax,4),%ecx
		mov    %esi,heap(,%eax,4)
		mov    %edx,%eax
		mov    %ecx,heap(,%edx,4)
		jmp    jump_83b42
	jump_83bdc:
		cmp    %ebp,%eax
		je     jump_83c21
		lea    0x0(,%ebp,4),%eax
		mov    heap(%ebx),%edx
		mov    heap(%eax),%ecx
		mov    tree_val(,%edx,4),%edx
		cmp    tree_val(,%ecx,4),%edx
		jl     jump_83c21
		mov    heap(%eax),%edx
		mov    heap(%ebx),%ecx
		mov    %edx,heap(%ebx)
		mov    %ecx,heap(%eax)
		jmp    jump_83c21
	jump_83c1d:
		mov    %eax,0x18(%esp)
	jump_83c21:
		xor    %eax,%eax
		mov    %eax,0x30(%esp)
		mov    0x20(%esp),%eax
		xor    %edx,%edx
		shl    $0x4,%eax
		mov    %edx,0x2c(%esp)
		mov    %eax,0x1c(%esp)
		jmp    jump_83c57
	jump_83c3a:
		mov    0x2c(%esp),%ebx
		mov    0x30(%esp),%ecx
		add    $0x2,%ebx
		inc    %ecx
		mov    %ebx,0x2c(%esp)
		mov    %ecx,0x30(%esp)
		cmp    $0x3,%ecx
		jge    jump_83f4a
	jump_83c57:
		mov    0x1c(%esp),%eax
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx
		mov    0x2c(%esp),%ebx
		add    %edx,%eax
		mov    0x4(%ebx,%eax,1),%ebx
		sar    $0x10,%ebx
		cmp    $0xffffffff,%ebx
		je     jump_83c3a
		mov    0x30(%esp),%cl
		mov    $0x1,%edi
		movzbl 0xf(%eax),%esi
		shl    %cl,%edi
		test   %edi,%esi
		je     jump_83c3a
		mov    routeTags(%ebx),%cl
		cmp    tag_current,%cl
		je     jump_83c3a
		mov    0xb(%eax),%eax
		sar    $0x18,%eax
		and    $0x1,%eax
		sete   %al
		and    $0xff,%eax
		mov    %eax,0x24(%esp)
		je     jump_83c3a
		mov    tree_Ax8,%edi
		mov    tree_Ay8,%ebp
		mov    %ebx,0x28(%esp)
		mov    %ebx,%esi
		sar    $0x8,%edi
		shl    $0x4,%esi
		sar    $0x8,%ebp
		mov    (%edx,%esi,1),%ax
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		mov    (%eax),%ecx
		mov    %edi,%eax
		sub    %ecx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ecx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		mov    (%esi,%eax,1),%ax
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		mov    0x4(%eax),%esi
		mov    %ebp,%eax
		sub    %esi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%ecx
		jle    jump_83d14
		sar    %eax
		jmp    jump_83d16
	jump_83d14:
		sar    %ecx
	jump_83d16:
		add    %eax,%ecx
		mov    0x28(%esp),%eax
		shl    $0x4,%eax
		mov    %eax,0x4(%esp)
		mov    0x4(%esp),%edx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %edx,%eax
		mov    0x2(%eax),%ax
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		mov    (%eax),%esi
		mov    %edi,%eax
		sub    %esi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    0x4(%esp),%edx
		mov    %eax,%esi
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %edx,%eax
		mov    0x2(%eax),%ax
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		mov    %ebp,%edx
		sub    0x4(%eax),%edx
		mov    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%esi
		jle    jump_83d82
		sar    %eax
		jmp    jump_83d84
	jump_83d82:
		sar    %esi
	jump_83d84:
		add    %esi,%eax
		cmp    %ecx,%eax
		jge    jump_83d8c
		mov    %eax,%ecx
	jump_83d8c:
		mov    0x28(%esp),%eax
		shl    $0x4,%eax
		mov    %eax,0x4(%esp)
		mov    0x4(%esp),%esi
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %esi,%eax
		mov    0x4(%eax),%ax
		and    $0xffff,%eax
		lea    0x0(,%eax,8),%edx
		mov    EXPORT_SYMBOL(triangulation)+0x38,%eax
		mov    (%edx,%eax,1),%esi
		mov    %edi,%eax
		sub    %esi,%eax
		mov    0x4(%esp),%edi
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%esi
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %edi,%eax
		mov    0x4(%eax),%ax
		and    $0xffff,%eax
		lea    0x0(,%eax,8),%edx
		mov    EXPORT_SYMBOL(triangulation)+0x38,%eax
		mov    0x4(%edx,%eax,1),%edi
		mov    %ebp,%eax
		sub    %edi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%esi
		jle    jump_83dfa
		sar    %eax
		jmp    jump_83dfc
	jump_83dfa:
		sar    %esi
	jump_83dfc:
		add    %esi,%eax
		cmp    %ecx,%eax
		jge    jump_83e04
		mov    %eax,%ecx
	jump_83e04:
		mov    0x24(%esp),%ebp
		mov    %ecx,%edx
		cmp    $0x2,%ebp
		jne    jump_83e14
		sar    $0x3,%edx
		add    %ecx,%edx
	jump_83e14:
		mov    %edx,tree_val(,%ebx,4)
		mov    tag_current,%dl
		mov    %dl,routeTags(%ebx)
		mov    0x20(%esp),%edx
		mov    heap_end,%eax
		mov    %edx,tree_dad(,%ebx,4)
		cmp    $0x100,%eax
		jge    jump_83e47
		lea    0x1(%eax),%edx
		mov    %edx,heap_end
	jump_83e47:
		mov    heap_end,%eax
		mov    %ebx,heap(,%eax,4)
		cmp    $0x1,%eax
		je     jump_83c3a
		test   $0x1,%al
		jne    jump_83ea8
		mov    %eax,%ebx
		sar    %ebx
		shl    $0x2,%eax
		lea    0x0(,%ebx,4),%edx
		mov    heap(%eax),%esi
		mov    heap(%edx),%ecx
		mov    tree_val(,%esi,4),%edi
		cmp    tree_val(,%ecx,4),%edi
		jg     jump_83c3a
		mov    heap(%eax),%ecx
		mov    heap(%edx),%esi
		mov    %ecx,heap(%edx)
		mov    %esi,heap(%eax)
		mov    %ebx,%eax
	jump_83ea8:
		mov    $0x1,%ebp
	jump_83ead:
		cmp    $0x1,%eax
		je     jump_83c3a
		mov    %eax,%edx
		sar    %edx
		mov    heap(,%eax,4),%ebx
		mov    %edx,0x8(%esp)
		mov    %eax,%edx
		shl    $0x2,%ebx
		xor    %ebp,%edx
		mov    tree_val(%ebx),%edi
		mov    heap(,%edx,4),%esi
		mov    0x8(%esp),%ecx
		shl    $0x2,%esi
		shl    $0x2,%ecx
		cmp    tree_val(%esi),%edi
		jge    jump_83f02
		mov    heap(%ecx),%ecx
		cmp    tree_val(,%ecx,4),%edi
		jl     jump_83efe
		mov    0x8(%esp),%eax
	jump_83efe:
		mov    %eax,%edx
		jmp    jump_83f1b
	jump_83f02:
		mov    heap(%ecx),%ebx
		mov    tree_val(%esi),%eax
		cmp    tree_val(,%ebx,4),%eax
		jl     jump_83f1b
		mov    0x8(%esp),%edx
	jump_83f1b:
		mov    0x8(%esp),%edi
		cmp    %edi,%edx
		je     jump_83c3a
		mov    heap(,%edx,4),%ecx
		mov    heap(,%edi,4),%esi
		mov    %ecx,heap(,%edi,4)
		mov    %edi,%eax
		mov    %esi,heap(,%edx,4)
		jmp    jump_83ead
	jump_83f4a:
		mov    0x18(%esp),%edi
		cmp    $0xffffffff,%edi
		je     jump_839c3
		mov    $0xffffffff,%ebp
		mov    %edi,0x20(%esp)
		mov    %ebp,0x18(%esp)
		jmp    jump_83c21
	jump_83f69:
		mov    data_1c30c0,%edi
		cmp    $0xffffffff,%edi
		jne    jump_83f78
		mov    %edi,%eax
		jmp    jump_83f9b
	jump_83f78:
		mov    0x14(%esp),%edx
		mov    0xc(%esp),%eax
		mov    0x10(%esp),%ebp
		xor    %ebx,%ebx
		jmp    jump_83f93
	jump_83f88:
		add    $0x4,%eax
		inc    %ebx
		mov    tree_dad(,%edx,4),%edx
	jump_83f93:
		mov    %edx,(%eax)
		cmp    %ebp,%edx
		jne    jump_83f88
		mov    %ebx,%eax
	jump_83f9b:
		add    $0x34,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
triangle_route_do_unkn4:	/* 0x083FA4 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x34,%esp
		mov    %eax,0x14(%esp)
		mov    %edx,0x10(%esp)
		mov    %ebx,0xc(%esp)
		mov    tag_current,%ah
		mov    $0xffffffff,%edx
		inc    %ah
		xor    %ebx,%ebx
		mov    %ah,tag_current
		xor    %eax,%eax
		mov    %edx,data_1c30c0
		mov    tag_current,%al
		mov    %ebx,heap_end
		test   %eax,%eax
		jne    jump_83ffa
		mov    $0x1f40,%ebx
		mov    $routeTags,%eax
		xor    %edx,%edx
		call   ac_memset
		movb   $0x1,tag_current
	jump_83ffa:
		mov    0x10(%esp),%eax
		mov    $0x1,%ecx
		mov    %eax,%edx
		mov    %ecx,tree_val(,%eax,4)
		mov    %eax,tree_dad(,%eax,4)
		mov    tag_current,%al
		mov    heap_end,%esi
		mov    %al,routeTags(%edx)
		cmp    $0x100,%esi
		jge    jump_84035
		lea    (%esi,%ecx,1),%edi
		mov    %edi,heap_end
	jump_84035:
		mov    heap_end,%eax
		mov    %edx,heap(,%eax,4)
		cmp    $0x1,%eax
		je     jump_8412a
		test   $0x1,%al
		jne    jump_84090
		mov    %eax,%ebx
		sar    %ebx
		shl    $0x2,%eax
		lea    0x0(,%ebx,4),%edx
		mov    heap(%eax),%esi
		mov    heap(%edx),%ecx
		mov    tree_val(,%esi,4),%ebp
		cmp    tree_val(,%ecx,4),%ebp
		jg     jump_8412a
		mov    heap(%edx),%ecx
		mov    %esi,heap(%edx)
		mov    %ecx,heap(%eax)
		mov    %ebx,%eax
	jump_84090:
		mov    $0x1,%ebp
	jump_84095:
		cmp    $0x1,%eax
		je     jump_8412a
		mov    %eax,%edx
		mov    %eax,%ebx
		mov    heap(,%eax,4),%ecx
		sar    %edx
		xor    %ebp,%ebx
		shl    $0x2,%ecx
		mov    %edx,(%esp)
		mov    heap(,%ebx,4),%esi
		mov    tree_val(%ecx),%edi
		shl    $0x2,%esi
		shl    $0x2,%edx
		cmp    tree_val(%esi),%edi
		jge    jump_840e4
		mov    heap(%edx),%ebx
		cmp    tree_val(,%ebx,4),%edi
		jl     jump_840e0
		mov    (%esp),%eax
	jump_840e0:
		mov    %eax,%edx
		jmp    jump_84100
	jump_840e4:
		mov    heap(%edx),%eax
		mov    tree_val(%esi),%edx
		cmp    tree_val(,%eax,4),%edx
		jge    jump_840fd
		mov    %ebx,%edx
		jmp    jump_84100
	jump_840fd:
		mov    (%esp),%edx
	jump_84100:
		mov    (%esp),%edi
		cmp    %edi,%edx
		je     jump_8412a
		mov    heap(,%edx,4),%ecx
		mov    heap(,%edi,4),%esi
		mov    %ecx,heap(,%edi,4)
		mov    %edi,%eax
		mov    %esi,heap(,%edx,4)
		jmp    jump_84095
	jump_8412a:
		mov    0x14(%esp),%ebp
		mov    data_1c30c0,%eax
		cmp    %ebp,%eax
		je     jump_846c8
		cmp    $0xffffffff,%eax
		je     jump_846c8
		mov    heap_end,%edx
		mov    %eax,0x20(%esp)
		mov    $0x1,%eax
		mov    heap(,%edx,4),%ebx
		mov    %edx,%ecx
		mov    %ebx,data_1c30c0
		mov    $0xffffffff,%ebx
		sub    %eax,%ecx
		mov    %ecx,heap_end
		mov    %ebx,heap(,%edx,4)
		je     jump_84255
	jump_8417c:
		lea    0x0(,%eax,2),%ecx
		mov    %ecx,%edx
		mov    heap_end,%edi
		xor    $0x1,%dl
		lea    0x0(,%eax,4),%ebx
		cmp    %edi,%edx
		jg     jump_84216
		mov    heap(%ebx),%ebx
		lea    0x0(,%edx,4),%edi
		shl    $0x2,%ebx
		mov    heap(,%eax,8),%esi
		mov    tree_val(%ebx),%ebp
		shl    $0x2,%esi
		cmp    tree_val(%esi),%ebp
		jge    jump_841d8
		mov    heap(%edi),%ecx
		cmp    tree_val(,%ecx,4),%ebp
		jge    jump_841ef
		mov    %eax,%edx
		jmp    jump_841ef
	jump_841d8:
		mov    heap(%edi),%edi
		mov    tree_val(%esi),%ebx
		cmp    tree_val(,%edi,4),%ebx
		jge    jump_841ef
		mov    %ecx,%edx
	jump_841ef:
		cmp    %eax,%edx
		je     jump_84255
		mov    heap(,%edx,4),%esi
		mov    heap(,%eax,4),%ecx
		mov    %esi,heap(,%eax,4)
		mov    %edx,%eax
		mov    %ecx,heap(,%edx,4)
		jmp    jump_8417c
	jump_84216:
		cmp    %edi,%eax
		je     jump_84255
		lea    0x0(,%edi,4),%eax
		mov    heap(%ebx),%edx
		mov    heap(%eax),%ecx
		mov    tree_val(,%edx,4),%edx
		cmp    tree_val(,%ecx,4),%edx
		jl     jump_84255
		mov    heap(%eax),%edx
		mov    heap(%ebx),%ecx
		mov    %edx,heap(%ebx)
		mov    %ecx,heap(%eax)
	jump_84255:
		mov    data_1c30c0,%edi
		cmp    $0xffffffff,%edi
		je     jump_84385
		mov    0x14(%esp),%edx
		mov    %edi,0x18(%esp)
		cmp    %edx,%edi
		je     jump_846c8
		mov    heap_end,%edx
		mov    $0x1,%eax
		mov    heap(,%edx,4),%ebx
		mov    %edx,%ecx
		mov    %ebx,data_1c30c0
		mov    $0xffffffff,%ebx
		sub    %eax,%ecx
		mov    %ecx,heap_end
		mov    %ebx,heap(,%edx,4)
		je     jump_84389
	jump_842a8:
		lea    0x0(,%eax,2),%esi
		mov    %esi,%edx
		mov    heap_end,%ebp
		xor    $0x1,%dl
		lea    0x0(,%eax,4),%edi
		cmp    %ebp,%edx
		jg     jump_84344
		mov    heap(%edi),%edi
		lea    0x0(,%edx,4),%ebx
		shl    $0x2,%edi
		mov    heap(,%eax,8),%ecx
		mov    tree_val(%edi),%ebp
		shl    $0x2,%ecx
		cmp    tree_val(%ecx),%ebp
		jge    jump_84306
		mov    heap(%ebx),%ecx
		mov    %ebp,%ebx
		cmp    tree_val(,%ecx,4),%ebx
		jge    jump_8431d
		mov    %eax,%edx
		jmp    jump_8431d
	jump_84306:
		mov    heap(%ebx),%ebx
		mov    tree_val(%ecx),%ecx
		cmp    tree_val(,%ebx,4),%ecx
		jge    jump_8431d
		mov    %esi,%edx
	jump_8431d:
		cmp    %eax,%edx
		je     jump_84389
		mov    heap(,%edx,4),%esi
		mov    heap(,%eax,4),%ecx
		mov    %esi,heap(,%eax,4)
		mov    %edx,%eax
		mov    %ecx,heap(,%edx,4)
		jmp    jump_842a8
	jump_84344:
		cmp    %ebp,%eax
		je     jump_84389
		lea    0x0(,%ebp,4),%eax
		mov    heap(%edi),%edx
		mov    heap(%eax),%ebx
		mov    tree_val(,%edx,4),%edx
		cmp    tree_val(,%ebx,4),%edx
		jl     jump_84389
		mov    heap(%eax),%edx
		mov    heap(%edi),%ebx
		mov    %edx,heap(%edi)
		mov    %ebx,heap(%eax)
		jmp    jump_84389
	jump_84385:
		mov    %edi,0x18(%esp)
	jump_84389:
		xor    %edi,%edi
		mov    0x20(%esp),%eax
		mov    %edi,0x30(%esp)
		shl    $0x4,%eax
		mov    %edi,0x2c(%esp)
		mov    %eax,0x1c(%esp)
		jmp    jump_843bd
	jump_843a0:
		mov    0x2c(%esp),%eax
		mov    0x30(%esp),%edx
		add    $0x2,%eax
		inc    %edx
		mov    %eax,0x2c(%esp)
		mov    %edx,0x30(%esp)
		cmp    $0x3,%edx
		jge    jump_846a9
	jump_843bd:
		mov    0x1c(%esp),%eax
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx
		mov    0x2c(%esp),%esi
		add    %edx,%eax
		mov    0x4(%esi,%eax,1),%esi
		sar    $0x10,%esi
		cmp    $0xffffffff,%esi
		je     jump_843a0
		xor    %ebx,%ebx
		mov    0x30(%esp),%cl
		mov    0xf(%eax),%bl
		mov    $0x1,%eax
		shl    %cl,%eax
		test   %eax,%ebx
		je     jump_843a0
		mov    tag_current,%bl
		cmp    routeTags(%esi),%bl
		je     jump_843a0
		mov    %esi,%ecx
		shl    $0x4,%ecx
		add    %ecx,%edx
		mov    0xb(%edx),%eax
		sar    $0x18,%eax
		and    $0x1,%eax
		sete   %al
		and    $0xff,%eax
		mov    %eax,0x24(%esp)
		je     jump_843a0
		xor    %eax,%eax
		mov    (%edx),%ax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx
		shl    $0x3,%eax
		mov    tree_Ax8,%ebp
		add    %edx,%eax
		sar    $0x8,%ebp
		mov    (%eax),%ebx
		mov    %ebp,%eax
		sub    %ebx,%eax
		mov    tree_Ay8,%edi
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %eax,%ecx
		xor    %eax,%eax
		mov    (%ecx),%ax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		sar    $0x8,%edi
		mov    0x4(%eax),%ecx
		mov    %edi,%eax
		sub    %ecx,%eax
		mov    %esi,0x28(%esp)
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%ebx
		jle    jump_84477
		sar    %eax
		jmp    jump_84479
	jump_84477:
		sar    %ebx
	jump_84479:
		add    %eax,%ebx
		mov    0x28(%esp),%eax
		shl    $0x4,%eax
		mov    %eax,0x4(%esp)
		mov    0x4(%esp),%edx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %edx,%eax
		mov    0x2(%eax),%ax
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		mov    (%eax),%ecx
		mov    %ebp,%eax
		sub    %ecx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    0x4(%esp),%edx
		mov    %eax,%ecx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %edx,%eax
		mov    0x2(%eax),%ax
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		mov    %edi,%edx
		sub    0x4(%eax),%edx
		mov    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%ecx
		jle    jump_844e5
		sar    %eax
		jmp    jump_844e7
	jump_844e5:
		sar    %ecx
	jump_844e7:
		add    %ecx,%eax
		cmp    %ebx,%eax
		jge    jump_844ef
		mov    %eax,%ebx
	jump_844ef:
		mov    0x28(%esp),%eax
		shl    $0x4,%eax
		mov    %eax,0x4(%esp)
		mov    0x4(%esp),%ecx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %ecx,%eax
		mov    0x4(%eax),%ax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx
		and    $0xffff,%eax
		mov    (%edx,%eax,8),%ecx
		mov    %ebp,%eax
		sub    %ecx,%eax
		mov    0x4(%esp),%ebp
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ecx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %ebp,%eax
		mov    0x4(%eax),%ax
		and    $0xffff,%eax
		lea    0x0(,%eax,8),%edx
		mov    EXPORT_SYMBOL(triangulation)+0x38,%eax
		mov    0x4(%edx,%eax,1),%ebp
		mov    %edi,%eax
		sub    %ebp,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%ecx
		jle    jump_84557
		sar    %eax
		jmp    jump_84559
	jump_84557:
		sar    %ecx
	jump_84559:
		add    %ecx,%eax
		cmp    %ebx,%eax
		jge    jump_84561
		mov    %eax,%ebx
	jump_84561:
		mov    0x24(%esp),%eax
		mov    %ebx,%edx
		cmp    $0x2,%eax
		jne    jump_84571
		sar    $0x3,%edx
		add    %ebx,%edx
	jump_84571:
		mov    %edx,tree_val(,%esi,4)
		mov    tag_current,%dl
		mov    %dl,routeTags(%esi)
		mov    0x20(%esp),%edx
		mov    %edx,tree_dad(,%esi,4)
		mov    heap_end,%edx
		cmp    $0x100,%edx
		jge    jump_845a6
		lea    0x1(%edx),%ebx
		mov    %ebx,heap_end
	jump_845a6:
		mov    heap_end,%eax
		mov    %esi,heap(,%eax,4)
		cmp    $0x1,%eax
		je     jump_843a0
		test   $0x1,%al
		jne    jump_84607
		mov    %eax,%ebx
		sar    %ebx
		shl    $0x2,%eax
		lea    0x0(,%ebx,4),%edx
		mov    heap(%eax),%esi
		mov    heap(%edx),%ecx
		mov    tree_val(,%esi,4),%edi
		cmp    tree_val(,%ecx,4),%edi
		jg     jump_843a0
		mov    heap(%eax),%ecx
		mov    heap(%edx),%esi
		mov    %ecx,heap(%edx)
		mov    %esi,heap(%eax)
		mov    %ebx,%eax
	jump_84607:
		mov    $0x1,%ebp
	jump_8460c:
		cmp    $0x1,%eax
		je     jump_843a0
		mov    %eax,%edx
		sar    %edx
		mov    heap(,%eax,4),%ebx
		mov    %edx,0x8(%esp)
		mov    %eax,%edx
		shl    $0x2,%ebx
		xor    %ebp,%edx
		mov    tree_val(%ebx),%edi
		mov    heap(,%edx,4),%esi
		mov    0x8(%esp),%ecx
		shl    $0x2,%esi
		shl    $0x2,%ecx
		cmp    tree_val(%esi),%edi
		jge    jump_84661
		mov    heap(%ecx),%ecx
		cmp    tree_val(,%ecx,4),%edi
		jl     jump_8465d
		mov    0x8(%esp),%eax
	jump_8465d:
		mov    %eax,%edx
		jmp    jump_8467a
	jump_84661:
		mov    heap(%ecx),%ebx
		mov    tree_val(%esi),%eax
		cmp    tree_val(,%ebx,4),%eax
		jl     jump_8467a
		mov    0x8(%esp),%edx
	jump_8467a:
		mov    0x8(%esp),%edi
		cmp    %edi,%edx
		je     jump_843a0
		mov    heap(,%edx,4),%ecx
		mov    heap(,%edi,4),%esi
		mov    %ecx,heap(,%edi,4)
		mov    %edi,%eax
		mov    %esi,heap(,%edx,4)
		jmp    jump_8460c
	jump_846a9:
		mov    0x18(%esp),%ecx
		cmp    $0xffffffff,%ecx
		je     jump_8412a
		mov    $0xffffffff,%esi
		mov    %ecx,0x20(%esp)
		mov    %esi,0x18(%esp)
		jmp    jump_84389
	jump_846c8:
		mov    data_1c30c0,%eax
		cmp    $0xffffffff,%eax
		je     jump_846f5
		mov    0x14(%esp),%edx
		mov    0xc(%esp),%eax
		mov    0x10(%esp),%esi
		xor    %ebx,%ebx
		jmp    jump_846ed
	jump_846e2:
		add    $0x4,%eax
		inc    %ebx
		mov    tree_dad(,%edx,4),%edx
	jump_846ed:
		mov    %edx,(%eax)
		cmp    %esi,%edx
		jne    jump_846e2
		mov    %ebx,%eax
	jump_846f5:
		add    $0x34,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
ma_triangle_route_5:	/* 0x0846FC */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x10,%esp
		mov    %eax,%esi
		mov    %edx,0x8(%esp)
		mov    %ebx,%edi
		mov    %ecx,%ebp
		call   triangle_route_do_unkn3
		mov    %eax,0xc(%esp)
		cmp    $0xffffffff,%eax
		je     jump_8482e
		mov    %esp,%eax
		push   %eax
		push   $fwd_path
		mov    0x14(%esp),%ebx
		push   %ebx
		mov    tree_By8,%ecx
		mov    tree_Ay8,%edx
		push   %edi
		mov    tree_Ax8,%eax
		mov    tree_Bx8,%ebx
		call   route_to_path
		cmp    $0xffffffff,%eax
		je     jump_8482e
		mov    tree_Ax8,%edx
		mov    tree_Ay8,%ebx
		mov    tree_Bx8,%eax
		mov    %ebp,%ecx
		mov    %eax,tree_Ax8
		mov    %edx,tree_Bx8
		mov    tree_By8,%eax
		mov    %esi,%edx
		mov    %eax,tree_Ay8
		mov    %ebx,tree_By8
		mov    $route_bak,%ebx
		mov    0x8(%esp),%eax
		call   triangle_route_do_unkn4
		mov    %eax,%esi
		mov    %eax,%ebp
		cmp    $0xffffffff,%eax
		je     jump_8482e
		lea    0x4(%esp),%eax
		push   %eax
		push   $fwd_path
		push   %esi
		mov    tree_By8,%ecx
		mov    tree_Bx8,%ebx
		push   $route_bak
		mov    tree_Ay8,%edx
		mov    tree_Ax8,%eax
		call   route_to_path
		cmp    $0xffffffff,%eax
		je     jump_8482e
		mov    0x4(%esp),%ecx
		mov    tree_Ax8,%eax
		mov    tree_Bx8,%ebx
		mov    tree_Ay8,%edx
		mov    %ebx,tree_Ax8
		mov    %eax,tree_Bx8
		mov    tree_By8,%ebx
		mov    (%esp),%eax
		mov    %ebx,tree_Ay8
		mov    %edx,tree_By8
		cmp    %ecx,%eax
		jge    jump_8480c
		mov    0xc(%esp),%eax
		jmp    jump_8482e
	jump_8480c:
		test   %esi,%esi
		jl     jump_8482c
		mov    %edi,%edx
		lea    0x0(,%esi,4),%eax
	jump_84819:
		add    $0x4,%edx
		mov    route_bak(%eax),%ebx
		sub    $0x4,%eax
		mov    %ebx,-0x4(%edx)
		test   %eax,%eax
		jge    jump_84819
	jump_8482c:
		mov    %ebp,%eax
	jump_8482e:
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
triangle_route_do_unkn5:	/* 0x084924 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x30,%esp
		mov    %eax,0x14(%esp)
		mov    %edx,0x10(%esp)
		mov    %ebx,0xc(%esp)
		mov    tag_current,%ah
		mov    $0xffffffff,%edx
		inc    %ah
		xor    %ebx,%ebx
		mov    %ah,tag_current
		xor    %eax,%eax
		mov    %edx,data_1c30c0
		mov    tag_current,%al
		mov    %ebx,heap_end
		test   %eax,%eax
		jne    jump_8497a
		mov    $0x1f40,%ebx
		mov    $routeTags,%eax
		xor    %edx,%edx
		call   ac_memset
		movb   $0x1,tag_current
	jump_8497a:
		mov    0x10(%esp),%eax
		mov    $0x1,%ecx
		mov    %eax,%edx
		mov    %ecx,tree_val(,%eax,4)
		mov    %eax,tree_dad(,%eax,4)
		mov    tag_current,%al
		mov    heap_end,%esi
		mov    %al,routeTags(%edx)
		cmp    $0x100,%esi
		jge    jump_849b5
		lea    (%esi,%ecx,1),%edi
		mov    %edi,heap_end
	jump_849b5:
		mov    heap_end,%eax
		mov    %edx,heap(,%eax,4)
		cmp    $0x1,%eax
		je     jump_84ab3
		test   $0x1,%al
		jne    jump_84a16
		mov    %eax,%ebx
		sar    %ebx
		shl    $0x2,%eax
		lea    0x0(,%ebx,4),%edx
		mov    heap(%eax),%esi
		mov    heap(%edx),%ecx
		mov    tree_val(,%esi,4),%ebp
		cmp    tree_val(,%ecx,4),%ebp
		jg     jump_84ab3
		mov    heap(%eax),%ecx
		mov    heap(%edx),%esi
		mov    %ecx,heap(%edx)
		mov    %esi,heap(%eax)
		mov    %ebx,%eax
	jump_84a16:
		mov    $0x1,%ebp
	jump_84a1b:
		cmp    $0x1,%eax
		je     jump_84ab3
		mov    %eax,%edx
		mov    %eax,%esi
		mov    heap(,%eax,4),%ecx
		sar    %edx
		shl    $0x2,%ecx
		xor    %ebp,%esi
		mov    %edx,(%esp)
		mov    tree_val(%ecx),%edi
		mov    heap(,%esi,4),%edx
		mov    (%esp),%ebx
		shl    $0x2,%edx
		shl    $0x2,%ebx
		cmp    tree_val(%edx),%edi
		jge    jump_84a6d
		mov    heap(%ebx),%edx
		cmp    tree_val(,%edx,4),%edi
		jl     jump_84a69
		mov    (%esp),%eax
	jump_84a69:
		mov    %eax,%edx
		jmp    jump_84a89
	jump_84a6d:
		mov    heap(%ebx),%eax
		mov    tree_val(%edx),%edx
		cmp    tree_val(,%eax,4),%edx
		jge    jump_84a86
		mov    %esi,%edx
		jmp    jump_84a89
	jump_84a86:
		mov    (%esp),%edx
	jump_84a89:
		mov    (%esp),%esi
		cmp    %esi,%edx
		je     jump_84ab3
		mov    %esi,%eax
		mov    heap(,%edx,4),%ecx
		mov    heap(,%esi,4),%esi
		mov    %ecx,heap(,%eax,4)
		mov    %esi,heap(,%edx,4)
		jmp    jump_84a1b
	jump_84ab3:
		mov    0x14(%esp),%edi
		mov    data_1c30c0,%eax
		cmp    %edi,%eax
		je     jump_8502d
		cmp    $0xffffffff,%eax
		je     jump_8502d
		mov    heap_end,%edx
		mov    %eax,0x20(%esp)
		mov    $0x1,%eax
		mov    heap(,%edx,4),%ebx
		mov    %edx,%ecx
		mov    %ebx,data_1c30c0
		mov    $0xffffffff,%ebx
		sub    %eax,%ecx
		mov    %ecx,heap_end
		mov    %ebx,heap(,%edx,4)
		je     jump_84bde
	jump_84b05:
		lea    0x0(,%eax,2),%ebx
		mov    %ebx,%edx
		mov    heap_end,%edi
		xor    $0x1,%dl
		lea    0x0(,%eax,4),%ecx
		cmp    %edi,%edx
		jg     jump_84b9f
		mov    heap(%ecx),%ecx
		lea    0x0(,%edx,4),%edi
		shl    $0x2,%ecx
		mov    heap(,%eax,8),%esi
		mov    tree_val(%ecx),%ebp
		shl    $0x2,%esi
		cmp    tree_val(%esi),%ebp
		jge    jump_84b61
		mov    heap(%edi),%esi
		cmp    tree_val(,%esi,4),%ebp
		jge    jump_84b78
		mov    %eax,%edx
		jmp    jump_84b78
	jump_84b61:
		mov    heap(%edi),%edi
		mov    tree_val(%esi),%ecx
		cmp    tree_val(,%edi,4),%ecx
		jge    jump_84b78
		mov    %ebx,%edx
	jump_84b78:
		cmp    %eax,%edx
		je     jump_84bde
		mov    heap(,%edx,4),%ecx
		mov    heap(,%eax,4),%esi
		mov    %ecx,heap(,%eax,4)
		mov    %edx,%eax
		mov    %esi,heap(,%edx,4)
		jmp    jump_84b05
	jump_84b9f:
		cmp    %edi,%eax
		je     jump_84bde
		lea    0x0(,%edi,4),%eax
		mov    heap(%ecx),%edx
		mov    heap(%eax),%ebx
		mov    tree_val(,%edx,4),%edx
		cmp    tree_val(,%ebx,4),%edx
		jl     jump_84bde
		mov    heap(%eax),%edx
		mov    heap(%ecx),%ebx
		mov    %edx,heap(%ecx)
		mov    %ebx,heap(%eax)
	jump_84bde:
		mov    data_1c30c0,%esi
		cmp    $0xffffffff,%esi
		je     jump_84d0c
		mov    0x14(%esp),%ebp
		mov    %esi,0x18(%esp)
		cmp    %ebp,%esi
		je     jump_8502d
		mov    heap_end,%edx
		mov    $0x1,%eax
		mov    heap(,%edx,4),%ebx
		mov    %edx,%ecx
		mov    %ebx,data_1c30c0
		mov    $0xffffffff,%ebx
		sub    %eax,%ecx
		mov    %ecx,heap_end
		mov    %ebx,heap(,%edx,4)
		je     jump_84d10
	jump_84c31:
		lea    0x0(,%eax,2),%esi
		mov    %esi,%edx
		mov    heap_end,%ebp
		xor    $0x1,%dl
		lea    0x0(,%eax,4),%edi
		cmp    %ebp,%edx
		jg     jump_84ccb
		mov    heap(%edi),%edi
		lea    0x0(,%edx,4),%ebx
		shl    $0x2,%edi
		mov    heap(,%eax,8),%ecx
		mov    tree_val(%edi),%ebp
		shl    $0x2,%ecx
		cmp    tree_val(%ecx),%ebp
		jge    jump_84c8d
		mov    heap(%ebx),%ebx
		cmp    tree_val(,%ebx,4),%ebp
		jge    jump_84ca4
		mov    %eax,%edx
		jmp    jump_84ca4
	jump_84c8d:
		mov    heap(%ebx),%edi
		mov    tree_val(%ecx),%ebx
		cmp    tree_val(,%edi,4),%ebx
		jge    jump_84ca4
		mov    %esi,%edx
	jump_84ca4:
		cmp    %eax,%edx
		je     jump_84d10
		mov    heap(,%edx,4),%ecx
		mov    heap(,%eax,4),%esi
		mov    %ecx,heap(,%eax,4)
		mov    %edx,%eax
		mov    %esi,heap(,%edx,4)
		jmp    jump_84c31
	jump_84ccb:
		cmp    %ebp,%eax
		je     jump_84d10
		lea    0x0(,%ebp,4),%eax
		mov    heap(%edi),%edx
		mov    heap(%eax),%ebx
		mov    tree_val(,%edx,4),%edx
		cmp    tree_val(,%ebx,4),%edx
		jl     jump_84d10
		mov    heap(%eax),%edx
		mov    heap(%edi),%ebx
		mov    %edx,heap(%edi)
		mov    %ebx,heap(%eax)
		jmp    jump_84d10
	jump_84d0c:
		mov    %esi,0x18(%esp)
	jump_84d10:
		xor    %eax,%eax
		mov    %eax,0x2c(%esp)
		mov    0x20(%esp),%eax
		xor    %edx,%edx
		shl    $0x4,%eax
		mov    %edx,0x28(%esp)
		mov    %eax,0x1c(%esp)
		jmp    jump_84d46
	jump_84d29:
		mov    0x28(%esp),%ebx
		mov    0x2c(%esp),%ecx
		add    $0x2,%ebx
		inc    %ecx
		mov    %ebx,0x28(%esp)
		mov    %ecx,0x2c(%esp)
		cmp    $0x4,%ecx
		jge    jump_8500e
	jump_84d46:
		mov    0x1c(%esp),%eax
		mov    0x2c(%esp),%cl
		mov    $0x1,%esi
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx
		xor    %ebx,%ebx
		add    %edx,%eax
		shl    %cl,%esi
		mov    0xf(%eax),%bl
		test   %esi,%ebx
		je     jump_84d29
		add    0x28(%esp),%eax
		mov    0x4(%eax),%ebx
		sar    $0x10,%ebx
		cmp    $0xffffffff,%ebx
		je     jump_84d29
		mov    tag_current,%cl
		cmp    routeTags(%ebx),%cl
		je     jump_84d29
		mov    %ebx,%esi
		shl    $0x4,%esi
		xor    %eax,%eax
		mov    (%edx,%esi,1),%ax
		lea    0x0(,%eax,8),%edx
		mov    EXPORT_SYMBOL(triangulation)+0x38,%eax
		mov    tree_Ax8,%edi
		add    %edx,%eax
		sar    $0x8,%edi
		mov    (%eax),%ecx
		mov    %edi,%eax
		mov    tree_Ay8,%ebp
		sub    %ecx,%eax
		mov    %ebx,0x24(%esp)
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ecx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		sar    $0x8,%ebp
		mov    (%esi,%eax,1),%ax
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		mov    0x4(%eax),%esi
		mov    %ebp,%eax
		sub    %esi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%ecx
		jle    jump_84dec
		sar    %eax
		jmp    jump_84dee
	jump_84dec:
		sar    %ecx
	jump_84dee:
		add    %eax,%ecx
		mov    0x24(%esp),%eax
		shl    $0x4,%eax
		mov    %eax,0x4(%esp)
		mov    0x4(%esp),%edx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %edx,%eax
		mov    0x2(%eax),%ax
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		mov    (%eax),%esi
		mov    %edi,%eax
		sub    %esi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    0x4(%esp),%edx
		mov    %eax,%esi
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %edx,%eax
		mov    0x2(%eax),%ax
		and    $0xffff,%eax
		shl    $0x3,%eax
		mov    %eax,0x4(%esp)
		mov    0x4(%esp),%edx
		mov    EXPORT_SYMBOL(triangulation)+0x38,%eax
		add    %edx,%eax
		mov    %ebp,%edx
		sub    0x4(%eax),%edx
		mov    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%esi
		jle    jump_84e61
		sar    %eax
		jmp    jump_84e63
	jump_84e61:
		sar    %esi
	jump_84e63:
		add    %esi,%eax
		cmp    %ecx,%eax
		jge    jump_84e6b
		mov    %eax,%ecx
	jump_84e6b:
		mov    0x24(%esp),%eax
		shl    $0x4,%eax
		mov    %eax,0x4(%esp)
		mov    0x4(%esp),%esi
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %esi,%eax
		mov    0x4(%eax),%ax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx
		and    $0xffff,%eax
		mov    (%edx,%eax,8),%esi
		mov    %edi,%eax
		sub    %esi,%eax
		mov    0x4(%esp),%edi
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%esi
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %edi,%eax
		mov    0x4(%eax),%ax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx
		and    $0xffff,%eax
		mov    0x4(%edx,%eax,8),%edi
		mov    %ebp,%eax
		sub    %edi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%esi
		jle    jump_84ecd
		sar    %eax
		jmp    jump_84ecf
	jump_84ecd:
		sar    %esi
	jump_84ecf:
		add    %esi,%eax
		cmp    %ecx,%eax
		jge    jump_84ed7
		mov    %eax,%ecx
	jump_84ed7:
		mov    tag_current,%dl
		mov    heap_end,%ebp
		mov    %dl,routeTags(%ebx)
		mov    0x20(%esp),%edx
		mov    %ecx,tree_val(,%ebx,4)
		mov    %edx,tree_dad(,%ebx,4)
		cmp    $0x100,%ebp
		jge    jump_84f0b
		lea    0x1(%ebp),%eax
		mov    %eax,heap_end
	jump_84f0b:
		mov    heap_end,%eax
		mov    %ebx,heap(,%eax,4)
		cmp    $0x1,%eax
		je     jump_84d29
		test   $0x1,%al
		jne    jump_84f6c
		mov    %eax,%ebx
		sar    %ebx
		shl    $0x2,%eax
		lea    0x0(,%ebx,4),%edx
		mov    heap(%eax),%esi
		mov    heap(%edx),%ecx
		mov    tree_val(,%esi,4),%edi
		cmp    tree_val(,%ecx,4),%edi
		jg     jump_84d29
		mov    heap(%eax),%ecx
		mov    heap(%edx),%esi
		mov    %ecx,heap(%edx)
		mov    %esi,heap(%eax)
		mov    %ebx,%eax
	jump_84f6c:
		mov    $0x1,%ebp
	jump_84f71:
		cmp    $0x1,%eax
		je     jump_84d29
		mov    %eax,%edx
		sar    %edx
		mov    heap(,%eax,4),%esi
		mov    %edx,0x8(%esp)
		mov    %eax,%edx
		shl    $0x2,%esi
		xor    %ebp,%edx
		mov    tree_val(%esi),%edi
		mov    heap(,%edx,4),%ecx
		mov    0x8(%esp),%ebx
		shl    $0x2,%ecx
		shl    $0x2,%ebx
		cmp    tree_val(%ecx),%edi
		jge    jump_84fc6
		mov    heap(%ebx),%ebx
		cmp    tree_val(,%ebx,4),%edi
		jl     jump_84fc2
		mov    0x8(%esp),%eax
	jump_84fc2:
		mov    %eax,%edx
		jmp    jump_84fdf
	jump_84fc6:
		mov    heap(%ebx),%eax
		mov    tree_val(%ecx),%ebx
		cmp    tree_val(,%eax,4),%ebx
		jl     jump_84fdf
		mov    0x8(%esp),%edx
	jump_84fdf:
		mov    0x8(%esp),%edi
		cmp    %edi,%edx
		je     jump_84d29
		mov    heap(,%edx,4),%ecx
		mov    heap(,%edi,4),%esi
		mov    %ecx,heap(,%edi,4)
		mov    %edi,%eax
		mov    %esi,heap(,%edx,4)
		jmp    jump_84f71
	jump_8500e:
		mov    0x18(%esp),%edi
		cmp    $0xffffffff,%edi
		je     jump_84ab3
		mov    $0xffffffff,%ebp
		mov    %edi,0x20(%esp)
		mov    %ebp,0x18(%esp)
		jmp    jump_84d10
	jump_8502d:
		mov    data_1c30c0,%edi
		cmp    $0xffffffff,%edi
		jne    jump_8503c
		mov    %edi,%eax
		jmp    jump_8505f
	jump_8503c:
		mov    0x14(%esp),%edx
		mov    0xc(%esp),%eax
		mov    0x10(%esp),%ebp
		xor    %ebx,%ebx
		jmp    jump_85057
	jump_8504c:
		add    $0x4,%eax
		inc    %ebx
		mov    tree_dad(,%edx,4),%edx
	jump_85057:
		mov    %edx,(%eax)
		cmp    %ebp,%edx
		jne    jump_8504c
		mov    %ebx,%eax
	jump_8505f:
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
triangle_route_do_unkn6:	/* 0x085068 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x30,%esp
		mov    %eax,0x14(%esp)
		mov    %edx,0x10(%esp)
		mov    %ebx,0xc(%esp)
		mov    tag_current,%ah
		mov    $0xffffffff,%edx
		inc    %ah
		xor    %ebx,%ebx
		mov    %ah,tag_current
		xor    %eax,%eax
		mov    %edx,data_1c30c0
		mov    tag_current,%al
		mov    %ebx,heap_end
		test   %eax,%eax
		jne    jump_850be
		mov    $0x1f40,%ebx
		mov    $routeTags,%eax
		xor    %edx,%edx
		call   ac_memset
		movb   $0x1,tag_current
	jump_850be:
		mov    0x10(%esp),%eax
		mov    $0x1,%ecx
		mov    %eax,%edx
		mov    %ecx,tree_val(,%eax,4)
		mov    %eax,tree_dad(,%eax,4)
		mov    tag_current,%al
		mov    heap_end,%esi
		mov    %al,routeTags(%edx)
		cmp    $0x100,%esi
		jge    jump_850f9
		lea    (%esi,%ecx,1),%edi
		mov    %edi,heap_end
	jump_850f9:
		mov    heap_end,%eax
		mov    %edx,heap(,%eax,4)
		cmp    $0x1,%eax
		je     jump_851f7
		test   $0x1,%al
		jne    jump_8515a
		mov    %eax,%ebx
		sar    %ebx
		shl    $0x2,%eax
		lea    0x0(,%ebx,4),%edx
		mov    heap(%eax),%esi
		mov    heap(%edx),%ecx
		mov    tree_val(,%esi,4),%ebp
		cmp    tree_val(,%ecx,4),%ebp
		jg     jump_851f7
		mov    heap(%eax),%ecx
		mov    heap(%edx),%esi
		mov    %ecx,heap(%edx)
		mov    %esi,heap(%eax)
		mov    %ebx,%eax
	jump_8515a:
		mov    $0x1,%ebp
	jump_8515f:
		cmp    $0x1,%eax
		je     jump_851f7
		mov    %eax,%edx
		mov    %eax,%esi
		mov    heap(,%eax,4),%ecx
		sar    %edx
		shl    $0x2,%ecx
		xor    %ebp,%esi
		mov    %edx,(%esp)
		mov    tree_val(%ecx),%edi
		mov    heap(,%esi,4),%edx
		mov    (%esp),%ebx
		shl    $0x2,%edx
		shl    $0x2,%ebx
		cmp    tree_val(%edx),%edi
		jge    jump_851b1
		mov    heap(%ebx),%edx
		cmp    tree_val(,%edx,4),%edi
		jl     jump_851ad
		mov    (%esp),%eax
	jump_851ad:
		mov    %eax,%edx
		jmp    jump_851cd
	jump_851b1:
		mov    heap(%ebx),%eax
		mov    tree_val(%edx),%edx
		cmp    tree_val(,%eax,4),%edx
		jge    jump_851ca
		mov    %esi,%edx
		jmp    jump_851cd
	jump_851ca:
		mov    (%esp),%edx
	jump_851cd:
		mov    (%esp),%esi
		cmp    %esi,%edx
		je     jump_851f7
		mov    %esi,%eax
		mov    heap(,%edx,4),%ecx
		mov    heap(,%esi,4),%esi
		mov    %ecx,heap(,%eax,4)
		mov    %esi,heap(,%edx,4)
		jmp    jump_8515f
	jump_851f7:
		mov    0x14(%esp),%edi
		mov    data_1c30c0,%eax
		cmp    %edi,%eax
		je     jump_85771
		cmp    $0xffffffff,%eax
		je     jump_85771
		mov    heap_end,%edx
		mov    %eax,0x20(%esp)
		mov    $0x1,%eax
		mov    heap(,%edx,4),%ebx
		mov    %edx,%ecx
		mov    %ebx,data_1c30c0
		mov    $0xffffffff,%ebx
		sub    %eax,%ecx
		mov    %ecx,heap_end
		mov    %ebx,heap(,%edx,4)
		je     jump_85322
	jump_85249:
		lea    0x0(,%eax,2),%ebx
		mov    %ebx,%edx
		mov    heap_end,%edi
		xor    $0x1,%dl
		lea    0x0(,%eax,4),%ecx
		cmp    %edi,%edx
		jg     jump_852e3
		mov    heap(%ecx),%ecx
		lea    0x0(,%edx,4),%edi
		shl    $0x2,%ecx
		mov    heap(,%eax,8),%esi
		mov    tree_val(%ecx),%ebp
		shl    $0x2,%esi
		cmp    tree_val(%esi),%ebp
		jge    jump_852a5
		mov    heap(%edi),%esi
		cmp    tree_val(,%esi,4),%ebp
		jge    jump_852bc
		mov    %eax,%edx
		jmp    jump_852bc
	jump_852a5:
		mov    heap(%edi),%edi
		mov    tree_val(%esi),%ecx
		cmp    tree_val(,%edi,4),%ecx
		jge    jump_852bc
		mov    %ebx,%edx
	jump_852bc:
		cmp    %eax,%edx
		je     jump_85322
		mov    heap(,%edx,4),%ecx
		mov    heap(,%eax,4),%esi
		mov    %ecx,heap(,%eax,4)
		mov    %edx,%eax
		mov    %esi,heap(,%edx,4)
		jmp    jump_85249
	jump_852e3:
		cmp    %edi,%eax
		je     jump_85322
		lea    0x0(,%edi,4),%eax
		mov    heap(%ecx),%edx
		mov    heap(%eax),%ebx
		mov    tree_val(,%edx,4),%edx
		cmp    tree_val(,%ebx,4),%edx
		jl     jump_85322
		mov    heap(%eax),%edx
		mov    heap(%ecx),%ebx
		mov    %edx,heap(%ecx)
		mov    %ebx,heap(%eax)
	jump_85322:
		mov    data_1c30c0,%esi
		cmp    $0xffffffff,%esi
		je     jump_85450
		mov    0x14(%esp),%ebp
		mov    %esi,0x18(%esp)
		cmp    %ebp,%esi
		je     jump_85771
		mov    heap_end,%edx
		mov    $0x1,%eax
		mov    heap(,%edx,4),%ebx
		mov    %edx,%ecx
		mov    %ebx,data_1c30c0
		mov    $0xffffffff,%ebx
		sub    %eax,%ecx
		mov    %ecx,heap_end
		mov    %ebx,heap(,%edx,4)
		je     jump_85454
	jump_85375:
		lea    0x0(,%eax,2),%esi
		mov    %esi,%edx
		mov    heap_end,%ebp
		xor    $0x1,%dl
		lea    0x0(,%eax,4),%edi
		cmp    %ebp,%edx
		jg     jump_8540f
		mov    heap(%edi),%edi
		lea    0x0(,%edx,4),%ebx
		shl    $0x2,%edi
		mov    heap(,%eax,8),%ecx
		mov    tree_val(%edi),%ebp
		shl    $0x2,%ecx
		cmp    tree_val(%ecx),%ebp
		jge    jump_853d1
		mov    heap(%ebx),%ebx
		cmp    tree_val(,%ebx,4),%ebp
		jge    jump_853e8
		mov    %eax,%edx
		jmp    jump_853e8
	jump_853d1:
		mov    heap(%ebx),%edi
		mov    tree_val(%ecx),%ebx
		cmp    tree_val(,%edi,4),%ebx
		jge    jump_853e8
		mov    %esi,%edx
	jump_853e8:
		cmp    %eax,%edx
		je     jump_85454
		mov    heap(,%edx,4),%ecx
		mov    heap(,%eax,4),%esi
		mov    %ecx,heap(,%eax,4)
		mov    %edx,%eax
		mov    %esi,heap(,%edx,4)
		jmp    jump_85375
	jump_8540f:
		cmp    %ebp,%eax
		je     jump_85454
		lea    0x0(,%ebp,4),%eax
		mov    heap(%edi),%edx
		mov    heap(%eax),%ebx
		mov    tree_val(,%edx,4),%edx
		cmp    tree_val(,%ebx,4),%edx
		jl     jump_85454
		mov    heap(%eax),%edx
		mov    heap(%edi),%ebx
		mov    %edx,heap(%edi)
		mov    %ebx,heap(%eax)
		jmp    jump_85454
	jump_85450:
		mov    %esi,0x18(%esp)
	jump_85454:
		xor    %eax,%eax
		mov    %eax,0x2c(%esp)
		mov    0x20(%esp),%eax
		xor    %edx,%edx
		shl    $0x4,%eax
		mov    %edx,0x28(%esp)
		mov    %eax,0x1c(%esp)
		jmp    jump_8548a
	jump_8546d:
		mov    0x28(%esp),%ebx
		mov    0x2c(%esp),%ecx
		add    $0x2,%ebx
		inc    %ecx
		mov    %ebx,0x28(%esp)
		mov    %ecx,0x2c(%esp)
		cmp    $0x4,%ecx
		jge    jump_85752
	jump_8548a:
		mov    0x1c(%esp),%eax
		mov    0x2c(%esp),%cl
		mov    $0x1,%esi
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx
		xor    %ebx,%ebx
		add    %edx,%eax
		shl    %cl,%esi
		mov    0xf(%eax),%bl
		test   %esi,%ebx
		je     jump_8546d
		add    0x28(%esp),%eax
		mov    0x4(%eax),%ebx
		sar    $0x10,%ebx
		cmp    $0xffffffff,%ebx
		je     jump_8546d
		mov    tag_current,%cl
		cmp    routeTags(%ebx),%cl
		je     jump_8546d
		mov    %ebx,%esi
		shl    $0x4,%esi
		xor    %eax,%eax
		mov    (%edx,%esi,1),%ax
		lea    0x0(,%eax,8),%edx
		mov    EXPORT_SYMBOL(triangulation)+0x38,%eax
		mov    tree_Ax8,%edi
		add    %edx,%eax
		sar    $0x8,%edi
		mov    (%eax),%ecx
		mov    %edi,%eax
		mov    tree_Ay8,%ebp
		sub    %ecx,%eax
		mov    %ebx,0x24(%esp)
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ecx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		sar    $0x8,%ebp
		mov    (%esi,%eax,1),%ax
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		mov    0x4(%eax),%esi
		mov    %ebp,%eax
		sub    %esi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%ecx
		jle    jump_85530
		sar    %eax
		jmp    jump_85532
	jump_85530:
		sar    %ecx
	jump_85532:
		add    %eax,%ecx
		mov    0x24(%esp),%eax
		shl    $0x4,%eax
		mov    %eax,0x4(%esp)
		mov    0x4(%esp),%edx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %edx,%eax
		mov    0x2(%eax),%ax
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		mov    (%eax),%esi
		mov    %edi,%eax
		sub    %esi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    0x4(%esp),%edx
		mov    %eax,%esi
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %edx,%eax
		mov    0x2(%eax),%ax
		and    $0xffff,%eax
		shl    $0x3,%eax
		mov    %eax,0x4(%esp)
		mov    0x4(%esp),%edx
		mov    EXPORT_SYMBOL(triangulation)+0x38,%eax
		add    %edx,%eax
		mov    %ebp,%edx
		sub    0x4(%eax),%edx
		mov    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%esi
		jle    jump_855a5
		sar    %eax
		jmp    jump_855a7
	jump_855a5:
		sar    %esi
	jump_855a7:
		add    %esi,%eax
		cmp    %ecx,%eax
		jge    jump_855af
		mov    %eax,%ecx
	jump_855af:
		mov    0x24(%esp),%eax
		shl    $0x4,%eax
		mov    %eax,0x4(%esp)
		mov    0x4(%esp),%esi
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %esi,%eax
		mov    0x4(%eax),%ax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx
		and    $0xffff,%eax
		mov    (%edx,%eax,8),%esi
		mov    %edi,%eax
		sub    %esi,%eax
		mov    0x4(%esp),%edi
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%esi
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %edi,%eax
		mov    0x4(%eax),%ax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx
		and    $0xffff,%eax
		mov    0x4(%edx,%eax,8),%edi
		mov    %ebp,%eax
		sub    %edi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%esi
		jle    jump_85611
		sar    %eax
		jmp    jump_85613
	jump_85611:
		sar    %esi
	jump_85613:
		add    %esi,%eax
		cmp    %ecx,%eax
		jge    jump_8561b
		mov    %eax,%ecx
	jump_8561b:
		mov    tag_current,%dl
		mov    heap_end,%ebp
		mov    %dl,routeTags(%ebx)
		mov    0x20(%esp),%edx
		mov    %ecx,tree_val(,%ebx,4)
		mov    %edx,tree_dad(,%ebx,4)
		cmp    $0x100,%ebp
		jge    jump_8564f
		lea    0x1(%ebp),%eax
		mov    %eax,heap_end
	jump_8564f:
		mov    heap_end,%eax
		mov    %ebx,heap(,%eax,4)
		cmp    $0x1,%eax
		je     jump_8546d
		test   $0x1,%al
		jne    jump_856b0
		mov    %eax,%ebx
		sar    %ebx
		shl    $0x2,%eax
		lea    0x0(,%ebx,4),%edx
		mov    heap(%eax),%esi
		mov    heap(%edx),%ecx
		mov    tree_val(,%esi,4),%edi
		cmp    tree_val(,%ecx,4),%edi
		jg     jump_8546d
		mov    heap(%eax),%ecx
		mov    heap(%edx),%esi
		mov    %ecx,heap(%edx)
		mov    %esi,heap(%eax)
		mov    %ebx,%eax
	jump_856b0:
		mov    $0x1,%ebp
	jump_856b5:
		cmp    $0x1,%eax
		je     jump_8546d
		mov    %eax,%edx
		sar    %edx
		mov    heap(,%eax,4),%esi
		mov    %edx,0x8(%esp)
		mov    %eax,%edx
		shl    $0x2,%esi
		xor    %ebp,%edx
		mov    tree_val(%esi),%edi
		mov    heap(,%edx,4),%ecx
		mov    0x8(%esp),%ebx
		shl    $0x2,%ecx
		shl    $0x2,%ebx
		cmp    tree_val(%ecx),%edi
		jge    jump_8570a
		mov    heap(%ebx),%ebx
		cmp    tree_val(,%ebx,4),%edi
		jl     jump_85706
		mov    0x8(%esp),%eax
	jump_85706:
		mov    %eax,%edx
		jmp    jump_85723
	jump_8570a:
		mov    heap(%ebx),%eax
		mov    tree_val(%ecx),%ebx
		cmp    tree_val(,%eax,4),%ebx
		jl     jump_85723
		mov    0x8(%esp),%edx
	jump_85723:
		mov    0x8(%esp),%edi
		cmp    %edi,%edx
		je     jump_8546d
		mov    heap(,%edx,4),%ecx
		mov    heap(,%edi,4),%esi
		mov    %ecx,heap(,%edi,4)
		mov    %edi,%eax
		mov    %esi,heap(,%edx,4)
		jmp    jump_856b5
	jump_85752:
		mov    0x18(%esp),%edi
		cmp    $0xffffffff,%edi
		je     jump_851f7
		mov    $0xffffffff,%ebp
		mov    %edi,0x20(%esp)
		mov    %ebp,0x18(%esp)
		jmp    jump_85454
	jump_85771:
		mov    data_1c30c0,%edi
		cmp    $0xffffffff,%edi
		jne    jump_85780
		mov    %edi,%eax
		jmp    jump_857a3
	jump_85780:
		mov    0x14(%esp),%edx
		mov    0xc(%esp),%eax
		mov    0x10(%esp),%ebp
		xor    %ebx,%ebx
		jmp    jump_8579b
	jump_85790:
		add    $0x4,%eax
		inc    %ebx
		mov    tree_dad(,%edx,4),%edx
	jump_8579b:
		mov    %edx,(%eax)
		cmp    %ebp,%edx
		jne    jump_85790
		mov    %ebx,%eax
	jump_857a3:
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
triangle_route_do_unkn7:	/* 0x0857AC */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x38,%esp
		mov    %eax,0x34(%esp)
		mov    %edx,0x10(%esp)
		mov    %ebx,0xc(%esp)
		mov    $0xffffffff,%ebx
		mov    tag_current,%ah
		xor    %edx,%edx
		inc    %ah
		mov    %edx,0x30(%esp)
		mov    %ah,tag_current
		xor    %eax,%eax
		mov    %ebx,data_1c30c0
		mov    tag_current,%al
		mov    %edx,heap_end
		test   %eax,%eax
		jne    jump_85804
		mov    $0x1f40,%ebx
		mov    $routeTags,%eax
		call   ac_memset
		movb   $0x1,tag_current
	jump_85804:
		mov    0x10(%esp),%eax
		mov    $0x1,%esi
		mov    %eax,%edx
		mov    %esi,tree_val(,%eax,4)
		mov    %eax,tree_dad(,%eax,4)
		mov    tag_current,%al
		mov    heap_end,%edi
		mov    %al,routeTags(%edx)
		cmp    $0x100,%edi
		jge    jump_8583f
		lea    (%edi,%esi,1),%ebp
		mov    %ebp,heap_end
	jump_8583f:
		mov    heap_end,%eax
		mov    %edx,heap(,%eax,4)
		cmp    $0x1,%eax
		je     jump_85939
		test   $0x1,%al
		jne    jump_858a0
		mov    %eax,%ebx
		sar    %ebx
		shl    $0x2,%eax
		lea    0x0(,%ebx,4),%edx
		mov    heap(%eax),%esi
		mov    heap(%edx),%ecx
		mov    tree_val(,%esi,4),%edi
		cmp    tree_val(,%ecx,4),%edi
		jg     jump_85939
		mov    heap(%eax),%ecx
		mov    heap(%edx),%esi
		mov    %ecx,heap(%edx)
		mov    %esi,heap(%eax)
		mov    %ebx,%eax
	jump_858a0:
		mov    $0x1,%ebp
	jump_858a5:
		cmp    $0x1,%eax
		je     jump_85939
		mov    %eax,%edx
		sar    %edx
		mov    heap(,%eax,4),%ebx
		mov    %edx,(%esp)
		mov    %eax,%edx
		shl    $0x2,%ebx
		xor    %ebp,%edx
		mov    tree_val(%ebx),%edi
		mov    heap(,%edx,4),%esi
		mov    (%esp),%ecx
		shl    $0x2,%esi
		shl    $0x2,%ecx
		cmp    tree_val(%esi),%edi
		jge    jump_858f7
		mov    heap(%ecx),%edx
		cmp    tree_val(,%edx,4),%edi
		jl     jump_858f3
		mov    (%esp),%eax
	jump_858f3:
		mov    %eax,%edx
		jmp    jump_8590f
	jump_858f7:
		mov    heap(%ecx),%ebx
		mov    tree_val(%esi),%eax
		cmp    tree_val(,%ebx,4),%eax
		jl     jump_8590f
		mov    (%esp),%edx
	jump_8590f:
		mov    (%esp),%edi
		cmp    %edi,%edx
		je     jump_85939
		mov    heap(,%edx,4),%esi
		mov    heap(,%edi,4),%ecx
		mov    %esi,heap(,%edi,4)
		mov    %edi,%eax
		mov    %ecx,heap(,%edx,4)
		jmp    jump_858a5
	jump_85939:
		mov    0x34(%esp),%eax
		shl    $0x2,%eax
		mov    %eax,0x2c(%esp)
	jump_85944:
		mov    data_1c30c0,%ebp
		cmp    $0xffffffff,%ebp
		je     jump_85edc
		mov    0x34(%esp),%edx
		cmp    %edx,%ebp
		jne    jump_85aaa
		cmpl   $0x0,0x30(%esp)
		jne    jump_85edc
		mov    0x2c(%esp),%eax
		mov    tree_dad(%eax),%eax
		mov    %eax,0x28(%esp)
		mov    tag_current,%al
		mov    $0x1e,%esi
		inc    %al
		mov    $0xffffffff,%edi
		mov    %al,routeTags(%edx)
		mov    heap_end,%edx
		mov    %esi,0x30(%esp)
		mov    $0x1,%eax
		mov    heap(,%edx,4),%ebx
		mov    %edx,%ebp
		mov    %ebx,data_1c30c0
		sub    %eax,%ebp
		mov    %ebp,heap_end
		mov    %edi,heap(,%edx,4)
		je     jump_85944
	jump_859be:
		lea    0x0(,%eax,2),%ecx
		mov    %ecx,%edx
		mov    heap_end,%edi
		xor    $0x1,%dl
		lea    0x0(,%eax,4),%ebx
		cmp    %edi,%edx
		jg     jump_85a5e
		mov    heap(%ebx),%ebx
		lea    0x0(,%edx,4),%esi
		shl    $0x2,%ebx
		mov    heap(,%eax,8),%edi
		mov    tree_val(%ebx),%ebp
		shl    $0x2,%edi
		cmp    tree_val(%edi),%ebp
		jge    jump_85a1c
		mov    heap(%esi),%ecx
		mov    %ebp,%ebx
		cmp    tree_val(,%ecx,4),%ebx
		jge    jump_85a33
		mov    %eax,%edx
		jmp    jump_85a33
	jump_85a1c:
		mov    heap(%esi),%esi
		mov    tree_val(%edi),%ebx
		cmp    tree_val(,%esi,4),%ebx
		jge    jump_85a33
		mov    %ecx,%edx
	jump_85a33:
		cmp    %eax,%edx
		je     jump_85944
		mov    heap(,%edx,4),%ecx
		mov    heap(,%eax,4),%esi
		mov    %ecx,heap(,%eax,4)
		mov    %edx,%eax
		mov    %esi,heap(,%edx,4)
		jmp    jump_859be
	jump_85a5e:
		cmp    %edi,%eax
		je     jump_85944
		lea    0x0(,%edi,4),%eax
		mov    heap(%ebx),%edx
		mov    heap(%eax),%ecx
		mov    tree_val(,%edx,4),%edx
		cmp    tree_val(,%ecx,4),%edx
		jl     jump_85944
		mov    heap(%eax),%edx
		mov    heap(%ebx),%ecx
		mov    %edx,heap(%ebx)
		mov    %ecx,heap(%eax)
		jmp    jump_85944
	jump_85aaa:
		mov    0x30(%esp),%ebx
		cmp    $0x1,%ebx
		jle    jump_85ad2
		lea    -0x1(%ebx),%ecx
		mov    %ecx,0x30(%esp)
		cmp    $0x1,%ecx
		jne    jump_85ad2
		mov    0x2c(%esp),%edx
		mov    0x28(%esp),%eax
		mov    %eax,tree_dad(%edx)
		jmp    jump_85edc
	jump_85ad2:
		mov    data_1c30c0,%eax
		mov    heap_end,%edx
		mov    $0xffffffff,%edi
		mov    %eax,0x18(%esp)
		mov    heap(,%edx,4),%ebx
		mov    %edx,%ebp
		mov    %ebx,data_1c30c0
		mov    $0x1,%eax
		mov    %edi,heap(,%edx,4)
		sub    %eax,%ebp
		mov    %ebp,heap_end
		je     jump_85be8
	jump_85b0f:
		lea    0x0(,%eax,2),%ebx
		mov    %ebx,%edx
		mov    heap_end,%esi
		xor    $0x1,%dl
		lea    0x0(,%eax,4),%ecx
		cmp    %esi,%edx
		jg     jump_85ba9
		mov    heap(%ecx),%ecx
		lea    0x0(,%edx,4),%edi
		shl    $0x2,%ecx
		mov    heap(,%eax,8),%esi
		mov    tree_val(%ecx),%ebp
		shl    $0x2,%esi
		cmp    tree_val(%esi),%ebp
		jge    jump_85b6b
		mov    heap(%edi),%esi
		cmp    tree_val(,%esi,4),%ebp
		jge    jump_85b82
		mov    %eax,%edx
		jmp    jump_85b82
	jump_85b6b:
		mov    heap(%edi),%edi
		mov    tree_val(%esi),%ecx
		cmp    tree_val(,%edi,4),%ecx
		jge    jump_85b82
		mov    %ebx,%edx
	jump_85b82:
		cmp    %eax,%edx
		je     jump_85be8
		mov    heap(,%edx,4),%ecx
		mov    heap(,%eax,4),%esi
		mov    %ecx,heap(,%eax,4)
		mov    %edx,%eax
		mov    %esi,heap(,%edx,4)
		jmp    jump_85b0f
	jump_85ba9:
		cmp    %esi,%eax
		je     jump_85be8
		lea    0x0(,%esi,4),%eax
		mov    heap(%ecx),%edx
		mov    heap(%eax),%ebx
		mov    tree_val(,%edx,4),%edx
		cmp    tree_val(,%ebx,4),%edx
		jl     jump_85be8
		mov    heap(%eax),%edx
		mov    heap(%ecx),%ebx
		mov    %edx,heap(%ecx)
		mov    %ebx,heap(%eax)
	jump_85be8:
		xor    %ebp,%ebp
		mov    0x18(%esp),%eax
		mov    %ebp,0x24(%esp)
		shl    $0x4,%eax
		mov    %ebp,0x20(%esp)
		mov    %eax,0x14(%esp)
		jmp    jump_85c1c
	jump_85bff:
		mov    0x20(%esp),%eax
		mov    0x24(%esp),%edx
		add    $0x2,%eax
		inc    %edx
		mov    %eax,0x20(%esp)
		mov    %edx,0x24(%esp)
		cmp    $0x4,%edx
		jge    jump_85944
	jump_85c1c:
		mov    0x14(%esp),%edx
		mov    0x24(%esp),%cl
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		mov    $0x1,%ebx
		add    %eax,%edx
		shl    %cl,%ebx
		movzbl 0xf(%edx),%esi
		test   %ebx,%esi
		je     jump_85bff
		add    0x20(%esp),%edx
		mov    0x4(%edx),%ebx
		sar    $0x10,%ebx
		cmp    $0xffffffff,%ebx
		je     jump_85bff
		mov    routeTags(%ebx),%dl
		cmp    tag_current,%dl
		je     jump_85bff
		mov    tree_Ax8,%ebp
		mov    tree_Ay8,%edi
		mov    %ebx,0x1c(%esp)
		mov    %ebx,%esi
		sar    $0x8,%ebp
		shl    $0x4,%esi
		sar    $0x8,%edi
		mov    (%esi,%eax,1),%ax
		and    $0xffff,%eax
		lea    0x0(,%eax,8),%edx
		mov    EXPORT_SYMBOL(triangulation)+0x38,%eax
		add    %edx,%eax
		mov    (%eax),%ecx
		mov    %ebp,%eax
		sub    %ecx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ecx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		mov    (%esi,%eax,1),%ax
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		mov    0x4(%eax),%esi
		mov    %edi,%eax
		sub    %esi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%ecx
		jle    jump_85cc3
		sar    %eax
		jmp    jump_85cc5
	jump_85cc3:
		sar    %ecx
	jump_85cc5:
		add    %eax,%ecx
		mov    0x1c(%esp),%eax
		shl    $0x4,%eax
		mov    %eax,0x4(%esp)
		mov    0x4(%esp),%edx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %edx,%eax
		mov    0x2(%eax),%ax
		and    $0xffff,%eax
		lea    0x0(,%eax,8),%edx
		mov    EXPORT_SYMBOL(triangulation)+0x38,%eax
		add    %edx,%eax
		mov    (%eax),%esi
		mov    %ebp,%eax
		sub    %esi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    0x4(%esp),%edx
		mov    %eax,%esi
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %edx,%eax
		mov    0x2(%eax),%ax
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		mov    %edi,%edx
		sub    0x4(%eax),%edx
		mov    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%esi
		jle    jump_85d34
		sar    %eax
		jmp    jump_85d36
	jump_85d34:
		sar    %esi
	jump_85d36:
		add    %esi,%eax
		cmp    %ecx,%eax
		jge    jump_85d3e
		mov    %eax,%ecx
	jump_85d3e:
		mov    0x1c(%esp),%eax
		shl    $0x4,%eax
		mov    %eax,0x4(%esp)
		mov    0x4(%esp),%esi
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %esi,%eax
		mov    0x4(%eax),%ax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx
		and    $0xffff,%eax
		mov    (%edx,%eax,8),%esi
		mov    %ebp,%eax
		sub    %esi,%eax
		mov    0x4(%esp),%ebp
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%esi
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %ebp,%eax
		mov    0x4(%eax),%ax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx
		and    $0xffff,%eax
		mov    0x4(%edx,%eax,8),%ebp
		mov    %edi,%eax
		sub    %ebp,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%esi
		jle    jump_85da0
		sar    %eax
		jmp    jump_85da2
	jump_85da0:
		sar    %esi
	jump_85da2:
		add    %esi,%eax
		cmp    %ecx,%eax
		jge    jump_85daa
		mov    %eax,%ecx
	jump_85daa:
		mov    tag_current,%dl
		mov    heap_end,%eax
		mov    %dl,routeTags(%ebx)
		mov    0x18(%esp),%edx
		mov    %ecx,tree_val(,%ebx,4)
		mov    %edx,tree_dad(,%ebx,4)
		cmp    $0x100,%eax
		jge    jump_85ddd
		lea    0x1(%eax),%edx
		mov    %edx,heap_end
	jump_85ddd:
		mov    heap_end,%eax
		mov    %ebx,heap(,%eax,4)
		cmp    $0x1,%eax
		je     jump_85bff
		test   $0x1,%al
		jne    jump_85e3e
		mov    %eax,%ebx
		sar    %ebx
		shl    $0x2,%eax
		lea    0x0(,%ebx,4),%edx
		mov    heap(%eax),%esi
		mov    heap(%edx),%ecx
		mov    tree_val(,%esi,4),%edi
		cmp    tree_val(,%ecx,4),%edi
		jg     jump_85bff
		mov    heap(%eax),%ecx
		mov    heap(%edx),%esi
		mov    %ecx,heap(%edx)
		mov    %esi,heap(%eax)
		mov    %ebx,%eax
	jump_85e3e:
		cmp    $0x1,%eax
		je     jump_85bff
		mov    %eax,%edx
		mov    %eax,%ecx
		sar    %edx
		xor    $0x1,%cl
		mov    %edx,0x8(%esp)
		mov    heap(,%ecx,4),%ebx
		mov    0x8(%esp),%esi
		mov    heap(,%eax,4),%edx
		shl    $0x2,%ebx
		shl    $0x2,%edx
		mov    tree_val(%ebx),%ebp
		mov    tree_val(%edx),%edi
		shl    $0x2,%esi
		cmp    %ebp,%edi
		jge    jump_85e96
		mov    heap(%esi),%ebx
		cmp    tree_val(,%ebx,4),%edi
		jl     jump_85e92
		mov    0x8(%esp),%eax
	jump_85e92:
		mov    %eax,%edx
		jmp    jump_85ead
	jump_85e96:
		mov    heap(%esi),%edx
		cmp    tree_val(,%edx,4),%ebp
		jge    jump_85ea9
		mov    %ecx,%edx
		jmp    jump_85ead
	jump_85ea9:
		mov    0x8(%esp),%edx
	jump_85ead:
		mov    0x8(%esp),%esi
		cmp    %esi,%edx
		je     jump_85bff
		mov    %esi,%eax
		mov    heap(,%edx,4),%ecx
		mov    heap(,%esi,4),%esi
		mov    %ecx,heap(,%eax,4)
		mov    %esi,heap(,%edx,4)
		jmp    jump_85e3e
	jump_85edc:
		mov    data_1c30c0,%ecx
		cmp    $0xffffffff,%ecx
		jne    jump_85eeb
		mov    %ecx,%eax
		jmp    jump_85f0e
	jump_85eeb:
		mov    0x34(%esp),%eax
		mov    0xc(%esp),%edx
		mov    0x10(%esp),%esi
		xor    %ebx,%ebx
		jmp    jump_85f06
	jump_85efb:
		add    $0x4,%edx
		inc    %ebx
		mov    tree_dad(,%eax,4),%eax
	jump_85f06:
		mov    %eax,(%edx)
		cmp    %esi,%eax
		jne    jump_85efb
		mov    %ebx,%eax
	jump_85f0e:
		add    $0x38,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
ma_triangle_route_3:	/* 0x085F18 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x10,%esp
		mov    %eax,0x8(%esp)
		mov    %edx,%ebp
		mov    %ebx,%esi
		mov    %ecx,%edi
		mov    tree_Ax8,%ebx
		mov    tree_Bx8,%edx
		mov    tree_Ay8,%eax
		mov    %edx,tree_Ax8
		mov    %ebx,tree_Bx8
		mov    tree_By8,%edx
		mov    $route_bak,%ebx
		mov    %edx,tree_Ay8
		mov    %eax,tree_By8
		mov    0x8(%esp),%edx
		mov    %ebp,%eax
		call   triangle_route_do_unkn6
		mov    %eax,0xc(%esp)
		cmp    $0xffffffff,%eax
		jne    jump_85f7c
		movl   $0x7fffffff,0x4(%esp)
		jmp    jump_86061
	jump_85f7c:
		lea    0x4(%esp),%edx
		push   %edx
		push   $fwd_path
		push   %eax
		mov    tree_By8,%ecx
		mov    tree_Bx8,%ebx
		push   $route_bak
		mov    tree_Ay8,%edx
		mov    tree_Ax8,%eax
		call   route_to_path
		cmp    $0xffffffff,%eax
		je     jump_86061
		mov    tree_Ax8,%ebx
		mov    tree_Ay8,%edx
		mov    tree_Bx8,%eax
		mov    %edi,%ecx
		mov    %eax,tree_Ax8
		mov    %ebx,tree_Bx8
		mov    tree_By8,%eax
		mov    %esi,%ebx
		mov    %eax,tree_Ay8
		mov    %edx,tree_By8
		mov    0x8(%esp),%eax
		mov    %ebp,%edx
		call   triangle_route_do_unkn5
		mov    %eax,%edi
		cmp    $0xffffffff,%eax
		jne    jump_85ffc
		movl   $0x7fffffff,(%esp)
		jmp    jump_86027
	jump_85ffc:
		mov    %esp,%edx
		push   %edx
		push   $fwd_path
		push   %eax
		mov    tree_By8,%ecx
		mov    tree_Bx8,%ebx
		push   %esi
		mov    tree_Ay8,%edx
		mov    tree_Ax8,%eax
		call   route_to_path
		cmp    $0xffffffff,%eax
		je     jump_86061
	jump_86027:
		mov    (%esp),%eax
		cmp    0x4(%esp),%eax
		jge    jump_86039
		mov    %edi,%eax
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_86039:
		mov    0xc(%esp),%ecx
		test   %ecx,%ecx
		jl     jump_8605d
		mov    %esi,%edx
		lea    0x0(,%ecx,4),%eax
	jump_8604a:
		add    $0x4,%edx
		mov    route_bak(%eax),%ebx
		sub    $0x4,%eax
		mov    %ebx,-0x4(%edx)
		test   %eax,%eax
		jge    jump_8604a
	jump_8605d:
		mov    0xc(%esp),%eax
	jump_86061:
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
ma_triangle_route_4:	/* 0x086068 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    %eax,%esi
		mov    %ebx,%edi
		mov    %edx,%eax
		mov    tree_Ax8,%ebx
		mov    tree_Bx8,%edx
		mov    tree_Ay8,%ebp
		mov    %edx,tree_Ax8
		mov    %ebx,tree_Bx8
		mov    tree_By8,%edx
		mov    $route_bak,%ebx
		mov    %edx,tree_Ay8
		mov    %esi,%edx
		mov    %ebp,tree_By8
		call   triangle_route_do_unkn7
		mov    %eax,%esi
		mov    %eax,%ebp
		cmp    $0xffffffff,%eax
		je     jump_8613c
		mov    %esp,%eax
		push   %eax
		push   $fwd_path
		push   %esi
		mov    tree_By8,%ecx
		mov    tree_Bx8,%ebx
		push   $route_bak
		mov    tree_Ay8,%edx
		mov    tree_Ax8,%eax
		call   route_to_path
		cmp    $0xffffffff,%eax
		je     jump_8613c
		mov    tree_Ax8,%eax
		mov    tree_Bx8,%edx
		mov    tree_Ay8,%ebx
		mov    %edx,tree_Ax8
		mov    tree_By8,%edx
		mov    %eax,tree_Bx8
		mov    %edx,tree_Ay8
		mov    %ebx,tree_By8
		test   %esi,%esi
		jl     jump_8613a
		mov    %edi,%edx
		lea    0x0(,%esi,4),%eax
	jump_86127:
		add    $0x4,%edx
		mov    route_bak(%eax),%ebx
		sub    $0x4,%eax
		mov    %ebx,-0x4(%edx)
		test   %eax,%eax
		jge    jump_86127
	jump_8613a:
		mov    %ebp,%eax
	jump_8613c:
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_optimise_heuristic)	/* 0x8641c */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x18,%esp
		mov    %eax,%esi
		mov    %eax,%ebx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		shl    $0x4,%ebx
		lea    (%eax,%ebx,1),%ecx
		mov    0x4(%ecx,%edx,2),%edi
		sar    $0x10,%edi
		cmp    $0xffffffff,%edi
		je     jump_86618
		mov    %edi,%ebx
		shl    $0x4,%ebx
		add    %ebx,%eax
		mov    0x4(%eax),%ebx
		sar    $0x10,%ebx
		cmp    %esi,%ebx
		jne    jump_86458
		xor    %eax,%eax
		jmp    jump_8647f
	jump_86458:
		mov    0x6(%eax),%ebx
		sar    $0x10,%ebx
		cmp    %esi,%ebx
		jne    jump_86469
		mov    $0x1,%eax
		jmp    jump_8647f
	jump_86469:
		mov    0x8(%eax),%eax
		sar    $0x10,%eax
		cmp    %esi,%eax
		jne    jump_8647a
		mov    $0x2,%eax
		jmp    jump_8647f
	jump_8647a:
		mov    $0xffffffff,%eax
	jump_8647f:
		mov    %esi,%ebx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%esi
		shl    $0x4,%ebx
		shl    $0x4,%edi
		add    %esi,%ebx
		add    %edi,%esi
		mov    0xe(%ebx),%cl
		cmp    0xe(%esi),%cl
		jne    jump_86618
		mov    $0x1,%ebp
		mov    %dl,%cl
		movzbl 0xf(%ebx),%edi
		shl    %cl,%ebp
		test   %ebp,%edi
		je     jump_86618
		mov    $0x1,%ebp
		mov    %al,%cl
		movzbl 0xf(%esi),%edi
		shl    %cl,%ebp
		test   %ebp,%edi
		je     jump_86618
		mov    EXPORT_SYMBOL(MOD3)+8(,%eax,4),%eax
		mov    (%esi,%eax,2),%ax
		and    $0xffff,%eax
		lea    0x0(,%eax,8),%esi
		shl    $0x2,%edx
		mov    EXPORT_SYMBOL(triangulation)+0x38,%eax # triangulation[0].Points
		mov    %edx,(%esp)
		mov    EXPORT_SYMBOL(MOD3)+8(%edx),%edx
		mov    (%esi,%eax,1),%ebp
		mov    0x4(%esi,%eax,1),%ecx
		mov    (%ebx,%edx,2),%dx
		mov    %ecx,0x14(%esp)
		and    $0xffff,%edx
		mov    (%eax,%edx,8),%edi
		mov    0x4(%eax,%edx,8),%esi
		mov    (%esp),%edx
		mov    EXPORT_SYMBOL(MOD3)+4(%edx),%edx
		add    %edx,%edx
		mov    (%edx,%ebx,1),%dx
		and    $0xffff,%edx
		mov    (%eax,%edx,8),%ecx
		mov    0x4(%eax,%edx,8),%edx
		mov    %edx,0x8(%esp)
		mov    (%esp),%edx
		mov    EXPORT_SYMBOL(MOD3)+0(%edx),%edx
		add    %edx,%edx
		add    %edx,%ebx
		xor    %edx,%edx
		mov    (%ebx),%dx
		shl    $0x3,%edx
		add    %edx,%eax
		mov    %ecx,0x10(%esp)
		mov    (%eax),%edx
		mov    %ebp,%ecx
		mov    %edx,0xc(%esp)
		mov    0x4(%eax),%eax
		mov    0x14(%esp),%edx
		mov    %eax,0x4(%esp)
		mov    %eax,%ebx
		sub    %eax,%edx
		mov    0xc(%esp),%eax
		sub    %eax,%ecx
		sub    %edi,%eax
		sub    %esi,%ebx
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_8657f
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_8657f:
		movsbl %al,%eax
		test   %eax,%eax
		jge    jump_86618
		mov    0x14(%esp),%edx
		mov    0x8(%esp),%ebx
		mov    0x10(%esp),%eax
		mov    %ebp,%ecx
		sub    %ebx,%edx
		sub    %eax,%ecx
		sub    %esi,%ebx
		sub    %edi,%eax
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_865b8
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_865b8:
		movsbl %al,%eax
		test   %eax,%eax
		jle    jump_86618
		sub    %ebp,%edi
		imul   %edi,%edi
		mov    0x14(%esp),%edx
		sub    %edx,%esi
		imul   %esi,%esi
		mov    0xc(%esp),%eax
		mov    0x8(%esp),%ecx
		sub    %ebp,%eax
		sub    %edx,%ecx
		mov    %eax,0xc(%esp)
		mov    %edx,%eax
		mov    0x4(%esp),%edx
		mov    0x10(%esp),%ebx
		sub    %eax,%edx
		sub    %ebp,%ebx
		mov    %edx,0x4(%esp)
		mov    0xc(%esp),%edx
		sub    %ebx,%edx
		imul   %edx,%edx
		mov    0x4(%esp),%eax
		sub    %ecx,%eax
		imul   %eax,%eax
		mov    %ebx,0x10(%esp)
		add    %edi,%esi
		add    %edx,%eax
		mov    %ecx,0x8(%esp)
		cmp    %eax,%esi
		jge    jump_86618
		mov    $0x1,%eax
		jmp    jump_8661a
	jump_86618:
		xor    %eax,%eax
	jump_8661a:
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_delaunay_step)	/* 0x86624 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		incb   EXPORT_SYMBOL(tag_current)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(tag_current),%al
		test   %eax,%eax
		jne    jump_86653
		mov    $0x1f40,%ebx
		mov    $EXPORT_SYMBOL(routeTags),%eax
		xor    %edx,%edx
		call   ac_memset
		movb   $0x1,EXPORT_SYMBOL(tag_current)
	jump_86653:
		xor    %ebp,%ebp
	jump_86655:
		mov    EXPORT_SYMBOL(triangulation)+0x0C,%edx # triangulation[0].ix_Triangles
		mov    %ebp,%edi
		mov    %ebp,%ecx
		cmp    %edx,%ebp
		jge    jump_866b4
		mov    %ebp,%esi
	jump_86665:
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		mov    0xb(%esi,%eax,1),%eax
		sar    $0x18,%eax
		cmp    $0xffffffff,%eax
		jne    jump_8668e
	jump_86676:
		mov    EXPORT_SYMBOL(triangulation)+0x0C,%ebx # triangulation[0].ix_Triangles
		inc    %ecx
		add    $0x10,%esi
		cmp    %ebx,%ecx
		jge    jump_866b4
		jmp    jump_86665
	jump_86686:
		inc    %ebx
		cmp    $0x3,%ebx
		jl     jump_86690
		jmp    jump_86676
	jump_8668e:
		mov    %ebp,%ebx
	jump_86690:
		mov    %ebx,%edx
		mov    %ecx,%eax
		call   ac_optimise_heuristic
		test   %eax,%eax
		je     jump_86686
		mov    %ebx,%edx
		mov    %ecx,%eax
		call   ac_edge_rotateAC
		mov    EXPORT_SYMBOL(tag_current),%al
		inc    %edi
		mov    %al,EXPORT_SYMBOL(routeTags)(%ecx)
		jmp    jump_86676
	jump_866b4:
		test   %edi,%edi
		jne    jump_86655
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
fringe_scan:
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x10,%esp
		mov    EXPORT_SYMBOL(fringe_x2),%esi
		mov    %eax,0x4(%esp)
		mov    %edx,0x8(%esp)
		mov    %ebx,(%esp)
		mov    %ecx,%ebp
		mov    EXPORT_SYMBOL(fringe_x1),%eax
		mov    EXPORT_SYMBOL(fringe_y2),%ebx
		cmp    %esi,%eax
		jge    jump_8676e
	jump_8672c:
		mov    EXPORT_SYMBOL(fringe_y)(,%eax,4),%ecx
		lea    0x1(%eax),%edx
		cmp    %ebx,%ecx
		jl     jump_8673e
		mov    %edx,%eax
		jmp    jump_8676a
	jump_8673e:
		mov    %ecx,%ebx
		mov    %eax,%edi
		mov    %edx,%eax
		cmp    %esi,%edx
		jge    jump_86762
		shl    $0x2,%edx
		lea    0x0(,%esi,4),%ecx
	jump_86752:
		cmp    EXPORT_SYMBOL(fringe_y)(%edx),%ebx
		jne    jump_86762
		add    $0x4,%edx
		inc    %eax
		cmp    %ecx,%edx
		jl     jump_86752
	jump_86762:
		mov    %eax,%edx
		sub    %edi,%edx
		mov    %edx,0xc(%esp)
	jump_8676a:
		cmp    %esi,%eax
		jl     jump_8672c
	jump_8676e:
		mov    EXPORT_SYMBOL(fringe_y2),%edx
		cmp    %edx,%ebx
		jne    jump_8677c
		xor    %edx,%edx
		jmp    jump_8679d
	jump_8677c:
		mov    %edx,%eax
		mov    0x4(%esp),%edx
		mov    %edi,(%edx)
		mov    0x8(%esp),%edx
		sub    %ebx,%eax
		mov    %ebx,(%edx)
		mov    (%esp),%ebx
		mov    0xc(%esp),%edx
		mov    %edx,(%ebx)
		mov    $0x1,%edx
		mov    %eax,0x0(%ebp)
	jump_8679d:
		mov    %edx,%eax
		mov    %esi,EXPORT_SYMBOL(fringe_x2)
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
fringe_get_rectangle:	/* 0x867ac */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x28,%esp
		mov    %eax,0x1c(%esp)
		mov    %edx,0x18(%esp)
		mov    %ebx,0x10(%esp)
		mov    %ecx,0x14(%esp)
		lea    0xc(%esp),%ecx
		lea    0x8(%esp),%ebx
		lea    0x4(%esp),%edx
		mov    %esp,%eax
		call   fringe_scan
		test   %eax,%eax
		je     jump_868bd
		mov    0x4(%esp),%eax
		mov    EXPORT_SYMBOL(fringe_map),%edx
		shl    $0x8,%eax
		add    %edx,%eax
		mov    (%esp),%edx
		add    %eax,%edx
		mov    %edx,0x20(%esp)
		mov    (%edx),%al
		mov    $0x1,%edx
		mov    %al,0x24(%esp)
		mov    0x20(%esp),%eax
		mov    0x8(%esp),%ebx
		add    %edx,%eax
		cmp    %edx,%ebx
		jle    jump_86820
		mov    0x24(%esp),%bh
		mov    0x8(%esp),%ecx
	jump_86816:
		cmp    (%eax),%bh
		jne    jump_86820
		inc    %edx
		inc    %eax
		cmp    %ecx,%edx
		jl     jump_86816
	jump_86820:
		mov    $0x1,%ebp
		mov    0x20(%esp),%ebx
		mov    0xc(%esp),%esi
		add    $0x100,%ebx
		cmp    %ebp,%esi
		jle    jump_8685d
	jump_86837:
		mov    0x20(%esp),%edi
		mov    %edx,%ecx
		mov    %ebx,%esi
		xor    %eax,%eax
		repz cmpsb %es:(%edi),%ds:(%esi)
		je     jump_8684a
		sbb    %eax,%eax
		sbb    $0xffffffff,%eax
	jump_8684a:
		test   %eax,%eax
		jne    jump_8685d
		mov    0xc(%esp),%edi
		inc    %ebp
		add    $0x100,%ebx
		cmp    %edi,%ebp
		jl     jump_86837
	jump_8685d:
		mov    0x4(%esp),%ecx
		mov    (%esp),%esi
		mov    (%esp),%ebx
		shl    $0x2,%esi
		add    %edx,%ebx
		add    %ebp,%ecx
		shl    $0x2,%ebx
		mov    %esi,%eax
		cmp    %ebx,%esi
		jge    jump_86884
	jump_86877:
		add    $0x4,%eax
		mov    %ecx,EXPORT_SYMBOL(fringe_y)-4(%eax)
		cmp    %ebx,%eax
		jl     jump_86877
	jump_86884:
		mov    0x38(%esp),%ebx
		mov    0x24(%esp),%al
		mov    %al,(%ebx)
		mov    0x1c(%esp),%ebx
		mov    (%esp),%eax
		mov    %eax,(%ebx)
		mov    0x18(%esp),%ebx
		mov    0x4(%esp),%eax
		mov    %eax,(%ebx)
		mov    (%esp),%eax
		add    %edx,%eax
		mov    0x10(%esp),%edx
		mov    %eax,(%edx)
		mov    0x4(%esp),%eax
		mov    0x14(%esp),%edx
		add    %ebp,%eax
		mov    %eax,(%edx)
		mov    $0x1,%eax
	jump_868bd:
		add    $0x28,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_triangulate_set_rectangle)	/* 0x868c8 */
/*----------------------------------------------------------------*/
		push   %esi
		mov    %ecx,%esi
		xor    %ecx,%ecx
		mov    0x8(%esp),%cl
		push   %ecx
		mov    %esi,%ecx
		call   ac_tri_set_rectangle
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_triangulate_area)	/* 0x868e0 */
/*----------------------------------------------------------------*/
		push   %esi
		sub    $0x10,%esp
		mov    %eax,%esi
		mov    %edx,(%esp)
		mov    %ebx,0x4(%esp)
		mov    %ecx,0x8(%esp)
		cmpl   $0x0,EXPORT_SYMBOL(triangulation)+0x04
		jne    jump_86936
		mov    $0x1,%ebx
		mov    $0x9200,%ecx
		mov    $0xfffff000,%edx
		mov    EXPORT_SYMBOL(triangulation)+0x1C,%eax
		mov    %ebx,EXPORT_SYMBOL(triangulation)+0x04
		mov    %eax,EXPORT_SYMBOL(triangulation)+0x18
		mov    EXPORT_SYMBOL(triangulation)+0x34,%eax
		mov    %ecx,%ebx
		mov    %eax,EXPORT_SYMBOL(triangulation)+0x30
		mov    %edx,%eax
		call   ac_triangulation_initxy
		movl   $0xffffffff,EXPORT_SYMBOL(triangulation)+0x08
	jump_86936:
		push   $0x0
		mov    0x1c(%esp),%ecx
		mov    0xc(%esp),%ebx
		mov    0x8(%esp),%edx
		mov    0x4(%esp),%eax
		shl    $0x7,%ecx
		shl    $0x7,%ebx
		shl    $0x7,%edx
		shl    $0x7,%eax
		call   ac_tri_set_rectangle
		mov    (%esp),%eax
		mov    0x4(%esp),%ebx
		mov    %eax,EXPORT_SYMBOL(fringe_x1)
		mov    0x8(%esp),%eax
		mov    %esi,EXPORT_SYMBOL(fringe_map)
		mov    %eax,EXPORT_SYMBOL(fringe_x2)
		mov    0x18(%esp),%eax
		mov    0x8(%esp),%esi
		mov    %eax,EXPORT_SYMBOL(fringe_y2)
		mov    (%esp),%eax
		mov    %ebx,EXPORT_SYMBOL(fringe_y1)
		cmp    %esi,%eax
		jge    jump_869a5
		shl    $0x2,%eax
		lea    0x0(,%esi,4),%edx
	jump_86998:
		add    $0x4,%eax
		mov    %ebx,EXPORT_SYMBOL(fringe_y)-4(%eax)
		cmp    %edx,%eax
		jl     jump_86998
	jump_869a5:
		lea    0xc(%esp),%eax
		lea    0x18(%esp),%ecx
		lea    0x8(%esp),%ebx
		push   %eax
		lea    0x8(%esp),%edx
		lea    0x4(%esp),%eax
		call   fringe_get_rectangle
		test   %eax,%eax
		je     jump_869f1
		xor    %eax,%eax
		mov    0xc(%esp),%al
		test   %eax,%eax
		je     jump_869a5
		mov    0x18(%esp),%ecx
		mov    0x8(%esp),%ebx
		mov    0x4(%esp),%edx
		push   %eax
		mov    0x4(%esp),%eax
		shl    $0x7,%ecx
		shl    $0x7,%ebx
		shl    $0x7,%edx
		shl    $0x7,%eax
		call   ac_tri_set_rectangle
		jmp    jump_869a5
	jump_869f1:
		add    $0x10,%esp
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_triangulate_map)	/* 0x869f8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   $0x100
		mov    $0x100,%ecx
		xor    %ebx,%ebx
		xor    %edx,%edx
		call   ac_triangulate_area
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
fov_region:	/* 0x86A14 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		mov    %eax,%ebp
		mov    %edx,%edi
		mov    %ebx,%esi
		mov    %eax,%ecx
		mov    0xc(%ebx),%ebx
		mov    0x8(%esi),%eax
		sub    %ebx,%edx
		mov    0x4(%esi),%ebx
		sub    %eax,%ecx
		mov    0xc(%esi),%eax
		sub    %ebx,%eax
		mov    %eax,%ebx
		mov    0x8(%esi),%eax
		sub    (%esi),%eax
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_86a51
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_86a51:
		movsbl %al,%eax
		test   %eax,%eax
		jge    jump_86a62
		mov    $0xffffffff,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_86a62:
		mov    %edi,%edx
		mov    0x14(%esi),%ecx
		mov    0x14(%esi),%ebx
		mov    0x10(%esi),%edi
		sub    %ecx,%edx
		mov    %ebp,%ecx
		mov    %edi,%eax
		mov    0x4(%esi),%ebp
		sub    %edi,%ecx
		mov    (%esi),%edi
		sub    %ebp,%ebx
		sub    %edi,%eax
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_86a96
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_86a96:
		movsbl %al,%eax
		test   %eax,%eax
		jle    jump_86aa7
		mov    $0x1,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_86aa7:
		xor    %eax,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
route_to_path:
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x3c,%esp
		mov    0x58(%esp),%ebp
		mov    %ebx,0x2c(%esp)
		mov    %ecx,0x28(%esp)
		mov    0x54(%esp),%ebx
		mov    %eax,(%ebx)
		mov    0x54(%esp),%ecx
		mov    %edx,0x4(%ebx)
		mov    0x2c(%esp),%ebx
		mov    %ebx,0x8(%ecx)
		mov    0x28(%esp),%ebx
		xor    %esi,%esi
		mov    %ebx,0xc(%ecx)
		mov    %esi,0x0(%ebp)
		mov    0x50(%esp),%ebx
		mov    %eax,(%esp)
		mov    %edx,0x4(%esp)
		test   %ebx,%ebx
		jne    jump_86b30
		mov    0x28(%esp),%ebx
		sub    %edx,%ebx
		mov    %ebx,%edx
		imul   %ebx,%edx
		mov    0x2c(%esp),%ebx
		sub    %eax,%ebx
		mov    %ebx,%eax
		imul   %ebx,%eax
		add    %edx,%eax
		call   ac_LbSqrL
		add    %eax,0x0(%ebp)
		mov    0x2c(%esp),%eax
		movl   $0x1,0x10(%ecx)
		mov    %eax,0x14(%ecx)
		mov    0x28(%esp),%eax
		mov    %eax,0x18(%ecx)
		mov    $0x1,%eax
		jmp    jump_86e02
	jump_86b30:
		lea    0x14(%esp),%eax
		mov    0x4c(%esp),%edx
		lea    0xc(%esp),%ecx
		push   %eax
		lea    0x14(%esp),%eax
		lea    0xc(%esp),%ebx
		push   %eax
		mov    0x54(%esp),%eax
		mov    %esi,0x3c(%esp)
		mov    0x4(%edx),%edx
		mov    (%eax),%eax
		mov    %esi,0x38(%esp)
		call   edge_points8
		cmp    $0xffffffd6,%eax
		jne    jump_86b6f
		mov    $0xffffffff,%eax
		add    $0x3c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x10
	jump_86b6f:
		mov    $0x1,%edi
	jump_86b74:
		cmp    0x50(%esp),%edi
		jge    jump_86bdc
		lea    0x24(%esp),%eax
		push   %eax
		lea    0x24(%esp),%eax
		mov    0x50(%esp),%ecx
		push   %eax
		lea    0x0(,%edi,4),%eax
		add    %ecx,%eax
		lea    0x20(%esp),%ebx
		lea    0x24(%esp),%ecx
		mov    0x4(%eax),%edx
		mov    (%eax),%eax
		call   edge_points8
		cmp    $0xffffffd6,%eax
		jne    jump_86bb6
		mov    $0xffffffff,%eax
		add    $0x3c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x10
	jump_86bb6:
		mov    %esp,%ebx
		mov    0x1c(%esp),%edx
		mov    0x18(%esp),%eax
		call   fov_region
		mov    %esp,%ebx
		mov    0x24(%esp),%edx
		mov    %eax,%ecx
		mov    0x20(%esp),%eax
		call   fov_region
		mov    %eax,0x38(%esp)
		jmp    jump_86c28
	jump_86bdc:
		mov    %esp,%ebx
		mov    0x28(%esp),%edx
		mov    0x2c(%esp),%eax
		call   fov_region
		mov    0x54(%esp),%ebx
		mov    %eax,%ecx
		lea    0x0(,%esi,8),%edx
		mov    %eax,0x38(%esp)
		add    %ebx,%edx
		test   %eax,%eax
		je     jump_86db0
		cmp    $0x3,%esi
		jl     jump_86c28
		mov    0xc(%edx),%eax
		cmp    -0x4(%edx),%eax
		jne    jump_86c28
		mov    0x10(%edx),%eax
		cmp    (%edx),%eax
		jne    jump_86c28
		mov    $0xffffffff,%eax
		add    $0x3c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x10
	jump_86c28:
		test   %ecx,%ecx
		jne    jump_86c40
		mov    0x18(%esp),%eax
		mov    %eax,0x8(%esp)
		mov    0x1c(%esp),%eax
		mov    %edi,0x30(%esp)
		mov    %eax,0xc(%esp)
	jump_86c40:
		cmpl   $0x0,0x38(%esp)
		jne    jump_86c5b
		mov    0x20(%esp),%eax
		mov    %eax,0x10(%esp)
		mov    0x24(%esp),%eax
		mov    %edi,0x34(%esp)
		mov    %eax,0x14(%esp)
	jump_86c5b:
		mov    0x54(%esp),%ebx
		lea    0x0(,%esi,8),%edx
		mov    0x38(%esp),%eax
		add    %ebx,%edx
		cmp    $0xffffffff,%eax
		jne    jump_86d08
		cmp    $0x100,%esi
		je     jump_86e02
		mov    0xc(%esp),%eax
		mov    0x4(%esp),%ebx
		sub    %ebx,%eax
		mov    %eax,%ebx
		imul   %eax,%ebx
		mov    (%esp),%ecx
		mov    0x8(%esp),%eax
		sub    %ecx,%eax
		imul   %eax,%eax
		add    %ebx,%eax
		call   ac_LbSqrL
		add    %eax,0x0(%ebp)
		mov    0x8(%esp),%eax
		mov    %eax,0x14(%edx)
		mov    0xc(%esp),%eax
		mov    %eax,0x18(%edx)
		mov    0x8(%esp),%eax
		mov    %eax,(%esp)
		mov    0xc(%esp),%eax
		mov    %eax,0x4(%esp)
		lea    0x14(%esp),%eax
		mov    0x30(%esp),%edi
		push   %eax
		lea    0x14(%esp),%eax
		mov    0x50(%esp),%edx
		push   %eax
		lea    0x0(,%edi,4),%eax
		add    %edx,%eax
		lea    0x14(%esp),%ecx
		lea    0x10(%esp),%ebx
		mov    0x4(%eax),%edx
		mov    (%eax),%eax
		inc    %esi
		call   edge_points8
		cmp    $0xffffffd6,%eax
		jne    jump_86daa
		mov    $0xffffffff,%eax
		add    $0x3c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x10
	jump_86d08:
		cmp    $0x1,%ecx
		jne    jump_86daa
		cmp    $0x100,%esi
		jne    jump_86d27
		mov    $0xffffffff,%eax
		add    $0x3c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x10
	jump_86d27:
		mov    0x14(%esp),%eax
		mov    0x4(%esp),%ebx
		sub    %ebx,%eax
		mov    %eax,%ebx
		imul   %eax,%ebx
		mov    (%esp),%ecx
		mov    0x10(%esp),%eax
		sub    %ecx,%eax
		imul   %eax,%eax
		add    %ebx,%eax
		call   ac_LbSqrL
		add    %eax,0x0(%ebp)
		mov    0x10(%esp),%eax
		mov    %eax,0x14(%edx)
		mov    0x14(%esp),%eax
		mov    %eax,0x18(%edx)
		mov    0x10(%esp),%eax
		mov    %eax,(%esp)
		mov    0x14(%esp),%eax
		mov    %eax,0x4(%esp)
		lea    0x14(%esp),%eax
		mov    0x34(%esp),%edi
		push   %eax
		lea    0x14(%esp),%eax
		mov    0x50(%esp),%edx
		push   %eax
		lea    0x0(,%edi,4),%eax
		add    %edx,%eax
		lea    0x14(%esp),%ecx
		lea    0x10(%esp),%ebx
		mov    0x4(%eax),%edx
		mov    (%eax),%eax
		inc    %esi
		call   edge_points8
		cmp    $0xffffffd6,%eax
		jne    jump_86daa
		mov    $0xffffffff,%eax
		add    $0x3c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x10
	jump_86daa:
		inc    %edi
		jmp    jump_86b74
	jump_86db0:
		cmp    $0x100,%esi
		jne    jump_86dc6
		mov    $0xffffffff,%eax
		add    $0x3c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x10
	jump_86dc6:
		mov    0x28(%esp),%ebx
		sub    0x4(%esp),%ebx
		imul   %ebx,%ebx
		mov    0x2c(%esp),%eax
		sub    (%esp),%eax
		imul   %eax,%eax
		add    %ebx,%eax
		call   ac_LbSqrL
		mov    0x0(%ebp),%ebx
		add    %eax,%ebx
		mov    0x2c(%esp),%eax
		mov    %ebx,0x0(%ebp)
		mov    %eax,0x14(%edx)
		mov    0x28(%esp),%eax
		mov    %eax,0x18(%edx)
		mov    0x54(%esp),%eax
		inc    %esi
		mov    %esi,0x10(%eax)
		mov    %esi,%eax
	jump_86e02:
		add    $0x3c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x10


/*----------------------------------------------------------------*/
path_init8_thing:	/* 0x086E0C */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		mov    %eax,%esi
		mov    %edx,%ebp
		mov    %ebx,0x8(%esp)
		mov    %ecx,%edi
		xor    %eax,%eax
		call   ac_navi_onscreen_debug
		mov    0x1c(%esp),%eax
		mov    %edx,tree_Ax8
		movl   $0x0,0x10(%esi)
		mov    %ebx,tree_Ay8
		mov    %edx,(%esi)
		mov    %ecx,tree_Bx8
		mov    %ebx,0x4(%esi)
		mov    $0xffffffff,%edx
		mov    %eax,tree_By8
		mov    %eax,0xc(%esi)
		mov    %edx,tree_routelen
		mov    %ebp,%eax
		mov    %ebx,%edx
		mov    %ecx,0x8(%esi)
		call   ac_triangle_findSE8
		mov    0x1c(%esp),%edx
		mov    %eax,tree_triA
		mov    %ecx,%eax
		call   ac_triangle_findSE8
		mov    tree_triA,%ebx
		# Fix for invalid mem access - bail out if result is negative (-1 means error)
		test   %ebx, %ebx
		jns    jump_86e7a
		mov    $0xffffffff,%eax
		jmp    jump_86ef8
jump_86e7a:
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx
		shl    $0x4,%ebx
		mov    0xb(%edx,%ebx,1),%ebx
		sar    $0x18,%ebx
		mov    %ebx,tree_altA
		mov    %eax,%ebx
		shl    $0x4,%ebx
		mov    0xb(%edx,%ebx,1),%edx
		mov    %eax,tree_triB
		sar    $0x18,%edx
		mov    tree_triA,%ebx
		mov    %edx,tree_altB
		cmp    $0xffffffff,%ebx
		je     jump_86ef8
		cmp    $0xffffffff,%eax
		je     jump_86ef8
		mov    $tree_routecost,%ecx
		mov    %ebx,0x4(%esp)
		mov    %eax,%edx
		mov    $tree_route,%ebx
		mov    0x4(%esp),%eax
		call   ma_triangle_route_3
		mov    %eax,tree_routelen
		cmp    $0xffffffff,%eax
		je     jump_86ef8
		mov    %esp,%edx
		push   %edx
		push   %esi
		push   %eax
		mov    0x28(%esp),%ecx
		mov    %edi,%ebx
		push   $tree_route
		mov    0x18(%esp),%edx
		mov    %ebp,%eax
		call   route_to_path
		mov    %eax,0x10(%esi)
	jump_86ef8:
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x8


/*----------------------------------------------------------------*/
path_init8_wide:
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4c,%esp
		mov    %eax,%ebp
		mov    %edx,0x48(%esp)
		mov    %ebx,%esi
		mov    %ecx,%edi
		mov    0x5c(%esp),%edx
		push   %edx
		push   %ecx
		push   %ebx
		mov    0x54(%esp),%ebx
		push   %ebx
		push   $ascDDDD
		lea    0x14(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0x18,%esp
		xor    %eax,%eax
		call   ac_navi_onscreen_debug
		mov    %ebx,tree_Ax8
		movl   $0x0,0x10(%ebp)
		mov    %esi,tree_Ay8
		mov    %ebx,0x0(%ebp)
		mov    %ecx,tree_Bx8
		mov    %esi,0x4(%ebp)
		mov    %edx,tree_By8
		mov    %ecx,0x8(%ebp)
		mov    %ebx,%eax
		mov    %edx,0xc(%ebp)
		mov    $0xffffffff,%ecx
		mov    %esi,%edx
		mov    %ecx,tree_routelen
		call   ac_triangle_findSE8
		mov    0x5c(%esp),%edx
		mov    %eax,tree_triA
		mov    %edi,%eax
		call   ac_triangle_findSE8
		mov    tree_triA,%edx
		mov    %eax,tree_triB
		test   %edx,%edx
		jl     jump_8701e
		test   %eax,%eax
		jl     jump_8701e
		mov    %edx,%ebx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx
		shl    $0x4,%ebx
		mov    0xb(%edx,%ebx,1),%ebx
		sar    $0x18,%ebx
		mov    %ebx,tree_altA
		mov    %eax,%ebx
		shl    $0x4,%ebx
		mov    0xb(%edx,%ebx,1),%edx
		sar    $0x18,%edx
		mov    tree_triA,%ebx
		mov    %edx,tree_altB
		cmp    %ecx,%ebx
		je     jump_8701e
		cmp    %ecx,%eax
		je     jump_8701e
		mov    $tree_routecost,%ecx
		mov    %ebx,0x44(%esp)
		mov    %eax,%edx
		mov    $tree_route,%ebx
		mov    0x44(%esp),%eax
		call   ma_triangle_route
		mov    %eax,tree_routelen
		cmp    $0xffffffff,%eax
		je     jump_8701e
		lea    0x40(%esp),%edx
		push   %edx
		push   %ebp
		push   %eax
		mov    0x68(%esp),%ecx
		mov    %edi,%ebx
		push   $tree_route
		mov    %esi,%edx
		mov    0x58(%esp),%eax
		call   route_to_path
		mov    %eax,0x10(%ebp)
	jump_8701e:
		add    $0x4c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x8


/*----------------------------------------------------------------*/
path_init8_tank:	/* 0x087028 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		mov    %eax,%esi
		mov    %edx,%ebp
		mov    %ebx,0x8(%esp)
		mov    %ecx,%edi
		mov    %edx,tree_Ax8
		mov    %edx,(%eax)
		mov    %ebx,tree_Ay8
		mov    %ebx,0x4(%eax)
		mov    %ecx,tree_Bx8
		mov    %ecx,0x8(%eax)
		mov    0x1c(%esp),%eax
		mov    $0xffffffff,%edx
		mov    %eax,tree_By8
		mov    %edx,tree_routelen
		mov    %eax,0xc(%esi)
		mov    %ebx,%edx
		mov    %ebp,%eax
		movl   $0x0,0x10(%esi)
		call   ac_triangle_findSE8
		mov    0x1c(%esp),%edx
		mov    %eax,tree_triA
		mov    %ecx,%eax
		call   ac_triangle_findSE8
		mov    tree_triA,%ebx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx
		shl    $0x4,%ebx
		mov    0xb(%edx,%ebx,1),%ebx
		sar    $0x18,%ebx
		mov    %ebx,tree_altA
		mov    %eax,%ebx
		shl    $0x4,%ebx
		mov    0xb(%edx,%ebx,1),%edx
		mov    %eax,tree_triB
		sar    $0x18,%edx
		mov    tree_triA,%ebx
		mov    %edx,tree_altB
		cmp    $0xffffffff,%ebx
		je     jump_8710d
		cmp    $0xffffffff,%eax
		je     jump_8710d
		mov    $tree_routecost,%ecx
		mov    %ebx,0x4(%esp)
		mov    %eax,%edx
		mov    $tree_route,%ebx
		mov    0x4(%esp),%eax
		call   ma_triangle_route_5
		mov    %eax,tree_routelen
		cmp    $0xffffffff,%eax
		je     jump_8710d
		mov    %esp,%edx
		push   %edx
		push   %esi
		push   %eax
		mov    0x28(%esp),%ecx
		mov    %edi,%ebx
		push   $tree_route
		mov    0x18(%esp),%edx
		mov    %ebp,%eax
		call   route_to_path
		mov    %eax,0x10(%esi)
	jump_8710d:
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x8


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_path_init8_unkn3)	/* 0x087118 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		mov    %eax,%esi
		mov    %edx,%ebp
		mov    %ebx,0x8(%esp)
		mov    %ecx,%edi
		xor    %eax,%eax
		call   ac_navi_onscreen_debug
		mov    0x1c(%esp),%eax
		mov    %edx,tree_Ax8
		movl   $0x0,0x10(%esi)
		mov    %ebx,tree_Ay8
		mov    %edx,(%esi)
		mov    %ecx,tree_Bx8
		mov    %ebx,0x4(%esi)
		mov    $0xffffffff,%edx
		mov    %eax,tree_By8
		mov    %eax,0xc(%esi)
		mov    %edx,tree_routelen
		mov    %ebp,%eax
		mov    %ebx,%edx
		mov    %ecx,0x8(%esi)
		call   ac_triangle_findSE8
		mov    0x1c(%esp),%edx
		mov    %eax,tree_triA
		mov    %ecx,%eax
		call   ac_triangle_findSE8
		mov    tree_triA,%ebx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx
		shl    $0x4,%ebx
		mov    0xb(%edx,%ebx,1),%ebx
		sar    $0x18,%ebx
		mov    %ebx,tree_altA
		mov    %eax,%ebx
		shl    $0x4,%ebx
		mov    0xb(%edx,%ebx,1),%edx
		mov    %eax,tree_triB
		sar    $0x18,%edx
		mov    tree_triA,%ebx
		mov    %edx,tree_altB
		cmp    $0xffffffff,%ebx
		je     jump_87204
		cmp    $0xffffffff,%eax
		je     jump_87204
		mov    $tree_routecost,%ecx
		mov    %ebx,0x4(%esp)
		mov    %eax,%edx
		mov    $tree_route,%ebx
		mov    0x4(%esp),%eax
		call   ma_triangle_route_4
		mov    %eax,tree_routelen
		cmp    $0xffffffff,%eax
		je     jump_87204
		mov    %esp,%edx
		push   %edx
		push   %esi
		push   %eax
		mov    0x28(%esp),%ecx
		mov    %edi,%ebx
		push   $tree_route
		mov    0x18(%esp),%edx
		mov    %ebp,%eax
		call   route_to_path
		mov    %eax,0x10(%esi)
	jump_87204:
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x8


/*----------------------------------------------------------------*/
tri_path_init8:	/* 0x08723C */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		mov    0x20(%esp),%ebp
		mov    %ax,0x4(%esp)
		mov    %dx,0x8(%esp)
		mov    %ebx,%esi
		mov    %ecx,%edi
		xor    %eax,%eax
		mov    $0xffffffff,%edx
		call   ac_navi_onscreen_debug
		mov    0x1c(%esp),%eax
		mov    %ecx,tree_Ax8
		mov    %eax,0x4(%ebx)
		mov    0x24(%esp),%eax
		mov    %ebp,tree_Bx8
		mov    %eax,0xc(%ebx)
		mov    0x1c(%esp),%eax
		mov    %edx,tree_routelen
		mov    %eax,tree_Ay8
		mov    0x24(%esp),%eax
		movl   $0x0,0x10(%ebx)
		mov    %eax,tree_By8
		mov    0x2(%esp),%eax
		mov    %ecx,(%ebx)
		sar    $0x10,%eax
		mov    %ebp,0x8(%ebx)
		cmp    %edx,%eax
		jne    jump_872b4
		mov    0x1c(%esp),%edx
		mov    %ecx,%eax
		call   ac_triangle_findSE8
	jump_872b4:
		mov    0x6(%esp),%edx
		sar    $0x10,%edx
		mov    %eax,tree_triA
		cmp    $0xffffffff,%edx
		jne    jump_872d2
		mov    0x24(%esp),%edx
		mov    %ebp,%eax
		call   ac_triangle_findSE8
		# Fix a crash if -1 returned
		cmp    $0xffffffff,%eax
		je     jump_8734d
		mov    %eax,%edx
	jump_872d2:
		mov    tree_triA,%ebx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax # triangulation[0].Triangles
		shl    $0x4,%ebx
		mov    0xb(%ebx,%eax,1),%ebx
		sar    $0x18,%ebx
		mov    %ebx,tree_altA
		mov    %edx,%ebx
		shl    $0x4,%ebx
		mov    0xb(%ebx,%eax,1),%eax
		mov    %edx,tree_triB
		sar    $0x18,%eax
		mov    tree_triA,%ebx
		mov    %eax,tree_altB
		cmp    $0xffffffff,%ebx
		je     jump_8734d
		cmp    $0xffffffff,%edx
		je     jump_8734d
		mov    $tree_routecost,%ecx
		mov    %ebx,%eax
		mov    $tree_route,%ebx
		call   ma_triangle_route_3
		mov    %eax,tree_routelen
		cmp    $0xffffffff,%eax
		je     jump_8734d
		mov    %esp,%edx
		push   %edx
		push   %esi
		push   %eax
		mov    0x30(%esp),%ecx
		mov    %ebp,%ebx
		push   $tree_route
		mov    0x2c(%esp),%edx
		mov    %edi,%eax
		call   route_to_path
		mov    %eax,0x10(%esi)
	jump_8734d:
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x10


/*----------------------------------------------------------------*/
fatter_than_nothing:	/* 0x0874B8 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x44,%esp
		mov    %eax,0xc(%esp)
		mov    %edx,0x30(%esp)
		mov    %ebx,0x34(%esp)
		mov    (%eax),%eax
		mov    %eax,(%edx)
		mov    0xc(%esp),%eax
		mov    0x4(%eax),%eax
		mov    %eax,0x4(%edx)
		mov    0xc(%esp),%eax
		mov    0x8(%eax),%eax
		mov    %eax,0x8(%edx)
		mov    0xc(%esp),%eax
		mov    0xc(%eax),%eax
		mov    %eax,0xc(%edx)
		mov    0xc(%esp),%eax
		mov    0xc(%esp),%esi
		mov    0x10(%eax),%eax
		mov    0xc(%esp),%ebx
		mov    %eax,0x10(%edx)
		mov    0xc(%esp),%eax
		xor    %edx,%edx
		mov    (%esi),%esi
		mov    %edx,0x38(%esp)
		mov    %edx,0x24(%esp)
		mov    0x4(%eax),%eax
		jmp    jump_87896
	jump_87517:
		mov    %esi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		sar    %eax
		mov    %eax,0x8(%esp)
		mov    %edi,%eax
	jump_87526:
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		add    0x8(%esp),%eax
		mov    %eax,(%esp)
		jne    jump_8753b
		movl   $0x1,(%esp)
	jump_8753b:
		mov    %esi,%edx
		shl    $0x8,%edx
		mov    (%esp),%esi
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %esi
		mov    %edi,%edx
		mov    %eax,%esi
		shl    $0x8,%edx
		mov    (%esp),%edi
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %edi
		mov    %eax,%edi
		mov    %ecx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,0x8(%esp)
		mov    %ebp,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    0x8(%esp),%eax
		jge    jump_87586
		mov    %ebp,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		sar    %eax
		mov    %eax,0x8(%esp)
		mov    %ecx,%eax
		jmp    jump_87595
	jump_87586:
		mov    %ecx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		sar    %eax
		mov    %eax,0x8(%esp)
		mov    %ebp,%eax
	jump_87595:
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		add    0x8(%esp),%eax
		mov    %eax,0x28(%esp)
		jne    jump_875ac
		movl   $0x1,0x28(%esp)
	jump_875ac:
		mov    %ecx,%edx
		shl    $0x8,%edx
		mov    0x28(%esp),%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %ebp,%edx
		mov    %eax,%ecx
		shl    $0x8,%edx
		mov    0x28(%esp),%ebp
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebp
		mov    %eax,%ebp
		mov    %esi,%eax
		imul   %ecx,%eax
		mov    %eax,0x8(%esp)
		mov    %edi,%eax
		imul   %ebp,%eax
		mov    0x8(%esp),%edx
		add    %eax,%edx
		mov    %esi,%eax
		imul   %ebp,%eax
		mov    %eax,0x8(%esp)
		mov    %edi,%eax
		imul   %ecx,%eax
		mov    %edx,0x4(%esp)
		mov    0x8(%esp),%edx
		sub    %eax,%edx
		mov    0x4(%esp),%eax
		mov    %edx,0x1c(%esp)
		cmp    $0xffffb1e0,%eax
		jge    jump_877c9
		mov    %edi,0x20(%esp)
		mov    %edi,%eax
		mov    %esi,0x14(%esp)
		mov    %ebp,0x18(%esp)
		mov    %ebp,%edx
		mov    %ecx,0x10(%esp)
		neg    %eax
		neg    %edx
		mov    %eax,0x20(%esp)
		mov    0x1c(%esp),%eax
		mov    %edx,0x18(%esp)
		test   %eax,%eax
		jle    jump_87645
		mov    %edx,%eax
		sub    %ecx,%eax
		mov    %eax,0x3c(%esp)
		mov    %ecx,%eax
		sub    %ebp,%eax
		jmp    jump_87652
	jump_87645:
		mov    0x20(%esp),%eax
		add    %esi,%eax
		mov    %eax,0x3c(%esp)
		lea    (%esi,%edi,1),%eax
	jump_87652:
		mov    %eax,0x40(%esp)
		mov    0x3c(%esp),%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,0x8(%esp)
		mov    0x40(%esp),%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    0x8(%esp),%eax
		jge    jump_87687
		mov    0x40(%esp),%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		sar    %eax
		mov    %eax,0x8(%esp)
		mov    0x3c(%esp),%eax
		jmp    jump_8769a
	jump_87687:
		mov    0x3c(%esp),%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		sar    %eax
		mov    %eax,0x8(%esp)
		mov    0x40(%esp),%eax
	jump_8769a:
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    0x8(%esp),%edx
		add    %eax,%edx
		mov    %edx,0x2c(%esp)
		cmpl   $0x0,0x2c(%esp)
		je     jump_876d8
		mov    0x3c(%esp),%edx
		shl    $0x8,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idivl  0x2c(%esp)
		mov    0x40(%esp),%edx
		shl    $0x8,%edx
		mov    %eax,0x3c(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idivl  0x2c(%esp)
		mov    %eax,0x40(%esp)
	jump_876d8:
		mov    0x3c(%esp),%eax
		mov    0x34(%esp),%edx
		imul   %edx,%eax
		mov    %eax,0x3c(%esp)
		mov    0x40(%esp),%eax
		imul   %edx,%eax
		mov    %eax,0x40(%esp)
		mov    0x14(%ebx),%edx
		add    0x3c(%esp),%edx
		mov    0x38(%esp),%eax
		shl    $0x3,%eax
		mov    %eax,0x8(%esp)
		mov    0x30(%esp),%eax
		add    0x8(%esp),%eax
		mov    %edx,0x14(%eax)
		mov    0x18(%ebx),%edx
		add    0x40(%esp),%edx
		mov    %edx,0x18(%eax)
		mov    0x38(%esp),%edx
		inc    %edx
		mov    0x30(%esp),%eax
		mov    %edx,0x38(%esp)
		incl   0x10(%eax)
		cmpl   $0x0,0x1c(%esp)
		jge    jump_8773e
		mov    0x18(%esp),%esi
		mov    0x10(%esp),%edi
		sub    %ecx,%esi
		sub    %ebp,%edi
		jmp    jump_8774a
	jump_8773e:
		mov    0x20(%esp),%edx
		mov    0x14(%esp),%ecx
		add    %edx,%esi
		add    %ecx,%edi
	jump_8774a:
		mov    %esi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ecx
		mov    %edi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%ecx
		jle    jump_8776b
		mov    %edi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ecx
		mov    %esi,%eax
		jmp    jump_87776
	jump_8776b:
		mov    %esi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ecx
		mov    %edi,%eax
	jump_87776:
		sar    %ecx
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		add    %eax,%ecx
		je     jump_8779d
		mov    %esi,%edx
		shl    $0x8,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %edi,%edx
		shl    $0x8,%edx
		mov    %eax,%esi
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %eax,%edi
	jump_8779d:
		mov    0x34(%esp),%ebp
		imul   %ebp,%esi
		imul   %ebp,%edi
		mov    0x38(%esp),%eax
		mov    0x30(%esp),%ecx
		shl    $0x3,%eax
		mov    0x14(%ebx),%edx
		add    %ecx,%eax
		add    %edx,%esi
		mov    %esi,0x14(%eax)
		mov    0x18(%ebx),%esi
		add    %esi,%edi
		mov    %edi,0x18(%eax)
		jmp    jump_8787b
	jump_877c9:
		sub    %ecx,%esi
		mov    %esi,%eax
		sub    %ebp,%edi
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ecx
		mov    %edi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%ecx
		jle    jump_877ee
		mov    %edi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ecx
		mov    %esi,%eax
		jmp    jump_877f9
	jump_877ee:
		mov    %esi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ecx
		mov    %edi,%eax
	jump_877f9:
		sar    %ecx
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		add    %eax,%ecx
		je     jump_87820
		mov    %esi,%edx
		shl    $0x8,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %edi,%edx
		shl    $0x8,%edx
		mov    %eax,%esi
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %eax,%edi
	jump_87820:
		mov    0x34(%esp),%edx
		imul   %edx,%esi
		imul   %edx,%edi
		mov    0x18(%ebx),%ebp
		mov    0x14(%ebx),%eax
		add    %ebp,%edi
		add    %esi,%eax
		mov    %edi,%edx
		mov    %eax,%ecx
		sar    $0x10,%edx
		sar    $0x10,%ecx
		shl    $0x7,%edx
		add    %ecx,%edx
		imul   $0x12,%edx,%edx
		mov    EXPORT_SYMBOL(game_my_big_map),%ebp
		add    %edx,%ebp
		mov    0x38(%esp),%edx
		mov    0x30(%esp),%ecx
		shl    $0x3,%edx
		add    %ecx,%edx
		testb  $0x4,0xf(%ebp)
		je     jump_87875
		sar    %esi
		mov    0x14(%ebx),%eax
		add    %esi,%eax
		mov    %eax,0x14(%edx)
		mov    0x18(%ebx),%edi
		add    %edi,%esi
		mov    %esi,0x18(%edx)
		jmp    jump_8787b
	jump_87875:
		mov    %eax,0x14(%edx)
		mov    %edi,0x18(%edx)
	jump_8787b:
		add    $0x8,%ebx
		mov    0x24(%esp),%edi
		mov    0x38(%esp),%ebp
		mov    0xc(%ebx),%esi
		mov    0x10(%ebx),%eax
		inc    %edi
		inc    %ebp
		mov    %edi,0x24(%esp)
		mov    %ebp,0x38(%esp)
	jump_87896:
		mov    0xc(%esp),%edx
		mov    0x10(%edx),%edx
		mov    0x24(%esp),%ecx
		dec    %edx
		cmp    %ecx,%edx
		jle    jump_878f2
		mov    0x14(%ebx),%edx
		mov    0x18(%ebx),%edi
		mov    0x1c(%ebx),%ecx
		mov    0x14(%ebx),%ebp
		sub    %eax,%edi
		sub    %ebp,%ecx
		mov    0x20(%ebx),%ebp
		mov    0x18(%ebx),%eax
		sub    %esi,%edx
		sub    %eax,%ebp
		mov    %edx,%eax
		mov    %edx,%esi
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,0x8(%esp)
		mov    %edi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    0x8(%esp),%eax
		jge    jump_87517
		mov    %edi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		sar    %eax
		mov    %eax,0x8(%esp)
		mov    %esi,%eax
		jmp    jump_87526
	jump_878f2:
		mov    0x38(%esp),%eax
		mov    0x30(%esp),%edx
		shl    $0x3,%eax
		add    %edx,%eax
		mov    0x14(%ebx),%edx
		mov    %edx,0x14(%eax)
		mov    0x18(%ebx),%edx
		mov    %edx,0x18(%eax)
		add    $0x44,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
is_this_a_nice_place_for_a_picnic:	/* 0x087D24 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x18,%esp
		test   %eax,%eax
		jl     jump_87d43
		test   %edx,%edx
		jl     jump_87d43
		cmp    $0x800000,%eax
		jg     jump_87d43
		cmp    $0x800000,%edx
		jle    jump_87d4a
	jump_87d43:
		xor    %eax,%eax
		jmp    jump_87e9c
	jump_87d4a:
		sar    $0x10,%edx
		mov    %eax,%ebx
		mov    %edx,%esi
		sar    $0x10,%ebx
		shl    $0x7,%edx
		add    %ebx,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0x10(%edx,%eax,2),%ax
		and    $0xf,%ah
		and    $0xffff,%eax
		je     jump_87d82
		xor    %eax,%eax
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_87d82:
		mov    %ebx,0x10(%esp)
		mov    %esi,%edi
		mov    %ebx,%eax
		and    $0x7f,%edi
		and    $0x7f,%eax
		shl    $0x7,%edi
		mov    %eax,0xc(%esp)
		lea    (%eax,%edi,1),%ecx
		lea    0x1(%ebx),%ebp
		lea    0x0(,%ecx,8),%eax
		and    $0x7f,%ebp
		add    %ecx,%eax
		lea    (%edi,%ebp,1),%ebx
		mov    0x4(%edx,%eax,2),%ecx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		mov    %esi,%ebx
		mov    %esi,0x14(%esp)
		inc    %ebx
		mov    0x4(%edx,%eax,2),%eax
		and    $0x7f,%ebx
		mov    0xc(%esp),%esi
		shl    $0x7,%ebx
		sar    $0x10,%eax
		add    %ebx,%esi
		mov    %eax,(%esp)
		lea    0x0(,%esi,8),%eax
		add    %esi,%eax
		mov    0x4(%edx,%eax,2),%eax
		sar    $0x10,%eax
		add    %ebp,%ebx
		mov    %eax,0x4(%esp)
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		mov    0x4(%edx,%eax,2),%eax
		sar    $0x10,%ecx
		sar    $0x10,%eax
		mov    (%esp),%edx
		mov    %eax,0x8(%esp)
		cmp    %edx,%ecx
		jle    jump_87e0e
		mov    %ecx,%eax
		jmp    jump_87e10
	jump_87e0e:
		mov    %edx,%eax
	jump_87e10:
		mov    0x4(%esp),%ebx
		cmp    %ebx,%eax
		jg     jump_87e1a
		mov    %ebx,%eax
	jump_87e1a:
		mov    0x8(%esp),%esi
		cmp    %esi,%eax
		jg     jump_87e24
		mov    %esi,%eax
	jump_87e24:
		mov    (%esp),%edi
		mov    %eax,%edx
		cmp    %edi,%ecx
		jge    jump_87e31
		mov    %ecx,%eax
		jmp    jump_87e33
	jump_87e31:
		mov    %edi,%eax
	jump_87e33:
		mov    0x4(%esp),%ebp
		cmp    %ebp,%eax
		jl     jump_87e3d
		mov    %ebp,%eax
	jump_87e3d:
		mov    0x8(%esp),%ebx
		cmp    %ebx,%eax
		jl     jump_87e47
		mov    %ebx,%eax
	jump_87e47:
		sub    %eax,%edx
		mov    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		mov    0x14(%esp),%eax
		mov    0x10(%esp),%ebx
		shl    $0x7,%eax
		add    %eax,%ebx
		lea    0x0(,%ebx,8),%eax
		add    %eax,%ebx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %ebx,%ebx
		mov    (%ebx,%eax,1),%ax
		and    $0x3f,%ah
		cwtl
		call   ac_get_my_texture_bits
		and    $0xff,%eax
		cmp    $0xc,%edx
		jle    jump_87e88
		or     $0x2,%al
	jump_87e88:
		test   $0x2,%al
		je     jump_87e97
		xor    %eax,%eax
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_87e97:
		mov    $0x1,%eax
	jump_87e9c:
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
make_triangle_solid:	/* 0x087F98 */
/*----------------------------------------------------------------*/
		push   %edx
		cmpl   $0x1,EXPORT_SYMBOL(selected_triangulation_no)
		jne    jump_87fc1
		cmp    EXPORT_SYMBOL(triangulation)+0x1C,%eax
		jge    jump_87fc1
		cmp    EXPORT_SYMBOL(triangulation)+0x18,%eax
		jl     jump_87fc1
		mov    %eax,%edx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		shl    $0x4,%edx
		orb    $0x6,0xe(%edx,%eax,1)
	jump_87fc1:
		pop    %edx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_triangulation_unkn_func_002)	/* 0x087FC4 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x18,%esp
		mov    %eax,0xc(%esp)
		mov    %edx,0x8(%esp)
		mov    %ebx,0x4(%esp)
		mov    %ecx,(%esp)
		mov    0x8(%esp),%ebx
		mov    0x4(%esp),%ecx
		mov    (%esp),%edi
		mov    %eax,%edx
		mov    EXPORT_SYMBOL(triangulation)+0x0C,%eax # triangulation[0].ix_Triangles
		shl    $0x8,%edx
		shl    $0x8,%ebx
		inc    %ecx
		inc    %edi
		mov    %edx,0xc(%esp)
		mov    %ebx,0x8(%esp)
		mov    %ecx,0x4(%esp)
		mov    %ecx,%esi
		mov    %edi,(%esp)
		mov    %edi,%ebp
		shl    $0x8,%esi
		shl    $0x8,%ebp
		mov    %esi,0x4(%esp)
		mov    %ebp,(%esp)
		xor    %esi,%esi
		test   %eax,%eax
		jle    jump_88318
		mov    %esi,0x10(%esp)
	jump_88021:
		mov    0x10(%esp),%ebx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %ebx,%eax
		testb  $0x6,0xe(%eax)
		jne    jump_882a5
		xor    %dh,%dh
		mov    (%eax),%ax
		mov    %dh,0x14(%esp)
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		mov    0xc(%esp),%ecx
		mov    (%eax),%edx
		mov    0x4(%eax),%eax
		cmp    %ecx,%edx
		jl     jump_88072
		cmp    0x4(%esp),%edx
		jg     jump_88072
		cmp    0x8(%esp),%eax
		jl     jump_88072
		cmp    (%esp),%eax
		jg     jump_88072
		movb   $0x1,0x14(%esp)
	jump_88072:
		mov    0x10(%esp),%ebx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %ebx,%eax
		mov    0x2(%eax),%ax
		and    $0xffff,%eax
		lea    0x0(,%eax,8),%edx
		mov    EXPORT_SYMBOL(triangulation)+0x38,%eax
		add    %edx,%eax
		mov    0xc(%esp),%ecx
		mov    (%eax),%edx
		mov    0x4(%eax),%eax
		cmp    %ecx,%edx
		jl     jump_880b7
		cmp    0x4(%esp),%edx
		jg     jump_880b7
		cmp    0x8(%esp),%eax
		jl     jump_880b7
		cmp    (%esp),%eax
		jg     jump_880b7
		orb    $0x2,0x14(%esp)
	jump_880b7:
		xor    %eax,%eax
		mov    0x14(%esp),%al
		test   %eax,%eax
		je     jump_882a5
		mov    0x10(%esp),%ebx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %ebx,%eax
		mov    0x4(%eax),%ax
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx
		shl    $0x3,%eax
		add    %eax,%edx
		mov    0xc(%esp),%ecx
		mov    (%edx),%eax
		mov    0x4(%edx),%edx
		cmp    %ecx,%eax
		jl     jump_88107
		cmp    0x4(%esp),%eax
		jg     jump_88107
		cmp    0x8(%esp),%edx
		jl     jump_88107
		cmp    (%esp),%edx
		jg     jump_88107
		orb    $0x4,0x14(%esp)
	jump_88107:
		mov    0x14(%esp),%al
		and    $0x3,%al
		cmp    $0x3,%al
		jne    jump_881a2
		mov    0x10(%esp),%edx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %edx,%eax
		testb  $0x1,0xf(%eax)
		jne    jump_881a2
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(triangulation)+0x38,%ebx
		mov    0x2(%eax),%dx
		mov    0x4(%ebx,%edx,8),%ecx
		mov    (%ebx,%edx,8),%edi
		mov    (%eax),%ax
		and    $0xffff,%eax
		mov    0x4(%ebx,%eax,8),%edx
		mov    (%ebx,%eax,8),%eax
		mov    %edi,%ebx
		call   func_5fcf4
		test   %eax,%eax
		je     jump_881a2
		mov    0x10(%esp),%eax
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx
		add    %edx,%eax
		mov    0x4(%eax),%edi
		sar    $0x10,%edi
		shl    $0x4,%edi
		testb  $0x6,0xe(%edx,%edi,1)
		jne    jump_881a2
		mov    0xf(%eax),%bh
		or     $0x1,%bh
		xor    %ecx,%ecx
		mov    %bh,0xf(%eax)
		xor    %eax,%eax
	jump_88184:
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx
		add    %edi,%edx
		mov    0x4(%edx,%eax,1),%ebx
		sar    $0x10,%ebx
		cmp    %esi,%ebx
		jne    jump_882c0
		mov    $0x1,%al
		shl    %cl,%al
		or     %al,0xf(%edx)
	jump_881a2:
		mov    0x14(%esp),%al
		and    $0x6,%al
		cmp    $0x6,%al
		jne    jump_8823f
		mov    0x10(%esp),%ebx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %ebx,%eax
		testb  $0x2,0xf(%eax)
		jne    jump_8823f
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(triangulation)+0x38,%edx
		mov    0x4(%eax),%bx
		mov    0x4(%edx,%ebx,8),%ecx
		mov    0x2(%eax),%ax
		mov    (%edx,%ebx,8),%ebx
		and    $0xffff,%eax
		shl    $0x3,%eax
		add    %edx,%eax
		mov    0x4(%eax),%edx
		mov    (%eax),%eax
		call   func_5fcf4
		test   %eax,%eax
		je     jump_8823f
		mov    0x10(%esp),%eax
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx
		add    %edx,%eax
		mov    0x6(%eax),%edi
		sar    $0x10,%edi
		shl    $0x4,%edi
		testb  $0x6,0xe(%edx,%edi,1)
		jne    jump_8823f
		mov    0xf(%eax),%bh
		or     $0x2,%bh
		xor    %ecx,%ecx
		mov    %bh,0xf(%eax)
		xor    %eax,%eax
	jump_88221:
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx
		add    %edi,%edx
		mov    0x4(%edx,%eax,1),%ebx
		sar    $0x10,%ebx
		cmp    %esi,%ebx
		jne    jump_882d2
		mov    $0x1,%al
		shl    %cl,%al
		or     %al,0xf(%edx)
	jump_8823f:
		mov    0x14(%esp),%al
		and    $0x5,%al
		cmp    $0x5,%al
		jne    jump_882a5
		mov    0x10(%esp),%ecx
		mov    EXPORT_SYMBOL(triangulation)+0x20,%eax
		add    %ecx,%eax
		testb  $0x4,0xf(%eax)
		jne    jump_882a5
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(triangulation)+0x38,%ebx
		mov    (%eax),%dx
		mov    0x4(%ebx,%edx,8),%ecx
		mov    0x4(%eax),%ax
		mov    (%ebx,%edx,8),%edx
		and    $0xffff,%eax
		mov    0x4(%ebx,%eax,8),%edi
		mov    (%ebx,%eax,8),%eax
		mov    %edx,%ebx
		mov    %edi,%edx
		call   func_5fcf4
		test   %eax,%eax
		je     jump_882a5
		mov    0x10(%esp),%eax
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx
		add    %edx,%eax
		mov    0x8(%eax),%edi
		sar    $0x10,%edi
		shl    $0x4,%edi
		testb  $0x6,0xe(%edx,%edi,1)
		je     jump_882ef
	jump_882a5:
		mov    0x10(%esp),%edi
		mov    EXPORT_SYMBOL(triangulation)+0x0C,%ebp # triangulation[0].ix_Triangles
		add    $0x10,%edi
		inc    %esi
		mov    %edi,0x10(%esp)
		cmp    %ebp,%esi
		jge    jump_88318
		jmp    jump_88021
	jump_882c0:
		add    $0x2,%eax
		inc    %ecx
		cmp    $0x6,%eax
		jl     jump_88184
		jmp    jump_881a2
	jump_882d2:
		add    $0x2,%eax
		inc    %ecx
		cmp    $0x6,%eax
		jl     jump_88221
		jmp    jump_8823f
	jump_882e4:
		add    $0x2,%eax
		inc    %ecx
		cmp    $0x6,%eax
		jl     jump_882fc
		jmp    jump_882a5
	jump_882ef:
		mov    0xf(%eax),%bh
		or     $0x4,%bh
		xor    %ecx,%ecx
		mov    %bh,0xf(%eax)
		xor    %eax,%eax
	jump_882fc:
		mov    EXPORT_SYMBOL(triangulation)+0x20,%edx
		add    %edi,%edx
		mov    0x4(%edx,%eax,1),%ebx
		sar    $0x10,%ebx
		cmp    %esi,%ebx
		jne    jump_882e4
		mov    $0x1,%al
		shl    %cl,%al
		or     %al,0xf(%edx)
		jmp    jump_882a5
	jump_88318:
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_init_crater_textures)	/* 0x0885B0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    EXPORT_SYMBOL(next_floor_texture),%dx
		xor    %eax,%eax
		mov    %dx,%ax
		mov    %eax,%ebx
		shl    $0x3,%eax
		add    %ebx,%eax
		mov    game_textures,%ebx
		movb   $0x0,0x8(%ebx,%eax,2)
		movb   $0x20,(%ebx,%eax,2)
		movb   $0x60,0x1(%ebx,%eax,2)
		movb   $0x3f,0x2(%ebx,%eax,2)
		movb   $0x60,0x3(%ebx,%eax,2)
		mov    %dx,crater_unkn_texture_flags
		movb   $0x3f,0x4(%ebx,%eax,2)
		xor    %ecx,%ecx
		movb   $0x7f,0x5(%ebx,%eax,2)
		inc    %edx
		movb   $0x20,0x6(%ebx,%eax,2)
		mov    %dx,%cx
		movb   $0x7f,0x7(%ebx,%eax,2)
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		movb   $0x2,0x8(%ebx,%eax,2)
		movb   $0xdf,(%ebx,%eax,2)
		movb   $0x20,0x1(%ebx,%eax,2)
		movb   $0xdf,0x2(%ebx,%eax,2)
		movb   $0x3f,0x3(%ebx,%eax,2)
		movb   $0xc0,0x4(%ebx,%eax,2)
		movb   $0x3f,0x5(%ebx,%eax,2)
		mov    %dx,data_1c42fe
		movb   $0xc0,0x6(%ebx,%eax,2)
		inc    %edx
		movb   $0x20,0x7(%ebx,%eax,2)
		xor    %eax,%eax
		mov    %dx,%ax
		lea    -0x1(%eax),%esi
		lea    0x0(,%esi,8),%ecx
		add    %esi,%ecx
		add    %ecx,%ecx
		lea    (%ecx,%ebx,1),%esi
		mov    %eax,%ecx
		shl    $0x3,%eax
		add    %ecx,%eax
		add    %eax,%eax
		xor    %ecx,%ecx
		lea    (%ebx,%eax,1),%edi
		movswl %dx,%eax
		inc    %edx
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsw  %ds:(%esi),%es:(%edi)
		mov    %dx,EXPORT_SYMBOL(next_floor_texture)
		call   rotate_texture
		mov    EXPORT_SYMBOL(next_floor_texture),%dx
		mov    %dx,%cx
		lea    -0x1(%ecx),%ebx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		mov    game_textures,%ebx
		add    %eax,%eax
		lea    (%ebx,%eax,1),%esi
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		add    %eax,%eax
		xor    %ecx,%ecx
		lea    (%ebx,%eax,1),%edi
		movswl %dx,%eax
		inc    %edx
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsw  %ds:(%esi),%es:(%edi)
		mov    %dx,EXPORT_SYMBOL(next_floor_texture)
		call   rotate_texture
		mov    EXPORT_SYMBOL(next_floor_texture),%dx
		mov    %dx,%cx
		lea    -0x1(%ecx),%ebx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		mov    game_textures,%edi
		add    %eax,%eax
		lea    (%edi,%eax,1),%esi
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		add    %eax,%eax
		add    %eax,%edi
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsw  %ds:(%esi),%es:(%edi)
		movswl %dx,%eax
		inc    %edx
		xor    %ebx,%ebx
		mov    %dx,EXPORT_SYMBOL(next_floor_texture)
		call   rotate_texture
		mov    EXPORT_SYMBOL(next_floor_texture),%dx
		mov    %dx,%bx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		mov    game_textures,%ebx
		movb   $0x2,0x8(%ebx,%eax,2)
		movb   $0xc0,(%ebx,%eax,2)
		movb   $0x60,0x1(%ebx,%eax,2)
		movb   $0xdf,0x2(%ebx,%eax,2)
		movb   $0x60,0x3(%ebx,%eax,2)
		xor    %ecx,%ecx
		movb   $0xdf,0x4(%ebx,%eax,2)
		inc    %edx
		movb   $0x7f,0x5(%ebx,%eax,2)
		mov    %dx,%cx
		movb   $0xc0,0x6(%ebx,%eax,2)
		lea    -0x1(%ecx),%esi
		movb   $0x7f,0x7(%ebx,%eax,2)
		lea    0x0(,%esi,8),%eax
		add    %esi,%eax
		add    %eax,%eax
		lea    (%ebx,%eax,1),%esi
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		add    %eax,%eax
		xor    %ecx,%ecx
		lea    (%ebx,%eax,1),%edi
		movswl %dx,%eax
		inc    %edx
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsw  %ds:(%esi),%es:(%edi)
		mov    %dx,EXPORT_SYMBOL(next_floor_texture)
		call   rotate_texture
		mov    EXPORT_SYMBOL(next_floor_texture),%dx
		mov    %dx,%cx
		lea    -0x1(%ecx),%ebx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		mov    game_textures,%edi
		add    %eax,%eax
		lea    (%edi,%eax,1),%esi
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		add    %eax,%eax
		xor    %ebx,%ebx
		add    %eax,%edi
		movswl %dx,%eax
		inc    %edx
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsw  %ds:(%esi),%es:(%edi)
		mov    %dx,EXPORT_SYMBOL(next_floor_texture)
		call   rotate_texture
		mov    EXPORT_SYMBOL(next_floor_texture),%dx
		mov    %dx,%bx
		lea    -0x1(%ebx),%ecx
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		mov    game_textures,%edi
		add    %eax,%eax
		lea    (%edi,%eax,1),%esi
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		add    %eax,%eax
		xor    %ebx,%ebx
		add    %eax,%edi
		movswl %dx,%eax
		inc    %edx
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsw  %ds:(%esi),%es:(%edi)
		mov    %dx,EXPORT_SYMBOL(next_floor_texture)
		call   rotate_texture
		mov    EXPORT_SYMBOL(next_floor_texture),%dx
		mov    %dx,%bx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		mov    game_textures,%ebx
		add    %eax,%eax
		add    %ebx,%eax
		movb   $0x0,0x8(%eax)
		movb   $0xe0,(%eax)
		movb   $0x20,0x1(%eax)
		movb   $0xff,0x2(%eax)
		movb   $0x20,0x3(%eax)
		movb   $0xff,0x4(%eax)
		movb   $0x3f,0x5(%eax)
		movb   $0xe0,0x6(%eax)
		inc    %edx
		xor    %ecx,%ecx
		mov    %dx,%cx
		lea    -0x1(%ecx),%esi
		movb   $0x3f,0x7(%eax)
		lea    0x0(,%esi,8),%eax
		add    %esi,%eax
		add    %eax,%eax
		lea    (%eax,%ebx,1),%esi
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		add    %eax,%eax
		lea    (%eax,%ebx,1),%edi
		movswl %dx,%eax
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsw  %ds:(%esi),%es:(%edi)
		inc    %edx
		xor    %edi,%edi
		mov    %dx,EXPORT_SYMBOL(next_floor_texture)
		call   rotate_texture
		mov    EXPORT_SYMBOL(next_floor_texture),%dx
		mov    %dx,%di
		lea    -0x1(%edi),%ebx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		mov    game_textures,%ebx
		add    %eax,%eax
		lea    (%ebx,%eax,1),%esi
		lea    0x0(,%edi,8),%eax
		add    %edi,%eax
		add    %eax,%eax
		xor    %ecx,%ecx
		lea    (%ebx,%eax,1),%edi
		movswl %dx,%eax
		inc    %edx
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsw  %ds:(%esi),%es:(%edi)
		mov    %dx,EXPORT_SYMBOL(next_floor_texture)
		call   rotate_texture
		mov    EXPORT_SYMBOL(next_floor_texture),%dx
		mov    %dx,%cx
		lea    -0x1(%ecx),%ebx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		mov    game_textures,%edi
		add    %eax,%eax
		mov    %ecx,%ebx
		lea    (%edi,%eax,1),%esi
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		add    %eax,%eax
		xor    %ecx,%ebx
		add    %eax,%edi
		movswl %dx,%eax
		inc    %edx
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsw  %ds:(%esi),%es:(%edi)
		mov    %dx,EXPORT_SYMBOL(next_floor_texture)
		call   rotate_texture
		mov    EXPORT_SYMBOL(next_floor_texture),%dx
		mov    %dx,%bx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		mov    game_textures,%ebx
		add    %eax,%eax
		add    %ebx,%eax
		movb   $0x0,0x8(%eax)
		movb   $0xc0,(%eax)
		movb   $0x20,0x1(%eax)
		movb   $0xdf,0x2(%eax)
		movb   $0x20,0x3(%eax)
		inc    %edx
		movb   $0xdf,0x4(%eax)
		xor    %ecx,%ecx
		movb   $0x3f,0x5(%eax)
		mov    %dx,%cx
		movb   $0xc0,0x6(%eax)
		lea    -0x1(%ecx),%esi
		movb   $0x3f,0x7(%eax)
		lea    0x0(,%esi,8),%eax
		add    %esi,%eax
		add    %eax,%eax
		lea    (%eax,%ebx,1),%esi
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		add    %eax,%eax
		lea    (%eax,%ebx,1),%edi
		movswl %dx,%eax
		xor    %ebx,%ebx
		inc    %edx
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsw  %ds:(%esi),%es:(%edi)
		mov    %dx,EXPORT_SYMBOL(next_floor_texture)
		call   rotate_texture
		mov    EXPORT_SYMBOL(next_floor_texture),%dx
		mov    %dx,%bx
		lea    -0x1(%ebx),%ecx
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		mov    game_textures,%ecx
		add    %eax,%eax
		lea    (%ecx,%eax,1),%esi
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		add    %eax,%eax
		xor    %ebx,%ebx
		lea    (%ecx,%eax,1),%edi
		movswl %dx,%eax
		inc    %edx
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsw  %ds:(%esi),%es:(%edi)
		mov    %dx,EXPORT_SYMBOL(next_floor_texture)
		call   rotate_texture
		mov    EXPORT_SYMBOL(next_floor_texture),%dx
		mov    %dx,%bx
		lea    -0x1(%ebx),%ecx
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		mov    game_textures,%edi
		add    %eax,%eax
		lea    (%edi,%eax,1),%esi
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		add    %eax,%eax
		xor    %ebx,%ebx
		add    %eax,%edi
		movswl %dx,%eax
		inc    %edx
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsw  %ds:(%esi),%es:(%edi)
		mov    %dx,EXPORT_SYMBOL(next_floor_texture)
		call   rotate_texture
		mov    EXPORT_SYMBOL(next_floor_texture),%dx
		mov    %dx,%bx
		lea    0x0(,%ebx,8),%eax
		add    %eax,%ebx
		mov    game_textures,%eax
		add    %ebx,%ebx
		movb   $0x2,0x8(%ebx,%eax,1)
		movb   $0xff,(%ebx,%eax,1)
		movb   $0x20,0x1(%ebx,%eax,1)
		movb   $0xff,0x2(%ebx,%eax,1)
		movb   $0x3f,0x3(%ebx,%eax,1)
		movb   $0xe0,0x4(%ebx,%eax,1)
		movb   $0x3f,0x5(%ebx,%eax,1)
		movb   $0xe0,0x6(%ebx,%eax,1)
		movb   $0x20,0x7(%ebx,%eax,1)
		movswl %dx,%eax
		mov    %dx,data_1c4300
		call   rotate_texture
		mov    EXPORT_SYMBOL(next_floor_texture),%dx
		xor    %ecx,%ecx
		inc    %edx
		mov    %dx,%cx
		lea    -0x1(%ecx),%ebx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		mov    game_textures,%edi
		add    %eax,%eax
		lea    (%edi,%eax,1),%esi
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		add    %eax,%eax
		add    %eax,%edi
		movswl %dx,%eax
		inc    %edx
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsw  %ds:(%esi),%es:(%edi)
		mov    %dx,EXPORT_SYMBOL(next_floor_texture)
		call   rotate_texture
		mov    EXPORT_SYMBOL(next_floor_texture),%dx
		xor    %edi,%edi
		mov    %dx,%di
		lea    -0x1(%edi),%ebx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		mov    game_textures,%ecx
		add    %eax,%eax
		lea    (%ecx,%eax,1),%esi
		lea    0x0(,%edi,8),%eax
		add    %edi,%eax
		add    %eax,%eax
		lea    (%ecx,%eax,1),%edi
		movswl %dx,%eax
		xor    %ecx,%ecx
		inc    %edx
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsw  %ds:(%esi),%es:(%edi)
		mov    %dx,EXPORT_SYMBOL(next_floor_texture)
		call   rotate_texture
		mov    EXPORT_SYMBOL(next_floor_texture),%dx
		mov    %dx,%cx
		lea    -0x1(%ecx),%ebx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		mov    game_textures,%edi
		add    %eax,%eax
		lea    (%edi,%eax,1),%esi
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		add    %eax,%eax
		xor    %ebx,%ebx
		add    %eax,%edi
		movswl %dx,%eax
		inc    %edx
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsw  %ds:(%esi),%es:(%edi)
		mov    %dx,EXPORT_SYMBOL(next_floor_texture)
		call   rotate_texture
		mov    EXPORT_SYMBOL(next_floor_texture),%dx
		mov    %dx,%bx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		mov    game_textures,%ebx
		add    %eax,%eax
		add    %ebx,%eax
		movb   $0x2,0x8(%eax)
		movb   $0xe0,(%eax)
		movb   $0x60,0x1(%eax)
		movb   $0xff,0x2(%eax)
		movb   $0x60,0x3(%eax)
		movb   $0xff,0x4(%eax)
		movb   $0x7f,0x5(%eax)
		movb   $0xe0,0x6(%eax)
		inc    %edx
		xor    %ecx,%ecx
		mov    %dx,%cx
		lea    -0x1(%ecx),%esi
		movb   $0x7f,0x7(%eax)
		lea    0x0(,%esi,8),%eax
		add    %esi,%eax
		add    %eax,%eax
		lea    (%eax,%ebx,1),%esi
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		add    %eax,%eax
		lea    (%eax,%ebx,1),%edi
		xor    %ecx,%ecx
		movswl %dx,%eax
		inc    %edx
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsw  %ds:(%esi),%es:(%edi)
		mov    %dx,EXPORT_SYMBOL(next_floor_texture)
		call   rotate_texture
		mov    EXPORT_SYMBOL(next_floor_texture),%dx
		mov    %dx,%cx
		lea    -0x1(%ecx),%ebx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		mov    game_textures,%edi
		add    %eax,%eax
		lea    (%edi,%eax,1),%esi
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		add    %eax,%eax
		xor    %ecx,%ecx
		add    %eax,%edi
		movswl %dx,%eax
		inc    %edx
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsw  %ds:(%esi),%es:(%edi)
		mov    %dx,EXPORT_SYMBOL(next_floor_texture)
		call   rotate_texture
		mov    EXPORT_SYMBOL(next_floor_texture),%dx
		mov    %dx,%cx
		lea    -0x1(%ecx),%ebx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		mov    game_textures,%edi
		add    %eax,%eax
		lea    (%edi,%eax,1),%esi
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		add    %eax,%eax
		xor    %ebx,%ebx
		add    %eax,%edi
		movswl %dx,%eax
		inc    %edx
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsw  %ds:(%esi),%es:(%edi)
		mov    %dx,EXPORT_SYMBOL(next_floor_texture)
		call   rotate_texture
		mov    EXPORT_SYMBOL(next_floor_texture),%dx
		mov    %dx,%bx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		mov    game_textures,%ebx
		add    %eax,%eax
		add    %ebx,%eax
		movb   $0x0,0x8(%eax)
		movb   $0xe0,(%eax)
		movb   $0x60,0x1(%eax)
		movb   $0xff,0x2(%eax)
		movb   $0x60,0x3(%eax)
		inc    %edx
		movb   $0xff,0x4(%eax)
		xor    %ecx,%ecx
		movb   $0x7f,0x5(%eax)
		mov    %dx,%cx
		movb   $0xe0,0x6(%eax)
		lea    -0x1(%ecx),%esi
		movb   $0x7f,0x7(%eax)
		lea    0x0(,%esi,8),%eax
		add    %esi,%eax
		add    %eax,%eax
		lea    (%eax,%ebx,1),%esi
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		add    %eax,%eax
		xor    %ecx,%ecx
		lea    (%ebx,%eax,1),%edi
		movswl %dx,%eax
		inc    %edx
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsw  %ds:(%esi),%es:(%edi)
		mov    %dx,EXPORT_SYMBOL(next_floor_texture)
		call   rotate_texture
		mov    EXPORT_SYMBOL(next_floor_texture),%dx
		mov    %dx,%cx
		lea    -0x1(%ecx),%ebx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		mov    game_textures,%edi
		add    %eax,%eax
		lea    (%edi,%eax,1),%esi
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		add    %eax,%eax
		add    %eax,%edi
		movswl %dx,%eax
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsw  %ds:(%esi),%es:(%edi)
		inc    %edx
		xor    %esi,%esi
		mov    %dx,EXPORT_SYMBOL(next_floor_texture)
		call   rotate_texture
		mov    EXPORT_SYMBOL(next_floor_texture),%dx
		mov    %dx,%si
		lea    -0x1(%esi),%ebx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		mov    game_textures,%ebx
		add    %eax,%eax
		lea    (%ebx,%eax,1),%ecx
		lea    0x0(,%esi,8),%eax
		add    %esi,%eax
		add    %eax,%eax
		mov    %ecx,%esi
		lea    (%ebx,%eax,1),%edi
		movswl %dx,%eax
		inc    %edx
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsw  %ds:(%esi),%es:(%edi)
		mov    %dx,EXPORT_SYMBOL(next_floor_texture)
		call   rotate_texture
		mov    EXPORT_SYMBOL(next_floor_texture),%dx
		xor    %eax,%eax
		mov    %dx,%ax
		mov    %eax,%ebx
		shl    $0x3,%eax
		add    %eax,%ebx
		mov    game_textures,%eax
		add    %ebx,%ebx
		movb   $0x0,0x8(%ebx,%eax,1)
		movb   $0xc0,(%ebx,%eax,1)
		movb   $0x60,0x1(%ebx,%eax,1)
		movb   $0xdf,0x2(%ebx,%eax,1)
		xor    %ecx,%ecx
		movb   $0x60,0x3(%ebx,%eax,1)
		inc    %edx
		movb   $0xdf,0x4(%ebx,%eax,1)
		mov    %dx,%cx
		movb   $0x7f,0x5(%ebx,%eax,1)
		lea    -0x1(%ecx),%esi
		movb   $0xc0,0x6(%ebx,%eax,1)
		lea    0x0(,%ecx,8),%edi
		movb   $0x7f,0x7(%ebx,%eax,1)
		add    %ecx,%edi
		lea    0x0(,%esi,8),%ebx
		add    %edi,%edi
		add    %esi,%ebx
		xor    %ecx,%ecx
		add    %ebx,%ebx
		add    %eax,%edi
		lea    (%ebx,%eax,1),%esi
		movswl %dx,%eax
		inc    %edx
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsw  %ds:(%esi),%es:(%edi)
		mov    %dx,EXPORT_SYMBOL(next_floor_texture)
		call   rotate_texture
		mov    EXPORT_SYMBOL(next_floor_texture),%dx
		mov    %dx,%cx
		lea    -0x1(%ecx),%ebx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		mov    game_textures,%ebx
		add    %eax,%eax
		lea    (%ebx,%eax,1),%esi
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		add    %eax,%eax
		lea    (%ebx,%eax,1),%edi
		movswl %dx,%eax
		xor    %ebx,%ebx
		inc    %edx
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsw  %ds:(%esi),%es:(%edi)
		mov    %dx,EXPORT_SYMBOL(next_floor_texture)
		call   rotate_texture
		mov    EXPORT_SYMBOL(next_floor_texture),%dx
		mov    %dx,%bx
		lea    -0x1(%ebx),%ecx
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		mov    game_textures,%ecx
		add    %eax,%eax
		lea    (%ecx,%eax,1),%esi
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		add    %eax,%eax
		lea    (%ecx,%eax,1),%edi
		movswl %dx,%eax
		inc    %edx
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsw  %ds:(%esi),%es:(%edi)
		mov    %dx,EXPORT_SYMBOL(next_floor_texture)
		call   rotate_texture
		mov    EXPORT_SYMBOL(next_floor_texture),%dx
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
is_that_a_sea_texture:	/* 0x088FF0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		mov    %eax,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		mov    game_textures,%edx
		add    %eax,%eax
		add    %edx,%eax
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    (%eax),%bl
		mov    0x2(%eax),%dl
		cmp    %edx,%ebx
		jge    jump_89013
		mov    %ebx,%edx
	jump_89013:
		xor    %ebx,%ebx
		mov    0x4(%eax),%bl
		cmp    %ebx,%edx
		jl     jump_8901e
		mov    %ebx,%edx
	jump_8901e:
		xor    %ebx,%ebx
		mov    0x6(%eax),%bl
		cmp    %ebx,%edx
		jl     jump_89029
		mov    %ebx,%edx
	jump_89029:
		mov    %edx,%ecx
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    0x1(%eax),%bl
		mov    0x3(%eax),%dl
		cmp    %edx,%ebx
		jge    jump_8903b
		mov    %ebx,%edx
	jump_8903b:
		xor    %ebx,%ebx
		mov    0x5(%eax),%bl
		cmp    %ebx,%edx
		jl     jump_89046
		mov    %ebx,%edx
	jump_89046:
		xor    %ebx,%ebx
		mov    0x7(%eax),%bl
		cmp    %ebx,%edx
		jl     jump_89051
		mov    %ebx,%edx
	jump_89051:
		sar    $0x5,%edx
		mov    %ecx,%ebx
		shl    $0x3,%edx
		sar    $0x5,%ebx
		mov    0x8(%eax),%al
		add    %ebx,%edx
		and    $0xff,%eax
		shl    $0x6,%eax
		mov    textwalk_data(%edx,%eax,1),%al
		and    $0x2,%al
		and    $0xff,%eax
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
unkstruct03_do_iteration:	/* 0x08907C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x54,%esp
		mov    %al,0x44(%esp)
		xor    %eax,%eax
		mov    0x44(%esp),%al
		shl    $0x3,%eax
		mov    data_1c430a(%eax),%cx
		xor    %edx,%edx
		inc    %ecx
		mov    %edx,0x28(%esp)
		mov    %cx,data_1c430a(%eax)
		mov    %edx,0x2c(%esp)
		mov    data_1c4308(%eax),%edx
		sar    $0x10,%edx
		cmp    $0x5,%edx
		jle    jump_890e8
		incb   unkstruct03_first
		mov    data_1c4765,%eax
		sar    $0x18,%eax
		test   %eax,%eax
		jge    jump_890d3
		xor    %dh,%dh
		mov    %dh,unkstruct03_first
	jump_890d3:
		xor    %eax,%eax
		mov    0x44(%esp),%al
		xor    %ebx,%ebx
		mov    %bx,data_1c430a(,%eax,8)
		jmp    jump_89cdf
	jump_890e8:
		mov    data_1c4306(%eax),%eax
		sar    $0x10,%eax
		imul   %eax,%edx
		mov    $0x5,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %ax,0x3c(%esp)
		mov    EXPORT_SYMBOL(scratch_buf1),%eax
		mov    $0x4000,%ebx
		mov    %eax,0x10(%esp)
		add    $0x8000,%eax
		xor    %edx,%edx
		mov    %eax,0x14(%esp)
		call   ac_memset
		mov    0x3a(%esp),%ebx
		sar    $0x10,%ebx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		mov    %eax,%edx
		mov    $0x7,%ecx
		sar    $0x1f,%edx
		idiv   %ecx
		mov    $0xa,%ecx
		mov    %ax,0x38(%esp)
		mov    %ebx,%edx
		mov    %ebx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %al,0x4c(%esp)
		xor    %eax,%eax
		mov    0x4c(%esp),%al
		cmp    $0x3,%eax
		jge    jump_89166
		movb   $0x3,0x4c(%esp)
	jump_89166:
		xor    %edx,%edx
		mov    0x44(%esp),%dl
		mov    data_1c4302(,%edx,8),%eax
		sar    $0x10,%eax
		lea    -0x1(%eax),%ebx
		inc    %eax
		mov    %eax,0x1c(%esp)
		mov    unkstruct03_arr(,%edx,8),%eax
		sar    $0x10,%eax
		lea    -0x1(%eax),%edx
		mov    %ebx,0x18(%esp)
		inc    %eax
		mov    %edx,0x20(%esp)
		mov    %eax,0x24(%esp)
		test   %ebx,%ebx
		jge    jump_891a2
		xor    %ebx,%ebx
		mov    %ebx,0x18(%esp)
	jump_891a2:
		cmpl   $0x80,0x18(%esp)
		jl     jump_891b4
		movl   $0x7f,0x18(%esp)
	jump_891b4:
		cmpl   $0x0,0x1c(%esp)
		jge    jump_891c1
		xor    %ebp,%ebp
		mov    %ebp,0x1c(%esp)
	jump_891c1:
		cmpl   $0x80,0x1c(%esp)
		jl     jump_891d3
		movl   $0x7f,0x1c(%esp)
	jump_891d3:
		cmpl   $0x0,0x20(%esp)
		jge    jump_891e0
		xor    %ecx,%ecx
		mov    %ecx,0x20(%esp)
	jump_891e0:
		cmpl   $0x80,0x20(%esp)
		jl     jump_891f2
		movl   $0x7f,0x20(%esp)
	jump_891f2:
		cmpl   $0x0,0x24(%esp)
		jge    jump_891ff
		xor    %eax,%eax
		mov    %eax,0x24(%esp)
	jump_891ff:
		cmpl   $0x80,0x24(%esp)
		jl     jump_89211
		movl   $0x7f,0x24(%esp)
	jump_89211:
		xor    %eax,%eax
		mov    0x44(%esp),%al
		mov    data_1c4306(,%eax,8),%dx
		mov    unkstruct03_arr(,%eax,8),%si
		xor    %eax,%eax
		mov    0x2c(%esp),%ax
		mov    0x10(%esp),%ecx
		add    %eax,%eax
		shl    $0x7,%edx
		add    %ecx,%eax
		add    %esi,%edx
		mov    %dx,(%eax)
		xor    %eax,%eax
		mov    0x28(%esp),%ax
		mov    0x2c(%esp),%edi
		add    %eax,%eax
		inc    %edi
		add    %ecx,%eax
		mov    %edi,0x2c(%esp)
		mov    0x14(%esp),%edi
		movswl (%eax),%eax
		add    %edi,%eax
		mov    0x2c(%esp),%edx
		movb   $0x1,(%eax)
		cmp    0x28(%esp),%dx
		je     jump_897d6
	jump_8926d:
		xor    %ebx,%ebx
		mov    0x28(%esp),%bx
		mov    0x10(%esp),%ebp
		add    %ebx,%ebx
		add    %ebp,%ebx
		movswl (%ebx),%eax
		test   %eax,%eax
		jl     jump_897c0
		cmp    $0x8000,%eax
		jge    jump_897c0
		imul   $0x12,%eax,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    (%edx,%eax,1),%ax
		and    $0x3f,%ah
		cwtl
		call   is_that_a_sea_texture
		test   %eax,%eax
		jne    jump_897c0
		movswl (%ebx),%eax
		imul   $0x12,%eax,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%ecx
		andw   $0xc000,(%ecx,%eax,1)
		movswl (%ebx),%eax
		imul   $0x12,%eax,%eax
		mov    crater_unkn_texture_flags,%dx
		or     %dx,(%ecx,%eax,1)
		movswl (%ebx),%eax
		imul   $0x12,%eax,%eax
		andb   $0xf,0x11(%ecx,%eax,1)
		mov    0x14(%esp),%eax
		movswl (%ebx),%edi
		mov    (%edi,%eax,1),%al
		mov    %al,0x48(%esp)
		xor    %eax,%eax
		mov    0x44(%esp),%al
		xor    %edx,%edx
		mov    data_1c4306(,%eax,8),%esi
		mov    0x48(%esp),%dl
		sar    $0x10,%esi
		imul   %esi,%edx
		movzbl 0x4c(%esp),%ebp
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebp
		sub    %eax,%esi
		movswl %si,%edx
		mov    $0x5,%esi
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %esi
		imul   $0x12,%edi,%edi
		mov    %eax,%edx
		call   ac_LbRandomAnyShort
		and    $0xffff,%eax
		add    %eax,%edx
		and    $0xf,%edx
		mov    0x4(%ecx,%edi,1),%eax
		sar    $0x3,%edx
		sar    $0x10,%eax
		sub    %edx,%eax
		mov    %ax,0x6(%ecx,%edi,1)
		movswl (%ebx),%eax
		imul   $0x12,%eax,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%esi
		mov    0x8(%esi,%eax,1),%si
		test   %si,%si
		je     jump_89488
	jump_89361:
		movswl %si,%eax
		test   %eax,%eax
		jle    jump_8942e
		imul   $0xa8,%eax,%ebp
		mov    things,%edi
		add    %ebp,%edi
		xor    %eax,%eax
		mov    0x9(%edi),%al
		cmp    $0x3,%eax
		jne    jump_8941e
		xor    %eax,%eax
		mov    0x28(%esp),%ax
		mov    0x10(%esp),%edx
		add    %eax,%eax
		add    %edx,%eax
		movswl (%eax),%ebx
		mov    $0x80,%ecx
		mov    %ebx,%edx
		mov    %ebx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		shl    $0x8,%edx
		add    %edx,%ecx
		mov    %ebx,%edx
		mov    %ebx,%eax
		sar    $0x1f,%edx
		shl    $0x7,%edx
		sbb    %edx,%eax
		sar    $0x7,%eax
		mov    0x18(%edi),%edx
		sar    $0x8,%edx
		sub    %ecx,%edx
		shl    $0x8,%eax
		mov    %edx,%ecx
		mov    0x20(%edi),%edx
		add    $0x80,%eax
		sar    $0x8,%edx
		sub    %eax,%edx
		push   $0x9
		mov    %edx,%eax
		xor    %edx,%edx
		cwtl
		push   %edx
		movswl %cx,%ebx
		push   %eax
		movswl %dx,%eax
		mov    $0x258,%edx
		mov    %eax,%ecx
		mov    %edi,%eax
		call   ac_person_hit_by_bullet
		mov    things,%eax
		andb   $0xdf,0x47(%eax,%ebp,1)
		mov    0x20(%eax,%ebp,1),%edx
		mov    0x18(%eax,%ebp,1),%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		movswl %dx,%edx
		cwtl
		call   ac_alt_at_point
		mov    things,%edx
		mov    %eax,0x1c(%edx,%ebp,1)
	jump_8941e:
		movswl %si,%eax
		imul   $0xa8,%eax,%edx
		mov    things,%eax
		jmp    jump_8947a
	jump_8942e:
		imul   $0x3c,%eax,%ebx
		mov    EXPORT_SYMBOL(sthings),%eax
		add    %ebx,%eax
		call   can_the_tank_run_over
		test   %eax,%eax
		je     jump_8946e
		mov    EXPORT_SYMBOL(sthings),%eax
		mov    0x20(%ebx,%eax,1),%edx
		mov    0x18(%ebx,%eax,1),%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		movswl %dx,%edx
		cwtl
		call   ac_alt_at_point
		mov    %eax,%edx
		mov    EXPORT_SYMBOL(sthings),%eax
		add    %ebx,%eax
		mov    %edx,0x1c(%eax)
		call   ac_set_static_on_fire
	jump_8946e:
		movswl %si,%eax
		imul   $0x3c,%eax,%eax
		mov    EXPORT_SYMBOL(sthings),%edx
	jump_8947a:
		mov    0x2(%edx,%eax,1),%si
		test   %si,%si
		jne    jump_89361
	jump_89488:
		xor    %edx,%edx
		mov    0x3a(%esp),%ebx
		mov    0x48(%esp),%dl
		sar    $0x10,%ebx
		imul   %ebx,%edx
		xor    %ecx,%ecx
		mov    0x4c(%esp),%cl
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    0x3c(%esp),%edi
		sub    %eax,%ebx
		cmp    %di,%bx
		jne    jump_894b1
		dec    %ebx
	jump_894b1:
		mov    0x48(%esp),%al
		cmp    0x4c(%esp),%al
		jae    jump_897c0
		xor    %esi,%esi
		mov    %al,%cl
		mov    0x28(%esp),%si
		mov    0x10(%esp),%eax
		add    %esi,%esi
		inc    %cl
		add    %eax,%esi
		mov    %cl,0x48(%esp)
		movswl (%esi),%ecx
		mov    $0x80,%edi
		mov    %ecx,%edx
		mov    %ecx,%eax
		sar    $0x1f,%edx
		idiv   %edi
		test   %edx,%edx
		je     jump_89581
		add    0x14(%esp),%ecx
		cmpb   $0x0,-0x1(%ecx)
		jne    jump_89581
		mov    0x3a(%esp),%ecx
		movswl %bx,%edx
		sar    $0x10,%ecx
		sub    %edx,%ecx
		xor    %edx,%edx
		call   ac_LbRandomAnyShort
		mov    %ax,%dx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    0x36(%esp),%eax
		sar    $0x10,%eax
		cmp    %eax,%edx
		jge    jump_89581
		mov    0x2c(%esp),%ecx
		xor    %edx,%edx
		inc    %ecx
		mov    0x2c(%esp),%dx
		mov    %ecx,0x2c(%esp)
		add    %edx,%edx
		mov    0x10(%esp),%ecx
		mov    (%esi),%ax
		add    %ecx,%edx
		dec    %eax
		mov    %ax,(%edx)
		movswl (%esi),%eax
		add    0x14(%esp),%eax
		mov    0x48(%esp),%dl
		mov    %dl,-0x1(%eax)
		xor    %edx,%edx
		mov    0x2c(%esp),%dx
		add    %edx,%edx
		add    %ecx,%edx
		movswl -0x2(%edx),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %edi
		mov    0x18(%esp),%ebp
		cmp    %ebp,%edx
		jne    jump_89581
		lea    -0x1(%ebp),%eax
		mov    %eax,0x18(%esp)
		test   %eax,%eax
		jge    jump_89581
		xor    %ecx,%ecx
		mov    %ecx,0x18(%esp)
	jump_89581:
		xor    %eax,%eax
		mov    0x28(%esp),%ax
		mov    0x10(%esp),%esi
		add    %eax,%eax
		add    %eax,%esi
		movswl (%esi),%ecx
		mov    $0x80,%edi
		mov    %ecx,%edx
		mov    %ecx,%eax
		sar    $0x1f,%edx
		idiv   %edi
		cmp    $0x7f,%edx
		jge    jump_89644
		add    0x14(%esp),%ecx
		cmpb   $0x0,0x1(%ecx)
		jne    jump_89644
		mov    0x3a(%esp),%ecx
		movswl %bx,%eax
		sar    $0x10,%ecx
		xor    %edx,%edx
		sub    %eax,%ecx
		call   ac_LbRandomAnyShort
		mov    %ax,%dx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    0x36(%esp),%eax
		sar    $0x10,%eax
		cmp    %eax,%edx
		jge    jump_89644
		xor    %eax,%eax
		mov    0x2c(%esp),%ax
		mov    0x10(%esp),%ebp
		add    %eax,%eax
		mov    (%esi),%dx
		add    %ebp,%eax
		inc    %edx
		mov    %dx,(%eax)
		mov    0x14(%esp),%edx
		movswl (%esi),%eax
		mov    0x2c(%esp),%edi
		add    %edx,%eax
		mov    0x48(%esp),%dl
		inc    %edi
		mov    %dl,0x1(%eax)
		xor    %eax,%eax
		mov    %di,%ax
		add    %eax,%eax
		add    %ebp,%eax
		movswl -0x2(%eax),%edx
		mov    $0x80,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    0x1c(%esp),%esi
		mov    %edi,0x2c(%esp)
		cmp    %esi,%edx
		jne    jump_89644
		lea    0x1(%esi),%edi
		mov    %edi,0x1c(%esp)
		cmp    $0x7f,%edi
		jle    jump_89644
		movl   $0x7f,0x1c(%esp)
	jump_89644:
		xor    %eax,%eax
		mov    0x28(%esp),%ax
		mov    0x10(%esp),%ecx
		add    %eax,%eax
		add    %eax,%ecx
		movswl (%ecx),%eax
		cmp    $0x80,%eax
		jl     jump_89700
		add    0x14(%esp),%eax
		cmpb   $0x0,-0x80(%eax)
		jne    jump_89700
		mov    0x3a(%esp),%esi
		movswl %bx,%eax
		sar    $0x10,%esi
		xor    %edx,%edx
		sub    %eax,%esi
		call   ac_LbRandomAnyShort
		mov    %ax,%dx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %esi
		mov    0x36(%esp),%eax
		sar    $0x10,%eax
		cmp    %eax,%edx
		jge    jump_89700
		mov    0x2c(%esp),%esi
		xor    %eax,%eax
		inc    %esi
		mov    0x2c(%esp),%ax
		mov    %esi,0x2c(%esp)
		add    %eax,%eax
		mov    0x10(%esp),%esi
		mov    (%ecx),%dx
		add    %esi,%eax
		sub    $0x80,%edx
		mov    %dx,(%eax)
		mov    0x14(%esp),%edi
		movswl (%ecx),%eax
		add    %edi,%eax
		mov    0x48(%esp),%dl
		mov    %dl,-0x80(%eax)
		xor    %eax,%eax
		mov    0x2c(%esp),%ax
		add    %eax,%eax
		add    %esi,%eax
		movswl -0x2(%eax),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x7,%edx
		sbb    %edx,%eax
		sar    $0x7,%eax
		mov    0x20(%esp),%edx
		cmp    %edx,%eax
		jne    jump_89700
		lea    -0x1(%edx),%ecx
		mov    %ecx,0x20(%esp)
		test   %ecx,%ecx
		jge    jump_89700
		xor    %edi,%edi
		mov    %edi,0x20(%esp)
	jump_89700:
		xor    %ecx,%ecx
		mov    0x28(%esp),%cx
		mov    0x10(%esp),%ebp
		add    %ecx,%ecx
		add    %ebp,%ecx
		movswl (%ecx),%eax
		cmp    $0x3f80,%eax
		jge    jump_897c0
		add    0x14(%esp),%eax
		cmpb   $0x0,0x80(%eax)
		jne    jump_897c0
		mov    0x3a(%esp),%edx
		sar    $0x10,%edx
		movswl %bx,%eax
		mov    %edx,%ebx
		sub    %eax,%ebx
		xor    %edx,%edx
		call   ac_LbRandomAnyShort
		mov    %ax,%dx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    0x36(%esp),%eax
		sar    $0x10,%eax
		cmp    %eax,%edx
		jge    jump_897c0
		xor    %eax,%eax
		mov    0x2c(%esp),%ax
		add    %eax,%eax
		mov    (%ecx),%dx
		add    %ebp,%eax
		add    $0x80,%edx
		mov    %dx,(%eax)
		movswl (%ecx),%eax
		mov    0x14(%esp),%ecx
		mov    0x2c(%esp),%edi
		add    %ecx,%eax
		mov    0x48(%esp),%dl
		inc    %edi
		mov    %dl,0x80(%eax)
		xor    %eax,%eax
		mov    %ebp,%edx
		mov    %di,%ax
		movswl -0x2(%edx,%eax,2),%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x7,%edx
		sbb    %edx,%eax
		sar    $0x7,%eax
		mov    0x24(%esp),%esi
		mov    %edi,0x2c(%esp)
		cmp    %esi,%eax
		jne    jump_897c0
		lea    0x1(%esi),%edi
		mov    %edi,0x24(%esp)
		cmp    $0x7f,%edi
		jle    jump_897c0
		movl   $0x7f,0x24(%esp)
	jump_897c0:
		mov    0x28(%esp),%ecx
		inc    %ecx
		mov    0x2c(%esp),%esi
		mov    %ecx,0x28(%esp)
		cmp    %si,%cx
		jne    jump_8926d
	jump_897d6:
		mov    0x20(%esp),%eax
		mov    %ax,0x30(%esp)
		jmp    jump_897e6
	jump_897e1:
		incw   0x30(%esp)
	jump_897e6:
		mov    0x2e(%esp),%eax
		mov    0x24(%esp),%ebx
		sar    $0x10,%eax
		cmp    %ebx,%eax
		jg     jump_8994c
		mov    0x18(%esp),%esi
		jmp    jump_89800
	jump_897ff:
		inc    %esi
	jump_89800:
		mov    0x1c(%esp),%ecx
		movswl %si,%eax
		cmp    %ecx,%eax
		jg     jump_897e1
		test   %eax,%eax
		jl     jump_897ff
		cmp    $0x80,%eax
		jge    jump_897ff
		mov    0x2e(%esp),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		jl     jump_897ff
		cmp    $0x80,%edx
		jge    jump_897ff
		shl    $0x7,%edx
		add    %edx,%eax
		imul   $0x12,%eax,%ebx
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    (%edx,%ebx,1),%bx
		and    $0x3f,%bh
		movswl %bx,%ecx
		xor    %ebx,%ebx
		mov    crater_unkn_texture_flags,%bx
		cmp    %ebx,%ecx
		je     jump_897ff
		lea    0x1(%eax),%ecx
		imul   $0x12,%ecx,%ecx
		mov    (%ecx,%edx,1),%cx
		and    $0x3f,%ch
		movswl %cx,%ecx
		cmp    %ebx,%ecx
		sete   %cl
		mov    %cl,0x50(%esp)
		mov    %cl,(%esp)
		lea    -0x1(%eax),%ecx
		imul   $0x12,%ecx,%ecx
		lea    0x80(%eax),%ebp
		imul   $0x12,%ebp,%ebp
		add    %edx,%ebp
		mov    0x0(%ebp),%di
		mov    (%ecx,%edx,1),%cx
		and    $0x3fff,%edi
		and    $0x3f,%ch
		mov    %di,0x40(%esp)
		movswl %cx,%ecx
		mov    0x3e(%esp),%edi
		cmp    %ebx,%ecx
		sete   %cl
		sar    $0x10,%edi
		mov    %cl,0x1(%esp)
		cmp    %ebx,%edi
		sete   %ch
		lea    -0x80(%eax),%edi
		imul   $0x12,%edi,%edi
		mov    (%edx,%edi,1),%dx
		and    $0x3f,%dh
		movswl %dx,%edx
		mov    %ch,0x2(%esp)
		cmp    %ebx,%edx
		sete   %dl
		mov    0x50(%esp),%bh
		mov    %dl,0x3(%esp)
		test   %bh,%bh
		je     jump_898d6
		test   %cl,%cl
		je     jump_898d6
		test   %ch,%ch
		jne    jump_8991f
	jump_898d6:
		cmpb   $0x0,(%esp)
		je     jump_898ea
		cmpb   $0x0,0x1(%esp)
		je     jump_898ea
		cmpb   $0x0,0x3(%esp)
		jne    jump_8991f
	jump_898ea:
		cmpb   $0x0,0x1(%esp)
		je     jump_898ff
		cmpb   $0x0,0x2(%esp)
		je     jump_898ff
		cmpb   $0x0,0x3(%esp)
		jne    jump_8991f
	jump_898ff:
		cmpb   $0x0,(%esp)
		je     jump_897ff
		cmpb   $0x0,0x2(%esp)
		je     jump_897ff
		cmpb   $0x0,0x3(%esp)
		je     jump_897ff
	jump_8991f:
		imul   $0x12,%eax,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		add    %edx,%eax
		andw   $0xc000,(%eax)
		mov    crater_unkn_texture_flags,%dx
		mov    (%eax),%bx
		or     %edx,%ebx
		mov    0x11(%eax),%dh
		mov    %bx,(%eax)
		and    $0xf,%dh
		mov    %dh,0x11(%eax)
		jmp    jump_897ff
	jump_8994c:
		mov    0x20(%esp),%eax
		mov    %ax,0x34(%esp)
		jmp    jump_8995c
	jump_89957:
		incw   0x34(%esp)
	jump_8995c:
		mov    0x32(%esp),%eax
		mov    0x24(%esp),%esi
		sar    $0x10,%eax
		cmp    %esi,%eax
		jg     jump_89cdf
		mov    0x18(%esp),%edi
		jmp    jump_89b2d
	jump_89978:
		cmpb   $0x0,0x1(%esp)
		je     jump_899a8
		cmpb   $0x0,0x5(%esp)
		je     jump_899a8
		imul   $0x12,%eax,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0x11(%edx,%eax,1),%ch
		and    $0xf,%ch
		mov    %ch,%bl
		mov    %ch,0x11(%edx,%eax,1)
		or     $0x90,%bl
		mov    %bl,0x11(%edx,%eax,1)
		jmp    jump_89b2c
	jump_899a8:
		cmpb   $0x0,0x3(%esp)
		je     jump_899d8
		cmpb   $0x0,0x1(%esp)
		je     jump_899d8
		imul   $0x12,%eax,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0x11(%edx,%eax,1),%bh
		and    $0xf,%bh
		mov    %bh,%cl
		mov    %bh,0x11(%edx,%eax,1)
		or     $0x60,%cl
		mov    %cl,0x11(%edx,%eax,1)
		jmp    jump_89b2c
	jump_899d8:
		cmpb   $0x0,0x7(%esp)
		je     jump_89a08
		cmpb   $0x0,0x3(%esp)
		je     jump_89a08
		imul   $0x12,%eax,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0x11(%edx,%eax,1),%ch
		and    $0xf,%ch
		mov    %ch,%bl
		mov    %ch,0x11(%edx,%eax,1)
		or     $0x30,%bl
		mov    %bl,0x11(%edx,%eax,1)
		jmp    jump_89b2c
	jump_89a08:
		imul   $0x12,%eax,%eax
		cmpb   $0x0,0x7(%esp)
		je     jump_89a31
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0x11(%edx,%eax,1),%bh
		and    $0xf,%bh
		mov    %bh,%cl
		mov    %bh,0x11(%edx,%eax,1)
		or     $0x10,%cl
		mov    %cl,0x11(%edx,%eax,1)
		jmp    jump_89b2c
	jump_89a31:
		cmpb   $0x0,0x5(%esp)
		je     jump_89a57
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0x11(%edx,%eax,1),%ch
		and    $0xf,%ch
		mov    %ch,%bl
		mov    %ch,0x11(%edx,%eax,1)
		or     $0xa0,%bl
		mov    %bl,0x11(%edx,%eax,1)
		jmp    jump_89b2c
	jump_89a57:
		cmpb   $0x0,0x1(%esp)
		je     jump_89a7d
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0x11(%edx,%eax,1),%bh
		and    $0xf,%bh
		mov    %bh,%cl
		mov    %bh,0x11(%edx,%eax,1)
		or     $0x70,%cl
		mov    %cl,0x11(%edx,%eax,1)
		jmp    jump_89b2c
	jump_89a7d:
		cmpb   $0x0,0x3(%esp)
		je     jump_89aa3
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0x11(%edx,%eax,1),%ch
		and    $0xf,%ch
		mov    %ch,%bl
		mov    %ch,0x11(%edx,%eax,1)
		or     $0x40,%bl
		mov    %bl,0x11(%edx,%eax,1)
		jmp    jump_89b2c
	jump_89aa3:
		cmpb   $0x0,0x8(%esp)
		je     jump_89ac6
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0x11(%edx,%eax,1),%bh
		and    $0xf,%bh
		mov    %bh,%cl
		mov    %bh,0x11(%edx,%eax,1)
		or     $0xb0,%cl
		mov    %cl,0x11(%edx,%eax,1)
		jmp    jump_89b2c
	jump_89ac6:
		cmpb   $0x0,0x2(%esp)
		je     jump_89ae9
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0x11(%edx,%eax,1),%ch
		and    $0xf,%ch
		mov    %ch,%bl
		mov    %ch,0x11(%edx,%eax,1)
		or     $0x80,%bl
		mov    %bl,0x11(%edx,%eax,1)
		jmp    jump_89b2c
	jump_89ae9:
		cmpb   $0x0,(%esp)
		je     jump_89b0b
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0x11(%edx,%eax,1),%bh
		and    $0xf,%bh
		mov    %bh,%cl
		mov    %bh,0x11(%edx,%eax,1)
		or     $0x50,%cl
		mov    %cl,0x11(%edx,%eax,1)
		jmp    jump_89b2c
	jump_89b0b:
		cmpb   $0x0,0x6(%esp)
		je     jump_89b2c
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0x11(%edx,%eax,1),%ch
		and    $0xf,%ch
		mov    %ch,%bl
		mov    %ch,0x11(%edx,%eax,1)
		or     $0x20,%bl
		mov    %bl,0x11(%edx,%eax,1)
	jump_89b2c:
		inc    %edi
	jump_89b2d:
		mov    0x1c(%esp),%ebp
		movswl %di,%eax
		cmp    %ebp,%eax
		jg     jump_89957
		test   %eax,%eax
		jl     jump_89b2c
		cmp    $0x80,%eax
		jge    jump_89b2c
		mov    0x32(%esp),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		jl     jump_89b2c
		cmp    $0x80,%edx
		jge    jump_89b2c
		shl    $0x7,%edx
		add    %edx,%eax
		imul   $0x12,%eax,%esi
		mov    EXPORT_SYMBOL(game_my_big_map),%ebx
		add    %ebx,%esi
		mov    (%esi),%dx
		and    $0x3f,%dh
		movswl %dx,%edx
		mov    %edx,0xc(%esp)
		xor    %edx,%edx
		mov    0xc(%esp),%ecx
		mov    crater_unkn_texture_flags,%dx
		cmp    %ecx,%edx
		je     jump_89b2c
		lea    -0x81(%eax),%ecx
		imul   $0x12,%ecx,%ecx
		mov    (%ecx,%ebx,1),%cx
		and    $0x3f,%ch
		mov    %cx,0x40(%esp)
		mov    0x3e(%esp),%ecx
		sar    $0x10,%ecx
		cmp    %edx,%ecx
		sete   %cl
		mov    %cl,(%esp)
		lea    -0x80(%eax),%ecx
		imul   $0x12,%ecx,%ecx
		mov    (%ecx,%ebx,1),%cx
		and    $0x3f,%ch
		mov    %cx,0x40(%esp)
		mov    0x3e(%esp),%ecx
		sar    $0x10,%ecx
		cmp    %edx,%ecx
		sete   %cl
		mov    %cl,0x1(%esp)
		lea    -0x7f(%eax),%ecx
		imul   $0x12,%ecx,%ecx
		mov    (%ecx,%ebx,1),%cx
		and    $0x3f,%ch
		mov    %cx,0x40(%esp)
		mov    0x3e(%esp),%ecx
		sar    $0x10,%ecx
		cmp    %edx,%ecx
		sete   %cl
		mov    %cl,0x2(%esp)
		lea    -0x1(%eax),%ecx
		imul   $0x12,%ecx,%ecx
		mov    (%ecx,%ebx,1),%cx
		and    $0x3f,%ch
		mov    %cx,0x40(%esp)
		mov    0x3e(%esp),%ecx
		sar    $0x10,%ecx
		cmp    %edx,%ecx
		sete   %cl
		mov    0xc(%esp),%ebp
		mov    %cl,0x3(%esp)
		cmp    %ebp,%edx
		sete   %cl
		lea    0x1(%eax),%ebp
		imul   $0x12,%ebp,%ebp
		mov    %cl,0x4(%esp)
		mov    (%ebx,%ebp,1),%cx
		and    $0x3f,%ch
		mov    %cx,0x40(%esp)
		mov    0x3e(%esp),%ecx
		sar    $0x10,%ecx
		cmp    %edx,%ecx
		sete   %cl
		mov    %cl,0x50(%esp)
		mov    %cl,0x5(%esp)
		lea    0x7f(%eax),%ecx
		imul   $0x12,%ecx,%ecx
		lea    0x80(%eax),%ebp
		imul   $0x12,%ebp,%ebp
		mov    (%ecx,%ebx,1),%cx
		and    $0x3f,%ch
		mov    %cx,0x40(%esp)
		mov    0x3e(%esp),%ecx
		sar    $0x10,%ecx
		cmp    %edx,%ecx
		sete   %cl
		add    %ebx,%ebp
		mov    %cl,0x6(%esp)
		mov    0x0(%ebp),%cx
		lea    0x81(%eax),%ebp
		imul   $0x12,%ebp,%ebp
		add    %ebx,%ebp
		and    $0x3f,%ch
		mov    0x0(%ebp),%bx
		mov    %cx,0x40(%esp)
		and    $0x3f,%bh
		mov    0x3e(%esp),%ecx
		mov    %bx,0x40(%esp)
		sar    $0x10,%ecx
		mov    0x3e(%esp),%ebx
		cmp    %edx,%ecx
		sete   %cl
		sar    $0x10,%ebx
		mov    %cl,0x7(%esp)
		cmp    %edx,%ebx
		sete   %dl
		mov    0x50(%esp),%bl
		mov    %dl,0x8(%esp)
		test   %bl,%bl
		je     jump_89978
		test   %cl,%cl
		je     jump_89978
		mov    0x11(%esi),%bh
		and    $0xf,%bh
		mov    %bh,%cl
		mov    %bh,0x11(%esi)
		or     $0xc0,%cl
		mov    %cl,0x11(%esi)
		jmp    jump_89b2c
	jump_89cdf:
		add    $0x54,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_unkstruct03_process)	/* 0x08A1EC */
/*----------------------------------------------------------------*/
		push   %edx
		mov    unkstruct03_first,%al
		mov    data_1c4769,%ah
		cmp    %ah,%al
		je     jump_8a21c
		mov    %al,%dl
		je     jump_8a21c
	jump_8a200:
		xor    %eax,%eax
		mov    %dl,%al
		inc    %dl
		call   unkstruct03_do_iteration
		movsbl %dl,%eax
		test   %eax,%eax
		jge    jump_8a214
		xor    %dl,%dl
	jump_8a214:
		cmp    data_1c4769,%dl
		jne    jump_8a200
	jump_8a21c:
		pop    %edx
		ret


/*----------------------------------------------------------------*/
sea_texture:	/* 0x08A220 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		mov    %eax,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		mov    game_textures,%edx
		add    %eax,%eax
		add    %edx,%eax
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    (%eax),%bl
		mov    0x2(%eax),%dl
		cmp    %edx,%ebx
		jge    jump_8a243
		mov    %ebx,%edx
	jump_8a243:
		xor    %ebx,%ebx
		mov    0x4(%eax),%bl
		cmp    %ebx,%edx
		jl     jump_8a24e
		mov    %ebx,%edx
	jump_8a24e:
		xor    %ebx,%ebx
		mov    0x6(%eax),%bl
		cmp    %ebx,%edx
		jl     jump_8a259
		mov    %ebx,%edx
	jump_8a259:
		mov    %edx,%ecx
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    0x3(%eax),%bl
		mov    0x1(%eax),%dl
		cmp    %ebx,%edx
		jl     jump_8a26b
		mov    %ebx,%edx
	jump_8a26b:
		xor    %ebx,%ebx
		mov    0x5(%eax),%bl
		cmp    %ebx,%edx
		jl     jump_8a276
		mov    %ebx,%edx
	jump_8a276:
		xor    %ebx,%ebx
		mov    0x7(%eax),%bl
		cmp    %ebx,%edx
		jl     jump_8a281
		mov    %ebx,%edx
	jump_8a281:
		sar    $0x5,%edx
		mov    %ecx,%ebx
		shl    $0x3,%edx
		sar    $0x5,%ebx
		mov    0x8(%eax),%al
		add    %ebx,%edx
		and    $0xff,%eax
		shl    $0x6,%eax
		mov    textwalk_data(%edx,%eax,1),%al
		and    $0xff,%eax
		and    $0x2,%eax
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret

vtable_8a2ac:
		.long   func_8a2f7
		.long   func_8a3a6
		.long   func_8a766
		.long   func_8ae35


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_quick_crater)	/* 0x08A2BC */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x68,%esp
		mov    %eax,%ecx
		xor    %eax,%eax
		mov    current_map,%ax
		cmp    $0xb,%eax
		je     jump_8c4b8
		mov    %ecx,0x10(%esp)
		mov    %ecx,0xc(%esp)
		mov    %edx,0x18(%esp)
		mov    %edx,0x14(%esp)
		cmp    $0x3,%ebx
		ja     jump_8c4b8
		jmp    *%cs:vtable_8a2ac(,%ebx,4)


/*----------------------------------------------------------------*/
func_8a2f7:
/*----------------------------------------------------------------*/
		test   %ecx,%ecx
		jl     jump_8be74
		cmp    $0x7f,%ecx
		jg     jump_8be74
		test   %edx,%edx
		jl     jump_8be74
		cmp    $0x7f,%edx
		jg     jump_8be74
		mov    %edx,%eax
		shl    $0x7,%eax
		lea    (%eax,%ecx,1),%esi
		lea    0x0(,%esi,8),%eax
		add    %eax,%esi
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %esi,%esi
		mov    (%esi,%eax,1),%ax
		and    $0x3f,%ah
		cwtl
		call   is_that_a_sea_texture
		test   %eax,%eax
		jne    jump_8be74
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %eax,%esi
		mov    (%esi),%di
		and    $0xffffc000,%edi
		mov    crater_unkn_texture_flags,%ax
		mov    %di,(%esi)
		or     %eax,%edi
		mov    0x11(%esi),%al
		mov    %di,(%esi)
		and    $0xf,%al
		mov    %al,0x11(%esi)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		add    %ebx,%ebx
		and    $0x3,%al
		add    %ebx,%eax
		sub    %ax,0x6(%esi)
		cmp    %ecx,%ecx
		cmp    0x10(%esp),%ecx
		jle    jump_8a389
		mov    %ecx,0x10(%esp)
	jump_8a389:
		cmp    0x14(%esp),%edx
		jge    jump_8a393
		mov    %edx,0x14(%esp)
	jump_8a393:
		cmp    0x18(%esp),%edx
		jle    jump_8be74
		mov    %edx,0x18(%esp)
		jmp    jump_8be74


/*----------------------------------------------------------------*/
func_8a3a6:
/*----------------------------------------------------------------*/
		test   %ecx,%ecx
		jl     jump_8a44c
		cmp    $0x7f,%ecx
		jg     jump_8a44c
		test   %edx,%edx
		jl     jump_8a44c
		cmp    $0x7f,%edx
		jg     jump_8a44c
		mov    %edx,%eax
		shl    $0x7,%eax
		lea    (%eax,%ecx,1),%esi
		lea    0x0(,%esi,8),%edi
		add    %esi,%edi
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %edi,%edi
		mov    (%edi,%eax,1),%ax
		and    $0x3f,%ah
		cwtl
		call   is_that_a_sea_texture
		test   %eax,%eax
		jne    jump_8a44c
		mov    EXPORT_SYMBOL(game_my_big_map),%esi
		add    %edi,%esi
		mov    (%esi),%di
		and    $0xffffc000,%edi
		mov    crater_unkn_texture_flags,%ax
		mov    %di,(%esi)
		or     %eax,%edi
		mov    0x11(%esi),%ah
		mov    %di,(%esi)
		and    $0xf,%ah
		mov    %ebx,%edi
		mov    %ah,0x11(%esi)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		add    %ebx,%edi
		and    $0x3,%al
		add    %edi,%eax
		sub    %ax,0x6(%esi)
		cmp    %ecx,%ecx
		cmp    0x10(%esp),%ecx
		jle    jump_8a438
		mov    %ecx,0x10(%esp)
	jump_8a438:
		cmp    0x14(%esp),%edx
		jge    jump_8a442
		mov    %edx,0x14(%esp)
	jump_8a442:
		cmp    0x18(%esp),%edx
		jle    jump_8a44c
		mov    %edx,0x18(%esp)
	jump_8a44c:
		call   ac_LbRandomAnyShort
		dec    %ebx
		test   $0x1,%al
		je     jump_8a512
		test   %ecx,%ecx
		jl     jump_8a512
		cmp    $0x7f,%ecx
		jg     jump_8a512
		lea    -0x1(%edx),%eax
		test   %eax,%eax
		jl     jump_8a512
		cmp    $0x7f,%eax
		jg     jump_8a512
		mov    %edx,%eax
		shl    $0x7,%eax
		add    %ecx,%eax
		lea    -0x80(%eax),%esi
		lea    0x0(,%esi,8),%edi
		add    %esi,%edi
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %edi,%edi
		mov    (%edi,%eax,1),%ax
		and    $0x3f,%ah
		cwtl
		call   is_that_a_sea_texture
		test   %eax,%eax
		jne    jump_8a512
		mov    EXPORT_SYMBOL(game_my_big_map),%esi
		add    %edi,%esi
		andw   $0xc000,(%esi)
		mov    crater_unkn_texture_flags,%ax
		mov    (%esi),%di
		or     %eax,%edi
		mov    0x11(%esi),%al
		mov    %di,(%esi)
		and    $0xf,%al
		mov    %ebx,%edi
		mov    %al,0x11(%esi)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		add    %ebx,%edi
		and    $0x3,%al
		add    %edi,%eax
		sub    %ax,0x6(%esi)
		cmp    0xc(%esp),%ecx
		jge    jump_8a4ea
		mov    %ecx,0xc(%esp)
	jump_8a4ea:
		cmp    0x10(%esp),%ecx
		jle    jump_8a4f4
		mov    %ecx,0x10(%esp)
	jump_8a4f4:
		mov    0x14(%esp),%ebp
		lea    -0x1(%edx),%eax
		cmp    %ebp,%eax
		jge    jump_8a503
		mov    %eax,0x14(%esp)
	jump_8a503:
		mov    0x18(%esp),%esi
		lea    -0x1(%edx),%eax
		cmp    %esi,%eax
		jle    jump_8a512
		mov    %eax,0x18(%esp)
	jump_8a512:
		call   ac_LbRandomAnyShort
		test   $0x1,%al
		je     jump_8a5db
		test   %ecx,%ecx
		jl     jump_8a5db
		cmp    $0x7f,%ecx
		jg     jump_8a5db
		lea    0x1(%edx),%eax
		test   %eax,%eax
		jl     jump_8a5db
		cmp    $0x7f,%eax
		jg     jump_8a5db
		mov    %edx,%eax
		shl    $0x7,%eax
		add    %ecx,%eax
		lea    0x80(%eax),%esi
		lea    0x0(,%esi,8),%edi
		add    %esi,%edi
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %edi,%edi
		mov    (%edi,%eax,1),%ax
		and    $0x3f,%ah
		cwtl
		call   is_that_a_sea_texture
		test   %eax,%eax
		jne    jump_8a5db
		mov    EXPORT_SYMBOL(game_my_big_map),%esi
		add    %edi,%esi
		andw   $0xc000,(%esi)
		mov    crater_unkn_texture_flags,%ax
		mov    (%esi),%di
		or     %eax,%edi
		mov    0x11(%esi),%ah
		mov    %di,(%esi)
		and    $0xf,%ah
		mov    %ebx,%edi
		mov    %ah,0x11(%esi)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		add    %ebx,%edi
		and    $0x3,%al
		add    %edi,%eax
		sub    %ax,0x6(%esi)
		cmp    0xc(%esp),%ecx
		jge    jump_8a5b3
		mov    %ecx,0xc(%esp)
	jump_8a5b3:
		cmp    0x10(%esp),%ecx
		jle    jump_8a5bd
		mov    %ecx,0x10(%esp)
	jump_8a5bd:
		mov    0x14(%esp),%esi
		lea    0x1(%edx),%eax
		cmp    %esi,%eax
		jge    jump_8a5cc
		mov    %eax,0x14(%esp)
	jump_8a5cc:
		mov    0x18(%esp),%edi
		lea    0x1(%edx),%eax
		cmp    %edi,%eax
		jle    jump_8a5db
		mov    %eax,0x18(%esp)
	jump_8a5db:
		call   ac_LbRandomAnyShort
		test   $0x1,%al
		je     jump_8a6a4
		lea    -0x1(%ecx),%edi
		test   %edi,%edi
		jl     jump_8a6a4
		cmp    $0x7f,%edi
		jg     jump_8a6a4
		test   %edx,%edx
		jl     jump_8a6a4
		cmp    $0x7f,%edx
		jg     jump_8a6a4
		mov    %edx,%eax
		shl    $0x7,%eax
		add    %ecx,%eax
		lea    -0x1(%eax),%esi
		lea    0x0(,%esi,8),%eax
		add    %eax,%esi
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %esi,%esi
		mov    (%esi,%eax,1),%ax
		and    $0x3f,%ah
		mov    %ax,0x58(%esp)
		mov    0x56(%esp),%eax
		sar    $0x10,%eax
		call   is_that_a_sea_texture
		test   %eax,%eax
		jne    jump_8a6a4
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %eax,%esi
		andw   $0xc000,(%esi)
		mov    crater_unkn_texture_flags,%ax
		or     %ax,(%esi)
		andb   $0xf,0x11(%esi)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3,%al
		mov    %eax,0x58(%esp)
		mov    %ebx,%eax
		add    %ebx,%eax
		add    0x58(%esp),%eax
		mov    0xc(%esp),%ebp
		sub    %ax,0x6(%esi)
		cmp    %ebp,%edi
		jge    jump_8a681
		mov    %edi,0xc(%esp)
	jump_8a681:
		mov    0x10(%esp),%esi
		lea    -0x1(%ecx),%eax
		cmp    %esi,%eax
		jle    jump_8a690
		mov    %eax,0x10(%esp)
	jump_8a690:
		cmp    0x14(%esp),%edx
		jge    jump_8a69a
		mov    %edx,0x14(%esp)
	jump_8a69a:
		cmp    0x18(%esp),%edx
		jle    jump_8a6a4
		mov    %edx,0x18(%esp)
	jump_8a6a4:
		call   ac_LbRandomAnyShort
		test   $0x1,%al
		je     jump_8be74
		lea    0x1(%ecx),%edi
		test   %edi,%edi
		jl     jump_8be74
		cmp    $0x7f,%edi
		jg     jump_8be74
		test   %edx,%edx
		jl     jump_8be74
		cmp    $0x7f,%edx
		jg     jump_8be74
		mov    %edx,%eax
		shl    $0x7,%eax
		add    %ecx,%eax
		lea    0x1(%eax),%esi
		lea    0x0(,%esi,8),%ebp
		add    %esi,%ebp
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %ebp,%ebp
		mov    (%eax,%ebp,1),%ax
		and    $0x3f,%ah
		cwtl
		call   is_that_a_sea_texture
		test   %eax,%eax
		jne    jump_8be74
		mov    EXPORT_SYMBOL(game_my_big_map),%esi
		andw   $0xc000,(%esi,%ebp,1)
		mov    crater_unkn_texture_flags,%ax
		or     %ax,(%esi,%ebp,1)
		andb   $0xf,0x11(%esi,%ebp,1)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3,%al
		add    %ebx,%ebx
		add    %eax,%ebx
		sub    %bx,0x6(%esi,%ebp,1)
		cmp    0xc(%esp),%edi
		jge    jump_8a73c
		mov    %edi,0xc(%esp)
	jump_8a73c:
		mov    0x10(%esp),%ebx
		inc    %ecx
		cmp    %ebx,%ecx
		jle    jump_8a749
		mov    %ecx,0x10(%esp)
	jump_8a749:
		cmp    0x14(%esp),%edx
		jge    jump_8a753
		mov    %edx,0x14(%esp)
	jump_8a753:
		cmp    0x18(%esp),%edx
		jle    jump_8be74
		mov    %edx,0x18(%esp)
		jmp    jump_8be74


/*----------------------------------------------------------------*/
func_8a766:
/*----------------------------------------------------------------*/
		test   %ecx,%ecx
		jl     jump_8a80a
		cmp    $0x7f,%ecx
		jg     jump_8a80a
		test   %edx,%edx
		jl     jump_8a80a
		cmp    $0x7f,%edx
		jg     jump_8a80a
		mov    %edx,%eax
		shl    $0x7,%eax
		lea    (%eax,%ecx,1),%esi
		lea    0x0(,%esi,8),%eax
		add    %eax,%esi
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %esi,%esi
		mov    (%esi,%eax,1),%ax
		and    $0x3f,%ah
		cwtl
		call   is_that_a_sea_texture
		test   %eax,%eax
		jne    jump_8a80a
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %eax,%esi
		mov    (%esi),%di
		and    $0xffffc000,%edi
		mov    crater_unkn_texture_flags,%ax
		mov    %di,(%esi)
		or     %eax,%edi
		mov    0x11(%esi),%al
		mov    %di,(%esi)
		and    $0xf,%al
		mov    %ebx,%edi
		mov    %al,0x11(%esi)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		add    %ebx,%edi
		and    $0x3,%al
		add    %edi,%eax
		sub    %ax,0x6(%esi)
		cmp    %ecx,%ecx
		cmp    0x10(%esp),%ecx
		jle    jump_8a7f6
		mov    %ecx,0x10(%esp)
	jump_8a7f6:
		cmp    0x14(%esp),%edx
		jge    jump_8a800
		mov    %edx,0x14(%esp)
	jump_8a800:
		cmp    0x18(%esp),%edx
		jle    jump_8a80a
		mov    %edx,0x18(%esp)
	jump_8a80a:
		dec    %ebx
		test   %ecx,%ecx
		jl     jump_8a8c3
		cmp    $0x7f,%ecx
		jg     jump_8a8c3
		lea    -0x1(%edx),%eax
		test   %eax,%eax
		jl     jump_8a8c3
		cmp    $0x7f,%eax
		jg     jump_8a8c3
		mov    %edx,%eax
		shl    $0x7,%eax
		add    %ecx,%eax
		lea    -0x80(%eax),%esi
		lea    0x0(,%esi,8),%eax
		add    %eax,%esi
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %esi,%esi
		mov    (%esi,%eax,1),%ax
		and    $0x3f,%ah
		cwtl
		call   is_that_a_sea_texture
		test   %eax,%eax
		jne    jump_8a8c3
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %eax,%esi
		andw   $0xc000,(%esi)
		mov    crater_unkn_texture_flags,%ax
		mov    (%esi),%di
		or     %eax,%edi
		mov    0x11(%esi),%ah
		mov    %di,(%esi)
		and    $0xf,%ah
		mov    %ebx,%edi
		mov    %ah,0x11(%esi)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		add    %ebx,%edi
		and    $0x3,%al
		add    %edi,%eax
		sub    %ax,0x6(%esi)
		cmp    0xc(%esp),%ecx
		jge    jump_8a89b
		mov    %ecx,0xc(%esp)
	jump_8a89b:
		cmp    0x10(%esp),%ecx
		jle    jump_8a8a5
		mov    %ecx,0x10(%esp)
	jump_8a8a5:
		mov    0x14(%esp),%ebp
		lea    -0x1(%edx),%eax
		cmp    %ebp,%eax
		jge    jump_8a8b4
		mov    %eax,0x14(%esp)
	jump_8a8b4:
		mov    0x18(%esp),%esi
		lea    -0x1(%edx),%eax
		cmp    %esi,%eax
		jle    jump_8a8c3
		mov    %eax,0x18(%esp)
	jump_8a8c3:
		test   %ecx,%ecx
		jl     jump_8a97d
		cmp    $0x7f,%ecx
		jg     jump_8a97d
		lea    0x1(%edx),%eax
		test   %eax,%eax
		jl     jump_8a97d
		cmp    $0x7f,%eax
		jg     jump_8a97d
		mov    %edx,%eax
		shl    $0x7,%eax
		add    %ecx,%eax
		lea    0x80(%eax),%esi
		lea    0x0(,%esi,8),%eax
		add    %eax,%esi
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %esi,%esi
		mov    (%esi,%eax,1),%ax
		and    $0x3f,%ah
		cwtl
		call   is_that_a_sea_texture
		test   %eax,%eax
		jne    jump_8a97d
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %eax,%esi
		andw   $0xc000,(%esi)
		mov    crater_unkn_texture_flags,%ax
		mov    (%esi),%di
		or     %eax,%edi
		mov    0x11(%esi),%al
		mov    %di,(%esi)
		and    $0xf,%al
		mov    %ebx,%edi
		mov    %al,0x11(%esi)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		add    %ebx,%edi
		and    $0x3,%al
		add    %edi,%eax
		sub    %ax,0x6(%esi)
		cmp    0xc(%esp),%ecx
		jge    jump_8a955
		mov    %ecx,0xc(%esp)
	jump_8a955:
		cmp    0x10(%esp),%ecx
		jle    jump_8a95f
		mov    %ecx,0x10(%esp)
	jump_8a95f:
		mov    0x14(%esp),%esi
		lea    0x1(%edx),%eax
		cmp    %esi,%eax
		jge    jump_8a96e
		mov    %eax,0x14(%esp)
	jump_8a96e:
		mov    0x18(%esp),%edi
		lea    0x1(%edx),%eax
		cmp    %edi,%eax
		jle    jump_8a97d
		mov    %eax,0x18(%esp)
	jump_8a97d:
		lea    -0x1(%ecx),%edi
		test   %edi,%edi
		jl     jump_8aa3a
		cmp    $0x7f,%edi
		jg     jump_8aa3a
		test   %edx,%edx
		jl     jump_8aa3a
		cmp    $0x7f,%edx
		jg     jump_8aa3a
		mov    %edx,%eax
		shl    $0x7,%eax
		add    %ecx,%eax
		lea    -0x1(%eax),%esi
		lea    0x0(,%esi,8),%eax
		add    %eax,%esi
		mov    EXPORT_SYMBOL(game_my_big_map),%ebp
		add    %esi,%esi
		mov    (%esi,%ebp,1),%ax
		and    $0x3f,%ah
		mov    %ax,0x58(%esp)
		mov    0x56(%esp),%eax
		sar    $0x10,%eax
		call   is_that_a_sea_texture
		test   %eax,%eax
		jne    jump_8aa3a
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %eax,%esi
		andw   $0xc000,(%esi)
		mov    crater_unkn_texture_flags,%ax
		or     %ax,(%esi)
		andb   $0xf,0x11(%esi)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3,%al
		mov    %eax,0x58(%esp)
		mov    %ebx,%eax
		add    %ebx,%eax
		add    0x58(%esp),%eax
		mov    0xc(%esp),%ebp
		sub    %ax,0x6(%esi)
		cmp    %ebp,%edi
		jge    jump_8aa17
		mov    %edi,0xc(%esp)
	jump_8aa17:
		mov    0x10(%esp),%esi
		lea    -0x1(%ecx),%eax
		cmp    %esi,%eax
		jle    jump_8aa26
		mov    %eax,0x10(%esp)
	jump_8aa26:
		cmp    0x14(%esp),%edx
		jge    jump_8aa30
		mov    %edx,0x14(%esp)
	jump_8aa30:
		cmp    0x18(%esp),%edx
		jle    jump_8aa3a
		mov    %edx,0x18(%esp)
	jump_8aa3a:
		lea    0x1(%ecx),%edi
		test   %edi,%edi
		jl     jump_8aaec
		cmp    $0x7f,%edi
		jg     jump_8aaec
		test   %edx,%edx
		jl     jump_8aaec
		cmp    $0x7f,%edx
		jg     jump_8aaec
		mov    %edx,%eax
		shl    $0x7,%eax
		add    %ecx,%eax
		lea    0x1(%eax),%esi
		lea    0x0(,%esi,8),%ebp
		add    %esi,%ebp
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %ebp,%ebp
		mov    (%eax,%ebp,1),%ax
		and    $0x3f,%ah
		cwtl
		call   is_that_a_sea_texture
		test   %eax,%eax
		jne    jump_8aaec
		mov    EXPORT_SYMBOL(game_my_big_map),%esi
		andw   $0xc000,(%esi,%ebp,1)
		mov    crater_unkn_texture_flags,%ax
		or     %ax,(%esi,%ebp,1)
		andb   $0xf,0x11(%esi,%ebp,1)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3,%al
		mov    %eax,0x58(%esp)
		mov    %ebx,%eax
		add    %ebx,%eax
		add    0x58(%esp),%eax
		sub    %ax,0x6(%esi,%ebp,1)
		cmp    0xc(%esp),%edi
		jge    jump_8aac9
		mov    %edi,0xc(%esp)
	jump_8aac9:
		mov    0x10(%esp),%esi
		lea    0x1(%ecx),%eax
		cmp    %esi,%eax
		jle    jump_8aad8
		mov    %eax,0x10(%esp)
	jump_8aad8:
		cmp    0x14(%esp),%edx
		jge    jump_8aae2
		mov    %edx,0x14(%esp)
	jump_8aae2:
		cmp    0x18(%esp),%edx
		jle    jump_8aaec
		mov    %edx,0x18(%esp)
	jump_8aaec:
		call   ac_LbRandomAnyShort
		dec    %ebx
		test   $0x1,%al
		je     jump_8abbc
		lea    -0x1(%ecx),%edi
		test   %edi,%edi
		jl     jump_8abbc
		cmp    $0x7f,%edi
		jg     jump_8abbc
		lea    -0x1(%edx),%eax
		test   %eax,%eax
		jl     jump_8abbc
		cmp    $0x7f,%eax
		jg     jump_8abbc
		mov    %edx,%eax
		shl    $0x7,%eax
		add    %ecx,%eax
		lea    -0x81(%eax),%esi
		lea    0x0(,%esi,8),%ebp
		add    %esi,%ebp
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %ebp,%ebp
		mov    (%eax,%ebp,1),%ax
		and    $0x3f,%ah
		cwtl
		call   is_that_a_sea_texture
		test   %eax,%eax
		jne    jump_8abbc
		mov    EXPORT_SYMBOL(game_my_big_map),%esi
		andw   $0xc000,(%esi,%ebp,1)
		mov    crater_unkn_texture_flags,%ax
		or     %ax,(%esi,%ebp,1)
		andb   $0xf,0x11(%esi,%ebp,1)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3,%al
		mov    %eax,0x58(%esp)
		mov    %ebx,%eax
		add    %ebx,%eax
		add    0x58(%esp),%eax
		sub    %ax,0x6(%esi,%ebp,1)
		cmp    0xc(%esp),%edi
		jge    jump_8ab8f
		mov    %edi,0xc(%esp)
	jump_8ab8f:
		mov    0x10(%esp),%esi
		lea    -0x1(%ecx),%eax
		cmp    %esi,%eax
		jle    jump_8ab9e
		mov    %eax,0x10(%esp)
	jump_8ab9e:
		mov    0x14(%esp),%edi
		lea    -0x1(%edx),%eax
		cmp    %edi,%eax
		jge    jump_8abad
		mov    %eax,0x14(%esp)
	jump_8abad:
		mov    0x18(%esp),%ebp
		lea    -0x1(%edx),%eax
		cmp    %ebp,%eax
		jle    jump_8abbc
		mov    %eax,0x18(%esp)
	jump_8abbc:
		call   ac_LbRandomAnyShort
		test   $0x1,%al
		je     jump_8ac91
		lea    0x1(%ecx),%edi
		test   %edi,%edi
		jl     jump_8ac91
		cmp    $0x7f,%edi
		jg     jump_8ac91
		lea    -0x1(%edx),%eax
		test   %eax,%eax
		jl     jump_8ac91
		cmp    $0x7f,%eax
		jg     jump_8ac91
		mov    %edx,%esi
		shl    $0x7,%esi
		add    %ecx,%esi
		sub    $0x7f,%esi
		lea    0x0(,%esi,8),%eax
		add    %eax,%esi
		mov    EXPORT_SYMBOL(game_my_big_map),%ebp
		add    %esi,%esi
		mov    (%esi,%ebp,1),%ax
		and    $0x3f,%ah
		mov    %ax,0x58(%esp)
		mov    0x56(%esp),%eax
		sar    $0x10,%eax
		call   is_that_a_sea_texture
		test   %eax,%eax
		jne    jump_8ac91
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %eax,%esi
		andw   $0xc000,(%esi)
		mov    crater_unkn_texture_flags,%ax
		or     %ax,(%esi)
		andb   $0xf,0x11(%esi)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3,%al
		mov    %eax,0x58(%esp)
		mov    %ebx,%eax
		add    %ebx,%eax
		add    0x58(%esp),%eax
		sub    %ax,0x6(%esi)
		cmp    0xc(%esp),%edi
		jge    jump_8ac64
		mov    %edi,0xc(%esp)
	jump_8ac64:
		mov    0x10(%esp),%esi
		lea    0x1(%ecx),%eax
		cmp    %esi,%eax
		jle    jump_8ac73
		mov    %eax,0x10(%esp)
	jump_8ac73:
		mov    0x14(%esp),%edi
		lea    -0x1(%edx),%eax
		cmp    %edi,%eax
		jge    jump_8ac82
		mov    %eax,0x14(%esp)
	jump_8ac82:
		mov    0x18(%esp),%ebp
		lea    -0x1(%edx),%eax
		cmp    %ebp,%eax
		jle    jump_8ac91
		mov    %eax,0x18(%esp)
	jump_8ac91:
		call   ac_LbRandomAnyShort
		test   $0x1,%al
		je     jump_8ad5d
		lea    -0x1(%ecx),%edi
		test   %edi,%edi
		jl     jump_8ad5d
		cmp    $0x7f,%edi
		jg     jump_8ad5d
		lea    0x1(%edx),%eax
		test   %eax,%eax
		jl     jump_8ad5d
		cmp    $0x7f,%eax
		jg     jump_8ad5d
		mov    %edx,%eax
		shl    $0x7,%eax
		add    %ecx,%eax
		lea    0x7f(%eax),%esi
		lea    0x0(,%esi,8),%ebp
		add    %esi,%ebp
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %ebp,%ebp
		mov    (%eax,%ebp,1),%ax
		and    $0x3f,%ah
		cwtl
		call   is_that_a_sea_texture
		test   %eax,%eax
		jne    jump_8ad5d
		mov    EXPORT_SYMBOL(game_my_big_map),%esi
		andw   $0xc000,(%esi,%ebp,1)
		mov    crater_unkn_texture_flags,%ax
		or     %ax,(%esi,%ebp,1)
		andb   $0xf,0x11(%esi,%ebp,1)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3,%al
		mov    %eax,0x58(%esp)
		mov    %ebx,%eax
		add    %ebx,%eax
		add    0x58(%esp),%eax
		sub    %ax,0x6(%esi,%ebp,1)
		cmp    0xc(%esp),%edi
		jge    jump_8ad30
		mov    %edi,0xc(%esp)
	jump_8ad30:
		mov    0x10(%esp),%esi
		lea    -0x1(%ecx),%eax
		cmp    %esi,%eax
		jle    jump_8ad3f
		mov    %eax,0x10(%esp)
	jump_8ad3f:
		mov    0x14(%esp),%edi
		lea    0x1(%edx),%eax
		cmp    %edi,%eax
		jge    jump_8ad4e
		mov    %eax,0x14(%esp)
	jump_8ad4e:
		mov    0x18(%esp),%ebp
		lea    0x1(%edx),%eax
		cmp    %ebp,%eax
		jle    jump_8ad5d
		mov    %eax,0x18(%esp)
	jump_8ad5d:
		call   ac_LbRandomAnyShort
		test   $0x1,%al
		je     jump_8be74
		lea    0x1(%ecx),%edi
		test   %edi,%edi
		jl     jump_8be74
		cmp    $0x7f,%edi
		jg     jump_8be74
		lea    0x1(%edx),%eax
		test   %eax,%eax
		jl     jump_8be74
		cmp    $0x7f,%eax
		jg     jump_8be74
		mov    %edx,%eax
		shl    $0x7,%eax
		add    %ecx,%eax
		lea    0x81(%eax),%esi
		lea    0x0(,%esi,8),%eax
		add    %eax,%esi
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %esi,%esi
		mov    (%esi,%eax,1),%ax
		and    $0x3f,%ah
		mov    %ax,0x58(%esp)
		mov    0x56(%esp),%eax
		sar    $0x10,%eax
		call   is_that_a_sea_texture
		test   %eax,%eax
		jne    jump_8be74
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %eax,%esi
		andw   $0xc000,(%esi)
		mov    crater_unkn_texture_flags,%ax
		or     %ax,(%esi)
		andb   $0xf,0x11(%esi)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3,%al
		add    %ebx,%ebx
		add    %eax,%ebx
		sub    %bx,0x6(%esi)
		cmp    0xc(%esp),%edi
		jge    jump_8ae03
		mov    %edi,0xc(%esp)
	jump_8ae03:
		mov    0x10(%esp),%ebx
		inc    %ecx
		cmp    %ebx,%ecx
		jle    jump_8ae10
		mov    %ecx,0x10(%esp)
	jump_8ae10:
		mov    0x14(%esp),%ecx
		lea    0x1(%edx),%eax
		cmp    %ecx,%eax
		jge    jump_8ae1f
		mov    %eax,0x14(%esp)
	jump_8ae1f:
		mov    0x18(%esp),%esi
		inc    %edx
		cmp    %esi,%edx
		jle    jump_8be74
		mov    %edx,0x18(%esp)
		jmp    jump_8be74


/*----------------------------------------------------------------*/
func_8ae35:
/*----------------------------------------------------------------*/
		test   %ecx,%ecx
		jl     jump_8aedb
		cmp    $0x7f,%ecx
		jg     jump_8aedb
		test   %edx,%edx
		jl     jump_8aedb
		cmp    $0x7f,%edx
		jg     jump_8aedb
		mov    %edx,%eax
		shl    $0x7,%eax
		lea    (%eax,%ecx,1),%esi
		lea    0x0(,%esi,8),%edi
		add    %esi,%edi
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %edi,%edi
		mov    (%edi,%eax,1),%ax
		and    $0x3f,%ah
		cwtl
		call   is_that_a_sea_texture
		test   %eax,%eax
		jne    jump_8aedb
		mov    EXPORT_SYMBOL(game_my_big_map),%esi
		add    %edi,%esi
		mov    (%esi),%di
		and    $0xffffc000,%edi
		mov    crater_unkn_texture_flags,%ax
		mov    %di,(%esi)
		or     %eax,%edi
		mov    0x11(%esi),%ah
		mov    %di,(%esi)
		and    $0xf,%ah
		mov    %ebx,%edi
		mov    %ah,0x11(%esi)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		add    %ebx,%edi
		and    $0x3,%al
		add    %edi,%eax
		sub    %ax,0x6(%esi)
		cmp    %ecx,%ecx
		cmp    0x10(%esp),%ecx
		jle    jump_8aec7
		mov    %ecx,0x10(%esp)
	jump_8aec7:
		cmp    0x14(%esp),%edx
		jge    jump_8aed1
		mov    %edx,0x14(%esp)
	jump_8aed1:
		cmp    0x18(%esp),%edx
		jle    jump_8aedb
		mov    %edx,0x18(%esp)
	jump_8aedb:
		dec    %ebx
		test   %ecx,%ecx
		jl     jump_8af9f
		cmp    $0x7f,%ecx
		jg     jump_8af9f
		lea    -0x1(%edx),%eax
		test   %eax,%eax
		jl     jump_8af9f
		cmp    $0x7f,%eax
		jg     jump_8af9f
		mov    %edx,%eax
		shl    $0x7,%eax
		add    %ecx,%eax
		lea    -0x80(%eax),%esi
		lea    0x0(,%esi,8),%eax
		add    %eax,%esi
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %esi,%esi
		mov    (%esi,%eax,1),%ax
		and    $0x3f,%ah
		cwtl
		call   is_that_a_sea_texture
		test   %eax,%eax
		jne    jump_8af9f
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %eax,%esi
		andw   $0xc000,(%esi)
		mov    crater_unkn_texture_flags,%ax
		mov    (%esi),%di
		or     %eax,%edi
		mov    0x11(%esi),%al
		mov    %di,(%esi)
		and    $0xf,%al
		mov    %ebx,%edi
		mov    %al,0x11(%esi)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		add    %ebx,%edi
		and    $0x3,%al
		add    %edi,%eax
		mov    0x6(%esi),%di
		sub    %eax,%edi
		mov    0xc(%esp),%eax
		mov    %di,0x6(%esi)
		cmp    %eax,%ecx
		jge    jump_8af77
		mov    %ecx,0xc(%esp)
	jump_8af77:
		cmp    0x10(%esp),%ecx
		jle    jump_8af81
		mov    %ecx,0x10(%esp)
	jump_8af81:
		mov    0x14(%esp),%edi
		lea    -0x1(%edx),%eax
		cmp    %edi,%eax
		jge    jump_8af90
		mov    %eax,0x14(%esp)
	jump_8af90:
		mov    0x18(%esp),%ebp
		lea    -0x1(%edx),%eax
		cmp    %ebp,%eax
		jle    jump_8af9f
		mov    %eax,0x18(%esp)
	jump_8af9f:
		test   %ecx,%ecx
		jl     jump_8b059
		cmp    $0x7f,%ecx
		jg     jump_8b059
		lea    0x1(%edx),%eax
		test   %eax,%eax
		jl     jump_8b059
		cmp    $0x7f,%eax
		jg     jump_8b059
		mov    %edx,%eax
		shl    $0x7,%eax
		add    %ecx,%eax
		lea    0x80(%eax),%esi
		lea    0x0(,%esi,8),%edi
		add    %esi,%edi
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %edi,%edi
		mov    (%edi,%eax,1),%ax
		and    $0x3f,%ah
		cwtl
		call   is_that_a_sea_texture
		test   %eax,%eax
		jne    jump_8b059
		mov    EXPORT_SYMBOL(game_my_big_map),%esi
		andw   $0xc000,(%edi,%esi,1)
		mov    crater_unkn_texture_flags,%ax
		or     %ax,(%edi,%esi,1)
		andb   $0xf,0x11(%edi,%esi,1)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3,%al
		mov    %eax,0x58(%esp)
		mov    %ebx,%eax
		add    %ebx,%eax
		add    0x58(%esp),%eax
		sub    %ax,0x6(%edi,%esi,1)
		cmp    0xc(%esp),%ecx
		jge    jump_8b031
		mov    %ecx,0xc(%esp)
	jump_8b031:
		cmp    0x10(%esp),%ecx
		jle    jump_8b03b
		mov    %ecx,0x10(%esp)
	jump_8b03b:
		mov    0x14(%esp),%edi
		lea    0x1(%edx),%eax
		cmp    %edi,%eax
		jge    jump_8b04a
		mov    %eax,0x14(%esp)
	jump_8b04a:
		mov    0x18(%esp),%ebp
		lea    0x1(%edx),%eax
		cmp    %ebp,%eax
		jle    jump_8b059
		mov    %eax,0x18(%esp)
	jump_8b059:
		lea    -0x1(%ecx),%edi
		test   %edi,%edi
		jl     jump_8b113
		cmp    $0x7f,%edi
		jg     jump_8b113
		test   %edx,%edx
		jl     jump_8b113
		cmp    $0x7f,%edx
		jg     jump_8b113
		mov    %edx,%eax
		shl    $0x7,%eax
		add    %ecx,%eax
		lea    -0x1(%eax),%esi
		lea    0x0(,%esi,8),%eax
		add    %eax,%esi
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %esi,%esi
		mov    (%esi,%eax,1),%ax
		and    $0x3f,%ah
		mov    %ax,0x58(%esp)
		mov    0x56(%esp),%eax
		sar    $0x10,%eax
		call   is_that_a_sea_texture
		test   %eax,%eax
		jne    jump_8b113
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %eax,%esi
		andw   $0xc000,(%esi)
		mov    crater_unkn_texture_flags,%ax
		or     %ax,(%esi)
		andb   $0xf,0x11(%esi)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3,%al
		mov    %eax,0x58(%esp)
		mov    %ebx,%eax
		add    %ebx,%eax
		add    0x58(%esp),%eax
		sub    %ax,0x6(%esi)
		cmp    0xc(%esp),%edi
		jge    jump_8b0f0
		mov    %edi,0xc(%esp)
	jump_8b0f0:
		mov    0x10(%esp),%esi
		lea    -0x1(%ecx),%eax
		cmp    %esi,%eax
		jle    jump_8b0ff
		mov    %eax,0x10(%esp)
	jump_8b0ff:
		cmp    0x14(%esp),%edx
		jge    jump_8b109
		mov    %edx,0x14(%esp)
	jump_8b109:
		cmp    0x18(%esp),%edx
		jle    jump_8b113
		mov    %edx,0x18(%esp)
	jump_8b113:
		lea    0x1(%ecx),%edi
		test   %edi,%edi
		jl     jump_8b1cd
		cmp    $0x7f,%edi
		jg     jump_8b1cd
		test   %edx,%edx
		jl     jump_8b1cd
		cmp    $0x7f,%edx
		jg     jump_8b1cd
		mov    %edx,%eax
		shl    $0x7,%eax
		add    %ecx,%eax
		lea    0x1(%eax),%esi
		lea    0x0(,%esi,8),%eax
		add    %eax,%esi
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %esi,%esi
		mov    (%esi,%eax,1),%ax
		and    $0x3f,%ah
		mov    %ax,0x58(%esp)
		mov    0x56(%esp),%eax
		sar    $0x10,%eax
		call   is_that_a_sea_texture
		test   %eax,%eax
		jne    jump_8b1cd
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %eax,%esi
		andw   $0xc000,(%esi)
		mov    crater_unkn_texture_flags,%ax
		or     %ax,(%esi)
		andb   $0xf,0x11(%esi)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3,%al
		mov    %eax,0x58(%esp)
		mov    %ebx,%eax
		add    %ebx,%eax
		add    0x58(%esp),%eax
		sub    %ax,0x6(%esi)
		cmp    0xc(%esp),%edi
		jge    jump_8b1aa
		mov    %edi,0xc(%esp)
	jump_8b1aa:
		mov    0x10(%esp),%esi
		lea    0x1(%ecx),%eax
		cmp    %esi,%eax
		jle    jump_8b1b9
		mov    %eax,0x10(%esp)
	jump_8b1b9:
		cmp    0x14(%esp),%edx
		jge    jump_8b1c3
		mov    %edx,0x14(%esp)
	jump_8b1c3:
		cmp    0x18(%esp),%edx
		jle    jump_8b1cd
		mov    %edx,0x18(%esp)
	jump_8b1cd:
		lea    -0x1(%ecx),%edi
		dec    %ebx
		test   %edi,%edi
		jl     jump_8b298
		cmp    $0x7f,%edi
		jg     jump_8b298
		lea    -0x1(%edx),%eax
		test   %eax,%eax
		jl     jump_8b298
		cmp    $0x7f,%eax
		jg     jump_8b298
		mov    %edx,%esi
		shl    $0x7,%esi
		add    %ecx,%esi
		sub    $0x81,%esi
		lea    0x0(,%esi,8),%eax
		add    %eax,%esi
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %esi,%esi
		mov    (%esi,%eax,1),%ax
		and    $0x3f,%ah
		mov    %ax,0x58(%esp)
		mov    0x56(%esp),%eax
		sar    $0x10,%eax
		call   is_that_a_sea_texture
		test   %eax,%eax
		jne    jump_8b298
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %eax,%esi
		andw   $0xc000,(%esi)
		mov    crater_unkn_texture_flags,%ax
		or     %ax,(%esi)
		andb   $0xf,0x11(%esi)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3,%al
		mov    %eax,0x58(%esp)
		mov    %ebx,%eax
		add    %ebx,%eax
		add    0x58(%esp),%eax
		sub    %ax,0x6(%esi)
		cmp    0xc(%esp),%edi
		jge    jump_8b26b
		mov    %edi,0xc(%esp)
	jump_8b26b:
		mov    0x10(%esp),%esi
		lea    -0x1(%ecx),%eax
		cmp    %esi,%eax
		jle    jump_8b27a
		mov    %eax,0x10(%esp)
	jump_8b27a:
		mov    0x14(%esp),%edi
		lea    -0x1(%edx),%eax
		cmp    %edi,%eax
		jge    jump_8b289
		mov    %eax,0x14(%esp)
	jump_8b289:
		mov    0x18(%esp),%ebp
		lea    -0x1(%edx),%eax
		cmp    %ebp,%eax
		jle    jump_8b298
		mov    %eax,0x18(%esp)
	jump_8b298:
		lea    0x1(%ecx),%edi
		test   %edi,%edi
		jl     jump_8b35f
		cmp    $0x7f,%edi
		jg     jump_8b35f
		lea    -0x1(%edx),%eax
		test   %eax,%eax
		jl     jump_8b35f
		cmp    $0x7f,%eax
		jg     jump_8b35f
		mov    %edx,%esi
		shl    $0x7,%esi
		add    %ecx,%esi
		sub    $0x7f,%esi
		lea    0x0(,%esi,8),%eax
		add    %eax,%esi
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %esi,%esi
		mov    (%esi,%eax,1),%ax
		and    $0x3f,%ah
		mov    %ax,0x58(%esp)
		mov    0x56(%esp),%eax
		sar    $0x10,%eax
		call   is_that_a_sea_texture
		test   %eax,%eax
		jne    jump_8b35f
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %eax,%esi
		andw   $0xc000,(%esi)
		mov    crater_unkn_texture_flags,%ax
		or     %ax,(%esi)
		andb   $0xf,0x11(%esi)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3,%al
		mov    %eax,0x58(%esp)
		mov    %ebx,%eax
		add    %ebx,%eax
		add    0x58(%esp),%eax
		sub    %ax,0x6(%esi)
		cmp    0xc(%esp),%edi
		jge    jump_8b332
		mov    %edi,0xc(%esp)
	jump_8b332:
		mov    0x10(%esp),%esi
		lea    0x1(%ecx),%eax
		cmp    %esi,%eax
		jle    jump_8b341
		mov    %eax,0x10(%esp)
	jump_8b341:
		mov    0x14(%esp),%edi
		lea    -0x1(%edx),%eax
		cmp    %edi,%eax
		jge    jump_8b350
		mov    %eax,0x14(%esp)
	jump_8b350:
		mov    0x18(%esp),%ebp
		lea    -0x1(%edx),%eax
		cmp    %ebp,%eax
		jle    jump_8b35f
		mov    %eax,0x18(%esp)
	jump_8b35f:
		lea    -0x1(%ecx),%edi
		test   %edi,%edi
		jl     jump_8b426
		cmp    $0x7f,%edi
		jg     jump_8b426
		lea    0x1(%edx),%eax
		test   %eax,%eax
		jl     jump_8b426
		cmp    $0x7f,%eax
		jg     jump_8b426
		mov    %edx,%eax
		shl    $0x7,%eax
		add    %ecx,%eax
		lea    0x7f(%eax),%esi
		lea    0x0(,%esi,8),%eax
		add    %eax,%esi
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %esi,%esi
		mov    (%esi,%eax,1),%ax
		and    $0x3f,%ah
		mov    %ax,0x58(%esp)
		mov    0x56(%esp),%eax
		sar    $0x10,%eax
		call   is_that_a_sea_texture
		test   %eax,%eax
		jne    jump_8b426
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %eax,%esi
		andw   $0xc000,(%esi)
		mov    crater_unkn_texture_flags,%ax
		or     %ax,(%esi)
		andb   $0xf,0x11(%esi)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3,%al
		mov    %eax,0x58(%esp)
		mov    %ebx,%eax
		add    %ebx,%eax
		add    0x58(%esp),%eax
		sub    %ax,0x6(%esi)
		cmp    0xc(%esp),%edi
		jge    jump_8b3f9
		mov    %edi,0xc(%esp)
	jump_8b3f9:
		mov    0x10(%esp),%esi
		lea    -0x1(%ecx),%eax
		cmp    %esi,%eax
		jle    jump_8b408
		mov    %eax,0x10(%esp)
	jump_8b408:
		mov    0x14(%esp),%edi
		lea    0x1(%edx),%eax
		cmp    %edi,%eax
		jge    jump_8b417
		mov    %eax,0x14(%esp)
	jump_8b417:
		mov    0x18(%esp),%ebp
		lea    0x1(%edx),%eax
		cmp    %ebp,%eax
		jle    jump_8b426
		mov    %eax,0x18(%esp)
	jump_8b426:
		lea    0x1(%ecx),%edi
		test   %edi,%edi
		jl     jump_8b4e8
		cmp    $0x7f,%edi
		jg     jump_8b4e8
		lea    0x1(%edx),%eax
		test   %eax,%eax
		jl     jump_8b4e8
		cmp    $0x7f,%eax
		jg     jump_8b4e8
		mov    %edx,%eax
		shl    $0x7,%eax
		add    %ecx,%eax
		lea    0x81(%eax),%esi
		lea    0x0(,%esi,8),%ebp
		add    %esi,%ebp
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %ebp,%ebp
		mov    (%eax,%ebp,1),%ax
		and    $0x3f,%ah
		cwtl
		call   is_that_a_sea_texture
		test   %eax,%eax
		jne    jump_8b4e8
		mov    EXPORT_SYMBOL(game_my_big_map),%esi
		andw   $0xc000,(%esi,%ebp,1)
		mov    crater_unkn_texture_flags,%ax
		or     %ax,(%esi,%ebp,1)
		andb   $0xf,0x11(%esi,%ebp,1)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3,%al
		mov    %eax,0x58(%esp)
		mov    %ebx,%eax
		add    %ebx,%eax
		add    0x58(%esp),%eax
		sub    %ax,0x6(%esi,%ebp,1)
		cmp    0xc(%esp),%edi
		jge    jump_8b4bb
		mov    %edi,0xc(%esp)
	jump_8b4bb:
		mov    0x10(%esp),%esi
		lea    0x1(%ecx),%eax
		cmp    %esi,%eax
		jle    jump_8b4ca
		mov    %eax,0x10(%esp)
	jump_8b4ca:
		mov    0x14(%esp),%edi
		lea    0x1(%edx),%eax
		cmp    %edi,%eax
		jge    jump_8b4d9
		mov    %eax,0x14(%esp)
	jump_8b4d9:
		mov    0x18(%esp),%ebp
		lea    0x1(%edx),%eax
		cmp    %ebp,%eax
		jle    jump_8b4e8
		mov    %eax,0x18(%esp)
	jump_8b4e8:
		call   ac_LbRandomAnyShort
		dec    %ebx
		test   $0x1,%al
		je     jump_8b5c0
		lea    -0x2(%ecx),%edi
		test   %edi,%edi
		jl     jump_8b5c0
		cmp    $0x7f,%edi
		jg     jump_8b5c0
		lea    -0x1(%edx),%eax
		test   %eax,%eax
		jl     jump_8b5c0
		cmp    $0x7f,%eax
		jg     jump_8b5c0
		mov    %edx,%eax
		shl    $0x7,%eax
		add    %ecx,%eax
		lea    -0x82(%eax),%esi
		lea    0x0(,%esi,8),%eax
		add    %eax,%esi
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %esi,%esi
		mov    (%esi,%eax,1),%ax
		and    $0x3f,%ah
		mov    %ax,0x58(%esp)
		mov    0x56(%esp),%eax
		sar    $0x10,%eax
		call   is_that_a_sea_texture
		test   %eax,%eax
		jne    jump_8b5c0
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %eax,%esi
		andw   $0xc000,(%esi)
		mov    crater_unkn_texture_flags,%ax
		or     %ax,(%esi)
		andb   $0xf,0x11(%esi)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3,%al
		mov    %eax,0x58(%esp)
		mov    %ebx,%eax
		add    %ebx,%eax
		add    0x58(%esp),%eax
		sub    %ax,0x6(%esi)
		cmp    0xc(%esp),%edi
		jge    jump_8b593
		mov    %edi,0xc(%esp)
	jump_8b593:
		mov    0x10(%esp),%esi
		lea    -0x2(%ecx),%eax
		cmp    %esi,%eax
		jle    jump_8b5a2
		mov    %eax,0x10(%esp)
	jump_8b5a2:
		mov    0x14(%esp),%edi
		lea    -0x1(%edx),%eax
		cmp    %edi,%eax
		jge    jump_8b5b1
		mov    %eax,0x14(%esp)
	jump_8b5b1:
		mov    0x18(%esp),%ebp
		lea    -0x1(%edx),%eax
		cmp    %ebp,%eax
		jle    jump_8b5c0
		mov    %eax,0x18(%esp)
	jump_8b5c0:
		lea    -0x2(%ecx),%edi
		test   %edi,%edi
		jl     jump_8b67a
		cmp    $0x7f,%edi
		jg     jump_8b67a
		test   %edx,%edx
		jl     jump_8b67a
		cmp    $0x7f,%edx
		jg     jump_8b67a
		mov    %edx,%eax
		shl    $0x7,%eax
		add    %ecx,%eax
		lea    -0x2(%eax),%esi
		lea    0x0(,%esi,8),%eax
		add    %eax,%esi
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %esi,%esi
		mov    (%esi,%eax,1),%ax
		and    $0x3f,%ah
		mov    %ax,0x58(%esp)
		mov    0x56(%esp),%eax
		sar    $0x10,%eax
		call   is_that_a_sea_texture
		test   %eax,%eax
		jne    jump_8b67a
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %eax,%esi
		andw   $0xc000,(%esi)
		mov    crater_unkn_texture_flags,%ax
		or     %ax,(%esi)
		andb   $0xf,0x11(%esi)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3,%al
		mov    %eax,0x58(%esp)
		mov    %ebx,%eax
		add    %ebx,%eax
		add    0x58(%esp),%eax
		sub    %ax,0x6(%esi)
		cmp    0xc(%esp),%edi
		jge    jump_8b657
		mov    %edi,0xc(%esp)
	jump_8b657:
		mov    0x10(%esp),%esi
		lea    -0x2(%ecx),%eax
		cmp    %esi,%eax
		jle    jump_8b666
		mov    %eax,0x10(%esp)
	jump_8b666:
		cmp    0x14(%esp),%edx
		jge    jump_8b670
		mov    %edx,0x14(%esp)
	jump_8b670:
		cmp    0x18(%esp),%edx
		jle    jump_8b67a
		mov    %edx,0x18(%esp)
	jump_8b67a:
		call   ac_LbRandomAnyShort
		test   $0x1,%al
		je     jump_8b746
		lea    -0x2(%ecx),%edi
		test   %edi,%edi
		jl     jump_8b746
		cmp    $0x7f,%edi
		jg     jump_8b746
		lea    0x1(%edx),%eax
		test   %eax,%eax
		jl     jump_8b746
		cmp    $0x7f,%eax
		jg     jump_8b746
		mov    %edx,%esi
		shl    $0x7,%esi
		add    %ecx,%esi
		add    $0x7e,%esi
		lea    0x0(,%esi,8),%ebp
		add    %esi,%ebp
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %ebp,%ebp
		mov    (%eax,%ebp,1),%ax
		and    $0x3f,%ah
		cwtl
		call   is_that_a_sea_texture
		test   %eax,%eax
		jne    jump_8b746
		mov    EXPORT_SYMBOL(game_my_big_map),%esi
		andw   $0xc000,(%esi,%ebp,1)
		mov    crater_unkn_texture_flags,%ax
		or     %ax,(%esi,%ebp,1)
		andb   $0xf,0x11(%esi,%ebp,1)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3,%al
		mov    %eax,0x58(%esp)
		mov    %ebx,%eax
		add    %ebx,%eax
		add    0x58(%esp),%eax
		sub    %ax,0x6(%esi,%ebp,1)
		cmp    0xc(%esp),%edi
		jge    jump_8b719
		mov    %edi,0xc(%esp)
	jump_8b719:
		mov    0x10(%esp),%esi
		lea    -0x2(%ecx),%eax
		cmp    %esi,%eax
		jle    jump_8b728
		mov    %eax,0x10(%esp)
	jump_8b728:
		mov    0x14(%esp),%edi
		lea    0x1(%edx),%eax
		cmp    %edi,%eax
		jge    jump_8b737
		mov    %eax,0x14(%esp)
	jump_8b737:
		mov    0x18(%esp),%ebp
		lea    0x1(%edx),%eax
		cmp    %ebp,%eax
		jle    jump_8b746
		mov    %eax,0x18(%esp)
	jump_8b746:
		call   ac_LbRandomAnyShort
		test   $0x1,%al
		je     jump_8b812
		lea    0x2(%ecx),%edi
		test   %edi,%edi
		jl     jump_8b812
		cmp    $0x7f,%edi
		jg     jump_8b812
		lea    -0x1(%edx),%eax
		test   %eax,%eax
		jl     jump_8b812
		cmp    $0x7f,%eax
		jg     jump_8b812
		mov    %edx,%eax
		shl    $0x7,%eax
		add    %ecx,%eax
		lea    -0x7e(%eax),%esi
		lea    0x0(,%esi,8),%ebp
		add    %esi,%ebp
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %ebp,%ebp
		mov    (%eax,%ebp,1),%ax
		and    $0x3f,%ah
		cwtl
		call   is_that_a_sea_texture
		test   %eax,%eax
		jne    jump_8b812
		mov    EXPORT_SYMBOL(game_my_big_map),%esi
		andw   $0xc000,(%esi,%ebp,1)
		mov    crater_unkn_texture_flags,%ax
		or     %ax,(%esi,%ebp,1)
		andb   $0xf,0x11(%esi,%ebp,1)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3,%al
		mov    %eax,0x58(%esp)
		mov    %ebx,%eax
		add    %ebx,%eax
		add    0x58(%esp),%eax
		sub    %ax,0x6(%esi,%ebp,1)
		cmp    0xc(%esp),%edi
		jge    jump_8b7e5
		mov    %edi,0xc(%esp)
	jump_8b7e5:
		mov    0x10(%esp),%esi
		lea    0x2(%ecx),%eax
		cmp    %esi,%eax
		jle    jump_8b7f4
		mov    %eax,0x10(%esp)
	jump_8b7f4:
		mov    0x14(%esp),%edi
		lea    -0x1(%edx),%eax
		cmp    %edi,%eax
		jge    jump_8b803
		mov    %eax,0x14(%esp)
	jump_8b803:
		mov    0x18(%esp),%ebp
		lea    -0x1(%edx),%eax
		cmp    %ebp,%eax
		jle    jump_8b812
		mov    %eax,0x18(%esp)
	jump_8b812:
		lea    0x2(%ecx),%edi
		test   %edi,%edi
		jl     jump_8b8cc
		cmp    $0x7f,%edi
		jg     jump_8b8cc
		test   %edx,%edx
		jl     jump_8b8cc
		cmp    $0x7f,%edx
		jg     jump_8b8cc
		mov    %edx,%eax
		shl    $0x7,%eax
		add    %ecx,%eax
		lea    0x2(%eax),%esi
		lea    0x0(,%esi,8),%eax
		add    %eax,%esi
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %esi,%esi
		mov    (%esi,%eax,1),%ax
		and    $0x3f,%ah
		mov    %ax,0x58(%esp)
		mov    0x56(%esp),%eax
		sar    $0x10,%eax
		call   is_that_a_sea_texture
		test   %eax,%eax
		jne    jump_8b8cc
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %eax,%esi
		andw   $0xc000,(%esi)
		mov    crater_unkn_texture_flags,%ax
		or     %ax,(%esi)
		andb   $0xf,0x11(%esi)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3,%al
		mov    %eax,0x58(%esp)
		mov    %ebx,%eax
		add    %ebx,%eax
		add    0x58(%esp),%eax
		sub    %ax,0x6(%esi)
		cmp    0xc(%esp),%edi
		jge    jump_8b8a9
		mov    %edi,0xc(%esp)
	jump_8b8a9:
		mov    0x10(%esp),%esi
		lea    0x2(%ecx),%eax
		cmp    %esi,%eax
		jle    jump_8b8b8
		mov    %eax,0x10(%esp)
	jump_8b8b8:
		cmp    0x14(%esp),%edx
		jge    jump_8b8c2
		mov    %edx,0x14(%esp)
	jump_8b8c2:
		cmp    0x18(%esp),%edx
		jle    jump_8b8cc
		mov    %edx,0x18(%esp)
	jump_8b8cc:
		call   ac_LbRandomAnyShort
		test   $0x1,%al
		je     jump_8b99b
		lea    0x2(%ecx),%edi
		test   %edi,%edi
		jl     jump_8b99b
		cmp    $0x7f,%edi
		jg     jump_8b99b
		lea    0x1(%edx),%eax
		test   %eax,%eax
		jl     jump_8b99b
		cmp    $0x7f,%eax
		jg     jump_8b99b
		mov    %edx,%esi
		shl    $0x7,%esi
		add    %ecx,%esi
		add    $0x82,%esi
		lea    0x0(,%esi,8),%ebp
		add    %esi,%ebp
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %ebp,%ebp
		mov    (%eax,%ebp,1),%ax
		and    $0x3f,%ah
		cwtl
		call   is_that_a_sea_texture
		test   %eax,%eax
		jne    jump_8b99b
		mov    EXPORT_SYMBOL(game_my_big_map),%esi
		andw   $0xc000,(%esi,%ebp,1)
		mov    crater_unkn_texture_flags,%ax
		or     %ax,(%esi,%ebp,1)
		andb   $0xf,0x11(%esi,%ebp,1)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3,%al
		mov    %eax,0x58(%esp)
		mov    %ebx,%eax
		add    %ebx,%eax
		add    0x58(%esp),%eax
		sub    %ax,0x6(%esi,%ebp,1)
		cmp    0xc(%esp),%edi
		jge    jump_8b96e
		mov    %edi,0xc(%esp)
	jump_8b96e:
		mov    0x10(%esp),%esi
		lea    0x2(%ecx),%eax
		cmp    %esi,%eax
		jle    jump_8b97d
		mov    %eax,0x10(%esp)
	jump_8b97d:
		mov    0x14(%esp),%edi
		lea    0x1(%edx),%eax
		cmp    %edi,%eax
		jge    jump_8b98c
		mov    %eax,0x14(%esp)
	jump_8b98c:
		mov    0x18(%esp),%ebp
		lea    0x1(%edx),%eax
		cmp    %ebp,%eax
		jle    jump_8b99b
		mov    %eax,0x18(%esp)
	jump_8b99b:
		call   ac_LbRandomAnyShort
		test   $0x1,%al
		je     jump_8ba73
		lea    -0x1(%ecx),%edi
		test   %edi,%edi
		jl     jump_8ba73
		cmp    $0x7f,%edi
		jg     jump_8ba73
		lea    -0x2(%edx),%eax
		test   %eax,%eax
		jl     jump_8ba73
		cmp    $0x7f,%eax
		jg     jump_8ba73
		mov    %edx,%esi
		shl    $0x7,%esi
		add    %ecx,%esi
		sub    $0x101,%esi
		lea    0x0(,%esi,8),%eax
		add    %eax,%esi
		mov    EXPORT_SYMBOL(game_my_big_map),%ebp
		add    %esi,%esi
		mov    (%esi,%ebp,1),%ax
		and    $0x3f,%ah
		mov    %ax,0x58(%esp)
		mov    0x56(%esp),%eax
		sar    $0x10,%eax
		call   is_that_a_sea_texture
		test   %eax,%eax
		jne    jump_8ba73
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %eax,%esi
		andw   $0xc000,(%esi)
		mov    crater_unkn_texture_flags,%ax
		or     %ax,(%esi)
		andb   $0xf,0x11(%esi)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3,%al
		mov    %eax,0x58(%esp)
		mov    %ebx,%eax
		add    %ebx,%eax
		add    0x58(%esp),%eax
		sub    %ax,0x6(%esi)
		cmp    0xc(%esp),%edi
		jge    jump_8ba46
		mov    %edi,0xc(%esp)
	jump_8ba46:
		mov    0x10(%esp),%esi
		lea    -0x1(%ecx),%eax
		cmp    %esi,%eax
		jle    jump_8ba55
		mov    %eax,0x10(%esp)
	jump_8ba55:
		mov    0x14(%esp),%edi
		lea    -0x2(%edx),%eax
		cmp    %edi,%eax
		jge    jump_8ba64
		mov    %eax,0x14(%esp)
	jump_8ba64:
		mov    0x18(%esp),%ebp
		lea    -0x2(%edx),%eax
		cmp    %ebp,%eax
		jle    jump_8ba73
		mov    %eax,0x18(%esp)
	jump_8ba73:
		test   %ecx,%ecx
		jl     jump_8bb3e
		cmp    $0x7f,%ecx
		jg     jump_8bb3e
		lea    -0x2(%edx),%eax
		test   %eax,%eax
		jl     jump_8bb3e
		cmp    $0x7f,%eax
		jg     jump_8bb3e
		mov    %edx,%eax
		shl    $0x7,%eax
		add    %ecx,%eax
		lea    -0x100(%eax),%esi
		lea    0x0(,%esi,8),%eax
		add    %eax,%esi
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %esi,%esi
		mov    (%esi,%eax,1),%ax
		and    $0x3f,%ah
		cwtl
		call   is_that_a_sea_texture
		test   %eax,%eax
		jne    jump_8bb3e
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %eax,%esi
		mov    (%esi),%di
		and    $0xffffc000,%edi
		mov    crater_unkn_texture_flags,%ax
		mov    %di,(%esi)
		or     %eax,%edi
		mov    0x11(%esi),%ah
		mov    %di,(%esi)
		and    $0xf,%ah
		mov    %ebx,%edi
		mov    %ah,0x11(%esi)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		add    %ebx,%edi
		and    $0x3,%al
		add    %edi,%eax
		mov    0x6(%esi),%di
		sub    %eax,%edi
		mov    0xc(%esp),%eax
		mov    %di,0x6(%esi)
		cmp    %eax,%ecx
		jge    jump_8bb16
		mov    %ecx,0xc(%esp)
	jump_8bb16:
		cmp    0x10(%esp),%ecx
		jle    jump_8bb20
		mov    %ecx,0x10(%esp)
	jump_8bb20:
		mov    0x14(%esp),%edi
		lea    -0x2(%edx),%eax
		cmp    %edi,%eax
		jge    jump_8bb2f
		mov    %eax,0x14(%esp)
	jump_8bb2f:
		mov    0x18(%esp),%ebp
		lea    -0x2(%edx),%eax
		cmp    %ebp,%eax
		jle    jump_8bb3e
		mov    %eax,0x18(%esp)
	jump_8bb3e:
		call   ac_LbRandomAnyShort
		test   $0x1,%al
		je     jump_8bc0d
		lea    0x1(%ecx),%edi
		test   %edi,%edi
		jl     jump_8bc0d
		cmp    $0x7f,%edi
		jg     jump_8bc0d
		lea    -0x2(%edx),%eax
		test   %eax,%eax
		jl     jump_8bc0d
		cmp    $0x7f,%eax
		jg     jump_8bc0d
		mov    %edx,%esi
		shl    $0x7,%esi
		add    %ecx,%esi
		sub    $0xff,%esi
		lea    0x0(,%esi,8),%ebp
		add    %esi,%ebp
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %ebp,%ebp
		mov    (%eax,%ebp,1),%ax
		and    $0x3f,%ah
		cwtl
		call   is_that_a_sea_texture
		test   %eax,%eax
		jne    jump_8bc0d
		mov    EXPORT_SYMBOL(game_my_big_map),%esi
		andw   $0xc000,(%esi,%ebp,1)
		mov    crater_unkn_texture_flags,%ax
		or     %ax,(%esi,%ebp,1)
		andb   $0xf,0x11(%esi,%ebp,1)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3,%al
		mov    %eax,0x58(%esp)
		mov    %ebx,%eax
		add    %ebx,%eax
		add    0x58(%esp),%eax
		sub    %ax,0x6(%esi,%ebp,1)
		cmp    0xc(%esp),%edi
		jge    jump_8bbe0
		mov    %edi,0xc(%esp)
	jump_8bbe0:
		mov    0x10(%esp),%esi
		lea    0x1(%ecx),%eax
		cmp    %esi,%eax
		jle    jump_8bbef
		mov    %eax,0x10(%esp)
	jump_8bbef:
		mov    0x14(%esp),%edi
		lea    -0x2(%edx),%eax
		cmp    %edi,%eax
		jge    jump_8bbfe
		mov    %eax,0x14(%esp)
	jump_8bbfe:
		mov    0x18(%esp),%ebp
		lea    -0x2(%edx),%eax
		cmp    %ebp,%eax
		jle    jump_8bc0d
		mov    %eax,0x18(%esp)
	jump_8bc0d:
		call   ac_LbRandomAnyShort
		test   $0x1,%al
		je     jump_8bce4
		lea    -0x1(%ecx),%edi
		test   %edi,%edi
		jl     jump_8bce4
		cmp    $0x7f,%edi
		jg     jump_8bce4
		lea    0x2(%edx),%eax
		test   %eax,%eax
		jl     jump_8bce4
		cmp    $0x7f,%eax
		jg     jump_8bce4
		mov    %edx,%eax
		shl    $0x7,%eax
		add    %ecx,%eax
		lea    0xff(%eax),%esi
		lea    0x0(,%esi,8),%eax
		add    %eax,%esi
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %esi,%esi
		mov    (%esi,%eax,1),%ax
		and    $0x3f,%ah
		mov    %ax,0x58(%esp)
		mov    0x56(%esp),%eax
		sar    $0x10,%eax
		call   is_that_a_sea_texture
		test   %eax,%eax
		jne    jump_8bce4
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %eax,%esi
		andw   $0xc000,(%esi)
		mov    crater_unkn_texture_flags,%ax
		or     %ax,(%esi)
		andb   $0xf,0x11(%esi)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3,%al
		mov    %eax,0x58(%esp)
		mov    %ebx,%eax
		add    %ebx,%eax
		add    0x58(%esp),%eax
		sub    %ax,0x6(%esi)
		cmp    0xc(%esp),%edi
		jge    jump_8bcb7
		mov    %edi,0xc(%esp)
	jump_8bcb7:
		mov    0x10(%esp),%esi
		lea    -0x1(%ecx),%eax
		cmp    %esi,%eax
		jle    jump_8bcc6
		mov    %eax,0x10(%esp)
	jump_8bcc6:
		mov    0x14(%esp),%edi
		lea    0x2(%edx),%eax
		cmp    %edi,%eax
		jge    jump_8bcd5
		mov    %eax,0x14(%esp)
	jump_8bcd5:
		mov    0x18(%esp),%ebp
		lea    0x2(%edx),%eax
		cmp    %ebp,%eax
		jle    jump_8bce4
		mov    %eax,0x18(%esp)
	jump_8bce4:
		test   %ecx,%ecx
		jl     jump_8bdaf
		cmp    $0x7f,%ecx
		jg     jump_8bdaf
		lea    0x2(%edx),%eax
		test   %eax,%eax
		jl     jump_8bdaf
		cmp    $0x7f,%eax
		jg     jump_8bdaf
		mov    %edx,%eax
		shl    $0x7,%eax
		add    %ecx,%eax
		lea    0x100(%eax),%esi
		lea    0x0(,%esi,8),%edi
		add    %esi,%edi
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %edi,%edi
		mov    (%edi,%eax,1),%ax
		and    $0x3f,%ah
		cwtl
		call   is_that_a_sea_texture
		test   %eax,%eax
		jne    jump_8bdaf
		mov    EXPORT_SYMBOL(game_my_big_map),%esi
		add    %edi,%esi
		mov    (%esi),%di
		and    $0xffffc000,%edi
		mov    crater_unkn_texture_flags,%ax
		mov    %di,(%esi)
		or     %eax,%edi
		mov    0x11(%esi),%al
		mov    %di,(%esi)
		and    $0xf,%al
		mov    %ebx,%edi
		mov    %al,0x11(%esi)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		add    %ebx,%edi
		and    $0x3,%al
		add    %edi,%eax
		mov    0x6(%esi),%di
		sub    %eax,%edi
		mov    0xc(%esp),%eax
		mov    %di,0x6(%esi)
		cmp    %eax,%ecx
		jge    jump_8bd87
		mov    %ecx,0xc(%esp)
	jump_8bd87:
		cmp    0x10(%esp),%ecx
		jle    jump_8bd91
		mov    %ecx,0x10(%esp)
	jump_8bd91:
		mov    0x14(%esp),%edi
		lea    0x2(%edx),%eax
		cmp    %edi,%eax
		jge    jump_8bda0
		mov    %eax,0x14(%esp)
	jump_8bda0:
		mov    0x18(%esp),%ebp
		lea    0x2(%edx),%eax
		cmp    %ebp,%eax
		jle    jump_8bdaf
		mov    %eax,0x18(%esp)
	jump_8bdaf:
		call   ac_LbRandomAnyShort
		test   $0x1,%al
		je     jump_8be74
		lea    0x1(%ecx),%edi
		test   %edi,%edi
		jl     jump_8be74
		cmp    $0x7f,%edi
		jg     jump_8be74
		lea    0x2(%edx),%eax
		test   %eax,%eax
		jl     jump_8be74
		cmp    $0x7f,%eax
		jg     jump_8be74
		mov    %edx,%eax
		shl    $0x7,%eax
		add    %ecx,%eax
		lea    0x101(%eax),%esi
		lea    0x0(,%esi,8),%ebp
		add    %esi,%ebp
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %ebp,%ebp
		mov    (%eax,%ebp,1),%ax
		and    $0x3f,%ah
		cwtl
		call   is_that_a_sea_texture
		test   %eax,%eax
		jne    jump_8be74
		mov    EXPORT_SYMBOL(game_my_big_map),%esi
		andw   $0xc000,(%esi,%ebp,1)
		mov    crater_unkn_texture_flags,%ax
		or     %ax,(%esi,%ebp,1)
		andb   $0xf,0x11(%esi,%ebp,1)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3,%al
		add    %ebx,%ebx
		add    %eax,%ebx
		sub    %bx,0x6(%esi,%ebp,1)
		cmp    0xc(%esp),%edi
		jge    jump_8be49
		mov    %edi,0xc(%esp)
	jump_8be49:
		mov    0x10(%esp),%ebx
		inc    %ecx
		cmp    %ebx,%ecx
		jle    jump_8be56
		mov    %ecx,0x10(%esp)
	jump_8be56:
		mov    0x14(%esp),%ecx
		lea    0x2(%edx),%eax
		cmp    %ecx,%eax
		jge    jump_8be65
		mov    %eax,0x14(%esp)
	jump_8be65:
		mov    0x18(%esp),%esi
		add    $0x2,%edx
		cmp    %esi,%edx
		jle    jump_8be74
		mov    %edx,0x18(%esp)
	jump_8be74:
		mov    0xc(%esp),%edx
		mov    0x10(%esp),%ebx
		mov    0x14(%esp),%ecx
		mov    0x18(%esp),%esi
		dec    %edx
		inc    %ebx
		dec    %ecx
		inc    %esi
		mov    %edx,0xc(%esp)
		mov    %ebx,0x10(%esp)
		mov    %ecx,0x14(%esp)
		mov    %esi,0x18(%esp)
		test   %edx,%edx
		jge    jump_8bea2
		xor    %ebp,%ebp
		mov    %ebp,0xc(%esp)
	jump_8bea2:
		cmpl   $0x7f,0x10(%esp)
		jle    jump_8beb1
		movl   $0x7f,0x10(%esp)
	jump_8beb1:
		cmpl   $0x0,0x14(%esp)
		jge    jump_8bebe
		xor    %ecx,%ecx
		mov    %ecx,0x14(%esp)
	jump_8bebe:
		cmpl   $0x7f,0x18(%esp)
		jle    jump_8becd
		movl   $0x7f,0x18(%esp)
	jump_8becd:
		mov    0x14(%esp),%eax
		mov    0x18(%esp),%ebp
		mov    %eax,0x30(%esp)
		cmp    %ebp,%eax
		jmp    jump_8beec
	jump_8bedd:
		mov    0x30(%esp),%eax
		inc    %eax
		mov    0x18(%esp),%edx
		mov    %eax,0x30(%esp)
		cmp    %edx,%eax
	jump_8beec:
		jg     jump_8c08e
		mov    0xc(%esp),%ebx
		cmp    0x10(%esp),%ebx
		jg     jump_8bedd
		mov    0x30(%esp),%eax
		shl    $0x7,%eax
		mov    %eax,0x20(%esp)
		imul   $0x12,%ebx,%eax
		imul   $0x12,0x20(%esp),%edx
		lea    (%eax,%edx,1),%esi
		lea    -0x900(%eax),%ecx
		lea    0x900(%eax),%edi
		add    %edx,%ecx
		sub    $0x12,%eax
		mov    %ecx,0x40(%esp)
		add    %edx,%eax
		add    %edx,%edi
		mov    %eax,0x44(%esp)
	jump_8bf2f:
		mov    0x20(%esp),%eax
		add    %ebx,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    %eax,0x34(%esp)
		mov    (%edx,%esi,1),%ax
		and    $0x3f,%ah
		movswl %ax,%ecx
		xor    %eax,%eax
		mov    crater_unkn_texture_flags,%ax
		cmp    %eax,%ecx
		je     jump_8c060
		mov    0x34(%esp),%ebp
		inc    %ebp
		imul   $0x12,%ebp,%ebp
		add    %edx,%ebp
		mov    0x0(%ebp),%cx
		and    $0x3f,%ch
		mov    %cx,0x58(%esp)
		mov    0x56(%esp),%ecx
		sar    $0x10,%ecx
		cmp    %eax,%ecx
		sete   %cl
		mov    0x44(%esp),%ebp
		mov    %cl,0x60(%esp)
		mov    %cl,(%esp)
		mov    (%edx,%ebp,1),%cx
		and    $0x3f,%ch
		mov    %cx,0x58(%esp)
		mov    0x56(%esp),%ecx
		sar    $0x10,%ecx
		cmp    %eax,%ecx
		sete   %cl
		mov    0x40(%esp),%ebp
		mov    %cl,0x64(%esp)
		mov    %cl,0x1(%esp)
		mov    (%edx,%edi,1),%cx
		add    %edx,%ebp
		and    $0x3f,%ch
		mov    0x0(%ebp),%dx
		mov    %cx,0x58(%esp)
		and    $0x3f,%dh
		mov    0x56(%esp),%ecx
		mov    %dx,0x58(%esp)
		sar    $0x10,%ecx
		mov    0x56(%esp),%edx
		cmp    %eax,%ecx
		sete   %cl
		sar    $0x10,%edx
		mov    %cl,0x2(%esp)
		cmp    %eax,%edx
		sete   %al
		mov    %al,0x3(%esp)
		cmpb   $0x0,0x60(%esp)
		je     jump_8bff6
		cmpb   $0x0,0x64(%esp)
		je     jump_8bff6
		test   %cl,%cl
		jne    jump_8c033
	jump_8bff6:
		cmpb   $0x0,(%esp)
		je     jump_8c00a
		cmpb   $0x0,0x1(%esp)
		je     jump_8c00a
		cmpb   $0x0,0x3(%esp)
		jne    jump_8c033
	jump_8c00a:
		cmpb   $0x0,0x1(%esp)
		je     jump_8c01f
		cmpb   $0x0,0x2(%esp)
		je     jump_8c01f
		cmpb   $0x0,0x3(%esp)
		jne    jump_8c033
	jump_8c01f:
		cmpb   $0x0,(%esp)
		je     jump_8c060
		cmpb   $0x0,0x2(%esp)
		je     jump_8c060
		cmpb   $0x0,0x3(%esp)
		je     jump_8c060
	jump_8c033:
		imul   $0x12,0x34(%esp),%edx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %edx,%eax
		mov    (%eax),%cx
		and    $0xffffc000,%ecx
		mov    crater_unkn_texture_flags,%dx
		mov    %cx,(%eax)
		or     %edx,%ecx
		mov    0x11(%eax),%dl
		mov    %cx,(%eax)
		and    $0xf,%dl
		mov    %dl,0x11(%eax)
	jump_8c060:
		mov    0x40(%esp),%ebp
		mov    0x44(%esp),%eax
		mov    0x10(%esp),%edx
		add    $0x12,%esi
		add    $0x12,%edi
		inc    %ebx
		add    $0x12,%ebp
		add    $0x12,%eax
		mov    %ebp,0x40(%esp)
		mov    %eax,0x44(%esp)
		cmp    %edx,%ebx
		jg     jump_8bedd
		jmp    jump_8bf2f
	jump_8c08e:
		mov    0x14(%esp),%eax
		mov    0x18(%esp),%ebx
		mov    %eax,0x1c(%esp)
		cmp    %ebx,%eax
		jmp    jump_8c0ad
	jump_8c09e:
		mov    0x1c(%esp),%edx
		inc    %edx
		mov    0x18(%esp),%ebx
		mov    %edx,0x1c(%esp)
		cmp    %ebx,%edx
	jump_8c0ad:
		jg     jump_8c4b8
		mov    0xc(%esp),%edi
		cmp    0x10(%esp),%edi
		jg     jump_8c09e
		imul   $0x12,%edi,%edx
		mov    0x1c(%esp),%eax
		shl    $0x7,%eax
		mov    %eax,0x3c(%esp)
		imul   $0x12,%eax,%eax
		lea    0x12(%edx),%ebx
		add    %eax,%ebx
		mov    %ebx,0x48(%esp)
		lea    (%edx,%eax,1),%ebx
		mov    %ebx,0x4c(%esp)
		lea    -0x12(%edx),%ebx
		add    %eax,%ebx
		mov    %ebx,0x24(%esp)
		lea    -0x8ee(%edx),%ebx
		add    %eax,%ebx
		mov    %ebx,0x28(%esp)
		lea    -0x900(%edx),%ebx
		add    %eax,%ebx
		mov    %ebx,0x38(%esp)
		lea    0x912(%edx),%ebx
		add    %eax,%ebx
		mov    %ebx,0x50(%esp)
		lea    0x900(%edx),%ebx
		add    $0x8ee,%edx
		add    %eax,%ebx
		add    %eax,%edx
		mov    %ebx,0x2c(%esp)
		mov    %edx,0x54(%esp)
	jump_8c123:
		mov    0x4c(%esp),%esi
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %esi,%eax
		mov    0x3c(%esp),%ebx
		mov    (%eax),%ax
		xor    %edx,%edx
		and    $0x3f,%ah
		mov    crater_unkn_texture_flags,%dx
		cwtl
		add    %edi,%ebx
		cmp    %edx,%eax
		je     jump_8c28a
		call   sea_texture
		test   %eax,%eax
		jne    jump_8c28a
		lea    -0x81(%ebx),%eax
		imul   $0x12,%eax,%edx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		mov    (%edx,%eax,1),%dx
		and    $0x3f,%dh
		movswl %dx,%ecx
		xor    %edx,%edx
		mov    crater_unkn_texture_flags,%dx
		cmp    %edx,%ecx
		sete   %cl
		mov    %cl,(%esp)
		mov    0x38(%esp),%ecx
		mov    (%ecx,%eax,1),%cx
		and    $0x3f,%ch
		movswl %cx,%ecx
		cmp    %edx,%ecx
		sete   %cl
		mov    %cl,0x1(%esp)
		mov    0x28(%esp),%ecx
		mov    (%ecx,%eax,1),%cx
		and    $0x3f,%ch
		movswl %cx,%ecx
		cmp    %edx,%ecx
		sete   %cl
		mov    %cl,0x2(%esp)
		mov    0x24(%esp),%ecx
		mov    (%ecx,%eax,1),%cx
		and    $0x3f,%ch
		movswl %cx,%ecx
		cmp    %edx,%ecx
		sete   %cl
		add    %eax,%esi
		mov    %cl,0x3(%esp)
		mov    (%esi),%cx
		and    $0x3f,%ch
		mov    %cx,0x58(%esp)
		mov    0x56(%esp),%ecx
		sar    $0x10,%ecx
		cmp    %edx,%ecx
		sete   %cl
		mov    0x48(%esp),%ebp
		mov    %cl,0x4(%esp)
		mov    (%eax,%ebp,1),%cx
		and    $0x3f,%ch
		mov    %cx,0x58(%esp)
		mov    0x56(%esp),%ecx
		sar    $0x10,%ecx
		cmp    %edx,%ecx
		sete   %cl
		mov    0x54(%esp),%ebp
		mov    %cl,0x5c(%esp)
		mov    %cl,0x5(%esp)
		mov    (%eax,%ebp,1),%cx
		and    $0x3f,%ch
		mov    %cx,0x58(%esp)
		mov    0x56(%esp),%ecx
		sar    $0x10,%ecx
		cmp    %edx,%ecx
		sete   %cl
		mov    0x2c(%esp),%ebp
		mov    %cl,0x6(%esp)
		mov    (%eax,%ebp,1),%cx
		mov    0x50(%esp),%ebp
		add    %eax,%ebp
		and    $0x3f,%ch
		mov    0x0(%ebp),%ax
		mov    %cx,0x58(%esp)
		and    $0x3f,%ah
		mov    0x56(%esp),%ecx
		mov    %ax,0x58(%esp)
		sar    $0x10,%ecx
		mov    0x56(%esp),%eax
		cmp    %edx,%ecx
		sete   %cl
		sar    $0x10,%eax
		mov    %cl,0x7(%esp)
		cmp    %edx,%eax
		sete   %al
		mov    0x5c(%esp),%dh
		mov    %al,0x8(%esp)
		test   %dh,%dh
		je     jump_8c2f4
		test   %cl,%cl
		je     jump_8c2f4
		mov    0x11(%esi),%al
		and    $0xf,%al
		mov    %al,0x11(%esi)
		mov    %al,%ah
		or     $0xc0,%ah
		mov    %ah,0x11(%esi)
	jump_8c28a:
		mov    0x48(%esp),%esi
		mov    0x4c(%esp),%ebp
		mov    0x24(%esp),%eax
		mov    0x28(%esp),%edx
		mov    0x38(%esp),%ebx
		mov    0x50(%esp),%ecx
		inc    %edi
		add    $0x12,%esi
		add    $0x12,%ebp
		add    $0x12,%eax
		add    $0x12,%edx
		add    $0x12,%ebx
		add    $0x12,%ecx
		mov    %esi,0x48(%esp)
		mov    %ebp,0x4c(%esp)
		mov    %eax,0x24(%esp)
		mov    %edx,0x28(%esp)
		mov    %ebx,0x38(%esp)
		mov    %ecx,0x50(%esp)
		mov    0x2c(%esp),%esi
		mov    0x54(%esp),%ebp
		mov    0x10(%esp),%eax
		add    $0x12,%esi
		add    $0x12,%ebp
		mov    %esi,0x2c(%esp)
		mov    %ebp,0x54(%esp)
		cmp    %eax,%edi
		jg     jump_8c09e
		jmp    jump_8c123
	jump_8c2f4:
		cmpb   $0x0,0x1(%esp)
		je     jump_8c323
		cmpb   $0x0,0x5(%esp)
		je     jump_8c323
		imul   $0x12,%ebx,%ebx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		mov    0x11(%ebx,%eax,1),%cl
		and    $0xf,%cl
		mov    %cl,0x11(%ebx,%eax,1)
		mov    %cl,%ch
		or     $0x90,%ch
		mov    %ch,0x11(%ebx,%eax,1)
		jmp    jump_8c28a
	jump_8c323:
		cmpb   $0x0,0x3(%esp)
		je     jump_8c353
		cmpb   $0x0,0x1(%esp)
		je     jump_8c353
		imul   $0x12,%ebx,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0x11(%edx,%eax,1),%bl
		and    $0xf,%bl
		mov    %bl,0x11(%edx,%eax,1)
		mov    %bl,%bh
		or     $0x60,%bh
		mov    %bh,0x11(%edx,%eax,1)
		jmp    jump_8c28a
	jump_8c353:
		cmpb   $0x0,0x7(%esp)
		je     jump_8c382
		cmpb   $0x0,0x3(%esp)
		je     jump_8c382
		imul   $0x12,%ebx,%ebx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		mov    0x11(%ebx,%eax,1),%cl
		and    $0xf,%cl
		mov    %cl,0x11(%ebx,%eax,1)
		mov    %cl,%ch
		or     $0x30,%ch
		mov    %ch,0x11(%ebx,%eax,1)
		jmp    jump_8c28a
	jump_8c382:
		imul   $0x12,%ebx,%eax
		cmpb   $0x0,0x7(%esp)
		je     jump_8c3ab
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0x11(%edx,%eax,1),%bl
		and    $0xf,%bl
		mov    %bl,0x11(%edx,%eax,1)
		mov    %bl,%bh
		or     $0x10,%bh
		mov    %bh,0x11(%edx,%eax,1)
		jmp    jump_8c28a
	jump_8c3ab:
		cmpb   $0x0,0x5(%esp)
		je     jump_8c3d1
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0x11(%edx,%eax,1),%cl
		and    $0xf,%cl
		mov    %cl,0x11(%edx,%eax,1)
		mov    %cl,%ch
		or     $0xa0,%ch
		mov    %ch,0x11(%edx,%eax,1)
		jmp    jump_8c28a
	jump_8c3d1:
		cmpb   $0x0,0x1(%esp)
		je     jump_8c3f7
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0x11(%edx,%eax,1),%bl
		and    $0xf,%bl
		mov    %bl,0x11(%edx,%eax,1)
		mov    %bl,%bh
		or     $0x70,%bh
		mov    %bh,0x11(%edx,%eax,1)
		jmp    jump_8c28a
	jump_8c3f7:
		cmpb   $0x0,0x3(%esp)
		je     jump_8c41d
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0x11(%edx,%eax,1),%cl
		and    $0xf,%cl
		mov    %cl,0x11(%edx,%eax,1)
		mov    %cl,%ch
		or     $0x40,%ch
		mov    %ch,0x11(%edx,%eax,1)
		jmp    jump_8c28a
	jump_8c41d:
		cmpb   $0x0,0x8(%esp)
		je     jump_8c443
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0x11(%edx,%eax,1),%bl
		and    $0xf,%bl
		mov    %bl,0x11(%edx,%eax,1)
		mov    %bl,%bh
		or     $0xb0,%bh
		mov    %bh,0x11(%edx,%eax,1)
		jmp    jump_8c28a
	jump_8c443:
		cmpb   $0x0,0x2(%esp)
		je     jump_8c469
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0x11(%edx,%eax,1),%cl
		and    $0xf,%cl
		mov    %cl,0x11(%edx,%eax,1)
		mov    %cl,%ch
		or     $0x80,%ch
		mov    %ch,0x11(%edx,%eax,1)
		jmp    jump_8c28a
	jump_8c469:
		cmpb   $0x0,(%esp)
		je     jump_8c48e
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0x11(%edx,%eax,1),%bl
		and    $0xf,%bl
		mov    %bl,0x11(%edx,%eax,1)
		mov    %bl,%bh
		or     $0x50,%bh
		mov    %bh,0x11(%edx,%eax,1)
		jmp    jump_8c28a
	jump_8c48e:
		cmpb   $0x0,0x6(%esp)
		je     jump_8c28a
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0x11(%edx,%eax,1),%cl
		and    $0xf,%cl
		mov    %cl,0x11(%edx,%eax,1)
		mov    %cl,%ch
		or     $0x20,%ch
		mov    %ch,0x11(%edx,%eax,1)
		jmp    jump_8c28a
	jump_8c4b8:
		add    $0x68,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_find_the_tall_buildings)	/* 0x08C70C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		mov    things,%esi
		mov    $0x48000,%edx
		xor    %ebx,%ebx
		mov    %edx,(%esp)
		mov    %ebx,0x4(%esp)
		xor    %ebp,%ebp
		mov    (%esp),%eax
		mov    0x4(%esp),%edi
		mov    %eax,0x8(%esp)
		add    %ebp,%edi
		jmp    jump_8c777
	jump_8c73a:
		mov    (%esp),%ecx
		mov    0x4(%esp),%edi
		add    $0x12,%ecx
		add    $0x12,%edi
		mov    %ecx,(%esp)
		mov    %edi,0x4(%esp)
		cmp    $0x900,%edi
		je     jump_8c7de
		mov    (%esp),%eax
		mov    0x4(%esp),%edi
		mov    %eax,0x8(%esp)
		add    %ebp,%edi
		jmp    jump_8c777
	jump_8c769:
		mov    0x8(%esp),%edx
		add    $0x900,%edi
		cmp    %edx,%edi
		je     jump_8c73a
	jump_8c777:
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0x6(%edx,%edi,1),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		je     jump_8c769
	jump_8c788:
		jle    jump_8c7ca
		imul   $0xa8,%edx,%ebx
		lea    (%esi,%ebx,1),%eax
		xor    %ecx,%ecx
		mov    0x9(%eax),%cl
		cmp    $0x9,%ecx
		jne    jump_8c7c0
		mov    0x52(%eax),%ax
		and    $0xffff,%eax
		mov    %esi,things
		call   calc_object_height
		mov    things,%esi
		mov    %esi,%ecx
		mov    %eax,0x88(%ecx,%ebx,1)
	jump_8c7c0:
		imul   $0xa8,%edx,%edx
		mov    %esi,%eax
		jmp    jump_8c7d2
	jump_8c7ca:
		imul   $0x3c,%edx,%edx
		mov    EXPORT_SYMBOL(sthings),%eax
	jump_8c7d2:
		mov    (%edx,%eax,1),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		jne    jump_8c788
		jmp    jump_8c769
	jump_8c7de:
		mov    %esi,things
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_show_login_name)	/* 0x08D300 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    %eax,%esi
		mov    med2_font,%eax
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    0x6(%esi),%ax
		xor    %ecx,%ecx
		sub    $0x8,%eax
		mov    %ax,%cx
		mov    0x4(%esi),%ax
		xor    %ebx,%ebx
		sub    $0x8,%eax
		mov    %ax,%bx
		mov    0x2(%esi),%ax
		xor    %edx,%edx
		add    $0x4,%eax
		mov    %ax,%dx
		mov    (%esi),%ax
		add    $0x4,%eax
		and    $0xffff,%eax
		call   ac_my_set_text_window
		mov    EXPORT_SYMBOL(gui_strings)+0x718,%eax
		call   ac_my_string_width
		lea    0x2(%eax),%edi
		testb  $0x80,0xb(%esi)
		jne    jump_8d3fa
		mov    $0x2,%edx
		mov    med_font,%eax
		mov    EXPORT_SYMBOL(gui_strings)+0x718,%ebx
		xor    %ecx,%ecx
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		xor    %eax,%eax
		call   ac_draw_text_purple_list2
		mov    $0x4,%edx
		push   $0xf3
		mov    $0xe,%ecx
		xor    %eax,%eax
		mov    $0xf4,%ebx
		mov    EXPORT_SYMBOL(text_window_x1),%ax
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %edx,%edx
		add    %edi,%eax
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		call   ac_draw_box_purple_list
		xor    %ebx,%ebx
		xor    %ecx,%ecx
		xor    %edx,%edx
		xor    %eax,%eax
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    0x6(%esi),%cx
		mov    0x2(%esi),%dx
		mov    (%esi),%ax
		add    $0x6,%ecx
		xor    %ebx,%ebx
		sub    $0x3,%edx
		mov    0x4(%esi),%bx
		sub    $0x3,%eax
		add    $0x6,%ebx
		call   ac_copy_box_purple_list
		mov    0xb(%esi),%dl
		mov    med2_font,%eax
		or     $0x80,%dl
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    %dl,0xb(%esi)
		call   ac_reset_buffered_keys
	jump_8d3fa:
		mov    $0x1,%ebx
		mov    $0xf,%edx
		mov    $login_name,%eax
		call   user_read_value
		xor    %ecx,%ecx
		mov    $login_name,%ebx
		mov    $0x2,%edx
		lea    0x2(%edi),%eax
		call   ac_draw_text_purple_list2
		cmpb   $0x50,login_name
		jne    jump_8d49a
		mov    EXPORT_SYMBOL(login_name)+1,%bl
		cmp    $0x4f,%bl
		jne    jump_8d49a
		cmp    EXPORT_SYMBOL(login_name)+2,%bl
		jne    jump_8d49a
		cmpb   $0x53,EXPORT_SYMBOL(login_name)+3
		jne    jump_8d49a
		cmpb   $0x4c,EXPORT_SYMBOL(login_name)+4
		jne    jump_8d49a
		cmpb   $0x49,EXPORT_SYMBOL(login_name)+5
		jne    jump_8d49a
		cmpb   $0x43,EXPORT_SYMBOL(login_name)+6
		jne    jump_8d49a
		cmpb   $0x45,EXPORT_SYMBOL(login_name)+7
		jne    jump_8d49a
		push   $0x3
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		mov    EXPORT_SYMBOL(ingame)+0x99b,%dh # ingame.UserFlags
		push   $0x0
		xor    %eax,%eax
		or     $0x4,%dh
		push   $0x64
		mov    %dh,EXPORT_SYMBOL(ingame)+0x99b # ingame.UserFlags
		mov    $0x47,%edx
		call   ac_play_sample_using_heap
	jump_8d49a:
		testb  $0x1,gameturn
		je     jump_8d4d6
		mov    EXPORT_SYMBOL(lbFontPtr),%ebx
		xor    %edx,%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		mov    EXPORT_SYMBOL(text_window_x1),%ax
		add    $0x54,%ebx
		add    $0x6,%edx
		add    %eax,%edi
		mov    $login_name,%eax
		add    $0x2,%edi
		call   ac_my_string_width
		add    %edi,%eax
		call   ac_draw_sprite_purple_list
	jump_8d4d6:
		xor    %al,%al
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_purple_unkn1_data_to_screen)	/* 0x08E398 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		mov    $0x5fa0,%ecx
		mov    EXPORT_SYMBOL(dword_1C6DE8),%esi
		mov    EXPORT_SYMBOL(dword_1C6DE4),%edi
		push   %edi
		mov    %ecx,%eax
		shr    $0x2,%ecx
		repnz movsl %ds:(%esi),%es:(%edi)
		mov    %al,%cl
		and    $0x3,%cl
		repnz movsb %ds:(%esi),%es:(%edi)
		pop    %edi
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_show_net_grpaint)	/* 0x08E3C0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    %eax,%esi
		testb  $0x10,0xb(%eax)
		jne    jump_8e4a5
		mov    $0x10,%edx
		push   $0xf3
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    $0x61,%ecx
		mov    $0xd,%ebx
		xor    %edx,%edx
		xor    %eax,%eax
		mov    0x2(%esi),%dx
		mov    (%esi),%ax
		add    $0x4,%edx
		add    $0x107,%eax
		call   ac_draw_box_purple_list
		xor    %ebx,%ebx
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %edx,%edx
		xor    %edi,%edi
		mov    %edx,(%esp)
		mov    $0x9,%ebp
	jump_8e41d:
		mov    (%esp),%edx
		xor    %eax,%eax
		mov    $0x15,%ecx
		mov    data_155170(%edx),%al
		mov    %ebp,%ebx
		push   %eax
		xor    %edx,%edx
		xor    %eax,%eax
		mov    0x2(%esi),%dx
		mov    (%esi),%ax
		add    $0x6,%edx
		add    $0x109,%eax
		add    %edi,%edx
		call   ac_draw_box_purple_list
		mov    (%esp),%ebx
		inc    %ebx
		add    $0x18,%edi
		mov    %ebx,(%esp)
		cmp    $0x4,%ebx
		jl     jump_8e41d
		mov    $ac_purple_unkn3_data_to_screen,%eax
		call   ac_draw_flic_purple_list
		xor    %eax,%eax
		mov    login_control__State,%al
		cmp    $0x5,%eax
		je     jump_8e479
		mov    $ac_purple_unkn1_data_to_screen,%eax
		call   ac_draw_flic_purple_list
	jump_8e479:
		xor    %ecx,%ecx
		xor    %ebx,%ebx
		xor    %edx,%edx
		xor    %eax,%eax
		mov    0x6(%esi),%cx
		mov    0x4(%esi),%bx
		mov    0x2(%esi),%dx
		mov    (%esi),%ax
		add    $0x6,%ecx
		add    $0x6,%ebx
		sub    $0x3,%edx
		sub    $0x3,%eax
		call   ac_copy_box_purple_list
		orb    $0x10,0xb(%esi)
	jump_8e4a5:
		mov    $ac_purple_unkn4_data_to_screen,%eax
		mov    $0x18,%ebp
		xor    %edi,%edi
		call   ac_draw_flic_purple_list
		mov    %edi,(%esp)
		jmp    jump_8e59f
	jump_8e4be:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_8e4c3:
		xor    %edx,%edx
		mov    (%esi),%dx
		add    $0x109,%edx
		cmp    %edx,%eax
		jl     jump_8e58d
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_8e4ec
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_8e4f1
	jump_8e4ec:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_8e4f1:
		xor    %edx,%edx
		mov    (%esi),%dx
		add    $0x112,%edx
		cmp    %edx,%eax
		jge    jump_8e58d
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_8e51a
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_8e51f
	jump_8e51a:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_8e51f:
		xor    %edx,%edx
		mov    0x2(%esi),%dx
		add    $0x6,%edx
		add    %edi,%edx
		cmp    %edx,%eax
		jl     jump_8e58d
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_8e544
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_8e549
	jump_8e544:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_8e549:
		xor    %edx,%edx
		mov    0x2(%esi),%dx
		add    $0x6,%edx
		add    %ebp,%edx
		cmp    %edx,%eax
		jge    jump_8e58d
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		je     jump_8e58d
		push   $0x2
		xor    %bl,%bl
		push   $0x0
		mov    %bl,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		push   $0x64
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		mov    $0x6f,%edx
		xor    %eax,%eax
		call   ac_play_sample_using_heap
		mov    (%esp),%al
		mov    %al,data_1c47ea
	jump_8e58d:
		mov    (%esp),%eax
		add    $0x18,%edi
		inc    %eax
		add    $0x18,%ebp
		mov    %eax,(%esp)
		cmp    $0x4,%eax
		jge    jump_8e5bc
	jump_8e59f:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_8e4be
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_8e4c3
	jump_8e5bc:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_8e5d2
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
		add    %eax,%eax
		jmp    jump_8e5d7
	jump_8e5d2:
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
	jump_8e5d7:
		xor    %edx,%edx
		mov    (%esi),%dx
		add    $0x4,%edx
		cmp    %edx,%eax
		jl     jump_8e7de
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_8e5fd
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
		add    %eax,%eax
		jmp    jump_8e602
	jump_8e5fd:
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
	jump_8e602:
		xor    %edx,%edx
		mov    (%esi),%dx
		add    $0x103,%edx
		cmp    %edx,%eax
		jge    jump_8e7de
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_8e62b
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		add    %eax,%eax
		jmp    jump_8e630
	jump_8e62b:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
	jump_8e630:
		xor    %edx,%edx
		mov    0x2(%esi),%dx
		add    $0x4,%edx
		cmp    %edx,%eax
		jl     jump_8e7de
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_8e657
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		add    %eax,%eax
		jmp    jump_8e65c
	jump_8e657:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
	jump_8e65c:
		xor    %edx,%edx
		mov    0x2(%esi),%dx
		add    $0x64,%edx
		cmp    %edx,%eax
		jge    jump_8e7de
		call   ac_LbNetworkPlayerNumber
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		add    %eax,%eax
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+106 # lbDisplay.MLeftButton
		je     jump_8e70e
		xor    %cl,%cl
		mov    %cl,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		testb  $0x1,EXPORT_SYMBOL(lbShift)
		je     jump_8e6a7
		movb   $0x10,network_players(%eax)
		jmp    jump_8e6ae
	jump_8e6a7:
		movb   $0xb,network_players(%eax)
	jump_8e6ae:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_8e6c4
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
		add    %eax,%eax
		jmp    jump_8e6c9
	jump_8e6c4:
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
	jump_8e6c9:
		xor    %ebx,%ebx
		mov    (%esi),%bx
		sub    %ebx,%eax
		sub    $0x4,%eax
		mov    %eax,%ebx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    %bx,data_1c5b61(,%eax,2)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_8e704
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		add    %eax,%eax
		jmp    jump_8e77e
	jump_8e704:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		jmp    jump_8e77e
	jump_8e70e:
		xor    %ebx,%ebx
		mov    network_players(%eax),%bl
		cmp    $0x11,%ebx
		jne    jump_8e7ae
		movb   $0x12,network_players(%eax)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_8e73c
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
		add    %eax,%eax
		jmp    jump_8e741
	jump_8e73c:
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
	jump_8e741:
		xor    %ebx,%ebx
		mov    (%esi),%bx
		sub    %ebx,%eax
		sub    $0x4,%eax
		mov    %eax,%ebx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    %bx,data_1c5b61(,%eax,2)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_8e779
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		add    %eax,%eax
		jmp    jump_8e77e
	jump_8e779:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
	jump_8e77e:
		xor    %ebx,%ebx
		mov    0x2(%esi),%bx
		sub    %ebx,%eax
		sub    $0x4,%eax
		mov    %eax,%ebx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    %bx,data_1c5b63(,%eax,2)
		mov    data_1c47ea,%bl
		mov    %bl,data_1c5b6b(,%eax,2)
	jump_8e7ae:
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+107 # lbDisplay.MRightButton
		je     jump_8e7de
		xor    %ch,%ch
		mov    %ch,EXPORT_SYMBOL(lbDisplay)+104 # lbDisplay.RightButton
		call   ac_is_unkn_current_player
		test   %al,%al
		je     jump_8e7de
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		movb   $0x3,network_players(,%eax,2)
	jump_8e7de:
		xor    %al,%al
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_show_net_comms_box)	/* 0x08E7EC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4c,%esp
		mov    %eax,0x40(%esp)
		cmpb   $0x0,data_1c4805
		je     jump_8e810
		xor    %dl,%dl
		mov    %dl,data_1c4805
		mov    %dl,net_unkn1_text
	jump_8e810:
		mov    0x40(%esp),%eax
		mov    0x6(%eax),%ax
		xor    %ecx,%ecx
		sub    $0x8,%eax
		mov    %ax,%cx
		mov    0x40(%esp),%eax
		mov    0x4(%eax),%ax
		xor    %ebx,%ebx
		sub    $0x8,%eax
		mov    %ax,%bx
		mov    0x40(%esp),%eax
		mov    0x2(%eax),%ax
		xor    %edx,%edx
		add    $0x4,%eax
		mov    %ax,%dx
		mov    0x40(%esp),%eax
		mov    (%eax),%ax
		add    $0x4,%eax
		and    $0xffff,%eax
		call   ac_my_set_text_window
		mov    0x40(%esp),%eax
		testb  $0x10,0xb(%eax)
		jne    jump_8e94d
		mov    $0x100,%edx
		mov    med2_font,%eax
		mov    EXPORT_SYMBOL(gui_strings)+0x624,%ebx
		xor    %ecx,%ecx
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %edx,%edx
		xor    %eax,%eax
		call   ac_draw_text_purple_list2
		mov    $0x4,%ebx
		push   $0x38
		mov    0x44(%esp),%eax
		mov    0x44(%esp),%ecx
		xor    %edx,%edx
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    0x2(%eax),%dx
		xor    %ebx,%ebx
		add    $0x12,%edx
		mov    0x4(%eax),%bx
		xor    %eax,%eax
		sub    $0x8,%ebx
		mov    (%ecx),%ax
		mov    $0x3d,%ecx
		add    $0x4,%eax
		mov    0x44(%esp),%esi
		call   ac_draw_box_purple_list
		mov    small_med_font,%eax
		xor    %ecx,%ecx
		xor    %ebx,%ebx
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    $0x41,%eax
		xor    %edx,%edx
		call   ac_font_height
		mov    %al,0x48(%esp)
		mov    %al,%cl
		mov    0x40(%esp),%eax
		push   $0x38
		add    $0x6,%ecx
		mov    0x4(%eax),%bx
		mov    0x2(%eax),%dx
		xor    %eax,%eax
		sub    $0x8,%ebx
		mov    (%esi),%ax
		add    $0x57,%edx
		add    $0x4,%eax
		call   ac_draw_box_purple_list
		mov    %esi,%eax
		xor    %ecx,%ecx
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    0x4(%esi),%bx
		mov    0x2(%esi),%dx
		xor    %esi,%eax
		add    $0x6,%ebx
		sub    $0x3,%edx
		xor    %ecx,%ecx
		mov    (%esi),%ax
		mov    0x6(%esi),%cx
		sub    $0x3,%eax
		add    $0x6,%ecx
		call   ac_copy_box_purple_list
		orb    $0x10,0xb(%esi)
		call   ac_reset_buffered_keys
		jmp    jump_8e965
	jump_8e94d:
		mov    small_med_font,%eax
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    $0x41,%eax
		call   ac_font_height
		mov    %al,0x48(%esp)
	jump_8e965:
		xor    %eax,%eax
		mov    login_control__State,%al
		cmp    $0x5,%eax
		je     jump_8e980
		xor    %cl,%cl
		xor    %al,%al
		mov    %cl,edit_flag
		jmp    jump_8eb43
	jump_8e980:
		mov    $0x1,%ch
		mov    $0xe,%esi
		xor    %ebp,%ebp
		mov    %ch,edit_flag
		mov    %esi,0x44(%esp)
		mov    %ebp,0x3c(%esp)
		jmp    jump_8e9ae
	jump_8e999:
		mov    0x3c(%esp),%ebx
		add    $0x19,%ebx
		inc    %ebp
		mov    %ebx,0x3c(%esp)
		cmp    $0x5,%ebp
		jge    jump_8ea7d
	jump_8e9ae:
		xor    %edx,%edx
		lea    0x28(%esp),%eax
		mov    EXPORT_SYMBOL(byte_1C6DDC)(%ebp),%dl
		call   ac_LbNetworkPlayerName
		cmp    $0x1,%eax
		jne    jump_8e999
		mov    0x3c(%esp),%eax
		mov    EXPORT_SYMBOL(net_players)-3(%eax),%eax
		sar    $0x18,%eax
		test   %eax,%eax
		je     jump_8e999
		mov    $net_players,%eax
		add    0x3c(%esp),%eax
		push   %eax
		lea    0x2c(%esp),%eax
		push   %eax
		xor    %bh,%bh
		push   $ascSS_0
		lea    0xc(%esp),%eax
		xor    %edx,%edx
		push   %eax
		mov    %bh,0x3f(%esp)
		xor    %ecx,%ecx
		call   ac_sprintf
		mov    back_buffer,%edi
		mov    text_buf_pos,%esi
		add    $0x10,%esp
		add    %esi,%edi
		mov    %esp,%esi
		mov    0x44(%esp),%dx
		push   %edi
	jump_8ea16:
		mov    (%esi),%al
		mov    %al,(%edi)
		cmp    $0x0,%al
		je     jump_8ea2e
		mov    0x1(%esi),%al
		add    $0x2,%esi
		mov    %al,0x1(%edi)
		add    $0x2,%edi
		cmp    $0x0,%al
		jne    jump_8ea16
	jump_8ea2e:
		pop    %edi
		add    $0x5,%edx
		mov    back_buffer,%ebx
		mov    text_buf_pos,%edi
		mov    $0x2,%eax
		add    %edi,%ebx
		mov    %esp,%edi
		call   ac_draw_text_purple_list2
		sub    %ecx,%ecx
		dec    %ecx
		xor    %eax,%eax
		repnz scas %es:(%edi),%al
		not    %ecx
		dec    %ecx
		mov    text_buf_pos,%eax
		inc    %ecx
		add    %ecx,%eax
		mov    %eax,text_buf_pos
		xor    %ah,%ah
		mov    0x48(%esp),%al
		mov    0x44(%esp),%edi
		add    $0x4,%eax
		add    %eax,%edi
		mov    %edi,0x44(%esp)
		jmp    jump_8e999
	jump_8ea7d:
		mov    $0x14,%edx
		mov    $net_unkn1_text,%eax
		xor    %ebx,%ebx
		call   user_read_value
		test   %al,%al
		je     jump_8eaf3
		xor    %eax,%eax
		mov    login_control__State,%al
		cmp    $0x5,%eax
		jne    jump_8eaf3
		mov    data_1c47e9,%eax
		sar    $0x18,%eax
		test   %eax,%eax
		je     jump_8eaf3
		call   ac_LbNetworkPlayerNumber
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		add    %eax,%eax
		movb   $0xa,network_players(%eax)
		add    $network_players,%eax
		mov    $net_unkn1_text,%esi
		lea    0x1(%eax),%edi
		mov    $0x1,%dh
		push   %edi
	jump_8ead4:
		mov    (%esi),%al
		mov    %al,(%edi)
		cmp    $0x0,%al
		je     jump_8eaec
		mov    0x1(%esi),%al
		add    $0x2,%esi
		mov    %al,0x1(%edi)
		add    $0x2,%edi
		cmp    $0x0,%al
		jne    jump_8ead4
	jump_8eaec:
		pop    %edi
		mov    %dh,data_1c4805
	jump_8eaf3:
		mov    $net_unkn1_text,%ebx
		mov    $0x56,%edx
		mov    $0x2,%eax
		xor    %ecx,%ecx
		call   ac_draw_text_purple_list2
		testb  $0x1,gameturn
		je     jump_8eb41
		mov    0x40(%esp),%eax
		mov    EXPORT_SYMBOL(lbFontPtr),%ebx
		xor    %edx,%edx
		xor    %ecx,%ecx
		add    $0x54,%ebx
		mov    0x2(%eax),%dx
		mov    (%eax),%cx
		mov    $net_unkn1_text,%eax
		add    $0x5c,%edx
		add    $0x6,%ecx
		call   ac_my_string_width
		add    %ecx,%eax
		call   ac_draw_sprite_purple_list
	jump_8eb41:
		xor    %al,%al
	jump_8eb43:
		add    $0x4c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_do_net_protocol_select)	/* 0x08EB50 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		mov    %al,%dl
		cmpb   $0x0,EXPORT_SYMBOL(byte_1C4A7C)
		je     jump_8eb6e
		xor    %dh,%dh
		call   ac_LbNetworkReset
		mov    %dh,EXPORT_SYMBOL(byte_1C4A7C)
	jump_8eb6e:
		mov    net_protocol_select_button,%ax
		mov    EXPORT_SYMBOL(net_protocol_select_button)+0x04,%bx
		sub    $0xc,%eax
		add    %eax,%ebx
		add    $0x4,%ebx
		test   %dl,%dl
		je     jump_8ec36
		mov    EXPORT_SYMBOL(word_1811AE),%dx
		dec    %dx
		mov    %dx,EXPORT_SYMBOL(word_1811AE)
		jne    jump_8ebd1
		mov    $0x5,%esi
		mov    data_1c4a70,%cl
		mov    %si,EXPORT_SYMBOL(word_1811AE)
		test   %cl,%cl
		je     jump_8ec11
		mov    $0x1,%ch
		mov    %ax,net_protocol_select_button
		mov    %bx,net_unkn40_button
		mov    %ch,EXPORT_SYMBOL(byte_1C4A6F)
		jmp    jump_8ec11
	jump_8ebd1:
		xor    %eax,%eax
		mov    %dx,%ax
		cmp    $0x1,%eax
		jne    jump_8ec11
		cmpb   $0x0,EXPORT_SYMBOL(byte_1C4A6F)
		je     jump_8ec11
		xor    %dh,%ah
		mov    %ah,EXPORT_SYMBOL(byte_1C4A6F)
		mov    net_protocol_select_button,%ax
		mov    $0x5,%edi
		add    $0xc,%eax
		mov    %di,EXPORT_SYMBOL(word_1811AE)
		mov    %ax,net_protocol_select_button
	jump_8ec11:
		mov    EXPORT_SYMBOL(word_1811AE),%ax
		cmp    $0x1,%ax
		jb     jump_8ec2d
		jbe    jump_8ecb7
		cmp    $0x5,%ax
		jbe    jump_8ed7b
	jump_8ec2d:
		mov    $0x1,%al
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_8ec36:
		incw   EXPORT_SYMBOL(word_1811AE)
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(word_1811AE),%dx
		cmp    $0x5,%edx
		jle    jump_8ec11
		cmpb   $0x0,EXPORT_SYMBOL(byte_1C4A6F)
		jne    jump_8ec5e
		mov    data_1c4a70,%ch
		test   %ch,%ch
		jne    jump_8ec8f
	jump_8ec5e:
		mov    $0x1,%esi
		mov    EXPORT_SYMBOL(byte_1C4A6F),%bl
		mov    %si,EXPORT_SYMBOL(word_1811AE)
		test   %bl,%bl
		je     jump_8ec11
		mov    net_protocol_select_button,%di
		xor    %bh,%bh
		add    $0xc,%edi
		mov    %bh,EXPORT_SYMBOL(byte_1C4A6F)
		mov    %di,net_protocol_select_button
		jmp    jump_8ec11
	jump_8ec8f:
		je     jump_8ec11
		mov    $0x1,%dh
		mov    $0x2,%ecx
		mov    %ax,net_protocol_select_button
		mov    %bx,net_unkn40_button
		mov    %dh,EXPORT_SYMBOL(byte_1C4A6F)
		mov    %cx,EXPORT_SYMBOL(word_1811AE)
		jmp    jump_8ec11
	jump_8ecb7:
		mov    $0x1108,%ebx
		mov    EXPORT_SYMBOL(gui_strings)+0x7C8,%eax
		xor    %edx,%edx
		mov    %eax,EXPORT_SYMBOL(net_protocol_select_button)+0x08
		mov    $unkstruct04_arr,%eax
		call   ac_memset
		xor    %bl,%bl
		xor    %eax,%eax
		mov    %bl,EXPORT_SYMBOL(byte_1C6D48)
	jump_8ecdc:
		add    $0x10,%eax
		xor    %bh,%bh
		mov    %bh,data_1c499c(%eax)
		cmp    $0x80,%eax
		jne    jump_8ecdc
		mov    $EXPORT_SYMBOL(nsvc),%eax
		call   ac_LbNetworkServiceStart
		cmp    $0x1,%eax
		jne    jump_8ed2b
		mov    $0x1,%ch
		mov    $0xff,%al
		mov    $unkn_opt_number_text,%edx
		mov    $ASM_do_net_protocol_option,%ebx
		mov    %ch,EXPORT_SYMBOL(byte_1C4A7C)
		mov    %al,EXPORT_SYMBOL(byte_15516C)
		mov    %edx,EXPORT_SYMBOL(net_protocol_option_button)+0x8
		mov    %ebx,EXPORT_SYMBOL(net_protocol_option_button)+0x18
		mov    $0x1,%al
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_8ed2b:
		mov    EXPORT_SYMBOL(gui_strings)+0x8E0,%edi
		push   %edi
		mov    $0x1,%cl
		push   $EXPORT_SYMBOL(alert_text)
		mov    $0x2,%edx
		mov    $asc19200,%ebp
		call   ac_sprintf
		mov    EXPORT_SYMBOL(gui_strings)+0x7CC,%eax
		add    $0x8,%esp
		mov    %cl,show_alert
		mov    %dx,EXPORT_SYMBOL(word_1811AE)
		mov    %eax,EXPORT_SYMBOL(net_protocol_select_button)+0x08
		mov    $ASM_do_serial_speed_switch,%eax
		mov    %ebp,EXPORT_SYMBOL(net_protocol_option_button)+0x8
		mov    %eax,EXPORT_SYMBOL(net_protocol_option_button)+0x18
		mov    $0x1,%al
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_8ed7b:
		cmpb   $0x0,EXPORT_SYMBOL(byte_1C4A6F)
		je     jump_8eda8
		mov    $asc19200,%ecx
		and    $0xffff,%eax
		mov    $ASM_do_serial_speed_switch,%esi
		mov    %ecx,EXPORT_SYMBOL(net_protocol_option_button)+0x8
		mov    EXPORT_SYMBOL(gui_strings)+0x828(,%eax,4),%eax
		mov    %esi,EXPORT_SYMBOL(net_protocol_option_button)+0x18
		jmp    jump_8edca
	jump_8eda8:
		mov    $asc19200,%edx
		and    $0xffff,%eax
		mov    $ASM_do_serial_speed_switch,%ebx
		mov    %edx,EXPORT_SYMBOL(net_protocol_option_button)+0x8
		mov    EXPORT_SYMBOL(gui_strings)+0x7C4(,%eax,4),%eax
		mov    %ebx,EXPORT_SYMBOL(net_protocol_option_button)+0x18
	jump_8edca:
		mov    %eax,EXPORT_SYMBOL(net_protocol_select_button)+0x08
		xor    %dh,%dh
		mov    %dh,EXPORT_SYMBOL(byte_15516C)
		mov    $0x1,%al
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_show_net_protocol_box)	/* 0x08EDE0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x18,%esp
		mov    %eax,%ebp
		mov    0x6(%eax),%ax
		xor    %ecx,%ecx
		sub    $0x8,%eax
		mov    %ax,%cx
		mov    0x4(%ebp),%ax
		xor    %ebx,%ebx
		sub    $0x8,%eax
		mov    %ax,%bx
		mov    0x2(%ebp),%ax
		xor    %edx,%edx
		add    $0x4,%eax
		mov    %ax,%dx
		mov    0x0(%ebp),%ax
		add    $0x4,%eax
		and    $0xffff,%eax
		call   ac_my_set_text_window
		mov    small_med_font,%eax
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    $0x41,%eax
		call   ac_font_height
		and    $0xff,%eax
		mov    %eax,0x14(%esp)
		xor    %eax,%eax
		mov    login_control__State,%al
		cmp    $0x5,%eax
		je     jump_8f519
		mov    med2_font,%eax
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    $0x41,%eax
		call   ac_font_height
		and    $0xff,%eax
		mov    %eax,0x10(%esp)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(word_1811AE),%ax
		cmp    $0x1,%eax
		jne    jump_8f155
		mov    EXPORT_SYMBOL(lbFontPtr),%eax
		test   %eax,%eax
		je     jump_8ee96
		mov    0xd0(%eax),%dl
		and    $0xff,%edx
		jmp    jump_8ee98
	jump_8ee96:
		xor    %edx,%edx
	jump_8ee98:
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x4(%ebp),%dx
		mov    %edx,%esi
		sub    %eax,%esi
		sar    %esi
		sub    $0x4,%esi
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		or     $0x4,%bl
		push   $0xf3
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    0x14(%esp),%ecx
		xor    %edx,%edx
		lea    0x4(%eax),%ebx
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		xor    %eax,%eax
		add    $0x4,%ecx
		mov    EXPORT_SYMBOL(text_window_x1),%ax
		add    $0x16,%edx
		add    %esi,%eax
		call   ac_draw_box_purple_list
		mov    EXPORT_SYMBOL(lbDisplay)+96,%cx # lbDisplay__DrawFlags
		and    $0xfb,%cl
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    $0x18,%edi
		add    $0x2,%esi
		mov    EXPORT_SYMBOL(lbDisplay)+96,%ax # lbDisplay__DrawFlags
		or     $0x80,%ah
		mov    %ax,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    $unkn_opt_number_text,%ebx
		mov    %edi,%edx
		mov    %esi,%eax
		xor    %ecx,%ecx
		call   ac_draw_text_purple_list2
		mov    EXPORT_SYMBOL(lbDisplay)+96,%dx # lbDisplay__DrawFlags
		and    $0x7f,%dh
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		cmpb   $0x0,data_1c4806
		jne    jump_8f028
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_8ef57
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_8ef5c
	jump_8ef57:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_8ef5c:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_x1),%dx
		add    %esi,%edx
		cmp    %edx,%eax
		jl     jump_8f028
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_8ef86
		mov    EXPORT_SYMBOL(lbDisplay)+72,%edx # lbDisplay.MouseX
		add    %edx,%edx
		jmp    jump_8ef8c
	jump_8ef86:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%edx # lbDisplay.MouseX
	jump_8ef8c:
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(text_window_x1),%bx
		mov    $unkn_opt_number_text,%eax
		add    %esi,%ebx
		call   ac_LbTextStringWidth
		add    %ebx,%eax
		cmp    %eax,%edx
		jg     jump_8f028
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_8efc1
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_8efc6
	jump_8efc1:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_8efc6:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		add    %edi,%edx
		sub    $0x2,%edx
		cmp    %edx,%eax
		jl     jump_8f028
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_8efee
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_8eff3
	jump_8efee:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_8eff3:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		mov    0x10(%esp),%ebx
		add    %edi,%edx
		add    %ebx,%edx
		add    $0x2,%edx
		cmp    %edx,%eax
		jg     jump_8f028
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		je     jump_8f028
		xor    %cl,%cl
		mov    %cl,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		movb   $0x1,data_1c4806
		call   ac_reset_buffered_keys
	jump_8f028:
		xor    %eax,%eax
		mov    data_1c4806,%al
		cmp    $0x1,%eax
		jne    jump_8f502
		testb  $0x2,gameturn
		je     jump_8f073
		mov    EXPORT_SYMBOL(lbFontPtr),%ebx
		xor    %edx,%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		mov    EXPORT_SYMBOL(text_window_x1),%ax
		add    $0x54,%ebx
		add    %edi,%edx
		add    %eax,%esi
		mov    $unkn_opt_number_text,%eax
		add    $0x3,%edx
		call   ac_LbTextStringWidth
		add    %esi,%eax
		call   ac_draw_sprite_purple_list
	jump_8f073:
		mov    $0x3,%ebx
		mov    $0x4,%edx
		mov    $unkn_opt_number_text,%eax
		call   user_read_value
		test   %al,%al
		je     jump_8f502
		push   $data_1811b2
		push   $asc04x
		xor    %ah,%ah
		push   $unkn_opt_number_text
		mov    $0x1108,%ebx
		mov    %ah,data_1c4806
		call   ac_sscanf
		add    $0xc,%esp
		xor    %edx,%edx
		mov    $unkstruct04_arr,%eax
		call   ac_memset
		xor    %dl,%dl
		xor    %eax,%eax
		mov    %dl,EXPORT_SYMBOL(byte_1C6D48)
	jump_8f0c9:
		add    $0x10,%eax
		xor    %dh,%dh
		mov    %dh,data_1c499c(%eax)
		cmp    $0x80,%eax
		jne    jump_8f0c9
		mov    $EXPORT_SYMBOL(nsvc),%eax
		call   ac_LbNetworkServiceStart
		cmp    $0x1,%eax
		jne    jump_8f0f6
		movb   $0x1,EXPORT_SYMBOL(byte_1C4A7C)
		jmp    jump_8f502
	jump_8f0f6:
		mov    EXPORT_SYMBOL(gui_strings)+0x8E0,%ecx
		push   %ecx
		mov    $0x1,%bl
		push   $EXPORT_SYMBOL(alert_text)
		mov    $asc19200,%esi
		mov    $ASM_do_serial_speed_switch,%edi
		call   ac_sprintf
		mov    EXPORT_SYMBOL(gui_strings)+0x7CC,%eax
		add    $0x8,%esp
		mov    %bl,show_alert
		mov    %esi,EXPORT_SYMBOL(net_protocol_option_button)+0x8
		mov    %edi,EXPORT_SYMBOL(net_protocol_option_button)+0x18
		mov    $0x2,%ebx
		mov    %eax,EXPORT_SYMBOL(net_protocol_select_button)+0x08
		mov    %bx,EXPORT_SYMBOL(word_1811AE)
		mov    $net_protocol_select_button,%eax
		call   *EXPORT_SYMBOL(net_protocol_select_button)+0x10
		xor    %al,%al
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_8f155:
		cmpb   $0x0,EXPORT_SYMBOL(byte_1C4A6F)
		je     jump_8f4f7
		mov    $net_unkn40_button,%eax
		call   *EXPORT_SYMBOL(net_unkn40_button)+0x10
		and    $0xff,%eax
		cmp    $0x3,%eax
		jne    jump_8f27b
		push   $0xae
		xor    %eax,%eax
		xor    %esi,%esi
		mov    net_unkn40_button,%ax
		mov    EXPORT_SYMBOL(net_unkn40_button)+0x02,%si
		lea    0x3(%eax),%edx
		add    $0x3,%esi
		mov    %edx,0x10(%esp)
		lea    0x6(%eax),%ebx
		mov    %esi,%ecx
		mov    0x10(%esp),%eax
		mov    %esi,%edx
		call   ac_draw_line_purple_list
		push   $0xae
		mov    0x10(%esp),%eax
		lea    0x9(%esi),%edi
		add    $0x3,%eax
		mov    %edi,%ecx
		mov    %esi,%edx
		mov    %eax,%ebx
		mov    %eax,0x4(%esp)
		call   ac_draw_line_purple_list
		push   $0xae
		mov    0x10(%esp),%eax
		mov    %edi,%ecx
		add    $0x6,%eax
		mov    %edi,%edx
		mov    %eax,0x8(%esp)
		mov    %eax,%ebx
		mov    0x4(%esp),%eax
		call   ac_draw_line_purple_list
		push   $0xae
		mov    0x8(%esp),%ebx
		mov    %esi,%ecx
		mov    %edi,%edx
		mov    %ebx,%eax
		call   ac_draw_line_purple_list
		push   $0xae
		mov    0x10(%esp),%eax
		mov    %esi,%ecx
		add    $0x9,%eax
		mov    %esi,%edx
		mov    %eax,0xc(%esp)
		mov    %eax,%ebx
		mov    0x8(%esp),%eax
		call   ac_draw_line_purple_list
		push   $0xae
		mov    0xc(%esp),%ebx
		mov    %edi,%ecx
		mov    %esi,%edx
		mov    %ebx,%eax
		call   ac_draw_line_purple_list
		push   $0xae
		mov    0x10(%esp),%eax
		mov    %edi,%ecx
		add    $0xc,%eax
		mov    %edi,%edx
		mov    %eax,0x8(%esp)
		mov    %eax,%ebx
		mov    0xc(%esp),%eax
		call   ac_draw_line_purple_list
		push   $0xae
		mov    0x8(%esp),%ebx
		mov    %esi,%ecx
		mov    %edi,%edx
		mov    %ebx,%eax
		call   ac_draw_line_purple_list
		push   $0xae
		mov    0x10(%esp),%ebx
		mov    0x8(%esp),%eax
		mov    %esi,%ecx
		mov    %esi,%edx
		add    $0xf,%ebx
		call   ac_draw_line_purple_list
	jump_8f27b:
		mov    0x6(%ebp),%ax
		xor    %ecx,%ecx
		sub    $0x8,%eax
		mov    %ax,%cx
		mov    0x4(%ebp),%ax
		xor    %ebx,%ebx
		sub    $0x8,%eax
		mov    %ax,%bx
		mov    0x2(%ebp),%ax
		xor    %edx,%edx
		add    $0x4,%eax
		mov    %ax,%dx
		mov    0x0(%ebp),%ax
		add    $0x4,%eax
		and    $0xffff,%eax
		call   ac_my_set_text_window
		cmpb   $0x0,data_1c4994
		jne    jump_8f4e8
		mov    EXPORT_SYMBOL(lbFontPtr),%ecx
		test   %ecx,%ecx
		je     jump_8f2d9
		mov    0xd0(%ecx),%dl
		and    $0xff,%edx
		jmp    jump_8f2db
	jump_8f2d9:
		xor    %edx,%edx
	jump_8f2db:
		mov    %edx,%eax
		shl    $0x4,%eax
		sub    %edx,%eax
		xor    %edx,%edx
		mov    0x4(%ebp),%dx
		sub    %eax,%edx
		sar    %edx
		lea    -0x4(%edx),%esi
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		or     $0x4,%bl
		push   $0xf3
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    0x14(%esp),%ecx
		xor    %edx,%edx
		lea    0x4(%eax),%ebx
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		xor    %eax,%eax
		add    $0x4,%ecx
		mov    EXPORT_SYMBOL(text_window_x1),%ax
		add    $0x16,%edx
		add    %esi,%eax
		call   ac_draw_box_purple_list
		mov    EXPORT_SYMBOL(lbDisplay)+96,%cx # lbDisplay__DrawFlags
		and    $0xfb,%cl
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    $0x18,%edi
		add    $0x2,%esi
		mov    EXPORT_SYMBOL(lbDisplay)+96,%ax # lbDisplay__DrawFlags
		or     $0x80,%ah
		mov    %ax,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    $net_unkn2_text,%ebx
		mov    %edi,%edx
		mov    %esi,%eax
		xor    %ecx,%ecx
		call   ac_draw_text_purple_list2
		mov    EXPORT_SYMBOL(lbDisplay)+96,%dx # lbDisplay__DrawFlags
		and    $0x7f,%dh
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		cmpb   $0x0,data_1c4806
		jne    jump_8f467
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_8f396
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_8f39b
	jump_8f396:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_8f39b:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_x1),%dx
		add    %esi,%edx
		cmp    %edx,%eax
		jl     jump_8f467
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_8f3c5
		mov    EXPORT_SYMBOL(lbDisplay)+72,%edx # lbDisplay.MouseX
		add    %edx,%edx
		jmp    jump_8f3cb
	jump_8f3c5:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%edx # lbDisplay.MouseX
	jump_8f3cb:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(text_window_x1),%ax
		lea    (%eax,%esi,1),%ebx
		mov    $net_unkn2_text,%eax
		call   ac_LbTextStringWidth
		add    %ebx,%eax
		cmp    %eax,%edx
		jg     jump_8f467
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_8f400
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_8f405
	jump_8f400:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_8f405:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		add    %edi,%edx
		sub    $0x2,%edx
		cmp    %edx,%eax
		jl     jump_8f467
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_8f42d
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_8f432
	jump_8f42d:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_8f432:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		mov    0x10(%esp),%ebp
		add    %edi,%edx
		add    %ebp,%edx
		add    $0x2,%edx
		cmp    %edx,%eax
		jg     jump_8f467
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		je     jump_8f467
		xor    %ch,%ch
		mov    %ch,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		movb   $0x1,data_1c4806
		call   ac_reset_buffered_keys
	jump_8f467:
		xor    %eax,%eax
		mov    data_1c4806,%al
		cmp    $0x1,%eax
		jne    jump_8f502
		testb  $0x2,gameturn
		je     jump_8f4b1
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(text_window_y1),%ax
		add    %edi,%eax
		lea    0x3(%eax),%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(text_window_x1),%ax
		mov    EXPORT_SYMBOL(lbFontPtr),%ebx
		add    %eax,%esi
		mov    $net_unkn2_text,%eax
		add    $0x54,%ebx
		call   ac_LbTextStringWidth
		add    %esi,%eax
		call   ac_draw_sprite_purple_list
	jump_8f4b1:
		mov    $0x2,%ebx
		mov    $0xe,%edx
		mov    $net_unkn2_text,%eax
		call   user_read_value
		test   %al,%al
		je     jump_8f502
		xor    %dl,%dl
		mov    %dl,data_1c4806
		mov    $net_protocol_select_button,%eax
		call   *EXPORT_SYMBOL(net_protocol_select_button)+0x10
		xor    %al,%al
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_8f4e8:
		xor    %dh,%dh
		mov    $net_protocol_option_button,%eax
		mov    %dh,data_1c4806
		jmp    jump_8f4fc
	jump_8f4f7:
		mov    $net_protocol_option_button,%eax
	jump_8f4fc:
		call   *EXPORT_SYMBOL(net_protocol_option_button)+0x10
	jump_8f502:
		mov    $net_protocol_select_button,%eax
		call   *EXPORT_SYMBOL(net_protocol_select_button)+0x10
		xor    %al,%al
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_8f519:
		movb   $0x57,EXPORT_SYMBOL(lbDisplay)+113 # lbDisplay.DrawColour
		mov    $0x2,%edx
		mov    $0x4,%eax
		mov    0x14(%esp),%esi
		mov    EXPORT_SYMBOL(gui_strings)+0x7E8,%ebx
		xor    %ecx,%ecx
		mov    0x14(%esp),%edi
		call   ac_draw_text_purple_list2
		mov    $0x4,%eax
		mov    EXPORT_SYMBOL(gui_strings)+0x7E4,%ebx
		add    $0x6,%esi
		xor    %ecx,%ecx
		mov    %esi,%edx
		add    $0x4,%edi
		call   ac_draw_text_purple_list2
		mov    $0x4,%eax
		mov    EXPORT_SYMBOL(gui_strings)+0x80C,%ebx
		add    %edi,%esi
		xor    %ecx,%ecx
		mov    %esi,%edx
		call   ac_draw_text_purple_list2
		mov    $0x4,%eax
		mov    EXPORT_SYMBOL(gui_strings)+0x868,%ebx
		lea    (%esi,%edi,1),%edx
		xor    %ecx,%ecx
		mov    $0x2,%esi
		mov    $0xa5,%edi
		call   ac_draw_text_purple_list2
		orw    $0x8040,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		testb  $0x4,unkn_flags_08
		je     jump_8f5bc
		mov    EXPORT_SYMBOL(gui_strings)+0x77C,%eax
		call   ac_my_string_width
		mov    %edi,%edx
		mov    %eax,%ebp
		sar    %eax
		xor    %ecx,%ecx
		sub    %eax,%edx
		mov    EXPORT_SYMBOL(gui_strings)+0x77C,%ebx
		jmp    jump_8f5d6
	jump_8f5bc:
		mov    EXPORT_SYMBOL(gui_strings)+0x778,%eax
		call   ac_my_string_width
		mov    %edi,%edx
		mov    %eax,%ebp
		sar    %eax
		xor    %ecx,%ecx
		sub    %eax,%edx
		mov    EXPORT_SYMBOL(gui_strings)+0x778,%ebx
	jump_8f5d6:
		mov    %edx,%eax
		mov    %esi,%edx
		call   ac_draw_text_purple_list2
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		and    $0x7f,%bh
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		call   ac_is_unkn_current_player
		test   %al,%al
		je     jump_8f70f
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_8f613
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_8f618
	jump_8f613:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_8f618:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_x1),%dx
		add    $0x4,%edx
		cmp    %edx,%eax
		jl     jump_8f70f
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_8f642
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_8f647
	jump_8f642:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_8f647:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_x1),%dx
		sar    %ebp
		add    %edi,%edx
		add    %ebp,%edx
		cmp    %edx,%eax
		jg     jump_8f70f
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_8f674
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_8f679
	jump_8f674:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_8f679:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		add    %esi,%edx
		sub    $0x2,%edx
		cmp    %edx,%eax
		jl     jump_8f70f
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_8f6a5
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_8f6aa
	jump_8f6a5:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_8f6aa:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		mov    0x14(%esp),%ebx
		add    %esi,%edx
		add    %ebx,%edx
		add    $0x2,%edx
		cmp    %edx,%eax
		jg     jump_8f70f
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		je     jump_8f70f
		xor    %bl,%bl
		mov    %bl,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		mov    unkn_flags_08,%bh
		test   $0x4,%bh
		je     jump_8f6eb
		mov    %bh,%ch
		and    $0xfb,%ch
		mov    %ch,unkn_flags_08
		jmp    jump_8f6f6
	jump_8f6eb:
		mov    %bh,%cl
		or     $0x4,%cl
		mov    %cl,unkn_flags_08
	jump_8f6f6:
		call   ac_LbNetworkPlayerNumber
		mov    %eax,%ebp
		shl    $0x2,%eax
		sub    %ebp,%eax
		shl    $0x2,%eax
		add    %ebp,%eax
		movb   $0x6,network_players(,%eax,2)
	jump_8f70f:
		mov    0x14(%esp),%eax
		add    $0x4,%eax
		add    %eax,%esi
		mov    EXPORT_SYMBOL(lbDisplay)+96,%cx # lbDisplay__DrawFlags
		or     $0x80,%ch
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		testb  $0x8,unkn_flags_08
		je     jump_8f74e
		mov    EXPORT_SYMBOL(gui_strings)+0x77C,%eax
		call   ac_my_string_width
		mov    %edi,%edx
		mov    %eax,%ebp
		sar    %eax
		xor    %ecx,%ecx
		sub    %eax,%edx
		mov    EXPORT_SYMBOL(gui_strings)+0x77C,%ebx
		jmp    jump_8f768
	jump_8f74e:
		mov    EXPORT_SYMBOL(gui_strings)+0x778,%eax
		call   ac_my_string_width
		mov    %edi,%edx
		mov    %eax,%ebp
		sar    %eax
		xor    %ecx,%ecx
		sub    %eax,%edx
		mov    EXPORT_SYMBOL(gui_strings)+0x778,%ebx
	jump_8f768:
		mov    %edx,%eax
		mov    %esi,%edx
		call   ac_draw_text_purple_list2
		mov    EXPORT_SYMBOL(lbDisplay)+96,%ax # lbDisplay__DrawFlags
		and    $0x7f,%ah
		mov    %ax,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		call   ac_is_unkn_current_player
		test   %al,%al
		je     jump_8f89d
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_8f7a3
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_8f7a8
	jump_8f7a3:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_8f7a8:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_x1),%dx
		add    $0x4,%edx
		cmp    %edx,%eax
		jl     jump_8f89d
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_8f7d2
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_8f7d7
	jump_8f7d2:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_8f7d7:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_x1),%dx
		sar    %ebp
		add    %edi,%edx
		add    %ebp,%edx
		cmp    %edx,%eax
		jg     jump_8f89d
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_8f804
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_8f809
	jump_8f804:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_8f809:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		add    %esi,%edx
		sub    $0x2,%edx
		cmp    %edx,%eax
		jl     jump_8f89d
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_8f835
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_8f83a
	jump_8f835:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_8f83a:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		mov    0x14(%esp),%ecx
		add    %esi,%edx
		add    %ecx,%edx
		add    $0x2,%edx
		cmp    %edx,%eax
		jg     jump_8f89d
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		je     jump_8f89d
		xor    %bh,%bh
		mov    %bh,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		mov    unkn_flags_08,%cl
		test   $0x8,%cl
		je     jump_8f879
		mov    %cl,%al
		and    $0xf7,%al
		mov    %al,unkn_flags_08
		jmp    jump_8f884
	jump_8f879:
		mov    %cl,%ch
		or     $0x8,%ch
		mov    %ch,unkn_flags_08
	jump_8f884:
		call   ac_LbNetworkPlayerNumber
		mov    %eax,%ebp
		shl    $0x2,%eax
		sub    %ebp,%eax
		shl    $0x2,%eax
		add    %ebp,%eax
		movb   $0x6,network_players(,%eax,2)
	jump_8f89d:
		mov    0x14(%esp),%eax
		add    $0x4,%eax
		add    %eax,%esi
		mov    EXPORT_SYMBOL(lbDisplay)+96,%dx # lbDisplay__DrawFlags
		or     $0x80,%dh
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		testb  $0x10,unkn_flags_08
		je     jump_8f8dc
		mov    EXPORT_SYMBOL(gui_strings)+0x77C,%eax
		call   ac_my_string_width
		mov    %edi,%edx
		mov    %eax,%ebp
		sar    %eax
		xor    %ecx,%ecx
		sub    %eax,%edx
		mov    EXPORT_SYMBOL(gui_strings)+0x77C,%ebx
		jmp    jump_8f8f6
	jump_8f8dc:
		mov    EXPORT_SYMBOL(gui_strings)+0x778,%eax
		call   ac_my_string_width
		mov    %edi,%edx
		mov    %eax,%ebp
		sar    %eax
		xor    %ecx,%ecx
		sub    %eax,%edx
		mov    EXPORT_SYMBOL(gui_strings)+0x778,%ebx
	jump_8f8f6:
		mov    %edx,%eax
		mov    %esi,%edx
		call   ac_draw_text_purple_list2
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		and    $0x7f,%bh
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		call   ac_is_unkn_current_player
		test   %al,%al
		je     jump_8fa2d
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_8f933
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_8f938
	jump_8f933:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_8f938:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_x1),%dx
		add    $0x4,%edx
		cmp    %edx,%eax
		jl     jump_8fa2d
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_8f962
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_8f967
	jump_8f962:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_8f967:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_x1),%dx
		sar    %ebp
		add    %edi,%edx
		add    %ebp,%edx
		cmp    %edx,%eax
		jg     jump_8fa2d
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_8f994
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_8f999
	jump_8f994:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_8f999:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		add    %esi,%edx
		sub    $0x2,%edx
		cmp    %edx,%eax
		jl     jump_8fa2d
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_8f9c5
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_8f9ca
	jump_8f9c5:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_8f9ca:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		mov    0x14(%esp),%ebp
		add    %esi,%edx
		add    %ebp,%edx
		add    $0x2,%edx
		cmp    %edx,%eax
		jg     jump_8fa2d
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		je     jump_8fa2d
		xor    %bh,%bh
		mov    %bh,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		mov    unkn_flags_08,%cl
		test   $0x10,%cl
		je     jump_8fa09
		mov    %cl,%al
		and    $0xef,%al
		mov    %al,unkn_flags_08
		jmp    jump_8fa14
	jump_8fa09:
		mov    %cl,%ch
		or     $0x10,%ch
		mov    %ch,unkn_flags_08
	jump_8fa14:
		call   ac_LbNetworkPlayerNumber
		mov    %eax,%ebp
		shl    $0x2,%eax
		sub    %ebp,%eax
		shl    $0x2,%eax
		add    %ebp,%eax
		movb   $0x6,network_players(,%eax,2)
	jump_8fa2d:
		mov    0x14(%esp),%eax
		add    $0x4,%eax
		add    %eax,%esi
		mov    EXPORT_SYMBOL(lbDisplay)+96,%cx # lbDisplay__DrawFlags
		or     $0x80,%ch
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		testb  $0x20,unkn_flags_08
		je     jump_8fa6c
		mov    EXPORT_SYMBOL(gui_strings)+0x77C,%eax
		call   ac_my_string_width
		mov    %edi,%edx
		mov    %eax,%ebp
		sar    %eax
		xor    %ecx,%ecx
		sub    %eax,%edx
		mov    EXPORT_SYMBOL(gui_strings)+0x77C,%ebx
		jmp    jump_8fa86
	jump_8fa6c:
		mov    EXPORT_SYMBOL(gui_strings)+0x778,%eax
		call   ac_my_string_width
		mov    %edi,%edx
		mov    %eax,%ebp
		sar    %eax
		xor    %ecx,%ecx
		sub    %eax,%edx
		mov    EXPORT_SYMBOL(gui_strings)+0x778,%ebx
	jump_8fa86:
		mov    %edx,%eax
		mov    %esi,%edx
		call   ac_draw_text_purple_list2
		mov    EXPORT_SYMBOL(lbDisplay)+96,%ax # lbDisplay__DrawFlags
		and    $0x7f,%ah
		mov    %ax,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		call   ac_is_unkn_current_player
		test   %al,%al
		je     jump_8fbbb
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_8fac1
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_8fac6
	jump_8fac1:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_8fac6:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_x1),%dx
		add    $0x4,%edx
		cmp    %edx,%eax
		jl     jump_8fbbb
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_8faf0
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_8faf5
	jump_8faf0:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_8faf5:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_x1),%dx
		sar    %ebp
		add    %edi,%edx
		add    %ebp,%edx
		cmp    %edx,%eax
		jg     jump_8fbbb
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_8fb22
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_8fb27
	jump_8fb22:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_8fb27:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		add    %esi,%edx
		sub    $0x2,%edx
		cmp    %edx,%eax
		jl     jump_8fbbb
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_8fb53
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_8fb58
	jump_8fb53:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_8fb58:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		mov    0x14(%esp),%ebx
		add    %esi,%edx
		add    %ebx,%edx
		add    $0x2,%edx
		cmp    %edx,%eax
		jg     jump_8fbbb
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		je     jump_8fbbb
		xor    %bh,%bh
		mov    %bh,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		mov    unkn_flags_08,%cl
		test   $0x20,%cl
		je     jump_8fb97
		mov    %cl,%al
		and    $0xdf,%al
		mov    %al,unkn_flags_08
		jmp    jump_8fba2
	jump_8fb97:
		mov    %cl,%ch
		or     $0x20,%ch
		mov    %ch,unkn_flags_08
	jump_8fba2:
		call   ac_LbNetworkPlayerNumber
		mov    %eax,%esi
		shl    $0x2,%eax
		sub    %esi,%eax
		shl    $0x2,%eax
		add    %esi,%eax
		movb   $0x6,network_players(,%eax,2)
	jump_8fbbb:
		mov    EXPORT_SYMBOL(lbDisplay)+96,%dx # lbDisplay__DrawFlags
		and    $0xbf,%dl
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %al,%al
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_show_net_faction_box)	/* 0x08FBD8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		mov    %eax,%esi
		mov    0x6(%eax),%ax
		xor    %ecx,%ecx
		sub    $0x8,%eax
		mov    %ax,%cx
		mov    0x4(%esi),%ax
		xor    %ebx,%ebx
		sub    $0x4,%eax
		mov    %ax,%bx
		mov    0x2(%esi),%ax
		xor    %edx,%edx
		add    $0x4,%eax
		mov    %ax,%dx
		mov    (%esi),%ax
		add    $0x2,%eax
		and    $0xffff,%eax
		call   ac_my_set_text_window
		testb  $0x10,0xb(%esi)
		jne    jump_8fd19
		mov    med2_font,%eax
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    $0x41,%eax
		mov    $0x100,%edx
		call   ac_font_height
		mov    %al,0x4(%esp)
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(gui_strings)+0x620,%ebx
		xor    %ecx,%ecx
		xor    %edx,%edx
		xor    %eax,%eax
		call   ac_draw_text_purple_list2
		xor    %ah,%ah
		mov    0x4(%esp),%al
		mov    %eax,%edi
		mov    small_med_font,%eax
		mov    $0x4,%ebx
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    $0x41,%eax
		add    $0xa,%edi
		call   ac_font_height
		mov    %al,0x8(%esp)
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %edx,%edx
		mov    %edx,(%esp)
	jump_8fc8e:
		push   $0x38
		xor    %ecx,%ecx
		xor    %ebx,%ebx
		xor    %eax,%eax
		xor    %edx,%edx
		mov    0xc(%esp),%cl
		mov    0x2(%esi),%ax
		mov    %di,%dx
		add    $0x4,%eax
		mov    0x4(%esi),%bx
		add    %eax,%edx
		xor    %eax,%eax
		add    $0x6,%ecx
		mov    (%esi),%ax
		sub    $0x8,%ebx
		add    $0x4,%eax
		call   ac_draw_box_purple_list
		xor    %ah,%ah
		mov    (%esp),%ebx
		mov    0x8(%esp),%al
		inc    %ebx
		add    $0x9,%eax
		mov    %ebx,(%esp)
		add    %eax,%edi
		cmp    $0x2,%ebx
		jl     jump_8fc8e
		xor    %ecx,%ecx
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %ecx,%ecx
		xor    %ebx,%ebx
		xor    %edx,%edx
		xor    %eax,%eax
		mov    0x6(%esi),%cx
		mov    0x4(%esi),%bx
		mov    0x2(%esi),%dx
		mov    (%esi),%ax
		add    $0x6,%ecx
		add    $0x6,%ebx
		sub    $0x3,%edx
		sub    $0x3,%eax
		call   ac_copy_box_purple_list
		orb    $0x10,0xb(%esi)
		xor    %edi,%edi
		mov    $0x14,%esi
		mov    %edi,(%esp)
		jmp    jump_8fd5d
	jump_8fd19:
		mov    small_med_font,%eax
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    $0x41,%eax
		call   ac_font_height
		mov    %al,0x8(%esp)
		xor    %edi,%edi
		mov    $0x14,%esi
		mov    %edi,(%esp)
		jmp    jump_8fd5d
	jump_8fd3d:
		mov    (%esp),%ebp
		xor    %ah,%ah
		add    $0x4,%edi
		mov    0x8(%esp),%al
		inc    %ebp
		add    $0x9,%eax
		mov    %ebp,(%esp)
		add    %eax,%esi
		cmp    $0x2,%ebp
		jge    jump_8febd
	jump_8fd5d:
		mov    data_181180,%eax
		mov    (%esp),%edx
		sar    $0x18,%eax
		cmp    %edx,%eax
		jne    jump_8fd7e
		movw   $0x140,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		movb   $0x57,EXPORT_SYMBOL(lbDisplay)+113 # lbDisplay.DrawColour
		jmp    jump_8fd87
	jump_8fd7e:
		movw   $0x100,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
	jump_8fd87:
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		or     $0x80,%bh
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(gui_strings)+0x628(%edi),%ebx
		xor    %edx,%edx
		xor    %ecx,%ecx
		mov    %si,%dx
		xor    %eax,%eax
		add    $0x3,%edx
		call   ac_draw_text_purple_list2
		mov    EXPORT_SYMBOL(lbDisplay)+96,%cx # lbDisplay__DrawFlags
		and    $0x7f,%ch
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_8fdd6
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_8fddb
	jump_8fdd6:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_8fddb:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_x1),%dx
		cmp    %edx,%eax
		jl     jump_8fd3d
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_8fe02
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_8fe07
	jump_8fe02:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_8fe07:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_x2),%dx
		cmp    %edx,%eax
		jg     jump_8fd3d
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_8fe2e
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_8fe33
	jump_8fe2e:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_8fe33:
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		mov    %si,%bx
		add    %ebx,%edx
		sub    $0x2,%edx
		cmp    %edx,%eax
		jl     jump_8fd3d
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_8fe64
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_8fe69
	jump_8fe64:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_8fe69:
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		mov    %si,%bx
		add    %edx,%ebx
		xor    %edx,%edx
		mov    0x8(%esp),%dl
		add    %ebx,%edx
		add    $0x2,%edx
		cmp    %edx,%eax
		jg     jump_8fd3d
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		je     jump_8fd3d
		xor    %bh,%bh
		mov    %bh,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		mov    (%esp),%al
		mov    %al,EXPORT_SYMBOL(byte_181183)
		call   ac_LbNetworkPlayerNumber
		imul   $0x1a,%eax,%eax
		movb   $0x8,network_players(%eax)
		jmp    jump_8fd3d
	jump_8febd:
		xor    %esi,%esi
		mov    %si,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %al,%al
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_show_net_team_box)	/* 0x08FED4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		mov    %eax,%esi
		mov    0x6(%eax),%ax
		xor    %ecx,%ecx
		sub    $0x8,%eax
		mov    %ax,%cx
		mov    0x4(%esi),%ax
		xor    %ebx,%ebx
		sub    $0x8,%eax
		mov    %ax,%bx
		mov    0x2(%esi),%ax
		xor    %edx,%edx
		add    $0x4,%eax
		mov    %ax,%dx
		mov    (%esi),%ax
		add    $0x4,%eax
		and    $0xffff,%eax
		call   ac_my_set_text_window
		testb  $0x10,0xb(%esi)
		jne    jump_9001e
		mov    med2_font,%eax
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    $0x41,%eax
		mov    $0x100,%edx
		call   ac_font_height
		mov    %al,0x8(%esp)
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(gui_strings)+0x61C,%ebx
		xor    %ecx,%ecx
		xor    %edx,%edx
		xor    %eax,%eax
		call   ac_draw_text_purple_list2
		xor    %ah,%ah
		mov    0x8(%esp),%al
		mov    %eax,%edi
		mov    small_med_font,%eax
		mov    $0x4,%ebx
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    $0x41,%eax
		add    $0x3,%edi
		call   ac_font_height
		mov    %al,0x4(%esp)
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %edx,%edx
		mov    %edx,(%esp)
		mov    $0x4,%ebp
	jump_8ff8f:
		push   $0x38
		xor    %ecx,%ecx
		xor    %ebx,%ebx
		xor    %eax,%eax
		xor    %edx,%edx
		mov    0x8(%esp),%cl
		mov    0x2(%esi),%ax
		mov    %di,%dx
		add    $0x4,%eax
		mov    0x4(%esi),%bx
		add    %eax,%edx
		xor    %eax,%eax
		add    $0x4,%ecx
		mov    (%esi),%ax
		sub    $0x8,%ebx
		add    $0x4,%eax
		call   ac_draw_box_purple_list
		xor    %ah,%ah
		mov    (%esp),%ebx
		mov    0x4(%esp),%al
		inc    %ebx
		add    $0x5,%eax
		mov    %ebx,(%esp)
		add    %eax,%edi
		cmp    %ebx,%ebp
		jg     jump_8ff8f
		xor    %ecx,%ecx
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %ecx,%ecx
		xor    %ebx,%ebx
		xor    %edx,%edx
		xor    %eax,%eax
		mov    0x6(%esi),%cx
		mov    0x4(%esi),%bx
		mov    0x2(%esi),%dx
		mov    (%esi),%ax
		add    $0x6,%ecx
		add    $0x6,%ebx
		sub    $0x3,%edx
		sub    $0x3,%eax
		call   ac_copy_box_purple_list
		orb    $0x10,0xb(%esi)
		xor    %edi,%edi
		mov    $0xd,%esi
		mov    %edi,(%esp)
		mov    $0x4,%ebp
		jmp    jump_90066
	jump_9001e:
		mov    small_med_font,%eax
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    $0x41,%eax
		call   ac_font_height
		mov    %al,0x4(%esp)
		xor    %edi,%edi
		mov    $0xd,%esi
		mov    %edi,(%esp)
		mov    $0x4,%ebp
		jmp    jump_90066
	jump_90047:
		xor    %ah,%ah
		mov    0x4(%esp),%al
		add    $0x5,%eax
		add    %eax,%esi
		mov    (%esp),%eax
		inc    %eax
		add    $0x4,%edi
		mov    %eax,(%esp)
		cmp    %eax,%ebp
		jle    jump_8febd
	jump_90066:
		xor    %eax,%eax
		mov    (%esp),%edx
		mov    EXPORT_SYMBOL(byte_181189),%al
		inc    %edx
		cmp    %edx,%eax
		jne    jump_90087
		movw   $0x140,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		movb   $0x57,EXPORT_SYMBOL(lbDisplay)+113 # lbDisplay.DrawColour
		jmp    jump_90090
	jump_90087:
		movw   $0x100,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
	jump_90090:
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		or     $0x80,%bh
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(gui_strings)+0x634(%edi),%ebx
		xor    %edx,%edx
		xor    %ecx,%ecx
		mov    %si,%dx
		xor    %eax,%eax
		add    $0x2,%edx
		call   ac_draw_text_purple_list2
		mov    EXPORT_SYMBOL(lbDisplay)+96,%cx # lbDisplay__DrawFlags
		and    $0x7f,%ch
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_900df
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_900e4
	jump_900df:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_900e4:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_x1),%dx
		cmp    %edx,%eax
		jl     jump_90047
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_9010b
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_90110
	jump_9010b:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_90110:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_x2),%dx
		cmp    %edx,%eax
		jg     jump_90047
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_90137
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_9013c
	jump_90137:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_9013c:
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_y1),%bx
		mov    %si,%dx
		add    %ebx,%edx
		sub    $0x2,%edx
		cmp    %edx,%eax
		jl     jump_90047
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_9016d
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_90172
	jump_9016d:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_90172:
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_y1),%bx
		mov    %si,%dx
		add    %ebx,%edx
		xor    %ebx,%ebx
		mov    0x4(%esp),%bl
		add    %ebx,%edx
		add    $0x2,%edx
		cmp    %edx,%eax
		jg     jump_90047
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		je     jump_90047
		xor    %bh,%bh
		mov    %bh,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		xor    %edx,%edx
		mov    (%esp),%eax
		mov    EXPORT_SYMBOL(byte_181189),%dl
		inc    %eax
		cmp    %eax,%edx
		jne    jump_901c2
		mov    %bh,EXPORT_SYMBOL(byte_181189)
		jmp    jump_901cc
	jump_901c2:
		mov    (%esp),%al
		inc    %al
		mov    %al,EXPORT_SYMBOL(byte_181189)
	jump_901cc:
		call   ac_LbNetworkPlayerNumber
		imul   $0x1a,%eax,%eax
		movb   $0x7,network_players(%eax)
		jmp    jump_90047


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_show_net_groups_box)	/* 0x0901E0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x48,%esp
		mov    %eax,%esi
		testb  $0x10,0xb(%eax)
		jne    jump_90308
		mov    0x6(%esi),%ax
		xor    %ecx,%ecx
		sub    $0x8,%eax
		mov    %ax,%cx
		mov    0x4(%esi),%ax
		xor    %ebx,%ebx
		sub    $0x4,%eax
		mov    %ax,%bx
		mov    0x2(%esi),%ax
		xor    %edx,%edx
		add    $0x4,%eax
		mov    %ax,%dx
		mov    (%esi),%ax
		add    $0x2,%eax
		and    $0xffff,%eax
		call   ac_my_set_text_window
		mov    med2_font,%eax
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    $0x41,%eax
		mov    $0x100,%edx
		call   ac_font_height
		mov    %al,0x44(%esp)
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    $0x1,%edx
		mov    EXPORT_SYMBOL(gui_strings)+0x618,%ebx
		xor    %ecx,%ecx
		xor    %eax,%eax
		call   ac_draw_text_purple_list2
		xor    %ebx,%ebx
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    $0x4,%ecx
		xor    %dh,%dh
		mov    small_med_font,%eax
		mov    0x44(%esp),%dl
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    $0x41,%eax
		add    $0x5,%edx
		call   ac_font_height
		mov    %al,0x40(%esp)
		push   $0x38
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %ecx,%ecx
		xor    %ebx,%ebx
		mov    %al,%cl
		mov    0x4(%esi),%bx
		shl    $0x3,%ecx
		sub    $0x8,%ebx
		xor    %eax,%eax
		add    $0x22,%ecx
		mov    0x2(%esi),%ax
		and    $0xffff,%edx
		add    $0x4,%eax
		add    %eax,%edx
		xor    %eax,%eax
		mov    (%esi),%ax
		add    $0x4,%eax
		mov    $0x100,%edi
		call   ac_draw_box_purple_list
		mov    %di,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %ecx,%ecx
		xor    %ebx,%ebx
		xor    %edx,%edx
		xor    %eax,%eax
		mov    0x6(%esi),%cx
		mov    0x4(%esi),%bx
		mov    0x2(%esi),%dx
		mov    (%esi),%ax
		add    $0x6,%ecx
		add    $0x6,%ebx
		sub    $0x3,%edx
		sub    $0x3,%eax
		call   ac_copy_box_purple_list
		orb    $0x10,0xb(%esi)
		jmp    jump_90320
	jump_90308:
		mov    small_med_font,%eax
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    $0x41,%eax
		call   ac_font_height
		mov    %al,0x40(%esp)
	jump_90320:
		mov    0x6(%esi),%ax
		xor    %ecx,%ecx
		sub    $0x8,%eax
		mov    %ax,%cx
		mov    0x4(%esi),%ax
		xor    %ebx,%ebx
		sub    $0x8,%eax
		mov    %ax,%bx
		mov    0x2(%esi),%ax
		xor    %edx,%edx
		add    $0x4,%eax
		mov    %ax,%dx
		mov    (%esi),%ax
		add    $0x4,%eax
		and    $0xffff,%eax
		call   ac_my_set_text_window
		mov    $0x13,%edx
		xor    %eax,%eax
		mov    $0x100,%ebx
		mov    %ax,0x3c(%esp)
		mov    %edx,0x38(%esp)
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %eax,%eax
		mov    login_control__State,%al
		cmp    $0x5,%eax
		jne    jump_90497
		push   $data_1811ba
		push   $ascS_13
		lea    0x8(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
		mov    (%esp),%bl
		mov    %esp,%edx
		test   %bl,%bl
		je     jump_903b6
	jump_903a4:
		movsbl (%edx),%eax
		call   ac_toupper
		mov    %al,(%edx)
		mov    0x1(%edx),%bh
		inc    %edx
		test   %bh,%bh
		jne    jump_903a4
	jump_903b6:
		mov    EXPORT_SYMBOL(gui_strings)+0x6F8,%edx
		push   %edx
		lea    0x4(%esp),%eax
		push   %eax
		push   $ascSSS_0
		lea    0x28(%esp),%eax
		push   %eax
		lea    0x2c(%esp),%esi
		xor    %edx,%edx
		call   ac_sprintf
		mov    back_buffer,%edi
		mov    text_buf_pos,%ebx
		add    $0x10,%esp
		add    %ebx,%edi
		mov    0x38(%esp),%dx
		push   %edi
	jump_903ee:
		mov    (%esi),%al
		mov    %al,(%edi)
		cmp    $0x0,%al
		je     jump_90406
		mov    0x1(%esi),%al
		add    $0x2,%esi
		mov    %al,0x1(%edi)
		add    $0x2,%edi
		cmp    $0x0,%al
		jne    jump_903ee
	jump_90406:
		pop    %edi
		mov    back_buffer,%ebx
		mov    text_buf_pos,%ecx
		xor    %eax,%eax
		add    %ecx,%ebx
		xor    %ecx,%ecx
		lea    0x1c(%esp),%edi
		call   ac_draw_text_purple_list2
		sub    %ecx,%ecx
		dec    %ecx
		xor    %eax,%eax
		repnz scas %es:(%edi),%al
		not    %ecx
		dec    %ecx
		mov    text_buf_pos,%esi
		inc    %ecx
		add    %ecx,%esi
		mov    %esi,text_buf_pos
	jump_9043b:
		call   ac_is_unkn_current_player
		test   %al,%al
		je     jump_90467
		mov    $net_INITIATE_button,%eax
		call   *EXPORT_SYMBOL(net_INITIATE_button)+0x10
		mov    EXPORT_SYMBOL(selected_city_id),%eax
		sar    $0x18,%eax
		cmp    $0xffffffff,%eax
		je     jump_90467
		mov    $unkn8_EJECT_button,%eax
		call   *EXPORT_SYMBOL(unkn8_EJECT_button)+0x10
	jump_90467:
		mov    unkn_city_no,%eax
		sar    $0x18,%eax
		cmp    $0xffffffff,%eax
		jne    jump_90480
		xor    %eax,%eax
		mov    login_control__State,%al
		cmp    $0x5,%eax
		jne    jump_9048b
	jump_90480:
		mov    $net_groups_LOGON_button,%eax
		call   *EXPORT_SYMBOL(net_groups_LOGON_button)+0x10
	jump_9048b:
		xor    %al,%al
		add    $0x48,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_90497:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(word_1811AE),%ax
		cmp    $0x1,%eax
		jne    jump_9043b
		mov    $unkstruct04_arr,%ebp
		add    $0x6,%ebp
	jump_904ac:
		xor    %eax,%eax
		mov    data_1c6d45,%edx
		mov    0x3c(%esp),%ax
		sar    $0x18,%edx
		cmp    %edx,%eax
		jge    jump_9043b
		mov    unkn_city_no,%edx
		sar    $0x18,%edx
		cmp    %edx,%eax
		jne    jump_904e3
		movw   $0x140,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		movb   $0x57,EXPORT_SYMBOL(lbDisplay)+113 # lbDisplay.DrawColour
		jmp    jump_904ec
	jump_904e3:
		movw   $0x100,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
	jump_904ec:
		push   %ebp
		push   $ascS_14
		lea    0x8(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
		mov    (%esp),%ch
		mov    %esp,%edx
		test   %ch,%ch
		je     jump_9051a
	jump_90508:
		movsbl (%edx),%eax
		call   ac_toupper
		mov    %al,(%edx)
		mov    0x1(%edx),%al
		inc    %edx
		test   %al,%al
		jne    jump_90508
	jump_9051a:
		mov    EXPORT_SYMBOL(gui_strings)+0x6F8,%edi
		push   %edi
		lea    0x4(%esp),%eax
		push   %eax
		push   $ascSSS_1
		lea    0x28(%esp),%eax
		push   %eax
		call   ac_sprintf
		mov    back_buffer,%edi
		mov    text_buf_pos,%eax
		add    $0x10,%esp
		lea    0x1c(%esp),%esi
		add    %eax,%edi
		push   %edi
	jump_9054a:
		mov    (%esi),%al
		mov    %al,(%edi)
		cmp    $0x0,%al
		je     jump_90562
		mov    0x1(%esi),%al
		add    $0x2,%esi
		mov    %al,0x1(%edi)
		add    $0x2,%edi
		cmp    $0x0,%al
		jne    jump_9054a
	jump_90562:
		pop    %edi
		orw    $0x8000,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    back_buffer,%ebx
		mov    text_buf_pos,%edx
		xor    %ecx,%ecx
		add    %edx,%ebx
		xor    %edx,%edx
		xor    %eax,%eax
		mov    0x38(%esp),%dx
		call   ac_draw_text_purple_list2
		mov    EXPORT_SYMBOL(lbDisplay)+96,%ax # lbDisplay__DrawFlags
		and    $0x7f,%ah
		mov    %ax,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		lea    0x1c(%esp),%edi
		sub    %ecx,%ecx
		dec    %ecx
		xor    %eax,%eax
		repnz scas %es:(%edi),%al
		not    %ecx
		dec    %ecx
		mov    text_buf_pos,%ebx
		inc    %ecx
		add    %ecx,%ebx
		xor    %eax,%eax
		mov    %ebx,text_buf_pos
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_905cc
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_905d1
	jump_905cc:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_905d1:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_x1),%dx
		cmp    %edx,%eax
		jl     jump_906b9
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_905f8
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_905fd
	jump_905f8:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_905fd:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_x2),%dx
		cmp    %edx,%eax
		jg     jump_906b9
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_90624
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_90629
	jump_90624:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_90629:
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    0x38(%esp),%dx
		mov    EXPORT_SYMBOL(text_window_y1),%bx
		add    %ebx,%edx
		sub    $0x2,%edx
		cmp    %edx,%eax
		jl     jump_906b9
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_9065c
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_90661
	jump_9065c:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_90661:
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    0x38(%esp),%bx
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		add    %edx,%ebx
		xor    %edx,%edx
		mov    0x40(%esp),%dl
		add    %ebx,%edx
		add    $0x2,%edx
		cmp    %edx,%eax
		jg     jump_906b9
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		je     jump_906b9
		xor    %dl,%dl
		mov    %dl,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		xor    %eax,%eax
		mov    unkn_city_no,%edx
		mov    0x3c(%esp),%ax
		sar    $0x18,%edx
		cmp    %eax,%edx
		jne    jump_906b0
		movb   $0xff,EXPORT_SYMBOL(byte_15516C)
		jmp    jump_906b9
	jump_906b0:
		mov    0x3c(%esp),%al
		mov    %al,EXPORT_SYMBOL(byte_15516C)
	jump_906b9:
		mov    0x38(%esp),%edx
		xor    %ah,%ah
		mov    0x3c(%esp),%ebx
		mov    0x40(%esp),%al
		add    $0xda,%ebp
		add    $0x4,%eax
		inc    %ebx
		add    %eax,%edx
		mov    %bx,0x3c(%esp)
		mov    %edx,0x38(%esp)
		jmp    jump_904ac


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_show_net_users_box)	/* 0x0906E4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x38,%esp
		mov    %eax,%ebp
		mov    0x6(%eax),%ax
		xor    %ecx,%ecx
		sub    $0x8,%eax
		mov    %ax,%cx
		mov    0x4(%ebp),%ax
		xor    %ebx,%ebx
		sub    $0x8,%eax
		mov    %ax,%bx
		mov    0x2(%ebp),%ax
		xor    %edx,%edx
		add    $0x4,%eax
		mov    %ax,%dx
		mov    0x0(%ebp),%ax
		add    $0x4,%eax
		and    $0xffff,%eax
		call   ac_my_set_text_window
		testb  $0x10,0xb(%ebp)
		jne    jump_9089e
		mov    med2_font,%eax
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    $0x41,%eax
		mov    $0x100,%edx
		call   ac_font_height
		mov    %al,0x34(%esp)
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    $0x1,%edx
		mov    EXPORT_SYMBOL(gui_strings)+0x614,%ebx
		xor    %ecx,%ecx
		xor    %eax,%eax
		call   ac_draw_text_purple_list2
		xor    %ebx,%ebx
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %ah,%ah
		mov    0x34(%esp),%al
		add    $0x8,%eax
		mov    %eax,0x28(%esp)
		mov    small_med_font,%eax
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    $0x41,%eax
		mov    $0x4,%ecx
		call   ac_font_height
		mov    %al,0x30(%esp)
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    %bx,0x24(%esp)
		jmp    jump_90856
	jump_907b0:
		push   $0x38
		xor    %eax,%eax
		xor    %edi,%edi
		mov    0x2(%ebp),%ax
		mov    0x2c(%esp),%di
		add    $0x4,%eax
		movzbl 0x34(%esp),%esi
		lea    (%eax,%edi,1),%edx
		mov    $0x6d,%ebx
		xor    %eax,%eax
		add    $0x6,%esi
		mov    0x0(%ebp),%ax
		mov    %esi,%ecx
		add    $0x4,%eax
		call   ac_draw_box_purple_list
		mov    EXPORT_SYMBOL(fe_icons_sprites),%ebx
		xor    %edx,%edx
		xor    %eax,%eax
		add    $0x33c,%ebx
		mov    0x2(%ebp),%dx
		mov    0x0(%ebp),%ax
		add    $0x4,%edx
		add    $0x71,%eax
		add    %edi,%edx
		call   ac_draw_sprite_purple_list
		xor    %eax,%eax
		mov    0x2(%ebp),%ax
		add    $0x4,%eax
		lea    (%eax,%edi,1),%edx
		mov    EXPORT_SYMBOL(fe_icons_sprites),%eax
		xor    %ebx,%ebx
		mov    0x340(%eax),%bl
		xor    %eax,%eax
		mov    0x0(%ebp),%ax
		mov    %esi,%ecx
		add    $0x71,%eax
		push   $0x38
		add    %ebx,%eax
		mov    $0xf,%ebx
		call   ac_draw_box_purple_list
		xor    %ah,%ah
		mov    0x24(%esp),%ebx
		mov    0x30(%esp),%al
		mov    %edi,%edx
		add    $0x9,%eax
		inc    %ebx
		add    %eax,%edx
		mov    %bx,0x24(%esp)
		mov    %edx,0x28(%esp)
	jump_90856:
		xor    %eax,%eax
		mov    0x24(%esp),%ax
		cmp    $0x8,%eax
		jl     jump_907b0
		xor    %edi,%edi
		mov    %di,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %ecx,%ecx
		xor    %ebx,%ebx
		xor    %edx,%edx
		xor    %eax,%eax
		mov    0x6(%ebp),%cx
		mov    0x4(%ebp),%bx
		mov    0x2(%ebp),%dx
		mov    0x0(%ebp),%ax
		add    $0x6,%ecx
		add    $0x6,%ebx
		sub    $0x3,%edx
		sub    $0x3,%eax
		call   ac_copy_box_purple_list
		orb    $0x10,0xb(%ebp)
		jmp    jump_908b6
	jump_9089e:
		mov    small_med_font,%eax
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    $0x41,%eax
		call   ac_font_height
		mov    %al,0x30(%esp)
	jump_908b6:
		xor    %eax,%eax
		mov    $0x12,%ecx
		mov    login_control__State,%al
		mov    %ecx,0x2c(%esp)
		cmp    $0x5,%eax
		jne    jump_90c1c
		mov    $0xff,%dh
		xor    %edi,%edi
		mov    %dh,ingame__InNetGame_UNSURE
		mov    %di,0x24(%esp)
		jmp    jump_90bb9
	jump_908e3:
		xor    %ecx,%ecx
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
	jump_908ec:
		xor    %eax,%eax
		mov    $unkn2_names,%edi
		mov    0x24(%esp),%ax
		mov    %esp,%esi
		shl    $0x4,%eax
		xor    %bl,%bl
		add    %eax,%edi
		mov    %bl,0x7(%esp)
		push   %edi
	jump_90906:
		mov    (%esi),%al
		mov    %al,(%edi)
		cmp    $0x0,%al
		je     jump_9091e
		mov    0x1(%esi),%al
		add    $0x2,%esi
		mov    %al,0x1(%edi)
		add    $0x2,%edi
		cmp    $0x0,%al
		jne    jump_90906
	jump_9091e:
		pop    %edi
		mov    %esp,%eax
		mov    $0x6e,%edx
		call   ac_my_string_width
		mov    back_buffer,%edi
		sub    %eax,%edx
		mov    text_buf_pos,%eax
		mov    %esp,%esi
		add    %eax,%edi
		shr    %edx
		push   %edi
	jump_9093f:
		mov    (%esi),%al
		mov    %al,(%edi)
		cmp    $0x0,%al
		je     jump_90957
		mov    0x1(%esi),%al
		add    $0x2,%esi
		mov    %al,0x1(%edi)
		add    $0x2,%edi
		cmp    $0x0,%al
		jne    jump_9093f
	jump_90957:
		pop    %edi
		call   ac_is_unkn_current_player
		test   %al,%al
		je     jump_9096a
		orw    $0x8000,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
	jump_9096a:
		xor    %eax,%eax
		mov    back_buffer,%ebx
		mov    0x2c(%esp),%ax
		mov    text_buf_pos,%ecx
		mov    %eax,0x20(%esp)
		lea    0x3(%eax),%esi
		add    %ecx,%ebx
		xor    %eax,%eax
		xor    %ecx,%ecx
		mov    %dx,%ax
		mov    %esi,%edx
		call   ac_draw_text_purple_list2
		mov    EXPORT_SYMBOL(lbDisplay)+96,%ax # lbDisplay__DrawFlags
		and    $0x7f,%ah
		mov    %ax,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    %esp,%edi
		sub    %ecx,%ecx
		dec    %ecx
		xor    %eax,%eax
		repnz scas %es:(%edi),%al
		not    %ecx
		dec    %ecx
		mov    text_buf_pos,%edi
		inc    %ecx
		add    %ecx,%edi
		mov    %edi,text_buf_pos
		xor    %edi,%edi
		mov    0x24(%esp),%di
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(group_types)(%edi),%al
		mov    EXPORT_SYMBOL(gui_strings)+0x628(,%eax,4),%eax
		mov    $0x40,%edx
		call   ac_my_string_width
		sub    %eax,%edx
		mov    %edx,%eax
		shr    %eax
		add    $0x8b,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(group_types)(%edi),%al
		mov    EXPORT_SYMBOL(gui_strings)+0x628(,%eax,4),%ebx
		xor    %eax,%eax
		xor    %ecx,%ecx
		mov    %dx,%ax
		mov    %esi,%edx
		call   ac_draw_text_purple_list2
		cmpb   $0x0,EXPORT_SYMBOL(byte_1C5C28)(%edi)
		je     jump_90a5a
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(byte_1C5C28)(%edi),%al
		add    $0x6d,%eax
		imul   $0x6,%eax,%eax
		mov    EXPORT_SYMBOL(fe_icons_sprites),%ebx
		xor    %ch,%ch
		mov    0x340(%ebx),%cl
		add    %eax,%ebx
		xor    %eax,%eax
		mov    0x2(%ebp),%ax
		mov    0x20(%esp),%edx
		add    $0x4,%eax
		add    $0x70,%ecx
		add    %eax,%edx
		xor    %eax,%eax
		add    $0x2,%edx
		mov    0x0(%ebp),%ax
		and    $0xffff,%ecx
		add    $0x4,%eax
		add    %ecx,%eax
		call   ac_draw_sprite_purple_list
	jump_90a5a:
		call   ac_is_unkn_current_player
		test   %al,%al
		je     jump_90b67
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_90a7d
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_90a82
	jump_90a7d:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_90a82:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_x1),%dx
		cmp    %edx,%eax
		jl     jump_90b67
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_90aa9
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_90aae
	jump_90aa9:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_90aae:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_x2),%dx
		cmp    %edx,%eax
		jg     jump_90b67
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_90ad5
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_90ada
	jump_90ad5:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_90ada:
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    0x2c(%esp),%dx
		mov    EXPORT_SYMBOL(text_window_y1),%bx
		add    %ebx,%edx
		inc    %edx
		cmp    %edx,%eax
		jl     jump_90b67
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_90b0b
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_90b10
	jump_90b0b:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_90b10:
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    0x2c(%esp),%bx
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		add    %ebx,%edx
		xor    %ebx,%ebx
		mov    0x30(%esp),%bl
		add    %ebx,%edx
		add    $0x5,%edx
		cmp    %edx,%eax
		jg     jump_90b67
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		je     jump_90b67
		xor    %ch,%ch
		mov    %ch,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(selected_city_id),%eax
		mov    0x24(%esp),%dx
		sar    $0x18,%eax
		cmp    %edx,%eax
		jne    jump_90b5e
		movb   $0xff,EXPORT_SYMBOL(byte_15516D)
		jmp    jump_90b67
	jump_90b5e:
		mov    0x24(%esp),%al
		mov    %al,EXPORT_SYMBOL(byte_15516D)
	jump_90b67:
		xor    %ah,%ah
		mov    0x30(%esp),%al
		mov    0x2c(%esp),%edx
		add    $0x9,%eax
		add    %eax,%edx
		mov    %edx,0x2c(%esp)
		jmp    jump_90bb4
	jump_90b7e:
		mov    %dl,%al
		not    %al
		mov    ingame__InNetGame_UNSURE,%ah
		xor    %dl,%dl
		and    %al,%ah
		mov    %dl,unkn2_names(%ebx)
		mov    %ah,ingame__InNetGame_UNSURE
		jmp    jump_90bb4
	jump_90b9a:
		mov    %dl,%al
		mov    ingame__InNetGame_UNSURE,%cl
		not    %al
		and    %al,%cl
		mov    %cl,ingame__InNetGame_UNSURE
		xor    %ch,%ch
		mov    %ch,unkn2_names(%ebx)
	jump_90bb4:
		incw   0x24(%esp)
	jump_90bb9:
		xor    %esi,%esi
		mov    0x24(%esp),%si
		cmp    $0x8,%esi
		jge    jump_90d23
		mov    %esp,%eax
		xor    %edx,%edx
		mov    0x24(%esp),%cl
		mov    %si,%dx
		mov    %esi,%ebx
		call   ac_LbNetworkPlayerName
		mov    $0x1,%dl
		shl    $0x4,%ebx
		shl    %cl,%dl
		cmp    $0x1,%eax
		jne    jump_90b9a
		mov    %esp,%edi
		sub    %ecx,%ecx
		dec    %ecx
		xor    %eax,%eax
		repnz scas %es:(%edi),%al
		not    %ecx
		dec    %ecx
		test   %ecx,%ecx
		je     jump_90b7e
		mov    EXPORT_SYMBOL(selected_city_id),%eax
		sar    $0x18,%eax
		cmp    %eax,%esi
		jne    jump_908e3
		movw   $0x40,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		movb   $0x57,EXPORT_SYMBOL(lbDisplay)+113 # lbDisplay.DrawColour
		jmp    jump_908ec
	jump_90c1c:
		mov    unkn_city_no,%eax
		sar    $0x18,%eax
		cmp    $0xffffffff,%eax
		je     jump_90d23
		imul   $0xda,%eax,%eax
		xor    %esi,%esi
		add    $unkstruct04_arr,%eax
		mov    %si,0x24(%esp)
		lea    0x28(%eax),%ebp
		jmp    jump_90c49
	jump_90c44:
		incw   0x24(%esp)
	jump_90c49:
		xor    %eax,%eax
		mov    0x24(%esp),%ax
		cmp    $0x8,%eax
		jge    jump_90d23
		imul   $0x16,%eax,%eax
		add    %ebp,%eax
		lea    0x6(%eax),%esi
		mov    %esi,%edi
		sub    %ecx,%ecx
		dec    %ecx
		xor    %eax,%eax
		repnz scas %es:(%edi),%al
		not    %ecx
		dec    %ecx
		test   %ecx,%ecx
		je     jump_90c44
		push   %esi
		push   $ascS_15
		lea    0x8(%esp),%eax
		mov    $0x6e,%edx
		push   %eax
		xor    %bl,%bl
		lea    0xc(%esp),%esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    %esp,%eax
		mov    %bl,0x7(%esp)
		call   ac_my_string_width
		sub    %eax,%edx
		mov    back_buffer,%edi
		mov    %edx,%eax
		mov    text_buf_pos,%edx
		shr    %eax
		add    %edx,%edi
		mov    %eax,%ecx
		push   %edi
	jump_90cb1:
		mov    (%esi),%al
		mov    %al,(%edi)
		cmp    $0x0,%al
		je     jump_90cc9
		mov    0x1(%esi),%al
		add    $0x2,%esi
		mov    %al,0x1(%edi)
		add    $0x2,%edi
		cmp    $0x0,%al
		jne    jump_90cb1
	jump_90cc9:
		pop    %edi
		mov    back_buffer,%ebx
		mov    text_buf_pos,%esi
		xor    %edx,%edx
		xor    %eax,%eax
		mov    0x2c(%esp),%dx
		mov    %cx,%ax
		add    %esi,%ebx
		add    $0x3,%edx
		xor    %ecx,%ecx
		mov    %esp,%edi
		call   ac_draw_text_purple_list2
		sub    %ecx,%ecx
		dec    %ecx
		xor    %eax,%eax
		repnz scas %es:(%edi),%al
		not    %ecx
		dec    %ecx
		mov    0x2c(%esp),%edx
		xor    %ah,%ah
		mov    text_buf_pos,%edi
		mov    0x30(%esp),%al
		inc    %ecx
		add    $0x9,%eax
		add    %ecx,%edi
		add    %eax,%edx
		mov    %edi,text_buf_pos
		mov    %edx,0x2c(%esp)
		jmp    jump_90c44
	jump_90d23:
		xor    %al,%al
		add    $0x38,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_show_unkn21_box)	/* 0x0930DC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x48,%esp
		mov    %eax,0x40(%esp)
		lea    0x20(%esp),%edi
		mov    $data_1551e4,%esi
		movsl  %ds:(%esi),%es:(%edi)
		movsb  %ds:(%esi),%es:(%edi)
		testb  $0x80,0x3d(%eax)
		jne    jump_933cb
		mov    $0x4,%edx
		push   $0x38
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    0x44(%esp),%ebx
		xor    %edx,%edx
		mov    $0x10,%ecx
		mov    0x2(%eax),%dx
		xor    %eax,%eax
		add    $0x1a,%edx
		mov    (%ebx),%ax
		mov    $0xbc,%ebx
		add    $0x4,%eax
		call   ac_draw_box_purple_list
		xor    %eax,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_y2),%ax
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		sub    %edx,%eax
		lea    0x1(%eax),%ecx
		xor    %ebx,%ebx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(text_window_x2),%bx
		mov    EXPORT_SYMBOL(text_window_x1),%ax
		sub    %eax,%ebx
		push   $0x38
		inc    %ebx
		call   ac_draw_box_purple_list
		push   $0xf3
		mov    0x44(%esp),%eax
		mov    0x44(%esp),%ebx
		xor    %edx,%edx
		mov    $0x12,%ecx
		mov    0x2(%eax),%dx
		xor    %eax,%eax
		add    $0x107,%edx
		mov    (%ebx),%ax
		mov    $0xc8,%ebx
		add    $0x4,%eax
		call   ac_draw_box_purple_list
		push   $0xf3
		mov    0x44(%esp),%eax
		mov    0x44(%esp),%ebx
		xor    %edx,%edx
		mov    $0x12,%ecx
		mov    0x2(%eax),%dx
		xor    %eax,%eax
		add    $0x129,%edx
		mov    (%ebx),%ax
		mov    $0xc8,%ebx
		add    $0x4,%eax
		call   ac_draw_box_purple_list
		mov    $0x10,%ebx
		push   $0xae
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    0x44(%esp),%eax
		mov    0x44(%esp),%ebx
		xor    %edx,%edx
		mov    $0x10,%ecx
		mov    0x2(%eax),%dx
		xor    %eax,%eax
		add    $0x108,%edx
		mov    (%ebx),%ax
		mov    $0xc6,%ebx
		add    $0x5,%eax
		call   ac_draw_box_purple_list
		push   $0xae
		mov    0x44(%esp),%eax
		mov    0x44(%esp),%ebx
		xor    %edx,%edx
		mov    $0x10,%ecx
		mov    0x2(%eax),%dx
		xor    %eax,%eax
		add    $0x12a,%edx
		mov    (%ebx),%ax
		mov    $0xc6,%ebx
		add    $0x5,%eax
		call   ac_draw_box_purple_list
		xor    %ecx,%ecx
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    0x40(%esp),%eax
		mov    0x6(%eax),%ax
		xor    %ecx,%ecx
		sub    $0x8,%eax
		mov    %ax,%cx
		mov    0x40(%esp),%eax
		mov    0x4(%eax),%ax
		xor    %ebx,%ebx
		sub    $0x8,%eax
		mov    %ax,%bx
		mov    0x40(%esp),%eax
		mov    0x2(%eax),%ax
		xor    %edx,%edx
		add    $0x4,%eax
		mov    %ax,%dx
		mov    0x40(%esp),%eax
		mov    (%eax),%ax
		add    $0x4,%eax
		and    $0xffff,%eax
		call   ac_my_set_text_window
		mov    med_font,%eax
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    0x40(%esp),%eax
		xor    %edx,%edx
		xor    %ecx,%ecx
		mov    0x4(%eax),%dx
		mov    EXPORT_SYMBOL(gui_strings)+0x700,%eax
		sub    $0x8,%edx
		call   ac_my_string_width
		sub    %eax,%edx
		mov    EXPORT_SYMBOL(gui_strings)+0x700,%ebx
		mov    %edx,%eax
		mov    $0x2,%edx
		shr    %eax
		call   ac_draw_text_purple_list2
		mov    0x40(%esp),%eax
		xor    %edx,%edx
		xor    %ecx,%ecx
		mov    0x4(%eax),%dx
		mov    EXPORT_SYMBOL(gui_strings)+0x668,%eax
		sub    $0x8,%edx
		call   ac_my_string_width
		sub    %eax,%edx
		mov    EXPORT_SYMBOL(gui_strings)+0x668,%ebx
		mov    %edx,%eax
		mov    $0xf7,%edx
		shr    %eax
		call   ac_draw_text_purple_list2
		mov    0x40(%esp),%eax
		xor    %edx,%edx
		xor    %ecx,%ecx
		mov    0x4(%eax),%dx
		mov    EXPORT_SYMBOL(gui_strings)+0x66C,%eax
		sub    $0x8,%edx
		call   ac_my_string_width
		sub    %eax,%edx
		mov    EXPORT_SYMBOL(gui_strings)+0x66C,%ebx
		mov    %edx,%eax
		mov    $0x119,%edx
		shr    %eax
		call   ac_draw_text_purple_list2
		mov    0x40(%esp),%eax
		mov    0x40(%esp),%ecx
		mov    0x3d(%eax),%dh
		xor    %ebx,%ebx
		or     $0x80,%dh
		mov    0x4(%eax),%bx
		mov    %dh,0x3d(%eax)
		xor    %edx,%edx
		sub    $0x14,%ebx
		mov    0x2(%eax),%dx
		xor    %eax,%eax
		sub    $0x3,%edx
		mov    (%ecx),%ax
		mov    $0xe6,%ecx
		add    $0x4,%eax
		call   ac_copy_box_purple_list
		mov    0x40(%esp),%eax
		mov    0x40(%esp),%ecx
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    0x4(%eax),%bx
		mov    0x2(%eax),%dx
		sub    $0x8,%ebx
		xor    %eax,%eax
		add    $0xfb,%edx
		mov    (%ecx),%ax
		mov    $0x64,%ecx
		add    $0x4,%eax
		call   ac_copy_box_purple_list
		mov    0x40(%esp),%eax
		xor    %ecx,%ecx
		mov    0x10(%eax),%cx
		mov    0x4(%eax),%ax
		xor    %ebx,%ebx
		sub    $0x14,%eax
		mov    %ax,%bx
		mov    0x40(%esp),%eax
		mov    0x40(%esp),%edx
		mov    0x2(%eax),%ax
		mov    0x12(%edx),%si
		add    $0x4,%eax
		xor    %edx,%edx
		add    %esi,%eax
		mov    %ax,%dx
		mov    0x40(%esp),%eax
		mov    (%eax),%ax
		add    $0x4,%eax
		and    $0xffff,%eax
		call   ac_my_set_text_window
		mov    small_med_font,%eax
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
	jump_933cb:
		mov    $0x41,%eax
		mov    $0x3,%ebp
		call   ac_font_height
		and    $0xff,%eax
		mov    0x40(%esp),%edx
		mov    %eax,0x3c(%esp)
		xor    %eax,%eax
		mov    0x38(%edx),%ax
		mov    %eax,0x44(%esp)
		cmp    $0x20,%eax
		jl     jump_933fb
		jmp    jump_93880
	jump_933fb:
		mov    0x3c(%esp),%eax
		add    $0x4,%eax
		mov    %eax,0x34(%esp)
		mov    0x44(%esp),%eax
		sub    $0xb,%eax
		mov    %eax,0x28(%esp)
		mov    0x44(%esp),%eax
		shl    $0x2,%eax
		mov    %eax,0x38(%esp)
	jump_9341c:
		mov    0x40(%esp),%edx
		mov    0x3c(%esp),%eax
		mov    0xe(%edx),%edx
		add    %ebp,%eax
		sar    $0x10,%edx
		cmp    %edx,%eax
		jge    jump_93880
		mov    0x44(%esp),%cl
		mov    $0x1,%eax
		shl    %cl,%eax
		cmpb   $0x0,EXPORT_SYMBOL(research_on_weapons)
		je     jump_935f3
		test   %eax,data_1c5288
		je     jump_9385a
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_9346e
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_93473
	jump_9346e:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_93473:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_x1),%dx
		cmp    %edx,%eax
		jl     jump_93564
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_9349a
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_9349f
	jump_9349a:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_9349f:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_x2),%dx
		cmp    %edx,%eax
		jg     jump_93564
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_934c6
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_934cb
	jump_934c6:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_934cb:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		add    %ebp,%edx
		sub    $0x2,%edx
		cmp    %edx,%eax
		jl     jump_93564
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_934f7
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_934fc
	jump_934f7:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_934fc:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		mov    0x3c(%esp),%ecx
		add    %ebp,%edx
		add    %ecx,%edx
		add    $0x2,%edx
		cmp    %edx,%eax
		jg     jump_93564
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		je     jump_93564
		xor    %bl,%bl
		mov    %bl,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		mov    0x44(%esp),%al
		mov    %al,EXPORT_SYMBOL(research_selected_wep)
		mov    data_1c5283,%eax
		mov    0x44(%esp),%esi
		sar    $0x18,%eax
		cmp    %esi,%eax
		je     jump_9354f
		movl   $ASM_do_research_submit,EXPORT_SYMBOL(research_submit_button)+0x18
		mov    EXPORT_SYMBOL(gui_strings)+0x684,%eax
		jmp    jump_9355f
	jump_9354f:
		mov    $ASM_do_research_suspend,%edi
		mov    EXPORT_SYMBOL(gui_strings)+0x688,%eax
		mov    %edi,EXPORT_SYMBOL(research_submit_button)+0x18
	jump_9355f:
		mov    %eax,EXPORT_SYMBOL(research_submit_button)+0x08
	jump_93564:
		mov    data_155163,%eax
		mov    0x44(%esp),%edx
		sar    $0x18,%eax
		cmp    %edx,%eax
		jne    jump_9358e
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		or     $0x40,%bl
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		movb   $0x57,EXPORT_SYMBOL(lbDisplay)+113 # lbDisplay.DrawColour
		jmp    jump_93597
	jump_9358e:
		xor    %edx,%edx
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
	jump_93597:
		mov    EXPORT_SYMBOL(lbDisplay)+96,%cx # lbDisplay__DrawFlags
		or     $0x80,%ch
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %eax,%eax
		mov    background_type,%al
		cmp    $0x1,%eax
		je     jump_935c9
		mov    0x38(%esp),%ebx
		mov    $0x3,%eax
		mov    %ebp,%edx
		xor    %ecx,%ecx
		mov    gui_strings(%ebx),%ebx
		jmp    jump_935dc
	jump_935c9:
		mov    0x38(%esp),%ebx
		mov    $0x3,%eax
		mov    %ebp,%edx
		xor    %ecx,%ecx
		mov    EXPORT_SYMBOL(gui_strings)+0x078(%ebx),%ebx
	jump_935dc:
		call   ac_draw_text_purple_list2
		xor    %esi,%esi
		mov    %si,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		add    0x34(%esp),%ebp
		jmp    jump_9385a
	jump_935f3:
		test   %eax,data_1c528c
		je     jump_9385a
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_93615
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_9361a
	jump_93615:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_9361a:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_x1),%dx
		cmp    %edx,%eax
		jl     jump_9370c
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_93641
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_93646
	jump_93641:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_93646:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_x2),%dx
		cmp    %edx,%eax
		jg     jump_9370c
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_9366d
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_93672
	jump_9366d:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_93672:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		add    %ebp,%edx
		sub    $0x2,%edx
		cmp    %edx,%eax
		jl     jump_9370c
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_9369e
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_936a3
	jump_9369e:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_936a3:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		mov    0x3c(%esp),%edi
		add    %ebp,%edx
		add    %edi,%edx
		add    $0x2,%edx
		cmp    %edx,%eax
		jg     jump_9370c
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		je     jump_9370c
		xor    %ah,%ah
		mov    %ah,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		mov    0x44(%esp),%al
		mov    %al,EXPORT_SYMBOL(research_selected_mod)
		mov    data_1c5284,%eax
		mov    0x44(%esp),%edx
		sar    $0x18,%eax
		cmp    %edx,%eax
		je     jump_936f7
		mov    $ASM_do_research_submit,%ecx
		mov    EXPORT_SYMBOL(gui_strings)+0x684,%eax
		mov    %ecx,EXPORT_SYMBOL(research_submit_button)+0x18
		jmp    jump_93707
	jump_936f7:
		mov    $ASM_do_research_suspend,%ebx
		mov    EXPORT_SYMBOL(gui_strings)+0x688,%eax
		mov    %ebx,EXPORT_SYMBOL(research_submit_button)+0x18
	jump_93707:
		mov    %eax,EXPORT_SYMBOL(research_submit_button)+0x08
	jump_9370c:
		mov    selected_weapon,%eax
		mov    0x44(%esp),%esi
		sar    $0x18,%eax
		cmp    %esi,%eax
		jne    jump_93736
		mov    EXPORT_SYMBOL(lbDisplay)+96,%cx # lbDisplay__DrawFlags
		or     $0x40,%cl
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		movb   $0x57,EXPORT_SYMBOL(lbDisplay)+113 # lbDisplay.DrawColour
		jmp    jump_9373f
	jump_93736:
		xor    %ebx,%ebx
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
	jump_9373f:
		mov    0x44(%esp),%edi
		xor    %ecx,%ecx
		cmp    $0xf,%edi
		jne    jump_93751
		mov    $0x4,%eax
		jmp    jump_9375f
	jump_93751:
		mov    $0x3,%ebx
		mov    %edi,%edx
		mov    %edi,%eax
		sar    $0x1f,%edx
		idiv   %ebx
	jump_9375f:
		xor    %ebx,%ebx
		mov    0x20(%esp,%eax,1),%bl
		lea    0x1(%ebp),%edx
		mov    $0x3,%eax
		mov    EXPORT_SYMBOL(gui_strings)+0x118(,%ebx,4),%ebx
		call   ac_draw_text_purple_list2
		orw    $0x80,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    0x44(%esp),%cl
		mov    $0x1,%eax
		shl    %cl,%eax
		cmp    $0x1000,%eax
		jl     jump_937ae
		cmp    $0x8000,%eax
		jg     jump_937ae
		mov    0x28(%esp),%edx
		push   %edx
		mov    EXPORT_SYMBOL(gui_strings)+0x12C,%ebx
		push   %ebx
		push   $ascSD_1
		jmp    jump_937cb
	jump_937ae:
		mov    0x44(%esp),%eax
		mov    %eax,%edx
		mov    $0x3,%ebx
		sar    $0x1f,%edx
		idiv   %ebx
		inc    %edx
		push   %edx
		mov    EXPORT_SYMBOL(gui_strings)+0x130,%eax
		push   %eax
		push   $ascSD_2
	jump_937cb:
		lea    0xc(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0x10,%esp
		mov    back_buffer,%edi
		mov    text_buf_pos,%ecx
		mov    %esp,%esi
		add    %ecx,%edi
		push   %edi
	jump_937e9:
		mov    (%esi),%al
		mov    %al,(%edi)
		cmp    $0x0,%al
		je     jump_93801
		mov    0x1(%esi),%al
		add    $0x2,%esi
		mov    %al,0x1(%edi)
		add    $0x2,%edi
		cmp    $0x0,%al
		jne    jump_937e9
	jump_93801:
		pop    %edi
		orw    $0x8000,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    $0xffffffff,%eax
		mov    back_buffer,%ebx
		mov    text_buf_pos,%esi
		lea    0x1(%ebp),%edx
		xor    %ecx,%ecx
		add    %esi,%ebx
		mov    %esp,%edi
		call   ac_draw_text_purple_list2
		sub    %ecx,%ecx
		dec    %ecx
		xor    %eax,%eax
		repnz scas %es:(%edi),%al
		not    %ecx
		dec    %ecx
		mov    text_buf_pos,%edi
		inc    %ecx
		add    %ecx,%edi
		xor    %eax,%eax
		mov    %edi,text_buf_pos
		mov    %ax,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    0x40(%esp),%edx
		xor    %eax,%eax
		mov    0xb(%edx),%al
		add    0x3c(%esp),%eax
		add    %eax,%ebp
	jump_9385a:
		mov    0x28(%esp),%ebx
		mov    0x38(%esp),%ecx
		mov    0x44(%esp),%esi
		inc    %ebx
		add    $0x4,%ecx
		inc    %esi
		mov    %ebx,0x28(%esp)
		mov    %ecx,0x38(%esp)
		mov    %esi,0x44(%esp)
		cmp    $0x20,%esi
		jl     jump_9341c
	jump_93880:
		xor    %edi,%edi
		mov    %di,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    0x40(%esp),%eax
		mov    0x6(%eax),%ax
		xor    %ecx,%ecx
		sub    $0x8,%eax
		mov    %ax,%cx
		mov    0x40(%esp),%eax
		mov    0x4(%eax),%ax
		xor    %ebx,%ebx
		sub    $0x8,%eax
		mov    %ax,%bx
		mov    0x40(%esp),%eax
		mov    0x2(%eax),%ax
		xor    %edx,%edx
		add    $0x4,%eax
		mov    %ax,%dx
		mov    0x40(%esp),%eax
		mov    (%eax),%ax
		add    $0x4,%eax
		and    $0xffff,%eax
		call   ac_my_set_text_window
		mov    med_font,%eax
		mov    EXPORT_SYMBOL(research_on_weapons),%bl
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		test   %bl,%bl
		je     jump_9393e
		mov    data_1c5283,%eax
		sar    $0x18,%eax
		cmp    $0xffffffff,%eax
		je     jump_93a59
		xor    %edx,%edx
		mov    background_type,%dl
		shl    $0x2,%eax
		cmp    $0x1,%edx
		je     jump_93922
		mov    $0x19,%edx
		mov    gui_strings(%eax),%ebx
		xor    %ecx,%ecx
		mov    $0x4,%eax
		call   ac_draw_text_purple_list2
		jmp    jump_93a59
	jump_93922:
		mov    $0x19,%edx
		mov    EXPORT_SYMBOL(gui_strings)+0x078(%eax),%ebx
		xor    %ecx,%ecx
		mov    $0x4,%eax
		call   ac_draw_text_purple_list2
		jmp    jump_93a59
	jump_9393e:
		mov    data_1c5284,%edx
		sar    $0x18,%edx
		cmp    $0xffffffff,%edx
		je     jump_93a59
		cmp    $0xf,%edx
		jne    jump_9395c
		mov    $0x4,%eax
		jmp    jump_93968
	jump_9395c:
		mov    $0x3,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
	jump_93968:
		mov    0x20(%esp,%eax,1),%al
		and    $0xff,%eax
		mov    data_1c5284,%ecx
		mov    %eax,0x44(%esp)
		sar    $0x18,%ecx
		mov    $0x1,%eax
		shl    %cl,%eax
		cmp    $0x1000,%eax
		jl     jump_939b9
		cmp    $0x8000,%eax
		jg     jump_939b9
		mov    data_1c5284,%eax
		sar    $0x18,%eax
		sub    $0xb,%eax
		push   %eax
		mov    EXPORT_SYMBOL(gui_strings)+0x12C,%ebx
		mov    0x48(%esp),%eax
		push   %ebx
		mov    EXPORT_SYMBOL(gui_strings)+0x118(,%eax,4),%ecx
		push   %ecx
		push   $ascSSD
		jmp    jump_939e8
	jump_939b9:
		mov    data_1c5284,%edx
		sar    $0x18,%edx
		mov    $0x3,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		inc    %edx
		push   %edx
		mov    EXPORT_SYMBOL(gui_strings)+0x130,%ebp
		mov    0x48(%esp),%eax
		push   %ebp
		mov    EXPORT_SYMBOL(gui_strings)+0x118(,%eax,4),%edx
		push   %edx
		push   $ascSSD_0
	jump_939e8:
		lea    0x10(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0x14,%esp
		mov    back_buffer,%edi
		mov    text_buf_pos,%esi
		mov    $0x19,%edx
		add    %esi,%edi
		mov    %esp,%esi
		xor    %ecx,%ecx
		push   %edi
	jump_93a0d:
		mov    (%esi),%al
		mov    %al,(%edi)
		cmp    $0x0,%al
		je     jump_93a25
		mov    0x1(%esi),%al
		add    $0x2,%esi
		mov    %al,0x1(%edi)
		add    $0x2,%edi
		cmp    $0x0,%al
		jne    jump_93a0d
	jump_93a25:
		pop    %edi
		mov    back_buffer,%ebx
		mov    text_buf_pos,%edi
		mov    $0x4,%eax
		add    %edi,%ebx
		mov    %esp,%edi
		call   ac_draw_text_purple_list2
		sub    %ecx,%ecx
		dec    %ecx
		xor    %eax,%eax
		repnz scas %es:(%edi),%al
		not    %ecx
		dec    %ecx
		mov    text_buf_pos,%ebp
		inc    %ecx
		add    %ecx,%ebp
		mov    %ebp,text_buf_pos
	jump_93a59:
		mov    EXPORT_SYMBOL(research_on_weapons),%bh
		mov    $0x107,%ebp
		test   %bh,%bh
		je     jump_93a75
		mov    data_1c5283,%eax
		sar    $0x18,%eax
		cmp    $0xffffffff,%eax
		jne    jump_93a93
	jump_93a75:
		cmpb   $0x0,EXPORT_SYMBOL(research_on_weapons)
		jne    jump_93e36
		mov    data_1c5284,%eax
		sar    $0x18,%eax
		cmp    $0xffffffff,%eax
		je     jump_93e36
	jump_93a93:
		cmpb   $0x0,EXPORT_SYMBOL(research_on_weapons)
		je     jump_93aaa
		mov    data_1c527c,%edx
		push   %edx
		push   $ascD_38
		jmp    jump_93ab5
	jump_93aaa:
		mov    data_1c5280,%eax
		push   %eax
		push   $ascD_39
	jump_93ab5:
		lea    0x8(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
		mov    %esp,%eax
		call   ac_LbTextStringWidth
		mov    %eax,0x2c(%esp)
		mov    $0x64,%eax
		mov    0x2c(%esp),%ebx
		mov    %esp,%esi
		sub    %ebx,%eax
		mov    back_buffer,%edi
		sub    $0x5,%eax
		mov    text_buf_pos,%ecx
		sar    %eax
		add    %ecx,%edi
		mov    %eax,0x30(%esp)
		push   %edi
	jump_93af2:
		mov    (%esi),%al
		mov    %al,(%edi)
		cmp    $0x0,%al
		je     jump_93b0a
		mov    0x1(%esi),%al
		add    $0x2,%esi
		mov    %al,0x1(%edi)
		add    $0x2,%edi
		cmp    $0x0,%al
		jne    jump_93af2
	jump_93b0a:
		pop    %edi
		mov    EXPORT_SYMBOL(lbDisplay)+96,%ax # lbDisplay__DrawFlags
		or     $0x80,%ah
		mov    %ax,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    0x30(%esp),%eax
		mov    back_buffer,%ebx
		mov    text_buf_pos,%esi
		mov    %ebp,%edx
		xor    %ecx,%ecx
		add    %esi,%ebx
		call   ac_draw_text_purple_list2
		mov    EXPORT_SYMBOL(lbDisplay)+96,%dx # lbDisplay__DrawFlags
		and    $0x7f,%dh
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    %esp,%edi
		sub    %ecx,%ecx
		dec    %ecx
		xor    %eax,%eax
		repnz scas %es:(%edi),%al
		not    %ecx
		dec    %ecx
		lea    0x5(%ebp),%edx
		mov    text_buf_pos,%edi
		mov    EXPORT_SYMBOL(small_font),%eax
		inc    %ecx
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		add    %ecx,%edi
		mov    0x30(%esp),%eax
		mov    0x2c(%esp),%ecx
		mov    EXPORT_SYMBOL(misc_text)+4,%ebx
		add    %ecx,%eax
		xor    %ecx,%ecx
		mov    %edi,text_buf_pos
		call   ac_draw_text_purple_list2
		mov    med_font,%eax
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		test   %eax,%eax
		je     jump_93b9b
		mov    0x64(%eax),%al
		and    $0xff,%eax
	jump_93b9b:
		mov    $0xc8,%edx
		sub    %eax,%edx
		mov    EXPORT_SYMBOL(misc_text)+8,%ebx
		mov    %edx,%eax
		xor    %ecx,%ecx
		sar    %eax
		mov    %ebp,%edx
		call   ac_draw_text_purple_list2
		cmpb   $0x0,EXPORT_SYMBOL(research_on_weapons)
		je     jump_93bf8
		mov    data_1c5283,%edx
		sar    $0x18,%edx
		inc    %edx
		imul   $0x19,%edx,%eax # sizeof(struct WeaponDef)
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(weapon_defs)+22(%eax),%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x3,%eax
		add    %edx,%eax
		shl    $0x2,%eax
		push   %eax
		push   $ascD_40
		jmp    jump_93c2d
	jump_93bf8:
		mov    data_1c5284,%eax
		sar    $0x18,%eax
		lea    0x1(%eax),%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(mod_defs)+4(,%eax,8),%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x3,%eax
		add    %edx,%eax
		shl    $0x2,%eax
		push   %eax
		push   $ascD_41
	jump_93c2d:
		lea    0x8(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
		mov    %esp,%eax
		call   ac_LbTextStringWidth
		mov    %eax,0x2c(%esp)
		mov    $0x64,%eax
		sub    0x2c(%esp),%eax
		sub    $0x5,%eax
		sar    %eax
		add    $0x64,%eax
		mov    back_buffer,%edi
		mov    %eax,0x30(%esp)
		mov    text_buf_pos,%eax
		mov    %esp,%esi
		add    %eax,%edi
		xor    %ecx,%ecx
		push   %edi
	jump_93c6c:
		mov    (%esi),%al
		mov    %al,(%edi)
		cmp    $0x0,%al
		je     jump_93c84
		mov    0x1(%esi),%al
		add    $0x2,%esi
		mov    %al,0x1(%edi)
		add    $0x2,%edi
		cmp    $0x0,%al
		jne    jump_93c6c
	jump_93c84:
		pop    %edi
		mov    back_buffer,%ebx
		mov    text_buf_pos,%edx
		mov    0x30(%esp),%eax
		add    %edx,%ebx
		mov    %ebp,%edx
		mov    %esp,%edi
		call   ac_draw_text_purple_list2
		sub    %ecx,%ecx
		dec    %ecx
		xor    %eax,%eax
		repnz scas %es:(%edi),%al
		not    %ecx
		dec    %ecx
		mov    text_buf_pos,%ebx
		mov    EXPORT_SYMBOL(small_font),%eax
		inc    %ecx
		lea    0x5(%ebp),%edx
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		add    %ecx,%ebx
		mov    0x30(%esp),%eax
		mov    0x2c(%esp),%ecx
		mov    %ebx,text_buf_pos
		mov    EXPORT_SYMBOL(misc_text)+4,%ebx
		add    %ecx,%eax
		xor    %ecx,%ecx
		call   ac_draw_text_purple_list2
		mov    med_font,%eax
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_93cfd
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_93d02
	jump_93cfd:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_93d02:
		mov    0x40(%esp),%ebx
		xor    %edx,%edx
		mov    (%ebx),%dx
		add    $0x5,%edx
		cmp    %edx,%eax
		jl     jump_93e36
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_93d2c
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_93d31
	jump_93d2c:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_93d31:
		mov    0x40(%esp),%ebx
		xor    %edx,%edx
		mov    (%ebx),%dx
		add    $0xcb,%edx
		cmp    %edx,%eax
		jge    jump_93e36
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_93d5e
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_93d63
	jump_93d5e:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_93d63:
		mov    0x40(%esp),%ebx
		xor    %edx,%edx
		mov    0x2(%ebx),%dx
		add    $0x106,%edx
		cmp    %edx,%eax
		jl     jump_93e36
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_93d91
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_93d96
	jump_93d91:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_93d96:
		mov    0x40(%esp),%ebx
		xor    %edx,%edx
		mov    0x2(%ebx),%dx
		add    $0x116,%edx
		cmp    %edx,%eax
		jge    jump_93e36
		mov    EXPORT_SYMBOL(lbDisplay)+103,%ah # lbDisplay.LeftButton
		test   %ah,%ah
		je     jump_93de1
		xor    %bh,%bh
		mov    %bh,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		cmpb   $0x0,EXPORT_SYMBOL(research_on_weapons)
		je     jump_93dd5
		addl   $0x3e8,data_1c527c
		jmp    jump_93e36
	jump_93dd5:
		addl   $0x3e8,data_1c5280
		jmp    jump_93e36
	jump_93de1:
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+104 # lbDisplay.RightButton
		je     jump_93e36
		mov    %ah,EXPORT_SYMBOL(lbDisplay)+104 # lbDisplay.RightButton
		cmpb   $0x0,EXPORT_SYMBOL(research_on_weapons)
		je     jump_93e19
		mov    data_1c527c,%edx
		sub    $0x3e8,%edx
		mov    %edx,data_1c527c
		test   %edx,%edx
		jge    jump_93e36
		xor    %ecx,%ecx
		mov    %ecx,data_1c527c
		jmp    jump_93e36
	jump_93e19:
		mov    data_1c5280,%esi
		sub    $0x3e8,%esi
		mov    %esi,data_1c5280
		test   %esi,%esi
		jge    jump_93e36
		xor    %eax,%eax
		mov    %eax,data_1c5280
	jump_93e36:
		mov    data_1c5281,%eax
		sar    $0x18,%eax
		push   %eax
		push   $ascD_42
		lea    0x8(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
		mov    %esp,%eax
		mov    $0xc8,%edx
		call   ac_LbTextStringWidth
		sub    %eax,%edx
		mov    %edx,%eax
		mov    %esp,%esi
		sar    %eax
		mov    back_buffer,%edi
		mov    %eax,0x30(%esp)
		mov    text_buf_pos,%eax
		add    $0x22,%ebp
		add    %eax,%edi
		xor    %ecx,%ecx
		push   %edi
	jump_93e7c:
		mov    (%esi),%al
		mov    %al,(%edi)
		cmp    $0x0,%al
		je     jump_93e94
		mov    0x1(%esi),%al
		add    $0x2,%esi
		mov    %al,0x1(%edi)
		add    $0x2,%edi
		cmp    $0x0,%al
		jne    jump_93e7c
	jump_93e94:
		pop    %edi
		mov    back_buffer,%ebx
		mov    text_buf_pos,%edx
		mov    0x30(%esp),%eax
		add    %edx,%ebx
		mov    %ebp,%edx
		mov    %esp,%edi
		call   ac_draw_text_purple_list2
		sub    %ecx,%ecx
		dec    %ecx
		xor    %eax,%eax
		repnz scas %es:(%edi),%al
		not    %ecx
		dec    %ecx
		mov    0x40(%esp),%eax
		mov    text_buf_pos,%ebx
		xor    %edx,%edx
		inc    %ecx
		mov    0x4(%eax),%dx
		add    %ecx,%ebx
		mov    EXPORT_SYMBOL(gui_strings)+0x85C,%eax
		mov    %ebx,text_buf_pos
		sub    $0x8,%edx
		call   ac_my_string_width
		sub    %eax,%edx
		xor    %ecx,%ecx
		mov    %edx,%eax
		mov    EXPORT_SYMBOL(gui_strings)+0x85C,%ebx
		shr    %eax
		mov    $0x13b,%edx
		call   ac_draw_text_purple_list2
		xor    %ecx,%ecx
		mov    $research_list_buttons,%edx
		mov    %ecx,0x44(%esp)
	jump_93f03:
		mov    0x44(%esp),%ecx
		imul   $0x2e,%ecx,%ebx
		mov    %edx,%eax
		add    $0x2e,%edx
		lea    0x1(%ecx),%esi
		call   *EXPORT_SYMBOL(research_list_buttons)+0x10(%ebx)
		mov    %esi,0x44(%esp)
		cmp    $0x2,%esi
		jl     jump_93f03
		xor    %al,%al
	jump_93f23:
		add    $0x48,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_show_audio_tracks_box)	/* 0x094844 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    %eax,%esi
		testb  $0x80,0xa(%eax)
		je     jump_94876
		mov    0xa(%esi),%dl
		and    $0x7f,%dl
		mov    $0xfffffffb,%ebx
		mov    %dl,0xa(%esi)
		xor    %edx,%edx
		jmp    jump_9486c
	jump_94863:
		inc    %edx
		mov    %bx,EXPORT_SYMBOL(textpos)(,%edi,2)
	jump_9486c:
		xor    %edi,%edi
		mov    %dx,%di
		cmp    $0x3,%edi
		jl     jump_94863
	jump_94876:
		xor    %eax,%eax
		mov    0x9(%esi),%al
		cmp    $0xff,%eax
		jne    jump_948aa
		xor    %ebx,%ebx
		jmp    jump_948a0
	jump_94886:
		mov    EXPORT_SYMBOL(gui_strings)+0x840(,%edx,4),%edi
		sub    %ecx,%ecx
		dec    %ecx
		xor    %eax,%eax
		repnz scas %es:(%edi),%al
		not    %ecx
		dec    %ecx
		inc    %ebx
		mov    %cx,EXPORT_SYMBOL(textpos)(,%edx,2)
	jump_948a0:
		xor    %edx,%edx
		mov    %bx,%dx
		cmp    $0x3,%edx
		jl     jump_94886
	jump_948aa:
		mov    med_font,%eax
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    0x6(%esi),%ax
		xor    %ecx,%ecx
		sub    $0x8,%eax
		mov    %ax,%cx
		mov    0x4(%esi),%ax
		xor    %ebx,%ebx
		sub    $0x8,%eax
		mov    %ax,%bx
		mov    0x2(%esi),%ax
		xor    %edx,%edx
		add    $0x4,%eax
		mov    %ax,%dx
		mov    (%esi),%ax
		add    $0x4,%eax
		and    $0xffff,%eax
		call   ac_my_set_text_window
		mov    $0x41,%eax
		call   ac_font_height
		push   $0x0
		push   $EXPORT_SYMBOL(textpos)
		mov    $0x1,%ecx
		mov    $0x4,%edx
		push   $0x0
		mov    $0x14,%eax
		mov    EXPORT_SYMBOL(gui_strings)+0x840,%ebx
		call   ac_flashy_draw_text
		push   $0x0
		mov    $0x1,%ecx
		push   $data_1c486e
		mov    $0x16,%edx
		mov    EXPORT_SYMBOL(gui_strings)+0x844,%ebx
		push   $0x0
		movzbw %al,%si
		mov    $0x14,%eax
		call   ac_flashy_draw_text
		xor    %dh,%dh
		mov    %al,%dl
		test   %si,%si
		je     jump_9496a
		mov    $options_audio_buttons,%eax
		call   *EXPORT_SYMBOL(options_audio_buttons)+0x10
		mov    $EXPORT_SYMBOL(options_audio_buttons)+0x2E,%eax
		call   *EXPORT_SYMBOL(options_audio_buttons)+0x3E
		mov    $EXPORT_SYMBOL(options_audio_buttons)+0x5C,%eax
		call   *EXPORT_SYMBOL(options_audio_buttons)+0x6C
	jump_9496a:
		test   %dx,%dx
		je     jump_94985
		mov    $EXPORT_SYMBOL(options_audio_buttons)+0x8A,%eax
		call   *EXPORT_SYMBOL(options_audio_buttons)+0x9A
		mov    $EXPORT_SYMBOL(options_audio_buttons)+0x0B8,%eax
		call   *EXPORT_SYMBOL(options_audio_buttons)+0x0C8
	jump_94985:
		xor    %al,%al
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_show_netgame_unkn1)	/* 0x094990 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		mov    0xa(%eax),%dl
		test   $0x80,%dl
		je     jump_949a6
		mov    %dl,%dh
		and    $0x7f,%dh
		mov    %dh,0xa(%eax)
	jump_949a6:
		mov    0x6(%eax),%dx
		xor    %ecx,%ecx
		sub    $0x8,%edx
		mov    %dx,%cx
		mov    0x4(%eax),%dx
		xor    %ebx,%ebx
		sub    $0x8,%edx
		mov    %dx,%bx
		mov    0x2(%eax),%dx
		add    $0x4,%edx
		mov    (%eax),%ax
		and    $0xffff,%edx
		add    $0x4,%eax
		and    $0xffff,%eax
		call   ac_my_set_text_window
		mov    med_font,%eax
		mov    $0x14,%edx
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    $0x41,%eax
		xor    %ecx,%ecx
		call   ac_font_height
		mov    EXPORT_SYMBOL(gui_strings)+0x740,%ebx
		movzbl %al,%ebp
		mov    %edx,%eax
		call   ac_draw_text_purple_list2
		lea    0x1c(%ebp),%esi
		mov    $0x14,%eax
		mov    EXPORT_SYMBOL(gui_strings)+0x754,%ebx
		mov    %esi,%edx
		xor    %ecx,%ecx
		call   ac_draw_text_purple_list2
		lea    0x8(%ebp),%edi
		mov    $0x14,%eax
		mov    EXPORT_SYMBOL(gui_strings)+0x758,%ebx
		add    %edi,%esi
		xor    %ecx,%ecx
		mov    %esi,%edx
		call   ac_draw_text_purple_list2
		mov    $0x14,%eax
		mov    EXPORT_SYMBOL(gui_strings)+0x75C,%ebx
		add    %edi,%esi
		xor    %ecx,%ecx
		mov    %esi,%edx
		call   ac_draw_text_purple_list2
		mov    $0x14,%eax
		mov    EXPORT_SYMBOL(gui_strings)+0x784,%ebx
		add    %edi,%esi
		xor    %ecx,%ecx
		mov    %esi,%edx
		call   ac_draw_text_purple_list2
		add    %edi,%esi
		mov    $0x14,%eax
		mov    EXPORT_SYMBOL(gui_strings)+0x780,%ebx
		mov    %esi,%edx
		xor    %ecx,%ecx
		call   ac_draw_text_purple_list2
		mov    $0x14,%eax
		mov    EXPORT_SYMBOL(gui_strings)+0x808,%ebx
		add    %edi,%esi
		xor    %ecx,%ecx
		mov    %esi,%edx
		call   ac_draw_text_purple_list2
		add    %edi,%esi
		lea    0xa(%ebp),%eax
		add    %edi,%esi
		add    %eax,%esi
		mov    EXPORT_SYMBOL(lbDisplay)+96,%dx # lbDisplay__DrawFlags
		or     $0x1,%dh
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    $0x14,%eax
		mov    EXPORT_SYMBOL(gui_strings)+0x828,%ebx
		mov    %esi,%edx
		xor    %ecx,%ecx
		call   ac_draw_text_purple_list2
		add    %ebp,%ebp
		mov    $0x14,%eax
		mov    EXPORT_SYMBOL(gui_strings)+0x82C,%ebx
		add    $0x10,%ebp
		xor    %ecx,%ecx
		lea    (%esi,%ebp,1),%edx
		call   ac_draw_text_purple_list2
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		and    $0xfe,%bh
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    $options_gfx_buttons,%ebx
		xor    %ecx,%ecx
	jump_94af0:
		imul   $0x2e,%ecx,%esi
		mov    %ebx,%eax
		add    $0x2e,%ebx
		inc    %ecx
		call   *EXPORT_SYMBOL(options_gfx_buttons)+0x10(%esi)
		cmp    $0x10,%ecx
		jb     jump_94af0
		mov    $0x284,%esi
		xor    %edi,%edi
		jmp    jump_94e53
	jump_94b10:
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
	jump_94b15:
		cmp    %ebp,%eax
		jl     jump_94c94
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_94b33
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
		add    %eax,%eax
		jmp    jump_94b38
	jump_94b33:
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
	jump_94b38:
		lea    0x9(%ebp),%ebx
		cmp    %ebx,%eax
		jg     jump_94c94
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_94b59
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		add    %eax,%eax
		jmp    jump_94b5e
	jump_94b59:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
	jump_94b5e:
		cmp    %ecx,%eax
		jl     jump_94c94
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_94b7c
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		add    %eax,%eax
		jmp    jump_94b81
	jump_94b7c:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
	jump_94b81:
		lea    0xe(%ecx),%ebx
		cmp    %ebx,%eax
		jg     jump_94c94
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+106 # lbDisplay.MLeftButton
		jne    jump_94c4f
		cmpl   $0x0,joy_Buttons
		jne    jump_94c4f
		jmp    jump_94c63
	jump_94bab:
		mov    ingame__fld_unkCA0,%eax
		sar    $0x18,%eax
		test   %eax,%eax
		jl     jump_94bea
		decb   ingame__PanelPermutation
		mov    ingame__fld_unkCA0,%eax
		sar    $0x18,%eax
		test   %eax,%eax
		jge    jump_94bd0
		movb   $0x2,ingame__PanelPermutation
	jump_94bd0:
		mov    ingame__fld_unkCA0,%eax
		sar    $0x18,%eax
		mov    EXPORT_SYMBOL(gui_strings)+0x910(,%eax,4),%eax
		mov    %eax,EXPORT_SYMBOL(options_gfx_buttons)+0x08(%esi)
		jmp    jump_94c63
	jump_94bea:
		incb   ingame__PanelPermutation
		mov    ingame__fld_unkCA0,%eax
		sar    $0x18,%eax
		test   %eax,%eax
		jne    jump_94c03
		movb   $0xfd,ingame__PanelPermutation
	jump_94c03:
		mov    ingame__fld_unkCA0,%eax
		sar    $0x18,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(gui_strings)+0x90C(,%eax,4),%eax
		mov    %eax,EXPORT_SYMBOL(options_gfx_buttons)+0x08(%esi)
		jmp    jump_94c63
	jump_94c1f:
		mov    ingame__TrenchcoatPreference,%ah
		dec    %ah
		mov    %ah,ingame__TrenchcoatPreference
		test   $0x80,%ah
		je     jump_94c39
		movb   $0x5,ingame__TrenchcoatPreference
	jump_94c39:
		xor    %eax,%eax
		mov    ingame__TrenchcoatPreference,%al
		mov    EXPORT_SYMBOL(gui_strings)+0x91C(,%eax,4),%eax
		mov    %eax,EXPORT_SYMBOL(options_gfx_buttons)+0x08(%esi)
		jmp    jump_94c63
	jump_94c4f:
		xor    %al,%al
		mov    %al,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		test   %edi,%edi
		jbe    jump_94bab
		cmp    $0x1,%edi
		je     jump_94c1f
	jump_94c63:
		movw   $0x8000,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(fe_icons_sprites),%ebx
		mov    %ecx,%edx
		mov    %ebp,%eax
		add    $0x288,%ebx
		call   ac_draw_sprite_purple_list
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		or     $0x4,%bl
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		jmp    jump_94ca9
	jump_94c94:
		mov    EXPORT_SYMBOL(fe_icons_sprites),%ebx
		mov    %ecx,%edx
		mov    %ebp,%eax
		add    $0x288,%ebx
		call   ac_draw_sprite_purple_list
	jump_94ca9:
		xor    %eax,%eax
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(options_gfx_buttons)+0x04(%esi),%ax
		mov    options_gfx_buttons(%esi),%bx
		add    %eax,%ebx
		add    $0xa,%ebx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_94cd6
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
		add    %eax,%eax
		jmp    jump_94cdb
	jump_94cd6:
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
	jump_94cdb:
		cmp    %ebx,%eax
		jl     jump_94e32
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_94cf9
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
		add    %eax,%eax
		jmp    jump_94cfe
	jump_94cf9:
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
	jump_94cfe:
		lea    0x9(%ebx),%ebp
		cmp    %ebp,%eax
		jg     jump_94e32
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_94d1f
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		add    %eax,%eax
		jmp    jump_94d24
	jump_94d1f:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
	jump_94d24:
		cmp    %ecx,%eax
		jl     jump_94e32
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_94d42
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		add    %eax,%eax
		jmp    jump_94d47
	jump_94d42:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
	jump_94d47:
		lea    0xe(%ecx),%ebp
		cmp    %ebp,%eax
		jg     jump_94e32
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+106 # lbDisplay.MLeftButton
		jne    jump_94e14
		cmpl   $0x0,joy_Buttons
		jne    jump_94e14
		jmp    jump_94e29
	jump_94d71:
		mov    ingame__fld_unkCA0,%eax
		sar    $0x18,%eax
		test   %eax,%eax
		jl     jump_94db0
		incb   ingame__PanelPermutation
		mov    ingame__fld_unkCA0,%eax
		sar    $0x18,%eax
		cmp    $0x2,%eax
		jle    jump_94d96
		mov    %dh,ingame__PanelPermutation
	jump_94d96:
		mov    ingame__fld_unkCA0,%eax
		sar    $0x18,%eax
		mov    EXPORT_SYMBOL(gui_strings)+0x910(,%eax,4),%eax
		mov    %eax,EXPORT_SYMBOL(options_gfx_buttons)+0x08(%esi)
		jmp    jump_94e29
	jump_94db0:
		decb   ingame__PanelPermutation
		mov    ingame__fld_unkCA0,%eax
		sar    $0x18,%eax
		cmp    $0xfffffffd,%eax
		jge    jump_94dca
		movb   $0xff,ingame__PanelPermutation
	jump_94dca:
		mov    ingame__fld_unkCA0,%eax
		sar    $0x18,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(gui_strings)+0x90C(,%eax,4),%eax
		mov    %eax,EXPORT_SYMBOL(options_gfx_buttons)+0x08(%esi)
		jmp    jump_94e29
	jump_94de6:
		incb   ingame__TrenchcoatPreference
		xor    %eax,%eax
		mov    ingame__TrenchcoatPreference,%al
		cmp    $0x5,%eax
		jle    jump_94dfe
		mov    %dh,ingame__TrenchcoatPreference
	jump_94dfe:
		xor    %eax,%eax
		mov    ingame__TrenchcoatPreference,%al
		mov    EXPORT_SYMBOL(gui_strings)+0x91C(,%eax,4),%eax
		mov    %eax,EXPORT_SYMBOL(options_gfx_buttons)+0x08(%esi)
		jmp    jump_94e29
	jump_94e14:
		xor    %dh,%dh
		mov    %dh,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		test   %edi,%edi
		jbe    jump_94d71
		cmp    $0x1,%edi
		je     jump_94de6
	jump_94e29:
		movw   $0x8000,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
	jump_94e32:
		mov    EXPORT_SYMBOL(fe_icons_sprites),%ebp
		lea    -0x7(%ebx),%eax
		add    $0x28e,%ebp
		mov    %ecx,%edx
		mov    %ebp,%ebx
		call   ac_draw_sprite_purple_list
		inc    %edi
		add    $0x2e,%esi
		cmp    $0x2,%edi
		jae    jump_94e8f
	jump_94e53:
		mov    $0x8004,%eax
		xor    %ecx,%ecx
		movzwl options_gfx_buttons(%esi),%ebp
		mov    EXPORT_SYMBOL(options_gfx_buttons)+0x02(%esi),%cx
		sub    $0x13,%ebp
		inc    %ecx
		mov    %ax,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_94b10
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
		add    %eax,%eax
		jmp    jump_94b15
	jump_94e8f:
		xor    %ecx,%ecx
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		cmpb   $0x0,EXPORT_SYMBOL(game_gfx_advanced_lights)
		je     jump_94eaa
		orb    $0x2,EXPORT_SYMBOL(ingame)+0x92F # ingame.Flags+0
		jmp    jump_94eb1
	jump_94eaa:
		andb   $0xfd,EXPORT_SYMBOL(ingame)+0x92F # ingame.Flags+0
	jump_94eb1:
		cmpb   $0x0,EXPORT_SYMBOL(game_billboard_movies)
		je     jump_94ec3
		orb    $0x1,EXPORT_SYMBOL(ingame)+0x92F # ingame.Flags+0
		jmp    jump_94eca
	jump_94ec3:
		andb   $0xfe,EXPORT_SYMBOL(ingame)+0x92F # ingame.Flags+0
	jump_94eca:
		cmpb   $0x0,EXPORT_SYMBOL(game_gfx_deep_radar)
		je     jump_94edc
		orb    $0x4,EXPORT_SYMBOL(ingame)+0x930 # ingame.Flags+1
		jmp    jump_94ee3
	jump_94edc:
		andb   $0xfb,EXPORT_SYMBOL(ingame)+0x930 # ingame.Flags+1
	jump_94ee3:
		xor    %eax,%eax
		mov    ingame__DetailLevel,%al
		test   %eax,%eax
		jne    jump_94ef5
		mov    $0x1,%eax
		jmp    jump_94ef7
	jump_94ef5:
		xor    %eax,%eax
	jump_94ef7:
		call   ASM_bang_set_detail
		xor    %al,%al
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_show_menu_storage_slots_box)	/* 0x094F08 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x20,%esp
		mov    %eax,0x8(%esp)
		mov    0x8(%esp),%edx
		xor    %eax,%eax
		mov    0x38(%edx),%ax
		cmp    EXPORT_SYMBOL(save_slot_base),%eax
		je     jump_94f31
		mov    %eax,EXPORT_SYMBOL(save_slot_base)
		call   ac_load_save_slot_names
	jump_94f31:
		mov    0x8(%esp),%eax
		mov    0x3c(%eax),%dl
		test   $0x80,%dl
		je     jump_94f72
		mov    %dl,%dh
		and    $0x7f,%dh
		mov    %dh,0x3c(%eax)
		mov    EXPORT_SYMBOL(storage_LOAD_button)+0x24,%bl
		or     $0x1,%bl
		mov    EXPORT_SYMBOL(storage_NEW_MORTAL_button)+0x24,%cl
		mov    %bl,EXPORT_SYMBOL(storage_LOAD_button)+0x24
		mov    EXPORT_SYMBOL(storage_SAVE_button)+0x24,%bh
		or     $0x1,%cl
		or     $0x1,%bh
		mov    %cl,EXPORT_SYMBOL(storage_NEW_MORTAL_button)+0x24
		mov    %bh,EXPORT_SYMBOL(storage_SAVE_button)+0x24
	jump_94f72:
		mov    0x8(%esp),%edx
		xor    %eax,%eax
		mov    0x9(%edx),%al
		cmp    $0xff,%eax
		jne    jump_94fb2
		movw   $0xf,0x3a(%edx)
		mov    EXPORT_SYMBOL(storage_SAVE_button)+0x24,%al
		or     $0x2,%al
		mov    EXPORT_SYMBOL(storage_LOAD_button)+0x24,%ch
		mov    %al,EXPORT_SYMBOL(storage_SAVE_button)+0x24
		mov    EXPORT_SYMBOL(storage_NEW_MORTAL_button)+0x24,%ah
		or     $0x2,%ch
		or     $0x2,%ah
		mov    %ch,EXPORT_SYMBOL(storage_LOAD_button)+0x24
		mov    %ah,EXPORT_SYMBOL(storage_NEW_MORTAL_button)+0x24
	jump_94fb2:
		mov    $0x3,%edx
		mov    $0x16,%ecx
		mov    0x8(%esp),%eax
		mov    %dx,0x10(%esp)
		mov    %dx,0x18(%esp)
		mov    0x3d(%eax),%dl
		mov    %cx,0xc(%esp)
		test   $0x80,%dl
		jne    jump_95185
		movw   $0x4,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %esi,%esi
		mov    $0x16,%ebp
		jmp    jump_95045
	jump_94fed:
		imul   $0x1a,%eax,%edi
		push   $0xf3
		mov    $0x1e,%ebx
		xor    %edx,%edx
		mov    %ebp,%ecx
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		xor    %eax,%eax
		add    $0x3,%edx
		mov    EXPORT_SYMBOL(text_window_x1),%ax
		add    %edi,%edx
		add    $0x3,%eax
		call   ac_draw_box_purple_list
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(text_window_y1),%ax
		add    $0x3,%eax
		lea    (%eax,%edi,1),%edx
		push   $0xf3
		xor    %eax,%eax
		mov    $0x16a,%ebx
		mov    EXPORT_SYMBOL(text_window_x1),%ax
		mov    %ebp,%ecx
		add    $0x25,%eax
		inc    %esi
		call   ac_draw_box_purple_list
	jump_95045:
		movswl %si,%eax
		cmp    $0x8,%eax
		jl     jump_94fed
		push   $0xf3
		mov    0x1a(%esp),%esi
		mov    $0x16,%ecx
		mov    $0x1e,%ebx
		xor    %edx,%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		mov    EXPORT_SYMBOL(text_window_x1),%ax
		sar    $0x10,%esi
		add    $0xed,%edx
		add    %esi,%eax
		call   ac_draw_box_purple_list
		push   $0xf3
		mov    $0x16,%ecx
		mov    $0x16a,%ebx
		xor    %eax,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_x1),%ax
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		add    %esi,%eax
		add    $0xed,%edx
		add    $0x22,%eax
		xor    %edi,%edi
		call   ac_draw_box_purple_list
		mov    %di,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    0x8(%esp),%eax
		mov    0x6(%eax),%ax
		xor    %ecx,%ecx
		sub    $0x8,%eax
		mov    %ax,%cx
		mov    0x8(%esp),%eax
		mov    0x4(%eax),%ax
		xor    %ebx,%ebx
		sub    $0x8,%eax
		mov    %ax,%bx
		mov    0x8(%esp),%eax
		mov    0x2(%eax),%ax
		xor    %edx,%edx
		add    $0x4,%eax
		mov    %ax,%dx
		mov    0x8(%esp),%eax
		mov    (%eax),%ax
		add    $0x4,%eax
		and    $0xffff,%eax
		call   ac_my_set_text_window
		mov    med_font,%eax
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    0x8(%esp),%eax
		xor    %edx,%edx
		mov    0x4(%eax),%dx
		mov    EXPORT_SYMBOL(gui_strings)+0x660,%eax
		call   ac_my_string_width
		sub    %eax,%edx
		shr    %edx
		sub    $0x3,%edx
		xor    %ecx,%ecx
		mov    %dx,0x18(%esp)
		mov    EXPORT_SYMBOL(gui_strings)+0x660,%ebx
		mov    0x16(%esp),%eax
		mov    $0x2,%edx
		sar    $0x10,%eax
		mov    0x8(%esp),%esi
		call   ac_draw_text_purple_list2
		mov    0x8(%esp),%eax
		xor    %ecx,%ecx
		xor    %ebx,%ebx
		mov    0x3d(%eax),%dh
		mov    0x6(%eax),%cx
		or     $0x80,%dh
		mov    0x4(%eax),%bx
		mov    %dh,0x3d(%eax)
		xor    %edx,%edx
		add    $0x6,%ecx
		mov    0x2(%eax),%dx
		xor    %eax,%eax
		sub    $0x14,%ebx
		mov    (%esi),%ax
		sub    $0x3,%edx
		add    $0x4,%eax
		call   ac_copy_box_purple_list
		movw   $0x3,0x18(%esp)
	jump_95185:
		mov    0x8(%esp),%eax
		mov    0x10(%eax),%ax
		xor    %ecx,%ecx
		add    $0x17,%eax
		mov    %ax,%cx
		mov    0x8(%esp),%eax
		mov    0x4(%eax),%ax
		xor    %ebx,%ebx
		sub    $0x14,%eax
		mov    %ax,%bx
		mov    0x8(%esp),%eax
		mov    0x8(%esp),%edx
		mov    0x2(%eax),%ax
		mov    0x12(%edx),%si
		add    $0x4,%eax
		xor    %edx,%edx
		add    %esi,%eax
		mov    %ax,%dx
		mov    0x8(%esp),%eax
		mov    (%eax),%ax
		add    $0x4,%eax
		and    $0xffff,%eax
		call   ac_my_set_text_window
		mov    0x8(%esp),%eax
		mov    0x1c(%eax),%eax
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    EXPORT_SYMBOL(save_slot_base),%ax
		mov    %ax,0x14(%esp)
		mov    0xc(%esp),%eax
		add    $0x4,%eax
		mov    %eax,0x1c(%esp)
		jmp    jump_955d7
	jump_95202:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_95207:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_x1),%dx
		cmp    %edx,%eax
		jl     jump_952da
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_9522e
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_95233
	jump_9522e:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_95233:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_x2),%dx
		cmp    %edx,%eax
		jg     jump_952da
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_9525a
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_9525f
	jump_9525a:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_9525f:
		xor    %ebx,%ebx
		mov    0xe(%esp),%edx
		mov    EXPORT_SYMBOL(text_window_y1),%bx
		sar    $0x10,%edx
		add    %ebx,%edx
		dec    %edx
		cmp    %edx,%eax
		jl     jump_952da
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_9528c
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_95291
	jump_9528c:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_95291:
		xor    %ebx,%ebx
		mov    0xe(%esp),%edx
		mov    EXPORT_SYMBOL(text_window_y1),%bx
		sar    $0x10,%edx
		add    %edx,%ebx
		mov    0xa(%esp),%edx
		sar    $0x10,%edx
		add    %ebx,%edx
		inc    %edx
		cmp    %edx,%eax
		jg     jump_952da
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		je     jump_952da
		xor    %ah,%ah
		mov    %ah,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		mov    0x14(%esp),%eax
		mov    $0x1,%dl
		inc    %eax
		mov    %dl,edit_flag
		mov    %ax,EXPORT_SYMBOL(save_slot)
		call   ac_reset_buffered_keys
	jump_952da:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_952f0
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
		add    %eax,%eax
		jmp    jump_952f5
	jump_952f0:
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
	jump_952f5:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_x1),%dx
		cmp    %edx,%eax
		jl     jump_953ea
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_9531c
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
		add    %eax,%eax
		jmp    jump_95321
	jump_9531c:
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
	jump_95321:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_x2),%dx
		cmp    %edx,%eax
		jg     jump_953ea
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_95348
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		add    %eax,%eax
		jmp    jump_9534d
	jump_95348:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
	jump_9534d:
		xor    %ebx,%ebx
		mov    0xe(%esp),%edx
		mov    EXPORT_SYMBOL(text_window_y1),%bx
		sar    $0x10,%edx
		add    %ebx,%edx
		dec    %edx
		cmp    %edx,%eax
		jl     jump_953ea
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_9537e
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		add    %eax,%eax
		jmp    jump_95383
	jump_9537e:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
	jump_95383:
		xor    %ebx,%ebx
		mov    0xe(%esp),%edx
		mov    EXPORT_SYMBOL(text_window_y1),%bx
		sar    $0x10,%edx
		add    %edx,%ebx
		mov    0xa(%esp),%edx
		sar    $0x10,%edx
		add    %ebx,%edx
		inc    %edx
		cmp    %edx,%eax
		jg     jump_953ea
		mov    0x12(%esp),%eax
		mov    EXPORT_SYMBOL(save_slot_base),%ecx
		sar    $0x10,%eax
		sub    %ecx,%eax
		cmpb   $0x0,data_1c4880(%eax)
		jne    jump_953df
		push   $0x1
		mov    $0x1,%bh
		mov    $0x40,%ecx
		push   $0x0
		mov    $0x7b,%edx
		mov    %bh,data_1c4880(%eax)
		push   $0x64
		mov    $0x7f,%ebx
		xor    %eax,%eax
		call   ac_play_sample_using_heap
	jump_953df:
		xor    %esi,%esi
		mov    %si,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		jmp    jump_95401
	jump_953ea:
		mov    0x12(%esp),%eax
		mov    EXPORT_SYMBOL(save_slot_base),%ebx
		sar    $0x10,%eax
		sub    %ebx,%eax
		xor    %dh,%dh
		mov    %dh,data_1c4880(%eax)
	jump_95401:
		mov    0x12(%esp),%eax
		mov    EXPORT_SYMBOL(save_slot)-2,%edx
		sar    $0x10,%eax
		sar    $0x10,%edx
		inc    %eax
		cmp    %edx,%eax
		jne    jump_9541f
		xor    %edi,%edi
		mov    %di,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
	jump_9541f:
		mov    0x12(%esp),%ebp
		sar    $0x10,%ebp
		inc    %ebp
		push   %ebp
		push   $ascD_43
		lea    0x8(%esp),%eax
		push   %eax
		call   ac_sprintf
		mov    back_buffer,%edi
		mov    text_buf_pos,%esi
		add    $0xc,%esp
		add    %esi,%edi
		mov    %esp,%esi
		push   %edi
	jump_9544b:
		mov    (%esi),%al
		mov    %al,(%edi)
		cmp    $0x0,%al
		je     jump_95463
		mov    0x1(%esi),%al
		add    $0x2,%esi
		mov    %al,0x1(%edi)
		add    $0x2,%edi
		cmp    $0x0,%al
		jne    jump_9544b
	jump_95463:
		pop    %edi
		mov    EXPORT_SYMBOL(lbDisplay)+96,%ax # lbDisplay__DrawFlags
		or     $0x80,%ah
		mov    %ax,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    0xe(%esp),%edx
		mov    %esp,%eax
		mov    $0x20,%ecx
		mov    back_buffer,%ebx
		mov    text_buf_pos,%edi
		call   ac_LbTextStringWidth
		sar    $0x10,%edx
		sub    %eax,%ecx
		add    %edi,%ebx
		mov    %ecx,%eax
		mov    0x16(%esp),%ecx
		sar    %eax
		sar    $0x10,%ecx
		add    $0x6,%edx
		add    %ecx,%eax
		xor    %ecx,%ecx
		mov    %esp,%edi
		call   ac_draw_text_purple_list2
		sub    %ecx,%ecx
		dec    %ecx
		xor    %eax,%eax
		repnz scas %es:(%edi),%al
		not    %ecx
		dec    %ecx
		mov    text_buf_pos,%eax
		inc    %ecx
		add    %ecx,%eax
		mov    $0x4,%edx
		mov    %eax,text_buf_pos
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(save_slot)-2,%eax
		sar    $0x10,%eax
		cmp    %eax,%ebp
		jne    jump_95522
		xor    %ebx,%ebx
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		cmpb   $0x0,edit_flag
		je     jump_95522
		mov    0x12(%esp),%eax
		mov    EXPORT_SYMBOL(save_slot_base),%edx
		sar    $0x10,%eax
		sub    %edx,%eax
		imul   $0x19,%eax,%eax
		mov    $0x1,%ebx
		mov    $0x17,%edx
		add    $EXPORT_SYMBOL(save_slot_names),%eax
		call   user_read_value
		test   %al,%al
		je     jump_95522
		xor    %ch,%ch
		mov    %ch,edit_flag
	jump_95522:
		mov    0x12(%esp),%ebp
		sar    $0x10,%ebp
		mov    EXPORT_SYMBOL(save_slot_base),%ecx
		mov    %ebp,%ebx
		sub    %ecx,%ebx
		imul   $0x19,%ebx,%ebx
		mov    0xe(%esp),%edi
		mov    0x16(%esp),%esi
		sar    $0x10,%edi
		sar    $0x10,%esi
		lea    0x6(%edi),%edx
		lea    0x24(%esi),%eax
		xor    %ecx,%ecx
		add    $EXPORT_SYMBOL(save_slot_names),%ebx
		call   ac_draw_text_purple_list2
		cmpb   $0x0,edit_flag
		je     jump_955be
		mov    0x12(%esp),%eax
		mov    EXPORT_SYMBOL(save_slot)-2,%edx
		sar    $0x10,%eax
		sar    $0x10,%edx
		inc    %eax
		cmp    %eax,%edx
		jne    jump_955be
		testb  $0x1,gameturn
		je     jump_955be
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		xor    %eax,%eax
		add    %edi,%edx
		mov    EXPORT_SYMBOL(save_slot_base),%edi
		mov    EXPORT_SYMBOL(text_window_x1),%ax
		sub    %edi,%ebp
		add    %eax,%esi
		imul   $0x19,%ebp,%eax
		mov    EXPORT_SYMBOL(lbFontPtr),%ebx
		add    $0x54,%ebx
		add    $0xb,%edx
		add    $EXPORT_SYMBOL(save_slot_names),%eax
		add    $0x24,%esi
		call   ac_my_string_width
		add    %esi,%eax
		call   ac_draw_sprite_purple_list
	jump_955be:
		mov    0x1c(%esp),%eax
		mov    0x10(%esp),%ecx
		mov    0x14(%esp),%esi
		add    %eax,%ecx
		inc    %esi
		mov    %cx,0x10(%esp)
		mov    %si,0x14(%esp)
	jump_955d7:
		mov    EXPORT_SYMBOL(save_slot_base),%eax
		mov    0x12(%esp),%edx
		add    $0x8,%eax
		sar    $0x10,%edx
		cmp    %eax,%edx
		jae    jump_95631
		mov    0x8(%esp),%ebx
		mov    0xe(%esp),%edx
		mov    0xa(%esp),%eax
		sar    $0x10,%edx
		mov    0xe(%ebx),%ebx
		sar    $0x10,%eax
		sar    $0x10,%ebx
		add    %edx,%eax
		add    $0x17,%ebx
		cmp    %ebx,%eax
		jge    jump_95631
		movw   $0x4,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_95202
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_95207
	jump_95631:
		mov    $0x4,%edi
		mov    %di,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		cmpb   $0x0,save_active_desc
		je     jump_958bc
		mov    0xc(%esp),%eax
		mov    0x10(%esp),%edx
		add    %edi,%eax
		add    %eax,%edx
		mov    %dx,0x10(%esp)
		mov    %di,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_95678
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_9567d
	jump_95678:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_9567d:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_x1),%dx
		cmp    %edx,%eax
		jl     jump_95741
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_956a4
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_956a9
	jump_956a4:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_956a9:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_x2),%dx
		cmp    %edx,%eax
		jg     jump_95741
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_956d0
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_956d5
	jump_956d0:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_956d5:
		xor    %ebx,%ebx
		mov    0xe(%esp),%edx
		mov    EXPORT_SYMBOL(text_window_y1),%bx
		sar    $0x10,%edx
		add    %ebx,%edx
		dec    %edx
		cmp    %edx,%eax
		jl     jump_95741
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_95702
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_95707
	jump_95702:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_95707:
		xor    %edx,%edx
		mov    0xe(%esp),%ebx
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		sar    $0x10,%ebx
		add    %edx,%ebx
		mov    0xa(%esp),%edx
		sar    $0x10,%edx
		add    %ebx,%edx
		inc    %edx
		cmp    %edx,%eax
		jg     jump_95741
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		je     jump_95741
		xor    %cl,%cl
		mov    %cl,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		xor    %ch,%ch
		mov    %cx,EXPORT_SYMBOL(save_slot)
	jump_95741:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_95757
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
		add    %eax,%eax
		jmp    jump_9575c
	jump_95757:
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
	jump_9575c:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_x1),%dx
		cmp    %edx,%eax
		jl     jump_95806
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_95783
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
		add    %eax,%eax
		jmp    jump_95788
	jump_95783:
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
	jump_95788:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_x2),%dx
		cmp    %edx,%eax
		jg     jump_95806
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_957af
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		add    %eax,%eax
		jmp    jump_957b4
	jump_957af:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
	jump_957b4:
		xor    %ebx,%ebx
		mov    0xe(%esp),%edx
		mov    EXPORT_SYMBOL(text_window_y1),%bx
		sar    $0x10,%edx
		add    %ebx,%edx
		dec    %edx
		cmp    %edx,%eax
		jl     jump_95806
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_957e1
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		add    %eax,%eax
		jmp    jump_957e6
	jump_957e1:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
	jump_957e6:
		xor    %ebx,%ebx
		mov    0xe(%esp),%edx
		mov    EXPORT_SYMBOL(text_window_y1),%bx
		sar    $0x10,%edx
		add    %edx,%ebx
		mov    0xa(%esp),%edx
		sar    $0x10,%edx
		add    %ebx,%edx
		inc    %edx
		cmp    %edx,%eax
		jle    jump_9581b
	jump_95806:
		mov    0x12(%esp),%eax
		mov    EXPORT_SYMBOL(save_slot)-2,%edx
		sar    $0x10,%eax
		sar    $0x10,%edx
		inc    %eax
		cmp    %edx,%eax
		jne    jump_95824
	jump_9581b:
		xor    %esi,%esi
		mov    %si,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
	jump_95824:
		orw    $0x8000,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %ecx,%ecx
		mov    0xe(%esp),%edx
		mov    EXPORT_SYMBOL(text_window_y1),%cx
		sar    $0x10,%edx
		mov    EXPORT_SYMBOL(lbFontPtr),%eax
		add    %ecx,%edx
		lea    0x114(%eax),%ebx
		add    $0x6,%edx
		test   %eax,%eax
		je     jump_9585c
		mov    0x118(%eax),%al
		and    $0xff,%eax
	jump_9585c:
		mov    $0x1e,%esi
		xor    %ecx,%ecx
		sub    %eax,%esi
		mov    0x16(%esp),%eax
		mov    EXPORT_SYMBOL(text_window_x1),%cx
		sar    $0x10,%eax
		sar    %esi
		add    %ecx,%eax
		add    %esi,%eax
		call   ac_draw_sprite_purple_list
		movw   $0x4,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(save_slot)-2,%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_9589c
		xor    %edx,%edx
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
	jump_9589c:
		mov    0xe(%esp),%edx
		mov    0x16(%esp),%eax
		mov    $save_active_desc,%ebx
		xor    %ecx,%ecx
		sar    $0x10,%edx
		sar    $0x10,%eax
		add    $0x6,%edx
		add    $0x24,%eax
		call   ac_draw_text_purple_list2
	jump_958bc:
		xor    %ebx,%ebx
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    $storage_LOAD_button,%eax
		call   *EXPORT_SYMBOL(storage_LOAD_button)+0x10
		cmpb   $0x0,restore_savegame
		jne    jump_958e4
		mov    $storage_SAVE_button,%eax
		call   *EXPORT_SYMBOL(storage_SAVE_button)+0x10
	jump_958e4:
		mov    $storage_NEW_MORTAL_button,%eax
		call   *EXPORT_SYMBOL(storage_NEW_MORTAL_button)+0x10
		xor    %al,%al
		add    $0x20,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret

/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_show_weapon_name)	/* 0x097654 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		mov    %eax,%esi
		testb  $0x80,0x3c(%eax)
		je     jump_9767b
		xor    %eax,%eax
		mov    0x9(%esi),%al
		cmp    $0xff,%eax
		je     jump_9767b
		mov    0x3c(%esi),%dl
		movw   $0xfffb,0x3a(%esi)
		and    $0x7f,%dl
		mov    %dl,0x3c(%esi)
	jump_9767b:
		cmpl   $0x0,0x18(%esi)
		je     jump_97711
		mov    0x1c(%esi),%eax
		xor    %edx,%edx
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    0x18(%esi),%eax
		mov    0x4(%esi),%dx
		call   ac_my_string_width
		sub    %eax,%edx
		mov    %edx,%eax
		xor    %edx,%edx
		shr    %eax
		mov    (%esi),%dx
		add    %edx,%eax
		mov    %eax,%ebx
		xor    %edx,%edx
		mov    $0x41,%eax
		mov    0x6(%esi),%dx
		call   ac_font_height
		and    $0xff,%eax
		sub    %eax,%edx
		xor    %eax,%eax
		sar    %edx
		mov    0x2(%esi),%ax
		add    %eax,%edx
		mov    $0x41,%eax
		call   ac_font_height
		xor    %ah,%ah
		xor    %ecx,%ecx
		add    %edx,%eax
		mov    %ax,%cx
		xor    %eax,%eax
		and    $0xffff,%edx
		mov    %bx,%ax
		mov    $0x280,%ebx
		call   ac_my_set_text_window
		push   $0x0
		lea    0x3a(%esi),%eax
		mov    0x18(%esi),%ebx
		push   %eax
		xor    %eax,%eax
		xor    %ecx,%ecx
		mov    0x38(%esi),%ax
		xor    %edx,%edx
		push   %eax
		mov    0xa(%esi),%cl
		xor    %eax,%eax
		call   ac_flashy_draw_text
	jump_97711:
		xor    %al,%al
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_fourpack_slots)	/* 0x097C44 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    %eax,%esi
		mov    %edx,%edi
		movb   $0x4,(%esp)
		mov    data_1c4d22,%eax
		sar    $0x18,%eax
		cmp    $0x4,%eax
		jne    jump_97c83
		xor    %eax,%eax
		jmp    jump_97c6b
	jump_97c63:
		add    $0x5,%eax
		cmp    $0x14,%eax
		je     jump_97c98
	jump_97c6b:
		xor    %edx,%edx
		mov    %bl,%dl
		add    %eax,%edx
		mov    (%esp),%cl
		mov    data_1c4c84(%edx),%bh
		cmp    %cl,%bh
		jae    jump_97c63
		mov    %bh,(%esp)
		jmp    jump_97c63
	jump_97c83:
		mov    %eax,%edx
		shl    $0x2,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    %bl,%dl
		mov    data_1c4c84(%edx,%eax,1),%al
		mov    %al,(%esp)
	jump_97c98:
		push   $0xae
		mov    $0x4,%ecx
		xor    %edx,%edx
		movswl %si,%eax
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		add    $0x1c,%eax
		movswl %di,%edx
		mov    %ecx,%ebx
		add    $0x8,%edx
		call   ac_draw_box_purple_list
		xor    %eax,%eax
		mov    (%esp),%al
		cmp    $0x1,%eax
		jne    jump_97cd1
		movw   $0x4,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
	jump_97cd1:
		push   $0xae
		mov    $0x4,%ecx
		movswl %di,%edx
		movswl %si,%eax
		add    $0x1e,%edx
		add    $0x1c,%eax
		mov    %ecx,%ebx
		call   ac_draw_box_purple_list
		xor    %eax,%eax
		mov    (%esp),%al
		cmp    $0x2,%eax
		jne    jump_97d01
		movw   $0x4,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
	jump_97d01:
		push   $0xae
		mov    $0x4,%ecx
		movswl %di,%edx
		movswl %si,%eax
		add    $0x8,%edx
		add    $0x96,%eax
		mov    %ecx,%ebx
		call   ac_draw_box_purple_list
		xor    %eax,%eax
		mov    (%esp),%al
		cmp    $0x3,%eax
		jne    jump_97d33
		movw   $0x4,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
	jump_97d33:
		push   $0xae
		mov    $0x4,%ecx
		movswl %di,%edx
		movswl %si,%eax
		add    $0x1e,%edx
		add    $0x96,%eax
		mov    %ecx,%ebx
		call   ac_draw_box_purple_list
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_show_weapon_slots)	/* 0x097D5C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		mov    %eax,%esi
		mov    (%eax),%ax
		add    $0x5,%eax
		mov    0x2(%esi),%di
		mov    %ax,(%esp)
		mov    0xb(%esi),%ah
		add    $0x5,%edi
		test   $0x10,%ah
		jne    jump_97deb
		xor    %edx,%edx
		mov    %dx,0x4(%esp)
		jmp    jump_97da7
	jump_97d8b:
		mov    -0x2(%esp),%eax
		movswl %di,%edx
		sar    $0x10,%eax
		mov    0x4(%esp),%ebx
		call   ac_draw_weapon_slot
		inc    %ebx
		add    $0x2c,%edi
		mov    %bx,0x4(%esp)
	jump_97da7:
		mov    0x2(%esp),%eax
		sar    $0x10,%eax
		cmp    $0x6,%eax
		jl     jump_97d8b
		mov    0xb(%esi),%dl
		xor    %ecx,%ecx
		xor    %ebx,%ebx
		xor    %eax,%eax
		or     $0x10,%dl
		mov    0x6(%esi),%cx
		mov    0x4(%esi),%bx
		mov    (%esi),%ax
		add    $0x6,%ecx
		mov    %dl,0xb(%esi)
		xor    %edx,%edx
		add    $0x6,%ebx
		mov    0x2(%esi),%dx
		sub    $0x3,%eax
		sub    $0x3,%edx
		call   ac_copy_box_purple_list
		mov    0x2(%esi),%di
		add    $0x5,%edi
	jump_97deb:
		mov    data_1c4d22,%eax
		sar    $0x18,%eax
		cmp    $0xffffffff,%eax
		je     jump_98269
		xor    %ecx,%ecx
		mov    %cx,0x4(%esp)
		mov    %cx,0x8(%esp)
		jmp    jump_981e6
	jump_97e0d:
		xor    %eax,%eax
		jmp    jump_97e3a
	jump_97e11:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(local_player_no),%al
		imul   $0x1aa,%eax,%eax
		shl    $0x2,%ecx
		lea    (%eax,%ecx,1),%edx
		mov    0x2(%esp),%ecx
		mov    $0x1,%eax
		sar    $0x10,%ecx
		mov    data_1a63b0(%edx),%ebx
		shl    %cl,%eax
		and    %ebx,%eax
	jump_97e3a:
		test   %eax,%eax
		je     jump_981e1
		mov    0x8(%esp),%eax
		inc    %eax
		mov    $0x40,%edx
		mov    %ax,0x8(%esp)
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		movb   $0xae,EXPORT_SYMBOL(lbDisplay)+113 # lbDisplay.DrawColour
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		or     $0x80,%bh
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    0x2(%esp),%ebp
		sar    $0x10,%ebp
		lea    0x1(%ebp),%eax
		imul   $0x6,%eax,%eax
		mov    -0x2(%esp),%ecx
		mov    unk1_sprites,%ebx
		movswl %di,%esi
		sar    $0x10,%ecx
		mov    %esi,%edx
		add    %eax,%ebx
		mov    %ecx,%eax
		call   ac_draw_sprite_purple_list
		mov    EXPORT_SYMBOL(lbDisplay)+96,%ax # lbDisplay__DrawFlags
		and    $0x7f,%ah
		mov    %ax,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		cmp    $0x5,%ebp
		jne    jump_97eb3
		mov    $0x2,%ebx
		jmp    jump_97ee2
	jump_97eb3:
		cmp    $0xb,%ebp
		jne    jump_97ec0
		mov    %esi,%edx
		mov    %ecx,%eax
		xor    %ebx,%ebx
		jmp    jump_97ee6
	jump_97ec0:
		cmp    $0xc,%ebp
		jne    jump_97ecc
		mov    $0x1,%ebx
		jmp    jump_97ee2
	jump_97ecc:
		cmp    $0xa,%ebp
		jne    jump_97ed8
		mov    $0x4,%ebx
		jmp    jump_97ee2
	jump_97ed8:
		cmp    $0x9,%ebp
		jne    jump_97eeb
		mov    $0x3,%ebx
	jump_97ee2:
		mov    %esi,%edx
		mov    %ecx,%eax
	jump_97ee6:
		call   ac_draw_fourpack_slots
	jump_97eeb:
		xor    %edx,%edx
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    data_155151,%eax
		sar    $0x18,%eax
		cmp    $0xffffffff,%eax
		jne    jump_97fca
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_97f1b
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_97f20
	jump_97f1b:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_97f20:
		mov    -0x2(%esp),%edx
		sar    $0x10,%edx
		cmp    %edx,%eax
		jl     jump_97fca
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_97f45
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_97f4a
	jump_97f45:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_97f4a:
		mov    -0x2(%esp),%edx
		sar    $0x10,%edx
		add    $0xb5,%edx
		cmp    %edx,%eax
		jge    jump_97fca
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_97f75
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_97f7a
	jump_97f75:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_97f7a:
		movswl %di,%edx
		cmp    %edx,%eax
		jl     jump_97fca
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_97f97
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_97f9c
	jump_97f97:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_97f9c:
		movswl %di,%edx
		add    $0x2a,%edx
		cmp    %edx,%eax
		jge    jump_97fca
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		je     jump_97fca
		xor    %bh,%bh
		mov    %bh,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		mov    0x4(%esp),%al
		mov    %al,mo_weapon
		mov    selected_agent,%al
		mov    %al,EXPORT_SYMBOL(mo_from_agent)
	jump_97fca:
		mov    data_155151,%eax
		sar    $0x18,%eax
		cmp    $0xffffffff,%eax
		je     jump_981de
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+106 # lbDisplay.MLeftButton
		jne    jump_981de
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_97fff
		mov    EXPORT_SYMBOL(lbDisplay)+80,%ecx # lbDisplay.MMouseX
		add    %ecx,%ecx
		jmp    jump_98005
	jump_97fff:
		mov    EXPORT_SYMBOL(lbDisplay)+80,%ecx # lbDisplay.MMouseX
	jump_98005:
		mov    -0x2(%esp),%eax
		sar    $0x10,%eax
		cmp    %eax,%ecx
		jl     jump_981c4
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_9802a
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
		add    %eax,%eax
		jmp    jump_9802f
	jump_9802a:
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
	jump_9802f:
		mov    -0x2(%esp),%edx
		sar    $0x10,%edx
		add    $0xb5,%edx
		cmp    %edx,%eax
		jge    jump_981c4
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_9805a
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		add    %eax,%eax
		jmp    jump_9805f
	jump_9805a:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
	jump_9805f:
		movswl %di,%edx
		cmp    %edx,%eax
		jl     jump_981c4
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_98080
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		add    %eax,%eax
		jmp    jump_98085
	jump_98080:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
	jump_98085:
		movswl %di,%edx
		add    $0x2a,%edx
		cmp    %edx,%eax
		jge    jump_981c4
		mov    0x4(%esp),%al
		mov    0x2(%esp),%ecx
		mov    %al,selected_weapon
		sar    $0x10,%ecx
		mov    $0x1,%eax
		shl    %cl,%eax
		test   %eax,data_1c5290
		jne    jump_980be
		xor    %eax,%eax
		mov    login_control__State,%al
		cmp    $0x6,%eax
		je     jump_980ea
	jump_980be:
		xor    %eax,%eax
		mov    background_type,%al
		cmp    $0x1,%eax
		je     jump_980da
		mov    0x2(%esp),%eax
		sar    $0x10,%eax
		mov    gui_strings(,%eax,4),%eax
		jmp    jump_980ef
	jump_980da:
		mov    0x2(%esp),%eax
		sar    $0x10,%eax
		mov    EXPORT_SYMBOL(gui_strings)+0x078(,%eax,4),%eax
		jmp    jump_980ef
	jump_980ea:
		mov    EXPORT_SYMBOL(gui_strings)+0x104,%eax
	jump_980ef:
		mov    %eax,EXPORT_SYMBOL(equip_name_box)+0x18
		mov    EXPORT_SYMBOL(gui_strings)+0x65C,%eax
		mov    %eax,EXPORT_SYMBOL(equip_offer_buy_button)+0x08
		mov    data_155161,%eax
		sar    $0x18,%eax
		inc    %eax
		imul   $0x19,%eax,%eax # sizeof(struct WeaponDef)
		mov    $0xfffffffb,%ebx
		mov    $ac_sell_equipment,%esi
		mov    %bx,EXPORT_SYMBOL(equip_name_box)+0x3A
		mov    %esi,EXPORT_SYMBOL(equip_offer_buy_button)+0x18
		mov    EXPORT_SYMBOL(weapon_defs)+20(%eax),%ax
		and    $0xffff,%eax
		imul   $0x64,%eax,%eax
		sar    %eax
		push   %eax
		push   $ascD_45
		push   $equip_cost_text
		call   ac_sprintf
		xor    %eax,%eax
		add    $0xc,%esp
		mov    selected_weapon,%al
		xor    %ecx,%ecx
		call   ac_init_weapon_anim
		mov    %cx,EXPORT_SYMBOL(equip_display_box)+0x16
		orb    $0x80,EXPORT_SYMBOL(equip_display_box)+0x3C
		mov    0x2(%esp),%ecx
		mov    $0x1,%eax
		sar    $0x10,%ecx
		mov    data_1c5290,%ebp
		shl    %cl,%eax
		mov    %bx,EXPORT_SYMBOL(equip_display_box)+0x3A
		test   %ebp,%eax
		jne    jump_9818c
		xor    %eax,%eax
		mov    login_control__State,%al
		cmp    $0x6,%eax
		je     jump_981b1
	jump_9818c:
		mov    data_155161,%eax
		sar    $0x18,%eax
		mov    EXPORT_SYMBOL(weapon_text_index)(,%eax,2),%ax
		mov    weapon_text,%edx
		and    $0xffff,%eax
		add    %eax,%edx
		mov    %edx,EXPORT_SYMBOL(equip_display_box)+0x18
		jmp    jump_981bb
	jump_981b1:
		mov    EXPORT_SYMBOL(gui_strings)+0x860,%eax
		mov    %eax,EXPORT_SYMBOL(equip_display_box)+0x18
	jump_981bb:
		movw   $0xfffb,EXPORT_SYMBOL(equip_display_box)+0x3A
	jump_981c4:
		mov    0x2(%esp),%edx
		mov    data_155151,%eax
		sar    $0x10,%edx
		sar    $0x18,%eax
		cmp    %eax,%edx
		jl     jump_981de
		movb   $0xff,mo_weapon
	jump_981de:
		add    $0x2c,%edi
	jump_981e1:
		incw   0x4(%esp)
	jump_981e6:
		mov    0x2(%esp),%eax
		sar    $0x10,%eax
		cmp    $0x20,%eax
		jge    jump_98269
		mov    0x6(%esp),%eax
		sar    $0x10,%eax
		cmp    $0x6,%eax
		jge    jump_98269
		mov    data_1c4d22,%ecx
		sar    $0x18,%ecx
		cmp    $0x4,%ecx
		jne    jump_97e11
		movzbl EXPORT_SYMBOL(local_player_no),%esi
		imul   $0x1aa,%esi,%esi
		mov    0x2(%esp),%ecx
		mov    $0x1,%eax
		sar    $0x10,%ecx
		shl    %cl,%eax
		mov    data_1a63b0(%esi),%ebp
		mov    %eax,%ecx
		test   %ebp,%eax
		je     jump_97e0d
		test   %ecx,data_1a63b4(%esi)
		je     jump_97e0d
		test   %ecx,data_1a63b8(%esi)
		je     jump_97e0d
		test   %ecx,data_1a63bc(%esi)
		je     jump_97e0d
		mov    $0x1,%eax
		jmp    jump_97e3a
	jump_98269:
		xor    %al,%al
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_show_cryo_agent_list)	/* 0x098278 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x1c,%esp
		mov    %eax,0x8(%esp)
		testb  $0x80,0x3d(%eax)
		jne    jump_9838f
		mov    $0x4,%edx
		push   $0x38
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %ecx,%ecx
		xor    %edx,%edx
		xor    %ebx,%ebx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(text_window_y2),%cx
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		mov    EXPORT_SYMBOL(text_window_x2),%bx
		mov    EXPORT_SYMBOL(text_window_x1),%ax
		sub    %edx,%ecx
		sub    %eax,%ebx
		inc    %ecx
		inc    %ebx
		call   ac_draw_box_purple_list
		xor    %ebx,%ebx
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    0x8(%esp),%eax
		mov    0x6(%eax),%ax
		xor    %ecx,%ecx
		sub    $0x8,%eax
		mov    %ax,%cx
		mov    0x8(%esp),%eax
		mov    0x4(%eax),%ax
		xor    %ebx,%ebx
		sub    $0x8,%eax
		mov    %ax,%bx
		mov    0x8(%esp),%eax
		mov    0x2(%eax),%ax
		xor    %edx,%edx
		add    $0x4,%eax
		mov    %ax,%dx
		mov    0x8(%esp),%eax
		mov    (%eax),%ax
		add    $0x4,%eax
		and    $0xffff,%eax
		call   ac_my_set_text_window
		mov    med_font,%eax
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    0x8(%esp),%eax
		xor    %edx,%edx
		mov    0x4(%eax),%dx
		mov    EXPORT_SYMBOL(gui_strings)+0x6B8,%eax
		call   ac_my_string_width
		sub    %eax,%edx
		shr    %edx
		xor    %ecx,%ecx
		sub    $0x3,%edx
		mov    EXPORT_SYMBOL(gui_strings)+0x6B8,%ebx
		movswl %dx,%eax
		mov    $0x2,%edx
		mov    0x8(%esp),%esi
		call   ac_draw_text_purple_list2
		mov    0x8(%esp),%eax
		xor    %ecx,%ecx
		xor    %ebx,%ebx
		mov    0x3d(%eax),%dh
		mov    0x6(%eax),%cx
		or     $0x80,%dh
		mov    0x4(%eax),%bx
		mov    %dh,0x3d(%eax)
		xor    %edx,%edx
		add    $0x6,%ecx
		mov    0x2(%eax),%dx
		xor    %eax,%eax
		sub    $0x14,%ebx
		mov    (%esi),%ax
		sub    $0x3,%edx
		add    $0x4,%eax
		call   ac_copy_box_purple_list
	jump_9838f:
		mov    0x8(%esp),%eax
		mov    0x10(%eax),%ax
		xor    %ecx,%ecx
		add    $0x17,%eax
		mov    %ax,%cx
		mov    0x8(%esp),%eax
		mov    0x4(%eax),%ax
		xor    %ebx,%ebx
		sub    $0x14,%eax
		mov    %ax,%bx
		mov    0x8(%esp),%eax
		mov    0x8(%esp),%edx
		mov    0x2(%eax),%ax
		mov    0x12(%edx),%si
		add    $0x4,%eax
		xor    %edx,%edx
		add    %esi,%eax
		mov    %ax,%dx
		mov    0x8(%esp),%eax
		mov    (%eax),%ax
		add    $0x4,%eax
		and    $0xffff,%eax
		mov    $0x3,%edi
		call   ac_my_set_text_window
		mov    $0x57,%bl
		mov    med_font,%eax
		mov    %di,0x18(%esp)
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    %bl,EXPORT_SYMBOL(lbDisplay)+113 # lbDisplay.DrawColour
		mov    0x8(%esp),%eax
		mov    0x38(%eax),%ax
		mov    %ax,0x14(%esp)
		movl   $0x19,0x10(%esp)
		jmp    jump_98b0c
	jump_98419:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_9841e:
		mov    0x8(%esp),%ebx
		xor    %edx,%edx
		mov    (%ebx),%dx
		add    $0x7,%edx
		cmp    %edx,%eax
		jl     jump_98594
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_98448
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_9844d
	jump_98448:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_9844d:
		mov    0x8(%esp),%ebx
		xor    %edx,%edx
		mov    (%ebx),%dx
		add    $0x1f,%edx
		cmp    %edx,%eax
		jge    jump_98594
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_98477
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_9847c
	jump_98477:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_9847c:
		mov    0x8(%esp),%edx
		xor    %ebx,%ebx
		mov    0x2(%edx),%bx
		mov    0x16(%esp),%edx
		sar    $0x10,%edx
		add    %ebx,%edx
		add    $0x1f,%edx
		cmp    %edx,%eax
		jl     jump_98594
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_984b0
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_984b5
	jump_984b0:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_984b5:
		mov    0x8(%esp),%edx
		xor    %ebx,%ebx
		mov    0x2(%edx),%bx
		mov    0x16(%esp),%edx
		sar    $0x10,%edx
		add    %ebx,%edx
		add    $0x35,%edx
		cmp    %edx,%eax
		jge    jump_98594
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		je     jump_98938
		xor    %al,%al
		mov    %al,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		xor    %eax,%eax
		mov    login_control__State,%al
		cmp    $0x5,%eax
		je     jump_9891c
		push   $0x2
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x6f,%edx
		xor    %eax,%eax
		call   ac_play_sample_using_heap
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(local_player_no),%al
		imul   $0x1aa,%eax,%eax
		mov    $0x1,%esi
		mov    0x12(%esp),%ecx
		mov    $0x1,%dl
		sar    $0x10,%ecx
		xor    %ebx,%ebx
		shl    %cl,%esi
		mov    0x14(%esp),%cl
		mov    data_1a639b(%eax),%bl
		shl    %cl,%dl
		test   %esi,%ebx
		je     jump_98585
		mov    0x12(%esp),%ecx
		sar    $0x10,%ecx
		inc    %ecx
		sar    %cl,%ebx
		test   %ebx,%ebx
		jne    jump_98938
		mov    %dl,%dh
		mov    data_1a639b(%eax),%bl
		not    %dh
		and    %dh,%bl
		mov    %bl,data_1a639b(%eax)
		xor    %ebx,%ebx
		mov    data_1a639b(%eax),%bl
		test   %ebx,%ebx
		jne    jump_98938
		mov    %bl,%bh
		or     %dl,%bh
		mov    %bh,data_1a639b(%eax)
		jmp    jump_98938
	jump_98585:
		mov    %bl,%dh
		or     %dl,%dh
		mov    %dh,data_1a639b(%eax)
		jmp    jump_98938
	jump_98594:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_985aa
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_985af
	jump_985aa:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_985af:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_x1),%dx
		cmp    %edx,%eax
		jl     jump_98938
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_985d6
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_985db
	jump_985d6:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_985db:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_x2),%dx
		cmp    %edx,%eax
		jg     jump_98938
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_98602
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_98607
	jump_98602:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_98607:
		xor    %ebx,%ebx
		mov    0x16(%esp),%edx
		mov    EXPORT_SYMBOL(text_window_y1),%bx
		sar    $0x10,%edx
		add    %ebx,%edx
		dec    %edx
		cmp    %edx,%eax
		jl     jump_98938
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_98638
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_9863d
	jump_98638:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_9863d:
		xor    %ebx,%ebx
		mov    0x16(%esp),%edx
		mov    EXPORT_SYMBOL(text_window_y1),%bx
		sar    $0x10,%edx
		add    %ebx,%edx
		add    $0x17,%edx
		cmp    %edx,%eax
		jg     jump_98938
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		je     jump_98938
		xor    %cl,%cl
		mov    %cl,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		xor    %eax,%eax
		mov    login_control__State,%al
		cmp    $0x5,%eax
		je     jump_9891c
		mov    data_1c4d22,%eax
		sar    $0x18,%eax
		cmp    $0xffffffff,%eax
		je     jump_9891c
		push   $0x2
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x6f,%edx
		xor    %eax,%eax
		call   ac_play_sample_using_heap
		mov    data_1c4d22,%eax
		sar    $0x18,%eax
		xor    %edx,%edx
		mov    data_1c4c64(%eax),%dl
		mov    %edx,0xc(%esp)
		mov    0x12(%esp),%edx
		sar    $0x10,%edx
		mov    data_1c4c64(%edx),%bl
		mov    %bl,data_1c4c64(%eax)
		mov    0xc(%esp),%bl
		mov    %bl,data_1c4c64(%edx)
		mov    cryo_agents(,%edx,4),%esi
		mov    cryo_agents(,%eax,4),%ebx
		mov    %esi,cryo_agents(,%eax,4)
		mov    %ebx,0xc(%esp)
		mov    %ebx,cryo_agents(,%edx,4)
		xor    %ebx,%ebx
		mov    data_1c4c20(,%eax,2),%bx
		mov    %ebx,0xc(%esp)
		mov    data_1c4c20(,%edx,2),%bx
		mov    %bx,data_1c4c20(,%eax,2)
		mov    0xc(%esp),%eax
		xor    %edi,%edi
		mov    %ax,data_1c4c20(,%edx,2)
		jmp    jump_9872c
	jump_9872b:
		inc    %edi
	jump_9872c:
		movswl %di,%ecx
		cmp    $0x5,%ecx
		jge    jump_987a5
		mov    data_1c4d22,%ebp
		sar    $0x18,%ebp
		lea    0x0(%ebp,%ebp,4),%eax
		add    %ecx,%eax
		xor    %edx,%edx
		mov    0x12(%esp),%esi
		mov    data_1c4c84(%eax),%dl
		sar    $0x10,%esi
		mov    %edx,0xc(%esp)
		lea    (%esi,%esi,4),%edx
		add    %ecx,%edx
		mov    data_1c4c84(%edx),%bl
		mov    %bl,data_1c4c84(%eax)
		mov    0xc(%esp),%bl
		mov    %bl,data_1c4c84(%edx)
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(local_player_no),%bl
		imul   $0x1aa,%ebx,%ebx
		shl    $0x2,%ecx
		add    %ebx,%ecx
		mov    data_1c4c84(%eax),%al
		mov    %al,data_1a63e6(%ecx,%ebp,1)
		cmp    $0x4,%esi
		jge    jump_9872b
		mov    data_1c4c84(%edx),%al
		mov    %al,data_1a63e6(%ecx,%esi,1)
		jmp    jump_9872b
	jump_987a5:
		mov    data_1c4d22,%ecx
		mov    $0x1,%eax
		sar    $0x18,%ecx
		mov    data_1c4c60,%edx
		shl    %cl,%eax
		mov    0x12(%esp),%ecx
		and    %eax,%edx
		mov    $0x1,%eax
		mov    %edx,0xc(%esp)
		sar    $0x10,%ecx
		mov    data_1c4c60,%edx
		shl    %cl,%eax
		mov    0xc(%esp),%ebx
		and    %edx,%eax
		test   %ebx,%ebx
		je     jump_987e3
		test   %eax,%eax
		je     jump_987f6
	jump_987e3:
		cmpl   $0x0,0xc(%esp)
		jne    jump_9887d
		test   %eax,%eax
		je     jump_9887d
	jump_987f6:
		cmpl   $0x0,0xc(%esp)
		je     jump_9881b
		mov    0x12(%esp),%ecx
		mov    $0x1,%edx
		sar    $0x10,%ecx
		mov    data_1c4c60,%ebp
		shl    %cl,%edx
		or     %edx,%ebp
		mov    %ebp,data_1c4c60
		jmp    jump_98839
	jump_9881b:
		mov    0x12(%esp),%ecx
		mov    $0x1,%edx
		sar    $0x10,%ecx
		shl    %cl,%edx
		mov    data_1c4c60,%edi
		not    %edx
		and    %edx,%edi
		mov    %edi,data_1c4c60
	jump_98839:
		test   %eax,%eax
		je     jump_9885d
		mov    data_1c4d22,%ecx
		mov    $0x1,%eax
		sar    $0x18,%ecx
		mov    data_1c4c60,%ebx
		shl    %cl,%eax
		or     %eax,%ebx
		mov    %ebx,data_1c4c60
		jmp    jump_9887d
	jump_9885d:
		mov    data_1c4d22,%ecx
		mov    $0x1,%eax
		sar    $0x18,%ecx
		shl    %cl,%eax
		mov    data_1c4c60,%edx
		not    %eax
		and    %eax,%edx
		mov    %edx,data_1c4c60
	jump_9887d:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(local_player_no),%al
		imul   $0x1aa,%eax,%eax
		mov    data_1c4d22,%ebx
		sar    $0x18,%ebx
		lea    0x0(,%ebx,4),%edx
		lea    (%eax,%edx,1),%ecx
		mov    cryo_agents(%edx),%edx
		mov    %edx,data_1a63b0(%ecx)
		mov    data_1c4c20(,%ebx,2),%dx
		mov    %dx,data_1a63c0(%eax,%ebx,2)
		mov    0x12(%esp),%edx
		sar    $0x10,%edx
		cmp    $0x4,%edx
		jge    jump_988ee
		lea    0x0(,%edx,4),%ebx
		lea    (%eax,%ebx,1),%ecx
		mov    cryo_agents(%ebx),%ebx
		add    %edx,%edx
		mov    %ebx,data_1a63b0(%ecx)
		lea    (%eax,%edx,1),%ebx
		mov    data_1c4c20(%edx),%ax
		mov    %ax,data_1a63c0(%ebx)
	jump_988ee:
		mov    $flic_mods,%eax
		call   ac_update_flic_mods
		xor    %edx,%edx
		jmp    jump_988fd
	jump_988fc:
		inc    %edx
	jump_988fd:
		movswl %dx,%eax
		cmp    $0x4,%eax
		jge    jump_98938
		mov    EXPORT_SYMBOL(old_flic_mods)(%eax),%bl
		cmp    flic_mods(%eax),%bl
		je     jump_988fc
		orb    $0x8,mod_draw_states(%eax)
		jmp    jump_988fc
	jump_9891c:
		push   $0x2
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x81,%edx
		xor    %eax,%eax
		call   ac_play_sample_using_heap
	jump_98938:
		movw   $0x4,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    0x8(%esp),%eax
		xor    %edx,%edx
		push   $0x38
		mov    0x2(%eax),%dx
		mov    0x1a(%esp),%eax
		add    $0x1f,%edx
		sar    $0x10,%eax
		mov    0xc(%esp),%ebx
		add    %eax,%edx
		xor    %eax,%eax
		mov    $0x16,%ecx
		mov    (%ebx),%ax
		mov    $0x18,%ebx
		add    $0x7,%eax
		call   ac_draw_box_purple_list
		xor    %ebx,%ebx
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(local_player_no),%al
		imul   $0x1aa,%eax,%eax
		mov    0x12(%esp),%ecx
		xor    %edx,%edx
		sar    $0x10,%ecx
		mov    data_1a639b(%eax),%dl
		mov    $0x1,%eax
		shl    %cl,%eax
		test   %eax,%edx
		je     jump_989b5
		mov    EXPORT_SYMBOL(lbDisplay)+96,%cx # lbDisplay__DrawFlags
		or     $0x40,%cl
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
	jump_989b5:
		mov    0x12(%esp),%eax
		sar    $0x10,%eax
		cmp    $0x4,%eax
		jge    jump_989ca
		orw    $0x8000,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
	jump_989ca:
		mov    0x12(%esp),%ebp
		sar    $0x10,%ebp
		lea    0x1(%ebp),%eax
		push   %eax
		push   $ascD_46
		lea    0x8(%esp),%eax
		push   %eax
		mov    $0x18,%edx
		call   ac_sprintf
		add    $0xc,%esp
		mov    %esp,%eax
		mov    %esp,%esi
		call   ac_LbTextStringWidth
		sub    %eax,%edx
		mov    back_buffer,%edi
		mov    %edx,%eax
		mov    text_buf_pos,%ecx
		sar    %eax
		add    %ecx,%edi
		mov    %eax,0xc(%esp)
		push   %edi
	jump_98a0e:
		mov    (%esi),%al
		mov    %al,(%edi)
		cmp    $0x0,%al
		je     jump_98a26
		mov    0x1(%esi),%al
		add    $0x2,%esi
		mov    %al,0x1(%edi)
		add    $0x2,%edi
		cmp    $0x0,%al
		jne    jump_98a0e
	jump_98a26:
		pop    %edi
		mov    back_buffer,%ebx
		add    text_buf_pos,%ebx
		mov    0x16(%esp),%esi
		xor    %ecx,%ecx
		sar    $0x10,%esi
		mov    0xc(%esp),%eax
		add    $0x6,%esi
		add    $0x4,%eax
		mov    %esi,%edx
		mov    %esp,%edi
		call   ac_draw_text_purple_list2
		sub    %ecx,%ecx
		dec    %ecx
		xor    %eax,%eax
		repnz scas %es:(%edi),%al
		not    %ecx
		dec    %ecx
		mov    text_buf_pos,%edi
		inc    %ecx
		add    %ecx,%edi
		mov    %edi,text_buf_pos
		orw    $0x8000,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %eax,%eax
		mov    background_type,%al
		cmp    $0x1,%eax
		jne    jump_98ace
		mov    0x12(%esp),%ecx
		sar    $0x10,%ecx
		mov    data_1c4c60,%edx
		shl    %cl,%eax
		test   %edx,%eax
		je     jump_98aaf
		xor    %eax,%eax
		mov    data_1c4c64(%ebp),%al
		mov    %esi,%edx
		xor    %ecx,%ecx
		mov    EXPORT_SYMBOL(gui_strings)+0x38C(,%eax,4),%ebx
		mov    $0x1e,%eax
		call   ac_draw_text_purple_list2
		jmp    jump_98aeb
	jump_98aaf:
		xor    %eax,%eax
		mov    data_1c4c64(%ebp),%al
		mov    %esi,%edx
		xor    %ecx,%ecx
		mov    EXPORT_SYMBOL(gui_strings)+0x2C4(,%eax,4),%ebx
		mov    $0x1e,%eax
		call   ac_draw_text_purple_list2
		jmp    jump_98aeb
	jump_98ace:
		xor    %eax,%eax
		mov    data_1c4c64(%ebp),%al
		mov    %esi,%edx
		xor    %ecx,%ecx
		mov    EXPORT_SYMBOL(gui_strings)+0x134(,%eax,4),%ebx
		mov    $0x1e,%eax
		call   ac_draw_text_purple_list2
	jump_98aeb:
		xor    %eax,%eax
		mov    %ax,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    0x10(%esp),%eax
		mov    0x18(%esp),%edx
		mov    0x14(%esp),%ebx
		add    %eax,%edx
		inc    %ebx
		mov    %dx,0x18(%esp)
		mov    %bx,0x14(%esp)
	jump_98b0c:
		mov    0x8(%esp),%eax
		xor    %edx,%edx
		mov    0x16(%eax),%dx
		mov    0x12(%esp),%eax
		sar    $0x10,%eax
		cmp    %edx,%eax
		jge    jump_8d0cc
		mov    0x8(%esp),%ebx
		mov    0x16(%esp),%edx
		mov    0xe(%ebx),%ebx
		sar    $0x10,%edx
		sar    $0x10,%ebx
		add    $0x16,%edx
		add    $0x17,%ebx
		cmp    %ebx,%edx
		jge    jump_8d0cc
		cmp    $0x4,%eax
		jge    jump_98594
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_98419
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_9841e

	jump_8d0cc:
		xor    %al,%al
		add    $0x1c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret

/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_show_cryo_cybmod_list_box)	/* 0x098F1C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		mov    %esp,%ebp
		sub    $0x24,%esp
		mov    %eax,-0xc(%ebp)
		lea    -0x24(%ebp),%edi
		mov    $EXPORT_SYMBOL(byte_1551F4),%esi
		movsl  %ds:(%esi),%es:(%edi)
		movsb  %ds:(%esi),%es:(%edi)
		testb  $0x80,0x3d(%eax)
		jne    jump_991c1
		movw   $0x4,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %eax,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_y2),%ax
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		sub    %edx,%eax
		lea    0x1(%eax),%ecx
		xor    %ebx,%ebx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(text_window_x2),%bx
		mov    EXPORT_SYMBOL(text_window_x1),%ax
		sub    %eax,%ebx
		push   $0x38
		inc    %ebx
		call   ac_draw_box_purple_list
		push   $0x38
		mov    -0xc(%ebp),%eax
		mov    -0xc(%ebp),%ecx
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    0x4(%eax),%bx
		mov    0x2(%eax),%dx
		sub    $0x8,%ebx
		xor    %eax,%eax
		add    $0x95,%edx
		mov    (%ecx),%ax
		mov    $0x30,%ecx
		add    $0x4,%eax
		call   ac_draw_box_purple_list
		push   $0x38
		mov    -0xc(%ebp),%eax
		mov    -0xc(%ebp),%ecx
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    0x4(%eax),%bx
		mov    0x2(%eax),%dx
		sub    $0x8,%ebx
		xor    %eax,%eax
		add    $0xd2,%edx
		mov    (%ecx),%ax
		mov    $0xd,%ecx
		add    $0x4,%eax
		call   ac_draw_box_purple_list
		mov    -0xc(%ebp),%eax
		mov    0x6(%eax),%ax
		xor    %ecx,%ecx
		sub    $0x8,%eax
		mov    %ax,%cx
		mov    -0xc(%ebp),%eax
		mov    0x4(%eax),%ax
		xor    %ebx,%ebx
		sub    $0x8,%eax
		mov    %ax,%bx
		mov    -0xc(%ebp),%eax
		mov    0x2(%eax),%ax
		xor    %edx,%edx
		add    $0x4,%eax
		mov    %ax,%dx
		mov    -0xc(%ebp),%eax
		mov    (%eax),%ax
		add    $0x4,%eax
		and    $0xffff,%eax
		call   ac_my_set_text_window
		movw   $0x100,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    $0x94,%edx
		mov    small_med_font,%eax
		mov    EXPORT_SYMBOL(gui_strings)+0x6C0,%ebx
		xor    %ecx,%ecx
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		xor    %eax,%eax
		call   ac_draw_text_purple_list2
		mov    $0xad,%edx
		mov    EXPORT_SYMBOL(gui_strings)+0x6C4,%ebx
		xor    %ecx,%ecx
		xor    %eax,%eax
		call   ac_draw_text_purple_list2
		mov    $0xc4,%edx
		mov    EXPORT_SYMBOL(gui_strings)+0x6C8,%ebx
		xor    %ecx,%ecx
		xor    %eax,%eax
		call   ac_draw_text_purple_list2
		mov    -0xc(%ebp),%eax
		xor    %edi,%edi
		xor    %edx,%edx
		mov    0x2(%eax),%di
		mov    %edx,-0x8(%ebp)
		add    $0xa2,%edi
		jmp    jump_99092
	jump_9907f:
		mov    -0x8(%ebp),%ecx
		inc    %ecx
		add    $0x19,%edi
		mov    %ecx,-0x8(%ebp)
		cmp    $0x2,%ecx
		jge    jump_990f9
	jump_99092:
		mov    -0xc(%ebp),%eax
		xor    %esi,%esi
		xor    %ebx,%ebx
		mov    (%eax),%si
		mov    %ebx,-0x4(%ebp)
		add    $0x8,%esi
	jump_990a2:
		mov    -0x8(%ebp),%ecx
		test   %ecx,%ecx
		jbe    jump_990bf
		cmp    $0x1,%ecx
		je     jump_990dc
	jump_990ae:
		mov    -0x4(%ebp),%edx
		inc    %edx
		add    $0x18,%esi
		mov    %edx,-0x4(%ebp)
		cmp    $0x8,%edx
		jge    jump_9907f
		jmp    jump_990a2
	jump_990bf:
		xor    %eax,%eax
		mov    $0x7,%ecx
		mov    EXPORT_SYMBOL(byte_155174),%al
		mov    $0x16,%ebx
		push   %eax
		mov    %edi,%edx
		mov    %esi,%eax
		call   ac_draw_box_purple_list
		jmp    jump_990ae
	jump_990dc:
		xor    %eax,%eax
		mov    $0x7,%ecx
		mov    EXPORT_SYMBOL(byte_155180),%al
		mov    $0x16,%ebx
		push   %eax
		mov    %edi,%edx
		mov    %esi,%eax
		call   ac_draw_box_purple_list
		jmp    jump_990ae
	jump_990f9:
		xor    %ecx,%ecx
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    -0xc(%ebp),%eax
		xor    %ebx,%ebx
		mov    0x3d(%eax),%dh
		mov    0xe(%eax),%ecx
		or     $0x80,%dh
		mov    0x4(%eax),%bx
		mov    %dh,0x3d(%eax)
		mov    -0xc(%ebp),%edx
		xor    %eax,%eax
		mov    -0xc(%ebp),%esi
		mov    0x2(%edx),%ax
		mov    0x10(%edx),%edx
		add    $0x4,%eax
		sar    $0x10,%edx
		sar    $0x10,%ecx
		add    %eax,%edx
		xor    %eax,%eax
		sub    $0x14,%ebx
		mov    (%esi),%ax
		add    $0x17,%ecx
		add    $0x4,%eax
		call   ac_copy_box_purple_list
		mov    %esi,%eax
		xor    %ecx,%ecx
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    0x6(%esi),%cx
		mov    0x4(%esi),%bx
		mov    0x2(%esi),%dx
		xor    %esi,%eax
		sub    $0x92,%ecx
		sub    $0x8,%ebx
		mov    (%esi),%ax
		add    $0x95,%edx
		add    $0x4,%eax
		call   ac_copy_box_purple_list
		mov    0x10(%esi),%ax
		xor    %ecx,%ecx
		add    $0x17,%eax
		mov    %ax,%cx
		mov    0x4(%esi),%ax
		xor    %ebx,%ebx
		sub    $0x14,%eax
		mov    %ax,%bx
		mov    0x2(%esi),%ax
		add    $0x4,%eax
		mov    0x12(%esi),%si
		xor    %edx,%edx
		add    %esi,%eax
		mov    %ax,%dx
		mov    -0xc(%ebp),%eax
		mov    (%eax),%ax
		add    $0x4,%eax
		and    $0xffff,%eax
		call   ac_my_set_text_window
		mov    small_med_font,%eax
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
	jump_991c1:
		mov    $0x41,%eax
		mov    $0x3,%edi
		call   ac_font_height
		mov    %edi,-0x10(%ebp)
		and    $0xff,%eax
		mov    %eax,-0x18(%ebp)
		mov    data_155162,%eax
		sar    $0x18,%eax
		cmp    $0xffffffff,%eax
		jne    jump_996f8
		mov    -0xc(%ebp),%eax
		mov    0x38(%eax),%ax
		and    $0xffff,%eax
		mov    %eax,-0x4(%ebp)
		cmp    $0x10,%eax
		jl     jump_99205
		jmp    jump_99aba
	jump_99205:
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		shl    $0x3,%eax
		add    $0x18,%eax
		mov    %eax,-0x1c(%ebp)
		mov    %edx,%eax
		sub    $0xb,%eax
		mov    %eax,-0x14(%ebp)
	jump_9921d:
		mov    -0xc(%ebp),%eax
		mov    -0x10(%ebp),%edx
		mov    0xe(%eax),%eax
		mov    -0x18(%ebp),%ebx
		sar    $0x10,%eax
		add    %ebx,%edx
		add    $0x17,%eax
		cmp    %eax,%edx
		jge    jump_99aba
		mov    -0x4(%ebp),%cl
		mov    $0x1,%eax
		shl    %cl,%eax
		test   %eax,data_1c5294
		jne    jump_99270
		xor    %eax,%eax
		mov    login_control__State,%al
		cmp    $0x5,%eax
		jne    jump_996cd
		mov    -0x4(%ebp),%eax
		mov    login_control__TechLevel,%bh
		cmp    EXPORT_SYMBOL(mod_tech_level)+1(%eax),%bh
		jb     jump_996cd
	jump_99270:
		mov    data_1c4d22,%eax
		sar    $0x18,%eax
		cmp    $0xffffffff,%eax
		je     jump_99301
		mov    -0x4(%ebp),%cl
		mov    $0x1,%edi
		shl    %cl,%edi
		cmp    $0x4,%eax
		je     jump_9929c
		jmp    jump_992d2
	jump_99292:
		add    $0x2,%esi
		cmp    $0x8,%esi
		jl     jump_992a0
		jmp    jump_992c8
	jump_9929c:
		xor    %dl,%dl
		xor    %esi,%esi
	jump_992a0:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(local_player_no),%al
		imul   $0x1aa,%eax,%eax
		testw  $0x1c0,data_1a63c0(%esi,%eax,1)
		jne    jump_99292
		cmp    $0x40,%edi
		jl     jump_992c6
		cmp    $0x100,%edi
		jle    jump_99292
	jump_992c6:
		mov    $0x1,%dl
	jump_992c8:
		test   %dl,%dl
		jne    jump_996cd
		jmp    jump_99301
	jump_992d2:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		imul   $0x1aa,%edx,%edx
		testw  $0x1c0,data_1a63c0(%edx,%eax,2)
		jne    jump_99301
		cmp    $0x40,%edi
		jl     jump_996cd
		cmp    $0x100,%edi
		jg     jump_996cd
	jump_99301:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_99317
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_9931c
	jump_99317:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_9931c:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_x1),%dx
		cmp    %edx,%eax
		jl     jump_99567
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_99343
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_99348
	jump_99343:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_99348:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_x2),%dx
		cmp    %edx,%eax
		jg     jump_99567
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_9936f
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_99374
	jump_9936f:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_99374:
		xor    %edx,%edx
		mov    -0x10(%ebp),%esi
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		add    %esi,%edx
		dec    %edx
		cmp    %edx,%eax
		jl     jump_99567
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_993a1
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_993a6
	jump_993a1:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_993a6:
		xor    %edx,%edx
		mov    -0x10(%ebp),%edi
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		mov    -0x18(%ebp),%ebx
		add    %edi,%edx
		add    %ebx,%edx
		inc    %edx
		cmp    %edx,%eax
		jg     jump_99567
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		je     jump_99567
		xor    %ch,%ch
		mov    %ch,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		mov    -0x4(%ebp),%al
		mov    %al,selected_mod
		mov    %al,%cl
		mov    $0x1,%eax
		mov    $0xfffffffb,%esi
		shl    %cl,%eax
		mov    %si,EXPORT_SYMBOL(equip_name_box)+0x3A
		cmp    $0x1000,%eax
		jl     jump_99442
		cmp    $0x8000,%eax
		jg     jump_99442
		mov    -0x14(%ebp),%eax
		push   %eax
		mov    EXPORT_SYMBOL(gui_strings)+0x12C,%edx
		mov    -0x4(%ebp),%ebx
		push   %edx
		cmp    $0xf,%ebx
		jne    jump_9941c
		mov    $0x4,%eax
		jmp    jump_9942a
	jump_9941c:
		mov    %ebx,%eax
		mov    %ebx,%edx
		mov    $0x3,%ebx
		sar    $0x1f,%edx
		idiv   %ebx
	jump_9942a:
		mov    -0x24(%eax,%ebp,1),%al
		and    $0xff,%eax
		mov    EXPORT_SYMBOL(gui_strings)+0x118(,%eax,4),%ecx
		push   %ecx
		push   $ascSSD_1
		jmp    jump_99488
	jump_99442:
		mov    -0x4(%ebp),%eax
		mov    %eax,%edx
		mov    $0x3,%ebx
		sar    $0x1f,%edx
		idiv   %ebx
		inc    %edx
		push   %edx
		mov    EXPORT_SYMBOL(gui_strings)+0x130,%ecx
		mov    -0x4(%ebp),%esi
		push   %ecx
		cmp    $0xf,%esi
		jne    jump_99469
		mov    $0x4,%eax
		jmp    jump_99472
	jump_99469:
		mov    %esi,%edx
		mov    %esi,%eax
		sar    $0x1f,%edx
		idiv   %ebx
	jump_99472:
		mov    -0x24(%eax,%ebp,1),%al
		and    $0xff,%eax
		mov    EXPORT_SYMBOL(gui_strings)+0x118(,%eax,4),%edi
		push   %edi
		push   $ascSSD_2
	jump_99488:
		push   $EXPORT_SYMBOL(cybmod_name_text)
		call   ac_sprintf
		add    $0x14,%esp
		mov    -0x1c(%ebp),%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(mod_defs)+20(%edx),%ax
		imul   $0xa,%eax,%eax
		push   %eax
		push   $ascD_47
		push   $equip_cost_text
		mov    $ac_do_equip_offer_buy,%esi
		call   ac_sprintf
		mov    EXPORT_SYMBOL(gui_strings)+0x6D0,%eax
		add    $0xc,%esp
		mov    %eax,EXPORT_SYMBOL(equip_offer_buy_button)+0x08
		mov    EXPORT_SYMBOL(display_box_content),%al
		mov    %esi,EXPORT_SYMBOL(equip_offer_buy_button)+0x18
		test   %al,%al
		jne    jump_994ff
		mov    data_155162,%ecx
		mov    $0x1,%eax
		sar    $0x18,%ecx
		shl    %cl,%eax
		cmp    $0x1000,%eax
		jge    jump_994ff
		mov    selected_mod,%al
		add    $0x20,%al
		and    $0xff,%eax
		call   ac_init_weapon_anim
		jmp    jump_99567
	jump_994ff:
		mov    data_155162,%eax
		sar    $0x18,%eax
		mov    EXPORT_SYMBOL(cybmod_text_index)(,%eax,2),%ax
		mov    weapon_text,%edx
		and    $0xffff,%eax
		add    %eax,%edx
		mov    -0xc(%ebp),%eax
		movw   $0xfffb,0x3a(%eax)
		movw   $0x0,0x38(%eax)
		mov    %edx,0x18(%eax)
		mov    0x3c(%eax),%dl
		movw   $0x0,0x16(%eax)
		or     $0x80,%dl
		mov    %dl,0x3c(%eax)
		mov    EXPORT_SYMBOL(small_font),%eax
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    $0x41,%eax
		call   ac_font_height
		mov    EXPORT_SYMBOL(byte_197160),%ah
		mov    -0xc(%ebp),%edx
		add    %ah,%al
		mov    %al,0x40(%edx)
		mov    0x1c(%edx),%eax
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
	jump_99567:
		mov    data_155162,%eax
		mov    -0x4(%ebp),%edi
		sar    $0x18,%eax
		cmp    %edi,%eax
		jne    jump_99588
		movw   $0x40,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		movb   $0x57,EXPORT_SYMBOL(lbDisplay)+113 # lbDisplay.DrawColour
		jmp    jump_99591
	jump_99588:
		xor    %edi,%edi
		mov    %di,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
	jump_99591:
		mov    EXPORT_SYMBOL(lbDisplay)+96,%dx # lbDisplay__DrawFlags
		or     $0x80,%dh
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    -0x4(%ebp),%eax
		xor    %ecx,%ecx
		cmp    $0xf,%eax
		jne    jump_995b3
		mov    $0x4,%eax
		jmp    jump_995bf
	jump_995b3:
		mov    %eax,%edx
		mov    $0x3,%ebx
		sar    $0x1f,%edx
		idiv   %ebx
	jump_995bf:
		xor    %ebx,%ebx
		mov    -0x10(%ebp),%edx
		mov    -0x24(%eax,%ebp,1),%bl
		inc    %edx
		mov    $0x3,%eax
		mov    EXPORT_SYMBOL(gui_strings)+0x118(,%ebx,4),%ebx
		call   ac_draw_text_purple_list2
		andw   $0x7f7f,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(lbDisplay)+96,%cx # lbDisplay__DrawFlags
		or     $0x80,%cl
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    -0x4(%ebp),%cl
		mov    $0x1,%eax
		shl    %cl,%eax
		cmp    $0x1000,%eax
		jl     jump_9961e
		cmp    $0x8000,%eax
		jg     jump_9961e
		mov    -0x14(%ebp),%ebx
		push   %ebx
		mov    EXPORT_SYMBOL(gui_strings)+0x12C,%ecx
		push   %ecx
		push   $ascSD_5
		jmp    jump_9963b
	jump_9961e:
		mov    -0x4(%ebp),%eax
		mov    %eax,%edx
		mov    $0x3,%ebx
		sar    $0x1f,%edx
		idiv   %ebx
		inc    %edx
		push   %edx
		mov    EXPORT_SYMBOL(gui_strings)+0x130,%edx
		push   %edx
		push   $ascSD_6
	jump_9963b:
		push   $EXPORT_SYMBOL(byte_1C495C)
		call   ac_sprintf
		add    $0x10,%esp
		mov    -0x10(%ebp),%edx
		mov    back_buffer,%edi
		mov    text_buf_pos,%esi
		xor    %ecx,%ecx
		add    %esi,%edi
		mov    $EXPORT_SYMBOL(byte_1C495C),%esi
		inc    %edx
		push   %edi
	jump_99662:
		mov    (%esi),%al
		mov    %al,(%edi)
		cmp    $0x0,%al
		je     jump_9967a
		mov    0x1(%esi),%al
		add    $0x2,%esi
		mov    %al,0x1(%edi)
		add    $0x2,%edi
		cmp    $0x0,%al
		jne    jump_99662
	jump_9967a:
		pop    %edi
		mov    back_buffer,%ebx
		mov    text_buf_pos,%edi
		mov    $0xffffffff,%eax
		add    %edi,%ebx
		mov    $EXPORT_SYMBOL(byte_1C495C),%edi
		call   ac_draw_text_purple_list2
		sub    %ecx,%ecx
		dec    %ecx
		xor    %eax,%eax
		repnz scas %es:(%edi),%al
		not    %ecx
		dec    %ecx
		mov    text_buf_pos,%eax
		inc    %ecx
		add    %ecx,%eax
		xor    %esi,%esi
		mov    %eax,text_buf_pos
		mov    %si,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    -0xc(%ebp),%edx
		xor    %eax,%eax
		mov    0xb(%edx),%al
		mov    -0x18(%ebp),%edx
		mov    -0x10(%ebp),%ebx
		add    %edx,%eax
		add    %eax,%ebx
		mov    %ebx,-0x10(%ebp)
	jump_996cd:
		mov    -0x1c(%ebp),%ecx
		mov    -0x14(%ebp),%esi
		mov    -0x4(%ebp),%edi
		add    $0x18,%ecx
		inc    %esi
		inc    %edi
		mov    %ecx,-0x1c(%ebp)
		mov    %esi,-0x14(%ebp)
		mov    %edi,-0x4(%ebp)
		cmp    $0x10,%edi
		jl     jump_9921d
		xor    %al,%al
		mov    %ebp,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_996f8:
		movw   $0x100,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    small_med_font,%eax
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    -0xc(%ebp),%eax
		mov    0x6(%eax),%ax
		xor    %ecx,%ecx
		sub    $0x8,%eax
		mov    %ax,%cx
		mov    -0xc(%ebp),%eax
		mov    0x4(%eax),%ax
		xor    %ebx,%ebx
		sub    $0x8,%eax
		mov    %ax,%bx
		mov    -0xc(%ebp),%eax
		mov    0x2(%eax),%ax
		xor    %edx,%edx
		add    $0x4,%eax
		mov    %ax,%dx
		mov    -0xc(%ebp),%eax
		mov    (%eax),%ax
		add    $0x4,%eax
		and    $0xffff,%eax
		call   ac_my_set_text_window
		mov    data_155162,%eax
		sar    $0x18,%eax
		lea    0x1(%eax),%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(mod_defs)+19(,%eax,8),%al
		and    $0xff,%eax
		mov    $0xd0,%edx
		xor    %ecx,%ecx
		mov    EXPORT_SYMBOL(gui_strings)+0x0A14(,%eax,4),%ebx # gui_strings[GSTR_MOD_EPIDERMIS+mdef->AdditProp]
		xor    %eax,%eax
		call   ac_draw_text_purple_list2
		mov    -0xc(%ebp),%eax
		xor    %esi,%esi
		xor    %edi,%edi
		mov    0x2(%eax),%si
		mov    (%eax),%di
		add    $0xa2,%esi
		xor    %eax,%eax
		add    $0x8,%edi
		mov    %eax,-0x4(%ebp)
	jump_997a0:
		mov    data_155162,%eax
		sar    $0x18,%eax
		inc    %eax
		imul   $0x18,%eax,%eax
		mov    EXPORT_SYMBOL(mod_defs)(%eax),%ax
		mov    -0x4(%ebp),%ebx
		and    $0xffff,%eax
		cmp    %ebx,%eax
		jle    jump_997db
		xor    %eax,%eax
		mov    $0x7,%ecx
		mov    EXPORT_SYMBOL(byte_155175)(%ebx),%al
		mov    %esi,%edx
		push   %eax
		mov    $0x16,%ebx
		mov    %edi,%eax
		call   ac_draw_box_purple_list
	jump_997db:
		mov    -0x4(%ebp),%ecx
		inc    %ecx
		add    $0x18,%edi
		mov    %ecx,-0x4(%ebp)
		cmp    $0x8,%ecx
		jl     jump_997a0
		mov    -0xc(%ebp),%eax
		add    $0x19,%esi
		xor    %edi,%edi
		xor    %edx,%edx
		mov    (%eax),%di
		mov    %edx,-0x4(%ebp)
		add    $0x8,%edi
	jump_997fd:
		mov    data_155162,%eax
		sar    $0x18,%eax
		inc    %eax
		imul   $0x18,%eax,%eax
		mov    EXPORT_SYMBOL(mod_defs)+2(%eax),%ax
		mov    -0x4(%ebp),%ebx
		and    $0xffff,%eax
		cmp    %ebx,%eax
		jle    jump_99838
		xor    %eax,%eax
		mov    $0x7,%ecx
		mov    EXPORT_SYMBOL(byte_155181)(%ebx),%al
		mov    %esi,%edx
		push   %eax
		mov    $0x16,%ebx
		mov    %edi,%eax
		call   ac_draw_box_purple_list
	jump_99838:
		mov    -0x4(%ebp),%ecx
		inc    %ecx
		add    $0x18,%edi
		mov    %ecx,-0x4(%ebp)
		cmp    $0x8,%ecx
		jl     jump_997fd
		xor    %eax,%eax
		mov    %ax,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    $0x101,%edx
		mov    $0x211,%eax
		call   ac_draw_hotspot_purple_list
		cmpb   $0x0,EXPORT_SYMBOL(display_box_content)
		jne    jump_99894
		mov    data_155162,%ecx
		mov    $0x1,%eax
		sar    $0x18,%ecx
		shl    %cl,%eax
		cmp    $0x1000,%eax
		jge    jump_99894
		mov    $0x2,%eax
		call   ac_xdo_next_frame
		mov    $ac_weapon_flic_data_to_screen,%eax
		call   ac_draw_flic_purple_list
		jmp    jump_99911
	jump_99894:
		mov    EXPORT_SYMBOL(small_font),%eax
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    -0xc(%ebp),%eax
		mov    0x10(%eax),%ax
		xor    %ecx,%ecx
		add    $0x17,%eax
		mov    %ax,%cx
		mov    -0xc(%ebp),%eax
		mov    0x4(%eax),%ax
		xor    %ebx,%ebx
		sub    $0x14,%eax
		mov    %ax,%bx
		mov    -0xc(%ebp),%eax
		mov    -0xc(%ebp),%edx
		mov    0x2(%eax),%ax
		mov    0x12(%edx),%si
		add    $0x4,%eax
		xor    %edx,%edx
		add    %esi,%eax
		mov    %ax,%dx
		mov    -0xc(%ebp),%eax
		mov    (%eax),%ax
		add    $0x4,%eax
		and    $0xffff,%eax
		call   ac_my_set_text_window
		push   $0x0
		mov    -0xc(%ebp),%eax
		mov    -0xc(%ebp),%edx
		add    $0x3a,%eax
		xor    %ecx,%ecx
		push   %eax
		xor    %eax,%eax
		mov    0xa(%edx),%cl
		mov    0x38(%edx),%ax
		mov    0x18(%edx),%ebx
		push   %eax
		xor    %edx,%edx
		xor    %eax,%eax
		call   ac_flashy_draw_text
	jump_99911:
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		je     jump_99a62
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_99934
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_99939
	jump_99934:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_99939:
		cmp    $0x1ad,%eax
		jl     jump_99a62
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_9995a
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_9995f
	jump_9995a:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_9995f:
		cmp    $0x275,%eax
		jge    jump_99a62
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_99980
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_99985
	jump_99980:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_99985:
		cmp    $0x9d,%eax
		jl     jump_99a62
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_999a6
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_999ab
	jump_999a6:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_999ab:
		cmp    $0x129,%eax
		jge    jump_99a62
		xor    %cl,%cl
		mov    %cl,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		mov    EXPORT_SYMBOL(display_box_content),%ch
		test   %ch,%ch
		sete   %al
		mov    %al,EXPORT_SYMBOL(display_box_content)
		test   %al,%al
		jne    jump_999fc
		mov    data_155162,%ecx
		mov    $0x1,%eax
		sar    $0x18,%ecx
		shl    %cl,%eax
		cmp    $0x1000,%eax
		jge    jump_999fc
		mov    selected_mod,%al
		add    $0x20,%al
		and    $0xff,%eax
		call   ac_init_weapon_anim
		jmp    jump_99a62
	jump_999fc:
		mov    data_155162,%eax
		sar    $0x18,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(cybmod_text_index)(,%eax,2),%dx
		mov    weapon_text,%eax
		add    %edx,%eax
		mov    -0xc(%ebp),%edx
		movw   $0xfffb,0x3a(%edx)
		mov    %eax,0x18(%edx)
		mov    %edx,%eax
		mov    0x3c(%edx),%dl
		movw   $0x0,0x38(%eax)
		or     $0x80,%dl
		movw   $0x0,0x16(%eax)
		mov    %dl,0x3c(%eax)
		mov    EXPORT_SYMBOL(small_font),%eax
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    $0x41,%eax
		call   ac_font_height
		mov    EXPORT_SYMBOL(byte_197160),%ah
		mov    -0xc(%ebp),%edx
		add    %ah,%al
		mov    %al,0x40(%edx)
		mov    0x1c(%edx),%eax
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
	jump_99a62:
		mov    $equip_offer_buy_button,%eax
		call   *EXPORT_SYMBOL(equip_offer_buy_button)+0x10
		mov    $cryo_offer_cancel_button,%eax
		call   *EXPORT_SYMBOL(cryo_offer_cancel_button)+0x10
		mov    $equip_cost_box,%eax
		call   *EXPORT_SYMBOL(equip_cost_box)+0x18
		mov    data_155162,%eax
		sar    $0x18,%eax
		cmp    $0xffffffff,%eax
		jne    jump_99aba
		mov    $0x9,%edi
		mov    EXPORT_SYMBOL(equip_offer_buy_button)+0x24,%dh
		mov    EXPORT_SYMBOL(cryo_offer_cancel_button)+0x24,%bl
		mov    %di,EXPORT_SYMBOL(equip_cost_box)+0x24
		or     $0x1,%dh
		or     $0x1,%bl
		mov    %dh,EXPORT_SYMBOL(equip_offer_buy_button)+0x24
		mov    %bl,EXPORT_SYMBOL(cryo_offer_cancel_button)+0x24
	jump_99aba:
		xor    %al,%al
		mov    %ebp,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_show_brief_netscan_box)	/* 0x099AC8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x10,%esp
		mov    %eax,(%esp)
		mov    EXPORT_SYMBOL(open_brief)-2,%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_99b2d
		mov    (%esp),%eax
		mov    (%esp),%edi
		xor    %ecx,%ecx
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    0x6(%eax),%cx
		mov    0x4(%eax),%bx
		mov    0x2(%eax),%dx
		xor    %eax,%eax
		push   $0x0
		mov    (%edi),%ax
		call   ac_draw_box_purple_list
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(purple_draw_index),%ax
		lea    -0x1(%eax),%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    purple_draw_list,%edx
		movb   $0x8,0x17(%edx,%eax,2)
		jmp    jump_99e83
	jump_99b2d:
		mov    (%esp),%eax
		xor    %ecx,%ecx
		mov    0x10(%eax),%cx
		mov    0x4(%eax),%ax
		xor    %ebx,%ebx
		sub    $0x14,%eax
		mov    %ax,%bx
		mov    (%esp),%eax
		mov    (%esp),%edx
		mov    0x2(%eax),%ax
		mov    0x12(%edx),%si
		add    $0x4,%eax
		xor    %edx,%edx
		add    %esi,%eax
		mov    %ax,%dx
		mov    (%esp),%eax
		mov    (%eax),%ax
		add    $0x4,%eax
		and    $0xffff,%eax
		call   ac_my_set_text_window
		mov    small_med_font,%eax
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    $0x41,%eax
		call   ac_font_height
		xor    %ah,%ah
		mov    (%esp),%esi
		mov    %ax,0x8(%esp)
		mov    0x38(%esi),%si
		add    $0x4,%eax
		imul   %eax,%esi
		mov    $0x4,%edx
		sub    %esi,%edx
		xor    %edi,%edi
		mov    %edx,%esi
		movb   $0x57,EXPORT_SYMBOL(lbDisplay)+113 # lbDisplay.DrawColour
		xor    %edx,%edx
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(selected_city_id)-3,%edx
		sar    $0x18,%edx
		cmp    $0xffffffff,%edx
		je     jump_99e78
		xor    %ebx,%ebx
		mov    %eax,0xc(%esp)
		jmp    jump_99bec
	jump_99bd0:
		mov    0x2(%esp),%eax
		sar    $0x10,%eax
		imul   $0x14,%eax,%eax
		mov    data_1c5a93(%eax),%al
		mov    0x4(%esp),%ebx
		and    $0xff,%eax
		inc    %ebx
		add    %eax,%edi
	jump_99bec:
		mov    %bx,0x4(%esp)
		mov    EXPORT_SYMBOL(selected_city_id)-3,%eax
		sar    $0x18,%eax
		imul   $0x28,%eax,%eax
		mov    data_1c52c0(%eax),%edx
		mov    0x2(%esp),%eax
		sar    $0x18,%edx
		sar    $0x10,%eax
		cmp    %edx,%eax
		jge    jump_99e46
		imul   $0x14,%eax,%eax
		mov    data_1c5a93(%eax),%al
		and    $0xff,%eax
		mov    (%esp),%ebx
		lea    (%edi,%eax,1),%edx
		xor    %eax,%eax
		mov    0x38(%ebx),%ax
		cmp    %eax,%edx
		jl     jump_99bd0
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		je     jump_99dbc
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_99c55
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_99c5a
	jump_99c55:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_99c5a:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_x1),%dx
		cmp    %edx,%eax
		jl     jump_99dbc
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_99c81
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_99c86
	jump_99c81:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_99c86:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_x2),%dx
		cmp    %edx,%eax
		jg     jump_99dbc
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_99cad
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_99cb2
	jump_99cad:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_99cb2:
		xor    %edx,%edx
		movswl %si,%ebx
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		add    %ebx,%edx
		lea    -0x1(%edx),%ebx
		cmp    %ebx,%eax
		jl     jump_99dbc
		mov    0x2(%esp),%eax
		sar    $0x10,%eax
		imul   $0x14,%eax,%eax
		xor    %ebx,%ebx
		mov    data_1c5a93(%eax),%bl
		mov    0x6(%esp),%eax
		sar    $0x10,%eax
		add    $0x4,%eax
		imul   %ebx,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay)+100,%dx # lbDisplay.ScreenMode
		lea    -0x3(%eax),%ebx
		cmp    $0x1,%edx
		jne    jump_99d06
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_99d0b
	jump_99d06:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_99d0b:
		cmp    %ebx,%eax
		jg     jump_99dbc
		mov    0x4(%esp),%al
		mov    %al,EXPORT_SYMBOL(selected_netscan_objective)
		xor    %eax,%eax
	jump_99d1e:
		add    $0xc,%eax
		xor    %bl,%bl
		mov    %bl,ingame__Scanner__BigBlip_0__Period-0x0c(%eax)
		cmp    $0xc0,%eax
		jne    jump_99d1e
		xor    %edx,%edx
		xor    %eax,%eax
		jmp    jump_99d40
	jump_99d36:
		inc    %edx
		cmp    $0x5,%edx
		jge    jump_99dbc
	jump_99d40:
		mov    0x2(%esp),%ebx
		sar    $0x10,%ebx
		imul   $0x14,%ebx,%ebx
		add    %edx,%ebx
		xor    %ecx,%ecx
		mov    data_1c5a99(%ebx),%cl
		test   %ecx,%ecx
		jne    jump_99d66
		mov    data_1c5a94(%ebx),%bl
		and    $0xff,%ebx
		je     jump_99d36
	jump_99d66:
		mov    $0x20,%bh
		mov    %bh,ingame__Scanner__BigBlip_0__Period(%eax)
		mov    %bh,ingame__Scanner__BigBlip_0__Counter(%eax)
		movb   $0x57,ingame__Scanner__BigBlip_0__Colour(%eax)
		mov    0x2(%esp),%ebx
		sar    $0x10,%ebx
		imul   $0x14,%ebx,%ebx
		movb   $0x4,ingame__Scanner__BigBlip_0__Speed(%eax)
		xor    %ecx,%ecx
		mov    data_1c5a94(%edx,%ebx,1),%cl
		shl    $0xf,%ecx
		mov    data_1c5a99(%edx,%ebx,1),%bl
		mov    %ecx,ingame__Scanner__BigBlip_0__X(%eax)
		and    $0xff,%ebx
		add    $0xc,%eax
		shl    $0xf,%ebx
		mov    %ebx,ingame__Scanner__BigBlip_0__Z-0x0c(%eax)
		jmp    jump_99d36
	jump_99dbc:
		mov    EXPORT_SYMBOL(selected_netscan_objective)-3,%edx
		mov    0x2(%esp),%eax
		sar    $0x18,%edx
		sar    $0x10,%eax
		cmp    %eax,%edx
		jne    jump_99de1
		mov    EXPORT_SYMBOL(lbDisplay)+96,%cx # lbDisplay__DrawFlags
		or     $0x40,%cl
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
	jump_99de1:
		mov    0x2(%esp),%ebp
		sar    $0x10,%ebp
		imul   $0x14,%ebp,%ebp
		mov    netscan_text,%eax
		xor    %ebx,%ebx
		movswl %si,%edx
		mov    data_1c5a8e(%ebp),%bx
		xor    %ecx,%ecx
		add    %eax,%ebx
		xor    %eax,%eax
		call   ac_draw_text_purple_list2
		xor    %eax,%eax
		mov    %ax,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    0xc(%esp),%edx
		mov    data_1c5a93(%ebp),%al
		imul   %edx,%eax
		add    %eax,%esi
		mov    0x6(%esp),%eax
		movswl %si,%edx
		sar    $0x10,%eax
		lea    (%edx,%eax,1),%ebx
		xor    %edx,%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(text_window_y2),%dx
		mov    EXPORT_SYMBOL(text_window_y1),%ax
		sub    %eax,%edx
		cmp    %edx,%ebx
		jl     jump_99bd0
	jump_99e46:
		mov    EXPORT_SYMBOL(selected_city_id)-3,%edx
		sar    $0x18,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    data_1c52c0(,%eax,8),%edx
		xor    %eax,%eax
		sar    $0x18,%edx
		mov    EXPORT_SYMBOL(netscan_objectives_count),%al
		cmp    %eax,%edx
		jge    jump_99e78
		mov    $brief_NETSCAN_button,%eax
		call   *EXPORT_SYMBOL(brief_NETSCAN_button)+0x10
	jump_99e78:
		mov    $brief_NETSCAN_COST_box,%eax
		call   *EXPORT_SYMBOL(brief_NETSCAN_COST_box)+0x18
	jump_99e83:
		xor    %al,%al
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_show_netgame_unkn_case1)	/* 0x09BA5C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		cmpb   $0x0,data_1c4995
		jne    jump_9bb68
		mov    $0xd15c,%edx
		mov    $0x1,%ecx
		mov    $login_name,%esi
		mov    $data_1811e2,%edi
		xor    %ebx,%ebx
		mov    %dx,data_1811ac
		mov    %bx,data_1811b2
		mov    %cx,EXPORT_SYMBOL(word_1811AE)
		push   %edi
	jump_9ba9a:
		mov    (%esi),%al
		mov    %al,(%edi)
		cmp    $0x0,%al
		je     jump_9bab2
		mov    0x1(%esi),%al
		add    $0x2,%esi
		mov    %al,0x1(%edi)
		add    $0x2,%edi
		cmp    $0x0,%al
		jne    jump_9ba9a
	jump_9bab2:
		pop    %edi
		mov    $0x1108,%ebx
		xor    %dl,%dl
		mov    $unkstruct04_arr,%eax
		mov    %dl,data_1811ea
		xor    %edx,%edx
		call   ac_memset
		xor    %dh,%dh
		xor    %eax,%eax
		mov    %dh,EXPORT_SYMBOL(byte_1C6D48)
	jump_9bad6:
		add    $0x10,%eax
		xor    %bl,%bl
		mov    %bl,data_1c499c(%eax)
		cmp    $0x80,%eax
		jne    jump_9bad6
		mov    $EXPORT_SYMBOL(nsvc),%eax
		mov    %bl,EXPORT_SYMBOL(byte_1C4A7C)
		call   ac_LbNetworkServiceStart
		cmp    $0x1,%eax
		jne    jump_9bb04
		movb   $0x1,EXPORT_SYMBOL(byte_1C4A7C)
	jump_9bb04:
		cmpb   $0x0,EXPORT_SYMBOL(byte_1C4A7C)
		jne    jump_9bb61
		mov    EXPORT_SYMBOL(gui_strings)+0x8E0,%edx
		push   %edx
		mov    $0x2,%esi
		push   $EXPORT_SYMBOL(alert_text)
		mov    $asc19200,%ebx
		mov    $ASM_do_serial_speed_switch,%ecx
		call   ac_sprintf
		mov    $0x1,%al
		add    $0x8,%esp
		mov    %si,EXPORT_SYMBOL(word_1811AE)
		mov    %al,show_alert
		mov    EXPORT_SYMBOL(gui_strings)+0x7CC,%eax
		mov    %ebx,EXPORT_SYMBOL(net_protocol_option_button)+0x8
		mov    %eax,EXPORT_SYMBOL(net_protocol_select_button)+0x08
		mov    $0x1,%ah
		mov    %ecx,EXPORT_SYMBOL(net_protocol_option_button)+0x18
		mov    %ah,data_1c4995
		jmp    jump_9bbde
	jump_9bb61:
		movb   $0x1,data_1c4995
	jump_9bb68:
		mov    $net_protocol_box,%eax
		call   *EXPORT_SYMBOL(net_protocol_box)+0x0C
		mov    $net_groups_box,%eax
		call   *EXPORT_SYMBOL(net_groups_box)+0x0C
		mov    $net_users_box,%eax
		call   *EXPORT_SYMBOL(net_users_box)+0x0C
		mov    $net_faction_box,%eax
		call   *EXPORT_SYMBOL(net_faction_box)+0x0C
		mov    $net_team_box,%eax
		call   *EXPORT_SYMBOL(net_team_box)+0x0C
		mov    $net_benefits_box,%eax
		call   *EXPORT_SYMBOL(net_benefits_box)+0x0C
		mov    $net_comms_box,%eax
		call   *EXPORT_SYMBOL(net_comms_box)+0x0C
		mov    $net_grpaint,%eax
		call   *EXPORT_SYMBOL(net_grpaint)+0x0C
		xor    %eax,%eax
		mov    login_control__State,%al
		cmp    $0x6,%eax
		jne    jump_9bbde
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(word_1811AE),%ax
		cmp    $0x1,%eax
		jne    jump_9bbde
		call   net_unkn_func_30
	jump_9bbde:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_show_controls_joystick_box)	/* 0x09BBE4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x58,%esp
		mov    %eax,0x4c(%esp)
		mov    small_med_font,%eax
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    0x4c(%esp),%eax
		mov    0x6(%eax),%ax
		xor    %ecx,%ecx
		sub    $0x8,%eax
		mov    %ax,%cx
		mov    0x4c(%esp),%eax
		mov    0x4(%eax),%ax
		xor    %ebx,%ebx
		sub    $0x8,%eax
		mov    %ax,%bx
		mov    0x4c(%esp),%eax
		mov    0x2(%eax),%ax
		xor    %edx,%edx
		add    $0x4,%eax
		mov    %ax,%dx
		mov    0x4c(%esp),%eax
		mov    (%eax),%ax
		add    $0x4,%eax
		and    $0xffff,%eax
		call   ac_my_set_text_window
		mov    $0x41,%eax
		call   ac_font_height
		mov    %al,0x50(%esp)
		mov    %al,0x54(%esp)
		mov    0x4c(%esp),%eax
		testb  $0x80,0xb(%eax)
		jne    jump_9bdbe
		mov    med_font,%eax
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    EXPORT_SYMBOL(lbDisplay)+96,%dx # lbDisplay__DrawFlags
		or     $0x1,%dh
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    $0x6e,%edx
		mov    EXPORT_SYMBOL(gui_strings)+0x7A4,%ebx
		xor    %ecx,%ecx
		xor    %eax,%eax
		call   ac_draw_text_purple_list2
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		and    $0xfe,%bh
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    $0x6,%edx
		movzbl 0x50(%esp),%ebp
		mov    small_med_font,%eax
		mov    EXPORT_SYMBOL(gui_strings)+0x72C,%ebx
		xor    %ecx,%ecx
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    %edx,0x48(%esp)
		mov    $0xa,%edx
		mov    $0x6,%eax
		add    $0x12,%ebp
		call   ac_draw_text_purple_list2
		xor    %eax,%eax
	jump_9bcd7:
		inc    %eax
		push   %eax
		mov    EXPORT_SYMBOL(gui_strings)+0x730,%ecx
		push   %ecx
		push   $ascSD_7
		mov    %eax,0x44(%esp)
		lea    0xc(%esp),%eax
		push   %eax
		mov    %ebp,%edx
		call   ac_sprintf
		mov    back_buffer,%edi
		mov    text_buf_pos,%esi
		add    $0x10,%esp
		add    %esi,%edi
		mov    %esp,%esi
		xor    %ecx,%ecx
		push   %edi
	jump_9bd0b:
		mov    (%esi),%al
		mov    %al,(%edi)
		cmp    $0x0,%al
		je     jump_9bd23
		mov    0x1(%esi),%al
		add    $0x2,%esi
		mov    %al,0x1(%edi)
		add    $0x2,%edi
		cmp    $0x0,%al
		jne    jump_9bd0b
	jump_9bd23:
		pop    %edi
		mov    back_buffer,%ebx
		mov    text_buf_pos,%edi
		mov    $0x6,%eax
		add    %edi,%ebx
		mov    %esp,%edi
		call   ac_draw_text_purple_list2
		sub    %ecx,%ecx
		dec    %ecx
		xor    %eax,%eax
		repnz scas %es:(%edi),%al
		not    %ecx
		dec    %ecx
		mov    text_buf_pos,%eax
		inc    %ecx
		add    %ecx,%eax
		mov    %eax,text_buf_pos
		xor    %eax,%eax
		mov    0x54(%esp),%al
		add    $0x4,%eax
		add    %eax,%ebp
		mov    0x38(%esp),%eax
		cmp    $0x4,%eax
		jl     jump_9bcd7
		mov    0x4c(%esp),%eax
		mov    0x4c(%esp),%esi
		xor    %ecx,%ecx
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    0x6(%eax),%cx
		mov    0x4(%eax),%bx
		mov    0x2(%eax),%dx
		sub    $0x8,%ecx
		xor    %eax,%eax
		sub    $0x8,%ebx
		mov    (%esi),%ax
		add    $0x4,%edx
		add    $0x4,%eax
		call   ac_copy_box_purple_list
		mov    0xb(%esi),%dh
		mov    small_med_font,%eax
		or     $0x80,%dh
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    $0x41,%eax
		mov    %dh,0xb(%esi)
		call   ac_font_height
		mov    %al,0x54(%esp)
	jump_9bdbe:
		mov    EXPORT_SYMBOL(lbDisplay)+96,%cx # lbDisplay__DrawFlags
		or     $0x80,%ch
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(ctl_joystick_type),%al
		cmp    $0x11,%eax
		jne    jump_9be71
		mov    %esp,%eax
		call   ac_joy_func_063
		cmp    $0xffffffff,%eax
		je     jump_9beb1
		mov    back_buffer,%edi
		mov    text_buf_pos,%ebx
		mov    %esp,%esi
		add    %ebx,%edi
		xor    %edx,%edx
		push   %edi
	jump_9be02:
		mov    (%esi),%al
		mov    %al,(%edi)
		cmp    $0x0,%al
		je     jump_9be1a
		mov    0x1(%esi),%al
		add    $0x2,%esi
		mov    %al,0x1(%edi)
		add    $0x2,%edi
		cmp    $0x0,%al
		jne    jump_9be02
	jump_9be1a:
		pop    %edi
		mov    %esp,%eax
		mov    0x4c(%esp),%ebx
		call   ac_my_string_width
		mov    text_buf_pos,%ecx
		mov    0x4(%ebx),%dx
		mov    %eax,0x44(%esp)
		sub    %eax,%edx
		mov    back_buffer,%ebx
		sar    %edx
		add    %ecx,%ebx
		mov    %edx,0x48(%esp)
		xor    %ecx,%ecx
		mov    $0x7e,%edx
		mov    0x48(%esp),%eax
		mov    %esp,%edi
		call   ac_draw_text_purple_list2
		sub    %ecx,%ecx
		dec    %ecx
		xor    %eax,%eax
		repnz scas %es:(%edi),%al
		not    %ecx
		dec    %ecx
		mov    text_buf_pos,%esi
		inc    %ecx
		add    %ecx,%esi
		mov    %esi,text_buf_pos
		jmp    jump_9beb1
	jump_9be71:
		mov    EXPORT_SYMBOL(gui_strings)+0x86C(,%eax,4),%eax
		mov    0x4c(%esp),%ebx
		call   ac_my_string_width
		xor    %edx,%edx
		xor    %ecx,%ecx
		mov    0x4(%ebx),%dx
		mov    %eax,0x44(%esp)
		sub    %eax,%edx
		xor    %eax,%eax
		sar    %edx
		mov    EXPORT_SYMBOL(ctl_joystick_type),%al
		mov    %edx,0x48(%esp)
		mov    $0x7e,%edx
		mov    EXPORT_SYMBOL(gui_strings)+0x86C(,%eax,4),%ebx
		mov    0x48(%esp),%eax
		call   ac_draw_text_purple_list2
	jump_9beb1:
		andw   $0x7fff,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_9bed0
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_9bed5
	jump_9bed0:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_9bed5:
		xor    %edx,%edx
		mov    0x48(%esp),%edi
		mov    EXPORT_SYMBOL(text_window_x1),%dx
		add    %edi,%edx
		cmp    %edx,%eax
		jl     jump_9c01d
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_9bf02
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_9bf07
	jump_9bf02:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_9bf07:
		xor    %edx,%edx
		mov    0x48(%esp),%ebp
		mov    EXPORT_SYMBOL(text_window_x1),%dx
		mov    0x44(%esp),%ebx
		add    %ebp,%edx
		add    %ebx,%edx
		cmp    %edx,%eax
		jge    jump_9c01d
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_9bf3a
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_9bf3f
	jump_9bf3a:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_9bf3f:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		add    $0x7e,%edx
		cmp    %edx,%eax
		jl     jump_9c01d
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_9bf69
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_9bf6e
	jump_9bf69:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_9bf6e:
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		mov    0x54(%esp),%bl
		add    $0x7e,%edx
		add    %ebx,%edx
		cmp    %edx,%eax
		jge    jump_9c01d
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		je     jump_9c01d
		cmpb   $0x0,EXPORT_SYMBOL(ctl_joystick_type)
		je     jump_9bfaa
		mov    $joy_Yaw,%eax
		call   ac_joy_func_066
	jump_9bfaa:
		xor    %cl,%cl
		mov    %cl,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		mov    $0xff,%al
		mov    $joy_Yaw,%esi
		mov    EXPORT_SYMBOL(ctl_joystick_type),%cl
		mov    $0x1,%ebx
	jump_9bfc4:
		mov    EXPORT_SYMBOL(ctl_joystick_type),%ch
		xor    %edx,%edx
		inc    %ch
		mov    %ch,%dl
		mov    %ch,EXPORT_SYMBOL(ctl_joystick_type)
		cmp    $0x18,%edx
		jle    jump_9bfe1
		mov    %bl,EXPORT_SYMBOL(ctl_joystick_type)
	jump_9bfe1:
		cmp    EXPORT_SYMBOL(ctl_joystick_type),%cl
		jne    jump_9bff3
		xor    %dl,%dl
		mov    %bl,%al
		mov    %dl,EXPORT_SYMBOL(ctl_joystick_type)
	jump_9bff3:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(ctl_joystick_type),%dl
		cmpb   $0x0,unkn01_maskarr(%edx)
		je     jump_9c00b
		mov    %esi,%eax
		call   ac_joy_func_067
	jump_9c00b:
		xor    %edx,%edx
		mov    %cl,%dl
		test   %edx,%edx
		jne    jump_9c015
		mov    %bl,%cl
	jump_9c015:
		movsbl %al,%edx
		cmp    $0x1,%edx
		jne    jump_9bfc4
	jump_9c01d:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		mov    $0x8c,%ecx
		sub    %edx,%eax
		mov    $0xa,%ebp
		mov    %ecx,0x40(%esp)
		mov    data_1a63ae(%eax),%al
		and    $0xff,%eax
		inc    %eax
		push   %eax
		push   $ascD_48
		lea    0x8(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
		orw    $0x8000,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    back_buffer,%edi
		mov    text_buf_pos,%esi
		mov    %ebp,%edx
		add    %esi,%edi
		mov    %esp,%esi
		xor    %ecx,%ecx
		push   %edi
	jump_9c087:
		mov    (%esi),%al
		mov    %al,(%edi)
		cmp    $0x0,%al
		je     jump_9c09f
		mov    0x1(%esi),%al
		add    $0x2,%esi
		mov    %al,0x1(%edi)
		add    $0x2,%edi
		cmp    $0x0,%al
		jne    jump_9c087
	jump_9c09f:
		pop    %edi
		mov    back_buffer,%ebx
		mov    text_buf_pos,%edi
		mov    $0x8c,%eax
		add    %edi,%ebx
		mov    %esp,%edi
		call   ac_draw_text_purple_list2
		sub    %ecx,%ecx
		dec    %ecx
		xor    %eax,%eax
		repnz scas %es:(%edi),%al
		not    %ecx
		dec    %ecx
		mov    text_buf_pos,%eax
		inc    %ecx
		add    %ecx,%eax
		mov    %eax,text_buf_pos
		mov    EXPORT_SYMBOL(lbDisplay)+96,%ax # lbDisplay__DrawFlags
		and    $0x7f,%ah
		mov    %ax,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_9c0f6
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_9c0fb
	jump_9c0f6:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_9c0fb:
		xor    %edx,%edx
		mov    0x40(%esp),%ebx
		mov    EXPORT_SYMBOL(text_window_x1),%dx
		add    %ebx,%edx
		cmp    %edx,%eax
		jl     jump_9c29f
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_9c129
		mov    EXPORT_SYMBOL(lbDisplay)+72,%edx # lbDisplay.MouseX
		add    %edx,%edx
		jmp    jump_9c12f
	jump_9c129:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%edx # lbDisplay.MouseX
	jump_9c12f:
		xor    %eax,%eax
		mov    0x40(%esp),%ebx
		mov    EXPORT_SYMBOL(text_window_x1),%ax
		add    %eax,%ebx
		mov    %esp,%eax
		call   ac_LbTextStringWidth
		add    %ebx,%eax
		cmp    %eax,%edx
		jge    jump_9c29f
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_9c164
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_9c169
	jump_9c164:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_9c169:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		add    %ebp,%edx
		cmp    %edx,%eax
		jl     jump_9c29f
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_9c192
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_9c197
	jump_9c192:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_9c197:
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		mov    0x54(%esp),%bl
		add    %ebp,%edx
		add    %ebx,%edx
		cmp    %edx,%eax
		jge    jump_9c29f
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		je     jump_9c29f
		xor    %ah,%ah
		mov    %ah,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		xor    %eax,%eax
		mov    login_control__State,%al
		cmp    $0x5,%eax
		jne    jump_9c1e0
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(word_1811AE),%ax
		cmp    $0x1,%eax
		jne    jump_9c21c
	jump_9c1e0:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		incb   data_1a63ae(%eax)
		xor    %edx,%edx
		mov    data_1a63ae(%eax),%dl
		cmp    $0x3,%edx
		jle    jump_9c243
		xor    %dh,%dh
		mov    %dh,data_1a63ae(%eax)
		jmp    jump_9c243
	jump_9c21c:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		xor    %bl,%bl
		mov    %bl,data_1a63ae(%eax)
	jump_9c243:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		xor    %edx,%edx
		mov    data_1a63ae(%eax),%dl
		inc    %edx
		cmp    $0x4,%edx
		jge    jump_9c29f
		mov    %edx,%eax
		shl    $0x4,%eax
		add    %edx,%eax
		mov    $0x1,%ecx
		add    %eax,%eax
	jump_9c27e:
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(local_player_no),%bl
		imul   $0x1aa,%ebx,%ebx
		add    $0x22,%eax
		inc    %edx
		mov    %cx,gameturn(%ebx,%eax,1)
		cmp    $0x88,%eax
		jl     jump_9c27e
	jump_9c29f:
		xor    %eax,%eax
		mov    0x54(%esp),%al
		add    $0x8,%eax
		add    %eax,%ebp
		orw    $0x8000,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %ecx,%ecx
		mov    %ecx,0x34(%esp)
		mov    %ecx,0x3c(%esp)
		jmp    jump_9c4dc
	jump_9c2c2:
		mov    %edx,%edi
		xor    %eax,%eax
		xor    %ecx,%ecx
	jump_9c2c8:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		imul   $0x1aa,%edx,%edx
		mov    EXPORT_SYMBOL(players)+0x01e(%edx,%edi,1),%dx # players[0].UserInput[0].ControlMode
		and    $0xffff,%edx
		dec    %edx
		cmp    %edx,%ecx
		jge    jump_9c2f6
		cmpb   $0x0,joy_Init(%eax)
		je     jump_9c2f3
		inc    %ecx
	jump_9c2f3:
		inc    %eax
		jmp    jump_9c2c8
	jump_9c2f6:
		push   %eax
		mov    EXPORT_SYMBOL(gui_strings)+0x73C,%eax
		push   %eax
		push   $ascSD_8
		lea    0xc(%esp),%eax
		push   %eax
		call   ac_sprintf
		mov    back_buffer,%edi
		mov    text_buf_pos,%edx
		add    $0x10,%esp
		mov    %esp,%esi
		add    %edx,%edi
		push   %edi
	jump_9c320:
		mov    (%esi),%al
		mov    %al,(%edi)
		cmp    $0x0,%al
		je     jump_9c338
		mov    0x1(%esi),%al
		add    $0x2,%esi
		mov    %al,0x1(%edi)
		add    $0x2,%edi
		cmp    $0x0,%al
		jne    jump_9c320
	jump_9c338:
		pop    %edi
		mov    $0x64,%eax
		mov    back_buffer,%ebx
		mov    text_buf_pos,%ecx
		mov    %ebp,%edx
		add    %ecx,%ebx
		xor    %ecx,%ecx
		mov    %esp,%edi
		call   ac_draw_text_purple_list2
		sub    %ecx,%ecx
		dec    %ecx
		xor    %eax,%eax
		repnz scas %es:(%edi),%al
		not    %ecx
		dec    %ecx
		mov    text_buf_pos,%esi
		inc    %ecx
		add    %ecx,%esi
		mov    %esi,text_buf_pos
	jump_9c370:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_9c386
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_9c38b
	jump_9c386:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_9c38b:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_x1),%dx
		add    $0x64,%edx
		cmp    %edx,%eax
		jl     jump_9c4bd
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_9c3b6
		mov    EXPORT_SYMBOL(lbDisplay)+72,%edx # lbDisplay.MouseX
		add    %edx,%edx
		jmp    jump_9c3bc
	jump_9c3b6:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%edx # lbDisplay.MouseX
	jump_9c3bc:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(text_window_x1),%ax
		lea    0x64(%eax),%ebx
		mov    %esp,%eax
		call   ac_LbTextStringWidth
		add    %ebx,%eax
		cmp    %eax,%edx
		jge    jump_9c4bd
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_9c3ee
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_9c3f3
	jump_9c3ee:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_9c3f3:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		add    %ebp,%edx
		cmp    %edx,%eax
		jl     jump_9c4bd
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_9c41c
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_9c421
	jump_9c41c:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_9c421:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		lea    (%edx,%ebp,1),%ebx
		xor    %edx,%edx
		mov    0x54(%esp),%dl
		add    %ebx,%edx
		cmp    %edx,%eax
		jge    jump_9c4bd
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		je     jump_9c4bd
		xor    %ch,%ch
		mov    %ch,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(local_player_no),%al
		imul   $0x1aa,%eax,%eax
		add    0x3c(%esp),%eax
		mov    EXPORT_SYMBOL(players)+0x01e(%eax),%di # players[0].UserInput[0].ControlMode
		inc    %edi
		mov    EXPORT_SYMBOL(ctl_joystick_type),%dl
		mov    %di,EXPORT_SYMBOL(players)+0x01e(%eax) # players[0].UserInput[0].ControlMode
		test   %dl,%dl
		jne    jump_9c48f
		xor    %edx,%edx
		mov    %di,%dx
		cmp    $0x2,%edx
		jne    jump_9c48f
		xor    %edi,%edx
		mov    %dx,EXPORT_SYMBOL(players)+0x01e(%eax) # players[0].UserInput[0].ControlMode
	jump_9c48f:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(local_player_no),%al
		imul   $0x1aa,%eax,%eax
		add    0x3c(%esp),%eax
		xor    %ebx,%ebx
		mov    joy_NumberOfDevices,%edx
		mov    EXPORT_SYMBOL(players)+0x01e(%eax),%bx # players[0].UserInput[0].ControlMode
		inc    %edx
		cmp    %edx,%ebx
		jle    jump_9c4bd
		xor    %ebx,%ebx
		mov    %bx,EXPORT_SYMBOL(players)+0x01e(%eax) # players[0].UserInput[0].ControlMode
	jump_9c4bd:
		mov    0x3c(%esp),%ebx
		xor    %eax,%eax
		mov    0x34(%esp),%ecx
		mov    0x54(%esp),%al
		add    $0x22,%ebx
		inc    %ecx
		add    $0x4,%eax
		mov    %ebx,0x3c(%esp)
		mov    %ecx,0x34(%esp)
		add    %eax,%ebp
	jump_9c4dc:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(local_player_no),%al
		imul   $0x1aa,%eax,%eax
		xor    %edx,%edx
		mov    data_1a63ae(%eax),%dl
		mov    0x34(%esp),%edi
		inc    %edx
		cmp    %edi,%edx
		jle    jump_9c596
		mov    0x3c(%esp),%edx
		add    %edx,%eax
		mov    EXPORT_SYMBOL(players)+0x01e(%eax),%ax # players[0].UserInput[0].ControlMode
		and    $0xffff,%eax
		cmp    $0x2,%eax
		jge    jump_9c2c2
		mov    EXPORT_SYMBOL(gui_strings)+0x734(,%eax,4),%ebx
		push   %ebx
		lea    0x4(%esp),%eax
		push   %eax
		lea    0x8(%esp),%esi
		call   ac_sprintf
		mov    back_buffer,%edi
		mov    text_buf_pos,%ecx
		add    $0x8,%esp
		add    %ecx,%edi
		mov    %ebp,%edx
		push   %edi
	jump_9c543:
		mov    (%esi),%al
		mov    %al,(%edi)
		cmp    $0x0,%al
		je     jump_9c55b
		mov    0x1(%esi),%al
		add    $0x2,%esi
		mov    %al,0x1(%edi)
		add    $0x2,%edi
		cmp    $0x0,%al
		jne    jump_9c543
	jump_9c55b:
		pop    %edi
		mov    $0x64,%eax
		mov    back_buffer,%ebx
		mov    text_buf_pos,%esi
		xor    %ecx,%ecx
		add    %esi,%ebx
		mov    %esp,%edi
		call   ac_draw_text_purple_list2
		sub    %ecx,%ecx
		dec    %ecx
		xor    %eax,%eax
		repnz scas %es:(%edi),%al
		not    %ecx
		dec    %ecx
		mov    text_buf_pos,%edi
		inc    %ecx
		add    %ecx,%edi
		mov    %edi,text_buf_pos
		jmp    jump_9c370
	jump_9c596:
		mov    EXPORT_SYMBOL(lbDisplay)+96,%cx # lbDisplay__DrawFlags
		and    $0x7f,%ch
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    $controls_calibrate_button,%eax
		call   *EXPORT_SYMBOL(controls_calibrate_button)+0x10
		xor    %al,%al
		add    $0x58,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret

vtable_9c5c0:
		.long   func_9d2d3
		.long   func_9d310
		.long   func_9d34e
		.long   func_9d38f
		.long   func_9d3d3
		.long   func_9d413



/*----------------------------------------------------------------*/
func_9d2d3:
/*----------------------------------------------------------------*/
		xor    %edx,%edx
		mov    screentype,%dl
		cmp    $0xc,%edx
		je     jump_9d2f4
		xor    %cl,%cl
		mov    %cl,net_unkn_pos_02
		xor    %al,%al
		add    $0x68,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_9d2f4:
		cmpl   $0x0,joy_Buttons
		je     jump_9d2c7
		inc    %al
		mov    %al,net_unkn_pos_02
		xor    %al,%al
		add    $0x68,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_9d310:
/*----------------------------------------------------------------*/
		movb   $0x1,show_alert
		cmpl   $0x0,joy_Buttons
		jne    jump_9d2c7
		mov    EXPORT_SYMBOL(gui_strings)+0x8FC,%ecx
		push   %ecx
		push   $EXPORT_SYMBOL(alert_text)
		call   ac_sprintf
		mov    net_unkn_pos_02,%bh
		inc    %bh
		add    $0x8,%esp
		mov    %bh,net_unkn_pos_02
		xor    %al,%al
		add    $0x68,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_9d34e:
/*----------------------------------------------------------------*/
		xor    %edx,%edx
		mov    screentype,%dl
		cmp    $0xc,%edx
		je     jump_9d36f
		xor    %dh,%dh
		mov    %dh,net_unkn_pos_02
		xor    %al,%al
		add    $0x68,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_9d36f:
		cmpl   $0x0,joy_Buttons
		je     jump_9d2c7
		inc    %al
		mov    %al,net_unkn_pos_02
		xor    %al,%al
		add    $0x68,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_9d38f:
/*----------------------------------------------------------------*/
		mov    $0x1,%ah
		mov    joy_Buttons,%edi
		mov    %ah,show_alert
		test   %edi,%edi
		jne    jump_9d2c7
		mov    EXPORT_SYMBOL(gui_strings)+0x900,%ebp
		push   %ebp
		push   $EXPORT_SYMBOL(alert_text)
		call   ac_sprintf
		mov    net_unkn_pos_02,%dl
		inc    %dl
		add    $0x8,%esp
		mov    %dl,net_unkn_pos_02
		xor    %al,%al
		add    $0x68,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_9d3d3:
/*----------------------------------------------------------------*/
		xor    %edx,%edx
		mov    screentype,%dl
		cmp    $0xc,%edx
		je     jump_9d3f3
		xor    %bl,%al
		mov    %al,net_unkn_pos_02
		xor    %al,%al
		add    $0x68,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_9d3f3:
		cmpl   $0x0,joy_Buttons
		je     jump_9d2c7
		inc    %al
		mov    %al,net_unkn_pos_02
		xor    %al,%al
		add    $0x68,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_9d413:
/*----------------------------------------------------------------*/
		mov    $0x1,%bh
		mov    joy_Buttons,%ecx
		mov    %bh,show_alert
		test   %ecx,%ecx
		jne    jump_9d2c7
		xor    %cl,%cl
		mov    %cl,net_unkn_pos_02
		mov    %cl,show_alert
		xor    %al,%al
		add    $0x68,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_9d443:
		mov    %bl,%al
		mov    %bl,%ah
		dec    %ah
		cmp    $0x5,%ah
		ja     jump_9d2c7
		xor    %edx,%edx
		mov    %ah,%dl
		jmp    *%cs:vtable_9c5c0(,%edx,4)

	jump_9d2c7:
		xor    %al,%al
		add    $0x68,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_show_debrief_screen)	/* 0x09D584 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		cmpb   $0x0,game_projector_speed
		je     jump_9d598
		testb  $0x1,EXPORT_SYMBOL(heading_box)+0x3C
		jne    jump_9d5aa
	jump_9d598:
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+57
		je     jump_9d5eb
		cmpb   $0x0,edit_flag
		jne    jump_9d5eb
	jump_9d5aa:
		xor    %bh,%bh
		mov    %bh,EXPORT_SYMBOL(lbKeyOn)+57
		mov    EXPORT_SYMBOL(heading_box)+0x3C,%cl
		mov    EXPORT_SYMBOL(debrief_people_box)+0x0A,%al
		or     $0x2,%cl
		or     $0x2,%al
		mov    %cl,EXPORT_SYMBOL(heading_box)+0x3C
		mov    %al,EXPORT_SYMBOL(debrief_people_box)+0x0A
		mov    EXPORT_SYMBOL(debrief_mission_box)+0x0A,%ch
		mov    EXPORT_SYMBOL(world_city_info_box)+0x3C,%ah
		or     $0x2,%ch
		or     $0x2,%ah
		mov    %ch,EXPORT_SYMBOL(debrief_mission_box)+0x0A
		mov    %ah,EXPORT_SYMBOL(world_city_info_box)+0x3C
	jump_9d5eb:
		mov    $heading_box,%eax
		call   *EXPORT_SYMBOL(heading_box)+0x20
		test   %al,%al
		je     jump_9d623
		mov    $debrief_mission_box,%eax
		call   *EXPORT_SYMBOL(debrief_mission_box)+0x0C
		test   %al,%al
		je     jump_9d623
		mov    $debrief_people_box,%eax
		call   *EXPORT_SYMBOL(debrief_people_box)+0x0C
		test   %al,%al
		je     jump_9d623
		mov    $world_city_info_box,%eax
		call   *EXPORT_SYMBOL(world_city_info_box)+0x20
	jump_9d623:
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_show_mission_screen)	/* 0x09D628 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		cmpb   $0x0,game_projector_speed
		je     jump_9d63f
		testb  $0x1,EXPORT_SYMBOL(heading_box)+0x3C
		jne    jump_9d651
	jump_9d63f:
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+57
		je     jump_9d6b0
		cmpb   $0x0,edit_flag
		jne    jump_9d6b0
	jump_9d651:
		xor    %bh,%bh
		mov    %bh,EXPORT_SYMBOL(lbKeyOn)+57
		mov    EXPORT_SYMBOL(heading_box)+0x3C,%cl
		mov    EXPORT_SYMBOL(brief_graphical_box)+0x0A,%al
		mov    EXPORT_SYMBOL(brief_NETSCAN_button)+0x24,%dl
		or     $0x2,%cl
		or     $0x2,%al
		or     $0x2,%dl
		mov    %cl,EXPORT_SYMBOL(heading_box)+0x3C
		mov    %al,EXPORT_SYMBOL(brief_graphical_box)+0x0A
		mov    %dl,EXPORT_SYMBOL(brief_NETSCAN_button)+0x24
		mov    EXPORT_SYMBOL(brief_mission_text_box)+0x3C,%ch
		mov    EXPORT_SYMBOL(brief_netscan_box)+0x3C,%ah
		mov    EXPORT_SYMBOL(brief_NETSCAN_COST_box)+0x24,%dh
		or     $0x2,%ch
		or     $0x2,%ah
		or     $0x2,%dh
		mov    %ch,EXPORT_SYMBOL(brief_mission_text_box)+0x3C
		mov    %ah,EXPORT_SYMBOL(brief_netscan_box)+0x3C
		mov    %dh,EXPORT_SYMBOL(brief_NETSCAN_COST_box)+0x24
	jump_9d6b0:
		mov    $heading_box,%eax
		call   *EXPORT_SYMBOL(heading_box)+0x20
		test   %al,%al
		je     jump_9d79e
		mov    $brief_mission_text_box,%eax
		call   *EXPORT_SYMBOL(brief_mission_text_box)+0x20
		test   %al,%al
		je     jump_9d79e
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+33
		je     jump_9d784
		mov    EXPORT_SYMBOL(brief_mission_text_box)+2,%ax
		add    EXPORT_SYMBOL(brief_mission_text_box)+6,%ax
		mov    EXPORT_SYMBOL(brief_mission_text_box)+4,%si
		movswl %ax,%ecx
		mov    brief_mission_text_box,%ax
		add    %esi,%eax
		mov    brief_mission_text_box,%ebx
		movswl %ax,%edx
		mov    EXPORT_SYMBOL(brief_netscan_box)+0x42,%eax
		sar    $0x10,%ebx
		sar    $0x10,%eax
		call   ac_mouse_move_over_rect
		test   %al,%al
		je     jump_9d784
		xor    %bh,%bh
		mov    %bh,EXPORT_SYMBOL(lbKeyOn)+33
		testb  $0x10,EXPORT_SYMBOL(brief_mission_text_box)+0x3D
		jne    jump_9d784
		mov    EXPORT_SYMBOL(brief_mission_text_box)+0x1C,%eax
		mov    EXPORT_SYMBOL(small_font),%edx
		cmp    %edx,%eax
		jne    jump_9d74b
		mov    small_med_font,%eax
		mov    %eax,EXPORT_SYMBOL(brief_mission_text_box)+0x1C
		jmp    jump_9d765
	jump_9d74b:
		cmp    small_med_font,%eax
		jne    jump_9d75f
		mov    med_font,%eax
		mov    %eax,EXPORT_SYMBOL(brief_mission_text_box)+0x1C
		jmp    jump_9d765
	jump_9d75f:
		mov    %edx,EXPORT_SYMBOL(brief_mission_text_box)+0x1C
	jump_9d765:
		mov    EXPORT_SYMBOL(brief_mission_text_box)+0x3C,%ch
		xor    %edi,%edi
		xor    %al,%al
		or     $0x80,%ch
		mov    %di,EXPORT_SYMBOL(brief_mission_text_box)+0x16
		mov    %al,EXPORT_SYMBOL(brief_mission_text_box)+0x40
		mov    %ch,EXPORT_SYMBOL(brief_mission_text_box)+0x3C
	jump_9d784:
		mov    $brief_graphical_box,%eax
		call   *EXPORT_SYMBOL(brief_graphical_box)+0x0C
		test   %al,%al
		je     jump_9d79e
		mov    $brief_netscan_box,%eax
		call   *EXPORT_SYMBOL(brief_netscan_box)+0x20
	jump_9d79e:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_show_research_screen)	/* 0x09DEB8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		cmpb   $0x0,game_projector_speed
		je     jump_9decf
		testb  $0x1,EXPORT_SYMBOL(heading_box)+0x3C
		jne    jump_9dee1
	jump_9decf:
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+57
		je     jump_9df4f
		cmpb   $0x0,edit_flag
		jne    jump_9df4f
	jump_9dee1:
		xor    %bh,%bh
		mov    %bh,EXPORT_SYMBOL(lbKeyOn)+57
		mov    EXPORT_SYMBOL(heading_box)+0x3C,%cl
		mov    EXPORT_SYMBOL(research_progress_button)+0x3C,%al
		mov    EXPORT_SYMBOL(research_submit_button)+0x24,%dl
		mov    EXPORT_SYMBOL(research_list_buttons)+0x52,%bl
		or     $0x2,%cl
		or     $0x2,%al
		or     $0x2,%dl
		or     $0x2,%bl
		mov    %cl,EXPORT_SYMBOL(heading_box)+0x3C
		mov    %al,EXPORT_SYMBOL(research_progress_button)+0x3C
		mov    %dl,EXPORT_SYMBOL(research_submit_button)+0x24
		mov    %bl,EXPORT_SYMBOL(research_list_buttons)+0x52
		mov    EXPORT_SYMBOL(research_unkn21_box)+0x3C,%ch
		mov    EXPORT_SYMBOL(research_graph_box)+0x0A,%ah
		mov    EXPORT_SYMBOL(research_list_buttons)+0x24,%dh
		or     $0x2,%ch
		or     $0x2,%ah
		or     $0x2,%dh
		mov    %ch,EXPORT_SYMBOL(research_unkn21_box)+0x3C
		mov    %ah,EXPORT_SYMBOL(research_graph_box)+0x0A
		mov    %dh,EXPORT_SYMBOL(research_list_buttons)+0x24
	jump_9df4f:
		cmpw   $0x0,EXPORT_SYMBOL(research_unkn21_box)+0x16
		jne    jump_9dfb3
		cmpb   $0x0,EXPORT_SYMBOL(research_on_weapons)
		je     jump_9df86
		xor    %eax,%eax
		jmp    jump_9df6c
	jump_9df66:
		inc    %eax
		cmp    $0x20,%eax
		jge    jump_9dfac
	jump_9df6c:
		mov    $0x1,%edx
		mov    %al,%cl
		shl    %cl,%edx
		test   %edx,data_1c5288
		je     jump_9df66
		incw   EXPORT_SYMBOL(research_unkn21_box)+0x16
		jmp    jump_9df66
	jump_9df86:
		xor    %eax,%eax
		jmp    jump_9df90
	jump_9df8a:
		inc    %eax
		cmp    $0x20,%eax
		jge    jump_9dfac
	jump_9df90:
		mov    $0x1,%edx
		mov    %al,%cl
		mov    data_1c528c,%ebx
		shl    %cl,%edx
		test   %ebx,%edx
		je     jump_9df8a
		incw   EXPORT_SYMBOL(research_unkn21_box)+0x16
		jmp    jump_9df8a
	jump_9dfac:
		orb    $0x80,EXPORT_SYMBOL(research_unkn21_box)+0x3C
	jump_9dfb3:
		mov    $heading_box,%eax
		call   *EXPORT_SYMBOL(heading_box)+0x20
		test   %al,%al
		je     jump_9dfeb
		mov    $research_progress_button,%eax
		call   *EXPORT_SYMBOL(research_progress_button)+0x20
		test   %al,%al
		je     jump_9dfeb
		mov    $research_graph_box,%eax
		call   *EXPORT_SYMBOL(research_graph_box)+0x0C
		test   %al,%al
		je     jump_9dfeb
		mov    $research_unkn21_box,%eax
		call   *EXPORT_SYMBOL(research_unkn21_box)+0x20
	jump_9dfeb:
		testb  $0x4,EXPORT_SYMBOL(ingame)+0x99b # ingame.UserFlags
		je     jump_9e016
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+22
		je     jump_9e016
		xor    %ah,%ah
		mov    %ah,EXPORT_SYMBOL(lbKeyOn)+22
		xor    %eax,%eax
		call   ac_research_daily_progress_for_type
		mov    $0x1,%eax
		call   ac_research_daily_progress_for_type
	jump_9e016:
		testb  $0x4,EXPORT_SYMBOL(ingame)+0x99b # ingame.UserFlags
		je     jump_9e08f
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+11
		je     jump_9e08f
		xor    %bl,%bl
		mov    %bl,EXPORT_SYMBOL(lbKeyOn)+11
		xor    %eax,%eax
		mov    research_completed,%al
		cmp    $0xf,%eax
		jg     jump_9e05b
		mov    %al,%cl
		mov    $0x1,%eax
		mov    data_1c528c,%esi
		shl    %cl,%eax
		mov    $0x1,%bh
		or     %eax,%esi
		mov    %bh,refresh_equip_list
		mov    %esi,data_1c528c
	jump_9e05b:
		xor    %eax,%eax
		mov    research_completed,%al
		cmp    $0x1d,%eax
		jg     jump_9e08f
		movb   $0x1,refresh_equip_list
		mov    %al,%cl
		mov    $0x1,%eax
		mov    data_1c5288,%edi
		shl    %cl,%eax
		mov    %cl,%ch
		or     %eax,%edi
		inc    %ch
		mov    %edi,data_1c5288
		mov    %ch,research_completed
	jump_9e08f:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret

vtable_9fdd0:
		.long   func_a0032
		.long   func_a0291
		.long   func_a0291
		.long   func_a0291
		.long   func_a0214
		.long   func_a0197
		.long   func_a00ac
		.long   func_a011d

vtable_9fdf0:
		.long   func_a08b1
		.long   func_a07f1
		.long   func_a0810
		.long   func_a082c
		.long   func_a082c
		.long   func_a082c
		.long   func_a088e

vtable_9fe0c:
		.long   func_a0908
		.long   func_a08ee
		.long   func_a0a8b
		.long   func_a0aa7
		.long   func_a0aa7
		.long   func_a0aa7
		.long   func_a0b0c


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_show_purple_apps_selection_bar)	/* 0x9FE28 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x48,%esp
		mov    EXPORT_SYMBOL(fe_icons_sprites),%eax
		mov    0x268(%eax),%al
		mov    $0x3,%edx
		mov    %al,0x44(%esp)
		mov    data_1c5285,%ah
		mov    %edx,0x3c(%esp)
		test   %ah,%ah
		setne  %al
		mov    $0x2,%ebp
		and    $0xff,%eax
		mov    %edx,%esi
		xor    %ebx,%ebx
		add    $0x5,%eax
		mov    %ebx,0x34(%esp)
		mov    %al,0x40(%esp)
		jmp    jump_a0500
	jump_9fe72:
		xor    %al,%al
		jmp    jump_9fe8a
	jump_9fe76:
		cmp    $0x1,%ecx
		je     jump_9fe88
		cmp    $0x2,%ecx
		je     jump_9fe88
		cmp    %edx,%ecx
		je     jump_9fe88
		mov    $0x1,%al
		jmp    jump_9fe8a
	jump_9fe88:
		xor    %al,%al
	jump_9fe8a:
		mov    unkn_flags_08,%ah
		test   $0x2,%ah
		je     jump_9fe9a
		test   $0x1,%ah
		jne    jump_9fea2
	jump_9fe9a:
		cmpl   $0x0,0x34(%esp)
		sete   %al
	jump_9fea2:
		test   %al,%al
		je     jump_a04c6
		mov    0x34(%esp),%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(byte_155124)(%edx),%al
		imul   $0x6,%eax,%eax
		mov    EXPORT_SYMBOL(fe_icons_sprites),%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x5(%eax),%dl
		add    $0x1b1,%edx
		mov    0x4(%eax),%al
		movswl %dx,%ecx
		mov    0x3c(%esp),%edx
		xor    %ah,%ah
		add    %edx,%eax
		inc    %eax
		movswl %ax,%edx
		mov    0x3a(%esp),%eax
		mov    $0x1b0,%ebx
		sar    $0x10,%eax
		call   ac_mouse_move_over_rect
		mov    0x34(%esp),%cl
		mov    $0x1,%ah
		shl    %cl,%ah
		test   %al,%al
		je     jump_a0406
		xor    %ebx,%ebx
		mov    $0x1,%edx
		mov    EXPORT_SYMBOL(byte_1C497E),%bl
		shl    %cl,%edx
		test   %edx,%ebx
		jne    jump_9ff37
		push   $0x1
		mov    $0x40,%ecx
		mov    $0x7b,%edx
		mov    %bl,%al
		push   $0x0
		mov    $0x7f,%ebx
		or     %ah,%al
		push   $0x64
		mov    %al,EXPORT_SYMBOL(byte_1C497E)
		xor    %eax,%eax
		call   ac_play_sample_using_heap
	jump_9ff37:
		movw   $0x4,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+106 # lbDisplay.MLeftButton
		jne    jump_9ff5b
		cmpl   $0x0,joy_Buttons
		je     jump_9ff7e
		cmpb   $0x0,net_unkn_pos_02
		jne    jump_9ff7e
	jump_9ff5b:
		xor    %dh,%dh
		mov    %dh,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		xor    %ecx,%ecx
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    0x34(%esp),%eax
		inc    %eax
		add    %eax,%eax
		mov    %ax,EXPORT_SYMBOL(word_1C498A)
		jmp    jump_9ffec
	jump_9ff7e:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(word_1C498A),%ax
		cmp    %ebp,%eax
		jne    jump_9ffec
		mov    data_155151,%eax
		sar    $0x18,%eax
		cmp    $0xffffffff,%eax
		je     jump_9ffb0
		mov    mo_weapon,%al
		cmp    data_1c5286,%al
		je     jump_a02ea
	jump_9ffb0:
		xor    %eax,%eax
		mov    screentype,%al
		cmp    $0xc,%eax
		je     jump_9ffe3
		mov    0x34(%esp),%al
		push   $0x2
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x0
		mov    $0x6f,%edx
		inc    %al
		push   $0x64
		mov    %al,change_screen
		xor    %eax,%eax
		call   ac_play_sample_using_heap
	jump_9ffe3:
		xor    %ebx,%ebx
		mov    %bx,EXPORT_SYMBOL(word_1C498A)
	jump_9ffec:
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+107 # lbDisplay.MRightButton
		jne    jump_a000f
		cmpl   $0x0,joy_Buttons
		je     jump_a0305
		cmpb   $0x0,net_unkn_pos_02
		jne    jump_a0305
	jump_a000f:
		xor    %cl,%cl
		mov    %cl,EXPORT_SYMBOL(lbDisplay)+104 # lbDisplay.RightButton
		xor    %eax,%eax
		mov    %ax,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    0x34(%esp),%eax
		inc    %eax
		add    %eax,%eax
		inc    %eax
		mov    %ax,EXPORT_SYMBOL(word_1C498A)
		jmp    jump_a034d


/*----------------------------------------------------------------*/
func_a0032:
/*----------------------------------------------------------------*/
		movzbl EXPORT_SYMBOL(local_player_no),%edi
		imul   $0x1aa,%edi,%edi
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(mo_from_agent),%bl
		mov    data_1a63ee(%edi,%ebx,1),%cl
		dec    %cl
		lea    (%ebx,%ebx,4),%edx
		mov    %cl,data_1a63ee(%edi,%ebx,1)
		mov    data_1c4c86(%edx),%ch
		dec    %ch
		mov    %ch,data_1c4c86(%edx)
		jne    jump_a009a
		movsbl %al,%ecx
		mov    $0x1,%eax
		shl    %cl,%eax
		mov    data_1a63b0(%edi,%ebx,4),%edx
		not    %eax
		mov    cryo_agents(,%ebx,4),%ecx
		and    %eax,%edx
		and    %eax,%ecx
		mov    %edx,data_1a63b0(%edi,%ebx,4)
		mov    %ecx,cryo_agents(,%ebx,4)
	jump_a009a:
		mov    $0xff,%dl
		call   ac_research_unkn_func_003
		mov    %dl,mo_weapon
		jmp    jump_9ffe3


/*----------------------------------------------------------------*/
func_a00ac:
/*----------------------------------------------------------------*/
		xor    %ecx,%ecx
		mov    EXPORT_SYMBOL(local_player_no),%cl
		imul   $0x1aa,%ecx,%ecx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(mo_from_agent),%dl
		mov    data_1a63e6(%ecx,%edx,1),%ah
		dec    %ah
		lea    (%edx,%edx,4),%ebx
		mov    %ah,data_1a63e6(%ecx,%edx,1)
		mov    data_1c4c84(%ebx),%ah
		dec    %ah
		mov    %ah,data_1c4c84(%ebx)
		jne    jump_a009a
		shl    $0x2,%edx
		lea    (%ecx,%edx,1),%ebx
		movsbl %al,%ecx
		mov    $0x1,%eax
		shl    %cl,%eax
		mov    data_1a63b0(%ebx),%edi
		not    %eax
		and    %eax,%edi
		mov    %edi,data_1a63b0(%ebx)
		and    %eax,cryo_agents(%edx)
		mov    $0xff,%dl
		call   ac_research_unkn_func_003
		mov    %dl,mo_weapon
		jmp    jump_9ffe3


/*----------------------------------------------------------------*/
func_a011d:
/*----------------------------------------------------------------*/
		movzbl EXPORT_SYMBOL(local_player_no),%edi
		imul   $0x1aa,%edi,%edi
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(mo_from_agent),%bl
		mov    data_1a63ea(%edi,%ebx,1),%cl
		dec    %cl
		lea    (%ebx,%ebx,4),%edx
		mov    %cl,data_1a63ea(%edi,%ebx,1)
		mov    data_1c4c85(%edx),%ch
		dec    %ch
		mov    %ch,data_1c4c85(%edx)
		jne    jump_a009a
		movsbl %al,%ecx
		mov    $0x1,%eax
		shl    %cl,%eax
		mov    data_1a63b0(%edi,%ebx,4),%edx
		not    %eax
		mov    cryo_agents(,%ebx,4),%ecx
		and    %eax,%edx
		and    %eax,%ecx
		mov    %edx,data_1a63b0(%edi,%ebx,4)
		mov    %ecx,cryo_agents(,%ebx,4)
		mov    $0xff,%dl
		call   ac_research_unkn_func_003
		mov    %dl,mo_weapon
		jmp    jump_9ffe3


/*----------------------------------------------------------------*/
func_a0197:
/*----------------------------------------------------------------*/
		xor    %ecx,%ecx
		mov    EXPORT_SYMBOL(local_player_no),%cl
		imul   $0x1aa,%ecx,%ecx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(mo_from_agent),%dl
		mov    data_1a63f6(%ecx,%edx,1),%ah
		dec    %ah
		lea    (%edx,%edx,4),%ebx
		mov    %ah,data_1a63f6(%ecx,%edx,1)
		mov    data_1c4c88(%ebx),%ah
		dec    %ah
		mov    %ah,data_1c4c88(%ebx)
		jne    jump_a009a
		shl    $0x2,%edx
		lea    (%ecx,%edx,1),%ebx
		movsbl %al,%ecx
		mov    $0x1,%eax
		shl    %cl,%eax
		not    %eax
		mov    data_1a63b0(%ebx),%ecx
		mov    cryo_agents(%edx),%edi
		and    %eax,%ecx
		and    %eax,%edi
		mov    %ecx,data_1a63b0(%ebx)
		mov    %edi,cryo_agents(%edx)
		mov    $0xff,%dl
		call   ac_research_unkn_func_003
		mov    %dl,mo_weapon
		jmp    jump_9ffe3


/*----------------------------------------------------------------*/
func_a0214:
/*----------------------------------------------------------------*/
		xor    %ecx,%ecx
		mov    EXPORT_SYMBOL(local_player_no),%cl
		imul   $0x1aa,%ecx,%ecx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(mo_from_agent),%dl
		mov    data_1a63f2(%ecx,%edx,1),%ah
		dec    %ah
		lea    (%edx,%edx,4),%ebx
		mov    %ah,data_1a63f2(%ecx,%edx,1)
		mov    data_1c4c87(%ebx),%ah
		dec    %ah
		mov    %ah,data_1c4c87(%ebx)
		jne    jump_a009a
		shl    $0x2,%edx
		lea    (%ecx,%edx,1),%ebx
		movsbl %al,%ecx
		mov    $0x1,%eax
		shl    %cl,%eax
		not    %eax
		mov    data_1a63b0(%ebx),%ecx
		mov    cryo_agents(%edx),%edi
		and    %eax,%ecx
		and    %eax,%edi
		mov    %ecx,data_1a63b0(%ebx)
		mov    %edi,cryo_agents(%edx)
		mov    $0xff,%dl
		call   ac_research_unkn_func_003
		mov    %dl,mo_weapon
		jmp    jump_9ffe3


/*----------------------------------------------------------------*/
func_a0291:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(local_player_no),%al
		imul   $0x1aa,%eax,%eax
		mov    $0x1,%ebx
		mov    data_155151,%ecx
		xor    %edx,%edx
		sar    $0x18,%ecx
		mov    EXPORT_SYMBOL(mo_from_agent),%dl
		shl    %cl,%ebx
		mov    cryo_agents(,%edx,4),%edi
		not    %ebx
		mov    data_1a63b0(%eax,%edx,4),%ecx
		and    %ebx,%edi
		and    %ebx,%ecx
		mov    %edi,cryo_agents(,%edx,4)
		mov    %ecx,data_1a63b0(%eax,%edx,4)
		mov    $0xff,%dl
		call   ac_research_unkn_func_003
		mov    %dl,mo_weapon
		jmp    jump_9ffe3
	jump_a02ea:
		mov    mo_weapon,%al
		mov    %al,%ah
		sub    $0x5,%ah
		cmp    $0x7,%ah
		ja     func_a0291
		xor    %edx,%edx
		mov    %ah,%dl
		jmp    *%cs:vtable_9fdd0(,%edx,4)
	jump_a0305:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(word_1C498A),%ax
		cmp    %esi,%eax
		jne    jump_a034d
		xor    %esi,%eax
		mov    screentype,%al
		cmp    $0xc,%eax
		je     jump_a0344
		mov    0x34(%esp),%al
		push   $0x2
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x0
		mov    $0x6f,%edx
		inc    %al
		push   $0x64
		mov    %al,change_screen
		xor    %eax,%eax
		call   ac_play_sample_using_heap
	jump_a0344:
		xor    %edi,%edi
		mov    %di,EXPORT_SYMBOL(word_1C498A)
	jump_a034d:
		mov    EXPORT_SYMBOL(lbDisplay)+96,%dx # lbDisplay__DrawFlags
		or     $0x80,%dh
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    0x34(%esp),%edx
		xor    %eax,%eax
		mov    0x34(%esp),%ebx
		mov    EXPORT_SYMBOL(byte_155124)(%edx),%al
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(byte_1C4984)(%ebx),%dl
		add    %eax,%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(byte_15512C)(%ebx),%al
		add    %edx,%eax
		imul   $0x6,%eax,%eax
		mov    EXPORT_SYMBOL(fe_icons_sprites),%ebx
		mov    $0x1b0,%edx
		add    %eax,%ebx
		mov    0x3c(%esp),%eax
		call   ac_draw_sprite_purple_list
		xor    %ebx,%ebx
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    0x34(%esp),%edx
		xor    %eax,%eax
		mov    0x34(%esp),%ebx
		mov    EXPORT_SYMBOL(byte_155124)(%edx),%al
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(byte_1C4984)(%ebx),%dl
		add    %edx,%eax
		imul   $0x6,%eax,%eax
		mov    EXPORT_SYMBOL(fe_icons_sprites),%ebx
		mov    $0x1b0,%edx
		add    %eax,%ebx
		mov    0x3c(%esp),%eax
		call   ac_draw_sprite_purple_list
		mov    0x34(%esp),%eax
		mov    EXPORT_SYMBOL(byte_1C4984)(%eax),%ch
		inc    %ch
		mov    %ch,EXPORT_SYMBOL(byte_1C4984)(%eax)
		cmp    EXPORT_SYMBOL(byte_15512C)(%eax),%ch
		jne    jump_a04c6
		mov    0x34(%esp),%eax
		xor    %dl,%dl
		mov    %dl,EXPORT_SYMBOL(byte_1C4984)(%eax)
		jmp    jump_a04c6
	jump_a0406:
		mov    %ah,%al
		mov    EXPORT_SYMBOL(byte_1C497E),%dh
		not    %al
		and    %al,%dh
		mov    $0x4,%ebx
		mov    %dh,EXPORT_SYMBOL(byte_1C497E)
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(lbDisplay)+96,%cx # lbDisplay__DrawFlags
		or     $0x80,%ch
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    0x34(%esp),%eax
		xor    %edx,%edx
		mov    0x34(%esp),%ebx
		mov    EXPORT_SYMBOL(byte_155124)(%eax),%dl
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(byte_1C4984)(%ebx),%al
		add    %eax,%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(byte_15512C)(%ebx),%al
		add    %edx,%eax
		imul   $0x6,%eax,%eax
		mov    EXPORT_SYMBOL(fe_icons_sprites),%ebx
		mov    $0x1b0,%edx
		add    %eax,%ebx
		mov    0x3c(%esp),%eax
		xor    %edi,%edi
		call   ac_draw_sprite_purple_list
		mov    %di,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    0x34(%esp),%eax
		mov    EXPORT_SYMBOL(byte_1C4984)(%eax),%bl
		test   %bl,%bl
		je     jump_a04a5
		mov    %bl,%bh
		inc    %bh
		mov    EXPORT_SYMBOL(byte_15512C)(%eax),%cl
		mov    %bh,EXPORT_SYMBOL(byte_1C4984)(%eax)
		cmp    %cl,%bh
		jne    jump_a04a5
		xor    %ch,%ch
		mov    %ch,EXPORT_SYMBOL(byte_1C4984)(%eax)
	jump_a04a5:
		xor    %eax,%eax
		mov    0x34(%esp),%edx
		mov    EXPORT_SYMBOL(word_1C498A),%ax
		add    %edx,%edx
		cmp    %ebp,%eax
		je     jump_a04be
		add    $0x3,%edx
		cmp    %edx,%eax
		jne    jump_a04c6
	jump_a04be:
		xor    %eax,%eax
		mov    %ax,EXPORT_SYMBOL(word_1C498A)
	jump_a04c6:
		mov    0x34(%esp),%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(byte_155124)(%edx),%al
		imul   $0x6,%eax,%eax
		mov    EXPORT_SYMBOL(fe_icons_sprites),%edx
		mov    0x4(%edx,%eax,1),%al
		and    $0xff,%eax
		mov    0x3c(%esp),%edx
		add    $0x3,%eax
		add    %eax,%edx
		mov    %edx,0x3c(%esp)
	jump_a04f1:
		mov    0x34(%esp),%ebx
		add    $0x2,%ebp
		inc    %ebx
		add    $0x2,%esi
		mov    %ebx,0x34(%esp)
	jump_a0500:
		xor    %eax,%eax
		mov    0x34(%esp),%ecx
		mov    0x40(%esp),%al
		cmp    %ecx,%eax
		jle    jump_a054b
		cmp    $0x1,%ecx
		je     jump_a04f1
		xor    %edx,%edx
		mov    login_control__State,%dl
		mov    $0x1,%al
		cmp    $0x5,%edx
		jne    jump_9fea2
		call   ac_is_unkn_current_player
		test   %al,%al
		je     jump_9fe76
		cmp    $0x1,%ecx
		je     jump_9fe72
		cmp    %edx,%ecx
		je     jump_9fe72
		mov    $0x1,%al
		jmp    jump_9fe8a
	jump_a054b:
		cmp    $0x5,%eax
		jne    jump_a057d
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(byte_155124)(%ecx),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(fe_icons_sprites),%edx
		mov    0x4(%edx,%eax,2),%al
		and    $0xff,%eax
		mov    0x3c(%esp),%esi
		add    $0x3,%eax
		add    %eax,%esi
		mov    %esi,0x3c(%esp)
	jump_a057d:
		cmpb   $0x0,new_mail
		je     jump_a0937
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(game_system_screen),%al
		cmp    $0x1,%eax
		jne    jump_a05a6
		xor    %eax,%eax
		mov    screentype,%al
		cmp    $0x7,%eax
		je     jump_a0937
	jump_a05a6:
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+28
		je     jump_a05d5
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(game_system_screen),%al
		cmp    $0x3,%eax
		je     jump_a05c0
		cmp    $0x1,%eax
		jne    jump_a05cc
	jump_a05c0:
		xor    %eax,%eax
		mov    screentype,%al
		cmp    $0x7,%eax
		je     jump_a05d5
	jump_a05cc:
		cmpb   $0x0,edit_flag
		je     jump_a0616
	jump_a05d5:
		mov    EXPORT_SYMBOL(fe_icons_sprites),%eax
		xor    %edx,%edx
		mov    0x1df(%eax),%dl
		add    $0x1b1,%edx
		mov    0x1de(%eax),%al
		movswl %dx,%ecx
		mov    0x3c(%esp),%edx
		xor    %ah,%ah
		add    %edx,%eax
		inc    %eax
		movswl %ax,%edx
		mov    0x3a(%esp),%eax
		mov    $0x1b0,%ebx
		sar    $0x10,%eax
		call   ac_mouse_move_over_rect
		test   %al,%al
		je     jump_a0b34
	jump_a0616:
		cmpb   $0x0,EXPORT_SYMBOL(byte_1C4980)
		jne    jump_a064c
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+28
		jne    jump_a064c
		push   $0x1
		mov    $0x1,%dh
		mov    $0x40,%ecx
		push   $0x0
		mov    $0x7f,%ebx
		xor    %eax,%eax
		push   $0x64
		mov    %dh,EXPORT_SYMBOL(byte_1C4980)
		mov    $0x7b,%edx
		call   ac_play_sample_using_heap
	jump_a064c:
		movw   $0x4,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+106 # lbDisplay.MLeftButton
		jne    jump_a0670
		cmpl   $0x0,joy_Buttons
		je     jump_a068e
		cmpb   $0x0,net_unkn_pos_02
		jne    jump_a068e
	jump_a0670:
		xor    %bl,%bl
		mov    %bl,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		xor    %eax,%eax
		mov    %ax,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		movw   $0x32,EXPORT_SYMBOL(word_1C498A)
		jmp    jump_a07c6
	jump_a068e:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(word_1C498A),%ax
		cmp    $0x32,%eax
		je     jump_a06a8
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+28
		je     jump_a07c6
	jump_a06a8:
		xor    %ebx,%ebx
		xor    %ch,%ch
		mov    %bx,EXPORT_SYMBOL(word_1C498A)
		mov    %ch,EXPORT_SYMBOL(lbKeyOn)+28
		xor    %eax,%eax
		mov    screentype,%al
		cmp    $0xc,%eax
		je     jump_a07c6
		call   ac_activate_queued_mail
		and    $0xffff,%eax
		cmp    $0x1,%eax
		jne    jump_a0716
		mov    next_brief,%ax
		sub    $0x5,%eax
		mov    %ax,EXPORT_SYMBOL(word_1C6F40)
		mov    EXPORT_SYMBOL(word_1C6F3E),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_a06fc
		xor    %edi,%edi
		mov    %di,EXPORT_SYMBOL(word_1C6F40)
	jump_a06fc:
		mov    next_brief,%ax
		mov    %ax,open_brief
		movb   $0x7,change_screen
		mov    EXPORT_SYMBOL(gui_strings)+0x5D0,%eax
		jmp    jump_a075d
	jump_a0716:
		mov    EXPORT_SYMBOL(next_email),%ax
		sub    $0x4,%eax
		mov    %ax,EXPORT_SYMBOL(word_1C6F3E)
		mov    next_brief,%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_a073a
		xor    %cl,%cl
		mov    %cx,EXPORT_SYMBOL(word_1C6F3E)
	jump_a073a:
		mov    EXPORT_SYMBOL(next_email),%ax
		mov    %ax,open_brief
		mov    %eax,%esi
		mov    $0x7,%al
		neg    %esi
		mov    %al,change_screen
		mov    EXPORT_SYMBOL(gui_strings)+0x5D4,%eax
		mov    %si,open_brief
	jump_a075d:
		mov    %eax,EXPORT_SYMBOL(heading_box)+0x18
		push   $0x2
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x6f,%edx
		xor    %eax,%eax
		call   ac_play_sample_using_heap
		mov    new_mail,%dl
		test   %dl,%dl
		je     jump_a07c0
		push   $0x3
		push   $0x0
		push   $0x64
		xor    %edx,%edx
		call   ac_LbRandomAnyShort
		mov    %ax,%dx
		mov    $0x3,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		add    $0x77,%edx
		xor    %eax,%eax
		movswl %dx,%edx
		call   ac_play_sample_using_heap
		jmp    jump_a07c6
	jump_a07c0:
		mov    %dl,EXPORT_SYMBOL(byte_1C4980)
	jump_a07c6:
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		or     $0x80,%bh
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(byte_1C498C),%al
		cmp    $0x6,%al
		ja     func_a08b1
		and    $0xff,%eax
		jmp    *%cs:vtable_9fdf0(,%eax,4)


/*----------------------------------------------------------------*/
func_a07f1:
/*----------------------------------------------------------------*/
		mov    $0x1b0,%edx
		mov    EXPORT_SYMBOL(fe_icons_sprites),%ebx
		mov    0x3c(%esp),%eax
		add    $0x1da,%ebx
		call   ac_draw_sprite_purple_list
		jmp    func_a08b1


/*----------------------------------------------------------------*/
func_a0810:
/*----------------------------------------------------------------*/
		push   $0x1
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x70,%edx
		xor    %eax,%eax
		call   ac_play_sample_using_heap


/*----------------------------------------------------------------*/
func_a082c:
/*----------------------------------------------------------------*/
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(byte_1C498C),%dl
		add    $0x4d,%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(fe_icons_sprites),%ebx
		add    %eax,%eax
		mov    $0x1b0,%edx
		add    %eax,%ebx
		mov    0x3c(%esp),%eax
		xor    %esi,%esi
		call   ac_draw_sprite_purple_list
		mov    %si,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(byte_1C498C),%al
		lea    0x60(%eax),%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(fe_icons_sprites),%ebx
		add    %eax,%eax
		mov    $0x1b0,%edx
		add    %eax,%ebx
		mov    0x3c(%esp),%eax
		call   ac_draw_sprite_purple_list
		jmp    func_a08b1


/*----------------------------------------------------------------*/
func_a088e:
/*----------------------------------------------------------------*/
		mov    $0x1b0,%edx
		mov    EXPORT_SYMBOL(fe_icons_sprites),%ebx
		mov    0x3c(%esp),%eax
		add    $0x1ec,%ebx
		xor    %ecx,%ecx
		call   ac_draw_sprite_purple_list
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags


/*----------------------------------------------------------------*/
func_a08b1:
/*----------------------------------------------------------------*/
		xor    %edi,%edi
		mov    %di,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		testb  $0x1,gameturn
		je     jump_a0937
		mov    EXPORT_SYMBOL(byte_1C498C),%cl
		xor    %eax,%eax
		inc    %cl
		mov    %cl,%al
		mov    %cl,EXPORT_SYMBOL(byte_1C498C)
		cmp    $0x5,%eax
		jle    jump_a0937
		movb   $0x2,EXPORT_SYMBOL(byte_1C498C)
		jmp    jump_a0937


/*----------------------------------------------------------------*/
func_a08ee:
/*----------------------------------------------------------------*/
		mov    $0x1b0,%edx
		mov    EXPORT_SYMBOL(fe_icons_sprites),%ebx
		mov    0x3c(%esp),%eax
		add    $0x1da,%ebx
		call   ac_draw_sprite_purple_list


/*----------------------------------------------------------------*/
func_a0908:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    %ax,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		testb  $0x1,gameturn
		je     jump_a0937
		mov    EXPORT_SYMBOL(byte_1C498C),%ch
		xor    %eax,%eax
		inc    %ch
		mov    %ch,%al
		mov    %ch,EXPORT_SYMBOL(byte_1C498C)
		cmp    $0x6,%eax
		jle    jump_a0937
		xor    %ch,%al
		mov    %al,EXPORT_SYMBOL(byte_1C498C)
	jump_a0937:
		xor    %eax,%eax
		mov    %ax,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(word_1C6F3E),%eax
		sar    $0x10,%eax
		mov    %eax,0x34(%esp)
		xor    %eax,%eax
		mov    $0x27d,%edx
		mov    0x44(%esp),%al
		sub    %eax,%edx
		mov    0x34(%esp),%eax
		mov    %edx,0x3c(%esp)
		add    %eax,%eax
		mov    0x34(%esp),%edx
		add    $0x66,%eax
		lea    0x0(,%edx,4),%ebp
		mov    %eax,0x38(%esp)
		add    %edx,%ebp
	jump_a0976:
		xor    %eax,%eax
		mov    0x34(%esp),%ecx
		mov    next_brief,%ax
		cmp    %ecx,%eax
		jle    jump_93f23
		mov    EXPORT_SYMBOL(word_1C6F3E),%eax
		sar    $0x10,%eax
		add    $0xa,%eax
		cmp    %ecx,%eax
		jle    jump_93f23
		movw   $0x4,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(fe_icons_sprites),%eax
		mov    0x269(%eax),%al
		xor    %ah,%ah
		add    $0x1b1,%eax
		movswl %ax,%ecx
		xor    %eax,%eax
		mov    0x3c(%esp),%esi
		mov    0x44(%esp),%al
		add    %esi,%eax
		inc    %eax
		movswl %ax,%edx
		mov    0x3a(%esp),%eax
		mov    $0x1b0,%ebx
		sar    $0x10,%eax
		call   ac_mouse_move_over_rect
		mov    0x34(%esp),%cl
		mov    %al,%ah
		mov    EXPORT_SYMBOL(word_1C6F40),%dh
		mov    $0x1,%al
		sub    %dh,%cl
		shl    %cl,%al
		test   %ah,%ah
		je     jump_a0c03
		mov    EXPORT_SYMBOL(word_1C6F3E),%ecx
		mov    0x34(%esp),%edx
		sar    $0x10,%ecx
		sub    %ecx,%edx
		xor    %ebx,%ebx
		mov    %edx,%ecx
		mov    $0x1,%edx
		mov    EXPORT_SYMBOL(byte_1C497F),%bl
		shl    %cl,%edx
		test   %edx,%ebx
		jne    jump_a0a40
		push   $0x1
		mov    $0x40,%ecx
		mov    %bl,%bh
		push   $0x0
		mov    $0x7b,%edx
		or     %al,%bh
		push   $0x64
		mov    %bh,EXPORT_SYMBOL(byte_1C497F)
		xor    %eax,%eax
		mov    $0x7f,%ebx
		call   ac_play_sample_using_heap
	jump_a0a40:
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+106 # lbDisplay.MLeftButton
		jne    jump_a0a63
		cmpl   $0x0,joy_Buttons
		je     jump_a0b70
		cmpb   $0x0,net_unkn_pos_02
		jne    jump_a0b70
	jump_a0a63:
		xor    %ah,%ah
		mov    %ah,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		xor    %ebx,%ebx
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    0x34(%esp),%eax
		inc    %eax
		add    %eax,%eax
		add    $0x64,%eax
		mov    %ax,EXPORT_SYMBOL(word_1C498A)
		jmp    jump_a0bcd


/*----------------------------------------------------------------*/
func_a0a8b:
/*----------------------------------------------------------------*/
		push   $0x1
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x70,%edx
		xor    %eax,%eax
		call   ac_play_sample_using_heap


/*----------------------------------------------------------------*/
func_a0aa7:
/*----------------------------------------------------------------*/
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(byte_1C498C),%dl
		add    $0x4d,%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(fe_icons_sprites),%ebx
		add    %eax,%eax
		mov    $0x1b0,%edx
		add    %eax,%ebx
		mov    0x3c(%esp),%eax
		xor    %edi,%edi
		call   ac_draw_sprite_purple_list
		mov    %di,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(byte_1C498C),%al
		lea    0x60(%eax),%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(fe_icons_sprites),%ebx
		add    %eax,%eax
		mov    $0x1b0,%edx
		add    %eax,%ebx
		mov    0x3c(%esp),%eax
		call   ac_draw_sprite_purple_list
		jmp    func_a0908


/*----------------------------------------------------------------*/
func_a0b0c:
/*----------------------------------------------------------------*/
		mov    $0x1b0,%edx
		mov    EXPORT_SYMBOL(fe_icons_sprites),%ebx
		mov    0x3c(%esp),%eax
		add    $0x1ec,%ebx
		xor    %esi,%esi
		call   ac_draw_sprite_purple_list
		mov    %si,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		jmp    func_a0908
	jump_a0b34:
		mov    $0x4,%ebx
		mov    %al,EXPORT_SYMBOL(byte_1C4980)
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(lbDisplay)+96,%cx # lbDisplay__DrawFlags
		or     $0x80,%ch
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(byte_1C498C),%al
		cmp    $0x6,%al
		ja     func_a0908
		and    $0xff,%eax
		jmp    *%cs:vtable_9fe0c(,%eax,4)
	jump_a0b70:
		xor    %eax,%eax
		mov    0x38(%esp),%edx
		mov    EXPORT_SYMBOL(word_1C498A),%ax
		cmp    %edx,%eax
		jne    jump_a0bcd
		xor    %edx,%eax
		mov    screentype,%al
		cmp    $0xc,%eax
		je     jump_a0bc4
		mov    $0x7,%al
		push   $0x2
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		mov    %al,change_screen
		mov    EXPORT_SYMBOL(gui_strings)+0x5D0,%eax
		push   $0x0
		mov    %eax,EXPORT_SYMBOL(heading_box)+0x18
		mov    0x3c(%esp),%eax
		mov    $0x6f,%edx
		inc    %eax
		push   $0x64
		mov    %ax,open_brief
		xor    %eax,%eax
		call   ac_play_sample_using_heap
	jump_a0bc4:
		xor    %edx,%edx
		mov    %dx,EXPORT_SYMBOL(word_1C498A)
	jump_a0bcd:
		mov    EXPORT_SYMBOL(lbDisplay)+96,%cx # lbDisplay__DrawFlags
		or     $0x80,%ch
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    $0x1b0,%edx
		mov    EXPORT_SYMBOL(fe_icons_sprites),%ebx
		mov    0x3c(%esp),%eax
		add    $0x264,%ebx
		xor    %esi,%esi
		call   ac_draw_sprite_purple_list
		mov    %si,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		jmp    jump_a0c45
	jump_a0c03:
		mov    EXPORT_SYMBOL(byte_1C497F),%bl
		not    %al
		and    %al,%bl
		mov    %bl,EXPORT_SYMBOL(byte_1C497F)
		orw    $0x8000,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    $0x1b0,%edx
		mov    EXPORT_SYMBOL(fe_icons_sprites),%ebx
		mov    0x3c(%esp),%eax
		add    $0x264,%ebx
		call   ac_draw_sprite_purple_list
		mov    EXPORT_SYMBOL(lbDisplay)+96,%ax # lbDisplay__DrawFlags
		and    $0x7f,%ah
		mov    %ax,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
	jump_a0c45:
		mov    small2_font,%eax
		mov    $0x57,%dl
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    %dl,EXPORT_SYMBOL(lbDisplay)+113 # lbDisplay.DrawColour
		xor    %eax,%eax
		mov    data_1c6e74(%ebp),%al
		call   is_a_scientist_mission
		test   %al,%al
		je     jump_a0c70
		orw    $0x40,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
	jump_a0c70:
		mov    EXPORT_SYMBOL(fe_icons_sprites),%ecx
		mov    0x269(%ecx),%cl
		xor    %ah,%ah
		mov    0x44(%esp),%al
		xor    %ebx,%ebx
		add    $0x2,%eax
		mov    $0x1b0,%edx
		mov    %ax,%bx
		xor    %eax,%eax
		and    $0xff,%ecx
		mov    0x3c(%esp),%ax
		call   ac_my_set_text_window
		mov    $0x3,%edx
		mov    $0x8,%eax
		mov    EXPORT_SYMBOL(misc_text)+0x10,%ebx
		xor    %ecx,%ecx
		call   ac_draw_text_purple_list2
		mov    med2_font,%eax
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		xor    %eax,%eax
		mov    brief_store(%ebp),%al
		push   %eax
		push   $ascD_50
		lea    0x8(%esp),%eax
		push   %eax
		lea    0xc(%esp),%esi
		call   ac_sprintf
		add    $0xc,%esp
		mov    %esp,%eax
		mov    $0x23,%edx
		call   ac_LbTextStringWidth
		mov    back_buffer,%edi
		mov    text_buf_pos,%ebx
		sub    %eax,%edx
		add    %ebx,%edi
		sar    %edx
		push   %edi
	jump_a0d02:
		mov    (%esi),%al
		mov    %al,(%edi)
		cmp    $0x0,%al
		je     jump_a0d1a
		mov    0x1(%esi),%al
		add    $0x2,%esi
		mov    %al,0x1(%edi)
		add    $0x2,%edi
		cmp    $0x0,%al
		jne    jump_a0d02
	jump_a0d1a:
		pop    %edi
		mov    back_buffer,%ebx
		xor    %eax,%eax
		mov    text_buf_pos,%ecx
		mov    %dl,%al
		add    %ecx,%ebx
		mov    $0xa,%edx
		xor    %ecx,%ecx
		mov    %esp,%edi
		call   ac_draw_text_purple_list2
		sub    %ecx,%ecx
		dec    %ecx
		xor    %eax,%eax
		repnz scas %es:(%edi),%al
		not    %ecx
		dec    %ecx
		mov    small2_font,%eax
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		xor    %eax,%eax
		mov    data_1c6e72(%ebp),%al
		push   %eax
		xor    %eax,%eax
		mov    data_1c6e71(%ebp),%al
		push   %eax
		mov    text_buf_pos,%esi
		inc    %ecx
		push   $asc02d02d_1
		lea    0xc(%esp),%eax
		add    %ecx,%esi
		push   %eax
		mov    %esi,text_buf_pos
		call   ac_sprintf
		add    $0x10,%esp
		mov    %esp,%eax
		mov    $0x23,%edx
		call   ac_LbTextStringWidth
		sub    %eax,%edx
		mov    %edx,%eax
		sar    %eax
		mov    %al,%dl
		mov    back_buffer,%edi
		mov    text_buf_pos,%eax
		mov    %esp,%esi
		add    %eax,%edi
		push   %edi
	jump_a0da6:
		mov    (%esi),%al
		mov    %al,(%edi)
		cmp    $0x0,%al
		je     jump_a0dbe
		mov    0x1(%esi),%al
		add    $0x2,%esi
		mov    %al,0x1(%edi)
		add    $0x2,%edi
		cmp    $0x0,%al
		jne    jump_a0da6
	jump_a0dbe:
		pop    %edi
		mov    back_buffer,%ebx
		xor    %eax,%eax
		mov    text_buf_pos,%ecx
		mov    %dl,%al
		add    %ecx,%ebx
		mov    $0x17,%edx
		xor    %ecx,%ecx
		mov    %esp,%edi
		call   ac_draw_text_purple_list2
		sub    %ecx,%ecx
		dec    %ecx
		xor    %eax,%eax
		repnz scas %es:(%edi),%al
		not    %ecx
		dec    %ecx
		xor    %eax,%eax
		mov    data_1c6e73(%ebp),%al
		push   %eax
		mov    text_buf_pos,%esi
		inc    %ecx
		push   $asc02dnc
		lea    0x8(%esp),%eax
		add    %ecx,%esi
		push   %eax
		mov    %esi,text_buf_pos
		call   ac_sprintf
		add    $0xc,%esp
		mov    %esp,%eax
		mov    $0x23,%edx
		call   ac_LbTextStringWidth
		sub    %eax,%edx
		mov    %edx,%eax
		sar    %eax
		mov    back_buffer,%edi
		mov    %al,%dl
		mov    text_buf_pos,%eax
		mov    %esp,%esi
		add    %eax,%edi
		push   %edi
	jump_a0e37:
		mov    (%esi),%al
		mov    %al,(%edi)
		cmp    $0x0,%al
		je     jump_a0e4f
		mov    0x1(%esi),%al
		add    $0x2,%esi
		mov    %al,0x1(%edi)
		add    $0x2,%edi
		cmp    $0x0,%al
		jne    jump_a0e37
	jump_a0e4f:
		pop    %edi
		mov    back_buffer,%ebx
		xor    %eax,%eax
		mov    text_buf_pos,%ecx
		mov    %dl,%al
		add    %ecx,%ebx
		mov    $0x1e,%edx
		xor    %ecx,%ecx
		mov    %esp,%edi
		call   ac_draw_text_purple_list2
		sub    %ecx,%ecx
		dec    %ecx
		xor    %eax,%eax
		repnz scas %es:(%edi),%al
		not    %ecx
		dec    %ecx
		mov    $0x25,%edx
		mov    $0x4,%eax
		mov    text_buf_pos,%esi
		inc    %ecx
		mov    EXPORT_SYMBOL(gui_strings)+0x5DC,%ebx
		add    %ecx,%esi
		xor    %ecx,%ecx
		mov    %esi,text_buf_pos
		call   ac_draw_text_purple_list2
		xor    %eax,%eax
		mov    %ax,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    0x3c(%esp),%edi
		xor    %eax,%eax
		mov    0x34(%esp),%edx
		mov    0x44(%esp),%al
		add    $0x5,%ebp
		add    $0x3,%eax
		inc    %edx
		sub    %eax,%edi
		mov    0x38(%esp),%eax
		mov    %edx,0x34(%esp)
		add    $0x2,%eax
		mov    %edi,0x3c(%esp)
		mov    %eax,0x38(%esp)
		jmp    jump_a0976


/*----------------------------------------------------------------*/
/* void my_set_text_window(unsigned short x1, unsigned short y1, unsigned short w, unsigned short h)
 */
GLOBAL_FUNC(ASM_my_set_text_window)
/*----------------------------------------------------------------*/
		mov    %ax,EXPORT_SYMBOL(text_window_x1)
		mov    %dx,EXPORT_SYMBOL(text_window_y1)
		add    %ebx,%eax
		add    %ecx,%edx
		dec    %eax
		dec    %edx
		mov    %ax,EXPORT_SYMBOL(text_window_x2)
		mov    %dx,EXPORT_SYMBOL(text_window_y2)
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_my_char_to_upper)	/* 0x0A34C8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		mov    %al,%bl
		xor    %eax,%eax
		mov    %bl,%al
		cmp    $0x7f,%eax
		jle    jump_a34f5
		xor    %eax,%eax
	jump_a34d7:
		xor    %edx,%edx
		mov    subst_table_lower_to_upper(%eax),%dl
		test   %edx,%edx
		je     jump_a3504
		cmp    %dl,%bl
		jne    jump_a34f0
		mov    data_15521d(%eax),%al
		pop    %edx
		pop    %ebx
		ret
	jump_a34f0:
		add    $0x2,%eax
		jmp    jump_a34d7
	jump_a34f5:
		cmp    $0x61,%eax
		jl     jump_a3504
		cmp    $0x7a,%eax
		jg     jump_a3504
		sub    $0x20,%al
		pop    %edx
		pop    %ebx
		ret
	jump_a3504:
		mov    %bl,%al
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_my_string_width)	/* 0x0A350C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    EXPORT_SYMBOL(lbFontPtr),%edi
		mov    %eax,%ecx
		mov    (%eax),%ah
		xor    %esi,%esi
		test   %ah,%ah
		je     jump_a359d
	jump_a3525:
		xor    %eax,%eax
		mov    (%ecx),%al
		cmp    $0x1f,%eax
		jle    jump_a3595
		cmp    small_med_font,%edi
		jne    jump_a3543
		cmpb   $0x65,language_3str
		je     jump_a357c
	jump_a3543:
		mov    (%ecx),%bl
		xor    %eax,%eax
		mov    %bl,%al
		cmp    $0x7f,%eax
		jle    jump_a356d
		xor    %eax,%eax
	jump_a3550:
		xor    %edx,%edx
		mov    subst_table_lower_to_upper(%eax),%dl
		test   %edx,%edx
		je     jump_a357e
		cmp    %dl,%bl
		jne    jump_a3568
		mov    data_15521d(%eax),%bl
		jmp    jump_a357e
	jump_a3568:
		add    $0x2,%eax
		jmp    jump_a3550
	jump_a356d:
		cmp    $0x61,%eax
		jl     jump_a357e
		cmp    $0x7a,%eax
		jg     jump_a357e
		sub    $0x20,%bl
		jmp    jump_a357e
	jump_a357c:
		mov    %al,%bl
	jump_a357e:
		xor    %eax,%eax
		mov    %bl,%al
		sub    $0x1f,%eax
		imul   $0x6,%eax,%eax
		mov    %edi,%edx
		mov    0x4(%edx,%eax,1),%al
		and    $0xff,%eax
		add    %eax,%esi
	jump_a3595:
		mov    0x1(%ecx),%dl
		inc    %ecx
		test   %dl,%dl
		jne    jump_a3525
	jump_a359d:
		mov    %esi,%eax
		mov    %edi,EXPORT_SYMBOL(lbFontPtr)
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_my_preprocess_text)	/* 0x0A35AC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    %eax,%ebp
		xor    %esi,%esi
		test   %eax,%eax
		je     jump_a35e1
		mov    %eax,%edi
		sub    %ecx,%ecx
		dec    %ecx
		xor    %eax,%eax
		repnz scas %es:(%edi),%al
		not    %ecx
		dec    %ecx
		mov    %ecx,(%esp)
	jump_a35d0:
		lea    (%esi,%ebp,1),%edx
		xor    %ebx,%ebx
		mov    (%edx),%al
		mov    %al,%bl
		test   %ebx,%ebx
		jne    jump_a36d4
	jump_a35e1:
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_a35eb:
		movb   $0xa,(%esi,%ebp,1)
	jump_a35ef:
		inc    %esi
		movb   $0x1f,(%esi,%ebp,1)
	jump_a35f4:
		inc    %esi
		jmp    jump_a35d0
	jump_a35f7:
		movb   $0xc,(%esi,%ebp,1)
		inc    %esi
		movb   $0x1f,(%esi,%ebp,1)
		inc    %esi
		jmp    jump_a35d0
	jump_a3603:
		mov    %esi,%eax
		inc    %esi
		movb   $0xe,(%eax,%ebp,1)
		mov    0x1(%esi,%ebp,1),%dl
		inc    %esi
		sub    $0x30,%dl
		mov    %dl,-0x1(%esi,%ebp,1)
		movb   $0x1f,(%esi,%ebp,1)
		inc    %esi
		jmp    jump_a35d0
	jump_a361d:
		mov    $login_name,%edi
		mov    (%esp),%ebx
		sub    %ecx,%ecx
		dec    %ecx
		xor    %eax,%eax
		repnz scas %es:(%edi),%al
		not    %ecx
		dec    %ecx
		sub    %esi,%ebx
		lea    0x2(%esi),%edx
		dec    %ebx
		lea    (%esi,%ecx,1),%eax
		add    %ebp,%edx
		add    %ebp,%eax
		call   ac_memmove
		xor    %eax,%eax
	jump_a3643:
		mov    net_host_player_no(%eax),%edx
		sar    $0x18,%edx
		test   %edx,%edx
		je     jump_a35f4
		mov    %eax,%ebx
		mov    %esi,%edx
		inc    %eax
		mov    login_name(%ebx),%bl
		inc    %esi
		mov    %bl,(%edx,%ebp,1)
		jmp    jump_a3643
	jump_a3661:
		mov    0x1(%edx),%al
		cmp    %bl,%al
		jb     jump_a368a
		jbe    jump_a35ef
		cmp    $0x68,%al
		jb     jump_a3680
		jbe    jump_a35f7
		cmp    $0x6c,%al
		jb     jump_a36ac
		jbe    jump_a361d
		cmp    $0x6e,%al
		je     jump_a35eb
		jmp    jump_a36ac
	jump_a3680:
		cmp    $0x63,%al
		je     jump_a3603
		jmp    jump_a36ac
	jump_a368a:
		cmp    $0x48,%al
		jb     jump_a36a4
		jbe    jump_a35f7
		cmp    $0x4c,%al
		jb     jump_a36ac
		jbe    jump_a361d
		cmp    $0x4e,%al
		je     jump_a35eb
		jmp    jump_a36ac
	jump_a36a4:
		cmp    $0x43,%al
		je     jump_a3603
	jump_a36ac:
		movb   $0x1f,(%esi,%ebp,1)
		inc    %esi
	jump_a36b1:
		movb   $0x1f,(%esi,%ebp,1)
		inc    %esi
		jmp    jump_a35d0
	jump_a36bb:
		test   %esi,%esi
		je     jump_a36b1
		lea    (%esi,%ebp,1),%eax
		movsbl -0x1(%eax),%edx
		cmp    $0x20,%edx
		jle    jump_a36b1
		movb   $0x20,(%eax)
		inc    %esi
		jmp    jump_a35d0
	jump_a36d4:
		cmp    $0xd,%al
		jb     jump_a36e0
		jbe    jump_a36bb
		cmp    $0x5c,%al
		je     jump_a3661
		jmp    jump_a36e4
	jump_a36e0:
		cmp    $0xa,%al
		je     jump_a36bb
	jump_a36e4:
		and    $0xff,%eax
		cmp    $0x20,%eax
		jge    jump_a35f4
		movb   $0x1f,(%esi,%ebp,1)
		inc    %esi
		jmp    jump_a35d0


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_my_count_lines)	/* 0x0A36FC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		sub    $0x14,%esp
		mov    %eax,(%esp)
		xor    %eax,%eax
		xor    %edx,%edx
		xor    %edi,%edi
		mov    %edx,0x8(%esp)
		mov    (%esp),%edx
		xor    %esi,%esi
		test   %edx,%edx
		jne    jump_a3724
		mov    $0x1,%edx
		jmp    jump_a38e2
	jump_a3724:
		mov    EXPORT_SYMBOL(text_window_x2),%dx
		sub    EXPORT_SYMBOL(text_window_x1),%dx
		xor    %ecx,%ecx
		mov    %edx,0x4(%esp)
		xor    %edx,%edx
		mov    %ecx,0xc(%esp)
		mov    %edx,0x10(%esp)
	jump_a3742:
		mov    (%esp),%ebx
		mov    %eax,%edx
		add    %ebx,%edx
		mov    (%edx),%dl
		xor    %ebx,%ebx
		mov    %dl,%bl
		inc    %eax
		test   %ebx,%ebx
		je     jump_a38df
		mov    EXPORT_SYMBOL(lbFontPtr),%ebx
		cmp    small_med_font,%ebx
		jne    jump_a3773
		cmpb   $0x65,language_3str
		je     jump_a37b1
	jump_a3773:
		xor    %ebx,%ebx
		mov    %dl,%bl
		mov    %dl,%cl
		cmp    $0x7f,%ebx
		jle    jump_a37a0
		xor    %edx,%edx
	jump_a3780:
		xor    %ebx,%ebx
		mov    subst_table_lower_to_upper(%edx),%bl
		test   %ebx,%ebx
		je     jump_a37af
		cmp    %bl,%cl
		jne    jump_a379b
		mov    data_15521d(%edx),%dl
		jmp    jump_a37b1
	jump_a379b:
		add    $0x2,%edx
		jmp    jump_a3780
	jump_a37a0:
		cmp    $0x61,%ebx
		jl     jump_a37af
		cmp    $0x7a,%ebx
		jg     jump_a37af
		sub    $0x20,%dl
		jmp    jump_a37b1
	jump_a37af:
		mov    %cl,%dl
	jump_a37b1:
		cmp    $0xe,%dl
		jb     jump_a383f
		jbe    jump_a37d9
		cmp    $0x1e,%dl
		jb     jump_a3833
		jbe    jump_a3852
		cmp    $0x20,%dl
		jb     jump_a3800
		jbe    jump_a37f8
		cmp    $0x2d,%dl
		je     jump_a37f8
		jmp    jump_a3800
	jump_a37d9:
		inc    %eax
		jmp    jump_a3852
	jump_a37df:
		mov    (%esp),%edx
		cmpb   $0x0,(%edx,%eax,1)
		je     jump_a37e9
		inc    %edi
	jump_a37e9:
		mov    %eax,0x10(%esp)
		mov    %eax,0xc(%esp)
		xor    %esi,%esi
		jmp    jump_a3852
	jump_a37f8:
		mov    %eax,0xc(%esp)
		mov    %esi,0x8(%esp)
	jump_a3800:
		and    $0xff,%edx
		cmp    $0x1f,%edx
		jle    jump_a3852
		mov    EXPORT_SYMBOL(lbFontPtr),%ebx
		test   %ebx,%ebx
		je     jump_a3827
		sub    $0x1f,%edx
		imul   $0x6,%edx,%edx
		mov    0x4(%edx,%ebx,1),%dl
		and    $0xff,%edx
		jmp    jump_a3829
	jump_a3827:
		xor    %edx,%edx
	jump_a3829:
		and    $0xffff,%esi
		add    %edx,%esi
		jmp    jump_a3852
	jump_a3833:
		cmp    $0x1b,%dl
		jb     jump_a3800
		cmp    $0x1c,%dl
		jbe    jump_a3852
		jmp    jump_a3800
	jump_a383f:
		cmp    $0xa,%dl
		jb     jump_a384d
		jbe    jump_a37df
		cmp    $0xc,%dl
		je     jump_a3852
		jmp    jump_a3800
	jump_a384d:
		cmp    $0x1,%dl
		jne    jump_a3800
	jump_a3852:
		cmp    0x4(%esp),%si
		jbe    jump_a3742
		mov    0xc(%esp),%edx
		cmp    0x10(%esp),%dx
		jne    jump_a389e
		mov    (%esp),%edx
		add    %eax,%edx
	jump_a386d:
		movsbl -0x1(%edx),%ebx
		dec    %edx
		dec    %eax
		cmp    $0x20,%ebx
		jl     jump_a386d
		mov    (%esp),%edx
		add    %eax,%edx
	jump_a387d:
		movsbl -0x1(%edx),%ebx
		dec    %edx
		dec    %eax
		cmp    $0x20,%ebx
		jl     jump_a387d
		mov    %eax,0xc(%esp)
		mov    %eax,0x10(%esp)
		inc    %edi
		xor    %ebx,%ebx
		xor    %esi,%esi
		mov    %ebx,0x8(%esp)
		jmp    jump_a3742
	jump_a389e:
		mov    %edx,0x10(%esp)
		sub    0x8(%esp),%esi
		xor    %edx,%edx
		mov    (%esp),%ecx
		mov    0xc(%esp),%dx
		add    %ecx,%edx
		mov    -0x1(%edx),%cl
		inc    %edi
		cmp    $0x20,%cl
		jne    jump_a3742
		mov    EXPORT_SYMBOL(lbFontPtr),%edx
		test   %edx,%edx
		je     jump_a38d2
		mov    0xa(%edx),%dl
		and    $0xff,%edx
	jump_a38d2:
		and    $0xffff,%esi
		sub    %edx,%esi
		jmp    jump_a3742
	jump_a38df:
		mov    %edi,%edx
		inc    %edx
	jump_a38e2:
		mov    %edx,%eax
		add    $0x14,%esp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_unkn20_subfunc_01)	/* 0x0A38F0 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		mov    %eax,0x8(%esp)
		mov    %edx,%esi
		mov    %ebx,(%esp)
		mov    %cl,%ch
		xor    %edi,%edi
		test   %ebx,%ebx
		je     jump_a3a5c
		mov    0x8(%esp),%edx
		mov    EXPORT_SYMBOL(text_window_x1),%ax
		mov    EXPORT_SYMBOL(text_window_y1),%bx
		add    %eax,%edx
		add    %ebx,%esi
		mov    %edx,0x8(%esp)
	jump_a3924:
		mov    (%esp),%ebx
		mov    %edi,%eax
		add    %ebx,%eax
		mov    (%eax),%cl
		xor    %eax,%eax
		mov    %cl,%al
		inc    %edi
		test   %eax,%eax
		je     jump_a3a5c
		mov    EXPORT_SYMBOL(lbFontPtr),%eax
		cmp    small_med_font,%eax
		jne    jump_a3950
		cmpb   $0x65,language_3str
		je     jump_a3989
	jump_a3950:
		xor    %eax,%eax
		mov    %cl,%al
		mov    %cl,%bl
		cmp    $0x7f,%eax
		jle    jump_a397a
		xor    %eax,%eax
	jump_a395d:
		xor    %edx,%edx
		mov    subst_table_lower_to_upper(%eax),%dl
		test   %edx,%edx
		je     jump_a3987
		cmp    %dl,%bl
		jne    jump_a3975
		mov    data_15521d(%eax),%bl
		jmp    jump_a3987
	jump_a3975:
		add    $0x2,%eax
		jmp    jump_a395d
	jump_a397a:
		cmp    $0x61,%eax
		jl     jump_a3987
		cmp    $0x7a,%eax
		jg     jump_a3987
		sub    $0x20,%bl
	jump_a3987:
		mov    %bl,%cl
	jump_a3989:
		mov    EXPORT_SYMBOL(lbFontPtr),%eax
		test   %eax,%eax
		je     jump_a39ab
		xor    %eax,%eax
		mov    %cl,%al
		sub    $0x1f,%eax
		imul   $0x6,%eax,%eax
		mov    EXPORT_SYMBOL(lbFontPtr),%edx
		mov    0x4(%edx,%eax,1),%al
		and    $0xff,%eax
	jump_a39ab:
		sar    %eax
		mov    %eax,0x4(%esp)
		xor    %eax,%eax
		mov    %cl,%al
		cmp    $0x20,%eax
		jne    jump_a39c8
		xor    %ah,%ah
		mov    %ch,%al
		imul   $0x3,%eax,%eax
		add    %eax,%esi
		jmp    jump_a3924
	jump_a39c8:
		sub    $0x1f,%eax
		imul   $0x6,%eax,%ebx
		mov    EXPORT_SYMBOL(lbFontPtr),%eax
		mov    EXPORT_SYMBOL(small_font),%edx
		add    %eax,%ebx
		cmp    %edx,%eax
		je     jump_a39e7
		cmp    small2_font,%eax
		jne    jump_a39eb
	jump_a39e7:
		mov    $0x1,%al
		jmp    jump_a3a25
	jump_a39eb:
		mov    small_med_font,%edx
		cmp    %edx,%eax
		jne    jump_a3a03
		cmp    $0x61,%cl
		jl     jump_a3a13
		cmp    $0x7a,%cl
		jg     jump_a3a13
		xor    %dl,%al
		jmp    jump_a3a25
	jump_a3a03:
		cmp    med_font,%eax
		je     jump_a3a13
		cmp    med2_font,%eax
		jne    jump_a3a17
	jump_a3a13:
		mov    $0x2,%al
		jmp    jump_a3a25
	jump_a3a17:
		cmp    big_font,%eax
		jne    jump_a3a23
		mov    $0x4,%al
		jmp    jump_a3a25
	jump_a3a23:
		xor    %al,%al
	jump_a3a25:
		xor    %edx,%edx
		and    $0xff,%eax
		mov    %si,%dx
		sub    %eax,%edx
		xor    %eax,%eax
		mov    0x4(%esp),%ebp
		mov    0x8(%esp),%ax
		sub    %ebp,%eax
		call   ac_draw_sprite_purple_list
		movsbl %cl,%eax
		xor    %dh,%dh
		call   ac_font_height
		mov    %al,%dl
		xor    %ah,%ah
		mov    %ch,%al
		add    %edx,%eax
		add    %eax,%esi
		jmp    jump_a3924
	jump_a3a5c:
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
/*unsigned short my_draw_text(short x, short y, char *text, unsigned short startline)
*/
GLOBAL_FUNC(ASM_my_draw_text)	/* 0xA3A64 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x40,%esp
		mov    %eax,%edi
		mov    %dx,0x20(%esp)
		mov    %ebx,%esi
		mov    %ecx,0x10(%esp)
		xor    %edx,%edx
		mov    %edx,(%esp)
		xor    %edx,%edx
		mov    %edx,0x2c(%esp)
		mov    %edx,0x24(%esp)
		mov    %edx,0xc(%esp)
		test   %ebx,%ebx
		jne    jump_a3a95
		xor    %eax,%eax
		jmp    jump_a3c32
	jump_a3a95:
		mov    0x20(%esp),%edx
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(text_window_x1),%ax
		mov    %ebx,0x14(%esp)
		add    %eax,%edi
		mov    EXPORT_SYMBOL(text_window_y1),%ax
		mov    %ebx,0x18(%esp)
		add    %eax,%edx
		mov    EXPORT_SYMBOL(text_window_x2),%ax
		mov    %edi,0x1c(%esp)
		sub    %edi,%eax
		mov    %dx,0x20(%esp)
		mov    %eax,0x28(%esp)
	jump_a3ac8:
		mov    (%esp),%eax
		lea    0x1(%eax),%ebx
		xor    %edx,%edx
		mov    (%esi,%eax,1),%al
		mov    %al,%dl
		mov    %ebx,(%esp)
		test   %edx,%edx
		je     jump_a4aa5
		mov    EXPORT_SYMBOL(lbFontPtr),%edx
		cmp    small_med_font,%edx
		jne    jump_a3afb
		cmpb   $0x65,language_3str
		je     jump_a3b3b
	jump_a3afb:
		xor    %edx,%edx
		mov    %al,%dl
		mov    %al,%bl
		cmp    $0x7f,%edx
		jle    jump_a3b28
		xor    %eax,%eax
	jump_a3b08:
		xor    %edx,%edx
		mov    subst_table_lower_to_upper(%eax),%dl
		test   %edx,%edx
		je     jump_a3b39
		cmp    %dl,%bl
		jne    jump_a3b23
		mov    data_15521d(%eax),%al
		jmp    jump_a3b3b
	jump_a3b23:
		add    $0x2,%eax
		jmp    jump_a3b08
	jump_a3b28:
		cmp    $0x61,%edx
		jl     jump_a3b39
		cmp    $0x7a,%edx
		jg     jump_a3b39
		sub    $0x20,%al
		jmp    jump_a3b3b
	jump_a3b39:
		mov    %bl,%al
	jump_a3b3b:
		cmp    $0xe,%al
		jb     jump_a401c
		jbe    jump_a3b6e
		cmp    $0x1e,%al
		jb     jump_a4012
		jbe    jump_a4030
		cmp    $0x20,%al
		jb     jump_a3fda
		jbe    jump_a3f99
		cmp    $0x2d,%al
		je     jump_a3f99
		jmp    jump_a3fda
	jump_a3b6e:
		incl   (%esp)
		jmp    jump_a4030
	jump_a3b76:
		mov    0x2c(%esp),%eax
		cmp    0x10(%esp),%ax
		jb     jump_a3eb8
		xor    %eax,%eax
		mov    0x1e(%esp),%edx
		mov    EXPORT_SYMBOL(text_window_y1),%ax
		sar    $0x10,%edx
		cmp    %eax,%edx
		jl     jump_a3be6
		testb  $0x80,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		je     jump_a3bb1
		mov    0x28(%esp),%eax
		sub    0xc(%esp),%eax
		add    %eax,%edi
		jmp    jump_a3bd1
	jump_a3bb1:
		testb  $0x1,EXPORT_SYMBOL(lbDisplay)+97 # lbDisplay.DrawFlags >> 8
		je     jump_a3bd1
		xor    %edx,%edx
		xor    %eax,%eax
		mov    0x28(%esp),%dx
		mov    0xc(%esp),%ax
		sub    %eax,%edx
		movswl %di,%edi
		sar    %edx
		add    %edx,%edi
	jump_a3bd1:
		mov    (%esp),%eax
		dec    %eax
		movzwl 0x18(%esp),%ebp
		mov    %eax,0x4(%esp)
		cmp    %eax,%ebp
		jl     jump_a3dfb
	jump_a3be6:
		mov    $0x41,%eax
		call   ac_font_height
		xor    %edx,%edx
		xor    %ah,%ah
		mov    EXPORT_SYMBOL(byte_197160),%dl
		mov    0x20(%esp),%ecx
		add    %edx,%eax
		add    %eax,%ecx
		xor    %edx,%edx
		mov    $0x41,%eax
		mov    %cx,0x20(%esp)
		call   ac_font_height
		mov    %al,%dl
		mov    0x1e(%esp),%eax
		sar    $0x10,%eax
		add    %eax,%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(text_window_y2),%ax
		cmp    %eax,%edx
		jle    jump_a3f71
		mov    0x2c(%esp),%eax
	jump_a3c32:
		add    $0x40,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_a3c39:
		testb  $0x40,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		je     jump_a3c4e
	jump_a3c42:
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		jmp    jump_a3dee
	jump_a3c4e:
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		jmp    jump_a3dee
	jump_a3c5a:
		mov    EXPORT_SYMBOL(lbDisplay)+96,%dl # lbDisplay__DrawFlags
		test   $0x4,%dl
		je     jump_a3c71
	jump_a3c65:
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		jmp    jump_a3dee
	jump_a3c71:
		mov    %dl,%dh
		or     $0x4,%dh
		mov    %dh,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		jmp    jump_a3dee
	jump_a3c81:
		movsbl 0x1(%esi,%ebp,1),%eax
		mov    data_1552e3(%eax),%al
		inc    %ebp
		mov    %al,EXPORT_SYMBOL(lbDisplay)+113 # lbDisplay.DrawColour
		jmp    jump_a3dee
	jump_a3c97:
		add    $0x2,%eax
		jmp    jump_a3e95
	jump_a3c9f:
		cmp    $0x61,%eax
		jl     jump_a3cac
		cmp    $0x7a,%eax
		jg     jump_a3cac
		sub    $0x20,%bl
	jump_a3cac:
		mov    %bl,0x3c(%esp)
	jump_a3cb0:
		testb  $0x40,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		je     jump_a3d47
		xor    %eax,%eax
		mov    0x3c(%esp),%al
		sub    $0x1f,%eax
		imul   $0x6,%eax,%ebx
		mov    EXPORT_SYMBOL(small_font),%edx
		xor    %ecx,%ecx
		mov    EXPORT_SYMBOL(lbFontPtr),%eax
		mov    EXPORT_SYMBOL(lbDisplay)+113,%cl # lbDisplay.DrawColour
		add    %eax,%ebx
		cmp    %edx,%eax
		je     jump_a3cea
		cmp    small2_font,%eax
		jne    jump_a3cee
	jump_a3cea:
		mov    $0x1,%al
		jmp    jump_a3d2c
	jump_a3cee:
		mov    small_med_font,%edx
		cmp    %edx,%eax
		jne    jump_a3d0a
		mov    0x3c(%esp),%ah
		cmp    $0x61,%ah
		jl     jump_a3d1a
		cmp    $0x7a,%ah
		jg     jump_a3d1a
		xor    %dl,%al
		jmp    jump_a3d2c
	jump_a3d0a:
		cmp    med_font,%eax
		je     jump_a3d1a
		cmp    med2_font,%eax
		jne    jump_a3d1e
	jump_a3d1a:
		mov    $0x2,%al
		jmp    jump_a3d2c
	jump_a3d1e:
		cmp    big_font,%eax
		jne    jump_a3d2a
		mov    $0x4,%al
		jmp    jump_a3d2c
	jump_a3d2a:
		xor    %al,%al
	jump_a3d2c:
		mov    0x1e(%esp),%edx
		sar    $0x10,%edx
		and    $0xff,%eax
		sub    %eax,%edx
		movswl %di,%eax
		call   ac_LbSpriteDrawOneColour
		jmp    jump_a3dc4
	jump_a3d47:
		xor    %eax,%eax
		mov    0x3c(%esp),%al
		sub    $0x1f,%eax
		imul   $0x6,%eax,%ebx
		mov    EXPORT_SYMBOL(lbFontPtr),%eax
		mov    EXPORT_SYMBOL(small_font),%ecx
		add    %eax,%ebx
		cmp    %ecx,%eax
		je     jump_a3d6c
		cmp    small2_font,%eax
		jne    jump_a3d70
	jump_a3d6c:
		mov    $0x1,%al
		jmp    jump_a3dae
	jump_a3d70:
		mov    small_med_font,%ecx
		cmp    %ecx,%eax
		jne    jump_a3d8c
		mov    0x3c(%esp),%ch
		cmp    $0x61,%ch
		jl     jump_a3d9c
		cmp    $0x7a,%ch
		jg     jump_a3d9c
		xor    %cl,%al
		jmp    jump_a3dae
	jump_a3d8c:
		cmp    med_font,%eax
		je     jump_a3d9c
		cmp    med2_font,%eax
		jne    jump_a3da0
	jump_a3d9c:
		mov    $0x2,%al
		jmp    jump_a3dae
	jump_a3da0:
		cmp    big_font,%eax
		jne    jump_a3dac
		mov    $0x4,%al
		jmp    jump_a3dae
	jump_a3dac:
		xor    %al,%al
	jump_a3dae:
		mov    0x1e(%esp),%edx
		and    $0xff,%eax
		sar    $0x10,%edx
		sub    %eax,%edx
		movswl %di,%eax
		call   ac_LbSpriteDraw
	jump_a3dc4:
		mov    EXPORT_SYMBOL(lbFontPtr),%ebx
		test   %ebx,%ebx
		je     jump_a3de7
		xor    %eax,%eax
		mov    0x3c(%esp),%al
		sub    $0x1f,%eax
		imul   $0x6,%eax,%eax
		mov    %ebx,%edx
		mov    0x4(%edx,%eax,1),%al
		and    $0xff,%eax
		jmp    jump_a3de9
	jump_a3de7:
		xor    %eax,%eax
	jump_a3de9:
		movswl %di,%edi
		add    %eax,%edi
	jump_a3dee:
		mov    0x4(%esp),%ecx
		inc    %ebp
		cmp    %ecx,%ebp
		jge    jump_a3be6
	jump_a3dfb:
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(lbDisplay)+96,%cx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(lbDisplay)+96,%dx # lbDisplay__DrawFlags
		mov    (%esi,%ebp,1),%al
		and    $0xfb,%bl
		and    $0xbf,%cl
		or     $0x40,%dl
		cmp    $0xe,%al
		jb     jump_a3e44
		jbe    jump_a3c81
		cmp    $0x1c,%al
		jb     jump_a3e3a
		jbe    jump_a3c42
		cmp    $0x1e,%al
		je     jump_a3c65
		jmp    jump_a3e56
	jump_a3e3a:
		cmp    $0x1b,%al
		je     jump_a3c4e
		jmp    jump_a3e56
	jump_a3e44:
		cmp    $0x1,%al
		jb     jump_a3e56
		jbe    jump_a3c5a
		cmp    $0xc,%al
		je     jump_a3c39
	jump_a3e56:
		mov    (%esi,%ebp,1),%al
		mov    %al,0x3c(%esp)
		xor    %eax,%eax
		mov    0x3c(%esp),%al
		cmp    $0x1f,%eax
		jle    jump_a3dee
		mov    EXPORT_SYMBOL(lbFontPtr),%eax
		cmp    small_med_font,%eax
		jne    jump_a3e82
		cmpb   $0x65,language_3str
		je     jump_a3cb0
	jump_a3e82:
		mov    0x3c(%esp),%bl
		xor    %eax,%eax
		mov    %bl,%al
		cmp    $0x7f,%eax
		jle    jump_a3c9f
		xor    %eax,%eax
	jump_a3e95:
		xor    %edx,%edx
		mov    subst_table_lower_to_upper(%eax),%dl
		test   %edx,%edx
		je     jump_a3cac
		cmp    %dl,%bl
		jne    jump_a3c97
		mov    data_15521d(%eax),%bl
		jmp    jump_a3cac
	jump_a3eb8:
		mov    (%esp),%edi
		movzwl 0x18(%esp),%ebp
		dec    %edi
		cmp    %edi,%ebp
		jl     jump_a3f25
		jmp    jump_a3f71
	jump_a3eca:
		testb  $0x40,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		je     jump_a3edf
	jump_a3ed3:
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		jmp    jump_a3f6c
	jump_a3edf:
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		jmp    jump_a3f6c
	jump_a3eeb:
		mov    EXPORT_SYMBOL(lbDisplay)+96,%ah # lbDisplay__DrawFlags
		test   $0x4,%ah
		je     jump_a3f02
	jump_a3ef6:
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		jmp    jump_a3f6c
	jump_a3f02:
		mov    %ah,%dl
		or     $0x4,%dl
		mov    %dl,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		jmp    jump_a3f6c
	jump_a3f12:
		movsbl 0x1(%esi,%ebp,1),%eax
		mov    data_1552e3(%eax),%al
		inc    %ebp
		mov    %al,EXPORT_SYMBOL(lbDisplay)+113 # lbDisplay.DrawColour
		jmp    jump_a3f6c
	jump_a3f25:
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(lbDisplay)+96,%dx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(lbDisplay)+96,%cx # lbDisplay__DrawFlags
		mov    (%esi,%ebp,1),%al
		and    $0xfb,%bl
		and    $0xbf,%dl
		or     $0x40,%cl
		cmp    $0xe,%al
		jb     jump_a3f5e
		jbe    jump_a3f12
		cmp    $0x1c,%al
		jb     jump_a3f58
		jbe    jump_a3ed3
		cmp    $0x1e,%al
		je     jump_a3ef6
		jmp    jump_a3f6c
	jump_a3f58:
		cmp    $0x1b,%al
		je     jump_a3edf
		jmp    jump_a3f6c
	jump_a3f5e:
		cmp    $0x1,%al
		jb     jump_a3f6c
		jbe    jump_a3eeb
		cmp    $0xc,%al
		je     jump_a3eca
	jump_a3f6c:
		inc    %ebp
		cmp    %edi,%ebp
		jl     jump_a3f25
	jump_a3f71:
		mov    (%esp),%eax
		mov    (%esi,%eax,1),%dh
		mov    0x1c(%esp),%edi
		test   %dh,%dh
		je     jump_a3f83
		incl   0x2c(%esp)
	jump_a3f83:
		mov    (%esp),%eax
		xor    %edx,%edx
		mov    %eax,0x18(%esp)
		mov    %eax,0x14(%esp)
		mov    %edx,0xc(%esp)
		jmp    jump_a4030
	jump_a3f99:
		mov    (%esp),%edx
		mov    %edx,0x14(%esp)
		xor    %edx,%edx
		mov    %al,%dl
		cmp    $0x2d,%edx
		jne    jump_a3fd2
		mov    EXPORT_SYMBOL(lbFontPtr),%ebx
		test   %ebx,%ebx
		je     jump_a3fc5
		sub    $0x1f,%edx
		imul   $0x6,%edx,%edx
		mov    0x4(%edx,%ebx,1),%dl
		and    $0xff,%edx
		jmp    jump_a3fc7
	jump_a3fc5:
		xor    %edx,%edx
	jump_a3fc7:
		xor    %ebx,%ebx
		mov    0xc(%esp),%bx
		add    %ebx,%edx
		jmp    jump_a3fd6
	jump_a3fd2:
		mov    0xc(%esp),%edx
	jump_a3fd6:
		mov    %edx,0x24(%esp)
	jump_a3fda:
		xor    %edx,%edx
		mov    %al,%dl
		cmp    $0x1f,%edx
		jle    jump_a4030
		mov    EXPORT_SYMBOL(lbFontPtr),%ebx
		test   %ebx,%ebx
		je     jump_a4001
		sub    $0x1f,%edx
		imul   $0x6,%edx,%edx
		mov    %ebx,%eax
		mov    0x4(%edx,%eax,1),%dl
		and    $0xff,%edx
		jmp    jump_a4003
	jump_a4001:
		xor    %edx,%edx
	jump_a4003:
		xor    %eax,%eax
		mov    0xc(%esp),%ax
		add    %edx,%eax
		mov    %eax,0xc(%esp)
		jmp    jump_a4030
	jump_a4012:
		cmp    $0x1b,%al
		jb     jump_a3fda
		cmp    $0x1c,%al
		jbe    jump_a4030
		jmp    jump_a3fda
	jump_a401c:
		cmp    $0xa,%al
		jb     jump_a402c
		jbe    jump_a3b76
		cmp    $0xc,%al
		je     jump_a4030
		jmp    jump_a3fda
	jump_a402c:
		cmp    $0x1,%al
		jne    jump_a3fda
	jump_a4030:
		mov    0xc(%esp),%eax
		cmp    0x28(%esp),%ax
		jbe    jump_a3ac8
		mov    0x14(%esp),%eax
		mov    0x18(%esp),%ecx
		cmp    %cx,%ax
		jne    jump_a4645
		mov    (%esp),%eax
		add    %esi,%eax
		movsbl (%eax),%edx
		test   %edx,%edx
		je     jump_a4090
		mov    EXPORT_SYMBOL(lbFontPtr),%ecx
		test   %ecx,%ecx
		je     jump_a4081
		mov    (%eax),%al
		and    $0xff,%eax
		sub    $0x1f,%eax
		imul   $0x6,%eax,%eax
		mov    %ecx,%edx
		mov    0x4(%edx,%eax,1),%dl
		and    $0xff,%edx
		jmp    jump_a4083
	jump_a4081:
		xor    %edx,%edx
	jump_a4083:
		xor    %eax,%eax
		mov    0xc(%esp),%ax
		sub    %edx,%eax
		mov    %eax,0xc(%esp)
	jump_a4090:
		mov    (%esp),%eax
		add    %esi,%eax
	jump_a4095:
		mov    (%esp),%ebp
		movsbl -0x1(%eax),%edx
		dec    %ebp
		dec    %eax
		mov    %ebp,(%esp)
		cmp    $0x20,%edx
		jl     jump_a4095
		mov    EXPORT_SYMBOL(lbFontPtr),%edx
		test   %edx,%edx
		je     jump_a40c9
		mov    (%eax),%al
		and    $0xff,%eax
		sub    $0x1f,%eax
		imul   $0x6,%eax,%edx
		mov    EXPORT_SYMBOL(lbFontPtr),%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x4(%eax),%dl
	jump_a40c9:
		xor    %eax,%eax
		mov    0xc(%esp),%ax
		sub    %edx,%eax
		mov    %eax,0xc(%esp)
		mov    (%esp),%eax
		add    %esi,%eax
	jump_a40db:
		mov    (%esp),%ebx
		movsbl -0x1(%eax),%edx
		dec    %ebx
		dec    %eax
		mov    %ebx,(%esp)
		cmp    $0x20,%edx
		jl     jump_a40db
		mov    EXPORT_SYMBOL(lbFontPtr),%ecx
		test   %ecx,%ecx
		je     jump_a4111
		mov    (%eax),%al
		and    $0xff,%eax
		sub    $0x1f,%eax
		imul   $0x6,%eax,%eax
		mov    %ecx,%edx
		mov    0x4(%edx,%eax,1),%dl
		and    $0xff,%edx
		jmp    jump_a4113
	jump_a4111:
		xor    %edx,%edx
	jump_a4113:
		xor    %eax,%eax
		mov    0xc(%esp),%ax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(lbFontPtr),%ebp
		mov    %eax,0xc(%esp)
		test   %ebp,%ebp
		je     jump_a4135
		mov    0x58(%ebp),%dl
		and    $0xff,%edx
		jmp    jump_a4137
	jump_a4135:
		xor    %edx,%edx
	jump_a4137:
		xor    %eax,%eax
		mov    0xc(%esp),%ax
		add    %edx,%eax
		mov    0x10(%esp),%ecx
		mov    %eax,0xc(%esp)
		cmp    0x2c(%esp),%cx
		ja     jump_a4565
		xor    %eax,%eax
		mov    0x1e(%esp),%edx
		mov    EXPORT_SYMBOL(text_window_y1),%ax
		sar    $0x10,%edx
		cmp    %eax,%edx
		jl     jump_a450f
		testb  $0x80,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		je     jump_a417d
		mov    0x28(%esp),%eax
		sub    0xc(%esp),%eax
		jmp    jump_a419d
	jump_a417d:
		testb  $0x1,EXPORT_SYMBOL(lbDisplay)+97 # lbDisplay.DrawFlags >> 8
		je     jump_a419f
		xor    %edx,%edx
		xor    %eax,%eax
		mov    0x28(%esp),%dx
		mov    0xc(%esp),%ax
		sub    %eax,%edx
		mov    %edx,%eax
		movswl %di,%edi
		sar    %eax
	jump_a419d:
		add    %eax,%edi
	jump_a419f:
		movzwl 0x18(%esp),%ebp
		cmp    (%esp),%ebp
		jl     jump_a439e
	jump_a41ad:
		testb  $0x40,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		je     jump_a44a5
		mov    EXPORT_SYMBOL(lbFontPtr),%eax
		mov    EXPORT_SYMBOL(small_font),%edx
		xor    %ecx,%ecx
		lea    0x54(%eax),%ebx
		mov    EXPORT_SYMBOL(lbDisplay)+113,%cl # lbDisplay.DrawColour
		cmp    %edx,%eax
		je     jump_a41e0
		cmp    small2_font,%eax
		jne    jump_a445b
	jump_a41e0:
		mov    $0x1,%al
		jmp    jump_a4489
	jump_a41e7:
		testb  $0x40,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		je     jump_a41fc
	jump_a41f0:
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		jmp    jump_a4392
	jump_a41fc:
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		jmp    jump_a4392
	jump_a4208:
		mov    EXPORT_SYMBOL(lbDisplay)+96,%cl # lbDisplay__DrawFlags
		test   $0x4,%cl
		je     jump_a421f
	jump_a4213:
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		jmp    jump_a4392
	jump_a421f:
		mov    %cl,%ch
		or     $0x4,%ch
		mov    %ch,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		jmp    jump_a4392
	jump_a422f:
		movsbl 0x1(%esi,%ebp,1),%eax
		mov    data_1552e3(%eax),%al
		inc    %ebp
		mov    %al,EXPORT_SYMBOL(lbDisplay)+113 # lbDisplay.DrawColour
		jmp    jump_a4392
	jump_a4245:
		add    $0x2,%eax
		jmp    jump_a4438
	jump_a424d:
		cmp    $0x61,%eax
		jl     jump_a425a
		cmp    $0x7a,%eax
		jg     jump_a425a
		sub    $0x20,%bl
	jump_a425a:
		mov    %bl,0x34(%esp)
	jump_a425e:
		testb  $0x40,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		je     jump_a42ef
		xor    %eax,%eax
		mov    0x34(%esp),%al
		sub    $0x1f,%eax
		imul   $0x6,%eax,%ebx
		mov    EXPORT_SYMBOL(small_font),%edx
		xor    %ecx,%ecx
		mov    EXPORT_SYMBOL(lbFontPtr),%eax
		mov    EXPORT_SYMBOL(lbDisplay)+113,%cl # lbDisplay.DrawColour
		add    %eax,%ebx
		cmp    %edx,%eax
		je     jump_a4298
		cmp    small2_font,%eax
		jne    jump_a429c
	jump_a4298:
		mov    $0x1,%al
		jmp    jump_a42d4
	jump_a429c:
		cmp    small_med_font,%eax
		jne    jump_a42b2
		mov    0x34(%esp),%al
		cmp    $0x61,%al
		jl     jump_a42c2
		cmp    $0x7a,%al
		jg     jump_a42c2
		jmp    jump_a42d2
	jump_a42b2:
		cmp    med_font,%eax
		je     jump_a42c2
		cmp    med2_font,%eax
		jne    jump_a42c6
	jump_a42c2:
		mov    $0x2,%al
		jmp    jump_a42d4
	jump_a42c6:
		cmp    big_font,%eax
		jne    jump_a42d2
		mov    $0x4,%al
		jmp    jump_a42d4
	jump_a42d2:
		xor    %al,%al
	jump_a42d4:
		mov    0x1e(%esp),%edx
		sar    $0x10,%edx
		and    $0xff,%eax
		sub    %eax,%edx
		movswl %di,%eax
		call   ac_LbSpriteDrawOneColour
		jmp    jump_a4368
	jump_a42ef:
		xor    %eax,%eax
		mov    0x34(%esp),%al
		sub    $0x1f,%eax
		imul   $0x6,%eax,%ebx
		mov    EXPORT_SYMBOL(lbFontPtr),%eax
		mov    EXPORT_SYMBOL(small_font),%ecx
		add    %eax,%ebx
		cmp    %ecx,%eax
		je     jump_a4314
		cmp    small2_font,%eax
		jne    jump_a4318
	jump_a4314:
		mov    $0x1,%al
		jmp    jump_a4352
	jump_a4318:
		cmp    small_med_font,%eax
		jne    jump_a4330
		mov    0x34(%esp),%cl
		cmp    $0x61,%cl
		jl     jump_a4340
		cmp    $0x7a,%cl
		jg     jump_a4340
		jmp    jump_a4350
	jump_a4330:
		cmp    med_font,%eax
		je     jump_a4340
		cmp    med2_font,%eax
		jne    jump_a4344
	jump_a4340:
		mov    $0x2,%al
		jmp    jump_a4352
	jump_a4344:
		cmp    big_font,%eax
		jne    jump_a4350
		mov    $0x4,%al
		jmp    jump_a4352
	jump_a4350:
		xor    %al,%al
	jump_a4352:
		mov    0x1e(%esp),%edx
		and    $0xff,%eax
		sar    $0x10,%edx
		sub    %eax,%edx
		movswl %di,%eax
		call   ac_LbSpriteDraw
	jump_a4368:
		mov    EXPORT_SYMBOL(lbFontPtr),%ebx
		test   %ebx,%ebx
		je     jump_a438b
		xor    %eax,%eax
		mov    0x34(%esp),%al
		sub    $0x1f,%eax
		imul   $0x6,%eax,%eax
		mov    %ebx,%edx
		mov    0x4(%edx,%eax,1),%al
		and    $0xff,%eax
		jmp    jump_a438d
	jump_a438b:
		xor    %eax,%eax
	jump_a438d:
		movswl %di,%edi
		add    %eax,%edi
	jump_a4392:
		mov    (%esp),%eax
		inc    %ebp
		cmp    %eax,%ebp
		jge    jump_a41ad
	jump_a439e:
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(lbDisplay)+96,%cx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(lbDisplay)+96,%dx # lbDisplay__DrawFlags
		mov    (%esi,%ebp,1),%al
		and    $0xfb,%bl
		and    $0xbf,%cl
		or     $0x40,%dl
		cmp    $0xe,%al
		jb     jump_a43e7
		jbe    jump_a422f
		cmp    $0x1c,%al
		jb     jump_a43dd
		jbe    jump_a41f0
		cmp    $0x1e,%al
		je     jump_a4213
		jmp    jump_a43f9
	jump_a43dd:
		cmp    $0x1b,%al
		je     jump_a41fc
		jmp    jump_a43f9
	jump_a43e7:
		cmp    $0x1,%al
		jb     jump_a43f9
		jbe    jump_a4208
		cmp    $0xc,%al
		je     jump_a41e7
	jump_a43f9:
		mov    (%esi,%ebp,1),%al
		mov    %al,0x34(%esp)
		xor    %eax,%eax
		mov    0x34(%esp),%al
		cmp    $0x1f,%eax
		jle    jump_a4392
		mov    EXPORT_SYMBOL(lbFontPtr),%eax
		cmp    small_med_font,%eax
		jne    jump_a4425
		cmpb   $0x65,language_3str
		je     jump_a425e
	jump_a4425:
		mov    0x34(%esp),%bl
		xor    %eax,%eax
		mov    %bl,%al
		cmp    $0x7f,%eax
		jle    jump_a424d
		xor    %eax,%eax
	jump_a4438:
		xor    %edx,%edx
		mov    subst_table_lower_to_upper(%eax),%dl
		test   %edx,%edx
		je     jump_a425a
		cmp    %dl,%bl
		jne    jump_a4245
		mov    data_15521d(%eax),%bl
		jmp    jump_a425a
	jump_a445b:
		cmp    small_med_font,%eax
		jne    jump_a4467
		mov    $0x2,%al
		jmp    jump_a4489
	jump_a4467:
		cmp    med_font,%eax
		je     jump_a4477
		cmp    med2_font,%eax
		jne    jump_a447b
	jump_a4477:
		mov    $0x2,%al
		jmp    jump_a4489
	jump_a447b:
		cmp    big_font,%eax
		jne    jump_a4487
		mov    $0x4,%al
		jmp    jump_a4489
	jump_a4487:
		xor    %al,%al
	jump_a4489:
		xor    %edx,%edx
		mov    %al,%dl
		mov    0x1e(%esp),%eax
		sar    $0x10,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		movswl %di,%eax
		call   ac_LbSpriteDrawOneColour
		jmp    jump_a4508
	jump_a44a5:
		mov    EXPORT_SYMBOL(lbFontPtr),%eax
		mov    EXPORT_SYMBOL(small_font),%edx
		lea    0x54(%eax),%ebx
		cmp    %edx,%eax
		je     jump_a44bf
		cmp    small2_font,%eax
		jne    jump_a44c3
	jump_a44bf:
		mov    $0x1,%al
		jmp    jump_a44f1
	jump_a44c3:
		cmp    small_med_font,%eax
		jne    jump_a44cf
		mov    $0x2,%al
		jmp    jump_a44f1
	jump_a44cf:
		cmp    med_font,%eax
		je     jump_a44df
		cmp    med2_font,%eax
		jne    jump_a44e3
	jump_a44df:
		mov    $0x2,%al
		jmp    jump_a44f1
	jump_a44e3:
		cmp    big_font,%eax
		jne    jump_a44ef
		mov    $0x4,%al
		jmp    jump_a44f1
	jump_a44ef:
		xor    %al,%al
	jump_a44f1:
		xor    %edx,%edx
		mov    %al,%dl
		mov    0x1e(%esp),%eax
		sar    $0x10,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		movswl %di,%eax
		call   ac_LbSpriteDraw
	jump_a4508:
		cmpl   $0x0,EXPORT_SYMBOL(lbFontPtr)
	jump_a450f:
		mov    $0x41,%eax
		xor    %edx,%edx
		call   ac_font_height
		mov    %al,%dl
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(byte_197160),%al
		add    %edx,%eax
		mov    0x20(%esp),%edx
		add    %eax,%edx
		mov    $0x41,%eax
		mov    %dx,0x20(%esp)
		call   ac_font_height
		mov    0x1e(%esp),%edx
		and    $0xff,%eax
		sar    $0x10,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_y2),%dx
		cmp    %edx,%eax
		jle    jump_a461e
		mov    0x2c(%esp),%eax
		add    $0x40,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_a4565:
		mov    (%esp),%edi
		movzwl 0x18(%esp),%ebp
		dec    %edi
		cmp    %edi,%ebp
		jl     jump_a45d2
		jmp    jump_a461e
	jump_a4577:
		testb  $0x40,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		je     jump_a458c
	jump_a4580:
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		jmp    jump_a4619
	jump_a458c:
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		jmp    jump_a4619
	jump_a4598:
		mov    EXPORT_SYMBOL(lbDisplay)+96,%cl # lbDisplay__DrawFlags
		test   $0x4,%cl
		je     jump_a45af
	jump_a45a3:
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		jmp    jump_a4619
	jump_a45af:
		mov    %cl,%ch
		or     $0x4,%ch
		mov    %ch,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		jmp    jump_a4619
	jump_a45bf:
		movsbl 0x1(%esi,%ebp,1),%eax
		mov    data_1552e3(%eax),%al
		inc    %ebp
		mov    %al,EXPORT_SYMBOL(lbDisplay)+113 # lbDisplay.DrawColour
		jmp    jump_a4619
	jump_a45d2:
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(lbDisplay)+96,%dx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(lbDisplay)+96,%cx # lbDisplay__DrawFlags
		mov    (%esi,%ebp,1),%al
		and    $0xfb,%bl
		and    $0xbf,%dl
		or     $0x40,%cl
		cmp    $0xe,%al
		jb     jump_a460b
		jbe    jump_a45bf
		cmp    $0x1c,%al
		jb     jump_a4605
		jbe    jump_a4580
		cmp    $0x1e,%al
		je     jump_a45a3
		jmp    jump_a4619
	jump_a4605:
		cmp    $0x1b,%al
		je     jump_a458c
		jmp    jump_a4619
	jump_a460b:
		cmp    $0x1,%al
		jb     jump_a4619
		jbe    jump_a4598
		cmp    $0xc,%al
		je     jump_a4577
	jump_a4619:
		inc    %ebp
		cmp    %edi,%ebp
		jl     jump_a45d2
	jump_a461e:
		mov    (%esp),%eax
		mov    0x1c(%esp),%edi
		xor    %ebx,%ebx
		mov    %eax,0x14(%esp)
		mov    %eax,0x18(%esp)
		mov    0x2c(%esp),%eax
		mov    %ebx,0x24(%esp)
		inc    %eax
		mov    %ebx,0xc(%esp)
		mov    %eax,0x2c(%esp)
		jmp    jump_a3ac8
	jump_a4645:
		mov    0x2c(%esp),%eax
		cmp    0x10(%esp),%ax
		jb     jump_a4983
		xor    %edx,%edx
		mov    0x1e(%esp),%eax
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		sar    $0x10,%eax
		cmp    %edx,%eax
		jl     jump_a492d
		testb  $0x80,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		je     jump_a467f
		mov    0x28(%esp),%eax
		sub    0x24(%esp),%eax
		jmp    jump_a469f
	jump_a467f:
		testb  $0x1,EXPORT_SYMBOL(lbDisplay)+97 # lbDisplay.DrawFlags >> 8
		je     jump_a46a1
		xor    %edx,%edx
		xor    %eax,%eax
		mov    0x28(%esp),%dx
		mov    0x24(%esp),%ax
		sub    %eax,%edx
		mov    %edx,%eax
		movswl %di,%edi
		sar    %eax
	jump_a469f:
		add    %eax,%edi
	jump_a46a1:
		movzwl 0x18(%esp),%ebp
		jmp    jump_a4861
	jump_a46ab:
		testb  $0x40,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		je     jump_a46c0
	jump_a46b4:
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		jmp    jump_a4860
	jump_a46c0:
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		jmp    jump_a4860
	jump_a46cc:
		mov    EXPORT_SYMBOL(lbDisplay)+96,%ah # lbDisplay__DrawFlags
		test   $0x4,%ah
		je     jump_a46e3
	jump_a46d7:
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		jmp    jump_a4860
	jump_a46e3:
		mov    %ah,%dl
		or     $0x4,%dl
		mov    %dl,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		jmp    jump_a4860
	jump_a46f3:
		movsbl 0x1(%esi,%ebp,1),%eax
		mov    data_1552e3(%eax),%al
		inc    %ebp
		mov    %al,EXPORT_SYMBOL(lbDisplay)+113 # lbDisplay.DrawColour
		jmp    jump_a4860
	jump_a4709:
		add    $0x2,%eax
		jmp    jump_a490a
	jump_a4711:
		cmp    $0x61,%eax
		jl     jump_a471e
		cmp    $0x7a,%eax
		jg     jump_a471e
		sub    $0x20,%bl
	jump_a471e:
		mov    %bl,0x38(%esp)
	jump_a4722:
		testb  $0x40,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		je     jump_a47b9
		xor    %eax,%eax
		mov    0x38(%esp),%al
		sub    $0x1f,%eax
		imul   $0x6,%eax,%ebx
		mov    EXPORT_SYMBOL(small_font),%edx
		xor    %ecx,%ecx
		mov    EXPORT_SYMBOL(lbFontPtr),%eax
		mov    EXPORT_SYMBOL(lbDisplay)+113,%cl # lbDisplay.DrawColour
		add    %eax,%ebx
		cmp    %edx,%eax
		je     jump_a475c
		cmp    small2_font,%eax
		jne    jump_a4760
	jump_a475c:
		mov    $0x1,%al
		jmp    jump_a479e
	jump_a4760:
		mov    small_med_font,%edx
		cmp    %edx,%eax
		jne    jump_a477c
		mov    0x38(%esp),%ah
		cmp    $0x61,%ah
		jl     jump_a478c
		cmp    $0x7a,%ah
		jg     jump_a478c
		xor    %dl,%al
		jmp    jump_a479e
	jump_a477c:
		cmp    med_font,%eax
		je     jump_a478c
		cmp    med2_font,%eax
		jne    jump_a4790
	jump_a478c:
		mov    $0x2,%al
		jmp    jump_a479e
	jump_a4790:
		cmp    big_font,%eax
		jne    jump_a479c
		mov    $0x4,%al
		jmp    jump_a479e
	jump_a479c:
		xor    %al,%al
	jump_a479e:
		mov    0x1e(%esp),%edx
		sar    $0x10,%edx
		and    $0xff,%eax
		sub    %eax,%edx
		movswl %di,%eax
		call   ac_LbSpriteDrawOneColour
		jmp    jump_a4836
	jump_a47b9:
		xor    %eax,%eax
		mov    0x38(%esp),%al
		sub    $0x1f,%eax
		imul   $0x6,%eax,%ebx
		mov    EXPORT_SYMBOL(lbFontPtr),%eax
		mov    EXPORT_SYMBOL(small_font),%ecx
		add    %eax,%ebx
		cmp    %ecx,%eax
		je     jump_a47de
		cmp    small2_font,%eax
		jne    jump_a47e2
	jump_a47de:
		mov    $0x1,%al
		jmp    jump_a4820
	jump_a47e2:
		mov    small_med_font,%ecx
		cmp    %ecx,%eax
		jne    jump_a47fe
		mov    0x38(%esp),%ch
		cmp    $0x61,%ch
		jl     jump_a480e
		cmp    $0x7a,%ch
		jg     jump_a480e
		xor    %cl,%al
		jmp    jump_a4820
	jump_a47fe:
		cmp    med_font,%eax
		je     jump_a480e
		cmp    med2_font,%eax
		jne    jump_a4812
	jump_a480e:
		mov    $0x2,%al
		jmp    jump_a4820
	jump_a4812:
		cmp    big_font,%eax
		jne    jump_a481e
		mov    $0x4,%al
		jmp    jump_a4820
	jump_a481e:
		xor    %al,%al
	jump_a4820:
		mov    0x1e(%esp),%edx
		and    $0xff,%eax
		sar    $0x10,%edx
		sub    %eax,%edx
		movswl %di,%eax
		call   ac_LbSpriteDraw
	jump_a4836:
		mov    EXPORT_SYMBOL(lbFontPtr),%ebx
		test   %ebx,%ebx
		je     jump_a4859
		xor    %eax,%eax
		mov    0x38(%esp),%al
		sub    $0x1f,%eax
		imul   $0x6,%eax,%edx
		mov    %ebx,%eax
		mov    0x4(%edx,%eax,1),%al
		and    $0xff,%eax
		jmp    jump_a485b
	jump_a4859:
		xor    %eax,%eax
	jump_a485b:
		movswl %di,%edi
		add    %eax,%edi
	jump_a4860:
		inc    %ebp
	jump_a4861:
		xor    %eax,%eax
		mov    0x14(%esp),%ax
		cmp    %eax,%ebp
		jge    jump_a492d
		mov    EXPORT_SYMBOL(lbDisplay)+96,%dx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(lbDisplay)+96,%cx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		mov    (%esi,%ebp,1),%al
		and    $0xfb,%dl
		and    $0xbf,%cl
		or     $0x40,%bl
		cmp    $0xe,%al
		jb     jump_a48b9
		jbe    jump_a46f3
		cmp    $0x1c,%al
		jb     jump_a48af
		jbe    jump_a46b4
		cmp    $0x1e,%al
		je     jump_a46d7
		jmp    jump_a48cb
	jump_a48af:
		cmp    $0x1b,%al
		je     jump_a46c0
		jmp    jump_a48cb
	jump_a48b9:
		cmp    $0x1,%al
		jb     jump_a48cb
		jbe    jump_a46cc
		cmp    $0xc,%al
		je     jump_a46ab
	jump_a48cb:
		mov    (%esi,%ebp,1),%al
		mov    %al,0x38(%esp)
		xor    %eax,%eax
		mov    0x38(%esp),%al
		cmp    $0x1f,%eax
		jle    jump_a4860
		mov    EXPORT_SYMBOL(lbFontPtr),%eax
		cmp    small_med_font,%eax
		jne    jump_a48f7
		cmpb   $0x65,language_3str
		je     jump_a4722
	jump_a48f7:
		mov    0x38(%esp),%bl
		xor    %eax,%eax
		mov    %bl,%al
		cmp    $0x7f,%eax
		jle    jump_a4711
		xor    %eax,%eax
	jump_a490a:
		xor    %edx,%edx
		mov    subst_table_lower_to_upper(%eax),%dl
		test   %edx,%edx
		je     jump_a471e
		cmp    %dl,%bl
		jne    jump_a4709
		mov    data_15521d(%eax),%bl
		jmp    jump_a471e
	jump_a492d:
		mov    $0x41,%eax
		xor    %edx,%edx
		call   ac_font_height
		mov    %al,%dl
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(byte_197160),%al
		mov    0x20(%esp),%ebx
		add    %edx,%eax
		add    %eax,%ebx
		mov    $0x41,%eax
		mov    %bx,0x20(%esp)
		call   ac_font_height
		mov    0x1e(%esp),%edx
		and    $0xff,%eax
		sar    $0x10,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(text_window_y2),%dx
		cmp    %edx,%eax
		jle    jump_a4a49
		mov    0x2c(%esp),%eax
		add    $0x40,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_a4983:
		movzwl %cx,%ebp
		mov    (%esp),%ecx
		dec    %ecx
		cmp    %ecx,%ebp
		jl     jump_a49ee
		jmp    jump_a4a49
	jump_a4993:
		testb  $0x40,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		je     jump_a49a8
	jump_a499c:
		mov    %di,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		jmp    jump_a4a44
	jump_a49a8:
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		jmp    jump_a4a44
	jump_a49b4:
		mov    EXPORT_SYMBOL(lbDisplay)+96,%ah # lbDisplay__DrawFlags
		test   $0x4,%ah
		je     jump_a49cb
	jump_a49bf:
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		jmp    jump_a4a44
	jump_a49cb:
		mov    %ah,%dl
		or     $0x4,%dl
		mov    %dl,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		jmp    jump_a4a44
	jump_a49db:
		movsbl 0x1(%esi,%ebp,1),%eax
		mov    data_1552e3(%eax),%al
		inc    %ebp
		mov    %al,EXPORT_SYMBOL(lbDisplay)+113 # lbDisplay.DrawColour
		jmp    jump_a4a44
	jump_a49ee:
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(lbDisplay)+96,%di # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(lbDisplay)+96,%dx # lbDisplay__DrawFlags
		mov    (%esi,%ebp,1),%al
		and    $0xfb,%bl
		and    $0xffbf,%edi
		or     $0x40,%dl
		cmp    $0xe,%al
		jb     jump_a4a32
		jbe    jump_a49db
		cmp    $0x1c,%al
		jb     jump_a4a28
		jbe    jump_a499c
		cmp    $0x1e,%al
		je     jump_a49bf
		jmp    jump_a4a44
	jump_a4a28:
		cmp    $0x1b,%al
		je     jump_a49a8
		jmp    jump_a4a44
	jump_a4a32:
		cmp    $0x1,%al
		jb     jump_a4a44
		jbe    jump_a49b4
		cmp    $0xc,%al
		je     jump_a4993
	jump_a4a44:
		inc    %ebp
		cmp    %ecx,%ebp
		jl     jump_a49ee
	jump_a4a49:
		mov    0x14(%esp),%eax
		mov    0xc(%esp),%edi
		mov    %eax,0x18(%esp)
		mov    0x24(%esp),%eax
		mov    0x2c(%esp),%ecx
		sub    %eax,%edi
		xor    %eax,%eax
		inc    %ecx
		mov    0x14(%esp),%ax
		mov    %ecx,0x2c(%esp)
		mov    -0x1(%esi,%eax,1),%dh
		mov    %edi,0xc(%esp)
		cmp    $0x20,%dh
		jne    jump_a4a9c
		mov    EXPORT_SYMBOL(lbFontPtr),%ecx
		test   %ecx,%ecx
		je     jump_a4a8d
		mov    0xa(%ecx),%dl
		and    $0xff,%edx
		jmp    jump_a4a8f
	jump_a4a8d:
		xor    %edx,%edx
	jump_a4a8f:
		xor    %eax,%eax
		mov    0xc(%esp),%ax
		sub    %edx,%eax
		mov    %eax,0xc(%esp)
	jump_a4a9c:
		mov    0x1c(%esp),%edi
		jmp    jump_a3ac8
	jump_a4aa5:
		mov    0x2c(%esp),%eax
		cmp    0x10(%esp),%ax
		jb     jump_a4db4
		xor    %eax,%eax
		mov    0x1e(%esp),%edx
		mov    EXPORT_SYMBOL(text_window_y1),%ax
		sar    $0x10,%edx
		cmp    %eax,%edx
		jl     jump_a4b15
		testb  $0x80,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		je     jump_a4ade
		mov    0x28(%esp),%eax
		sub    0xc(%esp),%eax
		jmp    jump_a4afe
	jump_a4ade:
		testb  $0x1,EXPORT_SYMBOL(lbDisplay)+97 # lbDisplay.DrawFlags >> 8
		je     jump_a4b00
		xor    %edx,%edx
		xor    %eax,%eax
		mov    0x28(%esp),%dx
		mov    0xc(%esp),%ax
		sub    %eax,%edx
		mov    %edx,%eax
		movswl %di,%edi
		sar    %eax
	jump_a4afe:
		add    %eax,%edi
	jump_a4b00:
		mov    (%esp),%eax
		dec    %eax
		movzwl 0x18(%esp),%ebp
		mov    %eax,0x8(%esp)
		cmp    %eax,%ebp
		jl     jump_a4cf3
	jump_a4b15:
		incl   0x2c(%esp)
		mov    0x2c(%esp),%eax
		add    $0x40,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_a4b24:
		testb  $0x40,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		je     jump_a4b39
	jump_a4b2d:
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		jmp    jump_a4cdb
	jump_a4b39:
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		jmp    jump_a4cdb
	jump_a4b45:
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bl # lbDisplay__DrawFlags
		test   $0x4,%bl
		je     jump_a4b5c
	jump_a4b50:
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		jmp    jump_a4cdb
	jump_a4b5c:
		mov    %bl,%bh
		or     $0x4,%bh
		mov    %bh,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		jmp    jump_a4cdb
	jump_a4b6c:
		movsbl 0x1(%esi,%ebp,1),%eax
		mov    data_1552e3(%eax),%al
		inc    %ebp
		mov    %al,EXPORT_SYMBOL(lbDisplay)+113 # lbDisplay.DrawColour
		jmp    jump_a4cdb
	jump_a4b82:
		add    $0x2,%eax
		jmp    jump_a4d91
	jump_a4b8a:
		cmp    $0x61,%eax
		jl     jump_a4b97
		cmp    $0x7a,%eax
		jg     jump_a4b97
		sub    $0x20,%bl
	jump_a4b97:
		mov    %bl,0x30(%esp)
	jump_a4b9b:
		testb  $0x40,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		je     jump_a4c33
		xor    %eax,%eax
		mov    0x30(%esp),%al
		sub    $0x1f,%eax
		imul   $0x6,%eax,%ebx
		mov    EXPORT_SYMBOL(small_font),%edx
		xor    %ecx,%ecx
		mov    EXPORT_SYMBOL(lbFontPtr),%eax
		mov    EXPORT_SYMBOL(lbDisplay)+113,%cl # lbDisplay.DrawColour
		add    %eax,%ebx
		cmp    %edx,%eax
		je     jump_a4bd5
		cmp    small2_font,%eax
		jne    jump_a4bd9
	jump_a4bd5:
		mov    $0x1,%al
		jmp    jump_a4c17
	jump_a4bd9:
		mov    small_med_font,%edx
		cmp    %edx,%eax
		jne    jump_a4bf5
		mov    0x30(%esp),%dh
		cmp    $0x61,%dh
		jl     jump_a4c05
		cmp    $0x7a,%dh
		jg     jump_a4c05
		xor    %dl,%al
		jmp    jump_a4c17
	jump_a4bf5:
		cmp    med_font,%eax
		je     jump_a4c05
		cmp    med2_font,%eax
		jne    jump_a4c09
	jump_a4c05:
		mov    $0x2,%al
		jmp    jump_a4c17
	jump_a4c09:
		cmp    big_font,%eax
		jne    jump_a4c15
		mov    $0x4,%al
		jmp    jump_a4c17
	jump_a4c15:
		xor    %al,%al
	jump_a4c17:
		xor    %edx,%edx
		mov    %al,%dl
		mov    0x1e(%esp),%eax
		sar    $0x10,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		movswl %di,%eax
		call   ac_LbSpriteDrawOneColour
		jmp    jump_a4cb1
	jump_a4c33:
		xor    %eax,%eax
		mov    0x30(%esp),%al
		sub    $0x1f,%eax
		imul   $0x6,%eax,%ebx
		mov    EXPORT_SYMBOL(lbFontPtr),%eax
		mov    EXPORT_SYMBOL(small_font),%ecx
		add    %eax,%ebx
		cmp    %ecx,%eax
		je     jump_a4c58
		cmp    small2_font,%eax
		jne    jump_a4c5c
	jump_a4c58:
		mov    $0x1,%al
		jmp    jump_a4c9a
	jump_a4c5c:
		mov    small_med_font,%ecx
		cmp    %ecx,%eax
		jne    jump_a4c78
		mov    0x30(%esp),%ah
		cmp    $0x61,%ah
		jl     jump_a4c88
		cmp    $0x7a,%ah
		jg     jump_a4c88
		xor    %cl,%al
		jmp    jump_a4c9a
	jump_a4c78:
		cmp    med_font,%eax
		je     jump_a4c88
		cmp    med2_font,%eax
		jne    jump_a4c8c
	jump_a4c88:
		mov    $0x2,%al
		jmp    jump_a4c9a
	jump_a4c8c:
		cmp    big_font,%eax
		jne    jump_a4c98
		mov    $0x4,%al
		jmp    jump_a4c9a
	jump_a4c98:
		xor    %al,%al
	jump_a4c9a:
		xor    %edx,%edx
		mov    %al,%dl
		mov    0x1e(%esp),%eax
		sar    $0x10,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		movswl %di,%eax
		call   ac_LbSpriteDraw
	jump_a4cb1:
		mov    EXPORT_SYMBOL(lbFontPtr),%ebx
		test   %ebx,%ebx
		je     jump_a4cd4
		xor    %eax,%eax
		mov    0x30(%esp),%al
		sub    $0x1f,%eax
		imul   $0x6,%eax,%edx
		mov    %ebx,%eax
		mov    0x4(%edx,%eax,1),%al
		and    $0xff,%eax
		jmp    jump_a4cd6
	jump_a4cd4:
		xor    %eax,%eax
	jump_a4cd6:
		movswl %di,%edi
		add    %eax,%edi
	jump_a4cdb:
		mov    0x8(%esp),%ecx
		inc    %ebp
		cmp    %ecx,%ebp
		jl     jump_a4cf3
		incl   0x2c(%esp)
		mov    0x2c(%esp),%eax
		add    $0x40,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_a4cf3:
		mov    EXPORT_SYMBOL(lbDisplay)+96,%dx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(lbDisplay)+96,%cx # lbDisplay__DrawFlags
		mov    (%esi,%ebp,1),%al
		and    $0xfb,%dl
		or     $0x40,%cl
		and    $0xbf,%bl
		cmp    $0xe,%al
		jb     jump_a4d3c
		jbe    jump_a4b6c
		cmp    $0x1c,%al
		jb     jump_a4d32
		jbe    jump_a4b2d
		cmp    $0x1e,%al
		je     jump_a4b50
		jmp    jump_a4d4e
	jump_a4d32:
		cmp    $0x1b,%al
		je     jump_a4b39
		jmp    jump_a4d4e
	jump_a4d3c:
		cmp    $0x1,%al
		jb     jump_a4d4e
		jbe    jump_a4b45
		cmp    $0xc,%al
		je     jump_a4b24
	jump_a4d4e:
		mov    (%esi,%ebp,1),%al
		mov    %al,0x30(%esp)
		xor    %eax,%eax
		mov    0x30(%esp),%al
		cmp    $0x1f,%eax
		jle    jump_a4cdb
		mov    EXPORT_SYMBOL(lbFontPtr),%eax
		cmp    small_med_font,%eax
		jne    jump_a4d7e
		cmpb   $0x65,language_3str
		je     jump_a4b9b
	jump_a4d7e:
		mov    0x30(%esp),%bl
		xor    %eax,%eax
		mov    %bl,%al
		cmp    $0x7f,%eax
		jle    jump_a4b8a
		xor    %eax,%eax
	jump_a4d91:
		xor    %edx,%edx
		mov    subst_table_lower_to_upper(%eax),%dl
		test   %edx,%edx
		je     jump_a4b97
		cmp    %dl,%bl
		jne    jump_a4b82
		mov    data_15521d(%eax),%bl
		jmp    jump_a4b97
	jump_a4db4:
		movzwl 0x18(%esp),%ebp
		lea    -0x1(%ebx),%edi
		cmp    %edi,%ebp
		jl     jump_a4e59
		mov    0x2c(%esp),%eax
		add    $0x40,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_a4dcf:
		testb  $0x40,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		je     jump_a4de4
	jump_a4dd8:
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		jmp    jump_a4ecc
	jump_a4de4:
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		inc    %ebp
		cmp    %edi,%ebp
		jl     jump_a4e59
		mov    0x2c(%esp),%eax
		add    $0x40,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_a4dfb:
		mov    EXPORT_SYMBOL(lbDisplay)+96,%ah # lbDisplay__DrawFlags
		test   $0x4,%ah
		je     jump_a4e1d
	jump_a4e06:
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		inc    %ebp
		cmp    %edi,%ebp
		jl     jump_a4e59
		mov    0x2c(%esp),%eax
		add    $0x40,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_a4e1d:
		mov    %ah,%dl
		or     $0x4,%dl
		mov    %dl,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		inc    %ebp
		cmp    %edi,%ebp
		jl     jump_a4e59
		mov    0x2c(%esp),%eax
		add    $0x40,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_a4e38:
		movsbl 0x1(%esi,%ebp,1),%eax
		mov    data_1552e3(%eax),%al
		inc    %ebp
		mov    %al,EXPORT_SYMBOL(lbDisplay)+113 # lbDisplay.DrawColour
		inc    %ebp
		cmp    %edi,%ebp
		jl     jump_a4e59
		mov    0x2c(%esp),%eax
		add    $0x40,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_a4e59:
		mov    EXPORT_SYMBOL(lbDisplay)+96,%dx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(lbDisplay)+96,%cx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		mov    (%esi,%ebp,1),%al
		and    $0xfb,%dl
		and    $0xbf,%cl
		or     $0x40,%bl
		cmp    $0xe,%al
		jb     jump_a4eba
		jbe    jump_a4e38
		cmp    $0x1c,%al
		jb     jump_a4ea2
		jbe    jump_a4dd8
		cmp    $0x1e,%al
		je     jump_a4e06
		inc    %ebp
		cmp    %edi,%ebp
		jl     jump_a4e59
		mov    0x2c(%esp),%eax
		add    $0x40,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_a4ea2:
		cmp    $0x1b,%al
		je     jump_a4de4
		inc    %ebp
		cmp    %edi,%ebp
		jl     jump_a4e59
		mov    0x2c(%esp),%eax
		add    $0x40,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_a4eba:
		cmp    $0x1,%al
		jb     jump_a4ecc
		jbe    jump_a4dfb
		cmp    $0xc,%al
		je     jump_a4dcf
	jump_a4ecc:
		inc    %ebp
		cmp    %edi,%ebp
		jl     jump_a4e59
		mov    0x2c(%esp),%eax
		add    $0x40,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
/* unsigned long my_str_len(char *str)
 */
GLOBAL_FUNC(ASM_my_str_len)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		xor    %edx,%edx
	jump_a4ee0:
		movsbl (%eax),%ebx
		test   %ebx,%ebx
		je     jump_a4eeb
		inc    %eax
		inc    %edx
		jmp    jump_a4ee0
	jump_a4eeb:
		mov    %edx,%eax
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_flashy_draw_text)	/* 0x0A4EF0 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x14,%esp
		mov    0x28(%esp),%ebp
		mov    %eax,0x4(%esp)
		mov    %edx,(%esp)
		mov    %ebx,0x8(%esp)
		mov    %cl,0x10(%esp)
		test   %ebx,%ebx
		je     jump_a507f
		mov    %ebx,%eax
		xor    %edx,%edx
	jump_a4f15:
		movsbl (%eax),%ebx
		test   %ebx,%ebx
		je     jump_a4f20
		inc    %eax
		inc    %edx
		jmp    jump_a4f15
	jump_a4f20:
		movswl 0x0(%ebp),%eax
		mov    %edx,0xc(%esp)
		cmp    %edx,%eax
		jge    jump_a5068
		mov    back_buffer,%ebx
		add    text_buf_pos,%ebx
		test   %eax,%eax
		jle    jump_a4f5a
		mov    0x8(%esp),%esi
		mov    %ebx,%edi
		movswl 0x0(%ebp),%ecx
		push   %edi
		mov    %ecx,%eax
		shr    $0x2,%ecx
		repnz movsl %ds:(%esi),%es:(%edi)
		mov    %al,%cl
		and    $0x3,%cl
		repnz movsb %ds:(%esi),%es:(%edi)
		pop    %edi
	jump_a4f5a:
		movswl 0x0(%ebp),%eax
		test   %eax,%eax
		jg     jump_a4f64
		xor    %eax,%eax
	jump_a4f64:
		xor    %ecx,%ecx
		lea    (%ebx,%eax,1),%edx
		mov    0x2c(%esp),%cl
		inc    %eax
		test   %ecx,%ecx
		jne    jump_a4fbb
		add    $0x6,%cl
		movb   $0x1b,(%edx)
		xor    %edx,%edx
		jmp    jump_a4f88
	jump_a4f7c:
		inc    %edx
		inc    %cl
		cmp    $0x6,%edx
		jge    jump_a5002
	jump_a4f88:
		movswl 0x0(%ebp),%esi
		add    %edx,%esi
		test   %esi,%esi
		jl     jump_a4f7c
		cmp    0xc(%esp),%esi
		jge    jump_a4f7c
		mov    %eax,%esi
		inc    %eax
		movb   $0xe,(%esi,%ebx,1)
		mov    %eax,%esi
		mov    %cl,(%esi,%ebx,1)
		movswl 0x0(%ebp),%esi
		mov    0x8(%esp),%edi
		add    %edx,%esi
		add    %esi,%edi
		inc    %eax
		mov    %eax,%esi
		mov    (%edi),%ch
		inc    %eax
		mov    %ch,(%esi,%ebx,1)
		jmp    jump_a4f7c
	jump_a4fbb:
		movb   $0x1b,(%edx)
		xor    %edx,%edx
		mov    %dl,%cl
		add    $0xc,%cl
		jmp    jump_a4fcf
	jump_a4fc7:
		inc    %edx
		inc    %cl
		cmp    $0x4,%edx
		jge    jump_a5002
	jump_a4fcf:
		movswl 0x0(%ebp),%esi
		add    %edx,%esi
		test   %esi,%esi
		jl     jump_a4fc7
		cmp    0xc(%esp),%esi
		jge    jump_a4fc7
		mov    %eax,%esi
		inc    %eax
		movb   $0xe,(%esi,%ebx,1)
		mov    %eax,%esi
		mov    %cl,(%esi,%ebx,1)
		movswl 0x0(%ebp),%esi
		mov    0x8(%esp),%edi
		add    %edx,%esi
		add    %esi,%edi
		inc    %eax
		mov    %eax,%esi
		mov    (%edi),%ch
		inc    %eax
		mov    %ch,(%esi,%ebx,1)
		jmp    jump_a4fc7
	jump_a5002:
		mov    %eax,%edx
		inc    %eax
		movb   $0x1c,(%edx,%ebx,1)
		mov    %eax,%edx
		inc    %eax
		movb   $0x0,(%edx,%ebx,1)
		mov    text_buf_pos,%edx
		xor    %ecx,%ecx
		add    %eax,%edx
		xor    %eax,%eax
		mov    %edx,text_buf_pos
		mov    0x10(%esp),%al
		mov    0x0(%ebp),%dx
		mov    0x24(%esp),%cx
		add    %eax,%edx
		mov    0x4(%esp),%eax
		mov    %dx,0x0(%ebp)
		mov    (%esp),%edx
		call   ac_draw_text_purple_list2
		push   $0x3
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x72,%edx
		xor    %eax,%eax
		call   ac_play_sample_using_heap
		xor    %al,%al
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0xc
	jump_a5068:
		mov    0x8(%esp),%ebx
		mov    (%esp),%edx
		xor    %ecx,%ecx
		mov    0x4(%esp),%eax
		mov    0x24(%esp),%cx
		call   ac_draw_text_purple_list2
	jump_a507f:
		mov    $0x1,%al
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0xc


/*----------------------------------------------------------------*/
is_a_scientist_mission:	/* 0x0A520C */
/*----------------------------------------------------------------*/
		and    $0xffff,%eax
		cmp    $0x4,%eax
		je     jump_a5234
		cmp    $0x25,%eax
		je     jump_a5234
		cmp    $0x1d,%eax
		je     jump_a5234
		cmp    $0x1a,%eax
		je     jump_a5234
		cmp    $0x32,%eax
		je     jump_a5234
		cmp    $0x26,%eax
		je     jump_a5234
		cmp    $0x19,%eax
		jne    jump_a5237
	jump_a5234:
		mov    $0x1,%al
		ret
	jump_a5237:
		xor    %al,%al
		ret


/*----------------------------------------------------------------*/
open_new_mission:	/* 0x0A523C */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %edx
		push   %esi
		mov    %eax,%ecx
		xor    %edx,%edx
		mov    %cx,%dx
		mov    $0x1,%eax
		cmp    $0x58,%edx
		je     jump_a52a5
		cmp    $0x65,%edx
		je     jump_a52a5
		cmp    $0x66,%edx
		je     jump_a52a5
	jump_a525a:
		xor    %edx,%edx
		mov    %ax,%dx
		cmpw   $0x0,mission_open(,%edx,2)
		je     jump_a5272
		cmp    $0x32,%edx
		jge    jump_a5272
		inc    %eax
		jmp    jump_a525a
	jump_a5272:
		and    $0xffff,%eax
		cmp    $0x32,%eax
		jge    jump_a528e
		xor    %esi,%esi
		mov    %cx,mission_open(,%eax,2)
		mov    %si,mission_state(,%eax,2)
	jump_a528e:
		xor    %eax,%eax
		mov    %cx,%ax
		movswl %cx,%edx
		call   ac_do_start_triggers
		mov    $0x1,%eax
		call   ac_queue_up_new_mail
	jump_a52a5:
		xor    %eax,%eax
		pop    %esi
		pop    %edx
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_thing_arrived_at_obj_radius)	/* 0x0A63FC */
/*----------------------------------------------------------------*/
		cwtl
		test   %eax,%eax
		jge    jump_a643c
		mov    %eax,%ebx
		shl    $0x4,%eax
		sub    %ebx,%eax
		lea    0x0(,%eax,4),%ebx
		mov    EXPORT_SYMBOL(sthings),%eax
		add    %ebx,%eax
		mov    0x18(%eax),%ebx
		sar    $0x8,%ebx
		sub    %edx,%ebx
		mov    %ebx,%edx
		imul   %ebx,%edx
		mov    0x20(%eax),%eax
		sar    $0x8,%eax
		sub    %ecx,%eax
		imul   %eax,%eax
		mov    0x4(%esp),%ebx
		add    %edx,%eax
		cmp    %ebx,%eax
		setl   %al
		ret    $0x4
	jump_a643c:
		mov    %eax,%ebx
		shl    $0x2,%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    things,%ebx
		shl    $0x3,%eax
		add    %eax,%ebx
		mov    0x18(%ebx),%eax
		sar    $0x8,%eax
		sub    %edx,%eax
		imul   %eax,%eax
		mov    0x20(%ebx),%edx
		sar    $0x8,%edx
		sub    %ecx,%edx
		imul   %edx,%edx
		add    %edx,%eax
		cmp    0x4(%esp),%eax
		jge    jump_a6476
		mov    $0x1,%al
		ret    $0x4
	jump_a6476:
		xor    %al,%al
		ret    $0x4


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_mem_group_arrived_square2)	/* 0x0A6708 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		sub    $0x10,%esp
		mov    things,%esi
		mov    %edx,%eax
		mov    %ebx,0x8(%esp)
		mov    %ecx,0x4(%esp)
		mov    in_network_game,%bl
		xor    %edx,%edx
		test   %bl,%bl
		je     jump_a67f7
		xor    %ebx,%ebx
		mov    %ax,%bx
		test   %ebx,%ebx
		je     jump_a674c
		jmp    jump_a67f7
	jump_a673b:
		mov    (%esp),%ecx
		inc    %ecx
		mov    %ecx,(%esp)
		cmp    $0x8,%ecx
		jl     jump_a674f
		jmp    jump_a6888
	jump_a674c:
		mov    %ebx,(%esp)
	jump_a674f:
		mov    (%esp),%cl
		xor    %ebx,%ebx
		mov    $0x1,%eax
		mov    ingame__InNetGame_UNSURE,%bl
		shl    %cl,%eax
		test   %eax,%ebx
		je     jump_a673b
		mov    (%esp),%ebx
		xor    %eax,%eax
		mov    level_def__PlayableGroups(%ebx),%al
		mov    EXPORT_SYMBOL(same_type_head)+512(,%eax,2),%bx
	jump_a6778:
		movswl %bx,%eax
		test   %eax,%eax
		jle    jump_a673b
		imul   $0xa8,%eax,%eax
		add    %esi,%eax
		mov    0x18(%eax),%ecx
		sar    $0x8,%ecx
		mov    %cx,0xc(%esp)
		mov    0x20(%eax),%ecx
		sar    $0x8,%ecx
		mov    %ecx,%edi
		testb  $0x2,0xc(%eax)
		jne    jump_a67d7
		xor    %ecx,%ecx
		mov    0xa(%esp),%eax
		mov    0x8(%esp),%cx
		sar    $0x10,%eax
		cmp    %ecx,%eax
		jle    jump_a67d7
		xor    %ecx,%ecx
		mov    0x1c(%esp),%cx
		cmp    %ecx,%eax
		jge    jump_a67d7
		xor    %ecx,%ecx
		movswl %di,%eax
		mov    0x4(%esp),%cx
		cmp    %ecx,%eax
		jle    jump_a67d7
		xor    %ecx,%ecx
		mov    0x20(%esp),%cx
		cmp    %ecx,%eax
		jge    jump_a67d7
		inc    %edx
	jump_a67d7:
		cmp    0x24(%esp),%dx
		jb     jump_a67e5
		mov    $0x1,%al
		jmp    jump_a688a
	jump_a67e5:
		movswl %bx,%ebx
		imul   $0xa8,%ebx,%ebx
		mov    %esi,%eax
		mov    0x12(%ebx,%eax,1),%bx
		jmp    jump_a6778
	jump_a67f7:
		xor    %ebx,%ebx
		mov    %ax,%bx
		mov    EXPORT_SYMBOL(same_type_head)+512(,%ebx,2),%bx
	jump_a6804:
		movswl %bx,%eax
		test   %eax,%eax
		jle    jump_a6888
		imul   $0xa8,%eax,%eax
		add    %esi,%eax
		mov    0x18(%eax),%ecx
		mov    0x20(%eax),%edi
		sar    $0x8,%ecx
		sar    $0x8,%edi
		testb  $0x2,0xc(%eax)
		jne    jump_a685c
		movswl %cx,%eax
		xor    %ecx,%ecx
		mov    0x8(%esp),%cx
		cmp    %ecx,%eax
		jle    jump_a685c
		xor    %ecx,%ecx
		mov    0x1c(%esp),%cx
		cmp    %ecx,%eax
		jge    jump_a685c
		xor    %ecx,%ecx
		movswl %di,%eax
		mov    0x4(%esp),%cx
		cmp    %ecx,%eax
		jle    jump_a685c
		xor    %ecx,%ecx
		mov    0x20(%esp),%cx
		cmp    %ecx,%eax
		jge    jump_a685c
		inc    %edx
	jump_a685c:
		cmp    0x24(%esp),%dx
		jb     jump_a6873
		mov    $0x1,%al
		mov    %esi,things
		add    $0x10,%esp
		pop    %edi
		pop    %esi
		ret    $0xc
	jump_a6873:
		movswl %bx,%eax
		imul   $0xa8,%eax,%eax
		mov    %esi,%ebx
		mov    0x12(%ebx,%eax,1),%bx
		jmp    jump_a6804
	jump_a6888:
		xor    %al,%al
	jump_a688a:
		mov    %esi,things
		add    $0x10,%esp
		pop    %edi
		pop    %esi
		ret    $0xc


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_mem_group_arrived)	/* 0x0A6898 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x10,%esp
		mov    0x20(%esp),%ebp
		mov    %dx,0xc(%esp)
		mov    %bx,0x8(%esp)
		mov    %cx,0x4(%esp)
		imul   %ebp,%ebp
		mov    in_network_game,%dl
		xor    %edi,%edi
		shl    $0xc,%ebp
		test   %dl,%dl
		je     jump_a69e1
		xor    %edx,%edx
		mov    %ax,%dx
		test   %edx,%edx
		je     jump_a68d5
		jmp    jump_a69e1
	jump_a68d5:
		mov    %edi,(%esp)
	jump_a68d8:
		mov    (%esp),%cl
		xor    %edx,%edx
		mov    $0x1,%eax
		mov    ingame__InNetGame_UNSURE,%dl
		shl    %cl,%eax
		test   %eax,%edx
		je     jump_a69c6
		mov    (%esp),%edx
		xor    %eax,%eax
		mov    level_def__PlayableGroups(%edx),%al
		xor    %esi,%esi
		mov    EXPORT_SYMBOL(same_type_head)+512(,%eax,2),%si
		test   %esi,%esi
		jle    jump_a69c6
	jump_a690f:
		mov    EXPORT_SYMBOL(ingame)+0x000,%eax # ingame.GameMode
		sar    $0x10,%eax
		cmp    $0x3b,%eax
		jne    jump_a6960
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+1,%al
		push   %eax
		imul   $0xa8,%esi,%eax
		mov    things,%edx
		add    %edx,%eax
		mov    0x6(%esp),%ebx
		mov    0x20(%eax),%edx
		sar    $0x10,%ebx
		sar    $0x8,%edx
		mov    0x18(%eax),%ecx
		push   %edx
		mov    0x1c(%eax),%edx
		sar    $0x8,%ecx
		sar    $0x8,%edx
		mov    0x12(%esp),%eax
		push   %edx
		mov    0x12(%esp),%edx
		sar    $0x10,%eax
		sar    $0x10,%edx
		call   ac_func_6fd1c
	jump_a6960:
		imul   $0xa8,%esi,%eax
		mov    things,%edx
		testb  $0x2,0xc(%edx,%eax,1)
		jne    jump_a6996
		mov    0x2(%esp),%ecx
		mov    0x6(%esp),%ebx
		mov    0xa(%esp),%edx
		push   %ebp
		movswl %si,%eax
		sar    $0x10,%ecx
		sar    $0x10,%ebx
		sar    $0x10,%edx
		call   ac_thing_arrived_at_obj_radius
		test   %al,%al
		je     jump_a6996
		inc    %edi
	jump_a6996:
		xor    %eax,%eax
		mov    0x24(%esp),%ax
		cmp    %eax,%edi
		jl     jump_a69a8
		mov    $0x1,%al
		jmp    jump_a6ab5
	jump_a69a8:
		imul   $0xa8,%esi,%esi
		mov    things,%eax
		mov    0x12(%esi,%eax,1),%si
		and    $0xffff,%esi
		test   %esi,%esi
		jg     jump_a690f
	jump_a69c6:
		mov    (%esp),%ebx
		inc    %ebx
		mov    %ebx,(%esp)
		cmp    $0x8,%ebx
		jl     jump_a68d8
		xor    %al,%al
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x8
	jump_a69e1:
		and    $0xffff,%eax
		xor    %esi,%esi
		mov    EXPORT_SYMBOL(same_type_head)+512(,%eax,2),%si
		test   %esi,%esi
		jle    jump_a6ab3
	jump_a69f8:
		mov    EXPORT_SYMBOL(ingame)+0x000,%eax # ingame.GameMode
		sar    $0x10,%eax
		cmp    $0x3b,%eax
		jne    jump_a6a49
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+1,%al
		push   %eax
		imul   $0xa8,%esi,%eax
		mov    things,%edx
		add    %edx,%eax
		mov    0x6(%esp),%ebx
		mov    0x20(%eax),%edx
		sar    $0x10,%ebx
		sar    $0x8,%edx
		mov    0x18(%eax),%ecx
		push   %edx
		mov    0x1c(%eax),%edx
		sar    $0x8,%ecx
		sar    $0x8,%edx
		mov    0x12(%esp),%eax
		push   %edx
		mov    0x12(%esp),%edx
		sar    $0x10,%eax
		sar    $0x10,%edx
		call   ac_func_6fd1c
	jump_a6a49:
		imul   $0xa8,%esi,%eax
		mov    things,%edx
		testb  $0x2,0xc(%edx,%eax,1)
		jne    jump_a6a7f
		mov    0x2(%esp),%ecx
		mov    0x6(%esp),%ebx
		mov    0xa(%esp),%edx
		push   %ebp
		movswl %si,%eax
		sar    $0x10,%ecx
		sar    $0x10,%ebx
		sar    $0x10,%edx
		call   ac_thing_arrived_at_obj_radius
		test   %al,%al
		je     jump_a6a7f
		inc    %edi
	jump_a6a7f:
		xor    %eax,%eax
		mov    0x24(%esp),%ax
		cmp    %eax,%edi
		jl     jump_a6a95
		mov    $0x1,%al
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x8
	jump_a6a95:
		imul   $0xa8,%esi,%esi
		mov    things,%eax
		mov    0x12(%esi,%eax,1),%si
		and    $0xffff,%esi
		test   %esi,%esi
		jg     jump_a69f8
	jump_a6ab3:
		xor    %al,%al
	jump_a6ab5:
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x8


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_all_group_arrived_square)	/* 0x0A6AC0 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    %edx,%edi
		mov    %ebx,%esi
		mov    %ecx,(%esp)
		xor    %ecx,%ecx
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(same_type_head)+512(,%eax,2),%ax
	jump_a6adb:
		cwtl
		test   %eax,%eax
		jle    jump_a6b25
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %edx,%eax
		mov    0x18(%eax),%ebx
		mov    0x20(%eax),%edx
		sar    $0x8,%ebx
		sar    $0x8,%edx
		testb  $0x2,0xc(%eax)
		je     jump_a6b06
	jump_a6b00:
		mov    0x12(%eax),%ax
		jmp    jump_a6adb
	jump_a6b06:
		inc    %ecx
		cmp    %di,%bx
		jl     jump_a6b1e
		cmp    (%esp),%bx
		jg     jump_a6b1e
		cmp    %si,%dx
		jl     jump_a6b1e
		cmp    0x10(%esp),%dx
		jle    jump_a6b00
	jump_a6b1e:
		mov    $0xffffffff,%eax
		jmp    jump_a6adb
	jump_a6b25:
		jne    jump_a6b2f
		test   %ecx,%ecx
		je     jump_a6b2f
		mov    $0x1,%al
		jmp    jump_a6b31
	jump_a6b2f:
		xor    %al,%al
	jump_a6b31:
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_all_group_arrived)	/* 0x0A6B3C */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		mov    0x1c(%esp),%ebp
		mov    %dx,0x4(%esp)
		mov    %bx,0x8(%esp)
		mov    %cx,(%esp)
		imul   %ebp,%ebp
		xor    %edi,%edi
		shl    $0xc,%ebp
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(same_type_head)+512(,%eax,2),%ax
	jump_a6b69:
		cwtl
		test   %eax,%eax
		jle    jump_a6bbb
		imul   $0xa8,%eax,%esi
		mov    things,%ebx
		add    %esi,%ebx
		testb  $0x2,0xc(%ebx)
		je     jump_a6b88
		mov    0x12(%ebx),%ax
		jmp    jump_a6b69
	jump_a6b88:
		mov    -0x2(%esp),%ecx
		mov    0x6(%esp),%ebx
		mov    0x2(%esp),%edx
		push   %ebp
		sar    $0x10,%ecx
		sar    $0x10,%ebx
		sar    $0x10,%edx
		inc    %edi
		call   ac_thing_arrived_at_obj_radius
		test   %al,%al
		jne    jump_a6baf
		mov    $0xffffffff,%eax
		jmp    jump_a6b69
	jump_a6baf:
		mov    things,%eax
		mov    0x12(%esi,%eax,1),%ax
		jmp    jump_a6b69
	jump_a6bbb:
		jne    jump_a6bc5
		test   %edi,%edi
		je     jump_a6bc5
		mov    $0x1,%al
		jmp    jump_a6bc7
	jump_a6bc5:
		xor    %al,%al
	jump_a6bc7:
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_group_not_seen)	/* 0x0A6BD0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    %eax,%ecx
		mov    $0x90000,%eax
		mov    EXPORT_SYMBOL(overall_scale)-2,%esi
		mov    %eax,%edx
		sar    $0x10,%esi
		sar    $0x1f,%edx
		idiv   %esi
		mov    %eax,%edi
		imul   %eax,%edi
		xor    %eax,%eax
		mov    %cx,%ax
		mov    EXPORT_SYMBOL(same_type_head)+512(,%eax,2),%ax
	jump_a6bfe:
		cwtl
		test   %eax,%eax
		jle    jump_a6c48
		imul   $0xa8,%eax,%esi
		mov    things,%edx
		add    %esi,%edx
		testb  $0x2,0xc(%edx)
		je     jump_a6c1d
		mov    0x12(%edx),%ax
		jmp    jump_a6bfe
	jump_a6c1d:
		mov    engn_zc,%ecx
		push   %edi
		mov    engn_xc,%edx
		xor    %ebx,%ebx
		call   ac_thing_arrived_at_obj_radius
		test   %al,%al
		je     jump_a6c3c
		mov    $0xffffffff,%eax
		jmp    jump_a6bfe
	jump_a6c3c:
		mov    things,%eax
		mov    0x12(%esi,%eax,1),%ax
		jmp    jump_a6bfe
	jump_a6c48:
		sete   %al
		xor    %ah,%ah
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_conditional_command_state_true)	/* 0x0A6C54 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		sub    $0x10,%esp
		mov    %edx,%edi
		xor    %dl,%dl
		mov    %dl,0xc(%esp)
		and    $0xffff,%eax
		mov    game_commands,%esi
		shl    $0x5,%eax
		add    %eax,%esi
		testb  $0x8,0x18(%esi)
		je     jump_a6c81
		movb   $0x1,0xc(%esp)
	jump_a6c81:
		mov    0xa(%esi),%al
		mov    %al,%ah
		cmp    $0x4f,%al
		jb     jump_a71a2
		jbe    jump_a6fc1
		cmp    $0x74,%al
		jb     jump_a70f2
		jbe    jump_a6dde
		cmp    $0x7b,%al
		jb     jump_a709d
		cmp    $0x7c,%al
		jbe    jump_a73cb
		cmp    $0x7f,%al
		jb     jump_a705e
		jbe    jump_a6da8
		cmp    $0x82,%al
		jb     jump_a7047
		jbe    jump_a7047
		cmp    $0x89,%al
		je     jump_a6cfe
		jmp    jump_a73cb
	jump_a6cd7:
		xor    %al,%al
		jmp    jump_a73d8
	jump_a6cde:
		mov    (%esi),%eax
		sar    $0x10,%eax
		shl    $0x4,%eax
		mov    0x10(%esi),%dx
		cmp    data_19f1a0(%eax),%dx
		jg     jump_a73cb
		mov    $0x1,%al
		jmp    jump_a73d8
	jump_a6cfe:
		xor    %eax,%eax
		mov    0x2(%esi),%ax
		call   ac_group_not_seen
		test   %ax,%ax
		je     jump_a6d1b
		cmpb   $0x0,0xc(%esp)
		sete   %al
		jmp    jump_a73d3
	jump_a6d1b:
		mov    (%esi),%eax
		sar    $0x10,%eax
		shl    $0x4,%eax
		mov    data_19f1a0(%eax),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_a73cb
		mov    $0x1,%al
		add    $0x10,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_a6d3d:
		mov    (%esi),%edi
		sar    $0x10,%edi
		lea    0x0(,%edi,4),%esi
		add    %edi,%esi
		shl    $0x2,%esi
		mov    things,%eax
		add    %edi,%esi
		mov    0xa(%eax,%esi,8),%ax
		and    $0xffff,%eax
		cmp    $0xd,%eax
		jne    jump_a73cb
		mov    $0x1,%al
		add    $0x10,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_a6d71:
		mov    (%esi),%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,4),%esi
		add    %eax,%esi
		shl    $0x2,%esi
		add    %eax,%esi
		mov    things,%eax
		testb  $0x8,0xe(%eax,%esi,8)
		je     jump_a73cb
		cmpb   $0x0,0xc(%esp)
		sete   %al
		and    $0xff,%eax
		add    $0x10,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_a6da8:
		mov    0x10(%esi),%eax
		sar    $0x10,%eax
		cmp    $0x270f,%eax
		jge    jump_a73cb
		mov    0xe(%esi),%dx
		inc    %edx
		mov    0x12(%esi),%bx
		mov    %dx,0xe(%esi)
		cmp    %bx,%dx
		jl     jump_a73cb
		mov    $0x1,%al
		movw   $0x0,0xe(%esi)
		add    $0x10,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_a6dde:
		mov    0xc(%esi),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0x20(%edi),%eax
		sar    $0x8,%eax
		movswl %ax,%ecx
		mov    0x1c(%edi),%eax
		sar    $0x8,%eax
		movswl %ax,%ebx
		mov    0x18(%edi),%eax
		sar    $0x8,%eax
		movswl %ax,%edx
		xor    %eax,%eax
		mov    0x2(%esi),%ax
		call   ac_all_group_arrived
		test   %al,%al
		je     jump_a73cb
		cmpb   $0x0,0xc(%esp)
		sete   %al
		and    $0xff,%eax
		add    $0x10,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_a6e27:
		xor    %al,%al
	jump_a6e29:
		test   %al,%al
		je     jump_a6e41
		cmpb   $0x0,0xc(%esp)
		sete   %al
		and    $0xff,%eax
		add    $0x10,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_a6e41:
		mov    (%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_a73cb
		mov    0x2(%esi),%ax
		mov    0x4(%esi),%bx
		mov    0x8(%esi),%dx
		mov    0xe(%esi),%di
		cwtl
		mov    0x12(%esi),%cx
		mov    %eax,%esi
		shl    $0x4,%esi
		mov    %dx,0x8(%esp)
		sub    %eax,%esi
		mov    EXPORT_SYMBOL(sthings),%eax
		movswl %bx,%ebx
		mov    0x18(%eax,%esi,4),%edx
		mov    0x20(%eax,%esi,4),%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		cmp    %ebx,%edx
		jle    jump_a6ea6
		movswl %di,%ebx
		cmp    %ebx,%edx
		jge    jump_a6ea6
		mov    0x6(%esp),%edx
		sar    $0x10,%edx
		cmp    %edx,%eax
		jle    jump_a6ea6
		movswl %cx,%edx
		cmp    %edx,%eax
		jge    jump_a6ea6
		mov    $0x1,%al
		jmp    jump_a6ea8
	jump_a6ea6:
		xor    %al,%al
	jump_a6ea8:
		test   %al,%al
		je     jump_a73cb
		cmpb   $0x0,0xc(%esp)
		sete   %al
		and    $0xff,%eax
		add    $0x10,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_a6ec4:
		mov    (%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jle    jump_a6f09
		mov    0xc(%esi),%edx
		sar    $0x10,%edx
		imul   %edx,%edx
		mov    0x6(%esi),%ecx
		mov    0x4(%esi),%ebx
		shl    $0xc,%edx
		sar    $0x10,%ecx
		push   %edx
		mov    0x2(%esi),%edx
		sar    $0x10,%ebx
		sar    $0x10,%edx
		call   ac_thing_arrived_at_obj_radius
		test   %al,%al
		je     jump_a6f09
		cmpb   $0x0,0xc(%esp)
		sete   %al
		and    $0xff,%eax
		add    $0x10,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_a6f09:
		mov    (%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_a73cb
		mov    0xc(%esi),%edi
		sar    $0x10,%edi
		imul   %edi,%edi
		mov    0x2(%esi),%ax
		mov    0x6(%esi),%ebx
		cwtl
		mov    0x2(%esi),%ecx
		mov    %eax,%esi
		shl    $0x4,%esi
		sub    %eax,%esi
		mov    EXPORT_SYMBOL(sthings),%eax
		mov    0x18(%eax,%esi,4),%edx
		sar    $0x10,%ecx
		sar    $0x8,%edx
		sub    %ecx,%edx
		imul   %edx,%edx
		mov    0x20(%eax,%esi,4),%eax
		sar    $0x10,%ebx
		sar    $0x8,%eax
		sub    %ebx,%eax
		imul   %eax,%eax
		shl    $0xc,%edi
		add    %edx,%eax
		cmp    %edi,%eax
		setl   %al
		test   %al,%al
		je     jump_a73cb
		cmpb   $0x0,0xc(%esp)
		sete   %al
		and    $0xff,%eax
		add    $0x10,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_a6f7a:
		mov    0x6(%esi),%ecx
		xor    %eax,%eax
		mov    0x4(%esi),%ebx
		mov    0x10(%esi),%ax
		mov    0x2(%esi),%edx
		push   %eax
		mov    0xc(%esi),%eax
		sar    $0x10,%ecx
		sar    $0x10,%eax
		sar    $0x10,%ebx
		push   %eax
		xor    %eax,%eax
		sar    $0x10,%edx
		mov    0x2(%esi),%ax
		call   ac_mem_group_arrived
		test   %al,%al
		je     jump_a73cb
		cmpb   $0x0,0xc(%esp)
		sete   %al
		and    $0xff,%eax
		add    $0x10,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_a6fc1:
		testb  $0x10,0x18(%esi)
		je     jump_a7007
		mov    0x10(%esi),%eax
		mov    0xc(%esi),%ecx
		mov    0x6(%esi),%ebx
		mov    0x2(%esi),%edx
		sar    $0x10,%eax
		sar    $0x10,%ecx
		sar    $0x10,%ebx
		push   %eax
		xor    %eax,%eax
		sar    $0x10,%edx
		mov    0x2(%esi),%ax
		call   ac_all_group_arrived_square
		test   %al,%al
		je     jump_a73cb
		cmpb   $0x0,0xc(%esp)
		sete   %al
		and    $0xff,%eax
		add    $0x10,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_a7007:
		mov    0xc(%esi),%eax
		mov    0x6(%esi),%ecx
		mov    0x4(%esi),%ebx
		mov    0x2(%esi),%edx
		sar    $0x10,%eax
		sar    $0x10,%ecx
		sar    $0x10,%ebx
		push   %eax
		xor    %eax,%eax
		sar    $0x10,%edx
		mov    0x2(%esi),%ax
		call   ac_all_group_arrived
		test   %al,%al
		je     jump_a73cb
		cmpb   $0x0,0xc(%esp)
		sete   %al
		and    $0xff,%eax
		add    $0x10,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_a7047:
		xor    %eax,%eax
		mov    $0x2,%edx
		mov    0x2(%esi),%ax
		call   ac_test_objective
		add    $0x10,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_a705e:
		cmp    $0x7d,%al
		jbe    jump_a73cb
	jump_a7066:
		mov    (%esi),%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,4),%esi
		add    %eax,%esi
		shl    $0x2,%esi
		add    %eax,%esi
		mov    things,%eax
		testb  $0x2,0xc(%eax,%esi,8)
		je     jump_a73cb
		cmpb   $0x0,0xc(%esp)
		sete   %al
		and    $0xff,%eax
		add    $0x10,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_a709d:
		cmp    $0x77,%al
		jb     jump_a70e5
		jbe    jump_a6fc1
		cmp    $0x79,%al
		jb     jump_a6d71
		jbe    jump_a727a
	jump_a70b5:
		mov    (%esi),%eax
		sar    $0x10,%eax
		shl    $0x4,%eax
		mov    data_19f1a4(%eax),%dx
		cmp    data_19f1a2(%eax),%dx
		jne    jump_a73cb
		cmpb   $0x0,0xc(%esp)
		sete   %al
		and    $0xff,%eax
		add    $0x10,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_a70e5:
		cmp    $0x75,%al
		jbe    jump_a72af
		jmp    jump_a71d6
	jump_a70f2:
		cmp    $0x56,%al
		jb     jump_a7177
		jbe    jump_a7066
		cmp    $0x70,%al
		jb     jump_a7168
		jbe    jump_a6cde
		cmp    $0x72,%al
		jb     jump_a6d1b
		jbe    jump_a737a
	jump_a7118:
		xor    %eax,%eax
		mov    0x10(%esi),%ax
		push   %eax
		mov    0xc(%esi),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0x20(%edi),%eax
		sar    $0x8,%eax
		movswl %ax,%ecx
		mov    0x1c(%edi),%eax
		sar    $0x8,%eax
		movswl %ax,%ebx
		mov    0x18(%edi),%eax
		sar    $0x8,%eax
		movswl %ax,%edx
		xor    %eax,%eax
		mov    0x2(%esi),%ax
		call   ac_mem_group_arrived
		test   %al,%al
		je     jump_a73cb
		cmpb   $0x0,0xc(%esp)
		sete   %al
		and    $0xff,%eax
		add    $0x10,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_a7168:
		cmp    $0x57,%al
		jbe    jump_a6da8
		cmp    $0x6f,%al
		jmp    jump_a73c5
	jump_a7177:
		cmp    $0x52,%al
		jb     jump_a7195
		jbe    jump_a70b5
		cmpb   $0x0,0xc(%esp)
		setne  %al
		and    $0xff,%eax
		add    $0x10,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_a7195:
		cmp    $0x50,%al
		jbe    jump_a6d71
		jmp    jump_a727a
	jump_a71a2:
		cmp    $0x3e,%al
		jb     jump_a7254
		jbe    jump_a70b5
		cmp    $0x48,%al
		jb     jump_a7237
		jbe    jump_a6cde
		cmp    $0x4b,%al
		jb     jump_a722a
		jbe    jump_a7118
		cmp    $0x4d,%al
		jb     jump_a6dde
		jbe    jump_a72af
	jump_a71d6:
		testb  $0x10,0x18(%esi)
		je     jump_a6f7a
		xor    %eax,%eax
		mov    0x10(%esi),%ax
		xor    %ecx,%ecx
		push   %eax
		xor    %eax,%eax
		xor    %ebx,%ebx
		mov    0x12(%esi),%ax
		xor    %edx,%edx
		push   %eax
		xor    %eax,%eax
		mov    0x8(%esi),%cx
		mov    0xe(%esi),%ax
		mov    0x4(%esi),%bx
		push   %eax
		mov    0x2(%esi),%dx
		mov    %edi,%eax
		call   ac_mem_group_arrived_square2
		test   %al,%al
		je     jump_a73cb
		cmpb   $0x0,0xc(%esp)
		sete   %al
		and    $0xff,%eax
		add    $0x10,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_a722a:
		cmp    $0x49,%al
		jbe    jump_a6d1b
		jmp    jump_a737a
	jump_a7237:
		cmp    $0x42,%al
		jb     jump_a73cb
		jbe    jump_a7066
		cmp    $0x43,%al
		jbe    jump_a6da8
		cmp    $0x47,%al
		jmp    jump_a73c5
	jump_a7254:
		cmp    $0x37,%al
		jb     jump_a7368
		jbe    jump_a7118
		cmp    $0x3a,%al
		jb     jump_a72a7
		jbe    jump_a71d6
		cmp    $0x3c,%al
		jb     jump_a6fc1
		jbe    jump_a6d71
	jump_a727a:
		mov    (%esi),%eax
		sar    $0x10,%eax
		shl    $0x4,%eax
		mov    0x10(%esi),%di
		cmp    data_19f1a4(%eax),%di
		jg     jump_a73cb
		cmpb   $0x0,0xc(%esp)
		sete   %al
		and    $0xff,%eax
		add    $0x10,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_a72a7:
		cmp    $0x38,%al
		jbe    jump_a6dde
	jump_a72af:
		mov    (%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jle    jump_a72d6
		lea    0x0(,%eax,4),%edi
		add    %eax,%edi
		shl    $0x2,%edi
		add    %eax,%edi
		mov    things,%eax
		testb  $0x2,0xc(%eax,%edi,8)
		jne    jump_a73cb
	jump_a72d6:
		testb  $0x10,0x18(%esi)
		je     jump_a6ec4
		mov    (%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jle    jump_a6e41
		mov    0x2(%esi),%ax
		mov    0x4(%esi),%bx
		mov    0x8(%esi),%cx
		mov    0xe(%esi),%dx
		cwtl
		mov    %dx,(%esp)
		lea    0x0(,%eax,4),%edi
		mov    0x12(%esi),%dx
		add    %eax,%edi
		mov    %dx,0x4(%esp)
		shl    $0x2,%edi
		mov    things,%edx
		add    %eax,%edi
		movswl %bx,%ebx
		mov    0x18(%edx,%edi,8),%eax
		mov    0x20(%edx,%edi,8),%edx
		sar    $0x8,%eax
		sar    $0x8,%edx
		cmp    %ebx,%eax
		jle    jump_a6e27
		mov    -0x2(%esp),%ebx
		sar    $0x10,%ebx
		cmp    %ebx,%eax
		jge    jump_a6e27
		movswl %cx,%eax
		cmp    %eax,%edx
		jle    jump_a6e27
		mov    0x2(%esp),%eax
		sar    $0x10,%eax
		cmp    %eax,%edx
		jge    jump_a6e27
		mov    $0x1,%al
		jmp    jump_a6e29
	jump_a7368:
		cmp    $0x34,%al
		jb     jump_a73bb
		jbe    jump_a6cde
		cmp    $0x35,%al
		jbe    jump_a6d1b
	jump_a737a:
		mov    0xc(%esi),%eax
		sar    $0x10,%eax
		imul   %eax,%eax
		mov    0x20(%edi),%ecx
		mov    0x1c(%edi),%ebx
		mov    0x18(%edi),%edx
		sar    $0x8,%ecx
		shl    $0xc,%eax
		sar    $0x8,%ebx
		push   %eax
		mov    (%esi),%eax
		sar    $0x8,%edx
		sar    $0x10,%eax
		call   ac_thing_arrived_at_obj_radius
		test   %al,%al
		je     jump_a73cb
		cmpb   $0x0,0xc(%esp)
		sete   %al
		and    $0xff,%eax
		add    $0x10,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_a73bb:
		cmp    $0x2,%al
		jbe    jump_a6cd7
		cmp    $0x33,%al
	jump_a73c5:
		je     jump_a6d3d
	jump_a73cb:
		cmpb   $0x0,0xc(%esp)
		setne  %al
	jump_a73d3:
		and    $0xff,%eax
	jump_a73d8:
		add    $0x10,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_post_process_blips)	/* 0x0A7CAC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(local_player_no),%bl
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		sub    %ebx,%eax
		add    %eax,%eax
		mov    %eax,%ebx
		shl    $0x2,%eax
		sub    %ebx,%eax
		mov    EXPORT_SYMBOL(players)+0x088(%eax),%ebx # players[0].DirectControl[0]
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		mov    things,%ebp
		add    %ebx,%eax
		mov    $0x7fffffff,%esi
		mov    0x18(%ebp,%eax,8),%edi
		xor    %ebx,%ebx
		mov    0x20(%ebp,%eax,8),%ebp
		sar    $0x8,%edi
		sar    $0x8,%ebp
		jmp    jump_a7d17
	jump_a7d02:
		sar    %ecx
	jump_a7d04:
		add    %ecx,%eax
		cmp    %esi,%eax
		jge    jump_a7d0c
		mov    %eax,%esi
	jump_a7d0c:
		add    $0xc,%ebx
		cmp    $0xb4,%ebx
		je     jump_a7d4a
	jump_a7d17:
		cmpb   $0x0,ingame__Scanner__BigBlip_0__Period(%ebx)
		je     jump_a7d0c
		mov    ingame__Scanner__BigBlip_0__X(%ebx),%eax
		sar    $0x8,%eax
		sub    %edi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ecx
		mov    ingame__Scanner__BigBlip_0__Z(%ebx),%eax
		sar    $0x8,%eax
		sub    %ebp,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%ecx
		jle    jump_a7d02
		sar    %eax
		jmp    jump_a7d04
	jump_a7d4a:
		mov    %esi,%ebx
		sar    $0x9,%ebx
		mov    EXPORT_SYMBOL(ingame)+0x931,%ah # ingame.Flags+2
		add    $0x2,%ebx
		test   $0x20,%ah
		jne    jump_a7da7
		cmpw   $0x0,ingame__TrackThing
		jne    jump_a7da7
		mov    data_1c8468,%ax
		xor    %ecx,%ecx
		mov    %ax,%cx
		inc    %eax
		mov    %ax,data_1c8468
		cmp    %ebx,%ecx
		jle    jump_a7da7
		cmp    $0x3c,%ebx
		jge    jump_a7d9e
		push   $0x3
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x5e,%edx
		xor    %eax,%eax
		call   ac_play_sample_using_heap
	jump_a7d9e:
		xor    %ebx,%ebx
		mov    %bx,data_1c8468
	jump_a7da7:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_test_single_mission)	/* 0x0A8C48 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x20,%esp
		mov    %ax,0x10(%esp)
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(current_level),%dx
		dec    %edx
		mov    $0xf,%edi
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %edi
		inc    %edx
		mov    %edx,0x4(%esp)
		mov    0xe(%esp),%edx
		xor    %ebx,%ebx
		sar    $0x10,%edx
		xor    %ecx,%ecx
		lea    0x0(,%edx,4),%eax
		mov    %ebx,0x8(%esp)
		add    %edx,%eax
		mov    %ebx,0x18(%esp)
		shl    $0x2,%eax
		mov    %ebx,0x1c(%esp)
		sub    %edx,%eax
		mov    %ebx,0x14(%esp)
		mov    %ebx,(%esp)
		mov    data_197492(,%eax,4),%si
		mov    %ebx,0xc(%esp)
		test   %si,%si
		je     jump_a8d5c
	jump_a8cb2:
		xor    %eax,%eax
		mov    0xc(%esp),%ax
		mov    %eax,%edi
		inc    %edi
		mov    %edi,0xc(%esp)
		cmp    $0x64,%eax
		jge    jump_a8d5c
		xor    %edi,%edi
		mov    %si,%di
		mov    %edi,%edx
		mov    game_used_objectives,%eax
		shl    $0x5,%edx
		add    %edx,%eax
		xor    %edx,%edx
		movzbl 0x3(%eax),%ebp
		mov    0x4(%esp),%dx
		cmp    %edx,%ebp
		jne    jump_a8d41
		xor    %edx,%edx
		movzwl current_map,%ebp
		mov    0x2(%eax),%dl
		cmp    %ebp,%edx
		jne    jump_a8d41
		mov    0xe(%esp),%ebp
		sar    $0x10,%ebp
		imul   $0x4c,%ebp,%ebp
		mov    0x14(%eax),%dl
		mov    data_1974a5(%ebp),%dh
		cmp    %dh,%dl
		jne    jump_a8d3d
		mov    0x14(%esp),%eax
		inc    %eax
		mov    $0x1,%edx
		mov    %eax,0x14(%esp)
		mov    %edi,%eax
		call   ac_test_objective
		cwtl
		inc    %ebx
		test   %eax,%eax
		jge    jump_a8d31
		incl   0x8(%esp)
		jmp    jump_a8d41
	jump_a8d31:
		jle    jump_a8d41
		mov    (%esp),%edx
		inc    %edx
		inc    %ecx
		mov    %edx,(%esp)
		jmp    jump_a8d41
	jump_a8d3d:
		ja     jump_a8d40
		inc    %ecx
	jump_a8d40:
		inc    %ebx
	jump_a8d41:
		xor    %eax,%eax
		mov    %si,%ax
		mov    game_used_objectives,%edx
		shl    $0x5,%eax
		mov    (%edx,%eax,1),%si
		test   %si,%si
		jne    jump_a8cb2
	jump_a8d5c:
		mov    0x14(%esp),%eax
		cmp    (%esp),%ax
		jne    jump_a8d8d
		xor    %eax,%eax
		mov    0x14(%esp),%ax
		test   %eax,%eax
		jle    jump_a8d8d
		mov    0xe(%esp),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		incb   data_1974a5(,%eax,4)
	jump_a8d8d:
		cmp    %bx,%cx
		jne    jump_a8da5
		xor    %eax,%eax
		mov    %bx,%ax
		test   %eax,%eax
		jle    jump_a8da5
		mov    $0x1,%eax
		jmp    jump_a8edb
	jump_a8da5:
		mov    0xe(%esp),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    data_197494(,%eax,4),%bx
		xor    %ecx,%ecx
		test   %bx,%bx
		je     jump_a8ea3
	jump_a8dcd:
		xor    %eax,%eax
		mov    %cx,%ax
		inc    %ecx
		cmp    $0x5a,%eax
		jge    jump_a8ea3
		xor    %eax,%eax
		mov    %bx,%ax
		mov    %eax,%edi
		mov    game_used_objectives,%edx
		shl    $0x5,%edi
		add    %edx,%edi
		xor    %edx,%edx
		movzbl 0x3(%edi),%ebp
		mov    0x4(%esp),%dx
		cmp    %edx,%ebp
		jne    jump_a8e88
		xor    %edx,%edx
		mov    0x2(%edi),%dl
		xor    %edi,%edi
		mov    current_map,%di
		cmp    %edi,%edx
		jne    jump_a8e88
		cmpb   $0x0,EXPORT_SYMBOL(byte_1C844F)
		je     jump_a8e30
		testb  $0x1,EXPORT_SYMBOL(lbShift)
		je     jump_a8e30
		mov    $0x1,%edx
		jmp    jump_a8e37
	jump_a8e30:
		xor    %eax,%eax
		xor    %edx,%edx
		mov    %bx,%ax
	jump_a8e37:
		call   ac_test_objective
		xor    %edi,%edi
		mov    %bx,%di
		mov    game_used_objectives,%edx
		shl    $0x5,%edi
		add    %edx,%edi
		movzbl 0x14(%edi),%ebp
		movw   $0x0,0x4(%edi)
		cmp    $0x3,%ebp
		jne    jump_a8e6c
		cwtl
		test   %eax,%eax
		jle    jump_a8e66
		incl   0x18(%esp)
		jmp    jump_a8e88
	jump_a8e66:
		incl   0x1c(%esp)
		jmp    jump_a8e88
	jump_a8e6c:
		cwtl
		test   %eax,%eax
		jle    jump_a8e88
		mov    0x1a(%edi),%bl
		test   %bl,%bl
		je     jump_a8e82
		xor    %ah,%ah
		mov    %bl,%al
		mov    %ax,ingame__fld_unkCB5
	jump_a8e82:
		incl   0x8(%esp)
		jmp    jump_a8ea3
	jump_a8e88:
		xor    %eax,%eax
		mov    %bx,%ax
		mov    game_used_objectives,%edx
		shl    $0x5,%eax
		mov    (%edx,%eax,1),%bx
		test   %bx,%bx
		jne    jump_a8dcd
	jump_a8ea3:
		cmpw   $0x0,0x18(%esp)
		je     jump_a8ec2
		cmpw   $0x0,0x1c(%esp)
		jne    jump_a8ec2
		mov    $0xffffffff,%eax
		add    $0x20,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_a8ec2:
		cmpw   $0x0,0x8(%esp)
		je     jump_a8ed9
		mov    $0xffffffff,%eax
		add    $0x20,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_a8ed9:
		xor    %eax,%eax
	jump_a8edb:
		add    $0x20,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_init_mission_states)	/* 0x0A8EE8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    game_used_objectives,%esi
		mov    $0x1,%eax
		mov    ingame__CurrentMission,%di
		xor    %ebx,%ebx
	jump_a8f01:
		xor    %edx,%edx
		mov    %ax,%dx
		cmp    mission_open(,%edx,2),%di
		je     jump_a8f18
		cmp    $0x32,%edx
		jge    jump_a8f18
		inc    %eax
		jmp    jump_a8f01
	jump_a8f18:
		xor    %edx,%edx
		mov    %ax,%dx
		cmp    $0x32,%edx
		jge    jump_a8feb
		add    %edx,%edx
		xor    %edi,%edi
		mov    data_19f42e(%edx),%ecx
		mov    EXPORT_SYMBOL(next_mission),%di
		sar    $0x10,%ecx
		cmp    %edi,%ecx
		jg     jump_a8feb
		xor    %edi,%edi
		mov    %di,mission_state(%edx)
		lea    0x0(,%ecx,4),%edx
		add    %ecx,%edx
		shl    $0x2,%edx
		sub    %ecx,%edx
		xor    %cl,%cl
		mov    %cl,data_1974a5(,%edx,4)
		mov    data_197492(,%edx,4),%dx
		test   %dx,%dx
		je     jump_a8f97
	jump_a8f6f:
		xor    %ecx,%ecx
		mov    %bx,%cx
		inc    %ebx
		cmp    $0x64,%ecx
		jge    jump_a8f97
		mov    %edx,%ecx
		and    $0xffff,%ecx
		mov    %esi,%edx
		shl    $0x5,%ecx
		movw   $0x0,0x4(%ecx,%edx,1)
		mov    (%ecx,%edx,1),%dx
		test   %dx,%dx
		jne    jump_a8f6f
	jump_a8f97:
		and    $0xffff,%eax
		mov    data_19f42e(,%eax,2),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    data_197494(,%eax,4),%ax
		xor    %edx,%edx
		test   %ax,%ax
		je     jump_a8feb
	jump_a8fc3:
		xor    %ebx,%ebx
		mov    %dx,%bx
		inc    %edx
		cmp    $0x64,%ebx
		jge    jump_a8feb
		mov    %eax,%ebx
		and    $0xffff,%ebx
		mov    %esi,%eax
		shl    $0x5,%ebx
		movw   $0x0,0x4(%ebx,%eax,1)
		mov    (%ebx,%eax,1),%ax
		test   %ax,%ax
		jne    jump_a8fc3
	jump_a8feb:
		mov    %esi,game_used_objectives
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_test_missions)	/* 0x0A8FF8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    %al,%cl
		xor    %eax,%eax
		mov    %cl,%al
		mov    $0x1,%ebx
		test   %eax,%eax
		jne    jump_a901a
		cmpw   $0x0,ingame__TrackThing
		jne    jump_a921a
	jump_a901a:
		mov    mission_open,%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_a9032
		mov    ingame__CurrentMission,%ax
		mov    %ax,data_19f432
	jump_a9032:
		xor    %eax,%eax
		mov    %cl,%al
		test   %eax,%eax
		jne    jump_a9050
		mov    $0x1,%edx
		call   ac_draw_objective
		mov    $0x1,%edx
		xor    %eax,%eax
		call   ac_add_signal_to_scanner
	jump_a9050:
		mov    ingame__CurrentMission,%si
	jump_a9057:
		xor    %edx,%edx
		mov    %bx,%dx
		cmp    mission_open(,%edx,2),%si
		je     jump_a906e
		cmp    $0x32,%edx
		jge    jump_a906e
		inc    %ebx
		jmp    jump_a9057
	jump_a906e:
		test   %cl,%cl
		je     jump_a9088
		xor    %eax,%eax
		mov    %bx,%ax
		xor    %edi,%edi
		mov    %di,mission_state(,%eax,2)
		xor    %ebx,%eax
		jmp    jump_a921c
	jump_a9088:
		cmpb   $0x0,in_network_game
		je     jump_a90a4
		mov    ingame__CurrentMission,%ax
		mov    $0x1,%ebx
		mov    %ax,data_19f432
		jmp    jump_a90c6
	jump_a90a4:
		xor    %eax,%eax
		mov    %bx,%ax
		cmp    $0x32,%eax
		jl     jump_a90c6
		mov    $0x1,%ebx
	jump_a90b3:
		xor    %edx,%edx
		mov    %bx,%dx
		cmpw   $0x0,mission_open(,%edx,2)
		je     jump_a90c6
		inc    %ebx
		jmp    jump_a90b3
	jump_a90c6:
		xor    %eax,%eax
		mov    %bx,%ax
		add    %eax,%eax
		xor    %edx,%edx
		mov    data_19f42e(%eax),%ecx
		mov    EXPORT_SYMBOL(next_mission),%dx
		sar    $0x10,%ecx
		cmp    %edx,%ecx
		jle    jump_a90ec
		movw   $0x1,mission_open(%eax)
	jump_a90ec:
		xor    %edx,%edx
		mov    %bx,%dx
		add    %edx,%edx
		mov    data_19f492(%edx),%eax
		sar    $0x10,%eax
		cmp    $0xffffffff,%eax
		jne    jump_a912a
		cmpw   $0x0,ingame__fld_unkCB5
		je     jump_a911f
		xor    %eax,%eax
		mov    ingame__fld_unkCB5,%ax
		mov    EXPORT_SYMBOL(objective_text)(,%eax,4),%eax
		mov    %eax,EXPORT_SYMBOL(scroll_text)
	jump_a911f:
		mov    $0xffffffff,%eax
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_a912a:
		mov    data_19f42e(%edx),%eax
		xor    %ecx,%ecx
		sar    $0x10,%eax
		mov    %cx,mission_state(%edx)
		call   ac_test_single_mission
		mov    ingame__CurrentMission,%di
		mov    %eax,%esi
		cmp    mission_open(%edx),%di
		jne    jump_a9175
		xor    %eax,%eax
		mov    mission_result,%al
		cmp    $0x1,%eax
		jne    jump_a9164
		mov    $0x1,%esi
	jump_a9164:
		xor    %eax,%eax
		mov    mission_result,%al
		cmp    $0xffffffff,%eax
		jne    jump_a9175
		mov    $0xffffffff,%esi
	jump_a9175:
		test   %si,%si
		jne    jump_a91bb
		mov    $0xffffffff,%esi
		xor    %eax,%eax
		jmp    jump_a9184
	jump_a9183:
		inc    %eax
	jump_a9184:
		xor    %ecx,%ecx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(playable_agents),%cl
		mov    %ax,%dx
		cmp    %ecx,%edx
		jge    jump_a91bb
		xor    %ecx,%ecx
		mov    EXPORT_SYMBOL(local_player_no),%cl
		imul   $0x1aa,%ecx,%ecx
		mov    EXPORT_SYMBOL(players)+0x09C(%ecx,%edx,4),%edx # players[0].MyAgent[0]
		mov    0xa(%edx),%dx
		and    $0xffff,%edx
		cmp    $0xd,%edx
		je     jump_a9183
		xor    %esi,%esi
	jump_a91bb:
		movswl %si,%eax
		test   %eax,%eax
		jle    jump_a91dc
		xor    %eax,%eax
		mov    %bx,%ax
		mov    $0x1,%ecx
		mov    %cx,mission_state(,%eax,2)
		mov    %ecx,%eax
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_a91dc:
		jge    jump_a9215
		mov    ingame__fld_unkCB5,%dx
		test   %dx,%dx
		je     jump_a91fb
		xor    %eax,%eax
		mov    %dx,%ax
		mov    EXPORT_SYMBOL(objective_text)(,%eax,4),%eax
		mov    %eax,EXPORT_SYMBOL(scroll_text)
	jump_a91fb:
		xor    %eax,%eax
		mov    %bx,%ax
		mov    $0xffffffff,%ebx
		mov    %bx,mission_state(,%eax,2)
		mov    %ebx,%eax
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_a9215:
		call   ac_post_process_blips
	jump_a921a:
		xor    %eax,%eax
	jump_a921c:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
veh_heap_add:	/* 0x0A9248 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    data_1c8a5c,%edx
		cmp    $0x100,%edx
		jge    jump_a9268
		lea    0x1(%edx),%ebx
		mov    %ebx,data_1c8a5c
	jump_a9268:
		mov    data_1c8a5c,%edx
		mov    %eax,veh_ma_heap(,%edx,4)
		mov    %edx,%eax
		cmp    $0x1,%edx
		je     jump_a93ac
		test   $0x1,%al
		jne    jump_a92f1
		mov    %edx,%esi
		sar    %esi
		lea    0x0(,%esi,4),%ebx
		mov    veh_ma_heap(%ebx),%ecx
		neg    %ecx
		lea    0x0(,%ecx,8),%edx
		add    %ecx,%edx
		mov    EXPORT_SYMBOL(game_traffic_nodes),%ebp
		shl    $0x2,%edx
		lea    (%edx,%ebp,1),%edi
		lea    0x0(,%eax,4),%edx
		mov    veh_ma_heap(%edx),%ecx
		neg    %ecx
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		shl    $0x2,%eax
		add    %eax,%ebp
		mov    0x18(%edi),%ax
		cmp    0x18(%ebp),%ax
		jl     jump_a93ac
		mov    veh_ma_heap(%edx),%eax
		mov    veh_ma_heap(%ebx),%ecx
		mov    %eax,veh_ma_heap(%ebx)
		mov    %esi,%eax
		mov    %ecx,veh_ma_heap(%edx)
	jump_a92f1:
		cmp    $0x1,%eax
		je     jump_a93ac
		mov    veh_ma_heap(,%eax,4),%ecx
		neg    %ecx
		imul   $0x24,%ecx,%ecx
		mov    %eax,%esi
		xor    $0x1,%si
		mov    veh_ma_heap(,%esi,4),%ebx
		neg    %ebx
		imul   $0x24,%ebx,%ebx
		mov    %eax,%edx
		sar    %edx
		mov    %edx,(%esp)
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edx
		add    %edx,%ecx
		mov    (%esp),%ebp
		mov    0x18(%ecx),%di
		add    %edx,%ebx
		shl    $0x2,%ebp
		cmp    0x18(%ebx),%di
		jge    jump_a935f
		mov    veh_ma_heap(%ebp),%esi
		neg    %esi
		imul   $0x24,%esi,%esi
		add    %esi,%edx
		mov    0x18(%ebx),%bx
		mov    0x18(%edx),%si
		cmp    %si,%bx
		jl     jump_a935b
		cmp    %si,%di
		jl     jump_a935b
		mov    (%esp),%eax
	jump_a935b:
		mov    %eax,%edx
		jmp    jump_a9382
	jump_a935f:
		mov    veh_ma_heap(%ebp),%eax
		neg    %eax
		imul   $0x24,%eax,%eax
		add    %eax,%edx
		mov    %edi,%eax
		mov    0x18(%edx),%di
		cmp    %di,%ax
		jl     jump_a9380
		cmp    0x18(%ebx),%di
		jg     jump_a9380
		mov    (%esp),%esi
	jump_a9380:
		mov    %esi,%edx
	jump_a9382:
		mov    (%esp),%ecx
		cmp    %ecx,%edx
		je     jump_a93ac
		mov    %ecx,%eax
		mov    veh_ma_heap(,%ecx,4),%esi
		mov    veh_ma_heap(,%edx,4),%ecx
		mov    %ecx,veh_ma_heap(,%eax,4)
		mov    %esi,veh_ma_heap(,%edx,4)
		jmp    jump_a92f1
	jump_a93ac:
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
VNAV_find_nearnodes:	/* 0x0A9540 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		mov    %ax,0x8(%esp)
		mov    %dx,0x4(%esp)
		xor    %edx,%edx
		xor    %eax,%eax
	jump_a9556:
		xor    %ebx,%ebx
		add    $0x4,%edx
		mov    %bx,VNAV_nearnodes(%eax)
		mov    $0xfffffff,%ebx
		add    $0x2,%eax
		mov    %ebx,data_1c8540(%edx)
		cmp    $0xa,%eax
		jne    jump_a9556
		mov    $0x1,%esi
		mov    $0x24,%edi
		xor    %ecx,%ecx
		jmp    jump_a9587
	jump_a9583:
		add    $0x24,%edi
		inc    %esi
	jump_a9587:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(next_traffic_node),%ax
		cmp    %eax,%esi
		jge    jump_a9621
		mov    EXPORT_SYMBOL(game_traffic_nodes),%eax
		add    %edi,%eax
		xor    %edx,%edx
		mov    0x12(%eax),%dx
		cmp    $0xff,%edx
		je     jump_a9583
		testb  $0xa,0x13(%eax)
		jne    jump_a9583
		movswl (%eax),%edx
		mov    %edx,(%esp)
		mov    0x6(%esp),%edx
		mov    (%esp),%ebp
		sar    $0x10,%edx
		sub    %ebp,%edx
		imul   %edx,%edx
		mov    0x2(%esp),%ebp
		mov    0x2(%eax),%eax
		sar    $0x10,%ebp
		sar    $0x10,%eax
		sub    %eax,%ebp
		mov    %ebp,%eax
		imul   %ebp,%eax
		add    %edx,%eax
		cmp    %ebx,%eax
		jge    jump_a9583
		mov    $0x4,%edx
		mov    %si,VNAV_nearnodes(,%ecx,2)
		mov    %eax,VNAV_nodedists(,%ecx,4)
		mov    $0x1,%eax
		mov    VNAV_nodedists,%ebx
		xor    %ecx,%ecx
		jmp    jump_a9611
	jump_a9604:
		inc    %eax
		add    $0x4,%edx
		cmp    $0x5,%eax
		jge    jump_a9583
	jump_a9611:
		mov    VNAV_nodedists(%edx),%ebp
		cmp    %ebp,%ebx
		jge    jump_a9604
		mov    %eax,%ecx
		mov    %ebp,%ebx
		jmp    jump_a9604
	jump_a9621:
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
VNAV_qwertyuiop:	/* 0x0A9684 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x2c,%esp
		mov    %eax,%ebp
		mov    %edx,0x28(%esp)
		mov    %ecx,0x24(%esp)
		mov    0x3c(%esp),%eax
		mov    0x40(%esp),%esi
		mov    0x44(%esp),%edx
		mov    0x24(%esp),%edi
		sub    %ebx,%eax
		sub    %ecx,%esi
		mov    0x48(%esp),%ecx
		sub    %ebx,%edx
		sub    %edi,%ecx
		mov    %edx,%edi
		imul   %eax,%edi
		mov    %edi,0xc(%esp)
		mov    %ecx,%edi
		imul   %esi,%edi
		mov    %edi,0x10(%esp)
		mov    0xc(%esp),%edi
		add    0x10(%esp),%edi
		mov    %edi,0x18(%esp)
		test   %edi,%edi
		jg     jump_a9700
		mov    0x28(%esp),%eax
		movl   $0x0,(%eax)
		mov    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebx
		mov    %ecx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%ebx
		jle    jump_a96f4
		sar    %eax
		jmp    jump_a96f6
	jump_a96f4:
		sar    %ebx
	jump_a96f6:
		add    %ebx,%eax
		mov    %eax,0x0(%ebp)
		jmp    jump_a97f4
	jump_a9700:
		sub    0x3c(%esp),%ebx
		mov    0x40(%esp),%edi
		mov    %ebx,0x4(%esp)
		mov    0x24(%esp),%ebx
		sub    %edi,%ebx
		mov    0x3c(%esp),%edi
		mov    %ebx,0x8(%esp)
		mov    0x44(%esp),%ebx
		sub    %edi,%ebx
		mov    0x48(%esp),%edi
		mov    %ebx,0x14(%esp)
		sub    0x40(%esp),%edi
		mov    0x14(%esp),%ebx
		imul   0x4(%esp),%ebx
		mov    %ebx,(%esp)
		mov    0x8(%esp),%ebx
		imul   %edi,%ebx
		mov    %ebx,0x4(%esp)
		mov    (%esp),%ebx
		add    0x4(%esp),%ebx
		test   %ebx,%ebx
		jg     jump_a9782
		mov    0x28(%esp),%eax
		movl   $0xff,(%eax)
		mov    0x14(%esp),%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebx
		mov    %edi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%ebx
		jle    jump_a9772
		sar    %eax
		jmp    jump_a9774
	jump_a9772:
		sar    %ebx
	jump_a9774:
		add    %ebx,%eax
		mov    %eax,0x0(%ebp)
		add    $0x2c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x10
	jump_a9782:
		imul   %esi,%edx
		mov    %ecx,%ebx
		imul   %eax,%ebx
		sub    %ebx,%edx
		mov    %edx,%ebx
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ecx
		mov    %eax,0x20(%esp)
		mov    %esi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%esi
		mov    %eax,0x1c(%esp)
		mov    %ebx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebx
		mov    0x18(%esp),%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%edi
		cmp    %esi,%ecx
		jle    jump_a97c2
		sar    %esi
		jmp    jump_a97c4
	jump_a97c2:
		sar    %ecx
	jump_a97c4:
		add    %esi,%ecx
		mov    %ebx,%edx
		mov    %ebx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    0x20(%esp),%ebx
		imul   %ebx,%ebx
		mov    0x1c(%esp),%edx
		imul   %edx,%edx
		mov    %eax,0x0(%ebp)
		mov    %edi,%eax
		add    %edx,%ebx
		mov    %edi,%edx
		sar    $0x8,%ebx
		sar    $0x1f,%edx
		idiv   %ebx
		mov    0x28(%esp),%edx
		mov    %eax,(%edx)
	jump_a97f4:
		add    $0x2c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x10


/*----------------------------------------------------------------*/
VNAV_find_dropoff_point:	/* 0x0A9870 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x3c,%esp
		mov    %eax,0x14(%esp)
		mov    %edx,0xc(%esp)
		mov    %ebx,0x10(%esp)
		mov    %cx,0x38(%esp)
		mov    data_1c8538,%eax
		sar    $0x10,%eax
		test   %eax,%eax
		je     jump_a9f03
		mov    0x14(%esp),%eax
		mov    $0xfffffff,%edx
		xor    %ebx,%ebx
		mov    %edx,0x1c(%esp)
		mov    %ebx,0x8(%esp)
		movw   $0x270f,(%eax)
		jmp    jump_a98c5
	jump_a98b1:
		mov    0x8(%esp),%ecx
		add    $0x2,%ecx
		mov    %ecx,0x8(%esp)
		cmp    $0xa,%ecx
		je     jump_a9f03
	jump_a98c5:
		mov    0x8(%esp),%eax
		mov    data_1c8538(%eax),%eax
		sar    $0x10,%eax
		imul   $0x24,%eax,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edx
		add    %edx,%eax
		xor    %edi,%edi
		movswl (%eax),%edx
		mov    0x2(%eax),%eax
		mov    %edi,0x34(%esp)
		sar    $0x10,%eax
		mov    %edi,0x28(%esp)
		mov    %eax,0x20(%esp)
		mov    0x8(%esp),%eax
		mov    %edx,0x24(%esp)
		mov    %eax,0x18(%esp)
		mov    %eax,%ebp
		jmp    jump_a9e52
	jump_a9907:
		mov    (%eax),%eax
		jmp    jump_a9917
	jump_a990b:
		imul   $0x3c,%eax,%eax
		mov    EXPORT_SYMBOL(sthings),%edx
		mov    (%edx,%eax,1),%eax
	jump_a9917:
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_a9ed7
	jump_a9922:
		xor    %edx,%edx
	jump_a9924:
		test   %edx,%edx
		jne    jump_a9e35
		lea    -0x1(%ebx),%eax
		shl    $0x7,%eax
		add    %ecx,%eax
		imul   $0x12,%eax,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0x6(%edx,%eax,1),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		je     jump_a9980
	jump_a9948:
		jle    jump_a996d
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x9(%eax),%dl
		cmp    $0x2,%edx
		jne    jump_a9969
		mov    $0x1,%edx
		jmp    jump_a9982
	jump_a9969:
		mov    (%eax),%eax
		jmp    jump_a9979
	jump_a996d:
		imul   $0x3c,%eax,%eax
		mov    EXPORT_SYMBOL(sthings),%edx
		mov    (%edx,%eax,1),%eax
	jump_a9979:
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_a9948
	jump_a9980:
		xor    %edx,%edx
	jump_a9982:
		test   %edx,%edx
		jne    jump_a9e35
		lea    -0x1(%ebx),%eax
		lea    0x1(%ecx),%edx
		shl    $0x7,%eax
		add    %edx,%eax
		imul   $0x12,%eax,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0x6(%edx,%eax,1),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		je     jump_a99e0
	jump_a99a9:
		jle    jump_a99cd
		imul   $0xa8,%eax,%edx
		mov    things,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x9(%eax),%dl
		cmp    $0x2,%edx
		jne    jump_a99c9
		mov    $0x1,%eax
		jmp    jump_a99e2
	jump_a99c9:
		mov    (%eax),%eax
		jmp    jump_a99d9
	jump_a99cd:
		imul   $0x3c,%eax,%eax
		mov    EXPORT_SYMBOL(sthings),%edx
		mov    (%edx,%eax,1),%eax
	jump_a99d9:
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_a99a9
	jump_a99e0:
		xor    %eax,%eax
	jump_a99e2:
		test   %eax,%eax
		jne    jump_a9e35
		mov    %ebx,%eax
		lea    -0x1(%ecx),%edx
		shl    $0x7,%eax
		add    %edx,%eax
		imul   $0x12,%eax,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0x6(%edx,%eax,1),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		je     jump_a9a40
	jump_a9a08:
		jle    jump_a9a2d
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x9(%eax),%dl
		cmp    $0x2,%edx
		jne    jump_a9a29
		mov    $0x1,%edx
		jmp    jump_a9a42
	jump_a9a29:
		mov    (%eax),%eax
		jmp    jump_a9a39
	jump_a9a2d:
		imul   $0x3c,%eax,%eax
		mov    EXPORT_SYMBOL(sthings),%edx
		mov    (%edx,%eax,1),%eax
	jump_a9a39:
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_a9a08
	jump_a9a40:
		xor    %edx,%edx
	jump_a9a42:
		test   %edx,%edx
		jne    jump_a9e35
		mov    %ebx,%eax
		shl    $0x7,%eax
		add    %ecx,%eax
		imul   $0x12,%eax,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0x6(%edx,%eax,1),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		je     jump_a9a9c
	jump_a9a65:
		jle    jump_a9a89
		imul   $0xa8,%eax,%edx
		mov    things,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x9(%eax),%dl
		cmp    $0x2,%edx
		jne    jump_a9a85
		mov    $0x1,%eax
		jmp    jump_a9a9e
	jump_a9a85:
		mov    (%eax),%eax
		jmp    jump_a9a95
	jump_a9a89:
		imul   $0x3c,%eax,%eax
		mov    EXPORT_SYMBOL(sthings),%edx
		mov    (%edx,%eax,1),%eax
	jump_a9a95:
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_a9a65
	jump_a9a9c:
		xor    %eax,%eax
	jump_a9a9e:
		test   %eax,%eax
		jne    jump_a9e35
		mov    %ebx,%eax
		lea    0x1(%ecx),%edx
		shl    $0x7,%eax
		add    %edx,%eax
		imul   $0x12,%eax,%edx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		mov    0x6(%edx,%eax,1),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		je     jump_a9afb
	jump_a9ac3:
		jle    jump_a9ae8
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x9(%eax),%dl
		cmp    $0x2,%edx
		jne    jump_a9ae4
		mov    $0x1,%edx
		jmp    jump_a9afd
	jump_a9ae4:
		mov    (%eax),%eax
		jmp    jump_a9af4
	jump_a9ae8:
		imul   $0x3c,%eax,%eax
		mov    EXPORT_SYMBOL(sthings),%edx
		mov    (%edx,%eax,1),%eax
	jump_a9af4:
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_a9ac3
	jump_a9afb:
		xor    %edx,%edx
	jump_a9afd:
		test   %edx,%edx
		jne    jump_a9e35
		lea    0x1(%ebx),%eax
		lea    -0x1(%ecx),%edx
		shl    $0x7,%eax
		add    %edx,%eax
		imul   $0x12,%eax,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0x6(%edx,%eax,1),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		je     jump_a9b5c
	jump_a9b24:
		jle    jump_a9b49
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x9(%eax),%dl
		cmp    $0x2,%edx
		jne    jump_a9b45
		mov    $0x1,%edx
		jmp    jump_a9b5e
	jump_a9b45:
		mov    (%eax),%eax
		jmp    jump_a9b55
	jump_a9b49:
		imul   $0x3c,%eax,%eax
		mov    EXPORT_SYMBOL(sthings),%edx
		mov    (%edx,%eax,1),%eax
	jump_a9b55:
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_a9b24
	jump_a9b5c:
		xor    %edx,%edx
	jump_a9b5e:
		test   %edx,%edx
		jne    jump_a9e35
		lea    0x1(%ebx),%eax
		shl    $0x7,%eax
		add    %ecx,%eax
		imul   $0x12,%eax,%edx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		mov    0x6(%edx,%eax,1),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		je     jump_a9bb8
	jump_a9b81:
		jle    jump_a9ba5
		imul   $0xa8,%eax,%edx
		mov    things,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x9(%eax),%dl
		cmp    $0x2,%edx
		jne    jump_a9ba1
		mov    $0x1,%eax
		jmp    jump_a9bba
	jump_a9ba1:
		mov    (%eax),%eax
		jmp    jump_a9bb1
	jump_a9ba5:
		imul   $0x3c,%eax,%eax
		mov    EXPORT_SYMBOL(sthings),%edx
		mov    (%edx,%eax,1),%eax
	jump_a9bb1:
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_a9b81
	jump_a9bb8:
		xor    %eax,%eax
	jump_a9bba:
		test   %eax,%eax
		jne    jump_a9e35
		lea    0x1(%ebx),%eax
		inc    %ecx
		shl    $0x7,%eax
		add    %ecx,%eax
		imul   $0x12,%eax,%edx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		mov    0x6(%edx,%eax,1),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		je     jump_a9c14
	jump_a9bde:
		jle    jump_a9c02
		imul   $0xa8,%eax,%edx
		mov    things,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x9(%eax),%dl
		cmp    $0x2,%edx
		jne    jump_a9bfe
		mov    $0x1,%eax
		jmp    jump_a9c16
	jump_a9bfe:
		mov    (%eax),%eax
		jmp    jump_a9c0d
	jump_a9c02:
		imul   $0x3c,%eax,%edx
		mov    EXPORT_SYMBOL(sthings),%eax
		mov    (%edx,%eax,1),%eax
	jump_a9c0d:
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_a9bde
	jump_a9c14:
		xor    %eax,%eax
	jump_a9c16:
		test   %eax,%eax
		jne    jump_a9e35
		mov    0x24(%esp),%edi
		mov    0x2c(%esp),%eax
		mov    0x20(%esp),%esi
		mov    0x30(%esp),%edx
		sub    %eax,%edi
		sub    %edx,%esi
		sar    $0x3,%edi
		sar    $0x3,%esi
		lea    (%eax,%edi,1),%ebx
		lea    (%edx,%esi,1),%ecx
		mov    %ecx,%eax
		mov    %ebx,%edx
		sar    $0x8,%eax
		sar    $0x8,%edx
		shl    $0x7,%eax
		add    %eax,%edx
		imul   $0x12,%edx,%edx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		mov    0x6(%edx,%eax,1),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		je     jump_a9c97
	jump_a9c60:
		jle    jump_a9c85
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x9(%eax),%dl
		cmp    $0x2,%edx
		jne    jump_a9c81
		mov    $0x1,%eax
		jmp    jump_a9c99
	jump_a9c81:
		mov    (%eax),%eax
		jmp    jump_a9c90
	jump_a9c85:
		imul   $0x3c,%eax,%edx
		mov    EXPORT_SYMBOL(sthings),%eax
		mov    (%edx,%eax,1),%eax
	jump_a9c90:
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_a9c60
	jump_a9c97:
		xor    %eax,%eax
	jump_a9c99:
		test   %eax,%eax
		jne    jump_a9e35
		add    %esi,%ecx
		add    %edi,%ebx
		mov    %ecx,%eax
		mov    %ebx,%edx
		sar    $0x8,%eax
		sar    $0x8,%edx
		shl    $0x7,%eax
		add    %edx,%eax
		imul   $0x12,%eax,%edx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		mov    0x6(%edx,%eax,1),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		je     jump_a9cfe
	jump_a9cc7:
		jle    jump_a9cec
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x9(%eax),%dl
		cmp    $0x2,%edx
		jne    jump_a9ce8
		mov    $0x1,%eax
		jmp    jump_a9d00
	jump_a9ce8:
		mov    (%eax),%eax
		jmp    jump_a9cf7
	jump_a9cec:
		imul   $0x3c,%eax,%edx
		mov    EXPORT_SYMBOL(sthings),%eax
		mov    (%edx,%eax,1),%eax
	jump_a9cf7:
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_a9cc7
	jump_a9cfe:
		xor    %eax,%eax
	jump_a9d00:
		test   %eax,%eax
		jne    jump_a9e35
		add    %esi,%ecx
		add    %edi,%ebx
		mov    %ecx,%eax
		mov    %ebx,%edx
		sar    $0x8,%eax
		sar    $0x8,%edx
		shl    $0x7,%eax
		add    %edx,%eax
		imul   $0x12,%eax,%edx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		mov    0x6(%edx,%eax,1),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		je     jump_a9d66
	jump_a9d2e:
		jle    jump_a9d53
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x9(%eax),%dl
		cmp    $0x2,%edx
		jne    jump_a9d4f
		mov    $0x1,%edx
		jmp    jump_a9d68
	jump_a9d4f:
		mov    (%eax),%eax
		jmp    jump_a9d5f
	jump_a9d53:
		imul   $0x3c,%eax,%eax
		mov    EXPORT_SYMBOL(sthings),%edx
		mov    (%edx,%eax,1),%eax
	jump_a9d5f:
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_a9d2e
	jump_a9d66:
		xor    %edx,%edx
	jump_a9d68:
		test   %edx,%edx
		jne    jump_a9e35
		add    %esi,%ecx
		add    %edi,%ebx
		sar    $0x8,%ecx
		sar    $0x8,%ebx
		shl    $0x7,%ecx
		add    %ecx,%ebx
		imul   $0x12,%ebx,%ebx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		mov    0x6(%ebx,%eax,1),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		je     jump_a9dca
	jump_a9d92:
		jle    jump_a9db7
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x9(%eax),%dl
		cmp    $0x2,%edx
		jne    jump_a9db3
		mov    $0x1,%edx
		jmp    jump_a9dcc
	jump_a9db3:
		mov    (%eax),%eax
		jmp    jump_a9dc3
	jump_a9db7:
		imul   $0x3c,%eax,%eax
		mov    EXPORT_SYMBOL(sthings),%edx
		mov    (%edx,%eax,1),%eax
	jump_a9dc3:
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_a9d92
	jump_a9dca:
		xor    %edx,%edx
	jump_a9dcc:
		test   %edx,%edx
		jne    jump_a9e35
	jump_a9dd0:
		mov    0x4a(%esp),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0x3a(%esp),%eax
		sar    $0x10,%eax
		mov    0x34(%esp),%ebx
		push   %eax
		mov    0x34(%esp),%ecx
		lea    0xc(%esp),%edx
		push   %ebx
		lea    0xc(%esp),%eax
		mov    0x30(%esp),%ebx
		push   %ecx
		mov    0x30(%esp),%ecx
		mov    0x2c(%esp),%esi
		call   VNAV_qwertyuiop
		cmp    (%esp),%esi
		jle    jump_a9e35
		mov    0x18(%esp),%eax
		mov    0x14(%esp),%edx
		mov    VNAV_nearnodes(%eax),%ax
		mov    %ax,(%edx)
		mov    0xc(%esp),%edx
		mov    0x34(%esp),%al
		mov    %al,(%edx)
		mov    0x10(%esp),%edx
		mov    0x4(%esp),%eax
		mov    %eax,(%edx)
		mov    (%esp),%eax
		mov    %eax,0x1c(%esp)
	jump_a9e35:
		mov    0x28(%esp),%edx
		mov    0x34(%esp),%ebx
		add    $0x2,%edx
		inc    %ebx
		mov    %edx,0x28(%esp)
		mov    %ebx,0x34(%esp)
		cmp    $0x4,%ebx
		jge    jump_a98b1
	jump_a9e52:
		mov    data_1c8538(%ebp),%eax
		sar    $0x10,%eax
		imul   $0x24,%eax,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edx
		mov    0x28(%esp),%ebx
		add    %edx,%eax
		mov    0x34(%esp),%esi
		mov    0x6(%ebx,%eax,1),%cx
		add    %esi,%eax
		mov    0xe(%eax),%bl
		movswl %cx,%eax
		test   %eax,%eax
		jge    jump_a9e35
		test   $0x40,%bl
		jne    jump_a9e35
		neg    %eax
		imul   $0x24,%eax,%eax
		add    %edx,%eax
		movswl (%eax),%edx
		mov    %edx,0x2c(%esp)
		mov    0x2(%eax),%edx
		sar    $0x10,%edx
		mov    %edx,0x30(%esp)
		testb  $0x8,0x13(%eax)
		je     jump_a9dd0
		mov    0x30(%esp),%ebx
		mov    0x2c(%esp),%ecx
		sar    $0x8,%ebx
		sar    $0x8,%ecx
		lea    -0x1(%ebx),%eax
		lea    -0x1(%ecx),%edx
		shl    $0x7,%eax
		add    %edx,%eax
		imul   $0x12,%eax,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0x6(%edx,%eax,1),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		je     jump_a9922
	jump_a9ed7:
		jle    jump_a990b
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x9(%eax),%dl
		cmp    $0x2,%edx
		jne    jump_a9907
		mov    $0x1,%edx
		jmp    jump_a9924
	jump_a9f03:
		add    $0x3c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
VNAV_find_start_dropoff_point:	/* 0x0A9F0C */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x28,%esp
		mov    %eax,0x18(%esp)
		mov    %edx,0x10(%esp)
		mov    %ebx,(%esp)
		mov    %cx,0x24(%esp)
		mov    data_1c8538,%eax
		sar    $0x10,%eax
		test   %eax,%eax
		je     jump_aa040
		mov    0x18(%esp),%eax
		mov    $0xfffffff,%edx
		xor    %ebx,%ebx
		mov    %edx,0x14(%esp)
		mov    %ebx,0xc(%esp)
		movw   $0x270f,(%eax)
		jmp    jump_a9f60
	jump_a9f4c:
		mov    0xc(%esp),%ecx
		add    $0x2,%ecx
		mov    %ecx,0xc(%esp)
		cmp    $0xa,%ecx
		je     jump_aa040
	jump_a9f60:
		mov    0xc(%esp),%eax
		mov    data_1c8538(%eax),%eax
		sar    $0x10,%eax
		imul   $0x24,%eax,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%ebp
		xor    %edi,%edi
		xor    %esi,%esi
		add    %eax,%ebp
		mov    %edi,0x20(%esp)
		mov    0xc(%esp),%edi
		movswl 0x0(%ebp),%eax
		mov    0x2(%ebp),%ebp
		mov    %eax,0x1c(%esp)
		sar    $0x10,%ebp
		jmp    jump_a9fa5
	jump_a9f94:
		mov    0x20(%esp),%eax
		inc    %eax
		add    $0x2,%esi
		mov    %eax,0x20(%esp)
		cmp    $0x4,%eax
		jge    jump_a9f4c
	jump_a9fa5:
		mov    data_1c8538(%edi),%eax
		sar    $0x10,%eax
		imul   $0x24,%eax,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edx
		add    %edx,%eax
		mov    0x20(%esp),%ecx
		mov    0x6(%esi,%eax,1),%bx
		add    %ecx,%eax
		mov    0xe(%eax),%cl
		movswl %bx,%eax
		test   %eax,%eax
		jge    jump_a9f94
		test   $0x40,%cl
		jne    jump_a9f94
		neg    %eax
		imul   $0x24,%eax,%eax
		movswl (%edx,%eax,1),%ebx
		mov    0x2(%edx,%eax,1),%edx
		mov    0x36(%esp),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0x26(%esp),%eax
		sar    $0x10,%eax
		push   %eax
		sar    $0x10,%edx
		push   %edx
		mov    %ebp,%ecx
		lea    0x10(%esp),%eax
		push   %ebx
		lea    0x18(%esp),%edx
		mov    0x2c(%esp),%ebx
		call   VNAV_qwertyuiop
		mov    0x4(%esp),%eax
		cmp    0x14(%esp),%eax
		jge    jump_a9f94
		mov    0x18(%esp),%edx
		mov    VNAV_nearnodes(%edi),%ax
		mov    %ax,(%edx)
		mov    0x10(%esp),%edx
		mov    0x20(%esp),%al
		mov    %al,(%edx)
		mov    (%esp),%edx
		mov    0x8(%esp),%eax
		mov    %eax,(%edx)
		mov    0x4(%esp),%eax
		mov    %eax,0x14(%esp)
		jmp    jump_a9f94
	jump_aa040:
		add    $0x28,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
VNAV_do:	/* 0x0AA04C */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x28,%esp
		mov    %ax,0x24(%esp)
		mov    %dx,0x20(%esp)
		mov    %ebx,(%esp)
		mov    0x22(%esp),%eax
		mov    $0xffffffff,%edx
		sar    $0x10,%eax
		mov    %edx,0x8(%esp)
		test   %eax,%eax
		jge    jump_aa07f
		mov    0x1e(%esp),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jl     jump_aa08d
	jump_aa07f:
		mov    (%esp),%eax
		movw   $0x2a,0x8(%eax)
		jmp    jump_aa495
	jump_aa08d:
		mov    0x24(%esp),%eax
		cmp    0x20(%esp),%ax
		jne    jump_aa0a9
		mov    (%esp),%eax
		movw   $0x2a,0x8(%eax)
		add    $0x28,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_aa0a9:
		mov    $0x1,%edi
		mov    $0x24,%eax
		jmp    jump_aa0c6
	jump_aa0b5:
		mov    EXPORT_SYMBOL(game_traffic_nodes),%ebx
		add    $0x24,%eax
		inc    %edi
		movw   $0x0,-0xe(%ebx,%eax,1)
	jump_aa0c6:
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(next_traffic_node),%bx
		cmp    %ebx,%edi
		jl     jump_aa0b5
		mov    EXPORT_SYMBOL(game_traffic_nodes),%ebx
		mov    $0xabcd,%ecx
		mov    0x22(%esp),%eax
		movw   $0x0,0x18(%ebx)
		sar    $0x10,%eax
		mov    %ecx,data_1c865c
		mov    %eax,%ecx
		neg    %ecx
		imul   $0x24,%ecx,%ecx
		xor    %esi,%esi
		mov    %esi,data_1c8a5c
		movw   $0x0,0x18(%ecx,%ebx,1)
		call   veh_heap_add
		cmpl   $0xabcd,data_1c865c
		je     jump_aa430
	jump_aa11c:
		mov    data_1c8a5c,%eax
		mov    $0xabcd,%ebp
		mov    veh_ma_heap(,%eax,4),%esi
		mov    data_1c865c,%ecx
		mov    %esi,data_1c865c
		mov    $0x1,%ebx
		mov    %ebp,veh_ma_heap(,%eax,4)
		sub    %ebx,%eax
		mov    %eax,data_1c8a5c
		je     jump_aa27e
	jump_aa152:
		lea    (%ebx,%ebx,1),%eax
		mov    data_1c8a5c,%edi
		mov    %eax,%esi
		mov    %eax,0x1c(%esp)
		xor    $0x1,%si
		lea    0x0(,%ebx,4),%eax
		cmp    %edi,%esi
		jg     jump_aa230
		mov    veh_ma_heap(%eax),%edi
		neg    %edi
		imul   $0x24,%edi,%edi
		mov    EXPORT_SYMBOL(game_traffic_nodes),%eax
		lea    (%eax,%edi,1),%edx
		mov    veh_ma_heap(,%ebx,8),%edi
		neg    %edi
		imul   $0x24,%edi,%edi
		mov    %edx,0x18(%esp)
		mov    0x18(%edx),%dx
		add    %eax,%edi
		lea    0x0(,%esi,4),%ebp
		cmp    0x18(%edi),%dx
		jge    jump_aa1d8
		mov    veh_ma_heap(%ebp),%ebp
		neg    %ebp
		imul   $0x24,%ebp,%ebp
		add    %ebp,%eax
		mov    0x18(%edi),%di
		mov    0x18(%eax),%dx
		cmp    %dx,%di
		jge    jump_aa1c8
		mov    %ebx,%eax
		jmp    jump_aa209
	jump_aa1c8:
		mov    0x18(%esp),%edi
		cmp    0x18(%edi),%dx
		jle    jump_aa1d4
		mov    %ebx,%esi
	jump_aa1d4:
		mov    %esi,%eax
		jmp    jump_aa209
	jump_aa1d8:
		mov    veh_ma_heap(%ebp),%ebp
		neg    %ebp
		imul   $0x24,%ebp,%ebp
		mov    0x18(%esp),%edx
		mov    0x18(%edx),%dx
		add    %ebp,%eax
		cmp    0x18(%eax),%dx
		jge    jump_aa1f9
		mov    0x1c(%esp),%eax
		jmp    jump_aa209
	jump_aa1f9:
		mov    0x18(%edi),%di
		cmp    0x18(%eax),%di
		jge    jump_aa207
		mov    0x1c(%esp),%esi
	jump_aa207:
		mov    %esi,%eax
	jump_aa209:
		cmp    %ebx,%eax
		je     jump_aa27e
		mov    veh_ma_heap(,%eax,4),%ebp
		mov    veh_ma_heap(,%ebx,4),%edi
		mov    %ebp,veh_ma_heap(,%ebx,4)
		mov    %eax,%ebx
		mov    %edi,veh_ma_heap(,%eax,4)
		jmp    jump_aa152
	jump_aa230:
		cmp    %edi,%ebx
		je     jump_aa27e
		mov    veh_ma_heap(%eax),%ebx
		neg    %ebx
		imul   $0x24,%ebx,%ebx
		mov    EXPORT_SYMBOL(game_traffic_nodes),%esi
		lea    (%esi,%ebx,1),%ebp
		lea    0x0(,%edi,4),%ebx
		mov    veh_ma_heap(%ebx),%edi
		neg    %edi
		imul   $0x24,%edi,%edi
		add    %esi,%edi
		mov    0x18(%ebp),%si
		cmp    0x18(%edi),%si
		jl     jump_aa27e
		mov    veh_ma_heap(%ebx),%edi
		mov    veh_ma_heap(%eax),%esi
		mov    %edi,veh_ma_heap(%eax)
		mov    %esi,veh_ma_heap(%ebx)
	jump_aa27e:
		test   %ecx,%ecx
		jl     jump_aa287
		jmp    jump_aa420
	jump_aa287:
		xor    %edi,%edi
		mov    %edi,0x14(%esp)
	jump_aa28d:
		mov    %ecx,%ebp
		neg    %ebp
		imul   $0x24,%ebp,%ebp
		mov    EXPORT_SYMBOL(game_traffic_nodes),%eax
		mov    0x14(%esp),%ebx
		lea    (%eax,%ebp,1),%esi
		mov    0x1e(%esp),%edx
		mov    0x4(%esi,%ebx,1),%ebx
		sar    $0x10,%edx
		sar    $0x10,%ebx
		cmp    %edx,%ebx
		jne    jump_aa2c9
		mov    %edx,%edi
		neg    %edi
		lea    0x0(,%edi,8),%esi
		add    %edi,%esi
		mov    %cx,0x16(%eax,%esi,4)
		jmp    jump_aa453
	jump_aa2c9:
		test   %ebx,%ebx
		jge    jump_aa389
		mov    %ebx,%edx
		mov    %ebx,0xc(%esp)
		neg    %edx
		mov    %edx,0xc(%esp)
		imul   $0x24,%edx,%edx
		add    %edx,%eax
		mov    %edx,0x10(%esp)
		cmpw   $0x0,0x16(%eax)
		jne    jump_aa389
		testb  $0x20,0x13(%eax)
		jne    jump_aa389
		movswl (%eax),%eax
		mov    %eax,0x4(%esp)
		mov    0x4(%esp),%edx
		movswl (%esi),%eax
		sub    %eax,%edx
		mov    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%esi
		mov    EXPORT_SYMBOL(game_traffic_nodes),%eax
		mov    0x10(%esp),%edx
		mov    %eax,0x4(%esp)
		add    %edx,%eax
		add    0x4(%esp),%ebp
		mov    0x2(%eax),%eax
		mov    0x2(%ebp),%ebp
		sar    $0x10,%eax
		sar    $0x10,%ebp
		sub    %ebp,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%esi
		jle    jump_aa342
		sar    %eax
		jmp    jump_aa344
	jump_aa342:
		sar    %esi
	jump_aa344:
		add    %esi,%eax
		mov    %ecx,%esi
		neg    %esi
		imul   $0x24,%esi,%ebp
		mov    EXPORT_SYMBOL(game_traffic_nodes),%esi
		add    %ebp,%esi
		mov    0x16(%esi),%ebp
		sar    $0x10,%ebp
		mov    0xe(%edi,%esi,1),%dh
		add    %ebp,%eax
		test   $0x40,%dh
		je     jump_aa36b
		add    $0x1f4,%eax
	jump_aa36b:
		mov    %ebx,%esi
		neg    %esi
		imul   $0x24,%esi,%esi
		mov    EXPORT_SYMBOL(game_traffic_nodes),%ebp
		mov    %ax,0x18(%esi,%ebp,1)
		mov    %ebx,%eax
		mov    %cx,0x16(%esi,%ebp,1)
		call   veh_heap_add
	jump_aa389:
		test   %ebx,%ebx
		jle    jump_aa40b
		imul   $0xa8,%ebx,%eax
		mov    things,%ebx
		mov    0x1e(%esp),%esi
		add    %ebx,%eax
		sar    $0x10,%esi
		mov    0x80(%eax),%ebx
		mov    0x82(%eax),%eax
		sar    $0x10,%ebx
		sar    $0x10,%eax
		cmp    %esi,%ebx
		jne    jump_aa3d7
		neg    %esi
		lea    0x0(,%esi,8),%eax
		add    %esi,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%esi
		mov    %cx,0x16(%esi,%eax,4)
		jmp    jump_aa453
	jump_aa3d7:
		mov    %ebx,%esi
		neg    %esi
		imul   $0x24,%esi,%esi
		mov    EXPORT_SYMBOL(game_traffic_nodes),%ebp
		add    %ebp,%esi
		cmpw   $0x0,0x16(%esi)
		jne    jump_aa40b
		mov    %ecx,%edx
		neg    %edx
		imul   $0x24,%edx,%edx
		add    %edx,%ebp
		mov    0x18(%ebp),%dx
		add    %edx,%eax
		mov    %ax,0x18(%esi)
		mov    %ebx,%eax
		mov    %cx,0x16(%esi)
		call   veh_heap_add
	jump_aa40b:
		mov    0x14(%esp),%ebx
		add    $0x2,%ebx
		inc    %edi
		mov    %ebx,0x14(%esp)
		cmp    $0x4,%edi
		jl     jump_aa28d
	jump_aa420:
		cmpl   $0xabcd,data_1c865c
		jne    jump_aa11c
	jump_aa430:
		cmpl   $0x0,0x8(%esp)
		jne    jump_aa448
		mov    (%esp),%eax
		movw   $0x2a,0x8(%eax)
		add    $0x28,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_aa448:
		xor    %edx,%edx
		mov    %edx,0x8(%esp)
		jmp    jump_aa08d
	jump_aa453:
		mov    (%esp),%esi
		xor    %edi,%edi
		xor    %eax,%eax
	jump_aa45a:
		mov    %eax,%ecx
		add    %esi,%ecx
		mov    %bx,0x8(%ecx)
		neg    %ebx
		imul   $0x24,%ebx,%ecx
		mov    EXPORT_SYMBOL(game_traffic_nodes),%ebx
		inc    %edi
		mov    0x14(%ecx,%ebx,1),%ebx
		mov    0x22(%esp),%ecx
		sar    $0x10,%ebx
		sar    $0x10,%ecx
		add    $0x2,%eax
		cmp    %ecx,%ebx
		jne    jump_aa45a
		lea    0x0(,%edi,2),%eax
		add    %esi,%eax
		inc    %edi
		mov    %cx,0x8(%eax)
		mov    %di,0x4(%esi)
	jump_aa495:
		add    $0x28,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
VNAV_turn:	/* 0x0AA4A0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		decl   0x88(%eax)
		mov    0x8c(%eax),%ebx
		mov    0x8c(%eax),%edx
		sar    $0x2,%ebx
		and    $0x3,%edx
		mov    %ebx,0x8c(%eax)
		mov    %edx,%eax
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
VNAV_there:	/* 0x0AA4C8 */
/*----------------------------------------------------------------*/
		testb  $0x3f,0x88(%eax)
		sete   %al
		and    $0xff,%eax
		ret


/*----------------------------------------------------------------*/
VNAV_can_i_get_there:	/* 0x0AA4D8 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		sub    $0xc,%esp
		mov    %eax,%esi
		movswl %bx,%ebx
		movswl %dx,%ecx
		mov    %ebx,%edx
		mov    %ecx,%eax
		call   VNAV_find_nearnodes
		lea    0x8(%esp),%edx
		push   %ebx
		lea    0x8(%esp),%eax
		lea    0x4(%esp),%ebx
		call   VNAV_find_dropoff_point
		mov    0x2(%esp),%edx
		sar    $0x10,%edx
		cmp    $0x270f,%edx
		jne    jump_aa513
		xor    %eax,%eax
		jmp    jump_aa54c
	jump_aa513:
		mov    0x5e(%esi),%eax
		neg    %edx
		sar    $0x10,%eax
		cmp    %edx,%eax
		je     jump_aa547
		mov    0x4(%esp),%edx
		neg    %edx
		mov    $VNAV_route,%ebx
		movswl %dx,%edx
		call   VNAV_do
		mov    VNAV_route__route,%eax
		sar    $0x10,%eax
		cmp    $0x2a,%eax
		jne    jump_aa547
		xor    %eax,%eax
		add    $0xc,%esp
		pop    %esi
		pop    %ecx
		ret
	jump_aa547:
		mov    $0x1,%eax
	jump_aa54c:
		add    $0xc,%esp
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
VNAV_goto:	/* 0x0AA554 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x2c,%esp
		mov    %eax,%edi
		mov    %dx,0xa4(%eax)
		movswl %dx,%ecx
		mov    %bx,0xa6(%eax)
		movswl %bx,%ebx
		mov    %ecx,%eax
		mov    %ebx,%edx
		call   VNAV_find_nearnodes
		lea    0x28(%esp),%edx
		push   %ebx
		lea    0x28(%esp),%eax
		lea    0x4(%esp),%ebx
		call   VNAV_find_dropoff_point
		mov    0x22(%esp),%eax
		sar    $0x10,%eax
		cmp    $0x270f,%eax
		jne    jump_aa5a1
		xor    %eax,%eax
		jmp    jump_aa96d
	jump_aa5a1:
		cmpl   $0x23,(%esp)
		jge    jump_aa5ae
		movl   $0x23,(%esp)
	jump_aa5ae:
		cmpl   $0xdc,(%esp)
		jle    jump_aa5be
		movl   $0xdc,(%esp)
	jump_aa5be:
		mov    0x22(%esp),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edx
		shl    $0x2,%eax
		lea    (%edx,%eax,1),%ebx
		xor    %eax,%eax
		mov    0x28(%esp),%al
		mov    0x4(%ebx,%eax,2),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_aa602
		neg    %eax
		mov    %eax,%ebx
		shl    $0x3,%eax
		add    %ebx,%eax
		testb  $0x8,0x13(%edx,%eax,4)
		je     jump_aa602
		movl   $0xc8,(%esp)
	jump_aa602:
		mov    0x22(%esp),%edx
		mov    0x88(%edi),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		neg    %edx
		cmp    %edx,%eax
		jne    jump_aa7c9
		mov    0x88(%edi),%ebx
		xor    %edx,%edx
		and    $0xc0,%ebx
		mov    0x28(%esp),%dl
		sar    $0x6,%ebx
		cmp    %edx,%ebx
		jne    jump_aa7c9
		mov    0x5e(%edi),%ebp
		sar    $0x10,%ebp
		test   %ebp,%ebp
		jge    jump_aa7c9
		neg    %eax
		mov    %eax,%edx
		shl    $0x3,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%ebx
		add    %edx,%eax
		mov    %ebp,%edx
		movswl (%ebx,%eax,4),%ecx
		neg    %edx
		mov    0x2(%ebx,%eax,4),%esi
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		movswl (%ebx,%eax,4),%edx
		mov    0x2(%ebx,%eax,4),%eax
		sar    $0x10,%eax
		sar    $0x10,%esi
		mov    %eax,0x10(%esp)
		sub    %esi,%eax
		mov    %edx,0xc(%esp)
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebx
		mov    0xc(%esp),%eax
		sub    %ecx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x7,%edx
		mov    %edx,0x14(%esp)
		mov    %ebx,%edx
		sar    $0x7,%edx
		cmp    %ebx,%eax
		jge    jump_aa6c9
		mov    %ebx,%ebp
		sar    $0x5,%ebp
		sub    %ebp,%ebx
		sub    %edx,%ebx
		mov    %eax,%edx
		sar    $0x2,%edx
		add    %edx,%ebx
		mov    %eax,%edx
		sar    $0x3,%edx
		sar    $0x6,%eax
		add    %ebx,%edx
		add    %eax,%edx
		mov    0x14(%esp),%eax
		jmp    jump_aa6e7
	jump_aa6c9:
		mov    %eax,%ebp
		sar    $0x5,%ebp
		sub    %ebp,%eax
		sub    0x14(%esp),%eax
		mov    %ebx,%ebp
		sar    $0x2,%ebp
		add    %eax,%ebp
		mov    %ebx,%eax
		sar    $0x3,%eax
		sar    $0x6,%ebx
		add    %ebp,%eax
		add    %ebx,%eax
	jump_aa6e7:
		add    %eax,%edx
		mov    0x20(%edi),%eax
		sar    $0x8,%eax
		sub    %esi,%eax
		mov    %edx,0x8(%esp)
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebx
		mov    0x18(%edi),%eax
		sar    $0x8,%eax
		sub    %ecx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x7,%edx
		mov    %edx,0x18(%esp)
		mov    %ebx,%edx
		sar    $0x7,%edx
		cmp    %ebx,%eax
		jge    jump_aa73f
		mov    %ebx,%ebp
		sar    $0x5,%ebp
		sub    %ebp,%ebx
		sub    %edx,%ebx
		mov    %ebx,%edx
		mov    %eax,%ebx
		sar    $0x2,%ebx
		add    %ebx,%edx
		mov    %eax,%ebx
		sar    $0x3,%ebx
		sar    $0x6,%eax
		add    %ebx,%edx
		add    %edx,%eax
		mov    0x18(%esp),%edx
		jmp    jump_aa767
	jump_aa73f:
		mov    %eax,%ebp
		sar    $0x5,%ebp
		sub    %ebp,%eax
		mov    0x18(%esp),%ebp
		sub    %ebp,%eax
		mov    %eax,0x4(%esp)
		mov    %ebx,%eax
		mov    0x4(%esp),%ebp
		sar    $0x2,%eax
		add    %eax,%ebp
		mov    %ebx,%eax
		sar    $0x3,%eax
		sar    $0x6,%ebx
		add    %ebp,%eax
		add    %ebx,%eax
	jump_aa767:
		add    %eax,%edx
		shl    $0x8,%edx
		mov    0x8(%esp),%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		cmp    (%esp),%eax
		jge    jump_aa7c9
		movw   $0x33,0xa(%edi)
		mov    0xc(%esp),%edx
		mov    (%esp),%ebp
		sub    %ecx,%edx
		imul   %ebp,%edx
		mov    0x10(%esp),%eax
		sub    %esi,%eax
		imul   %ebp,%eax
		sar    $0x8,%edx
		add    %ecx,%edx
		sar    $0x8,%eax
		mov    %edx,%ecx
		add    %esi,%eax
		shl    $0x10,%ecx
		mov    %edx,0x8c(%edi)
		mov    %ecx,%esi
		mov    %ecx,0x8c(%edi)
		or     %eax,%esi
		mov    $0x2,%eax
		mov    %esi,0x8c(%edi)
		add    $0x2c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_aa7c9:
		mov    0x22(%esp),%edx
		mov    0x5e(%edi),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		neg    %edx
		cmp    %edx,%eax
		jne    jump_aa80f
		xor    %edx,%eax
		mov    0x28(%esp),%al
		movb   $0x0,0x89(%edi)
		mov    %eax,0x8c(%edi)
		mov    (%esp),%eax
		mov    0x88(%edi),%edx
		shl    $0x8,%eax
		or     %eax,%edx
		mov    %edx,0x88(%edi)
		andb   $0xc0,0x88(%edi)
		jmp    jump_aa936
	jump_aa80f:
		mov    0x24(%esp),%edx
		neg    %edx
		mov    $VNAV_route,%ebx
		movswl %dx,%edx
		call   VNAV_do
		mov    VNAV_route__route,%eax
		sar    $0x10,%eax
		cmp    $0x2a,%eax
		jne    jump_aa839
		xor    %eax,%eax
		add    $0x2c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_aa839:
		mov    data_1c855a,%eax
		sar    $0x10,%eax
		sub    $0x2,%eax
		mov    %eax,0x20(%esp)
		xor    %eax,%eax
		mov    %eax,0x1c(%esp)
		xor    %ebp,%ebp
	jump_aa850:
		mov    0x20(%esp),%eax
		cmp    %eax,%ebp
		jg     jump_aa8f6
		mov    %ebp,%ecx
		mov    %ebp,%ebx
		lea    (%eax,%eax,1),%edx
	jump_aa863:
		mov    data_1c8560(%edx),%eax
		sar    $0x10,%eax
		neg    %eax
		imul   $0x24,%eax,%esi
		mov    EXPORT_SYMBOL(game_traffic_nodes),%eax
		add    %esi,%eax
		mov    0x4(%ebx,%eax,1),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_aa890
		mov    VNAV_route__route(%edx),%esi
		sar    $0x10,%esi
		cmp    %esi,%eax
		je     jump_aa8b7
	jump_aa890:
		test   %eax,%eax
		jle    jump_aa8b1
		imul   $0xa8,%eax,%eax
		mov    things,%esi
		mov    0x82(%esi,%eax,1),%ax
		cmp    data_1c8560(%edx),%ax
		je     jump_aa8b7
	jump_aa8b1:
		add    $0x2,%ebx
		inc    %ecx
		jmp    jump_aa863
	jump_aa8b7:
		andb   $0xfc,0x8c(%edi)
		mov    0x1c(%esp),%ebx
		mov    0x8c(%edi),%edx
		inc    %ebx
		or     %ecx,%edx
		mov    $0x2,%ecx
		mov    %edx,%eax
		mov    %edx,0x8c(%edi)
		ror    %cl,%eax
		mov    0x20(%esp),%ecx
		mov    %ebx,0x1c(%esp)
		dec    %ecx
		mov    %eax,0x8c(%edi)
		mov    %ecx,0x20(%esp)
		cmp    $0x10,%ebx
		jl     jump_aa850
	jump_aa8f6:
		mov    0x1c(%esp),%ecx
		mov    0x8c(%edi),%eax
		add    %ecx,%ecx
		rol    %cl,%eax
		movb   $0x0,0x89(%edi)
		mov    %eax,0x8c(%edi)
		mov    (%esp),%eax
		mov    0x88(%edi),%ebp
		shl    $0x8,%eax
		or     %eax,%ebp
		mov    %ebp,0x88(%edi)
		andb   $0xc0,0x88(%edi)
		mov    0x1c(%esp),%eax
		or     %eax,0x88(%edi)
	jump_aa936:
		mov    0x22(%esp),%eax
		sar    $0x10,%eax
		mov    %eax,%ebx
		neg    %ebx
		mov    %eax,0x90(%edi)
		mov    %ebx,%ecx
		mov    %ebx,0x90(%edi)
		shl    $0x10,%ecx
		xor    %eax,%eax
		mov    %ecx,0x90(%edi)
		mov    %ecx,%esi
		mov    0x28(%esp),%al
		or     %eax,%esi
		mov    $0x1,%eax
		mov    %esi,0x90(%edi)
	jump_aa96d:
		add    $0x2c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
VNAV_renavigate:	/* 0x0AA978 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    %eax,%edi
		mov    0x90(%eax),%eax
		sar    $0x10,%eax
		movswl %ax,%edx
		mov    0x5e(%edi),%eax
		mov    $VNAV_route,%ebx
		sar    $0x10,%eax
		call   VNAV_do
		mov    VNAV_route__route,%eax
		sar    $0x10,%eax
		cmp    $0x2a,%eax
		jne    jump_aa9b3
		xor    %eax,%eax
		jmp    jump_aaab6
	jump_aa9b3:
		mov    data_1c855a,%eax
		sar    $0x10,%eax
		xor    %edx,%edx
		sub    $0x2,%eax
		mov    %edx,(%esp)
		mov    %eax,0x4(%esp)
		xor    %ebp,%ebp
	jump_aa9c9:
		mov    0x4(%esp),%ebx
		cmp    %ebx,%ebp
		jg     jump_aaa7e
		mov    %ebp,%ecx
		mov    %ebp,%edx
		add    %ebx,%ebx
	jump_aa9db:
		mov    data_1c8560(%ebx),%eax
		sar    $0x10,%eax
		neg    %eax
		imul   $0x24,%eax,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%esi
		add    %esi,%eax
		mov    0x4(%edx,%eax,1),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_aaa09
		mov    VNAV_route__route(%ebx),%esi
		sar    $0x10,%esi
		cmp    %esi,%eax
		je     jump_aaa41
	jump_aaa09:
		test   %eax,%eax
		jle    jump_aaa2a
		imul   $0xa8,%eax,%eax
		mov    things,%esi
		mov    0x82(%esi,%eax,1),%ax
		cmp    data_1c8560(%ebx),%ax
		je     jump_aaa41
	jump_aaa2a:
		cmp    $0x6,%edx
		jle    jump_aaa3b
		xor    %eax,%eax
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_aaa3b:
		add    $0x2,%edx
		inc    %ecx
		jmp    jump_aa9db
	jump_aaa41:
		andb   $0xfc,0x8c(%edi)
		mov    0x8c(%edi),%esi
		mov    0x4(%esp),%edx
		or     %ecx,%esi
		mov    $0x2,%ecx
		mov    %esi,%eax
		mov    %esi,0x8c(%edi)
		ror    %cl,%eax
		mov    %eax,0x8c(%edi)
		mov    (%esp),%eax
		dec    %edx
		inc    %eax
		mov    %edx,0x4(%esp)
		mov    %eax,(%esp)
		cmp    $0x10,%eax
		jl     jump_aa9c9
	jump_aaa7e:
		mov    (%esp),%ecx
		mov    0x8c(%edi),%eax
		add    %ecx,%ecx
		rol    %cl,%eax
		mov    0x88(%edi),%dl
		mov    %eax,0x8c(%edi)
		and    $0xc0,%dl
		mov    %dl,0x88(%edi)
		mov    (%esp),%eax
		mov    0x88(%edi),%ecx
		or     %eax,%ecx
		mov    $0x1,%eax
		mov    %ecx,0x88(%edi)
	jump_aaab6:
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_VNAV_process_bezier)	/* 0x0AAAC0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		mov    %eax,(%esp)
		mov    (%esp),%ebx
		xor    %eax,%eax
		mov    0x9(%ebx),%al
		cmp    $0x9,%eax
		jne    jump_aace7
		xor    %eax,%eax
		mov    0x8(%ebx),%al
		cmp    $0x15,%eax
		jne    jump_aace7
		mov    0x4c(%ebx),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_aabe5
		neg    %eax
		mov    %eax,%ebx
		shl    $0x3,%eax
		add    %ebx,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%ebx
		movswl (%ebx,%eax,4),%ecx
		mov    0x2(%ebx,%eax,4),%eax
		xor    %esi,%esi
		sar    $0x10,%eax
		mov    (%esp),%ebx
		mov    %eax,0x4(%esp)
	jump_aab1c:
		mov    0x57(%ebx),%eax
		sar    $0x18,%eax
		imul   $0x7,%eax,%eax
		mov    0x58(%ebx),%edi
		sar    $0x18,%edi
		imul   $0x7,%edi,%edi
		mov    0x18(%ebx),%ebp
		sar    $0x8,%ebp
		add    %eax,%ebp
		mov    0x20(%ebx),%eax
		sar    $0x8,%eax
		add    %eax,%edi
		mov    %ebp,%eax
		sub    %ecx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    0x4(%esp),%edx
		mov    %eax,%ecx
		mov    %edi,%eax
		sub    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%ecx
		jle    jump_aab5e
		sar    %eax
		jmp    jump_aab60
	jump_aab5e:
		sar    %ecx
	jump_aab60:
		add    %ecx,%eax
		add    %eax,%esi
		mov    0x4a(%ebx),%eax
		mov    %ebp,%ecx
		sar    $0x10,%eax
		mov    %edi,0x4(%esp)
		test   %eax,%eax
		jle    jump_aab84
		imul   $0xa8,%eax,%eax
		mov    things,%ebx
		add    %eax,%ebx
		jmp    jump_aab1c
	jump_aab84:
		neg    %eax
		mov    %eax,%edi
		shl    $0x3,%eax
		add    %edi,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edi
		shl    $0x2,%eax
		add    %edi,%eax
		movswl (%eax),%edi
		mov    0x2(%eax),%ebp
		mov    %edi,%eax
		sar    $0x10,%ebp
		sub    %ecx,%eax
		mov    0x4(%esp),%edi
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ecx
		mov    %ebp,%eax
		sub    %edi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%ecx
		jle    jump_aabc1
		sar    %eax
		jmp    jump_aabc3
	jump_aabc1:
		sar    %ecx
	jump_aabc3:
		add    %ecx,%eax
		mov    (%esp),%ecx
		add    %eax,%esi
		mov    0x4c(%ebx),%ax
		mov    %ax,0x82(%ecx)
		mov    %si,0x84(%ecx)
		mov    0x4e(%ecx),%ax
		jmp    jump_aacd9
	jump_aabe5:
		mov    0x4a(%ebx),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_aace7
		neg    %eax
		mov    %eax,%ebx
		shl    $0x3,%eax
		add    %eax,%ebx
		mov    EXPORT_SYMBOL(game_traffic_nodes),%eax
		shl    $0x2,%ebx
		movswl (%ebx,%eax,1),%ecx
		mov    0x2(%ebx,%eax,1),%eax
		xor    %esi,%esi
		sar    $0x10,%eax
		mov    (%esp),%ebx
		mov    %eax,0x8(%esp)
	jump_aac18:
		mov    0x57(%ebx),%eax
		sar    $0x18,%eax
		imul   $0x7,%eax,%eax
		mov    0x18(%ebx),%edi
		sar    $0x8,%edi
		sub    %eax,%edi
		mov    0x58(%ebx),%eax
		sar    $0x18,%eax
		imul   $0x7,%eax,%eax
		mov    0x20(%ebx),%ebp
		sar    $0x8,%ebp
		sub    %eax,%ebp
		mov    %edi,%eax
		sub    %ecx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    0x8(%esp),%edx
		mov    %eax,%ecx
		mov    %ebp,%eax
		sub    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%ecx
		jle    jump_aac5a
		sar    %eax
		jmp    jump_aac5c
	jump_aac5a:
		sar    %ecx
	jump_aac5c:
		add    %ecx,%eax
		add    %eax,%esi
		mov    0x4c(%ebx),%eax
		mov    %edi,%ecx
		sar    $0x10,%eax
		mov    %ebp,0x8(%esp)
		test   %eax,%eax
		jle    jump_aac80
		imul   $0xa8,%eax,%eax
		mov    things,%ebx
		add    %eax,%ebx
		jmp    jump_aac18
	jump_aac80:
		neg    %eax
		mov    %eax,%edi
		shl    $0x3,%eax
		add    %edi,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edi
		movswl (%edi,%eax,4),%ebp
		mov    0x2(%edi,%eax,4),%edi
		mov    %ebp,%eax
		sar    $0x10,%edi
		sub    %ecx,%eax
		mov    0x8(%esp),%ebp
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ecx
		mov    %edi,%eax
		sub    %ebp,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%ecx
		jle    jump_aacba
		sar    %eax
		jmp    jump_aacbc
	jump_aacba:
		sar    %ecx
	jump_aacbc:
		add    %ecx,%eax
		mov    (%esp),%ecx
		add    %eax,%esi
		mov    0x4e(%ebx),%ax
		mov    %ax,0x82(%ecx)
		mov    %si,0x84(%ecx)
		mov    0x4c(%ecx),%ax
	jump_aacd9:
		mov    %ax,0x82(%ebx)
		mov    %si,0x84(%ebx)
	jump_aace7:
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_VNAV_unkn_func_207)	/* 0x0AACF4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		sub    $0x14,%esp
		mov    %eax,%esi
		xor    %eax,%eax
		mov    0x8(%esi),%al
		cmp    $0x33,%eax
		jne    jump_aada0
		movw   $0x0,0x38(%esi)
		movw   $0x21,0xa(%esi)
		xor    %eax,%eax
		mov    0x52(%esi),%ax
		xor    %edx,%edx
		call   func_4225c
		mov    %ax,%dx
		mov    %ax,0x14(%esi)
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    0xa0(%esi),%dl
		imul   %edx,%eax
		cmp    $0x7d00,%eax
		jle    jump_aad4f
		movw   $0x7d00,0x3a(%esi)
		jmp    jump_aad63
	jump_aad4f:
		imul   $0x5,0x14(%esi),%ax
		xor    %edx,%edx
		mov    0xa0(%esi),%dl
		imul   %edx,%eax
		mov    %ax,0x3a(%esi)
	jump_aad63:
		movw   $0x0,0x38(%esi)
		movw   $0x0,0x4c(%esi)
		movb   $0x0,0x3e(%esi)
		movw   $0x0,0x7c(%esi)
		movw   $0x0,0x62(%esi)
		mov    0x3a(%esi),%ax
		movw   $0x0,0x5c(%esi)
		mov    %ax,0x86(%esi)
		mov    %ax,0xa2(%esi)
		add    $0x14,%esp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_aada0:
		cmp    $0x36,%eax
		jne    jump_aae37
		movw   $0x0,0x38(%esi)
		movw   $0x0,0x72(%esi)
		xor    %eax,%eax
		mov    0x52(%esi),%ax
		xor    %edx,%edx
		call   func_4225c
		mov    %ax,%dx
		mov    %ax,0x14(%esi)
		lea    0x0(,%edx,4),%eax
		add    %eax,%edx
		xor    %eax,%eax
		mov    0xa0(%esi),%al
		imul   %edx,%eax
		cmp    $0x7d00,%eax
		jle    jump_aadec
		movw   $0x7d00,0x3a(%esi)
		jmp    jump_aae00
	jump_aadec:
		imul   $0x5,0x14(%esi),%dx
		xor    %eax,%eax
		mov    0xa0(%esi),%al
		imul   %eax,%edx
		mov    %dx,0x3a(%esi)
	jump_aae00:
		movw   $0x0,0x7c(%esi)
		movw   $0x0,0x62(%esi)
		movw   $0x0,0x5c(%esi)
		movw   $0x0,0x4c(%esi)
		mov    0x3a(%esi),%ax
		movb   $0x0,0x3e(%esi)
		mov    %ax,0x86(%esi)
		mov    %ax,0xa2(%esi)
		add    $0x14,%esp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_aae37:
		cmp    $0x32,%eax
		jne    jump_aaec8
		xor    %eax,%eax
		mov    0x52(%esi),%ax
		xor    %edx,%edx
		call   func_4225c
		mov    %ax,%dx
		mov    %ax,0x14(%esi)
		lea    0x0(,%edx,4),%eax
		add    %eax,%edx
		xor    %eax,%eax
		mov    0xa0(%esi),%al
		imul   %edx,%eax
		cmp    $0x7d00,%eax
		jle    jump_aae77
		movw   $0x7d00,0x3a(%esi)
		jmp    jump_aae8b
	jump_aae77:
		imul   $0x5,0x14(%esi),%ax
		xor    %edx,%edx
		mov    0xa0(%esi),%dl
		imul   %edx,%eax
		mov    %ax,0x3a(%esi)
	jump_aae8b:
		movw   $0x0,0x38(%esi)
		movw   $0x0,0x4c(%esi)
		movb   $0x0,0x3e(%esi)
		movw   $0x0,0x7c(%esi)
		movw   $0x0,0x62(%esi)
		mov    0x3a(%esi),%ax
		movw   $0x0,0x5c(%esi)
		mov    %ax,0x86(%esi)
		mov    %ax,0xa2(%esi)
		add    $0x14,%esp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_aaec8:
		cmp    $0x3b,%eax
		jne    jump_aaf16
		movw   $0x12c,0x14(%esi)
		movw   $0x61a8,0x3a(%esi)
		movw   $0x0,0x38(%esi)
		movw   $0x0,0x4c(%esi)
		movb   $0x0,0x3e(%esi)
		movw   $0x0,0x7c(%esi)
		movw   $0x0,0x62(%esi)
		movw   $0x0,0x5c(%esi)
		mov    0x3a(%esi),%ax
		mov    %ax,0x86(%esi)
		mov    %ax,0xa2(%esi)
		add    $0x14,%esp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_aaf16:
		movw   $0x0,0x5c(%esi)
		movw   $0x0,0x4c(%esi)
		movb   $0x0,0x3e(%esi)
		movw   $0x0,0x38(%esi)
		movw   $0x0,0x7c(%esi)
		movw   $0x0,0x62(%esi)
		movl   $0x0,0x90(%esi)
		mov    0x3a(%esi),%ax
		mov    0x18(%esi),%ecx
		mov    0x20(%esi),%ebx
		sar    $0x8,%ecx
		sar    $0x8,%ebx
		mov    %ax,0xa2(%esi)
		movswl %bx,%ebx
		movswl %cx,%ecx
		mov    %ebx,%edx
		mov    %ecx,%eax
		movw   $0x0,0x5c(%esi)
		call   VNAV_find_nearnodes
		lea    0x10(%esp),%edx
		push   %ebx
		lea    0x10(%esp),%eax
		lea    0x4(%esp),%ebx
		call   VNAV_find_start_dropoff_point
		movw   $0x0,0x8a(%esi)
		mov    0xa(%esp),%eax
		sar    $0x10,%eax
		neg    %eax
		mov    0x88(%esi),%edx
		shl    $0x10,%eax
		or     %eax,%edx
		mov    %edx,0x88(%esi)
		andb   $0x3f,0x88(%esi)
		xor    %eax,%eax
		mov    0x10(%esp),%al
		mov    0x88(%esi),%ebx
		shl    $0x6,%eax
		or     %eax,%ebx
		mov    %ebx,0x88(%esi)
		mov    0xa(%esp),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edx
		shl    $0x2,%eax
		lea    (%edx,%eax,1),%ebx
		xor    %eax,%eax
		mov    0x10(%esp),%al
		mov    0x6(%ebx,%eax,2),%ax
		mov    %ax,0x60(%esi)
		mov    0x5e(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_ab132
		neg    %eax
		mov    %eax,%ebx
		shl    $0x3,%eax
		add    %ebx,%eax
		testb  $0x8,0x13(%edx,%eax,4)
		je     jump_ab132
		mov    0x88(%esi),%cl
		and    $0xc0,%cl
		mov    %cl,0x88(%esi)
		mov    %cl,%ch
		movw   $0x3d,0xa(%esi)
		or     $0x13,%ch
		mov    %ch,0x88(%esi)
		mov    0xa(%esp),%ebx
		sar    $0x10,%ebx
		mov    0x5e(%esi),%edi
		lea    0x0(,%ebx,8),%eax
		sar    $0x10,%edi
		add    %ebx,%eax
		neg    %edi
		movswl (%edx,%eax,4),%ecx
		mov    0x2(%edx,%eax,4),%ebx
		lea    0x0(,%edi,8),%eax
		add    %edi,%eax
		movswl (%edx,%eax,4),%edi
		mov    0x2(%edx,%eax,4),%eax
		mov    %edi,%edx
		mov    (%esp),%edi
		sub    %ecx,%edx
		imul   %edi,%edx
		sar    $0x10,%ebx
		sar    $0x10,%eax
		sub    %ebx,%eax
		imul   %edi,%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		add    %ecx,%edx
		add    %ebx,%eax
		shl    $0x8,%edx
		shl    $0x8,%eax
		mov    %edx,0x4(%esp)
		mov    %esi,%edx
		mov    0x1c(%esi),%ebx
		mov    %eax,0x8(%esp)
		sub    things,%edx
		mov    $0xa8,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    0x16(%esi),%di
		mov    %ax,0x16(%esi)
		mov    0x8(%esp),%ecx
		mov    0x4(%esp),%edx
		mov    %esi,%eax
		call   ac_move_mapwho
		mov    0x5e(%esi),%edx
		sar    $0x10,%edx
		neg    %edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edx
		shl    $0x2,%eax
		mov    %di,0x16(%esi)
		add    %eax,%edx
		mov    0x18(%esi),%eax
		movswl (%edx),%ebx
		sar    $0x8,%eax
		sub    %eax,%ebx
		mov    %ebx,%eax
		mov    0x2(%edx),%ebx
		mov    0x20(%esi),%edx
		sar    $0x10,%ebx
		sar    $0x8,%edx
		sub    %edx,%ebx
		mov    %ebx,%edx
		call   ac_arctan
		mov    0x52(%esi),%edx
		and    $0xffff,%eax
		sar    $0x10,%edx
		mov    %ax,0x66(%esi)
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(local_mats),%ecx
		shl    $0x2,%eax
		add    %eax,%ecx
		mov    0x66(%esi),%ax
		neg    %eax
		xor    %ebx,%ebx
		movswl %ax,%edx
		xor    %eax,%eax
		call   rotate_obj
		jmp    jump_ab147
	jump_ab132:
		mov    0x88(%esi),%bh
		movw   $0x21,0xa(%esi)
		and    $0xc0,%bh
		mov    %bh,0x88(%esi)
	jump_ab147:
		xor    %eax,%eax
		mov    0x52(%esi),%ax
		xor    %edx,%edx
		call   func_4225c
		mov    %ax,%dx
		mov    %ax,0x14(%esi)
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    0xa0(%esi),%dl
		imul   %edx,%eax
		cmp    $0x7d00,%eax
		jle    jump_ab17e
		movw   $0x7d00,0x3a(%esi)
		jmp    jump_ab192
	jump_ab17e:
		imul   $0x5,0x14(%esi),%ax
		xor    %edx,%edx
		mov    0xa0(%esi),%dl
		imul   %edx,%eax
		mov    %ax,0x3a(%esi)
	jump_ab192:
		mov    0x3a(%esi),%ax
		movb   $0x63,0x51(%esi)
		mov    %ax,0x86(%esi)
		add    $0x14,%esp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
VNAV_goto_and_unstop:	/* 0x0AB1AC */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		mov    %eax,%ecx
		mov    %edx,%esi
		mov    0x8c(%eax),%edx
		and    $0xffff,%edx
		lea    0x0(,%edx,4),%eax
		add    %eax,%edx
		add    %edx,%edx
		mov    $0x11,%edi
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %edi
		mov    $0xa,%edx
		sub    %eax,%edx
		movswl %si,%eax
		mov    %eax,%esi
		mov    %eax,0x8c(%ecx)
		shl    $0x10,%esi
		movswl %bx,%eax
		mov    %esi,%edi
		movw   $0x38,0xa(%ecx)
		or     %eax,%edi
		mov    0x88(%ecx),%ah
		mov    %esi,0x8c(%ecx)
		and    $0xc0,%ah
		mov    %ah,0x88(%ecx)
		mov    0x88(%ecx),%ebp
		mov    %edi,0x8c(%ecx)
		or     %edx,%ebp
		mov    $0x1,%eax
		mov    %ebp,0x88(%ecx)
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
VNAV_goto_and_unpark:	/* 0x0AB22C */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		mov    %eax,%ecx
		movswl %dx,%eax
		mov    0x90(%ecx),%esi
		movw   $0x38,0xa(%ecx)
		mov    %eax,%edx
		add    %esi,%esi
		mov    %eax,0x8c(%ecx)
		shl    $0x10,%edx
		movswl %bx,%eax
		mov    %edx,%ebx
		mov    %esi,0x90(%ecx)
		or     %eax,%ebx
		mov    0x88(%ecx),%ah
		mov    %edx,0x8c(%ecx)
		and    $0xc0,%ah
		mov    %ebx,0x8c(%ecx)
		mov    %ah,%dl
		mov    %ah,0x88(%ecx)
		or     $0xa,%dl
		mov    $0x1,%eax
		mov    %dl,0x88(%ecx)
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
VNAV_goto_and_unplace:	/* 0x0AB288 */
/*----------------------------------------------------------------*/
		push   %ecx
		mov    %eax,%ecx
		movswl %dx,%eax
		mov    %eax,%edx
		mov    %eax,0x8c(%ecx)
		shl    $0x10,%edx
		movswl %bx,%eax
		mov    %edx,%ebx
		movw   $0x3e,0xa(%ecx)
		or     %eax,%ebx
		mov    0x88(%ecx),%ah
		mov    %edx,0x8c(%ecx)
		and    $0xc0,%ah
		mov    %ebx,0x8c(%ecx)
		mov    %ah,%dl
		mov    %ah,0x88(%ecx)
		or     $0x14,%dl
		mov    $0x1,%eax
		mov    %dl,0x88(%ecx)
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_VNAV_init_new_traffic_system)	/* 0x0AB2D4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x14,%esp
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edx
		xor    %ebx,%ebx
		mov    $0x1,%ebp
		mov    %ebx,EXPORT_SYMBOL(dword_1C8470)
		mov    %ebx,data_1c84f4
		mov    $0x24,%ebx
		jmp    jump_ab301
	jump_ab2fd:
		add    $0x24,%ebx
		inc    %ebp
	jump_ab301:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(next_traffic_node),%ax
		cmp    %eax,%ebp
		jge    jump_ab32a
		lea    (%edx,%ebx,1),%eax
		xor    %ecx,%ecx
		mov    0x12(%eax),%cx
		cmp    $0xff,%ecx
		je     jump_ab2fd
		and    $0xfe3f,%ecx
		mov    %cx,0x12(%eax)
		jmp    jump_ab2fd
	jump_ab32a:
		mov    $0x1,%esi
		mov    $0x24,%ebp
		mov    %esi,0x4(%esp)
		jmp    jump_ab361
	jump_ab33a:
		mov    %ebp,%esi
		xor    %eax,%eax
		lea    (%edx,%esi,1),%ebx
	jump_ab341:
		cmpw   $0x0,0x6(%ebx,%eax,1)
		jne    jump_ab355
		add    $0x2,%eax
		cmp    $0x8,%eax
		jl     jump_ab341
		orb    $0x80,0x12(%ebx)
	jump_ab355:
		mov    0x4(%esp),%eax
		inc    %eax
		add    $0x24,%ebp
		mov    %eax,0x4(%esp)
	jump_ab361:
		xor    %eax,%eax
		mov    0x4(%esp),%edi
		mov    EXPORT_SYMBOL(next_traffic_node),%ax
		cmp    %edi,%eax
		jle    jump_ab386
		mov    %edx,%eax
		mov    0x12(%eax,%ebp,1),%ax
		and    $0xffff,%eax
		cmp    $0xff,%eax
		jne    jump_ab33a
		jmp    jump_ab355
	jump_ab386:
		mov    $0x24,%ebp
		mov    $0x1,%edi
		mov    %ebp,0x8(%esp)
		jmp    jump_ab40b
	jump_ab399:
		add    $0x2,%eax
		cmp    $0x8,%eax
		jl     jump_ab3c1
		mov    0xc(%esp),%eax
		inc    %eax
		add    $0x24,%ebp
		mov    %eax,0xc(%esp)
	jump_ab3ad:
		xor    %eax,%eax
		mov    0xc(%esp),%ebx
		mov    EXPORT_SYMBOL(next_traffic_node),%ax
		cmp    %ebx,%eax
		jle    jump_ab3d5
		mov    %ebp,%esi
		xor    %eax,%eax
	jump_ab3c1:
		lea    (%edx,%esi,1),%ebx
		mov    0x4(%ebx,%eax,1),%ecx
		mov    %edi,%ebx
		sar    $0x10,%ecx
		neg    %ebx
		cmp    %ebx,%ecx
		je     jump_ab3ff
		jmp    jump_ab399
	jump_ab3d5:
		mov    0x8(%esp),%ecx
		lea    (%edx,%ecx,1),%eax
		mov    0x13(%eax),%bh
		or     $0x1,%bh
		mov    EXPORT_SYMBOL(dword_1C8470),%esi
		mov    %bh,0x13(%eax)
		cmp    $0x20,%esi
		je     jump_ab3ff
		lea    0x1(%esi),%eax
		mov    %edi,EXPORT_SYMBOL(dword_1C8474)(,%esi,4)
		mov    %eax,EXPORT_SYMBOL(dword_1C8470)
	jump_ab3ff:
		mov    0x8(%esp),%ebx
		add    $0x24,%ebx
		inc    %edi
		mov    %ebx,0x8(%esp)
	jump_ab40b:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(next_traffic_node),%ax
		cmp    %eax,%edi
		jge    jump_ab445
		mov    0x8(%esp),%ebx
		lea    (%edx,%ebx,1),%eax
		xor    %ebx,%ebx
		mov    0x12(%eax),%bx
		cmp    $0xff,%ebx
		je     jump_ab3ff
		testb  $0x6,0x13(%eax)
		jne    jump_ab3ff
		mov    $0x1,%ecx
		mov    $0x24,%ebp
		mov    %ecx,0xc(%esp)
		jmp    jump_ab3ad
	jump_ab445:
		mov    $0x1,%edi
		mov    $0x24,%ebp
		mov    $0xff,%ecx
		jmp    jump_ab45a
	jump_ab456:
		add    $0x24,%ebp
		inc    %edi
	jump_ab45a:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(next_traffic_node),%ax
		cmp    %eax,%edi
		jge    jump_ab489
		lea    (%edx,%ebp,1),%eax
		xor    %ebx,%ebx
		mov    0x12(%eax),%bx
		cmp    $0xff,%ebx
		je     jump_ab456
		testb  $0x80,0x12(%eax)
		je     jump_ab456
		testb  $0x1,0x13(%eax)
		je     jump_ab456
		mov    %cx,0x12(%eax)
		jmp    jump_ab456
	jump_ab489:
		mov    $0x24,%esi
		mov    $0x1,%edi
		mov    %esi,(%esp)
		jmp    jump_ab4fd
	jump_ab498:
		add    $0x2,%eax
		cmp    $0x8,%eax
		jl     jump_ab4be
		mov    0x10(%esp),%ebx
		add    $0x24,%ebx
		inc    %ebp
		mov    %ebx,0x10(%esp)
	jump_ab4ac:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(next_traffic_node),%ax
		cmp    %eax,%ebp
		jge    jump_ab4d2
		mov    0x10(%esp),%esi
		xor    %eax,%eax
	jump_ab4be:
		lea    (%edx,%esi,1),%ebx
		mov    0x4(%ebx,%eax,1),%ecx
		mov    %edi,%ebx
		sar    $0x10,%ecx
		neg    %ebx
		cmp    %ebx,%ecx
		je     jump_ab4f3
		jmp    jump_ab498
	jump_ab4d2:
		mov    (%esp),%ebp
		lea    (%edx,%ebp,1),%eax
		orb    $0x1,0x13(%eax)
		mov    data_1c84f4,%eax
		cmp    $0x10,%eax
		jge    jump_ab4f3
		inc    %eax
		mov    %edi,data_1c84f4(,%eax,4)
		mov    %eax,data_1c84f4
	jump_ab4f3:
		mov    (%esp),%ecx
		add    $0x24,%ecx
		inc    %edi
		mov    %ecx,(%esp)
	jump_ab4fd:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(next_traffic_node),%ax
		cmp    %eax,%edi
		jge    jump_ab53d
		mov    (%esp),%ecx
		lea    (%edx,%ecx,1),%eax
		xor    %ebx,%ebx
		mov    0x12(%eax),%bx
		cmp    $0xff,%ebx
		je     jump_ab4f3
		mov    0x13(%eax),%cl
		test   $0x2,%cl
		je     jump_ab4f3
		test   $0x4,%cl
		jne    jump_ab4f3
		mov    $0x24,%esi
		mov    $0x1,%ebp
		mov    %esi,0x10(%esp)
		jmp    jump_ab4ac
	jump_ab53d:
		mov    $0x1,%edi
		mov    $0x24,%ebp
		mov    $0x40,%cl
		jmp    jump_ab54f
	jump_ab54b:
		add    $0x24,%ebp
		inc    %edi
	jump_ab54f:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(next_traffic_node),%ax
		cmp    %eax,%edi
		jge    jump_ab58b
		lea    (%edx,%ebp,1),%eax
		xor    %ebx,%ebx
		mov    0x12(%eax),%bx
		cmp    $0xff,%ebx
		je     jump_ab54b
		testb  $0x80,0x13(%eax)
		je     jump_ab54b
		mov    %ebp,%esi
		xor    %eax,%eax
		lea    (%edx,%esi,1),%ebx
	jump_ab579:
		mov    0xe(%ebx,%eax,1),%ch
		inc    %eax
		or     %cl,%ch
		mov    %ch,0xd(%ebx,%eax,1)
		cmp    $0x4,%eax
		jge    jump_ab54b
		jmp    jump_ab579
	jump_ab58b:
		mov    %edx,EXPORT_SYMBOL(game_traffic_nodes)
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_SCANNER_process_arcpoints)	/* 0x0AB5A0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x1c,%esp
		xor    %edx,%edx
		mov    $0x50,%ecx
		mov    %edx,EXPORT_SYMBOL(dword_1DB1A0)
		mov    %edx,0x14(%esp)
		mov    %ecx,0x10(%esp)
		mov    %edx,0x18(%esp)
		jmp    jump_ab6b5
	jump_ab5c7:
		mov    %eax,%edx
		sar    $0x5,%edx
		sub    %edx,%eax
		mov    0x4(%esp),%edx
		sub    %edx,%eax
		mov    %eax,(%esp)
		mov    %ebx,%eax
		mov    (%esp),%edx
		sar    $0x2,%eax
		add    %eax,%edx
		mov    %ebx,%eax
		sar    $0x3,%eax
		sar    $0x6,%ebx
		add    %edx,%eax
		add    %ebx,%eax
		mov    0x8(%esp),%ebx
		add    %ebx,%eax
	jump_ab5f3:
		shl    $0x7,%eax
		mov    %ebp,%edx
		mov    0x14(%esp),%ebp
		mov    %eax,0xc(%esp)
		mov    %eax,%ebx
		mov    %ecx,%eax
		xor    %ecx,%ecx
		call   ac_arctan
		mov    %ax,%cx
		imul   $0x50,%ebp,%eax
		sar    $0x8,%ebx
		mov    %ebx,0xc(%esp)
		sub    $0x3c,%ecx
		mov    0x10(%esp),%ebp
	jump_ab61f:
		mov    %ecx,%ebx
		and    $0x7ff,%ebx
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%ebx,4),%edx
		mov    EXPORT_SYMBOL(lbSinTable)(,%ebx,4),%ebx
		imul   $0x200,%ebx,%ebx
		neg    %edx
		imul   $0x200,%edx,%edx
		add    $0x10,%eax
		mov    %esi,data_1db194(%eax)
		mov    %edi,data_1db198(%eax)
		sar    $0x8,%ebx
		sar    $0x8,%edx
		mov    %ebx,EXPORT_SYMBOL(SCANNER_keep_arcs)(%eax)
		add    $0x1e,%ecx
		mov    %edx,EXPORT_SYMBOL(dword_1DB1A0)(%eax)
		cmp    %ebp,%eax
		jne    jump_ab61f
		mov    0xc(%esp),%eax
		mov    0x18(%esp),%edx
		sar    $0x10,%eax
		mov    %al,ingame__Scanner__Arc_0__Period(%edx)
		mov    %al,ingame__Scanner__Arc_0__Counter(%edx)
		mov    EXPORT_SYMBOL(colour_lookup)+1,%al
		mov    %al,ingame__Scanner__Arc_0__Colour(%edx)
	jump_ab68d:
		mov    0x10(%esp),%edi
		mov    0x18(%esp),%ebp
		mov    0x14(%esp),%eax
		add    $0x50,%edi
		add    $0x14,%ebp
		inc    %eax
		mov    %edi,0x10(%esp)
		mov    %ebp,0x18(%esp)
		mov    %eax,0x14(%esp)
		cmp    $0x4,%eax
		jge    jump_ab7a2
	jump_ab6b5:
		mov    0x18(%esp),%eax
		cmpb   $0x0,ingame__Scanner__Arc_0__Counter(%eax)
		je     jump_ab68d
		mov    EXPORT_SYMBOL(dword_1DB1A0),%ebx
		inc    %ebx
		mov    0x14(%esp),%ecx
		mov    %ebx,EXPORT_SYMBOL(dword_1DB1A0)
		mov    0x10(%esp),%ebx
		imul   $0x50,%ecx,%eax
	jump_ab6da:
		add    $0x10,%eax
		mov    EXPORT_SYMBOL(SCANNER_keep_arcs)(%eax),%edx
		mov    data_1db194(%eax),%esi
		mov    data_1db198(%eax),%edi
		add    %edx,%esi
		mov    EXPORT_SYMBOL(dword_1DB1A0)(%eax),%edx
		mov    %esi,data_1db194(%eax)
		add    %edx,%edi
		mov    %edi,data_1db198(%eax)
		cmp    %ebx,%eax
		jne    jump_ab6da
		mov    0x18(%esp),%eax
		decb   ingame__Scanner__Arc_0__Counter(%eax)
		mov    0x18(%esp),%edx
		xor    %eax,%eax
		mov    ingame__Scanner__Arc_0__Counter(%edx),%al
		test   %eax,%eax
		jne    jump_ab68d
		mov    ingame__Scanner__Arc_0__Period(%edx),%al
		mov    %al,ingame__Scanner__Arc_0__Counter(%edx)
		mov    ingame__Scanner__Arc_0__Z1,%edi
		mov    ingame__Scanner__Arc_0__Z2,%ebp
		mov    ingame__Scanner__Arc_0__X1,%esi
		sub    %edi,%ebp
		mov    ingame__Scanner__Arc_0__X2,%ecx
		mov    %ebp,%eax
		sub    %esi,%ecx
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebx
		mov    %ecx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x7,%edx
		mov    %edx,0x4(%esp)
		mov    %ebx,%edx
		sar    $0x7,%edx
		mov    %edx,0x8(%esp)
		cmp    %ebx,%eax
		jge    jump_ab5c7
		mov    %ebx,%edx
		sar    $0x5,%edx
		sub    %edx,%ebx
		sub    0x8(%esp),%ebx
		mov    %eax,%edx
		sar    $0x2,%edx
		add    %edx,%ebx
		mov    %eax,%edx
		sar    $0x3,%edx
		sar    $0x6,%eax
		add    %ebx,%edx
		add    %edx,%eax
		mov    0x4(%esp),%edx
		add    %edx,%eax
		jmp    jump_ab5f3
	jump_ab7a2:
		add    $0x1c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_SCANNER_init_arcpoint)	/* 0x0AB7AC */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x20,%esp
		mov    %eax,%edi
		mov    %edx,%ebp
		mov    %ebx,0x4(%esp)
		mov    %ecx,0x10(%esp)
		xor    %esi,%esi
		xor    %eax,%eax
	jump_ab7c2:
		xor    %edx,%edx
		mov    ingame__Scanner__Arc_0__Period(%eax),%dl
		test   %edx,%edx
		jne    jump_ab836
		mov    ingame__Scanner__Arc_0__Counter(%eax),%dl
		test   %edx,%edx
		jne    jump_ab836
		mov    0x4(%esp),%eax
		mov    0x10(%esp),%ecx
		sub    %edi,%eax
		sub    %ebp,%ecx
		mov    %eax,0x14(%esp)
		mov    %ecx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebx
		mov    0x14(%esp),%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x7,%edx
		mov    %edx,0x8(%esp)
		mov    %ebx,%edx
		sar    $0x7,%edx
		mov    %edx,0xc(%esp)
		cmp    %ebx,%eax
		jge    jump_ab844
		mov    %ebx,%edx
		sar    $0x5,%edx
		sub    %edx,%ebx
		sub    0xc(%esp),%ebx
		mov    %eax,%edx
		sar    $0x2,%edx
		add    %edx,%ebx
		mov    %eax,%edx
		sar    $0x3,%edx
		sar    $0x6,%eax
		add    %ebx,%edx
		add    %edx,%eax
		mov    0x8(%esp),%edx
		add    %edx,%eax
		jmp    jump_ab870
	jump_ab836:
		add    $0x14,%eax
		inc    %esi
		cmp    $0x50,%eax
		jl     jump_ab7c2
		jmp    jump_ab957
	jump_ab844:
		mov    %eax,%edx
		sar    $0x5,%edx
		sub    %edx,%eax
		mov    0x8(%esp),%edx
		sub    %edx,%eax
		mov    %eax,(%esp)
		mov    %ebx,%eax
		mov    (%esp),%edx
		sar    $0x2,%eax
		add    %eax,%edx
		mov    %ebx,%eax
		sar    $0x3,%eax
		add    %eax,%edx
		mov    %ebx,%eax
		sar    $0x6,%eax
		add    %edx,%eax
		add    0xc(%esp),%eax
	jump_ab870:
		shl    $0x7,%eax
		mov    %ecx,%edx
		mov    %eax,%ebx
		mov    %eax,0x18(%esp)
		sar    $0x8,%ebx
		mov    0x14(%esp),%eax
		mov    %ebx,0x18(%esp)
		xor    %ebx,%ebx
		call   ac_arctan
		mov    %ax,%bx
		lea    0x0(,%esi,4),%eax
		lea    (%esi,%eax,1),%edx
		shl    $0x4,%edx
		mov    %edx,%eax
		add    $0x50,%edx
		lea    -0x3c(%ebx),%ecx
		mov    %edx,0x1c(%esp)
	jump_ab8a9:
		mov    %ecx,%ebx
		and    $0x7ff,%ebx
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%ebx,4),%edx
		mov    EXPORT_SYMBOL(lbSinTable)(,%ebx,4),%ebx
		imul   $0x200,%ebx,%ebx
		neg    %edx
		imul   $0x200,%edx,%edx
		add    $0x10,%eax
		mov    %edi,data_1db194(%eax)
		mov    %ebp,data_1db198(%eax)
		add    $0x1e,%ecx
		sar    $0x8,%edx
		sar    $0x8,%ebx
		mov    %edx,EXPORT_SYMBOL(dword_1DB1A0)(%eax)
		mov    0x1c(%esp),%edx
		mov    %ebx,EXPORT_SYMBOL(SCANNER_keep_arcs)(%eax)
		cmp    %edx,%eax
		jne    jump_ab8a9
		lea    0x0(,%esi,4),%eax
		add    %esi,%eax
		mov    0x4(%esp),%edx
		mov    %edi,ingame__Scanner__Arc_0__X1(,%eax,4)
		mov    %edx,ingame__Scanner__Arc_0__X2(,%eax,4)
		mov    0x10(%esp),%edx
		mov    %edx,ingame__Scanner__Arc_0__Z2(,%eax,4)
		mov    0x18(%esp),%edx
		mov    %ebp,ingame__Scanner__Arc_0__Z1(,%eax,4)
		sar    $0x10,%edx
		mov    %dl,ingame__Scanner__Arc_0__Period(,%eax,4)
		mov    0x30(%esp),%dl
		mov    %dl,ingame__Scanner__Arc_0__Counter(,%eax,4)
		mov    EXPORT_SYMBOL(colour_lookup)+1,%dl
		mov    %dl,ingame__Scanner__Arc_0__Colour(,%eax,4)
		mov    %esi,%eax
		add    $0x20,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4
	jump_ab957:
		mov    $0xffffffff,%eax
		add    $0x20,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_SCANNER_set_colour)	/* 0x0AB968 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		cmp    $0x1,%eax
		jb     jump_ab977
		jbe    jump_ab9b0
		cmp    $0x2,%eax
		je     jump_ab980
	jump_ab977:
		mov    %al,EXPORT_SYMBOL(byte_1DB2E9)
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_ab980:
		movb   $0x14,EXPORT_SYMBOL(SCANNER_colour)
		movb   $0x44,EXPORT_SYMBOL(SCANNER_colour)+1
		mov    EXPORT_SYMBOL(pixmap)+2580,%dl # pixmap.fade_table[0x2580]
		mov    $0x14,%bl
		mov    %dl,EXPORT_SYMBOL(SCANNER_colour)+2
		mov    EXPORT_SYMBOL(colour_lookup)+0x06,%dl
		mov    %bl,EXPORT_SYMBOL(SCANNER_colour)+4
		mov    %dl,EXPORT_SYMBOL(SCANNER_colour)+3
		jmp    jump_ab977
	jump_ab9b0:
		mov    $0x28,%bh
		mov    $0x44,%cl
		mov    EXPORT_SYMBOL(pixmap)+2580,%dl # pixmap.fade_table[0x2580]
		mov    %bh,EXPORT_SYMBOL(SCANNER_colour)
		mov    %cl,EXPORT_SYMBOL(SCANNER_colour)+1
		mov    %dl,EXPORT_SYMBOL(SCANNER_colour)+2
		mov    $0x20,%ch
		mov    %bh,EXPORT_SYMBOL(SCANNER_colour)+4
		mov    %ch,EXPORT_SYMBOL(SCANNER_colour)+3
		mov    %al,EXPORT_SYMBOL(byte_1DB2E9)
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_SCANNER_init)	/* 0x0ABA1C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    display_palette,%edi
		xor    %ebx,%ebx
		xor    %esi,%esi
		jmp    jump_aba73
	jump_aba30:
		mov    (%esp),%dl
		cmp    %dl,%cl
		jbe    jump_aba91
		mov    %cl,%al
	jump_aba39:
		xor    %edx,%edx
		mov    %al,%dl
		xor    %eax,%eax
		mov    %ch,%al
		and    $0xff,%ecx
		add    %eax,%ecx
		xor    %eax,%eax
		mov    (%esp),%al
		add    %eax,%ecx
		sar    %ecx
		add    %edx,%ecx
		mov    %ecx,%eax
		mov    %ecx,%edx
		mov    $0x3,%ecx
		sar    $0x1f,%edx
		idiv   %ecx
		inc    %ebx
		add    %ecx,%esi
		mov    %al,data_1cab63(%ebx)
		cmp    $0x100,%ebx
		jge    jump_aba95
	jump_aba73:
		mov    %edi,%eax
		mov    (%esi,%eax,1),%ch
		mov    0x1(%esi,%eax,1),%cl
		mov    0x2(%esi,%eax,1),%al
		mov    %al,(%esp)
		cmp    %al,%cl
		jbe    jump_aba89
		mov    %cl,%al
	jump_aba89:
		cmp    %al,%ch
		jbe    jump_aba30
		mov    %ch,%al
		jmp    jump_aba39
	jump_aba91:
		mov    %dl,%al
		jmp    jump_aba39
	jump_aba95:
		xor    %ecx,%ecx
		xor    %ebx,%ebx
	jump_aba99:
		mov    %ebx,%edx
		mov    %ebx,%eax
		sar    $0x1f,%edx
		shl    $0x4,%edx
		sbb    %edx,%eax
		sar    $0x4,%eax
		add    $0x8,%ecx
		mov    EXPORT_SYMBOL(lbSinTable)(,%eax,4),%edx
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%eax,4),%eax
		sar    $0x2,%edx
		sar    $0x2,%eax
		mov    %edx,EXPORT_SYMBOL(SCANNER_bbpadds)(%ecx)
		add    $0x800,%ebx
		mov    %eax,data_1dbae8(%ecx)
		cmp    $0x80,%ecx
		jne    jump_aba99
		xor    %ebx,%ebx
	jump_abadb:
		mov    %bl,EXPORT_SYMBOL(SCANNER_bright_limit)(%ebx)
		inc    %ebx
		cmp    $0x40,%ebx
		jge    jump_abaf2
		jmp    jump_abadb
	jump_abae9:
		inc    %ebx
		mov    %dh,data_1db087(%ebx)
		jmp    jump_abaf4
	jump_abaf2:
		mov    $0x3f,%dh
	jump_abaf4:
		cmp    $0x100,%ebx
		jl     jump_abae9
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+2,%al
		mov    EXPORT_SYMBOL(pixmap)+0x1800(%eax),%al # pixmap.fade_table[0x1800+?]
		mov    %al,data_1db18d
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+3,%al
		mov    EXPORT_SYMBOL(pixmap)+0x1800(%eax),%dl # pixmap.fade_table[0x1800+?]
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+7,%al
		mov    EXPORT_SYMBOL(pixmap)+0x0A00(%eax),%al # pixmap.fade_table[0x0A00+?]
		mov    %al,data_1db192
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+4,%al
		mov    EXPORT_SYMBOL(pixmap)+0x3600(%eax),%al # pixmap.fade_table[0x3600+?]
		mov    %al,data_1db194
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+0x05,%al
		mov    EXPORT_SYMBOL(pixmap)+0x1800(%eax),%al # pixmap.fade_table[0x1800+?]
		mov    %al,data_1db196
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+1,%al
		mov    %dl,data_1db18f
		mov    %dl,data_1db195
		mov    EXPORT_SYMBOL(pixmap)+0x2000(%eax),%dl # pixmap.fade_table[0x2000+?]
		xor    %eax,%eax
		mov    %dl,data_1db18e
		mov    EXPORT_SYMBOL(colour_lookup)+0x09,%al
		mov    %dl,data_1db198
		mov    %dl,data_1db193
		mov    EXPORT_SYMBOL(pixmap)+0x2800(%eax),%dl # pixmap.fade_table[0x2800+?]
		mov    %dl,data_1db197
		mov    EXPORT_SYMBOL(pixmap)+0x2000(%eax),%dl # pixmap.fade_table[0x2000+?]
		mov    %dl,data_1db190
		mov    %dl,data_1db191
		mov    %dl,data_1db199
		mov    %dl,data_1db19a
		mov    %edi,display_palette
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
SCANNER_scanconvert:	/* 0x0ABBBC */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x30,%esp
		mov    %eax,%edi
		mov    %edx,%esi
		mov    %ebx,0xc(%esp)
		mov    %ecx,0x1c(%esp)
		mov    0x48(%esp),%bl
		test   %eax,%eax
		jl     jump_abf2f
		cmp    $0x100,%eax
		jg     jump_abf2f
		mov    0xc(%esp),%edx
		test   %edx,%edx
		jl     jump_abf2f
		cmp    $0x100,%edx
		jg     jump_abf2f
		mov    0x40(%esp),%ebp
		test   %ebp,%ebp
		jl     jump_abf2f
		cmp    $0x100,%ebp
		jg     jump_abf2f
		test   %esi,%esi
		jl     jump_abf2f
		cmp    $0x100,%esi
		jg     jump_abf2f
		test   %ecx,%ecx
		jl     jump_abf2f
		cmp    $0x100,%ecx
		jg     jump_abf2f
		mov    0x44(%esp),%ebp
		test   %ebp,%ebp
		jl     jump_abf2f
		cmp    $0x100,%ebp
		jg     jump_abf2f
		cmp    %ecx,%esi
		jle    jump_abc67
		mov    %edx,%edi
		mov    %eax,0xc(%esp)
		mov    %esi,%eax
		mov    %ecx,%esi
		mov    %eax,0x1c(%esp)
	jump_abc67:
		mov    0x1c(%esp),%eax
		mov    0x44(%esp),%ecx
		cmp    %ecx,%eax
		jle    jump_abc8f
		mov    0x40(%esp),%edx
		mov    0xc(%esp),%eax
		mov    %edx,0xc(%esp)
		mov    %eax,0x40(%esp)
		mov    0x1c(%esp),%eax
		mov    %ecx,0x1c(%esp)
		mov    %eax,0x44(%esp)
	jump_abc8f:
		mov    0x1c(%esp),%ebp
		cmp    %ebp,%esi
		jle    jump_abca9
		mov    %edi,%eax
		mov    0xc(%esp),%edi
		mov    %eax,0xc(%esp)
		mov    %esi,%eax
		mov    %ebp,%esi
		mov    %eax,0x1c(%esp)
	jump_abca9:
		mov    0x44(%esp),%eax
		sub    %esi,%eax
		mov    %eax,0x4(%esp)
		mov    %edi,%eax
		mov    0x40(%esp),%ecx
		shl    $0x10,%eax
		sub    %edi,%ecx
		mov    %eax,0x8(%esp)
		mov    0x1c(%esp),%eax
		shl    $0x10,%ecx
		cmp    %eax,%esi
		jne    jump_abd4e
		mov    0x44(%esp),%edx
		cmp    %edx,%eax
		je     jump_abf2f
		mov    %edx,%eax
		sub    %esi,%eax
		mov    0x40(%esp),%ebp
		mov    %eax,(%esp)
		mov    0xc(%esp),%eax
		mov    0xc(%esp),%edx
		sub    %eax,%ebp
		shl    $0x10,%eax
		shl    $0x10,%ebp
		cmp    %edx,%edi
		jge    jump_abd24
		mov    %eax,0x24(%esp)
		mov    %ecx,%edx
		mov    %ecx,%eax
		sar    $0x1f,%edx
		mov    0x4(%esp),%ecx
		idiv   %ecx
		mov    %eax,0x28(%esp)
		mov    %ebp,%edx
		mov    %ebp,%eax
		sar    $0x1f,%edx
		idivl  (%esp)
		mov    0x8(%esp),%edi
		jmp    jump_abe0e
	jump_abd24:
		mov    %eax,%edi
		mov    %ebp,%edx
		mov    0x8(%esp),%eax
		sar    $0x1f,%edx
		mov    %eax,0x24(%esp)
		mov    %ebp,%eax
		mov    (%esp),%ebp
		idiv   %ebp
		mov    %eax,0x28(%esp)
		mov    %ecx,%edx
		mov    %ecx,%eax
		sar    $0x1f,%edx
		mov    0x4(%esp),%ecx
		jmp    jump_abe0c
	jump_abd4e:
		mov    %ecx,%eax
		mov    %ecx,%edx
		mov    0x4(%esp),%ecx
		sar    $0x1f,%edx
		idiv   %ecx
		mov    0xc(%esp),%edx
		mov    0x1c(%esp),%ecx
		sub    %edi,%edx
		mov    %eax,0x28(%esp)
		shl    $0x10,%edx
		sub    %esi,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    0x8(%esp),%edi
		mov    %eax,0x18(%esp)
		mov    0x28(%esp),%eax
		mov    0x18(%esp),%ebp
		mov    %edi,0x2c(%esp)
		cmp    %ebp,%eax
		jge    jump_abe5e
		xor    %ebp,%ebp
	jump_abd93:
		mov    0x1c(%esp),%eax
		cmp    %eax,%esi
		jge    jump_abddb
		mov    %edi,%eax
		mov    0x2c(%esp),%ecx
		sar    $0x10,%eax
		sar    $0x10,%ecx
		sub    %eax,%ecx
		je     jump_abdc6
		mov    %ebp,%edx
		test   %ecx,%ecx
		jle    jump_abdc6
		shl    $0x8,%eax
		add    %esi,%eax
	jump_abdb6:
		add    $0x100,%eax
		inc    %edx
		mov    %bl,SCANNER_map(%eax)
		cmp    %ecx,%edx
		jl     jump_abdb6
	jump_abdc6:
		mov    0x28(%esp),%eax
		mov    0x2c(%esp),%edx
		add    %eax,%edi
		add    0x18(%esp),%edx
		inc    %esi
		mov    %edx,0x2c(%esp)
		jmp    jump_abd93
	jump_abddb:
		cmp    0x44(%esp),%eax
		je     jump_abf2f
		mov    0xc(%esp),%eax
		mov    0x40(%esp),%edx
		mov    0xc(%esp),%ecx
		mov    0x1c(%esp),%ebp
		shl    $0x10,%eax
		sub    %ecx,%edx
		mov    0x44(%esp),%ecx
		shl    $0x10,%edx
		mov    %eax,0x24(%esp)
		mov    %edx,%eax
		sub    %ebp,%ecx
		sar    $0x1f,%edx
	jump_abe0c:
		idiv   %ecx
	jump_abe0e:
		mov    %eax,0x14(%esp)
		xor    %ebp,%ebp
	jump_abe14:
		cmp    0x44(%esp),%esi
		jge    jump_abf2f
		mov    %edi,%eax
		mov    0x24(%esp),%ecx
		sar    $0x10,%eax
		sar    $0x10,%ecx
		sub    %eax,%ecx
		je     jump_abe49
		mov    %ebp,%edx
		test   %ecx,%ecx
		jle    jump_abe49
		shl    $0x8,%eax
		add    %esi,%eax
	jump_abe39:
		add    $0x100,%eax
		inc    %edx
		mov    %bl,SCANNER_map(%eax)
		cmp    %ecx,%edx
		jl     jump_abe39
	jump_abe49:
		mov    0x28(%esp),%eax
		mov    0x24(%esp),%edx
		add    %eax,%edi
		add    0x14(%esp),%edx
		inc    %esi
		mov    %edx,0x24(%esp)
		jmp    jump_abe14
	jump_abe5e:
		xor    %ebp,%ebp
	jump_abe60:
		mov    0x1c(%esp),%eax
		cmp    %eax,%esi
		jge    jump_abeaa
		mov    %edi,%ecx
		mov    0x2c(%esp),%eax
		sar    $0x10,%ecx
		sar    $0x10,%eax
		sub    %eax,%ecx
		je     jump_abe93
		mov    %ebp,%edx
		test   %ecx,%ecx
		jle    jump_abe93
		shl    $0x8,%eax
		add    %esi,%eax
	jump_abe83:
		add    $0x100,%eax
		inc    %edx
		mov    %bl,SCANNER_map(%eax)
		cmp    %ecx,%edx
		jl     jump_abe83
	jump_abe93:
		mov    0x28(%esp),%edx
		mov    0x18(%esp),%eax
		mov    0x2c(%esp),%ecx
		inc    %esi
		add    %eax,%ecx
		add    %edx,%edi
		mov    %ecx,0x2c(%esp)
		jmp    jump_abe60
	jump_abeaa:
		cmp    0x44(%esp),%eax
		je     jump_abf2f
		mov    0xc(%esp),%eax
		mov    0x40(%esp),%edx
		mov    0xc(%esp),%ecx
		mov    0x1c(%esp),%ebp
		shl    $0x10,%eax
		sub    %ecx,%edx
		mov    0x44(%esp),%ecx
		shl    $0x10,%edx
		mov    %eax,0x20(%esp)
		mov    %edx,%eax
		sub    %ebp,%ecx
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %eax,0x10(%esp)
		cmp    0x44(%esp),%esi
		jge    jump_abf2f
		mov    0x28(%esp),%ebp
	jump_abeeb:
		mov    %edi,%ecx
		mov    0x20(%esp),%eax
		sar    $0x10,%ecx
		sar    $0x10,%eax
		sub    %eax,%ecx
		je     jump_abf16
		xor    %edx,%edx
		test   %ecx,%ecx
		jle    jump_abf16
		shl    $0x8,%eax
		add    %esi,%eax
	jump_abf06:
		add    $0x100,%eax
		inc    %edx
		mov    %bl,SCANNER_map(%eax)
		cmp    %ecx,%edx
		jl     jump_abf06
	jump_abf16:
		mov    0x10(%esp),%eax
		mov    0x20(%esp),%edx
		mov    0x44(%esp),%ecx
		inc    %esi
		add    %eax,%edx
		add    %ebp,%edi
		mov    %edx,0x20(%esp)
		cmp    %ecx,%esi
		jl     jump_abeeb
	jump_abf2f:
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0xc


/*----------------------------------------------------------------*/
SCANNER_draw_road:	/* 0x0AC090 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x20,%esp
		movswl %ax,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		add    %eax,%edx
		mov    0x20(%edx),%eax
		mov    0x18(%edx),%ebx
		sar    $0x8,%eax
		sar    $0x8,%ebx
		mov    %eax,(%esp)
		mov    %ebx,%ebp
		mov    0x57(%edx),%eax
		mov    (%esp),%edi
		sar    $0x18,%eax
		mov    0x58(%edx),%edx
		lea    0x0(,%eax,8),%ecx
		sar    $0x18,%edx
		lea    0x0(,%edx,8),%esi
		sub    %ecx,%ebp
		add    %ecx,%ebx
		mov    (%esp),%ecx
		sub    %esi,%edi
		add    %ecx,%esi
		lea    (%eax,%eax,1),%ecx
		mov    %ecx,0x1c(%esp)
		mov    %eax,%ecx
		sar    %ecx
		mov    %ecx,0x18(%esp)
		mov    0x1c(%esp),%ecx
		add    0x18(%esp),%ecx
		add    %ecx,%eax
		lea    (%edx,%edx,1),%ecx
		mov    %ecx,0x1c(%esp)
		mov    %edx,%ecx
		sar    %ecx
		mov    %ecx,0x18(%esp)
		mov    0x1c(%esp),%ecx
		add    0x18(%esp),%ecx
		add    %ecx,%edx
		mov    %ebp,%ecx
		sub    %edx,%ecx
		add    %edx,%ebp
		mov    %ecx,0x4(%esp)
		mov    %ebp,0x8(%esp)
		lea    (%edi,%eax,1),%ecx
		lea    (%esi,%eax,1),%ebp
		sub    %eax,%edi
		sub    %eax,%esi
		mov    EXPORT_SYMBOL(SCANNER_colour)+1,%al
		mov    %edi,0xc(%esp)
		mov    %esi,0x14(%esp)
		mov    %ebx,%edi
		add    %edx,%ebx
		sub    %edx,%edi
		mov    %ebx,0x10(%esp)
		mov    0x8(%esp),%esi
		mov    0x4(%esp),%edx
		and    $0xff,%eax
		sar    $0x7,%edi
		sar    $0x7,%ebp
		mov    %eax,0x18(%esp)
		push   %eax
		mov    %edi,0x20(%esp)
		sar    $0x7,%esi
		sar    $0x7,%edx
		push   %edi
		mov    %ecx,%eax
		mov    0x14(%esp),%edi
		push   %ebp
		sar    $0x7,%eax
		sar    $0x7,%edi
		mov    %esi,%ecx
		mov    %edi,%ebx
		call   SCANNER_scanconvert
		mov    0x18(%esp),%eax
		push   %eax
		mov    0x14(%esp),%eax
		sar    $0x7,%eax
		push   %eax
		mov    0x1c(%esp),%eax
		mov    0x24(%esp),%ecx
		sar    $0x7,%eax
		mov    %ebp,%ebx
		push   %eax
		mov    %esi,%edx
		mov    %edi,%eax
		call   SCANNER_scanconvert
		add    $0x20,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
SCANNER_draw_object:	/* 0x0AC1B8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x70,%esp
		mov    %dl,0x6c(%esp)
		movswl %ax,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    game_objects,%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0xe(%edx),%ax
		mov    %edx,0x4c(%esp)
		mov    %ax,0x60(%esp)
		mov    0x2(%edx),%ax
		mov    0x14(%edx),%si
		mov    %eax,0x68(%esp)
		mov    (%edx),%ax
		mov    0x16(%edx),%di
		mov    %eax,0x54(%esp)
		mov    %eax,0x5c(%esp)
		jmp    jump_ac2ee
	jump_ac208:
		mov    (%edx,%eax,2),%cx
		and    $0xffff,%ecx
		imul   $0xa,%ecx,%ecx
		mov    EXPORT_SYMBOL(game_object_points),%ebp
		add    %ebp,%ecx
		mov    0x2(%ecx),%ecx
		mov    0x5e(%esp),%ebp
		sar    $0x10,%ecx
		sar    $0x10,%ebp
		add    %ebp,%ecx
		inc    %ebx
		sar    $0x3,%ecx
		mov    %ecx,0x20(%esp,%eax,4)
	jump_ac234:
		xor    %eax,%eax
		mov    %bx,%ax
		cmp    $0x3,%eax
		jl     jump_ac208
		xor    %ebx,%ebx
		jmp    jump_ac26e
	jump_ac242:
		mov    (%edx,%eax,2),%cx
		and    $0xffff,%ecx
		imul   $0xa,%ecx,%ecx
		mov    EXPORT_SYMBOL(game_object_points),%ebp
		add    %ebp,%ecx
		mov    (%ecx),%ecx
		sar    $0x10,%ecx
		mov    %ecx,0x38(%esp)
		mov    0x38(%esp),%ebp
		movswl %si,%ecx
		add    %ebp,%ecx
		inc    %ebx
		mov    %ecx,0x10(%esp,%eax,4)
	jump_ac26e:
		xor    %eax,%eax
		mov    %bx,%ax
		cmp    $0x3,%eax
		jl     jump_ac242
		xor    %ebx,%ebx
		jmp    jump_ac2a8
	jump_ac27c:
		mov    (%edx,%eax,2),%cx
		and    $0xffff,%ecx
		imul   $0xa,%ecx,%ecx
		mov    %ecx,0x38(%esp)
		mov    0x38(%esp),%ebp
		mov    EXPORT_SYMBOL(game_object_points),%ecx
		add    %ebp,%ecx
		mov    0x4(%ecx),%ecx
		movswl %di,%ebp
		sar    $0x10,%ecx
		inc    %ebx
		add    %ebp,%ecx
		mov    %ecx,(%esp,%eax,4)
	jump_ac2a8:
		xor    %eax,%eax
		mov    %bx,%ax
		cmp    $0x3,%eax
		jl     jump_ac27c
		xor    %eax,%eax
		mov    0x6c(%esp),%al
		mov    0x14(%esp),%ecx
		push   %eax
		mov    0x1c(%esp),%eax
		mov    0x8(%esp),%ebx
		sar    $0x7,%eax
		mov    0x14(%esp),%edx
		push   %eax
		mov    0x10(%esp),%eax
		sar    $0x7,%ecx
		sar    $0x7,%eax
		sar    $0x7,%ebx
		push   %eax
		mov    0xc(%esp),%eax
		sar    $0x7,%edx
		sar    $0x7,%eax
		call   SCANNER_scanconvert
		incl   0x5c(%esp)
	jump_ac2ee:
		xor    %eax,%eax
		xor    %edx,%edx
		mov    0x54(%esp),%ax
		mov    0x68(%esp),%dx
		add    %eax,%edx
		xor    %eax,%eax
		mov    0x5c(%esp),%ax
		cmp    %edx,%eax
		jge    jump_ac31b
		mov    game_object_faces,%edx
		shl    $0x5,%eax
		xor    %ebx,%ebx
		add    %eax,%edx
		jmp    jump_ac234
	jump_ac31b:
		mov    0x4c(%esp),%eax
		mov    0x8(%eax),%ax
		mov    %eax,0x64(%esp)
		mov    0x4c(%esp),%eax
		mov    0x6(%eax),%ax
		mov    %eax,0x50(%esp)
		mov    %eax,0x58(%esp)
		jmp    jump_ac480
	jump_ac33c:
		mov    (%edx,%eax,2),%cx
		and    $0xffff,%ecx
		imul   $0xa,%ecx,%ecx
		mov    EXPORT_SYMBOL(game_object_points),%ebp
		add    %ebp,%ecx
		mov    0x2(%ecx),%ecx
		sar    $0x10,%ecx
		mov    %ecx,0x38(%esp)
		mov    0x5e(%esp),%ecx
		mov    0x38(%esp),%ebp
		sar    $0x10,%ecx
		add    %ebp,%ecx
		inc    %ebx
		mov    %ecx,0x20(%esp,%eax,4)
	jump_ac36d:
		xor    %eax,%eax
		mov    %bx,%ax
		cmp    $0x4,%eax
		jl     jump_ac33c
		xor    %ebx,%ebx
		jmp    jump_ac3a7
	jump_ac37b:
		mov    (%edx,%eax,2),%cx
		and    $0xffff,%ecx
		imul   $0xa,%ecx,%ecx
		mov    %ecx,0x38(%esp)
		mov    0x38(%esp),%ebp
		mov    EXPORT_SYMBOL(game_object_points),%ecx
		add    %ebp,%ecx
		mov    (%ecx),%ecx
		movswl %si,%ebp
		sar    $0x10,%ecx
		inc    %ebx
		add    %ebp,%ecx
		mov    %ecx,0x10(%esp,%eax,4)
	jump_ac3a7:
		xor    %eax,%eax
		mov    %bx,%ax
		cmp    $0x4,%eax
		jl     jump_ac37b
		xor    %ebx,%ebx
		jmp    jump_ac3d9
	jump_ac3b5:
		mov    (%edx,%eax,2),%cx
		and    $0xffff,%ecx
		imul   $0xa,%ecx,%ecx
		mov    EXPORT_SYMBOL(game_object_points),%ebp
		add    %ebp,%ecx
		mov    0x4(%ecx),%ecx
		movswl %di,%ebp
		sar    $0x10,%ecx
		inc    %ebx
		add    %ebp,%ecx
		mov    %ecx,(%esp,%eax,4)
	jump_ac3d9:
		xor    %eax,%eax
		mov    %bx,%ax
		cmp    $0x4,%eax
		jl     jump_ac3b5
		mov    0x4(%esp),%eax
		mov    %eax,0x3c(%esp)
		mov    0x14(%esp),%eax
		mov    %eax,0x34(%esp)
		mov    0x8(%esp),%eax
		mov    %eax,0x30(%esp)
		mov    0x18(%esp),%eax
		movzbl 0x6c(%esp),%ebp
		mov    %eax,0x40(%esp)
		mov    0xc(%esp),%eax
		mov    0x14(%esp),%ecx
		mov    %eax,0x44(%esp)
		mov    0x1c(%esp),%eax
		mov    0x4(%esp),%ebx
		mov    %eax,0x48(%esp)
		mov    0x18(%esp),%eax
		push   %ebp
		sar    $0x7,%eax
		mov    0x14(%esp),%edx
		push   %eax
		mov    0x10(%esp),%eax
		sar    $0x7,%ecx
		sar    $0x7,%eax
		sar    $0x7,%ebx
		push   %eax
		mov    0xc(%esp),%eax
		sar    $0x7,%edx
		sar    $0x7,%eax
		call   SCANNER_scanconvert
		mov    0x48(%esp),%eax
		mov    0x40(%esp),%ecx
		mov    0x30(%esp),%ebx
		push   %ebp
		sar    $0x7,%eax
		mov    0x38(%esp),%edx
		push   %eax
		mov    0x4c(%esp),%eax
		sar    $0x7,%ecx
		sar    $0x7,%eax
		sar    $0x7,%ebx
		push   %eax
		mov    0x48(%esp),%eax
		sar    $0x7,%edx
		sar    $0x7,%eax
		call   SCANNER_scanconvert
		incl   0x58(%esp)
	jump_ac480:
		xor    %edx,%edx
		xor    %eax,%eax
		mov    0x50(%esp),%dx
		mov    0x64(%esp),%ax
		add    %eax,%edx
		xor    %eax,%eax
		mov    0x58(%esp),%ax
		cmp    %edx,%eax
		jge    jump_ac4ad
		imul   $0x28,%eax,%eax
		mov    game_object_faces4,%edx
		xor    %ebx,%ebx
		add    %eax,%edx
		jmp    jump_ac36d
	jump_ac4ad:
		add    $0x70,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret

vtable_ac4b8:
		.long   func_ac515
		.long   func_ac52d
		.long   func_ac545
		.long   func_ac55d


/*----------------------------------------------------------------*/
SCANNER_find_colour:	/* 0x0AC4C8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		mov    %eax,%ebx
		sar    $0x8,%eax
		mov    %edx,%ecx
		shl    $0x7,%eax
		sar    $0x8,%ecx
		add    %eax,%ecx
		lea    0x0(,%ecx,8),%eax
		sar    $0x6,%ebx
		add    %eax,%ecx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %ecx,%ecx
		and    $0x2,%ebx
		mov    (%ecx,%eax,1),%ax
		sar    $0x7,%edx
		and    $0x3f,%ah
		and    $0x1,%edx
		cwtl
		or     %ebx,%edx
		call   ac_get_my_texture_bits
		cmp    $0x3,%edx
		ja     jump_ac575
		jmp    *%cs:vtable_ac4b8(,%edx,4)


/*----------------------------------------------------------------*/
func_ac515:
/*----------------------------------------------------------------*/
		test   $0x40,%al
		je     jump_ac521
		mov    $0x1,%eax
		pop    %ecx
		pop    %ebx
		ret
	jump_ac521:
		test   $0x80,%al
		je     jump_ac575
		mov    $0x2,%eax
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_ac52d:
/*----------------------------------------------------------------*/
		test   $0x10,%al
		je     jump_ac539
		mov    $0x1,%eax
		pop    %ecx
		pop    %ebx
		ret
	jump_ac539:
		test   $0x20,%al
		je     jump_ac575
		mov    $0x2,%eax
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_ac545:
/*----------------------------------------------------------------*/
		test   $0x1,%al
		je     jump_ac551
		mov    $0x1,%eax
		pop    %ecx
		pop    %ebx
		ret
	jump_ac551:
		test   $0x2,%al
		je     jump_ac575
		mov    $0x2,%eax
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_ac55d:
/*----------------------------------------------------------------*/
		test   $0x4,%al
		je     jump_ac569
		mov    $0x1,%eax
		pop    %ecx
		pop    %ebx
		ret
	jump_ac569:
		test   $0x8,%al
		je     jump_ac575
		mov    $0x2,%eax
		pop    %ecx
		pop    %ebx
		ret
	jump_ac575:
		xor    %eax,%eax
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
SCANNER_outline:	/* 0x0AC57C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		sub    $0x100,%esp
		mov    $0x1,%eax
		mov    EXPORT_SYMBOL(SCANNER_colour)+3,%dh
		jmp    jump_ac5a3
	jump_ac592:
		mov    EXPORT_SYMBOL(SCANNER_data)+257(%eax),%dl
		mov    %dl,(%esp,%eax,1)
	jump_ac59b:
		inc    %eax
		cmp    $0xff,%eax
		jge    jump_ac5d6
	jump_ac5a3:
		cmp    EXPORT_SYMBOL(SCANNER_data)+257(%eax),%dh
		jne    jump_ac592
		cmp    EXPORT_SYMBOL(SCANNER_data)+512(%eax),%dh
		jne    jump_ac592
		cmp    EXPORT_SYMBOL(SCANNER_data)(%eax),%dh
		jne    jump_ac592
		cmp    EXPORT_SYMBOL(SCANNER_data)+258(%eax),%dh
		jne    jump_ac592
		cmp    EXPORT_SYMBOL(SCANNER_data)+256(%eax),%dh
		jne    jump_ac592
		mov    EXPORT_SYMBOL(SCANNER_colour),%dl
		mov    %dl,(%esp,%eax,1)
		jmp    jump_ac59b
	jump_ac5d6:
		mov    $0x2,%ecx
		mov    EXPORT_SYMBOL(SCANNER_colour)+3,%bh
		mov    %ecx,%eax
		mov    $0x1,%edx
		shl    $0x8,%eax
		add    %edx,%eax
		jmp    jump_ac614
	jump_ac5ef:
		inc    %ecx
		cmp    $0x100,%ecx
		jge    jump_ac664
		mov    %ecx,%eax
		mov    $0x1,%edx
		shl    $0x8,%eax
		add    %edx,%eax
		jmp    jump_ac614
	jump_ac60a:
		inc    %edx
		inc    %eax
		cmp    $0xff,%edx
		jge    jump_ac5ef
	jump_ac614:
		cmp    EXPORT_SYMBOL(SCANNER_data)(%eax),%bh
		jne    jump_ac650
		cmp    EXPORT_SYMBOL(SCANNER_data)+257(%eax),%bh
		jne    jump_ac650
		cmp    SCANNER_map(%eax),%bh
		jne    jump_ac650
		cmp    EXPORT_SYMBOL(SCANNER_data)+1(%eax),%bh
		jne    jump_ac650
		cmp    EXPORT_SYMBOL(SCANNER_cont)(%eax),%bh
		jne    jump_ac650
		mov    (%esp,%edx,1),%bl
		mov    %bl,SCANNER_map(%eax)
		mov    EXPORT_SYMBOL(SCANNER_colour),%bl
		mov    %bl,(%esp,%edx,1)
		jmp    jump_ac60a
	jump_ac650:
		mov    (%esp,%edx,1),%bl
		mov    %bl,SCANNER_map(%eax)
		mov    EXPORT_SYMBOL(SCANNER_data)(%eax),%bl
		mov    %bl,(%esp,%edx,1)
		jmp    jump_ac60a
	jump_ac664:
		mov    %ecx,%edx
		mov    $0x1,%eax
		shl    $0x8,%edx
		add    %eax,%edx
	jump_ac670:
		inc    %edx
		mov    (%esp,%eax,1),%bl
		inc    %eax
		mov    %bl,data_1caf87(%edx)
		cmp    $0xff,%eax
		jl     jump_ac670
		add    $0x100,%esp
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_SCANNER_fill_in)	/* 0x0AC68C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x34,%esp
		mov    EXPORT_SYMBOL(sthings),%esi
		xor    %edx,%edx
		mov    %edx,0x1c(%esp)
		mov    %edx,0x14(%esp)
		jmp    jump_ac6d5
	jump_ac6a7:
		mov    0x1c(%esp),%ecx
		mov    0x14(%esp),%edi
		mov    EXPORT_SYMBOL(sthings),%esi
		add    $0x8000,%ecx
		add    $0x100,%edi
		mov    %ecx,0x1c(%esp)
		mov    %edi,0x14(%esp)
		cmp    $0x10000,%edi
		je     jump_ac818
	jump_ac6d5:
		mov    0x1c(%esp),%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		mov    %eax,0x4(%esp)
		mov    0x14(%esp),%eax
		xor    %ecx,%ecx
		mov    %eax,0x2c(%esp)
		mov    %esi,EXPORT_SYMBOL(sthings)
	jump_ac6fa:
		mov    %ecx,%edx
		mov    %ecx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		mov    0x4(%esp),%edi
		mov    %eax,%ebx
		mov    %eax,%edx
		mov    %edi,%eax
		call   SCANNER_find_colour
		cmp    $0x1,%eax
		jb     jump_ac751
		mov    EXPORT_SYMBOL(sthings),%esi
		jbe    jump_ac73b
		cmp    $0x2,%eax
		je     jump_ac746
		jmp    jump_ac755
	jump_ac730:
		mov    EXPORT_SYMBOL(SCANNER_colour),%al
		mov    %al,0x30(%esp)
		jmp    jump_ac755
	jump_ac73b:
		mov    EXPORT_SYMBOL(SCANNER_colour)+1,%al
		mov    %al,0x30(%esp)
		jmp    jump_ac755
	jump_ac746:
		mov    EXPORT_SYMBOL(SCANNER_colour)+2,%al
		mov    %al,0x30(%esp)
		jmp    jump_ac755
	jump_ac751:
		test   %eax,%eax
		je     jump_ac730
	jump_ac755:
		mov    %edi,%eax
		mov    %ebx,%edi
		mov    %eax,%ebx
		add    $0x80,%eax
		movswl %di,%ebp
		movswl %ax,%edx
		mov    %ebp,%eax
		call   ac_alt_at_point
		mov    %eax,0x8(%esp)
		mov    %ebx,%eax
		sub    $0x80,%eax
		movswl %ax,%edx
		mov    %ebp,%eax
		call   ac_alt_at_point
		mov    %eax,%ebp
		mov    %edi,%eax
		movswl %bx,%ebx
		add    $0x80,%eax
		mov    %ebx,%edx
		cwtl
		sub    $0x80,%edi
		call   ac_alt_at_point
		mov    %eax,0xc(%esp)
		mov    %ebx,%edx
		movswl %di,%eax
		mov    0xc(%esp),%ebx
		call   ac_alt_at_point
		mov    0x8(%esp),%edx
		sub    %eax,%ebx
		sub    %ebp,%edx
		mov    %ebx,%eax
		sar    $0x9,%edx
		sar    $0x9,%eax
		add    $0x20,%edx
		add    %edx,%eax
		test   %eax,%eax
		jge    jump_ac7ca
		xor    %eax,%eax
	jump_ac7ca:
		mov    EXPORT_SYMBOL(sthings),%esi
		cmp    $0x3f,%eax
		jle    jump_ac7da
		mov    $0x3f,%eax
	jump_ac7da:
		xor    %edx,%edx
		mov    0x30(%esp),%dl
		shl    $0x8,%eax
		add    $0x8000,%ecx
		mov    EXPORT_SYMBOL(pixmap)(%edx,%eax,1),%al # pixmap.fade_table[?]
		mov    0x2c(%esp),%edx
		mov    %esi,EXPORT_SYMBOL(sthings)
		lea    0x1(%edx),%ebx
		mov    %al,EXPORT_SYMBOL(SCANNER_data)(%edx)
		mov    %ebx,0x2c(%esp)
		cmp    $0x800000,%ecx
		je     jump_ac6a7
		jmp    jump_ac6fa
	jump_ac818:
		mov    $0x8ee,%eax
		xor    %edx,%edx
		mov    %eax,0x18(%esp)
		mov    %edx,0x20(%esp)
		xor    %edi,%edi
		jmp    jump_ac859
	jump_ac82b:
		mov    0x18(%esp),%ecx
		mov    0x20(%esp),%ebp
		mov    %esi,EXPORT_SYMBOL(sthings)
		add    $0x900,%ecx
		add    $0x900,%ebp
		mov    %ecx,0x18(%esp)
		mov    %ebp,0x20(%esp)
		cmp    $0x47700,%ebp
		je     jump_ac91f
	jump_ac859:
		mov    0x20(%esp),%ebp
		mov    0x18(%esp),%eax
		mov    EXPORT_SYMBOL(sthings),%esi
		mov    %eax,(%esp)
		add    %edi,%ebp
		jmp    jump_ac8d6
	jump_ac86e:
		mov    0x52(%eax),%ax
		xor    %edx,%edx
		add    %ecx,%eax
		mov    EXPORT_SYMBOL(SCANNER_colour)+3,%dl
		cwtl
		call   SCANNER_draw_object
		inc    %ecx
	jump_ac883:
		movswl %bx,%eax
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x56(%eax),%dl
		cmp    %edx,%ecx
		jl     jump_ac86e
	jump_ac89d:
		movswl %bx,%eax
		imul   $0xa8,%eax,%eax
		mov    things,%ebx
		mov    EXPORT_SYMBOL(sthings),%esi
		mov    0x2(%ebx,%eax,1),%bx
		jmp    jump_ac8c3
	jump_ac8b9:
		imul   $0x3c,%ecx,%ecx
		mov    %esi,%eax
		mov    0x2(%ecx,%eax,1),%bx
	jump_ac8c3:
		test   %bx,%bx
		jne    jump_ac8e6
	jump_ac8c8:
		mov    (%esp),%ebx
		add    $0x12,%ebp
		cmp    %ebx,%ebp
		je     jump_ac82b
	jump_ac8d6:
		mov    EXPORT_SYMBOL(game_my_big_map),%ebx
		mov    0x8(%ebx,%ebp,1),%bx
		test   %bx,%bx
		je     jump_ac8c8
	jump_ac8e6:
		movswl %bx,%ecx
		test   %ecx,%ecx
		jle    jump_ac8b9
		imul   $0xa8,%ecx,%eax
		mov    things,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x9(%eax),%dl
		mov    %esi,EXPORT_SYMBOL(sthings)
		cmp    $0x9,%edx
		jne    jump_ac89d
		mov    0x8(%eax),%al
		and    $0xff,%eax
		cmp    $0x15,%eax
		je     jump_ac89d
		mov    %edi,%ecx
		jmp    jump_ac883
	jump_ac91f:
		call   SCANNER_outline
		mov    $0x8ee,%edx
		xor    %ebx,%ebx
		mov    %edx,0x10(%esp)
		mov    %ebx,0x24(%esp)
		xor    %ebp,%ebp
		jmp    jump_ac965
	jump_ac937:
		mov    0x10(%esp),%ecx
		mov    0x24(%esp),%edi
		mov    %esi,EXPORT_SYMBOL(sthings)
		add    $0x900,%ecx
		add    $0x900,%edi
		mov    %ecx,0x10(%esp)
		mov    %edi,0x24(%esp)
		cmp    $0x47700,%edi
		je     jump_ac9ee
	jump_ac965:
		mov    0x24(%esp),%edi
		mov    0x10(%esp),%eax
		mov    EXPORT_SYMBOL(sthings),%esi
		mov    %eax,0x28(%esp)
		add    %ebp,%edi
		jmp    jump_ac995
	jump_ac97b:
		imul   $0x3c,%eax,%eax
		mov    %esi,%edx
	jump_ac980:
		mov    0x2(%edx,%eax,1),%dx
		test   %dx,%dx
		jne    jump_ac9a4
	jump_ac98a:
		mov    0x28(%esp),%edx
		add    $0x12,%edi
		cmp    %edx,%edi
		je     jump_ac937
	jump_ac995:
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		mov    0x8(%edi,%eax,1),%dx
		test   %dx,%dx
		je     jump_ac98a
	jump_ac9a4:
		movswl %dx,%eax
		test   %eax,%eax
		jle    jump_ac97b
		imul   $0xa8,%eax,%ecx
		mov    things,%ebx
		add    %ebx,%ecx
		xor    %ebx,%ebx
		mov    0x9(%ecx),%bl
		mov    %esi,EXPORT_SYMBOL(sthings)
		cmp    $0x9,%ebx
		jne    jump_ac9d8
		xor    %ebx,%ebx
		mov    0x8(%ecx),%bl
		cmp    $0x15,%ebx
		jne    jump_ac9d8
		call   SCANNER_draw_road
	jump_ac9d8:
		movswl %dx,%edx
		imul   $0xa8,%edx,%edx
		mov    things,%eax
		mov    EXPORT_SYMBOL(sthings),%esi
		jmp    jump_ac980
	jump_ac9ee:
		add    $0x34,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_SCANNER_draw_mark_point5_blink4)	/* 0x0ACA48 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    %eax,%ecx
		mov    %edx,%esi
		mov    %bl,0x4(%esp)
		mov    gameturn,%eax
		and    $0x3,%eax
		cmp    $0x1,%eax
		jb     jump_acc1f
		inc    %edx
		mov    %edx,(%esp)
		lea    -0x1(%esi),%edx
		cmp    $0x1,%eax
		jbe    jump_aca90
		cmp    $0x2,%eax
		je     jump_acac5
		jmp    jump_acc27
	jump_aca7e:
		xor    %ebx,%ebx
		mov    %ecx,%eax
		mov    0x4(%esp),%bl
		call   ac_LbDrawPixel
		jmp    jump_acc27
	jump_aca90:
		movzbl %bl,%edi
		mov    %ecx,%eax
		mov    %edi,%ebx
		call   ac_LbDrawPixel
		mov    (%esp),%edx
		mov    %edi,%ebx
		mov    %ecx,%eax
		call   ac_LbDrawPixel
		lea    -0x1(%ecx),%eax
		mov    %edi,%ebx
		mov    %esi,%edx
		call   ac_LbDrawPixel
		lea    0x1(%ecx),%eax
		mov    %edi,%ebx
		mov    %esi,%edx
		call   ac_LbDrawPixel
		jmp    jump_acc27
	jump_acac5:
		mov    ingame__Scanner__X1,%eax # ingame.Scanner.X1
		inc    %eax
		cmp    %eax,%ecx
		jle    jump_acaf5
		movzbl %bl,%ebp
		lea    -0x2(%ecx),%edi
		mov    %ebp,%ebx
		mov    %edi,%eax
		call   ac_LbDrawPixel
		mov    %ebp,%ebx
		mov    %esi,%edx
		mov    %edi,%eax
		call   ac_LbDrawPixel
		mov    (%esp),%edx
		mov    %ebp,%ebx
		mov    %edi,%eax
		call   ac_LbDrawPixel
	jump_acaf5:
		mov    ingame__Scanner__Y2,%eax
		sub    $0x2,%eax
		cmp    %eax,%esi
		jge    jump_acb2c
		movzbl 0x4(%esp),%ebp
		lea    0x2(%esi),%edi
		lea    -0x1(%ecx),%eax
		mov    %ebp,%ebx
		mov    %edi,%edx
		call   ac_LbDrawPixel
		mov    %ebp,%ebx
		mov    %edi,%edx
		mov    %ecx,%eax
		call   ac_LbDrawPixel
		lea    0x1(%ecx),%eax
		mov    %ebp,%ebx
		mov    %edi,%edx
		call   ac_LbDrawPixel
	jump_acb2c:
		mov    ingame__Scanner__Y1,%ebx
		mov    %esi,%edx
		sub    %ebx,%edx
		shl    $0x2,%edx
		mov    ingame__Scanner__X1,%eax # ingame.Scanner.X1
		add    ingame__Scanner__Width(%edx),%eax
		cmp    %eax,%ecx
		jge    jump_acb87
		mov    ingame__Scanner__X1,%eax # ingame.Scanner.X1
		add    ingame__Scanner__Brightness(%edx),%eax
		cmp    %eax,%ecx
		jge    jump_acb68
		lea    -0x1(%esi),%edx
		xor    %ebx,%ebx
		lea    0x2(%ecx),%eax
		mov    0x4(%esp),%bl
		call   ac_LbDrawPixel
	jump_acb68:
		movzbl 0x4(%esp),%ebp
		lea    0x2(%ecx),%edi
		mov    %esi,%edx
		mov    %ebp,%ebx
		mov    %edi,%eax
		call   ac_LbDrawPixel
		lea    0x1(%esi),%edx
		mov    %ebp,%ebx
		mov    %edi,%eax
		call   ac_LbDrawPixel
	jump_acb87:
		mov    ingame__Scanner__Y1,%eax
		inc    %eax
		cmp    %eax,%esi
		jle    jump_acc27
		mov    ingame__Scanner__Y1,%eax
		mov    %esi,%edx
		sub    %eax,%edx
		mov    ingame__Scanner__X1,%eax # ingame.Scanner.X1
		add    ingame__Scanner__Contrast(,%edx,4),%eax
		add    $0x2,%eax
		cmp    %eax,%ecx
		jge    jump_acbc2
		lea    -0x2(%esi),%edx
		xor    %ebx,%ebx
		lea    -0x1(%ecx),%eax
		mov    0x4(%esp),%bl
		call   ac_LbDrawPixel
	jump_acbc2:
		mov    ingame__Scanner__Y1,%edi
		mov    %esi,%edx
		sub    %edi,%edx
		mov    ingame__Scanner__X1,%eax # ingame.Scanner.X1
		add    ingame__Scanner__Contrast(,%edx,4),%eax
		inc    %eax
		cmp    %eax,%ecx
		jge    jump_acbed
		lea    -0x2(%esi),%edx
		xor    %ebx,%ebx
		mov    %ecx,%eax
		mov    0x4(%esp),%bl
		call   ac_LbDrawPixel
	jump_acbed:
		mov    ingame__Scanner__Y1,%eax
		mov    %esi,%edx
		sub    %eax,%edx
		mov    ingame__Scanner__X1,%eax # ingame.Scanner.X1
		add    ingame__Scanner__Contrast(,%edx,4),%eax
		cmp    %eax,%ecx
		jge    jump_acc27
		lea    -0x2(%esi),%edx
		xor    %ebx,%ebx
		lea    0x1(%ecx),%eax
		mov    0x4(%esp),%bl
		call   ac_LbDrawPixel
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_acc1f:
		test   %eax,%eax
		je     jump_aca7e
	jump_acc27:
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_SCANNER_draw_mark_point7)	/* 0x0ACC30 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    %eax,%esi
		mov    %edx,%ecx
		mov    %bl,(%esp)
		mov    ingame__Scanner__X1,%eax # ingame.Scanner.X1
		add    $0x2,%eax
		cmp    %eax,%esi
		jle    jump_acc88
		cmp    ingame__Scanner__Y1,%ecx
		jle    jump_acc62
		lea    -0x2(%ecx),%edx
		xor    %ebx,%ebx
		lea    -0x3(%esi),%eax
		mov    (%esp),%bl
		call   ac_LbDrawPixel
	jump_acc62:
		movzbl (%esp),%ebp
		lea    -0x3(%esi),%edi
		mov    %ecx,%edx
		mov    %ebp,%ebx
		mov    %edi,%eax
		call   ac_LbDrawPixel
		cmp    ingame__Scanner__Y2,%ecx
		jge    jump_acc88
		lea    0x2(%ecx),%edx
		mov    %ebp,%ebx
		mov    %edi,%eax
		call   ac_LbDrawPixel
	jump_acc88:
		mov    ingame__Scanner__Y2,%eax
		sub    $0x2,%eax
		cmp    %eax,%ecx
		jge    jump_accea
		cmp    ingame__Scanner__X1,%esi # ingame.Scanner.X1
		jle    jump_accac
		lea    0x3(%ecx),%edx
		xor    %ebx,%ebx
		lea    -0x2(%esi),%eax
		mov    (%esp),%bl
		call   ac_LbDrawPixel
	jump_accac:
		movzbl (%esp),%ebp
		lea    0x3(%ecx),%edi
		mov    %esi,%eax
		mov    %ebp,%ebx
		mov    %edi,%edx
		call   ac_LbDrawPixel
		mov    ingame__Scanner__Y1,%edx
		mov    %ecx,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		mov    ingame__Scanner__X1,%eax # ingame.Scanner.X1
		add    ingame__Scanner__Width+0x0C(%edx),%eax
		cmp    %eax,%esi
		jge    jump_accea
		lea    0x2(%esi),%eax
		mov    %ebp,%ebx
		mov    %edi,%edx
		call   ac_LbDrawPixel
	jump_accea:
		mov    ingame__Scanner__Y1,%edi
		mov    %ecx,%eax
		sub    %edi,%eax
		shl    $0x2,%eax
		mov    ingame__Scanner__X1,%edi # ingame.Scanner.X1
		add    ingame__Scanner__Width(%eax),%edi
		dec    %edi
		cmp    %edi,%esi
		jge    jump_acd61
		mov    ingame__Scanner__Y1,%edx
		inc    %edx
		cmp    %edx,%ecx
		jle    jump_acd36
		mov    ingame__Scanner__X1,%edi # ingame.Scanner.X1
		add    ingame__Scanner__Contrast(%eax),%edi
		lea    -0x2(%edi),%eax
		cmp    %eax,%esi
		jge    jump_acd36
		lea    -0x2(%ecx),%edx
		xor    %ebx,%ebx
		lea    0x3(%esi),%eax
		mov    (%esp),%bl
		call   ac_LbDrawPixel
	jump_acd36:
		mov    ingame__Scanner__Y1,%ebx
		mov    %ecx,%eax
		sub    %ebx,%eax
		mov    ingame__Scanner__X1,%edi # ingame.Scanner.X1
		add    ingame__Scanner__Width(,%eax,4),%edi
		dec    %edi
		cmp    %edi,%esi
		jge    jump_acd61
		lea    0x3(%esi),%eax
		xor    %ebx,%ebx
		mov    %ecx,%edx
		mov    (%esp),%bl
		call   ac_LbDrawPixel
	jump_acd61:
		cmp    ingame__Scanner__Y2,%ecx
		jge    jump_acd95
		mov    ingame__Scanner__Y1,%edx
		mov    %ecx,%eax
		sub    %edx,%eax
		mov    ingame__Scanner__X1,%edi # ingame.Scanner.X1
		add    ingame__Scanner__Width+0x08(,%eax,4),%edi
		dec    %edi
		cmp    %edi,%esi
		jge    jump_acd95
		lea    0x2(%ecx),%edx
		xor    %ebx,%ebx
		lea    0x3(%esi),%eax
		mov    (%esp),%bl
		call   ac_LbDrawPixel
	jump_acd95:
		mov    ingame__Scanner__Y1,%eax
		add    $0x2,%eax
		cmp    %eax,%ecx
		jle    jump_ace0e
		cmp    ingame__Scanner__X1,%esi # ingame.Scanner.X1
		jle    jump_acdb9
		lea    -0x3(%ecx),%edx
		xor    %ebx,%ebx
		lea    -0x2(%esi),%eax
		mov    (%esp),%bl
		call   ac_LbDrawPixel
	jump_acdb9:
		mov    ingame__Scanner__Y1,%ebp
		mov    %ecx,%eax
		sub    %ebp,%eax
		mov    ingame__Scanner__X1,%edi # ingame.Scanner.X1
		add    ingame__Scanner__Angle(,%eax,4),%edi
		cmp    %edi,%esi
		jg     jump_acde3
		lea    -0x3(%ecx),%edx
		xor    %ebx,%ebx
		mov    %esi,%eax
		mov    (%esp),%bl
		call   ac_LbDrawPixel
	jump_acde3:
		mov    ingame__Scanner__Y1,%ebx
		mov    %ecx,%eax
		sub    %ebx,%eax
		mov    ingame__Scanner__X1,%edi # ingame.Scanner.X1
		add    ingame__Scanner__Angle(,%eax,4),%edi
		cmp    %edi,%esi
		jge    jump_ace0e
		lea    -0x3(%ecx),%edx
		xor    %ebx,%ebx
		lea    0x2(%esi),%eax
		mov    (%esp),%bl
		call   ac_LbDrawPixel
	jump_ace0e:
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_SCANNER_process_bbpoints)	/* 0x0ACE64 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		xor    %edi,%edi
		xor    %esi,%esi
		mov    %edi,(%esp)
		jmp    jump_ace8f
	jump_ace76:
		mov    (%esp),%ebx
		add    $0xc,%esi
		add    $0x80,%ebx
		inc    %edi
		mov    %ebx,(%esp)
		cmp    $0x10,%edi
		jge    jump_acf81
	jump_ace8f:
		cmpb   $0x0,ingame__Scanner__BigBlip_0__Period(%esi)
		je     jump_ace76
		mov    ingame__Scanner__BigBlip_0__Counter(%esi),%dl
		inc    %dl
		mov    %edi,%ebx
		mov    %dl,ingame__Scanner__BigBlip_0__Counter(%esi)
		shl    $0x7,%ebx
		mov    ingame__Scanner__BigBlip_0__Period(%esi),%dh
		lea    0x80(%ebx),%ecx
		cmp    %dh,%dl
		jne    jump_acef5
		cmp    $0xf,%edi
		jne    jump_aceca
		xor    %dh,%dl
		mov    %dl,ingame__Scanner__BigBlip_0__Period(%esi)
		jmp    jump_acf2c
	jump_aceca:
		mov    %esi,%ebp
		mov    %ebx,%eax
		mov    %ecx,%edx
		cmp    %ecx,%ebx
		je     jump_acf20
		mov    ingame__Scanner__BigBlip_0__Z(%esi),%ecx
		mov    ingame__Scanner__BigBlip_0__X(%esi),%ebx
	jump_acee0:
		add    $0x8,%eax
		mov    %ecx,EXPORT_SYMBOL(SCANNER_bbpoint)-8(%eax)
		mov    %ebx,EXPORT_SYMBOL(SCANNER_colour)+4(%eax)
		cmp    %edx,%eax
		jne    jump_acee0
		jmp    jump_acf20
	jump_acef5:
		jbe    jump_acf2c
		mov    %esi,%ebp
		mov    %ebx,%eax
		mov    %ecx,%edx
		cmp    %ecx,%ebx
		je     jump_acf20
		mov    ingame__Scanner__BigBlip_0__Z(%esi),%ebx
		mov    ingame__Scanner__BigBlip_0__X(%esi),%ecx
	jump_acf0d:
		add    $0x8,%eax
		mov    %ebx,EXPORT_SYMBOL(SCANNER_bbpoint)-8(%eax)
		mov    %ecx,EXPORT_SYMBOL(SCANNER_colour)+4(%eax)
		cmp    %edx,%eax
		jne    jump_acf0d
	jump_acf20:
		mov    ingame__Scanner__BigBlip_0__Period(%ebp),%al
		sub    %al,ingame__Scanner__BigBlip_0__Counter(%ebp)
	jump_acf2c:
		mov    (%esp),%eax
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    ingame__Scanner__BigBlip_0__Speed(%esi),%bl
	jump_acf39:
		mov    %bl,%cl
		mov    data_1dbaec(%edx),%ebp
		shl    %cl,%ebp
		mov    %ebp,%ecx
		mov    EXPORT_SYMBOL(SCANNER_bbpoint)(%eax),%ebp
		add    %ecx,%ebp
		mov    %bl,%cl
		mov    %ebp,EXPORT_SYMBOL(SCANNER_bbpoint)(%eax)
		mov    data_1dbaf0(%edx),%ebp
		shl    %cl,%ebp
		mov    %ebp,%ecx
		mov    data_1db2f0(%eax),%ebp
		add    $0x8,%eax
		add    %ecx,%ebp
		add    $0x8,%edx
		mov    %ebp,EXPORT_SYMBOL(SCANNER_colour)+4(%eax)
		cmp    $0x80,%edx
		je     jump_ace76
		jmp    jump_acf39
	jump_acf81:
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_SCANNER_find_position)	/* 0x0AD188 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x34,%esp
		mov    %eax,%esi
		mov    %edx,%edi
		mov    ingame__Scanner__X1,%eax # ingame.Scanner.X1
		mov    %eax,0x10(%esp)
		mov    ingame__Scanner__Y1,%eax
		mov    %eax,0x14(%esp)
		mov    ingame__Scanner__X2,%eax
		mov    %eax,0x18(%esp)
		mov    ingame__Scanner__Y2,%eax
		mov    %eax,0x1c(%esp)
		mov    ingame__Scanner__MZ,%eax
		mov    %eax,0x20(%esp)
		mov    ingame__Scanner__MX,%eax
		mov    %eax,0x24(%esp)
		mov    ingame__Scanner__Zoom,%eax
		mov    %eax,0x28(%esp)
		mov    ingame__Scanner__Angle,%edx
		mov    0x28(%esp),%ebp
		mov    EXPORT_SYMBOL(lbSinTable)(,%edx,4),%eax
		imul   %ebp,%eax
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%edx,4),%edx
		imul   %ebp,%edx
		mov    0x18(%esp),%ebp
		sub    0x10(%esp),%ebp
		sar    %ebp
		mov    %ebp,(%esp)
		mov    0x1c(%esp),%ebp
		sub    0x14(%esp),%ebp
		sar    %ebp
		mov    %ebp,0x4(%esp)
		mov    0x20(%esp),%ebp
		shl    $0x10,%ebp
		mov    %ebp,0x8(%esp)
		mov    0x24(%esp),%ebp
		shl    $0x10,%ebp
		sar    $0x8,%eax
		mov    %ebp,0xc(%esp)
		mov    (%esp),%ebp
		imul   %eax,%ebp
		sar    $0x8,%edx
		sub    %ebp,0x8(%esp)
		mov    (%esp),%ebp
		imul   %edx,%ebp
		sub    %ebp,0xc(%esp)
		mov    0x4(%esp),%ebp
		imul   %edx,%ebp
		add    %ebp,0x8(%esp)
		mov    0x4(%esp),%ebp
		imul   %eax,%ebp
		sub    %ebp,0xc(%esp)
		sub    0x10(%esp),%esi
		sub    0x14(%esp),%edi
		mov    %esi,%ebp
		imul   %eax,%ebp
		imul   %edi,%eax
		mov    %ebp,0x2c(%esp)
		mov    0x8(%esp),%ebp
		add    0x2c(%esp),%ebp
		mov    %ebp,0x2c(%esp)
		mov    %edi,%ebp
		imul   %edx,%ebp
		imul   %esi,%edx
		mov    %ebp,0x30(%esp)
		mov    0x2c(%esp),%ebp
		mov    0xc(%esp),%esi
		sub    0x30(%esp),%ebp
		add    %esi,%edx
		mov    %ebp,(%ebx)
		add    %eax,%edx
		mov    %edx,(%ecx)
		shll   $0x7,(%ebx)
		shll   $0x7,(%ecx)
		mov    (%ebx),%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		mov    %eax,(%ebx)
		mov    (%ecx),%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		mov    %eax,(%ecx)
		sarl   $0x8,(%ebx)
		sarl   $0x8,(%ecx)
		add    $0x34,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret

vtable_ad2c8:
		.long   func_ad485
		.long   func_ad60c
		.long   func_ad669
		.long   func_ad914
		.long   func_ad6ca
		.long   func_ad788
		.long   func_ad7e9
		.long   func_ad914
		.long   func_ad727
		.long   func_ad84e
		.long   func_ad8b0

/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_SCANNER_unkn_func_196)	/* 0xAD2F4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x74,%esp
		call   ac_SCANNER_process_bbpoints
		mov    ingame__Scanner__Angle,%eax
		mov    EXPORT_SYMBOL(lbSinTable)(,%eax,4),%eax
		mov    %eax,0x68(%esp)
		mov    ingame__Scanner__Angle,%eax
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%eax,4),%eax
		mov    ingame__Scanner__Zoom,%edx
		mov    %eax,0x6c(%esp)
		mov    0x68(%esp),%eax
		imul   %edx,%eax
		mov    %eax,0x68(%esp)
		mov    0x6c(%esp),%eax
		imul   %edx,%eax
		mov    0x68(%esp),%ecx
		mov    ingame__Scanner__X1,%edi # ingame.Scanner.X1
		sar    $0x8,%ecx
		mov    ingame__Scanner__X2,%edx
		mov    %ecx,0x68(%esp)
		sub    %edi,%edx
		mov    0x68(%esp),%ebx
		sar    %edx
		imul   %edx,%ebx
		mov    %eax,%esi
		mov    %eax,0x6c(%esp)
		sar    $0x8,%esi
		mov    %esi,0x6c(%esp)
		mov    0x6c(%esp),%edi
		imul   %edx,%edi
		mov    ingame__Scanner__Y1,%ebp
		mov    ingame__Scanner__Y2,%eax
		mov    ingame__Scanner__MX,%esi
		sub    %ebp,%eax
		shl    $0x10,%esi
		mov    0x6c(%esp),%ebp
		mov    %esi,%edx
		sar    %eax
		sub    %edi,%edx
		mov    %eax,(%esp)
		mov    %edx,0x14(%esp)
		mov    (%esp),%edx
		imul   %ebp,%edx
		mov    ingame__Scanner__MZ,%ecx
		shl    $0x10,%ecx
		mov    %ecx,%eax
		sub    %ebx,%eax
		add    %edx,%eax
		mov    0x68(%esp),%ebp
		mov    %eax,0xc(%esp)
		mov    (%esp),%eax
		imul   %ebp,%eax
		mov    0x14(%esp),%ebp
		sub    %eax,%ebp
		mov    %ebp,0x50(%esp)
		lea    (%esi,%edi,1),%ebp
		sub    %eax,%ebp
		mov    0x68(%esp),%eax
		mov    %eax,EXPORT_SYMBOL(SCANNER_dw064)
		mov    0x6c(%esp),%eax
		mov    %eax,EXPORT_SYMBOL(SCANNER_dw068)
		mov    0x68(%esp),%eax
		shl    $0x10,%eax
		mov    %eax,EXPORT_SYMBOL(SCANNER_dw07C)
		mov    0x6c(%esp),%eax
		shl    $0x10,%eax
		mov    %eax,EXPORT_SYMBOL(SCANNER_dw080)
		mov    0x68(%esp),%eax
		sar    $0x10,%eax
		mov    %al,EXPORT_SYMBOL(SCANNER_bt084)
		mov    0x6c(%esp),%eax
		add    %ecx,%ebx
		sar    $0x10,%eax
		add    %ebx,%edx
		mov    %al,EXPORT_SYMBOL(SCANNER_bt085)
		mov    ingame__Scanner__Y1,%eax
		mov    ingame__Scanner__X1,%ebx # ingame.Scanner.X1
		mov    %eax,0x40(%esp)
		mov    EXPORT_SYMBOL(lbDisplay)+4,%eax # lbDisplay.WScreen
		mov    EXPORT_SYMBOL(lbDisplay)+24,%ecx # lbDisplay.PhysicalScreenWidth
		add    %eax,%ebx
		mov    0x40(%esp),%eax
		imul   %ecx,%eax
		add    %eax,%ebx
		mov    0xc(%esp),%eax
		mov    %eax,0x34(%esp)
		mov    0x50(%esp),%eax
		mov    %edx,0x48(%esp)
		mov    %eax,0x2c(%esp)
		mov    SCANNER_width,%eax
		mov    ingame__Scanner__Y2,%esi
		mov    %eax,0x28(%esp)
		mov    0x40(%esp),%eax
		mov    %ebx,0x3c(%esp)
		cmp    %esi,%eax
		jmp    jump_ad973
	jump_ad466:
		test   %ecx,%eax
		je     jump_adac7
		mov    EXPORT_SYMBOL(SCANNER_dw074),%ebx
		mov    EXPORT_SYMBOL(SCANNER_screenptr),%eax
		xor    %edx,%edx
		call   ac_memset
		jmp    func_ad914


/*----------------------------------------------------------------*/
func_ad485:
/*----------------------------------------------------------------*/
		mov    $0xfffffff,%esi
		mov    %esi,%edi
		test   $0x1,%cl
		je     jump_ad4ad
		mov    EXPORT_SYMBOL(SCANNER_dw064),%ebx
		mov    EXPORT_SYMBOL(SCANNER_dw06C),%edx
		mov    %edx,%eax
		shl    $0x10,%eax
		sar    $0x10,%edx
		idiv   %ebx
		mov    %eax,%edi
		neg    %edi
		jmp    jump_ad4d1
	jump_ad4ad:
		test   $0x2,%cl
		je     jump_ad4d4
		mov    $0x1000000,%edx
		mov    EXPORT_SYMBOL(SCANNER_dw06C),%edi
		mov    EXPORT_SYMBOL(SCANNER_dw064),%ebx
		sub    %edi,%edx
		mov    %edx,%eax
		shl    $0x10,%eax
		sar    $0x10,%edx
		idiv   %ebx
		mov    %eax,%edi
	jump_ad4d1:
		sar    $0x10,%edi
	jump_ad4d4:
		test   $0x4,%cl
		je     jump_ad4f5
		mov    EXPORT_SYMBOL(SCANNER_dw068),%ebx
		mov    EXPORT_SYMBOL(SCANNER_dw070),%edx
		mov    %edx,%eax
		shl    $0x10,%eax
		sar    $0x10,%edx
		idiv   %ebx
		mov    %eax,%esi
		neg    %esi
		jmp    jump_ad518
	jump_ad4f5:
		test   $0x8,%cl
		je     jump_ad51b
		mov    $0x1000000,%edx
		mov    EXPORT_SYMBOL(SCANNER_dw070),%eax
		mov    EXPORT_SYMBOL(SCANNER_dw068),%ebx
		sub    %eax,%edx
		mov    %edx,%eax
		shl    $0x10,%eax
		sar    $0x10,%edx
		idiv   %ebx
		mov    %eax,%esi
	jump_ad518:
		sar    $0x10,%esi
	jump_ad51b:
		mov    EXPORT_SYMBOL(SCANNER_dw074),%ebx
		cmp    %ebx,%esi
		jge    jump_ad529
		mov    %esi,%eax
		jmp    jump_ad52b
	jump_ad529:
		mov    %ebx,%eax
	jump_ad52b:
		cmp    %eax,%edi
		jge    jump_ad533
		mov    %edi,%eax
		jmp    jump_ad543
	jump_ad533:
		mov    EXPORT_SYMBOL(SCANNER_dw074),%edx
		cmp    %edx,%esi
		jge    jump_ad541
		mov    %esi,%eax
		jmp    jump_ad543
	jump_ad541:
		mov    %edx,%eax
	jump_ad543:
		mov    %eax,EXPORT_SYMBOL(SCANNER_dw074)
		sub    %eax,%ebx
		test   %eax,%eax
		jle    jump_ad5e7
		cmp    $0x190,%eax
		jg     jump_ad5e7
		pusha
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(SCANNER_dw06C),%eax
		mov    EXPORT_SYMBOL(SCANNER_dw070),%edx
		rol    $0x10,%eax
		rol    $0x10,%edx
		mov    %al,%bh
		mov    %dl,%bl
		mov    %eax,%ecx
		mov    %edx,%ebp
		and    $0xffff0000,%ecx
		and    $0xffff0000,%ebp
		mov    EXPORT_SYMBOL(SCANNER_bt084),%dl
		mov    EXPORT_SYMBOL(SCANNER_bt085),%dh
		mov    EXPORT_SYMBOL(SCANNER_dw07C),%eax
		mov    EXPORT_SYMBOL(SCANNER_screenptr),%edi
		mov    EXPORT_SYMBOL(SCANNER_dw074),%esi
	jump_ad5a2:
		mov    EXPORT_SYMBOL(SCANNER_data)(%ebx),%al
		mov    %al,(%edi)
		inc    %edi
		add    EXPORT_SYMBOL(SCANNER_dw07C),%ecx
		adc    %dl,%bh
		add    EXPORT_SYMBOL(SCANNER_dw080),%ebp
		adc    %dh,%bl
		dec    %esi
		jne    jump_ad5a2
		mov    %ecx,%eax
		mov    %bh,%al
		xor    %ah,%ah
		rol    $0x10,%eax
		mov    %eax,EXPORT_SYMBOL(SCANNER_dw06C)
		mov    %ebp,%eax
		mov    %bl,%al
		xor    %ah,%ah
		rol    $0x10,%eax
		mov    %eax,EXPORT_SYMBOL(SCANNER_dw070)
		mov    %edi,EXPORT_SYMBOL(SCANNER_screenptr)
		mov    %esi,EXPORT_SYMBOL(SCANNER_dw074)
		popa
	jump_ad5e7:
		test   %ebx,%ebx
		jle    func_ad914
		cmp    $0x190,%ebx
		jg     func_ad914
		mov    EXPORT_SYMBOL(SCANNER_screenptr),%eax
		xor    %edx,%edx
		call   ac_memset
		jmp    func_ad914


/*----------------------------------------------------------------*/
func_ad60c:
/*----------------------------------------------------------------*/
		pusha
		mov    EXPORT_SYMBOL(SCANNER_dw06C),%ecx
		mov    EXPORT_SYMBOL(SCANNER_dw070),%ebp
		mov    EXPORT_SYMBOL(SCANNER_screenptr),%edi
		mov    EXPORT_SYMBOL(SCANNER_dw074),%esi
		mov    EXPORT_SYMBOL(SCANNER_dw064),%eax
		mov    EXPORT_SYMBOL(SCANNER_dw068),%edx
	jump_ad630:
		or     %ecx,%ecx
		jns    jump_ad63f
		movb   $0x0,(%edi)
		inc    %edi
		add    %eax,%ecx
		add    %edx,%ebp
		dec    %esi
		jne    jump_ad630
	jump_ad63f:
		mov    %ecx,EXPORT_SYMBOL(SCANNER_dw06C)
		mov    %ebp,EXPORT_SYMBOL(SCANNER_dw070)
		mov    %edi,EXPORT_SYMBOL(SCANNER_screenptr)
		mov    %esi,EXPORT_SYMBOL(SCANNER_dw074)
		popa
		cmp    EXPORT_SYMBOL(SCANNER_dw074),%ebx
		jne    jump_ad9eb
		jmp    func_ad914


/*----------------------------------------------------------------*/
func_ad669:
/*----------------------------------------------------------------*/
		pusha
		mov    EXPORT_SYMBOL(SCANNER_dw06C),%ecx
		mov    EXPORT_SYMBOL(SCANNER_dw070),%ebp
		mov    EXPORT_SYMBOL(SCANNER_screenptr),%edi
		mov    EXPORT_SYMBOL(SCANNER_dw074),%esi
		mov    EXPORT_SYMBOL(SCANNER_dw064),%eax
		mov    EXPORT_SYMBOL(SCANNER_dw068),%edx
	jump_ad68d:
		cmp    $0x1000000,%ecx
		jl     jump_ad6a0
		movb   $0x0,(%edi)
		inc    %edi
		add    %eax,%ecx
		add    %edx,%ebp
		dec    %esi
		jne    jump_ad68d
	jump_ad6a0:
		mov    %ecx,EXPORT_SYMBOL(SCANNER_dw06C)
		mov    %ebp,EXPORT_SYMBOL(SCANNER_dw070)
		mov    %edi,EXPORT_SYMBOL(SCANNER_screenptr)
		mov    %esi,EXPORT_SYMBOL(SCANNER_dw074)
		popa
		cmp    EXPORT_SYMBOL(SCANNER_dw074),%ebx
		jne    jump_ad9eb
		jmp    func_ad914


/*----------------------------------------------------------------*/
func_ad6ca:
/*----------------------------------------------------------------*/
		pusha
		mov    EXPORT_SYMBOL(SCANNER_dw06C),%ecx
		mov    EXPORT_SYMBOL(SCANNER_dw070),%ebp
		mov    EXPORT_SYMBOL(SCANNER_screenptr),%edi
		mov    EXPORT_SYMBOL(SCANNER_dw074),%esi
		mov    EXPORT_SYMBOL(SCANNER_dw064),%eax
		mov    EXPORT_SYMBOL(SCANNER_dw068),%edx
	jump_ad6ee:
		or     %ebp,%ebp
		jns    jump_ad6fd
		movb   $0x0,(%edi)
		inc    %edi
		add    %eax,%ecx
		add    %edx,%ebp
		dec    %esi
		jne    jump_ad6ee
	jump_ad6fd:
		mov    %ecx,EXPORT_SYMBOL(SCANNER_dw06C)
		mov    %ebp,EXPORT_SYMBOL(SCANNER_dw070)
		mov    %edi,EXPORT_SYMBOL(SCANNER_screenptr)
		mov    %esi,EXPORT_SYMBOL(SCANNER_dw074)
		popa
		cmp    EXPORT_SYMBOL(SCANNER_dw074),%ebx
		jne    jump_ad9eb
		jmp    func_ad914


/*----------------------------------------------------------------*/
func_ad727:
/*----------------------------------------------------------------*/
		pusha
		mov    EXPORT_SYMBOL(SCANNER_dw06C),%ecx
		mov    EXPORT_SYMBOL(SCANNER_dw070),%ebp
		mov    EXPORT_SYMBOL(SCANNER_screenptr),%edi
		mov    EXPORT_SYMBOL(SCANNER_dw074),%esi
		mov    EXPORT_SYMBOL(SCANNER_dw064),%eax
		mov    EXPORT_SYMBOL(SCANNER_dw068),%edx
	jump_ad74b:
		cmp    $0x1000000,%ebp
		jl     jump_ad75e
		movb   $0x0,(%edi)
		inc    %edi
		add    %eax,%ecx
		add    %edx,%ebp
		dec    %esi
		jne    jump_ad74b
	jump_ad75e:
		mov    %ecx,EXPORT_SYMBOL(SCANNER_dw06C)
		mov    %ebp,EXPORT_SYMBOL(SCANNER_dw070)
		mov    %edi,EXPORT_SYMBOL(SCANNER_screenptr)
		mov    %esi,EXPORT_SYMBOL(SCANNER_dw074)
		popa
		cmp    EXPORT_SYMBOL(SCANNER_dw074),%ebx
		jne    jump_ad9eb
		jmp    func_ad914


/*----------------------------------------------------------------*/
func_ad788:
/*----------------------------------------------------------------*/
		pusha
		mov    EXPORT_SYMBOL(SCANNER_dw06C),%ecx
		mov    EXPORT_SYMBOL(SCANNER_dw070),%ebp
		mov    EXPORT_SYMBOL(SCANNER_screenptr),%edi
		mov    EXPORT_SYMBOL(SCANNER_dw074),%esi
		mov    EXPORT_SYMBOL(SCANNER_dw064),%eax
		mov    EXPORT_SYMBOL(SCANNER_dw068),%edx
	jump_ad7ac:
		or     %ecx,%ecx
		jns    jump_ad7bf
		or     %ebp,%ebp
		jns    jump_ad7bf
		movb   $0x0,(%edi)
		inc    %edi
		add    %eax,%ecx
		add    %edx,%ebp
		dec    %esi
		jne    jump_ad7ac
	jump_ad7bf:
		mov    %ecx,EXPORT_SYMBOL(SCANNER_dw06C)
		mov    %ebp,EXPORT_SYMBOL(SCANNER_dw070)
		mov    %edi,EXPORT_SYMBOL(SCANNER_screenptr)
		mov    %esi,EXPORT_SYMBOL(SCANNER_dw074)
		popa
		cmp    EXPORT_SYMBOL(SCANNER_dw074),%ebx
		jne    jump_ad9eb
		jmp    func_ad914


/*----------------------------------------------------------------*/
func_ad7e9:
/*----------------------------------------------------------------*/
		pusha
		mov    EXPORT_SYMBOL(SCANNER_dw06C),%ecx
		mov    EXPORT_SYMBOL(SCANNER_dw070),%ebp
		mov    EXPORT_SYMBOL(SCANNER_screenptr),%edi
		mov    EXPORT_SYMBOL(SCANNER_dw074),%esi
		mov    EXPORT_SYMBOL(SCANNER_dw064),%eax
		mov    EXPORT_SYMBOL(SCANNER_dw068),%edx
	jump_ad80d:
		cmp    $0x1000000,%ecx
		jl     jump_ad824
		or     %ebp,%ebp
		jns    jump_ad824
		movb   $0x0,(%edi)
		inc    %edi
		add    %eax,%ecx
		add    %edx,%ebp
		dec    %esi
		jne    jump_ad80d
	jump_ad824:
		mov    %ecx,EXPORT_SYMBOL(SCANNER_dw06C)
		mov    %ebp,EXPORT_SYMBOL(SCANNER_dw070)
		mov    %edi,EXPORT_SYMBOL(SCANNER_screenptr)
		mov    %esi,EXPORT_SYMBOL(SCANNER_dw074)
		popa
		cmp    EXPORT_SYMBOL(SCANNER_dw074),%ebx
		jne    jump_ad9eb
		jmp    func_ad914


/*----------------------------------------------------------------*/
func_ad84e:
/*----------------------------------------------------------------*/
		pusha
		mov    EXPORT_SYMBOL(SCANNER_dw06C),%ecx
		mov    EXPORT_SYMBOL(SCANNER_dw070),%ebp
		mov    EXPORT_SYMBOL(SCANNER_screenptr),%edi
		mov    EXPORT_SYMBOL(SCANNER_dw074),%esi
		mov    EXPORT_SYMBOL(SCANNER_dw064),%eax
		mov    EXPORT_SYMBOL(SCANNER_dw068),%edx
	jump_ad872:
		or     %ecx,%ecx
		jns    jump_ad889
		cmp    $0x1000000,%ebp
		jl     jump_ad889
		movb   $0x0,(%edi)
		inc    %edi
		add    %eax,%ecx
		add    %edx,%ebp
		dec    %esi
		jne    jump_ad872
	jump_ad889:
		mov    %ecx,EXPORT_SYMBOL(SCANNER_dw06C)
		mov    %ebp,EXPORT_SYMBOL(SCANNER_dw070)
		mov    %edi,EXPORT_SYMBOL(SCANNER_screenptr)
		mov    %esi,EXPORT_SYMBOL(SCANNER_dw074)
		popa
		cmp    EXPORT_SYMBOL(SCANNER_dw074),%ebx
		jne    jump_ad9eb
		jmp    func_ad914


/*----------------------------------------------------------------*/
func_ad8b0:
/*----------------------------------------------------------------*/
		pusha
		mov    EXPORT_SYMBOL(SCANNER_dw06C),%ecx
		mov    EXPORT_SYMBOL(SCANNER_dw070),%ebp
		mov    EXPORT_SYMBOL(SCANNER_screenptr),%edi
		mov    EXPORT_SYMBOL(SCANNER_dw074),%esi
		mov    EXPORT_SYMBOL(SCANNER_dw064),%eax
		mov    EXPORT_SYMBOL(SCANNER_dw068),%edx
	jump_ad8d4:
		cmp    $0x1000000,%ecx
		jl     jump_ad8ef
		cmp    $0x1000000,%ebp
		jl     jump_ad8ef
		movb   $0x0,(%edi)
		inc    %edi
		add    %eax,%ecx
		add    %edx,%ebp
		dec    %esi
		jne    jump_ad8d4
	jump_ad8ef:
		mov    %ecx,EXPORT_SYMBOL(SCANNER_dw06C)
		mov    %ebp,EXPORT_SYMBOL(SCANNER_dw070)
		mov    %edi,EXPORT_SYMBOL(SCANNER_screenptr)
		mov    %esi,EXPORT_SYMBOL(SCANNER_dw074)
		popa
		cmp    EXPORT_SYMBOL(SCANNER_dw074),%ebx
		jne    jump_ad9eb


/*----------------------------------------------------------------*/
func_ad914:
/*----------------------------------------------------------------*/
		mov    0x40(%esp),%edi
		mov    0x28(%esp),%eax
		mov    0x3c(%esp),%edx
		mov    0x34(%esp),%ebx
		mov    0x2c(%esp),%ecx
		mov    0x48(%esp),%esi
		inc    %edi
		add    $0x4,%eax
		mov    %edi,0x40(%esp)
		mov    %eax,0x28(%esp)
		mov    EXPORT_SYMBOL(lbDisplay)+24,%eax # lbDisplay.PhysicalScreenWidth
		mov    0x68(%esp),%edi
		add    %eax,%edx
		add    %edi,%ebp
		mov    0x6c(%esp),%eax
		mov    %edx,0x3c(%esp)
		mov    ingame__Scanner__Y2,%edx
		sub    %eax,%ebx
		mov    0x68(%esp),%eax
		mov    %ebx,0x34(%esp)
		add    %eax,%ecx
		mov    0x6c(%esp),%eax
		mov    %ecx,0x2c(%esp)
		sub    %eax,%esi
		mov    0x40(%esp),%eax
		mov    %esi,0x48(%esp)
		cmp    %edx,%eax
	jump_ad973:
		jg     jump_adad8
		mov    0x34(%esp),%eax
		mov    %eax,EXPORT_SYMBOL(SCANNER_dw06C)
		mov    0x2c(%esp),%eax
		mov    %eax,EXPORT_SYMBOL(SCANNER_dw070)
		mov    0x28(%esp),%eax
		mov    (%eax),%eax
		inc    %eax
		mov    %eax,EXPORT_SYMBOL(SCANNER_dw074)
		mov    0x3c(%esp),%eax
		mov    0x48(%esp),%edx
		mov    %eax,EXPORT_SYMBOL(SCANNER_screenptr)
		test   %edx,%edx
		setl   %al
		mov    0x48(%esp),%ebx
		xor    %edx,%edx
		xor    %ecx,%ecx
		mov    %al,%dl
		cmp    $0x1000000,%ebx
		setge  %al
		mov    %al,%cl
		add    %ecx,%ecx
		or     %edx,%ecx
		test   %ebp,%ebp
		setl   %al
		and    $0xff,%eax
		shl    $0x2,%eax
		or     %eax,%ecx
		cmp    $0x1000000,%ebp
		setge  %al
		and    $0xff,%eax
		shl    $0x3,%eax
		or     %eax,%ecx
		mov    $0x1000000,%esi
		xor    %ebx,%ebx
	jump_ad9eb:
		mov    EXPORT_SYMBOL(SCANNER_dw06C),%edi
		xor    %edx,%edx
		cmp    %edi,%ebx
		setg   %al
		mov    %al,%dl
		cmp    %edi,%esi
		setle  %al
		and    $0xff,%eax
		add    %eax,%eax
		mov    EXPORT_SYMBOL(SCANNER_dw070),%edi
		or     %edx,%eax
		cmp    %edi,%ebx
		setg   %dl
		and    $0xff,%edx
		shl    $0x2,%edx
		or     %edx,%eax
		cmp    %edi,%esi
		setle  %dl
		and    $0xff,%edx
		shl    $0x3,%edx
		or     %edx,%eax
		mov    %eax,%edx
		or     %ecx,%edx
		jne    jump_ad466
		pusha
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(SCANNER_dw06C),%eax
		mov    EXPORT_SYMBOL(SCANNER_dw070),%edx
		rol    $0x10,%eax
		rol    $0x10,%edx
		mov    %al,%bh
		mov    %dl,%bl
		mov    %eax,%ecx
		mov    %edx,%ebp
		and    $0xffff0000,%ecx
		and    $0xffff0000,%ebp
		mov    EXPORT_SYMBOL(SCANNER_bt084),%dl
		mov    EXPORT_SYMBOL(SCANNER_bt085),%dh
		mov    EXPORT_SYMBOL(SCANNER_dw07C),%eax
		mov    EXPORT_SYMBOL(SCANNER_screenptr),%edi
		mov    EXPORT_SYMBOL(SCANNER_dw074),%esi
	jump_ada7d:
		mov    EXPORT_SYMBOL(SCANNER_data)(%ebx),%al
		mov    %al,(%edi)
		inc    %edi
		add    EXPORT_SYMBOL(SCANNER_dw07C),%ecx
		adc    %dl,%bh
		add    EXPORT_SYMBOL(SCANNER_dw080),%ebp
		adc    %dh,%bl
		dec    %esi
		jne    jump_ada7d
		mov    %ecx,%eax
		mov    %bh,%al
		xor    %ah,%ah
		rol    $0x10,%eax
		mov    %eax,EXPORT_SYMBOL(SCANNER_dw06C)
		mov    %ebp,%eax
		mov    %bl,%al
		xor    %ah,%ah
		rol    $0x10,%eax
		mov    %eax,EXPORT_SYMBOL(SCANNER_dw070)
		mov    %edi,EXPORT_SYMBOL(SCANNER_screenptr)
		mov    %esi,EXPORT_SYMBOL(SCANNER_dw074)
		popa
		jmp    func_ad914
	jump_adac7:
		cmp    $0xa,%eax
		ja     func_ad914
		jmp    *%cs:vtable_ad2c8(,%eax,4)
	jump_adad8:
		mov    EXPORT_SYMBOL(lbDisplay)+40,%eax # lbDisplay.GraphicsWindowX
		mov    $0x80,%esi
		mov    %eax,0x24(%esp)
		mov    EXPORT_SYMBOL(lbDisplay)+44,%eax # lbDisplay.GraphicsWindowY
		mov    ingame__Scanner__X1,%ebx # ingame.Scanner.X1
		mov    %eax,0x1c(%esp)
		mov    EXPORT_SYMBOL(lbDisplay)+48,%eax # lbDisplay.GraphicsWindowWidth
		xor    %edi,%edi
		mov    %eax,0x18(%esp)
		mov    EXPORT_SYMBOL(lbDisplay)+52,%eax # lbDisplay.GraphicsWindowHeight
		mov    %esi,0x38(%esp)
		mov    %eax,0x20(%esp)
		mov    ingame__Scanner__X2,%eax
		mov    %edi,0x30(%esp)
		sub    %ebx,%eax
		mov    %edi,0x44(%esp)
		sub    $0x18,%eax
		mov    %edi,0x4(%esp)
		mov    %eax,%ecx
		mov    %eax,0x5c(%esp)
		neg    %ecx
		mov    %eax,0x60(%esp)
		mov    %ecx,0x5c(%esp)
		jmp    jump_adb73
	jump_adb35:
		mov    0x38(%esp),%ebx
		mov    0x30(%esp),%ecx
		mov    0x44(%esp),%esi
		mov    0x4(%esp),%edi
		add    $0x80,%ebx
		add    $0x80,%ecx
		add    $0x10,%esi
		add    $0xc,%edi
		mov    %ebx,0x38(%esp)
		mov    %ecx,0x30(%esp)
		mov    %esi,0x44(%esp)
		mov    %edi,0x4(%esp)
		cmp    $0x100,%esi
		je     jump_adef7
	jump_adb73:
		mov    0x4(%esp),%eax
		cmpb   $0x0,ingame__Scanner__BigBlip_0__Period(%eax)
		je     jump_adb35
		mov    0x20(%esp),%ecx
		mov    0x18(%esp),%ebx
		mov    0x1c(%esp),%edx
		mov    0x24(%esp),%eax
		mov    0x4(%esp),%esi
		call   ac_LbScreenSetGraphicsWindow
		mov    0x4(%esp),%ecx
		mov    0xc(%esp),%eax
		mov    0x50(%esp),%edx
		mov    ingame__Scanner__BigBlip_0__Z(%ecx),%ecx
		mov    0x6c(%esp),%ebx
		add    %ecx,%ecx
		mov    ingame__Scanner__BigBlip_0__X(%esi),%esi
		sub    %eax,%ecx
		add    %esi,%esi
		mov    %ecx,%eax
		sub    %edx,%esi
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    0x68(%esp),%ebx
		mov    %eax,%edi
		mov    %ecx,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    0x68(%esp),%ebx
		mov    %eax,0x10(%esp)
		mov    %esi,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    0x6c(%esp),%ebx
		mov    %eax,%ebp
		mov    %esi,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    0x68(%esp),%ebx
		mov    %eax,%esi
		mov    %ebx,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    0x6c(%esp),%ebx
		mov    %eax,%ecx
		mov    %ebx,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		add    %eax,%ecx
		mov    %ebp,%edx
		mov    %ecx,%ebx
		sub    %edi,%edx
		mov    %edx,%eax
		shl    $0x10,%eax
		sar    $0x10,%edx
		idiv   %ebx
		mov    0x10(%esp),%edx
		mov    %ecx,%ebx
		add    %esi,%edx
		mov    %eax,%edi
		mov    %edx,%eax
		shl    $0x10,%eax
		sar    $0x10,%edx
		idiv   %ebx
		mov    %eax,%ebx
		mov    %edi,%eax
		sar    $0x10,%eax
		sar    $0x10,%ebx
		cmp    $0x1,%eax
		jl     jump_adc87
		mov    ingame__Scanner__Y1,%edx
		mov    ingame__Scanner__Y2,%ecx
		add    %eax,%edx
		cmp    %ecx,%edx
		jg     jump_adc87
		cmp    $0x1,%ebx
		jl     jump_adc87
		lea    0x0(,%eax,4),%ecx
		mov    SCANNER_width,%eax
		cmp    (%ecx,%eax,1),%ebx
		jg     jump_adc87
		mov    ingame__Scanner__X1,%eax # ingame.Scanner.X1
		add    %ebx,%eax
		mov    $0x57,%ebx
		call   ac_SCANNER_draw_mark_point5_blink4
	jump_adc87:
		mov    ingame__Scanner__Y2,%eax
		mov    ingame__Scanner__Y1,%edi
		sub    %edi,%eax
		lea    0x1(%eax),%ecx
		mov    ingame__Scanner__X1,%ebp # ingame.Scanner.X1
		mov    ingame__Scanner__X2,%eax
		sub    %ebp,%eax
		lea    0x1(%eax),%ebx
		mov    %edi,%edx
		mov    %ebp,%eax
		call   ac_LbScreenSetGraphicsWindow
		mov    0x38(%esp),%eax
		mov    0x30(%esp),%ecx
		mov    %eax,0x8(%esp)
	jump_adcbc:
		mov    0xc(%esp),%edx
		mov    0x50(%esp),%ebx
		mov    EXPORT_SYMBOL(SCANNER_bbpoint)(%ecx),%esi
		mov    data_1db2f0(%ecx),%edi
		add    %esi,%esi
		add    %edi,%edi
		sub    %edx,%esi
		sub    %ebx,%edi
		mov    0x6c(%esp),%ebx
		mov    %esi,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    0x68(%esp),%ebx
		mov    %eax,0x10(%esp)
		mov    %esi,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    0x68(%esp),%ebx
		mov    %eax,0x14(%esp)
		mov    %edi,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    0x6c(%esp),%ebx
		mov    %eax,%ebp
		mov    %edi,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    0x68(%esp),%ebx
		mov    %eax,%edi
		mov    %ebx,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    0x6c(%esp),%ebx
		mov    %eax,%esi
		mov    %ebx,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    %ebp,%edx
		add    %eax,%esi
		mov    0x10(%esp),%eax
		mov    %esi,%ebx
		sub    %eax,%edx
		add    $0x8,%ecx
		mov    %edx,%eax
		shl    $0x10,%eax
		sar    $0x10,%edx
		idiv   %ebx
		mov    0x14(%esp),%edx
		mov    %esi,%ebx
		add    %edi,%edx
		mov    %eax,%ebp
		mov    %edx,%eax
		shl    $0x10,%eax
		sar    $0x10,%edx
		idiv   %ebx
		sar    $0x10,%ebp
		sar    $0x10,%eax
		mov    %ebp,data_1dbb68(%ecx)
		mov    0x8(%esp),%edx
		mov    %eax,EXPORT_SYMBOL(dword_1DBB64)(%ecx)
		cmp    %edx,%ecx
		jne    jump_adcbc
		mov    0x4(%esp),%eax
		xor    %ebx,%ebx
		mov    %eax,0x64(%esp)
		mov    0x44(%esp),%eax
		mov    %ebx,0x70(%esp)
		mov    %eax,0x4c(%esp)
		jmp    jump_adecd
	jump_adda0:
		inc    %eax
	jump_adda1:
		mov    0x60(%esp),%ebx
		mov    EXPORT_SYMBOL(dword_1DBB6C)(,%eax,8),%esi
		mov    EXPORT_SYMBOL(dword_1DBB70)(,%eax,8),%ecx
		mov    %ebp,%eax
		sub    %ebx,%eax
		xor    %edx,%edx
		cmp    %edi,%eax
		setg   %al
		mov    %al,%dl
		mov    %esi,%eax
		sub    %ebx,%eax
		mov    %edx,0x54(%esp)
		cmp    %ecx,%eax
		setg   %al
		and    $0xff,%eax
		mov    %eax,0x58(%esp)
		test   %edx,%edx
		je     jump_adde2
		test   %eax,%eax
		jne    jump_adebb
	jump_adde2:
		cmpl   $0x0,0x58(%esp)
		je     jump_ade31
		mov    0x5c(%esp),%eax
		mov    %edi,%edx
		sub    %ebp,%esi
		sub    %edi,%ecx
		sub    %ebp,%edx
		mov    %esi,%ebx
		sub    %eax,%edx
		sub    %ecx,%ebx
		shl    $0x10,%edx
		shl    $0x10,%ebx
		mov    %ecx,(%esp)
		mov    %edx,%eax
		shl    $0x10,%eax
		sar    $0x10,%edx
		idiv   %ebx
		mov    %eax,%ecx
		mov    %eax,%ebx
		mov    %esi,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    %ecx,%ebx
		lea    (%eax,%ebp,1),%esi
		mov    (%esp),%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		lea    (%edi,%eax,1),%ecx
		jmp    jump_ade7e
	jump_ade31:
		cmpl   $0x0,0x54(%esp)
		je     jump_ade7e
		mov    0x5c(%esp),%ebx
		mov    %ecx,%edx
		sub    %esi,%ebp
		sub    %esi,%edx
		sub    %ecx,%edi
		sub    %ebx,%edx
		mov    %ebp,%ebx
		sub    %edi,%ebx
		shl    $0x10,%edx
		shl    $0x10,%ebx
		mov    %edi,(%esp)
		mov    %edx,%eax
		shl    $0x10,%eax
		sar    $0x10,%edx
		idiv   %ebx
		mov    %eax,%edi
		mov    %eax,%ebx
		mov    %ebp,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    %edi,%ebx
		lea    (%esi,%eax,1),%ebp
		mov    (%esp),%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		lea    (%ecx,%eax,1),%edi
	jump_ade7e:
		mov    0x64(%esp),%edx
		xor    %eax,%eax
		mov    ingame__Scanner__BigBlip_0__Counter(%edx),%al
		mov    $0x1f,%edx
		sub    %eax,%edx
		mov    0x64(%esp),%ebx
		mov    %edx,%eax
		xor    %edx,%edx
		shl    $0x9,%eax
		mov    ingame__Scanner__BigBlip_0__Colour(%ebx),%dl
		add    %edx,%eax
		mov    EXPORT_SYMBOL(pixmap)(%eax),%al # pixmap.fade_table[?]
		and    $0xff,%eax
		mov    %esi,%ebx
		push   %eax
		mov    %edi,%edx
		mov    %ebp,%eax
		call   ac_LbDrawLine
	jump_adebb:
		mov    0x70(%esp),%ecx
		inc    %ecx
		mov    %ecx,0x70(%esp)
		cmp    $0x10,%ecx
		jge    jump_adb35
	jump_adecd:
		mov    0x4c(%esp),%eax
		add    0x70(%esp),%eax
		mov    0x70(%esp),%edx
		mov    EXPORT_SYMBOL(dword_1DBB6C)(,%eax,8),%ebp
		mov    EXPORT_SYMBOL(dword_1DBB70)(,%eax,8),%edi
		cmp    $0xf,%edx
		jne    jump_adda0
		sub    %edx,%eax
		jmp    jump_adda1
	jump_adef7:
		mov    0x20(%esp),%ecx
		mov    0x18(%esp),%ebx
		mov    0x1c(%esp),%edx
		mov    0x24(%esp),%eax
		call   ac_LbScreenSetGraphicsWindow
		add    $0x74,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret

GLOBAL_FUNC(ASM_SCANNER_dnt_sub1_sub1)
		pusha
		mov    EXPORT_SYMBOL(SCANNER_dw06C),%ecx
		mov    EXPORT_SYMBOL(SCANNER_dw070),%ebp
		mov    EXPORT_SYMBOL(SCANNER_screenptr),%edi
		mov    EXPORT_SYMBOL(SCANNER_dw074),%esi
		mov    EXPORT_SYMBOL(SCANNER_brig),%dl
	jump_ae194:
		xor    %eax,%eax
		mov    (%edi),%al
		mov    EXPORT_SYMBOL(SCANNER_pal_bright)(%eax),%ah
		shr    %ah
		add    %dl,%ah
		mov    $0x49,%al
		mov    EXPORT_SYMBOL(pixmap)(%eax),%dh # pixmap.fade_table[?]
		mov    %dh,(%edi)
		inc    %edi
		add    EXPORT_SYMBOL(SCANNER_dw064),%ecx
		add    EXPORT_SYMBOL(SCANNER_dw068),%ebp
		dec    %esi
		jne    jump_ae194
		mov    %ecx,EXPORT_SYMBOL(SCANNER_dw06C)
		mov    %ebp,EXPORT_SYMBOL(SCANNER_dw070)
		mov    %edi,EXPORT_SYMBOL(SCANNER_screenptr)
		mov    %esi,EXPORT_SYMBOL(SCANNER_dw074)
		popa
		ret


GLOBAL_FUNC(ASM_SCANNER_dnt_sub1_sub3)
		pusha
		mov    EXPORT_SYMBOL(SCANNER_dw06C),%ecx
		mov    EXPORT_SYMBOL(SCANNER_dw070),%ebp
		mov    EXPORT_SYMBOL(SCANNER_screenptr),%edi
		mov    EXPORT_SYMBOL(SCANNER_dw074),%esi
		mov    EXPORT_SYMBOL(SCANNER_brig),%dl
	jump_ae3b6:
		xor    %eax,%eax
		mov    (%edi),%al
		mov    EXPORT_SYMBOL(SCANNER_pal_bright)(%eax),%ah
		shr    %ah
		add    %dl,%ah
		mov    $0x49,%al
		mov    EXPORT_SYMBOL(pixmap)(%eax),%dh # pixmap.fade_table[?]
		mov    %dh,(%edi)
		inc    %edi
		add    EXPORT_SYMBOL(SCANNER_dw064),%ecx
		add    EXPORT_SYMBOL(SCANNER_dw068),%ebp
		dec    %esi
		jne    jump_ae3b6
		mov    %ecx,EXPORT_SYMBOL(SCANNER_dw06C)
		mov    %ebp,EXPORT_SYMBOL(SCANNER_dw070)
		mov    %edi,EXPORT_SYMBOL(SCANNER_screenptr)
		mov    %esi,EXPORT_SYMBOL(SCANNER_dw074)
		popa
		ret


GLOBAL_FUNC(ASM_SCANNER_dnt_sub1_sub2)
		pusha
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(SCANNER_dw06C),%eax
		mov    EXPORT_SYMBOL(SCANNER_dw070),%edx
		rol    $0x10,%eax
		rol    $0x10,%edx
		mov    %al,%bh
		mov    %dl,%bl
		mov    %eax,%ecx
		mov    %edx,%ebp
		and    $0xffff0000,%ecx
		and    $0xffff0000,%ebp
		mov    EXPORT_SYMBOL(SCANNER_dw07C),%eax
		mov    EXPORT_SYMBOL(SCANNER_screenptr),%edi
		mov    EXPORT_SYMBOL(SCANNER_dw074),%esi
		mov    EXPORT_SYMBOL(SCANNER_brig),%dl
		mov    EXPORT_SYMBOL(SCANNER_cont),%dh
		ror    $0x10,%edx
		mov    EXPORT_SYMBOL(SCANNER_bt084),%dl
		mov    EXPORT_SYMBOL(SCANNER_bt085),%dh
	jump_ae30c:
		push   %ecx
		xor    %eax,%eax
		ror    $0x10,%edx
		mov    EXPORT_SYMBOL(SCANNER_data)(%ebx),%al
		xor    %ecx,%ecx
		mov    EXPORT_SYMBOL(SCANNER_pal_bright)(%eax),%ah
		mov    (%edi),%cl
		mov    EXPORT_SYMBOL(SCANNER_pal_bright)(%ecx),%cl
		shr    %cl
		add    %ah,%cl
		add    %dl,%cl
		mov    EXPORT_SYMBOL(SCANNER_bright_limit)(%ecx),%ah
		ror    $0x10,%edx
		mov    EXPORT_SYMBOL(pixmap)(%eax),%al # pixmap.fade_table[?]
		pop    %ecx
		mov    %al,(%edi)
		add    EXPORT_SYMBOL(SCANNER_dw07C),%ecx
		inc    %edi
		adc    %dl,%bh
		add    EXPORT_SYMBOL(SCANNER_dw080),%ebp
		adc    %dh,%bl
		dec    %esi
		jne    jump_ae30c
		mov    %ecx,%eax
		mov    %bh,%al
		xor    %ah,%ah
		rol    $0x10,%eax
		mov    %eax,EXPORT_SYMBOL(SCANNER_dw06C)
		mov    %ebp,%eax
		mov    %bl,%al
		xor    %ah,%ah
		rol    $0x10,%eax
		mov    %eax,EXPORT_SYMBOL(SCANNER_dw070)
		mov    %edi,EXPORT_SYMBOL(SCANNER_screenptr)
		mov    %esi,EXPORT_SYMBOL(SCANNER_dw074)
		popa
		ret


GLOBAL_FUNC(ASM_SCANNER_dnt_sub1_sub4)
		pusha
		mov    EXPORT_SYMBOL(SCANNER_dw06C),%ecx
		mov    EXPORT_SYMBOL(SCANNER_dw070),%ebp
		mov    EXPORT_SYMBOL(SCANNER_screenptr),%edi
		mov    EXPORT_SYMBOL(SCANNER_dw074),%esi
		mov    EXPORT_SYMBOL(SCANNER_brig),%dl
	jump_ae41b:
		or     %ecx,%ecx
		jns    jump_ae447
		xor    %eax,%eax
		mov    (%edi),%al
		mov    EXPORT_SYMBOL(SCANNER_pal_bright)(%eax),%ah
		shr    %ah
		add    %dl,%ah
		mov    $0x49,%al
		mov    EXPORT_SYMBOL(pixmap)(%eax),%dh # pixmap.fade_table[?]
		mov    %dh,(%edi)
		inc    %edi
		add    EXPORT_SYMBOL(SCANNER_dw064),%ecx
		add    EXPORT_SYMBOL(SCANNER_dw068),%ebp
		dec    %esi
		jne    jump_ae41b
	jump_ae447:
		mov    %ecx,EXPORT_SYMBOL(SCANNER_dw06C)
		mov    %ebp,EXPORT_SYMBOL(SCANNER_dw070)
		mov    %edi,EXPORT_SYMBOL(SCANNER_screenptr)
		mov    %esi,EXPORT_SYMBOL(SCANNER_dw074)
		popa
		ret


GLOBAL_FUNC(ASM_SCANNER_dnt_sub1_sub5)
		pusha
		mov    EXPORT_SYMBOL(SCANNER_dw06C),%ecx
		mov    EXPORT_SYMBOL(SCANNER_dw070),%ebp
		mov    EXPORT_SYMBOL(SCANNER_screenptr),%edi
		mov    EXPORT_SYMBOL(SCANNER_dw074),%esi
		mov    EXPORT_SYMBOL(SCANNER_brig),%dl
	jump_ae490:
		cmp    $0x1000000,%ecx
		jl     jump_ae4c0
		xor    %eax,%eax
		mov    (%edi),%al
		mov    EXPORT_SYMBOL(SCANNER_pal_bright)(%eax),%ah
		shr    %ah
		add    %dl,%ah
		mov    $0x49,%al
		mov    EXPORT_SYMBOL(pixmap)(%eax),%dh # pixmap.fade_table[?]
		mov    %dh,(%edi)
		inc    %edi
		add    EXPORT_SYMBOL(SCANNER_dw064),%ecx
		add    EXPORT_SYMBOL(SCANNER_dw068),%ebp
		dec    %esi
		jne    jump_ae490
	jump_ae4c0:
		mov    %ecx,EXPORT_SYMBOL(SCANNER_dw06C)
		mov    %ebp,EXPORT_SYMBOL(SCANNER_dw070)
		mov    %edi,EXPORT_SYMBOL(SCANNER_screenptr)
		mov    %esi,EXPORT_SYMBOL(SCANNER_dw074)
		popa
		ret


GLOBAL_FUNC(ASM_SCANNER_dnt_sub1_sub6)
		pusha
		mov    EXPORT_SYMBOL(SCANNER_dw06C),%ecx
		mov    EXPORT_SYMBOL(SCANNER_dw070),%ebp
		mov    EXPORT_SYMBOL(SCANNER_screenptr),%edi
		mov    EXPORT_SYMBOL(SCANNER_dw074),%esi
		mov    EXPORT_SYMBOL(SCANNER_brig),%dl
	jump_ae509:
		or     %ebp,%ebp
		jns    jump_ae535
		xor    %eax,%eax
		mov    (%edi),%al
		mov    EXPORT_SYMBOL(SCANNER_pal_bright)(%eax),%ah
		shr    %ah
		add    %dl,%ah
		mov    $0x49,%al
		mov    EXPORT_SYMBOL(pixmap)(%eax),%dh # pixmap.fade_table[?]
		mov    %dh,(%edi)
		inc    %edi
		add    EXPORT_SYMBOL(SCANNER_dw064),%ecx
		add    EXPORT_SYMBOL(SCANNER_dw068),%ebp
		dec    %esi
		jne    jump_ae509
	jump_ae535:
		mov    %ecx,EXPORT_SYMBOL(SCANNER_dw06C)
		mov    %ebp,EXPORT_SYMBOL(SCANNER_dw070)
		mov    %edi,EXPORT_SYMBOL(SCANNER_screenptr)
		mov    %esi,EXPORT_SYMBOL(SCANNER_dw074)
		popa
		ret


GLOBAL_FUNC(ASM_SCANNER_dnt_sub1_sub7)
		pusha
		mov    EXPORT_SYMBOL(SCANNER_dw06C),%ecx
		mov    EXPORT_SYMBOL(SCANNER_dw070),%ebp
		mov    EXPORT_SYMBOL(SCANNER_screenptr),%edi
		mov    EXPORT_SYMBOL(SCANNER_dw074),%esi
		mov    EXPORT_SYMBOL(SCANNER_brig),%dl
	jump_ae57e:
		cmp    $0x1000000,%ebp
		jl     jump_ae5ae
		xor    %eax,%eax
		mov    (%edi),%al
		mov    EXPORT_SYMBOL(SCANNER_pal_bright)(%eax),%ah
		shr    %ah
		add    %dl,%ah
		mov    $0x49,%al
		mov    EXPORT_SYMBOL(pixmap)(%eax),%dh # pixmap.fade_table[?]
		mov    %dh,(%edi)
		inc    %edi
		add    EXPORT_SYMBOL(SCANNER_dw064),%ecx
		add    EXPORT_SYMBOL(SCANNER_dw068),%ebp
		dec    %esi
		jne    jump_ae57e
	jump_ae5ae:
		mov    %ecx,EXPORT_SYMBOL(SCANNER_dw06C)
		mov    %ebp,EXPORT_SYMBOL(SCANNER_dw070)
		mov    %edi,EXPORT_SYMBOL(SCANNER_screenptr)
		mov    %esi,EXPORT_SYMBOL(SCANNER_dw074)
		popa
		ret


GLOBAL_FUNC(ASM_SCANNER_dnt_sub1_sub8)
		pusha
		mov    EXPORT_SYMBOL(SCANNER_dw06C),%ecx
		mov    EXPORT_SYMBOL(SCANNER_dw070),%ebp
		mov    EXPORT_SYMBOL(SCANNER_screenptr),%edi
		mov    EXPORT_SYMBOL(SCANNER_dw074),%esi
		mov    EXPORT_SYMBOL(SCANNER_brig),%dl
	jump_ae5f7:
		or     %ecx,%ecx
		jns    jump_ae627
		or     %ebp,%ebp
		jns    jump_ae627
		xor    %eax,%eax
		mov    (%edi),%al
		mov    EXPORT_SYMBOL(SCANNER_pal_bright)(%eax),%ah
		shr    %ah
		add    %dl,%ah
		mov    $0x49,%al
		mov    EXPORT_SYMBOL(pixmap)(%eax),%dh # pixmap.fade_table[?]
		mov    %dh,(%edi)
		inc    %edi
		add    EXPORT_SYMBOL(SCANNER_dw064),%ecx
		add    EXPORT_SYMBOL(SCANNER_dw068),%ebp
		dec    %esi
		jne    jump_ae5f7
	jump_ae627:
		mov    %ecx,EXPORT_SYMBOL(SCANNER_dw06C)
		mov    %ebp,EXPORT_SYMBOL(SCANNER_dw070)
		mov    %edi,EXPORT_SYMBOL(SCANNER_screenptr)
		mov    %esi,EXPORT_SYMBOL(SCANNER_dw074)
		popa
		ret


GLOBAL_FUNC(ASM_SCANNER_dnt_sub1_sub9)
		pusha
		mov    EXPORT_SYMBOL(SCANNER_dw06C),%ecx
		mov    EXPORT_SYMBOL(SCANNER_dw070),%ebp
		mov    EXPORT_SYMBOL(SCANNER_screenptr),%edi
		mov    EXPORT_SYMBOL(SCANNER_dw074),%esi
		mov    EXPORT_SYMBOL(SCANNER_brig),%dl
	jump_ae670:
		cmp    $0x1000000,%ecx
		jl     jump_ae6a4
		or     %ebp,%ebp
		jns    jump_ae6a4
		xor    %eax,%eax
		mov    (%edi),%al
		mov    EXPORT_SYMBOL(SCANNER_pal_bright)(%eax),%ah
		shr    %ah
		add    %dl,%ah
		mov    $0x49,%al
		mov    EXPORT_SYMBOL(pixmap)(%eax),%dh # pixmap.fade_table[?]
		mov    %dh,(%edi)
		inc    %edi
		add    EXPORT_SYMBOL(SCANNER_dw064),%ecx
		add    EXPORT_SYMBOL(SCANNER_dw068),%ebp
		dec    %esi
		jne    jump_ae670
	jump_ae6a4:
		mov    %ecx,EXPORT_SYMBOL(SCANNER_dw06C)
		mov    %ebp,EXPORT_SYMBOL(SCANNER_dw070)
		mov    %edi,EXPORT_SYMBOL(SCANNER_screenptr)
		mov    %esi,EXPORT_SYMBOL(SCANNER_dw074)
		popa
		ret


GLOBAL_FUNC(ASM_SCANNER_dnt_sub1_sub10)
		pusha
		mov    EXPORT_SYMBOL(SCANNER_dw06C),%ecx
		mov    EXPORT_SYMBOL(SCANNER_dw070),%ebp
		mov    EXPORT_SYMBOL(SCANNER_screenptr),%edi
		mov    EXPORT_SYMBOL(SCANNER_dw074),%esi
		mov    EXPORT_SYMBOL(SCANNER_brig),%dl
	jump_ae6ed:
		or     %ecx,%ecx
		jns    jump_ae721
		cmp    $0x1000000,%ebp
		jl     jump_ae721
		xor    %eax,%eax
		mov    (%edi),%al
		mov    EXPORT_SYMBOL(SCANNER_pal_bright)(%eax),%ah
		shr    %ah
		add    %dl,%ah
		mov    $0x49,%al
		mov    EXPORT_SYMBOL(pixmap)(%eax),%dh # pixmap.fade_table[?]
		mov    %dh,(%edi)
		inc    %edi
		add    EXPORT_SYMBOL(SCANNER_dw064),%ecx
		add    EXPORT_SYMBOL(SCANNER_dw068),%ebp
		dec    %esi
		jne    jump_ae6ed
	jump_ae721:
		mov    %ecx,EXPORT_SYMBOL(SCANNER_dw06C)
		mov    %ebp,EXPORT_SYMBOL(SCANNER_dw070)
		mov    %edi,EXPORT_SYMBOL(SCANNER_screenptr)
		mov    %esi,EXPORT_SYMBOL(SCANNER_dw074)
		popa
		ret


GLOBAL_FUNC(ASM_SCANNER_dnt_sub1_sub11)
		pusha
		mov    EXPORT_SYMBOL(SCANNER_dw06C),%ecx
		mov    EXPORT_SYMBOL(SCANNER_dw070),%ebp
		mov    EXPORT_SYMBOL(SCANNER_screenptr),%edi
		mov    EXPORT_SYMBOL(SCANNER_dw074),%esi
		mov    EXPORT_SYMBOL(SCANNER_brig),%dl
	jump_ae767:
		cmp    $0x1000000,%ecx
		jl     jump_ae79f
		cmp    $0x1000000,%ebp
		jl     jump_ae79f
		xor    %eax,%eax
		mov    (%edi),%al
		mov    EXPORT_SYMBOL(SCANNER_pal_bright)(%eax),%ah
		shr    %ah
		add    %dl,%ah
		mov    $0x49,%al
		mov    EXPORT_SYMBOL(pixmap)(%eax),%dh # pixmap.fade_table[?]
		mov    %dh,(%edi)
		inc    %edi
		add    EXPORT_SYMBOL(SCANNER_dw064),%ecx
		add    EXPORT_SYMBOL(SCANNER_dw068),%ebp
		dec    %esi
		jne    jump_ae767
	jump_ae79f:
		mov    %ecx,EXPORT_SYMBOL(SCANNER_dw06C)
		mov    %ebp,EXPORT_SYMBOL(SCANNER_dw070)
		mov    %edi,EXPORT_SYMBOL(SCANNER_screenptr)
		mov    %esi,EXPORT_SYMBOL(SCANNER_dw074)
		popa
		ret


GLOBAL_FUNC(ASM_SCANNER_dnt_sub1_sub12)
		pusha
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(SCANNER_dw06C),%eax
		mov    EXPORT_SYMBOL(SCANNER_dw070),%edx
		rol    $0x10,%eax
		rol    $0x10,%edx
		mov    %al,%bh
		mov    %dl,%bl
		mov    %eax,%ecx
		mov    %edx,%ebp
		and    $0xffff0000,%ecx
		and    $0xffff0000,%ebp
		mov    EXPORT_SYMBOL(SCANNER_dw07C),%eax
		mov    EXPORT_SYMBOL(SCANNER_screenptr),%edi
		mov    EXPORT_SYMBOL(SCANNER_dw074),%esi
		mov    EXPORT_SYMBOL(SCANNER_brig),%dl
		mov    EXPORT_SYMBOL(SCANNER_cont),%dh
		ror    $0x10,%edx
		mov    EXPORT_SYMBOL(SCANNER_bt084),%dl
		mov    EXPORT_SYMBOL(SCANNER_bt085),%dh
	jump_ae939:
		push   %ecx
		xor    %eax,%eax
		ror    $0x10,%edx
		mov    EXPORT_SYMBOL(SCANNER_data)(%ebx),%al
		xor    %ecx,%ecx
		mov    EXPORT_SYMBOL(SCANNER_pal_bright)(%eax),%ah
		mov    (%edi),%cl
		mov    EXPORT_SYMBOL(SCANNER_pal_bright)(%ecx),%cl
		shr    %cl
		add    %ah,%cl
		add    %dl,%cl
		mov    EXPORT_SYMBOL(SCANNER_bright_limit)(%ecx),%ah
		ror    $0x10,%edx
		mov    EXPORT_SYMBOL(pixmap)(%eax),%al # pixmap.fade_table[?]
		pop    %ecx
		mov    %al,(%edi)
		add    EXPORT_SYMBOL(SCANNER_dw07C),%ecx
		inc    %edi
		adc    %dl,%bh
		add    EXPORT_SYMBOL(SCANNER_dw080),%ebp
		adc    %dh,%bl
		dec    %esi
		jne    jump_ae939
		mov    %ecx,%eax
		mov    %bh,%al
		xor    %ah,%ah
		rol    $0x10,%eax
		mov    %eax,EXPORT_SYMBOL(SCANNER_dw06C)
		mov    %ebp,%eax
		mov    %bl,%al
		xor    %ah,%ah
		rol    $0x10,%eax
		mov    %eax,EXPORT_SYMBOL(SCANNER_dw070)
		mov    %edi,EXPORT_SYMBOL(SCANNER_screenptr)
		mov    %esi,EXPORT_SYMBOL(SCANNER_dw074)
		popa
		ret


vtable_adf18:
		.long   SCANNER_dnt_sw1_case0
		.long   SCANNER_dnt_sw1_case1
		.long   SCANNER_dnt_sw1_case2
		.long   SCANNER_dnt_sw1_loop
		.long   SCANNER_dnt_sw1_case4
		.long   SCANNER_dnt_sw1_case5
		.long   SCANNER_dnt_sw1_case6
		.long   SCANNER_dnt_sw1_loop
		.long   SCANNER_dnt_sw1_case8
		.long   SCANNER_dnt_sw1_case9
		.long   SCANNER_dnt_sw1_case10

/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_SCANNER_draw_new_transparent_map)	/* 0x0ADF44 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x114,%esp
		mov    EXPORT_SYMBOL(scanner_next_key_no),%eax
		mov    $0x7fffffff,%edx
		mov    scanner_keys(,%eax,4),%eax
		mov    %edx,0x5c(%esp)
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)(%eax)
		je     jump_adfa9
		xor    %dh,%dh
		mov    %dh,EXPORT_SYMBOL(lbKeyOn)(%eax)
		mov    EXPORT_SYMBOL(scanner_next_key_no),%ebx
		inc    %ebx
		mov    scanner_keys(,%ebx,4),%ecx
		mov    %ebx,EXPORT_SYMBOL(scanner_next_key_no)
		cmp    $0x270f,%ecx
		jne    jump_adfa9
		mov    EXPORT_SYMBOL(scanner_blink),%bl
		xor    %esi,%esi
		xor    $0x1,%bl
		mov    %esi,EXPORT_SYMBOL(scanner_next_key_no)
		mov    %bl,EXPORT_SYMBOL(scanner_blink)
	jump_adfa9:
		call   ac_SCANNER_process_bbpoints
		mov    ingame__Scanner__Angle,%edi
		mov    ingame__Scanner__Zoom,%ebp
		mov    EXPORT_SYMBOL(lbSinTable)(,%edi,4),%edi
		imul   %ebp,%edi
		mov    ingame__Scanner__Angle,%eax
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%eax,4),%esi
		imul   %ebp,%esi
		mov    ingame__Scanner__X1,%edx # ingame.Scanner.X1
		mov    ingame__Scanner__X2,%eax
		mov    ingame__Scanner__Y1,%ebx
		sub    %edx,%eax
		mov    ingame__Scanner__Y2,%edx
		sub    %ebx,%edx
		sar    %edx
		sar    %eax
		mov    %edx,0x18(%esp)
		mov    ingame__Scanner__X1,%edx # ingame.Scanner.X1
		add    %eax,%edx
		sar    $0x8,%edi
		mov    %edx,0x68(%esp)
		mov    0x18(%esp),%edx
		sar    $0x8,%esi
		add    %ebx,%edx
		mov    0x18(%esp),%ebp
		mov    %edx,0x6c(%esp)
		cmp    %ebp,%eax
		jge    jump_ae01e
		mov    %eax,%edx
		jmp    jump_ae020
	jump_ae01e:
		mov    %ebp,%edx
	jump_ae020:
		sub    $0x5,%edx
		mov    %edx,0x70(%esp)
		imul   %edx,%edx
		mov    %edx,0x74(%esp)
		mov    ingame__Scanner__MX,%edx
		shl    $0x10,%edx
		mov    %edx,0xb4(%esp)
		mov    %eax,%edx
		imul   %edi,%edx
		mov    ingame__Scanner__MZ,%ebx
		shl    $0x10,%ebx
		mov    %ebx,%ecx
		sub    %edx,%ecx
		mov    %ecx,0xf4(%esp)
		mov    %eax,%ecx
		imul   %esi,%ecx
		mov    0xb4(%esp),%eax
		sub    %ecx,%eax
		mov    %eax,0xb8(%esp)
		mov    0x18(%esp),%eax
		imul   %esi,%eax
		mov    0xf4(%esp),%ebp
		add    %eax,%ebp
		mov    %ebp,0x4(%esp)
		mov    0x18(%esp),%ebp
		imul   %edi,%ebp
		add    %edx,%ebx
		add    %ebx,%eax
		mov    %edi,%ebx
		shl    $0x10,%ebx
		mov    %ebx,EXPORT_SYMBOL(SCANNER_dw07C)
		mov    %esi,%ebx
		mov    0xb4(%esp),%edx
		shl    $0x10,%ebx
		add    %ecx,%edx
		mov    %ebx,EXPORT_SYMBOL(SCANNER_dw080)
		mov    %edi,%ebx
		mov    %ebp,0x9c(%esp)
		sar    $0x10,%ebx
		mov    0xb8(%esp),%ebp
		mov    0x9c(%esp),%ecx
		mov    %bl,EXPORT_SYMBOL(SCANNER_bt084)
		sub    0x9c(%esp),%ebp
		sub    %ecx,%edx
		mov    %esi,%ebx
		mov    ingame__Scanner__X1,%ecx # ingame.Scanner.X1
		sar    $0x10,%ebx
		mov    %ebp,0x8(%esp)
		mov    %bl,EXPORT_SYMBOL(SCANNER_bt085)
		mov    ingame__Scanner__Brightness,%bl
		mov    0x18(%esp),%ebp
		mov    %bl,EXPORT_SYMBOL(SCANNER_brig)
		mov    ingame__Scanner__Contrast,%bl
		add    %ebp,%ebp
		mov    %bl,EXPORT_SYMBOL(SCANNER_cont)
		mov    ingame__Scanner__Y1,%ebx
		mov    %ebp,0x18(%esp)
		mov    %ebx,0xc(%esp)
		mov    EXPORT_SYMBOL(lbDisplay)+4,%ebx # lbDisplay.WScreen
		mov    EXPORT_SYMBOL(lbDisplay)+24,%ebp # lbDisplay.PhysicalScreenWidth
		add    %ebx,%ecx
		mov    0xc(%esp),%ebx
		imul   %ebp,%ebx
		mov    %edi,EXPORT_SYMBOL(SCANNER_dw064)
		mov    %eax,0x2c(%esp)
		mov    SCANNER_width,%eax
		mov    %esi,EXPORT_SYMBOL(SCANNER_dw068)
		mov    %eax,0x3c(%esp)
		mov    %edx,0x30(%esp)
		mov    ingame__Scanner__Y2,%edx
		add    %ebx,%ecx
		mov    0x4(%esp),%ebx
		mov    0xc(%esp),%eax
		mov    %ebx,0x24(%esp)
		mov    0x8(%esp),%ebx
		mov    %ecx,0x40(%esp)
		mov    %ebx,0x28(%esp)
		cmp    %edx,%eax
		jmp    jump_ae81b
	jump_ae16d:
		test   %ecx,%eax
		je     jump_ae9af
		call   ac_SCANNER_dnt_sub1_sub1
		jmp    SCANNER_dnt_sw1_loop


	SCANNER_dnt_sw1_case0:	/* 0xAE1DA */
		mov    $0xfffffff,%ebp
		mov    %ebp,0x44(%esp)
		test   $0x1,%cl
		je     jump_ae202
		mov    EXPORT_SYMBOL(SCANNER_dw064),%ebx
		mov    EXPORT_SYMBOL(SCANNER_dw06C),%edx
		mov    %edx,%eax
		shl    $0x10,%eax
		sar    $0x10,%edx
		idiv   %ebx
		neg    %eax
		jmp    jump_ae223
	jump_ae202:
		test   $0x2,%cl
		je     jump_ae22a
		mov    $0x1000000,%edx
		mov    EXPORT_SYMBOL(SCANNER_dw06C),%eax
		mov    EXPORT_SYMBOL(SCANNER_dw064),%ebx
		sub    %eax,%edx
		mov    %edx,%eax
		shl    $0x10,%eax
		sar    $0x10,%edx
		idiv   %ebx
	jump_ae223:
		sar    $0x10,%eax
		mov    %eax,0x44(%esp)
	jump_ae22a:
		test   $0x4,%cl
		je     jump_ae24b
		mov    EXPORT_SYMBOL(SCANNER_dw068),%ebx
		mov    EXPORT_SYMBOL(SCANNER_dw070),%edx
		mov    %edx,%eax
		shl    $0x10,%eax
		sar    $0x10,%edx
		idiv   %ebx
		mov    %eax,%ebp
		neg    %ebp
		jmp    jump_ae26f
	jump_ae24b:
		test   $0x8,%cl
		je     jump_ae272
		mov    $0x1000000,%edx
		mov    EXPORT_SYMBOL(SCANNER_dw070),%ecx
		mov    EXPORT_SYMBOL(SCANNER_dw068),%ebx
		sub    %ecx,%edx
		mov    %edx,%eax
		shl    $0x10,%eax
		sar    $0x10,%edx
		idiv   %ebx
		mov    %eax,%ebp
	jump_ae26f:
		sar    $0x10,%ebp
	jump_ae272:
		mov    EXPORT_SYMBOL(SCANNER_dw074),%edx
		cmp    %edx,%ebp
		jge    jump_ae280
		mov    %ebp,%eax
		jmp    jump_ae282
	jump_ae280:
		mov    %edx,%eax
	jump_ae282:
		mov    0x44(%esp),%ebx
		cmp    %ebx,%eax
		jle    jump_ae28e
		mov    %ebx,%eax
		jmp    jump_ae29e
	jump_ae28e:
		mov    EXPORT_SYMBOL(SCANNER_dw074),%ecx
		cmp    %ecx,%ebp
		jge    jump_ae29c
		mov    %ebp,%eax
		jmp    jump_ae29e
	jump_ae29c:
		mov    %ecx,%eax
	jump_ae29e:
		mov    %eax,EXPORT_SYMBOL(SCANNER_dw074)
		sub    %eax,%edx
		test   %eax,%eax
		jle    jump_ae37d
		cmp    $0x190,%eax
		jg     jump_ae37d
		call   ac_SCANNER_dnt_sub1_sub2
	jump_ae37d:
		test   %edx,%edx
		jle    SCANNER_dnt_sw1_loop
		cmp    $0x190,%edx
		jg     SCANNER_dnt_sw1_loop
		mov    %edx,EXPORT_SYMBOL(SCANNER_dw074)
		call   ac_SCANNER_dnt_sub1_sub3
		jmp    SCANNER_dnt_sw1_loop


	SCANNER_dnt_sw1_case1:	/* 0xAE3FC */
		call   ac_SCANNER_dnt_sub1_sub4
		cmp    EXPORT_SYMBOL(SCANNER_dw074),%ebx
		jne    jump_ae894
		jmp    SCANNER_dnt_sw1_loop


	SCANNER_dnt_sw1_case2:	/* 0xAE471 */
		call   ac_SCANNER_dnt_sub1_sub5
		cmp    EXPORT_SYMBOL(SCANNER_dw074),%ebx
		jne    jump_ae894
		jmp    SCANNER_dnt_sw1_loop


	SCANNER_dnt_sw1_case4:	/* 0xAE4EA */
		call   ac_SCANNER_dnt_sub1_sub6
		cmp    EXPORT_SYMBOL(SCANNER_dw074),%ebx
		jne    jump_ae894
		jmp    SCANNER_dnt_sw1_loop


	SCANNER_dnt_sw1_case8:	/* 0xAE55F */
		call   ac_SCANNER_dnt_sub1_sub7
		cmp    EXPORT_SYMBOL(SCANNER_dw074),%ebx
		jne    jump_ae894
		jmp    SCANNER_dnt_sw1_loop


	SCANNER_dnt_sw1_case5:	/* 0xAE5D8 */
		call   ac_SCANNER_dnt_sub1_sub8
		cmp    EXPORT_SYMBOL(SCANNER_dw074),%ebx
		jne    jump_ae894
		jmp    SCANNER_dnt_sw1_loop


	SCANNER_dnt_sw1_case6:	/* 0xAE651 */
		call   ac_SCANNER_dnt_sub1_sub9
		cmp    EXPORT_SYMBOL(SCANNER_dw074),%ebx
		jne    jump_ae894
		jmp    SCANNER_dnt_sw1_loop


	SCANNER_dnt_sw1_case9:	/* 0xAE6CE */
		call   ac_SCANNER_dnt_sub1_sub10
		cmp    EXPORT_SYMBOL(SCANNER_dw074),%ebx
		jne    jump_ae894
		jmp    SCANNER_dnt_sw1_loop


	SCANNER_dnt_sw1_case10:	/* 0xAE748 */
		call   ac_SCANNER_dnt_sub1_sub11
		cmp    EXPORT_SYMBOL(SCANNER_dw074),%ebx
		jne    jump_ae894

	SCANNER_dnt_sw1_loop:	/* 0xAE7C4 */
		mov    0xc(%esp),%ebx
		mov    0x3c(%esp),%ecx
		mov    0x40(%esp),%ebp
		mov    0x28(%esp),%edx
		mov    EXPORT_SYMBOL(lbDisplay)+24,%eax # lbDisplay.PhysicalScreenWidth
		inc    %ebx
		add    $0x4,%ecx
		add    %eax,%ebp
		add    %edi,%edx
		mov    0x24(%esp),%eax
		mov    %ebx,0xc(%esp)
		mov    %ecx,0x3c(%esp)
		mov    %ebp,0x40(%esp)
		mov    %edx,0x28(%esp)
		mov    0x2c(%esp),%ebx
		mov    0x30(%esp),%ecx
		sub    %esi,%eax
		mov    ingame__Scanner__Y2,%ebp
		mov    %eax,0x24(%esp)
		sub    %esi,%ebx
		add    %edi,%ecx
		mov    0xc(%esp),%eax
		mov    %ebx,0x2c(%esp)
		mov    %ecx,0x30(%esp)
		cmp    %ebp,%eax
	jump_ae81b:
		jg     SCANNER_draw_new_transparent_sw1_end
		mov    0x24(%esp),%eax
		mov    %eax,EXPORT_SYMBOL(SCANNER_dw06C)
		mov    0x28(%esp),%eax
		mov    %eax,EXPORT_SYMBOL(SCANNER_dw070)
		mov    0x3c(%esp),%eax
		mov    (%eax),%eax
		inc    %eax
		mov    0x2c(%esp),%edx
		mov    %eax,EXPORT_SYMBOL(SCANNER_dw074)
		mov    0x40(%esp),%eax
		xor    %ecx,%ecx
		mov    %eax,EXPORT_SYMBOL(SCANNER_screenptr)
		test   %edx,%edx
		setl   %al
		mov    %al,%cl
		cmp    $0x1000000,%edx
		setge  %al
		and    $0xff,%eax
		add    %eax,%eax
		mov    0x30(%esp),%ebp
		or     %eax,%ecx
		test   %ebp,%ebp
		setl   %al
		and    $0xff,%eax
		shl    $0x2,%eax
		or     %eax,%ecx
		cmp    $0x1000000,%ebp
		setge  %al
		and    $0xff,%eax
		shl    $0x3,%eax
		or     %eax,%ecx
		mov    $0x1000000,%ebp
		xor    %ebx,%ebx
	jump_ae894:
		cmp    EXPORT_SYMBOL(SCANNER_dw06C),%ebx
		setg   %al
		xor    %edx,%edx
		mov    %al,%dl
		cmp    EXPORT_SYMBOL(SCANNER_dw06C),%ebp
		setle  %al
		and    $0xff,%eax
		add    %eax,%eax
		or     %edx,%eax
		cmp    EXPORT_SYMBOL(SCANNER_dw070),%ebx
		setg   %dl
		and    $0xff,%edx
		shl    $0x2,%edx
		or     %edx,%eax
		cmp    EXPORT_SYMBOL(SCANNER_dw070),%ebp
		setle  %dl
		and    $0xff,%edx
		shl    $0x3,%edx
		or     %edx,%eax
		mov    %eax,%edx
		or     %ecx,%edx
		jne    jump_ae16d
		call   ac_SCANNER_dnt_sub1_sub12
		jmp    SCANNER_dnt_sw1_loop
	jump_ae9af:
		cmp    $0xa,%eax
		ja     SCANNER_dnt_sw1_loop
		jmp    *%cs:vtable_adf18(,%eax,4)
	SCANNER_draw_new_transparent_sw1_end:
		add    $0x114,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret

/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_SCANNER_draw_signals)	/* 0xAE9C0 */
/*----------------------------------------------------------------*/
		/* to separate from sub1 need to set some local vars again
		   0x4(%esp)
		   0x8(%esp)
		   0x5c(%esp)
		   0x68(%esp) - used within sub9
		   0x6c(%esp) - used within sub9
		   0x70(%esp) - used within sub9
		   0x74(%esp) - used within sub9
		 */
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x114,%esp
		mov    $0x7fffffff,%edx
		mov    %edx,0x5c(%esp)

		mov    ingame__Scanner__Angle,%edi
		mov    ingame__Scanner__Zoom,%ebp
		mov    EXPORT_SYMBOL(lbSinTable)(,%edi,4),%edi
		imul   %ebp,%edi
		mov    ingame__Scanner__Angle,%eax
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%eax,4),%esi
		imul   %ebp,%esi
		mov    ingame__Scanner__X1,%edx # ingame.Scanner.X1
		mov    ingame__Scanner__X2,%eax
		mov    ingame__Scanner__Y1,%ebx
		sub    %edx,%eax
		mov    ingame__Scanner__Y2,%edx
		sub    %ebx,%edx
		sar    %edx
		sar    %eax
		mov    %edx,0x18(%esp)
		mov    ingame__Scanner__X1,%edx # ingame.Scanner.X1
		add    %eax,%edx
		sar    $0x8,%edi
		mov    %edx,0x68(%esp)
		mov    0x18(%esp),%edx
		sar    $0x8,%esi
		add    %ebx,%edx
		mov    0x18(%esp),%ebp
		mov    %edx,0x6c(%esp)
		cmp    %ebp,%eax
		jge    jump_ae01e_cp2
		mov    %eax,%edx
		jmp    jump_ae020_cp2
	jump_ae01e_cp2:
		mov    %ebp,%edx
	jump_ae020_cp2:
		sub    $0x5,%edx
		mov    %edx,0x70(%esp)
		imul   %edx,%edx
		mov    %edx,0x74(%esp)
		mov    ingame__Scanner__MX,%edx
		shl    $0x10,%edx
		mov    %edx,0xb4(%esp)
		mov    %eax,%edx
		imul   %edi,%edx
		mov    ingame__Scanner__MZ,%ebx
		shl    $0x10,%ebx
		mov    %ebx,%ecx
		sub    %edx,%ecx
		mov    %ecx,0xf4(%esp)
		mov    %eax,%ecx
		imul   %esi,%ecx
		mov    0xb4(%esp),%eax
		sub    %ecx,%eax
		mov    %eax,0xb8(%esp)
		mov    0x18(%esp),%eax
		imul   %esi,%eax
		mov    0xf4(%esp),%ebp
		add    %eax,%ebp
		mov    %ebp,0x4(%esp)
		mov    0x18(%esp),%ebp
		imul   %edi,%ebp
		mov    %ebp,0x9c(%esp)
		mov    0xb8(%esp),%ebp
		sub    0x9c(%esp),%ebp
		mov    %ebp,0x8(%esp)

		/* back to original code */

		mov    EXPORT_SYMBOL(lbDisplay)+40,%eax # lbDisplay.GraphicsWindowX
		mov    %eax,0x48(%esp)
		mov    EXPORT_SYMBOL(lbDisplay)+44,%eax # lbDisplay.GraphicsWindowY
		mov    %eax,0x4c(%esp)
		mov    EXPORT_SYMBOL(lbDisplay)+48,%eax # lbDisplay.GraphicsWindowWidth
		mov    %eax,0x50(%esp)
		mov    EXPORT_SYMBOL(lbDisplay)+52,%eax # lbDisplay.GraphicsWindowHeight
		mov    ingame__Scanner__Y1,%edx
		mov    %eax,0x54(%esp)
		mov    ingame__Scanner__Y2,%eax
		sub    %edx,%eax
		lea    0x1(%eax),%ecx
		mov    ingame__Scanner__X1,%ebx # ingame.Scanner.X1
		mov    ingame__Scanner__X2,%eax
		sub    %ebx,%eax
		xor    %ebp,%ebp
		lea    0x1(%eax),%ebx
		mov    %ebp,0x14(%esp)
		mov    ingame__Scanner__X1,%eax # ingame.Scanner.X1
		mov    %ebp,0xcc(%esp)
		call   ac_LbScreenSetGraphicsWindow
		mov    ingame__Scanner__X2,%eax
		mov    ingame__Scanner__X1,%ecx # ingame.Scanner.X1
		mov    %ebp,0xd0(%esp)
		sub    %ecx,%eax
		mov    %ebp,0xd4(%esp)
		sub    $0x18,%eax
		mov    $0x80,%edx
		mov    %eax,0x10(%esp)
		mov    %eax,0xbc(%esp)
		neg    %eax
		mov    %edx,0xc8(%esp)
		mov    %eax,0xbc(%esp)
		jmp    jump_aeab0
	jump_aea5b:
		mov    0xc8(%esp),%ebp
		mov    0xcc(%esp),%eax
		mov    0xd0(%esp),%edx
		mov    0xd4(%esp),%ebx
		add    $0x80,%ebp
		add    $0x80,%eax
		add    $0x10,%edx
		add    $0xc,%ebx
		mov    %ebp,0xc8(%esp)
		mov    %eax,0xcc(%esp)
		mov    %edx,0xd0(%esp)
		mov    %ebx,0xd4(%esp)
		cmp    $0x100,%edx
		je     SCANNER_draw_signals_end
	jump_aeab0:
		mov    0xd4(%esp),%eax
		cmpb   $0x0,ingame__Scanner__BigBlip_0__Period(%eax)
		je     jump_aea5b
		mov    0x8(%esp),%edx
		mov    ingame__Scanner__BigBlip_0__Z(%eax),%ecx
		mov    ingame__Scanner__BigBlip_0__X(%eax),%ebp
		mov    0x4(%esp),%eax
		add    %ecx,%ecx
		mov    %esi,%ebx
		sub    %eax,%ecx
		add    %ebp,%ebp
		mov    %ecx,%eax
		sub    %edx,%ebp
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    %eax,0xb4(%esp)
		mov    %edi,%ebx
		mov    %ecx,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    %eax,0xa4(%esp)
		mov    %edi,%ebx
		mov    %ebp,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    %eax,0x9c(%esp)
		mov    %esi,%ebx
		mov    %ebp,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    %eax,%ebp
		mov    %edi,%ebx
		mov    %edi,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    %eax,%ecx
		mov    %esi,%ebx
		mov    %esi,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    0x9c(%esp),%edx
		mov    0xb4(%esp),%ebx
		add    %eax,%ecx
		sub    %ebx,%edx
		mov    %ecx,%ebx
		mov    %edx,%eax
		shl    $0x10,%eax
		sar    $0x10,%edx
		idiv   %ebx
		mov    0xa4(%esp),%edx
		mov    %eax,0x9c(%esp)
		mov    %ecx,%ebx
		add    %ebp,%edx
		mov    0x9c(%esp),%ecx
		mov    %edx,%eax
		shl    $0x10,%eax
		sar    $0x10,%edx
		idiv   %ebx
		mov    gameturn,%edx
		sar    $0x10,%ecx
		and    $0xf,%edx
		sar    $0x10,%eax
		mov    EXPORT_SYMBOL(circle_line_sz7)(,%edx,8),%ebp
		mov    data_155344(,%edx,8),%edx
		mov    %eax,0x1c(%esp)
		add    %ecx,%edx
		add    %ebp,%eax
		test   %edx,%edx
		jl     jump_aebfe
		mov    ingame__Scanner__Y1,%ebx
		mov    ingame__Scanner__Y2,%ebp
		add    %edx,%ebx
		cmp    %ebp,%ebx
		jg     jump_aebfe
		test   %eax,%eax
		jl     jump_aebfe
		mov    SCANNER_width,%ebp
		lea    0x0(,%edx,4),%ebx
		add    %ebp,%ebx
		cmp    (%ebx),%eax
		jg     jump_aebfe
		mov    0xd4(%esp),%ebx
		mov    ingame__Scanner__BigBlip_0__Colour(%ebx),%bl
		and    $0xff,%ebx
		mov    %ebx,0x9c(%esp)
		mov    0x9c(%esp),%ebp
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(pixmap)+0x2000(%ebp),%bl # pixmap.fade_table[0x2000+?]
		call   ac_LbDrawPixel
	jump_aebfe:
		mov    gameturn,%eax
		dec    %eax
		and    $0xf,%eax
		lea    0x0(,%eax,8),%edx
		mov    EXPORT_SYMBOL(circle_line_sz7)(%edx),%ebx
		mov    data_155344(%edx),%edx
		mov    0x1c(%esp),%eax
		add    %ecx,%edx
		add    %ebx,%eax
		test   %edx,%edx
		jl     jump_aec7d
		mov    ingame__Scanner__Y1,%ebx
		mov    ingame__Scanner__Y2,%ebp
		add    %edx,%ebx
		cmp    %ebp,%ebx
		jg     jump_aec7d
		test   %eax,%eax
		jl     jump_aec7d
		mov    SCANNER_width,%ebp
		lea    0x0(,%edx,4),%ebx
		add    %ebp,%ebx
		cmp    (%ebx),%eax
		jg     jump_aec7d
		mov    0xd4(%esp),%ebx
		mov    ingame__Scanner__BigBlip_0__Colour(%ebx),%bl
		and    $0xff,%ebx
		mov    %ebx,0x9c(%esp)
		mov    0x9c(%esp),%ebp
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(pixmap)+0x1800(%ebp),%bl # pixmap.fade_table[0x1800+?]
		call   ac_LbDrawPixel
	jump_aec7d:
		mov    gameturn,%eax
		sub    $0x2,%eax
		and    $0xf,%eax
		lea    0x0(,%eax,8),%edx
		mov    EXPORT_SYMBOL(circle_line_sz7)(%edx),%ebx
		mov    data_155344(%edx),%edx
		mov    0x1c(%esp),%eax
		add    %ecx,%edx
		add    %ebx,%eax
		test   %edx,%edx
		jl     jump_aece8
		mov    ingame__Scanner__Y1,%ebx
		mov    ingame__Scanner__Y2,%ecx
		add    %edx,%ebx
		cmp    %ecx,%ebx
		jg     jump_aece8
		test   %eax,%eax
		jl     jump_aece8
		mov    SCANNER_width,%ecx
		cmp    (%ecx,%edx,4),%eax
		jg     jump_aece8
		mov    0xd4(%esp),%ecx
		xor    %ebx,%ebx
		mov    ingame__Scanner__BigBlip_0__Colour(%ecx),%bl
		mov    EXPORT_SYMBOL(pixmap)+0x1000(%ebx),%bl # pixmap.fade_table[0x1000+?]
		and    $0xff,%ebx
		call   ac_LbDrawPixel
	jump_aece8:
		mov    0xc8(%esp),%eax
		mov    0xcc(%esp),%ecx
		mov    %eax,0xc4(%esp)
	jump_aecfd:
		mov    data_1db2f0(%ecx),%eax
		mov    0x4(%esp),%edx
		add    %eax,%eax
		mov    EXPORT_SYMBOL(SCANNER_bbpoint)(%ecx),%ebp
		mov    %eax,0xf4(%esp)
		mov    0x8(%esp),%eax
		mov    0xf4(%esp),%ebx
		add    %ebp,%ebp
		sub    %eax,%ebx
		sub    %edx,%ebp
		mov    %ebx,0xf4(%esp)
		mov    %ebp,%eax
		mov    %esi,%ebx
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    %eax,0xb8(%esp)
		mov    %edi,%ebx
		mov    %ebp,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    %eax,0xb4(%esp)
		mov    %edi,%ebx
		mov    0xf4(%esp),%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    %eax,0xa4(%esp)
		mov    %esi,%ebx
		mov    0xf4(%esp),%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    %eax,0x9c(%esp)
		mov    %edi,%ebx
		mov    %edi,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    %eax,%ebp
		mov    %esi,%ebx
		mov    %esi,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    0xa4(%esp),%edx
		add    %eax,%ebp
		mov    0xb8(%esp),%eax
		mov    %ebp,%ebx
		sub    %eax,%edx
		mov    %edx,%eax
		shl    $0x10,%eax
		sar    $0x10,%edx
		idiv   %ebx
		mov    0xb4(%esp),%edx
		mov    0x9c(%esp),%ebx
		add    $0x8,%ecx
		add    %ebx,%edx
		mov    %ebp,%ebx
		mov    %eax,0x9c(%esp)
		mov    %edx,%eax
		shl    $0x10,%eax
		sar    $0x10,%edx
		idiv   %ebx
		mov    0x9c(%esp),%edx
		sar    $0x10,%eax
		sar    $0x10,%edx
		mov    %eax,EXPORT_SYMBOL(dword_1DBB64)(%ecx)
		mov    0xc4(%esp),%ebp
		mov    %edx,data_1dbb68(%ecx)
		cmp    %ebp,%ecx
		jne    jump_aecfd
		xor    %eax,%eax
		mov    %eax,0xe4(%esp)
		mov    0xd4(%esp),%eax
		mov    %eax,0x84(%esp)
		mov    0xd0(%esp),%eax
		mov    %eax,0x80(%esp)
		jmp    jump_aefc8
	jump_aee34:
		inc    %eax
	jump_aee35:
		mov    0x10(%esp),%ebx
		mov    EXPORT_SYMBOL(dword_1DBB6C)(,%eax,8),%edx
		mov    EXPORT_SYMBOL(dword_1DBB70)(,%eax,8),%ecx
		mov    %edx,0x20(%esp)
		mov    %ebp,%eax
		mov    0xfc(%esp),%edx
		sub    %ebx,%eax
		cmp    %edx,%eax
		setg   %al
		mov    0x20(%esp),%edx
		and    $0xff,%eax
		sub    %ebx,%edx
		mov    %eax,0x34(%esp)
		cmp    %ecx,%edx
		setg   %dl
		and    $0xff,%edx
		mov    %edx,0x38(%esp)
		test   %eax,%eax
		je     jump_aee85
		test   %edx,%edx
		jne    jump_aefb0
	jump_aee85:
		cmpl   $0x0,0x38(%esp)
		je     jump_aeef8
		mov    0x20(%esp),%eax
		mov    0xfc(%esp),%edx
		mov    0xbc(%esp),%ebx
		sub    %edx,%ecx
		sub    %ebp,%edx
		sub    %ebp,%eax
		sub    %ebx,%edx
		mov    %eax,%ebx
		mov    %eax,0xf4(%esp)
		sub    %ecx,%ebx
		shl    $0x10,%edx
		shl    $0x10,%ebx
		mov    %ecx,0x18(%esp)
		mov    %edx,%eax
		shl    $0x10,%eax
		sar    $0x10,%edx
		idiv   %ebx
		mov    %eax,%ecx
		mov    %eax,%ebx
		mov    0xf4(%esp),%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    %ecx,%ebx
		lea    (%eax,%ebp,1),%edx
		mov    0x18(%esp),%eax
		mov    0xfc(%esp),%ecx
		mov    %edx,0x20(%esp)
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		add    %eax,%ecx
		jmp    jump_aef69
	jump_aeef8:
		cmpl   $0x0,0x34(%esp)
		je     jump_aef69
		mov    0x20(%esp),%ebx
		mov    0xfc(%esp),%eax
		mov    %ecx,%edx
		sub    %ebx,%ebp
		sub    %ebx,%edx
		mov    0xbc(%esp),%ebx
		sub    %ecx,%eax
		sub    %ebx,%edx
		mov    %ebp,%ebx
		sub    %eax,%ebx
		shl    $0x10,%edx
		shl    $0x10,%ebx
		mov    %eax,0x18(%esp)
		mov    %edx,%eax
		shl    $0x10,%eax
		sar    $0x10,%edx
		idiv   %ebx
		mov    %eax,0x9c(%esp)
		mov    %eax,%ebx
		mov    %ebp,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    0x20(%esp),%ebp
		mov    0x9c(%esp),%ebx
		add    %eax,%ebp
		mov    0x18(%esp),%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		lea    (%ecx,%eax,1),%edx
		mov    %edx,0xfc(%esp)
	jump_aef69:
		mov    0x84(%esp),%edx
		xor    %eax,%eax
		mov    ingame__Scanner__BigBlip_0__Counter(%edx),%al
		mov    $0x1f,%edx
		mov    0x84(%esp),%ebx
		sub    %eax,%edx
		xor    %eax,%eax
		shl    $0x9,%edx
		mov    ingame__Scanner__BigBlip_0__Colour(%ebx),%al
		mov    EXPORT_SYMBOL(pixmap)(%edx,%eax,1),%al # pixmap.fade_table[?]
		and    $0xff,%eax
		mov    0x20(%esp),%ebx
		push   %eax
		mov    0x100(%esp),%edx
		mov    %ebp,%eax
		call   ac_LbDrawLine
	jump_aefb0:
		mov    0xe4(%esp),%edx
		inc    %edx
		mov    %edx,0xe4(%esp)
		cmp    $0x10,%edx
		jge    jump_aea5b
	jump_aefc8:
		mov    0x80(%esp),%eax
		mov    0xe4(%esp),%ecx
		add    %ecx,%eax
		mov    EXPORT_SYMBOL(dword_1DBB70)(,%eax,8),%edx
		mov    EXPORT_SYMBOL(dword_1DBB6C)(,%eax,8),%ebp
		mov    %edx,0xfc(%esp)
		cmp    $0xf,%ecx
		jne    jump_aee34
		sub    %ecx,%eax
		jmp    jump_aee35
	SCANNER_draw_signals_end:


/*----------------------------------------------------------------*/
SCANNER_draw_new_transparent_sub3:	/* 0xAEFFD */
/*----------------------------------------------------------------*/
		/* cannot separate from sub2 without setting some local vars again
		   this looks difficult - sub2 modifies variables within loop
		 */
		cmpl   $0x0,EXPORT_SYMBOL(SCANNER_keep_arcs)
		jne    jump_af01e
		xor    %eax,%eax
		xor    %dl,%dl
	jump_af00a:
		add    $0x14,%eax
		mov    %dl,ingame__Scanner__Arc_0__Period-0x14(%eax)
		mov    %dl,ingame__Scanner__Arc_0__Counter-0x14(%eax)
		cmp    $0x50,%eax
		jne    jump_af00a
	jump_af01e:
		mov    0x10(%esp),%ecx
		xor    %edx,%edx
		mov    $0x50,%ebp
		mov    %edx,EXPORT_SYMBOL(SCANNER_keep_arcs)
		call   ac_SCANNER_process_arcpoints
		mov    %edx,0x88(%esp)
		mov    0x14(%esp),%eax
		mov    %ebp,(%esp)
		sub    %ecx,%eax
		mov    %edx,0xe0(%esp)
		mov    %eax,0xc0(%esp)
		jmp    jump_af086
	jump_af054:
		mov    (%esp),%ebp
		mov    0xe0(%esp),%eax
		mov    0x88(%esp),%edx
		add    $0x50,%ebp
		add    $0x14,%eax
		inc    %edx
		mov    %ebp,(%esp)
		mov    %eax,0xe0(%esp)
		mov    %edx,0x88(%esp)
		cmp    $0x4,%edx
		jge    jump_af46d
	jump_af086:
		mov    0xe0(%esp),%eax
		cmpb   $0x0,ingame__Scanner__Arc_0__Period(%eax)
		jne    jump_af09f
		cmpb   $0x0,ingame__Scanner__Arc_0__Counter(%eax)
		je     jump_af054
	jump_af09f:
		imul   $0x50,0x88(%esp),%eax
		mov    0x8(%esp),%edx
		mov    %eax,0x9c(%esp)
		mov    EXPORT_SYMBOL(SCANNER_arcpoint)+0x0(%eax),%ecx
		mov    EXPORT_SYMBOL(SCANNER_arcpoint)+0x4(%eax),%ebp
		mov    0x4(%esp),%eax
		add    %ecx,%ecx
		mov    %esi,%ebx
		sub    %eax,%ecx
		add    %ebp,%ebp
		mov    %ecx,%eax
		sub    %edx,%ebp
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    %eax,0xf4(%esp)
		mov    %edi,%ebx
		mov    %ecx,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    %eax,0xb8(%esp)
		mov    %edi,%ebx
		mov    %ebp,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    %eax,0xb4(%esp)
		mov    %esi,%ebx
		mov    %ebp,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    %eax,0xa4(%esp)
		mov    %edi,%ebx
		mov    %edi,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    %eax,%ecx
		mov    %esi,%ebx
		mov    %esi,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    0xb4(%esp),%edx
		mov    0xf4(%esp),%ebx
		add    %eax,%ecx
		sub    %ebx,%edx
		mov    %ecx,%ebx
		mov    %edx,%eax
		shl    $0x10,%eax
		sar    $0x10,%edx
		idiv   %ebx
		mov    0xb8(%esp),%edx
		mov    %eax,%ebp
		mov    0xa4(%esp),%eax
		mov    %ecx,%ebx
		add    %eax,%edx
		mov    %edx,%eax
		shl    $0x10,%eax
		sar    $0x10,%edx
		idiv   %ebx
		sar    $0x10,%eax
		mov    %eax,0x94(%esp)
		mov    0xe0(%esp),%eax
		mov    %eax,0xa0(%esp)
		mov    0x9c(%esp),%eax
		add    $0x10,%eax
		sar    $0x10,%ebp
		mov    %eax,0xd8(%esp)
		mov    (%esp),%eax
		mov    %ebp,0x98(%esp)
		mov    %eax,0xdc(%esp)
		jmp    jump_af276
	jump_af1ae:
		cmpl   $0x0,0x104(%esp)
		je     jump_af231
		mov    0x100(%esp),%eax
		mov    0x100(%esp),%ebx
		sub    %eax,%ebp
		mov    0xf8(%esp),%eax
		mov    %ecx,%edx
		sub    %ecx,%eax
		sub    %ebx,%edx
		mov    %eax,0x18(%esp)
		mov    0xc0(%esp),%eax
		mov    %ebp,%ebx
		sub    %eax,%edx
		sub    0x18(%esp),%ebx
		shl    $0x10,%edx
		shl    $0x10,%ebx
		mov    %edx,%eax
		shl    $0x10,%eax
		sar    $0x10,%edx
		idiv   %ebx
		mov    %eax,0xa4(%esp)
		mov    %eax,%ebx
		mov    %ebp,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    0x100(%esp),%ebp
		mov    0xa4(%esp),%ebx
		add    %eax,%ebp
		mov    0x18(%esp),%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		lea    (%ecx,%eax,1),%edx
		mov    %edx,0xf8(%esp)
	jump_af231:
		mov    0xa0(%esp),%edx
		xor    %eax,%eax
		mov    ingame__Scanner__Arc_0__Colour(%edx),%al
		mov    0x100(%esp),%ebx
		push   %eax
		mov    0xfc(%esp),%edx
		mov    %ebp,%eax
		call   ac_LbDrawLine
	jump_af256:
		mov    0xd8(%esp),%edx
		add    $0x10,%edx
		mov    0xdc(%esp),%ebx
		mov    %edx,0xd8(%esp)
		cmp    %ebx,%edx
		je     jump_af054
	jump_af276:
		mov    0x94(%esp),%eax
		mov    0xd8(%esp),%ecx
		mov    0xd8(%esp),%ebp
		mov    0x8(%esp),%edx
		mov    %esi,%ebx
		mov    %eax,0x8c(%esp)
		mov    EXPORT_SYMBOL(SCANNER_arcpoint)+0x0(%ecx),%ecx
		mov    0x98(%esp),%eax
		add    %ecx,%ecx
		mov    %eax,0x90(%esp)
		mov    0x4(%esp),%eax
		mov    EXPORT_SYMBOL(SCANNER_arcpoint)+0x4(%ebp),%ebp
		sub    %eax,%ecx
		add    %ebp,%ebp
		mov    %ecx,%eax
		sub    %edx,%ebp
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    %eax,0xb8(%esp)
		mov    %edi,%ebx
		mov    %ecx,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    %eax,0xb4(%esp)
		mov    %edi,%ebx
		mov    %ebp,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    %eax,0xa4(%esp)
		mov    %esi,%ebx
		mov    %ebp,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    %eax,%ebp
		mov    %edi,%ebx
		mov    %edi,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    %eax,%ecx
		mov    %esi,%ebx
		mov    %esi,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    0xa4(%esp),%edx
		mov    0xb8(%esp),%ebx
		add    %eax,%ecx
		sub    %ebx,%edx
		mov    %ecx,%ebx
		mov    %edx,%eax
		shl    $0x10,%eax
		sar    $0x10,%edx
		idiv   %ebx
		mov    0xb4(%esp),%edx
		mov    %ecx,%ebx
		add    %ebp,%edx
		mov    %eax,0xa4(%esp)
		mov    %edx,%eax
		shl    $0x10,%eax
		sar    $0x10,%edx
		idiv   %ebx
		mov    0xa4(%esp),%edx
		mov    0x8c(%esp),%ebp
		sar    $0x10,%eax
		sar    $0x10,%edx
		mov    %eax,0x94(%esp)
		mov    0x90(%esp),%eax
		mov    %edx,0x98(%esp)
		mov    %edx,%ecx
		mov    %eax,0xf8(%esp)
		mov    0x94(%esp),%eax
		mov    0x10(%esp),%edx
		mov    %eax,0x100(%esp)
		mov    %ebp,%eax
		mov    0x14(%esp),%ebx
		sub    %edx,%eax
		mov    0x90(%esp),%edx
		sub    %ebx,%edx
		cmp    %edx,%eax
		setg   %al
		xor    %edx,%edx
		mov    0x94(%esp),%ebx
		mov    %al,%dl
		sub    0x10(%esp),%ebx
		mov    %ecx,%eax
		sub    0x14(%esp),%eax
		mov    %edx,0x104(%esp)
		cmp    %eax,%ebx
		setg   %al
		and    $0xff,%eax
		mov    %eax,0x108(%esp)
		test   %edx,%edx
		je     jump_af3ea
		test   %eax,%eax
		jne    jump_af256
	jump_af3ea:
		cmpl   $0x0,0x108(%esp)
		je     jump_af1ae
		mov    0x100(%esp),%eax
		mov    0xf8(%esp),%edx
		mov    0xc0(%esp),%ebx
		sub    %edx,%ecx
		sub    %ebp,%edx
		sub    %ebp,%eax
		sub    %ebx,%edx
		mov    %eax,%ebx
		mov    %eax,0xf4(%esp)
		sub    %ecx,%ebx
		shl    $0x10,%edx
		shl    $0x10,%ebx
		mov    %ecx,0x18(%esp)
		mov    %edx,%eax
		shl    $0x10,%eax
		sar    $0x10,%edx
		idiv   %ebx
		mov    %eax,%ecx
		mov    %eax,%ebx
		mov    0xf4(%esp),%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    %ecx,%ebx
		lea    (%eax,%ebp,1),%edx
		mov    0x18(%esp),%eax
		mov    0xf8(%esp),%ecx
		mov    %edx,0x100(%esp)
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		add    %eax,%ecx
		jmp    jump_af231
	jump_af46d:
		mov    0x54(%esp),%ecx
		mov    0x50(%esp),%ebx
		mov    0x4c(%esp),%edx
		mov    0x48(%esp),%eax
		call   ac_LbScreenSetGraphicsWindow
		xor    %eax,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(things_used),%ax
		mov    things_used_head,%dx
		mov    %eax,0x58(%esp)
		test   %edx,%edx
		jle    jump_af96e
	jump_af49f:
		mov    0x58(%esp),%ebp
		dec    %ebp
		mov    %ebp,0x58(%esp)
		cmp    $0xffffffff,%ebp
		je     jump_af96e
		imul   $0xa8,%edx,%edx
		mov    things,%ecx
		add    %edx,%ecx
		xor    %eax,%eax
		mov    0x9(%ecx),%al
		cmp    $0x2,%eax
		je     jump_af4e5
		cmp    $0x3,%eax
		je     jump_af4e5
		cmp    $0xf,%eax
		jne    jump_af960
		xor    %eax,%eax
		mov    0x8(%ecx),%al
		cmp    $0x30,%eax
		jne    jump_af960
	jump_af4e5:
		testl  $0x21000002,0x44(%ecx)
		jne    jump_af960
		xor    %eax,%eax
		mov    0x9(%ecx),%al
		cmp    $0x3,%eax
		jne    jump_af52e
		testb  $0x40,0xd(%ecx)
		je     jump_af52e
		mov    0x5c(%ecx),%eax
		sar    $0x10,%eax
		imul   $0xa8,%eax,%eax
		mov    things,%ebx
		add    %eax,%ebx
		mov    0x20(%ebx),%edx
		shl    $0x8,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x7,%edx
		sbb    %edx,%eax
		sar    $0x7,%eax
		mov    0x18(%ebx),%edx
		jmp    jump_af544
	jump_af52e:
		mov    0x20(%ecx),%edx
		shl    $0x8,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x7,%edx
		sbb    %edx,%eax
		sar    $0x7,%eax
		mov    0x18(%ecx),%edx
	jump_af544:
		shl    $0x8,%edx
		mov    %eax,0xf0(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x7,%edx
		sbb    %edx,%eax
		sar    $0x7,%eax
		mov    %eax,%ebp
		mov    gameturn,%eax
		shr    $0x3,%eax
		test   $0x1,%al
		je     jump_af579
		xor    %eax,%eax
		mov    0x9(%ecx),%al
		cmp    $0x3,%eax
		jne    jump_af58e
		testb  $0x10,0xf(%ecx)
		jmp    jump_af588
	jump_af579:
		xor    %eax,%eax
		mov    0x9(%ecx),%al
		cmp    $0x2,%eax
		jne    jump_af58e
		cmpw   $0x0,0x5e(%ecx)
	jump_af588:
		jne    jump_af960
	jump_af58e:
		mov    0x4(%esp),%eax
		mov    0xf0(%esp),%ebx
		sub    %eax,%ebx
		mov    0x8(%esp),%eax
		mov    %ebx,0xf0(%esp)
		mov    %esi,%ebx
		sub    %eax,%ebp
		mov    0xf0(%esp),%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    %eax,0xa4(%esp)
		mov    %edi,%ebx
		mov    0xf0(%esp),%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    %eax,0xf4(%esp)
		mov    %edi,%ebx
		mov    %ebp,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    %eax,0xb4(%esp)
		mov    %esi,%ebx
		mov    %ebp,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    %eax,0xb8(%esp)
		mov    %edi,%ebx
		mov    %edi,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    %eax,%ebp
		mov    %esi,%ebx
		mov    %esi,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    0xb4(%esp),%edx
		mov    0xa4(%esp),%ebx
		add    %eax,%ebp
		sub    %ebx,%edx
		mov    %ebp,%ebx
		mov    %edx,%eax
		shl    $0x10,%eax
		sar    $0x10,%edx
		idiv   %ebx
		mov    0xf4(%esp),%edx
		mov    %eax,0xb4(%esp)
		mov    0xb8(%esp),%eax
		mov    %ebp,%ebx
		add    %eax,%edx
		mov    %edx,%eax
		shl    $0x10,%eax
		sar    $0x10,%edx
		idiv   %ebx
		mov    0xb4(%esp),%edx
		sar    $0x10,%edx
		sar    $0x10,%eax
		mov    %edx,0xec(%esp)
		mov    EXPORT_SYMBOL(scanner_blink),%edx
		mov    %eax,0xe8(%esp)
		test   %edx,%edx
		jne    jump_af71d
		xor    %ah,%ah
		mov    0x51(%ecx),%al
		mov    %eax,0x10c(%esp)
		xor    %eax,%eax
		jmp    jump_af693
	jump_af692:
		inc    %eax
	jump_af693:
		xor    %edx,%edx
		mov    ingame__Scanner__GroupCount,%dl
		cmp    %edx,%eax
		jge    jump_af6bd
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    0x10c(%esp),%dx
		mov    ingame__Scanner__Group(%eax),%bl
		cmp    %edx,%ebx
		jne    jump_af692
		mov    ingame__Scanner__GroupCol(%eax),%al
		jmp    jump_af6bf
	jump_af6bd:
		xor    %al,%al
	jump_af6bf:
		test   %al,%al
		je     jump_af71d
		mov    0xe8(%esp),%eax
		mov    ingame__Scanner__X1,%edx # ingame.Scanner.X1
		mov    ingame__Scanner__Y1,%ebx
		add    %edx,%eax
		mov    0xec(%esp),%edx
		add    %ebx,%edx
		mov    %edx,0x18(%esp)
		mov    0x6c(%esp),%edx
		mov    0x18(%esp),%ebx
		mov    0x68(%esp),%ebp
		sub    %edx,%ebx
		sub    %ebp,%eax
		mov    %ebx,0x18(%esp)
		mov    %eax,%ebx
		imul   %eax,%ebx
		mov    0x18(%esp),%edx
		imul   %edx,%edx
		add    %ebx,%edx
		cmp    0x5c(%esp),%edx
		jge    jump_af71d
		mov    %eax,0x60(%esp)
		mov    0x18(%esp),%eax
		mov    %edx,0x5c(%esp)
		mov    %eax,0x64(%esp)
	jump_af71d:
		mov    0xec(%esp),%ebp
		test   %ebp,%ebp
		jl     jump_af960
		mov    ingame__Scanner__Y1,%edx
		mov    ingame__Scanner__Y2,%ebx
		lea    (%edx,%ebp,1),%eax
		cmp    %ebx,%eax
		jg     jump_af960
		mov    0xe8(%esp),%ebp
		test   %ebp,%ebp
		jl     jump_af960
		mov    0xec(%esp),%eax
		mov    SCANNER_width,%edx
		shl    $0x2,%eax
		add    %edx,%eax
		cmp    (%eax),%ebp
		jle    jump_af7b4
		jmp    jump_af960
	jump_af76d:
		mov    $0x1,%eax
		jmp    jump_af7c9
	jump_af777:
		testb  $0x8,0xe(%ecx)
		je     jump_af786
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+0x05,%al
		jmp    jump_af7c9
	jump_af786:
		testb  $0x20,0xd(%ecx)
		je     jump_af7a2
		xor    %eax,%eax
		mov    0x99(%ecx),%al
		cmp    $0x1e,%eax
		jne    jump_af7a2
		xor    %eax,%eax
		mov    data_1db190,%al
		jmp    jump_af7c9
	jump_af7a2:
		xor    %eax,%eax
		mov    0x8(%ecx),%al
		mov    EXPORT_SYMBOL(SCANNER_people_colours)(%eax),%al
		and    $0xff,%eax
		jmp    jump_af7c9
	jump_af7b4:
		mov    0x9(%ecx),%al
		cmp    $0x3,%al
		jb     jump_af7c3
		jbe    jump_af777
		cmp    $0xf,%al
		je     jump_af76d
		jmp    jump_af7c7
	jump_af7c3:
		cmp    $0x2,%al
		je     jump_af76d
	jump_af7c7:
		xor    %eax,%eax
	jump_af7c9:
		test   %eax,%eax
		je     jump_af960
		testb  $0x2,0xc(%ecx)
		jne    jump_af8ee
		testb  $0x20,0xd(%ecx)
		je     jump_af84b
		xor    %edx,%edx
		mov    0x99(%ecx),%dl
		cmp    $0x1e,%edx
		je     jump_af84b
		mov    0xe8(%esp),%ebp
		mov    ingame__Scanner__X1,%edx # ingame.Scanner.X1
		mov    ingame__Scanner__Y1,%ebx
		add    %edx,%ebp
		mov    0xec(%esp),%edx
		add    %ebx,%edx
		cmpb   $0x0,in_network_game
		je     jump_af837
		xor    %eax,%eax
		mov    0x54(%ecx),%ax
		sar    $0x2,%eax
		mov    EXPORT_SYMBOL(byte_1C5C30)(%eax),%al
		and    $0xff,%eax
		mov    %eax,%ebx
		mov    %ebp,%eax
		call   ac_SCANNER_draw_mark_point5_blink4
		jmp    jump_af8ee
	jump_af837:
		mov    %eax,%ebx
		and    $0xff,%ebx
		mov    %ebp,%eax
		call   ac_SCANNER_draw_mark_point5_blink4
		jmp    jump_af8ee
	jump_af84b:
		mov    0xec(%esp),%edx
		add    ingame__Scanner__Y1,%edx
		mov    ingame__Scanner__X1,%ebx # ingame.Scanner.X1
		mov    %edx,0xac(%esp)
		mov    0xe8(%esp),%edx
		add    %ebx,%edx
		movzbl %al,%ebp
		mov    %edx,0xa8(%esp)
		mov    %ebp,%ebx
		mov    0xac(%esp),%edx
		mov    0xa8(%esp),%eax
		call   ac_LbDrawPixel
		testb  $0x1,gameturn
		je     jump_af8ee
		mov    0xa8(%esp),%eax
		mov    0xac(%esp),%edx
		mov    %ebp,%ebx
		dec    %eax
		call   ac_LbDrawPixel
		mov    0xa8(%esp),%eax
		mov    0xac(%esp),%edx
		mov    %ebp,%ebx
		inc    %eax
		call   ac_LbDrawPixel
		mov    0xac(%esp),%edx
		mov    0xa8(%esp),%eax
		mov    %ebp,%ebx
		inc    %edx
		call   ac_LbDrawPixel
		mov    0xac(%esp),%edx
		mov    0xa8(%esp),%eax
		mov    %ebp,%ebx
		dec    %edx
		call   ac_LbDrawPixel
	jump_af8ee:
		testb  $0x7,gameturn
		jne    jump_af960
		xor    %ah,%ah
		mov    0x51(%ecx),%al
		mov    %eax,0x110(%esp)
		xor    %eax,%eax
		jmp    jump_af908
	jump_af907:
		inc    %eax
	jump_af908:
		xor    %edx,%edx
		mov    ingame__Scanner__GroupCount,%dl
		cmp    %edx,%eax
		jge    jump_af932
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    0x110(%esp),%dx
		mov    ingame__Scanner__Group(%eax),%bl
		cmp    %edx,%ebx
		jne    jump_af907
		mov    ingame__Scanner__GroupCol(%eax),%al
		jmp    jump_af934
	jump_af932:
		xor    %al,%al
	jump_af934:
		and    $0xff,%eax
		je     jump_af960
		mov    0xec(%esp),%edx
		xor    %ebx,%ebx
		mov    ingame__Scanner__Y1,%ebp
		mov    %al,%bl
		add    %ebp,%edx
		mov    0xe8(%esp),%eax
		add    ingame__Scanner__X1,%eax # ingame.Scanner.X1
		call   ac_SCANNER_draw_mark_point7
	jump_af960:
		mov    0x4(%ecx),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		jg     jump_af49f
	jump_af96e:
		mov    sthings_used_head,%ax
		test   %ax,%ax
		je     SCANNER_draw_new_transparent_sub8_end
	jump_af97d:
		cwtl
		imul   $0x3c,%eax,%eax
		mov    EXPORT_SYMBOL(sthings),%edx
		add    %eax,%edx
		xor    %eax,%eax
		mov    0x9(%edx),%al
		mov    %edx,0xb0(%esp)
		cmp    $0x19,%eax
		jne    jump_afadf
		mov    0x20(%edx),%edx
		shl    $0x8,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x7,%edx
		sbb    %edx,%eax
		sar    $0x7,%eax
		mov    0xb0(%esp),%edx
		mov    0x18(%edx),%edx
		shl    $0x8,%edx
		mov    %eax,%ebp
		mov    %edx,%eax
		sar    $0x1f,%edx
		shl    $0x7,%edx
		sbb    %edx,%eax
		sar    $0x7,%eax
		mov    %eax,%ecx
		mov    0x4(%esp),%eax
		mov    %esi,%ebx
		sub    %eax,%ebp
		mov    0x8(%esp),%edx
		mov    %ebp,%eax
		sub    %edx,%ecx
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    %eax,0xf4(%esp)
		mov    %edi,%ebx
		mov    %ebp,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    %eax,%ebp
		mov    %edi,%ebx
		mov    %ecx,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    %eax,0xb8(%esp)
		mov    %esi,%ebx
		mov    %ecx,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    %eax,0xb4(%esp)
		mov    %edi,%ebx
		mov    %edi,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    %eax,%ecx
		mov    %esi,%ebx
		mov    %esi,%eax
		imul   %ebx
		mov    %dx,%ax
		rol    $0x10,%eax
		mov    0xb8(%esp),%edx
		mov    0xf4(%esp),%ebx
		add    %eax,%ecx
		sub    %ebx,%edx
		mov    %ecx,%ebx
		mov    %edx,%eax
		shl    $0x10,%eax
		sar    $0x10,%edx
		idiv   %ebx
		mov    0xb4(%esp),%edx
		mov    %eax,0xb4(%esp)
		mov    %ecx,%ebx
		add    %ebp,%edx
		mov    0xb0(%esp),%ecx
		mov    %edx,%eax
		shl    $0x10,%eax
		sar    $0x10,%edx
		idiv   %ebx
		mov    0xb4(%esp),%ebx
		mov    %eax,%edx
		xor    %eax,%eax
		sar    $0x10,%ebx
		mov    0x2c(%ecx),%ax
		sar    $0x10,%edx
		test   %eax,%eax
		jne    jump_afa9d
		mov    EXPORT_SYMBOL(colour_lookup)+0x05,%al
		jmp    jump_afaa4
	jump_afa9d:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+0x08,%al
	jump_afaa4:
		test   %ebx,%ebx
		jl     jump_afadf
		mov    ingame__Scanner__Y1,%ecx
		mov    ingame__Scanner__Y2,%ebp
		add    %ebx,%ecx
		cmp    %ebp,%ecx
		jg     jump_afadf
		test   %edx,%edx
		jl     jump_afadf
		mov    SCANNER_width,%ebp
		shl    $0x2,%ebx
		add    %ebp,%ebx
		cmp    (%ebx),%edx
		jg     jump_afadf
		xor    %ebx,%ebx
		mov    %al,%bl
		mov    ingame__Scanner__X1,%eax # ingame.Scanner.X1
		add    %edx,%eax
		mov    %ecx,%edx
		call   ac_LbDrawPixel
	jump_afadf:
		mov    0xb0(%esp),%eax
		mov    0x6(%eax),%ax
		test   %ax,%ax
		jne    jump_af97d
	SCANNER_draw_new_transparent_sub8_end:

SCANNER_draw_new_transparent_sub9:	/* 0xAFAF3 */
		/* the code blow uses the following previously set local vars:
		   0x5c(%esp) - modified within loops
		   0x60(%esp) - set within loops
		   0x64(%esp) - set within loops
		   0x68(%esp) - set at sub1 start
		   0x6c(%esp) - set at sub1 start
		   0x70(%esp) - set at sub1 start
		   0x74(%esp) - set at sub1 start
           conclusion: the chunk below cannot be easily separated as a function
		 */
		cmpl   $0x0,EXPORT_SYMBOL(scanner_blink)
		je     jump_afb56
		mov    ingame__Scanner__Angle,%eax
		mov    0x70(%esp),%edi
		mov    EXPORT_SYMBOL(lbSinTable)(,%eax,4),%edx
		imul   %edi,%edx
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%eax,4),%eax
		mov    %eax,%esi
		neg    %esi
		mov    %eax,0x18(%esp)
		mov    %esi,%eax
		imul   %edi,%eax
		mov    %esi,0x18(%esp)
		mov    0x68(%esp),%esi
		sar    $0x10,%edx
		add    %edx,%esi
		sar    $0x3,%edx
		sar    $0x10,%eax
		mov    0x6c(%esp),%edi
		mov    %eax,0x18(%esp)
		mov    %eax,%ebx
		add    %eax,%edi
		sar    $0x3,%ebx
		mov    %esi,%eax
		mov    %edi,%ebp
		mov    %ebx,0x18(%esp)
		mov    %ebx,%ecx
		sub    %edx,%eax
		jmp    jump_afbd7
	jump_afb56:
		mov    0x5c(%esp),%eax
		cmp    0x74(%esp),%eax
		jle    jump_afc1c
		cmp    $0x7fffffff,%eax
		jge    jump_afc1c
		mov    0x64(%esp),%edx
		mov    0x60(%esp),%eax
		call   ac_arctan
		and    $0xffff,%eax
		mov    0x70(%esp),%ebp
		mov    EXPORT_SYMBOL(lbSinTable)(,%eax,4),%edx
		imul   %ebp,%edx
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%eax,4),%eax
		mov    %eax,%edi
		neg    %edi
		mov    %eax,0x18(%esp)
		mov    %edi,%eax
		imul   %ebp,%eax
		mov    0x68(%esp),%esi
		mov    %edi,0x18(%esp)
		sar    $0x10,%edx
		mov    0x6c(%esp),%edi
		add    %edx,%esi
		sar    $0x10,%eax
		sar    $0x3,%edx
		mov    %eax,0x18(%esp)
		mov    %eax,%ebp
		add    %eax,%edi
		sar    $0x3,%ebp
		mov    %esi,%eax
		mov    %ebp,0x18(%esp)
		sub    %edx,%eax
		mov    0x18(%esp),%ebx
		mov    %edi,%ebp
		mov    0x18(%esp),%ecx
	jump_afbd7:
		sub    %ebx,%ebp
		mov    %eax,%ebx
		sub    %ecx,%ebx
		mov    %ebx,0x78(%esp)
		lea    (%edx,%ebp,1),%ecx
		mov    0x18(%esp),%ebx
		sub    %edx,%ebp
		add    %eax,%ebx
		xor    %eax,%eax
		mov    %edi,%edx
		mov    EXPORT_SYMBOL(colour_lookup)+1,%al
		mov    %ebx,0x7c(%esp)
		push   %eax
		mov    0x7c(%esp),%ebx
		mov    %esi,%eax
		call   ac_LbDrawLine
		xor    %eax,%eax
		mov    0x7c(%esp),%ebx
		mov    EXPORT_SYMBOL(colour_lookup)+1,%al
		mov    %ebp,%ecx
		push   %eax
		mov    %edi,%edx
		mov    %esi,%eax
		call   ac_LbDrawLine
	jump_afc1c:
		xor    %eax,%eax
		mov    ingame__Scanner__Y2,%ecx
		mov    EXPORT_SYMBOL(SCANNER_colour)+4,%al
		mov    ingame__Scanner__Y1,%edx
		push   %eax
		mov    ingame__Scanner__X1,%eax # ingame.Scanner.X1
		inc    %ecx
		dec    %eax
		dec    %edx
		mov    %eax,%ebx
		call   ac_LbDrawLine
		mov    ingame__Scanner__Y1,%edx
		xor    %eax,%eax
		mov    ingame__Scanner__X2,%ebx
		mov    EXPORT_SYMBOL(SCANNER_colour)+4,%al
		dec    %edx
		sub    $0x18,%ebx
		push   %eax
		mov    ingame__Scanner__X1,%eax # ingame.Scanner.X1
		mov    %edx,%ecx
		dec    %eax
		call   ac_LbDrawLine
		mov    ingame__Scanner__Y2,%edx
		xor    %eax,%eax
		mov    ingame__Scanner__X2,%ebx
		mov    EXPORT_SYMBOL(SCANNER_colour)+4,%al
		inc    %edx
		push   %eax
		mov    ingame__Scanner__X1,%eax # ingame.Scanner.X1
		mov    %edx,%ecx
		dec    %eax
		call   ac_LbDrawLine
		mov    ingame__Scanner__Y1,%ecx
		mov    ingame__Scanner__X2,%ebx
		xor    %eax,%eax
		mov    ingame__Scanner__Y1,%edx
		mov    EXPORT_SYMBOL(SCANNER_colour)+4,%al
		add    $0x18,%ecx
		inc    %ebx
		push   %eax
		mov    ingame__Scanner__X2,%eax
		dec    %edx
		sub    $0x18,%eax
		call   ac_LbDrawLine
		xor    %eax,%eax
		mov    ingame__Scanner__Y2,%ecx
		mov    EXPORT_SYMBOL(SCANNER_colour)+4,%al
		mov    ingame__Scanner__Y1,%edx
		push   %eax
		mov    ingame__Scanner__X2,%eax
		inc    %ecx
		inc    %eax
		add    $0x18,%edx
		mov    %eax,%ebx
		call   ac_LbDrawLine
		add    $0x114,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_SCANNER_unkn_func_203)	/* 0x0B00E8 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    %eax,%ebp
		mov    %ebx,%edi
		mov    %ecx,%ebx
		mov    0x14(%esp),%cl
		cmp    %ebx,%edx
		jne    jump_b0180
		cmp    %eax,%edi
		jge    jump_b0108
		mov    %edi,%ebp
		mov    %eax,%edi
	jump_b0108:
		mov    EXPORT_SYMBOL(lbDisplay)+24,%eax # lbDisplay.PhysicalScreenWidth
		imul   %edx,%eax
		sub    %ebp,%edi
		mov    %edi,(%esp)
		movzbl %cl,%edi
		mov    0x1c(%esp),%ebx
		movzbl EXPORT_SYMBOL(SCANNER_pal_bright)(%edi),%edi
		mov    (%esp),%esi
		sar    %edi
		mov    EXPORT_SYMBOL(lbDisplay)+4,%edx # lbDisplay.WScreen
		add    %ebx,%edi
		add    %edx,%eax
		xor    %ebx,%ebx
		add    %ebp,%eax
		test   %esi,%esi
		jl     jump_b01fa
	jump_b013e:
		mov    (%eax),%dl
		and    $0xff,%edx
		mov    EXPORT_SYMBOL(SCANNER_pal_bright)(%edx),%dl
		and    $0xff,%edx
		sar    %edx
		mov    EXPORT_SYMBOL(SCANNER_bright_limit)(%edx,%edi,1),%dl
		and    $0xff,%edx
		movzbl %cl,%esi
		inc    %eax
		shl    $0x8,%edx
		inc    %ebx
		mov    EXPORT_SYMBOL(pixmap)(%edx,%esi,1),%dl # pixmap.fade_table[?]
		mov    (%esp),%esi
		mov    %dl,-0x1(%eax)
		cmp    %esi,%ebx
		jg     jump_b01fa
		jmp    jump_b013e
	jump_b0180:
		cmp    %edx,%ebx
		jge    jump_b018a
		mov    %edx,%eax
		mov    %ebx,%edx
		mov    %eax,%ebx
	jump_b018a:
		mov    EXPORT_SYMBOL(lbDisplay)+24,%eax # lbDisplay.PhysicalScreenWidth
		imul   %edx,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+4,%esi # lbDisplay.WScreen
		movzbl %cl,%edi
		add    %esi,%eax
		movzbl EXPORT_SYMBOL(SCANNER_pal_bright)(%edi),%edi
		add    %ebp,%eax
		mov    %ebx,%ebp
		sar    %edi
		sub    %edx,%ebp
		mov    0x1c(%esp),%edx
		xor    %ebx,%ebx
		add    %edx,%edi
		test   %ebp,%ebp
		jl     jump_b01fa
	jump_b01b8:
		mov    (%eax),%dl
		and    $0xff,%edx
		mov    EXPORT_SYMBOL(SCANNER_pal_bright)(%edx),%dl
		and    $0xff,%edx
		sar    %edx
		mov    EXPORT_SYMBOL(SCANNER_bright_limit)(%edx,%edi,1),%dl
		mov    %edx,%esi
		and    $0xff,%esi
		xor    %edx,%edx
		shl    $0x8,%esi
		mov    %cl,%dl
		mov    EXPORT_SYMBOL(pixmap)(%edx,%esi,1),%dl # pixmap.fade_table[?]
		mov    %dl,(%eax)
		mov    EXPORT_SYMBOL(lbDisplay)+24,%edx # lbDisplay.PhysicalScreenWidth
		inc    %ebx
		add    %edx,%eax
		cmp    %ebp,%ebx
		jle    jump_b01b8
	jump_b01fa:
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0xc


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_SCANNER_draw_objective_info)	/* 0x0B0204 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xf4,%esp
		mov    %eax,%ebp
		mov    %edx,0xa4(%esp)
		mov    %ebx,0xcc(%esp)
		add    %ebx,%eax
		mov    %edx,%esi
		dec    %eax
		xor    %edi,%edi
		mov    %eax,0xd0(%esp)
		jmp    jump_b0258
	jump_b022e:
		mov    ingame__Scanner__Contrast,%ebx
		mov    ingame__Scanner__Brightness,%ecx
		push   %ebx
		mov    %esi,%edx
		xor    %eax,%eax
		push   %ecx
		mov    EXPORT_SYMBOL(SCANNER_colour),%al
		mov    0xd8(%esp),%ebx
		push   %eax
		mov    %esi,%ecx
		mov    %ebp,%eax
		inc    %edi
		call   ac_SCANNER_unkn_func_203
		inc    %esi
	jump_b0258:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_b026c
		mov    $0x9,%eax
		jmp    jump_b0271
	jump_b026c:
		mov    $0x12,%eax
	jump_b0271:
		cmp    %eax,%edi
		jl     jump_b022e
		mov    EXPORT_SYMBOL(lbDisplay)+40,%eax # lbDisplay.GraphicsWindowX
		mov    %eax,0xc0(%esp)
		mov    EXPORT_SYMBOL(lbDisplay)+44,%eax # lbDisplay.GraphicsWindowY
		mov    %eax,0xbc(%esp)
		mov    EXPORT_SYMBOL(lbDisplay)+48,%eax # lbDisplay.GraphicsWindowWidth
		mov    %eax,0xc4(%esp)
		mov    EXPORT_SYMBOL(lbDisplay)+52,%eax # lbDisplay.GraphicsWindowHeight
		mov    %eax,0xc8(%esp)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_b02b9
		mov    $0x9,%ecx
		jmp    jump_b02be
	jump_b02b9:
		mov    $0x12,%ecx
	jump_b02be:
		mov    0xcc(%esp),%ebx
		mov    0xa4(%esp),%edx
		lea    0x1(%ebp),%eax
		sub    $0x2,%ebx
		call   ac_LbScreenSetGraphicsWindow
		movzbl EXPORT_SYMBOL(SCANNER_colour),%edi
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(scroll_text),%eax
		test   %eax,%eax # skip if the text pointer is NULL
		jz     jump_b03cf
		mov    EXPORT_SYMBOL(lbDisplay)+100,%dx # lbDisplay.ScreenMode
		mov    scanner_unkn3CC,%esi
		cmp    $0x1,%edx
		jne    jump_b0365
	jump_b02f7:
		mov    (%eax),%dh
		test   %dh,%dh
		je     jump_b03cf
		movsbl %dh,%edx
		lea    0x1(%eax),%ebp
		cmp    $0x1,%edx
		jne    jump_b0315
		movsbl 0x0(%ebp),%edi
		lea    (%edx,%ebp,1),%eax
		jmp    jump_b02f7
	jump_b0315:
		mov    (%eax),%al
		and    $0xff,%eax
		call   ac_my_char_to_upper
		and    $0xff,%eax
		imul   $0x6,%eax,%eax
		mov    EXPORT_SYMBOL(small_font),%edx
		xor    %ecx,%ecx
		add    %edx,%eax
		mov    EXPORT_SYMBOL(pixmap)+0x3800(%edi),%cl # pixmap.fade_table[?]
		sub    $0xba,%eax
		mov    $0x1,%edx
		mov    %eax,0xa8(%esp)
		mov    %eax,%ebx
		mov    %esi,%eax
		call   ac_LbSpriteDrawOneColour
		mov    0xa8(%esp),%edx
		xor    %eax,%eax
		mov    0x4(%edx),%al
		add    %eax,%esi
		mov    %ebp,%eax
		jmp    jump_b02f7
	jump_b0365:
		mov    (%eax),%dl
		test   %dl,%dl
		je     jump_b03cf
		lea    0x1(%eax),%ebx
		movsbl %dl,%edx
		mov    %ebx,0xd4(%esp)
		cmp    $0x1,%edx
		jne    jump_b0385
		movsbl (%ebx),%edi
		lea    (%ebx,%edx,1),%eax
		jmp    jump_b0365
	jump_b0385:
		mov    (%eax),%al
		and    $0xff,%eax
		call   ac_my_char_to_upper
		and    $0xff,%eax
		imul   $0x6,%eax,%eax
		mov    $0x2,%ebx
		mov    EXPORT_SYMBOL(small_font),%edx
		xor    %ecx,%ecx
		add    %edx,%eax
		mov    EXPORT_SYMBOL(pixmap)+0x3800(%edi),%cl # pixmap.fade_table[0x3800+?]
		lea    -0xba(%eax),%ebp
		mov    %esi,%edx
		mov    %ebp,%eax
		call   ac_SCANNER_unkn_func_200
		xor    %eax,%eax
		mov    0x4(%ebp),%al
		add    %eax,%esi
		add    %eax,%esi
		mov    0xd4(%esp),%eax
		jmp    jump_b0365
	jump_b03cf:
		cmpb   $0x0,in_network_game
		je     jump_b0411
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		xor    %eax,%eax
		mov    mouser,%al
		mov    data_1a6390(%edx,%eax,1),%al
		and    $0xff,%eax
		cmp    $0x11,%eax
		je     jump_b042d
	jump_b0411:
		test   %esi,%esi
		jge    jump_b0421
		mov    0xcc(%esp),%eax
		mov    %eax,scanner_unkn3CC
	jump_b0421:
		subl   $0x4,scanner_unkn3CC
		jmp    jump_b04af
	jump_b042d:
		mov    EXPORT_SYMBOL(lbDisplay)+24,%eax # lbDisplay.PhysicalScreenWidth
		mov    EXPORT_SYMBOL(lbDisplay)+24,%edx # lbDisplay.PhysicalScreenWidth
		sar    $0x2,%eax
		sub    %eax,%edx
		cmp    %edx,%esi
		jge    jump_b044b
		movl   $0xffffffec,scanner_unkn370
	jump_b044b:
		mov    EXPORT_SYMBOL(lbDisplay)+24,%eax # lbDisplay.PhysicalScreenWidth
		sub    $0x10,%eax
		cmp    %eax,%esi
		jle    jump_b0461
		movl   $0xa,scanner_unkn370
	jump_b0461:
		mov    scanner_unkn370,%eax
		test   %eax,%eax
		jle    jump_b0482
		mov    scanner_unkn3CC,%ebx
		lea    -0x1(%eax),%edx
		sub    $0x2,%ebx
		mov    %edx,scanner_unkn370
		mov    %ebx,scanner_unkn3CC
	jump_b0482:
		mov    scanner_unkn370,%ecx
		test   %ecx,%ecx
		jge    jump_b04af
		mov    scanner_unkn3CC,%edi
		lea    0x1(%ecx),%esi
		add    $0x2,%edi
		mov    %esi,scanner_unkn370
		mov    %edi,scanner_unkn3CC
		test   %edi,%edi
		jle    jump_b04af
		xor    %eax,%eax
		mov    %eax,scanner_unkn3CC
	jump_b04af:
		mov    0xc8(%esp),%ecx
		mov    0xc4(%esp),%ebx
		mov    0xbc(%esp),%edx
		mov    0xc0(%esp),%eax
		call   ac_LbScreenSetGraphicsWindow
		cmpb   $0x0,in_network_game
		je     jump_b08b4
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_b04fd
		mov    $0xb,%ecx
		mov    $0x19,%ebp
		mov    %ecx,0xdc(%esp)
		jmp    jump_b050e
	jump_b04fd:
		mov    $0x16,%ebx
		mov    $0x33,%ebp
		mov    %ebx,0xdc(%esp)
	jump_b050e:
		xor    %esi,%esi
		mov    $unkn2_names,%edi
		mov    %esi,0xac(%esp)
		mov    %edi,0xd8(%esp)
		mov    %esi,0xb0(%esp)
		jmp    jump_b0871
	jump_b052f:
		mov    0xd8(%esp),%edx
		mov    $player_unknCC9,%eax
		mov    0xb0(%esp),%edi
		mov    (%edx),%bl
		add    %edi,%eax
		test   %bl,%bl
		je     jump_b0560
		push   %eax
		push   %edx
		push   $ascSS_2
		lea    0xc(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0x10,%esp
		jmp    jump_b0573
	jump_b0560:
		push   %eax
		push   $ascS_20
	jump_b0566:
		lea    0x8(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
	jump_b0573:
		xor    %edx,%edx
		mov    %esp,%esi
		mov    EXPORT_SYMBOL(lbDisplay)+100,%dx # lbDisplay.ScreenMode
		lea    0x1(%ebp),%eax
		cmp    $0x1,%edx
		jne    jump_b06cb
		mov    (%esp),%cl
		mov    0xdc(%esp),%edi
		test   %cl,%cl
		jne    jump_b059d
		jmp    jump_b06c3
	jump_b059d:
		mov    $0xffffff4c,%edx
		mov    %eax,0xb4(%esp)
		mov    %edx,0xe0(%esp)
	jump_b05b0:
		mov    (%esi),%dl
		cmp    $0x20,%dl
		jne    jump_b05f6
		lea    0x1(%esi),%eax
		call   ac_font_word_length
		lea    (%eax,%edi,1),%edx
		mov    EXPORT_SYMBOL(lbDisplay)+24,%eax # lbDisplay.PhysicalScreenWidth
		sub    $0x8,%eax
		cmp    %eax,%edx
		jl     jump_b05ee
		mov    0xb4(%esp),%ecx
		mov    0xdc(%esp),%edi
		add    $0x6,%ecx
		add    $0x6,%ebp
		mov    %ecx,0xb4(%esp)
		jmp    jump_b06a8
	jump_b05ee:
		add    $0x4,%edi
		jmp    jump_b06a8
	jump_b05f6:
		xor    %eax,%eax
		mov    %dl,%al
		call   ac_my_char_to_upper
		and    $0xff,%eax
		imul   $0x6,%eax,%eax
		mov    EXPORT_SYMBOL(small_font),%edx
		add    %edx,%eax
		sub    $0xba,%eax
		mov    0xac(%esp),%edx
		mov    %eax,0xec(%esp)
		xor    %eax,%eax
		mov    player_unkn0C9(%edx),%al
		mov    0xe0(%esp),%ebx
		shl    $0x2,%eax
		add    %ebx,%eax
		cmp    $0x3f,%eax
		jle    jump_b0647
		mov    $0x3f,%edx
		sub    $0x3f,%eax
		sub    %eax,%edx
		mov    %edx,%eax
	jump_b0647:
		cmp    $0x3f,%eax
		jle    jump_b0651
		mov    $0x3f,%eax
	jump_b0651:
		test   %eax,%eax
		jge    jump_b0657
		xor    %eax,%eax
	jump_b0657:
		xor    %edx,%edx
		shl    $0x8,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+0x08,%dl
		xor    %ecx,%ecx
		mov    0xec(%esp),%ebx
		mov    EXPORT_SYMBOL(pixmap)(%edx,%eax,1),%cl # pixmap.fade_table[?]
		mov    0xb4(%esp),%edx
		lea    0x1(%edi),%eax
		call   ac_LbSpriteDrawOneColour
		mov    0xec(%esp),%ebx
		mov    %ebp,%edx
		xor    %ecx,%ecx
		mov    %edi,%eax
		mov    0xf0(%esp),%cl
		call   ac_LbSpriteDrawOneColour
		mov    0xec(%esp),%edx
		xor    %eax,%eax
		mov    0x4(%edx),%al
		add    %eax,%edi
	jump_b06a8:
		mov    0xe0(%esp),%ecx
		mov    0x1(%esi),%ah
		inc    %ecx
		inc    %esi
		mov    %ecx,0xe0(%esp)
		test   %ah,%ah
		jne    jump_b05b0
	jump_b06c3:
		add    $0x6,%ebp
		jmp    jump_b0809
	jump_b06cb:
		mov    (%esp),%bh
		mov    0xdc(%esp),%edi
		test   %bh,%bh
		jne    jump_b06de
		jmp    jump_b0806
	jump_b06de:
		mov    $0xffffff4c,%ecx
		mov    %eax,0xe4(%esp)
		mov    %ecx,0xb8(%esp)
	jump_b06f1:
		cmpb   $0x20,(%esi)
		jne    jump_b0737
		lea    0x1(%esi),%eax
		call   ac_font_word_length
		mov    EXPORT_SYMBOL(lbDisplay)+24,%edx # lbDisplay.PhysicalScreenWidth
		add    %eax,%eax
		sub    $0x10,%edx
		add    %edi,%eax
		cmp    %edx,%eax
		jl     jump_b072f
		mov    0xe4(%esp),%ebx
		mov    0xdc(%esp),%edi
		add    $0xc,%ebx
		add    $0xc,%ebp
		mov    %ebx,0xe4(%esp)
		jmp    jump_b07eb
	jump_b072f:
		add    $0x8,%edi
		jmp    jump_b07eb
	jump_b0737:
		xor    %eax,%eax
		mov    (%esi),%al
		call   ac_my_char_to_upper
		and    $0xff,%eax
		imul   $0x6,%eax,%eax
		mov    EXPORT_SYMBOL(small_font),%edx
		add    %edx,%eax
		sub    $0xba,%eax
		mov    0xac(%esp),%edx
		mov    %eax,0xe8(%esp)
		xor    %eax,%eax
		mov    player_unkn0C9(%edx),%al
		mov    0xb8(%esp),%edx
		shl    $0x2,%eax
		add    %edx,%eax
		cmp    $0x3f,%eax
		jle    jump_b0788
		mov    $0x3f,%edx
		sub    $0x3f,%eax
		sub    %eax,%edx
		mov    %edx,%eax
	jump_b0788:
		cmp    $0x3f,%eax
		jle    jump_b0792
		mov    $0x3f,%eax
	jump_b0792:
		test   %eax,%eax
		jge    jump_b0798
		xor    %eax,%eax
	jump_b0798:
		xor    %edx,%edx
		shl    $0x8,%eax
		mov    EXPORT_SYMBOL(colour_lookup)+0x08,%dl
		xor    %ecx,%ecx
		mov    0xe4(%esp),%ebx
		mov    EXPORT_SYMBOL(pixmap)(%edx,%eax,1),%cl # pixmap.fade_table[?]
		mov    0xe8(%esp),%eax
		lea    0x1(%edi),%edx
		call   ac_SCANNER_unkn_func_200
		mov    0xe8(%esp),%eax
		mov    %ebp,%ebx
		xor    %ecx,%ecx
		mov    %edi,%edx
		mov    0xf0(%esp),%cl
		call   ac_SCANNER_unkn_func_200
		mov    0xe8(%esp),%edx
		xor    %eax,%eax
		mov    0x4(%edx),%al
		add    %eax,%edi
		add    %eax,%edi
	jump_b07eb:
		mov    0xb8(%esp),%ebx
		mov    0x1(%esi),%ch
		inc    %ebx
		inc    %esi
		mov    %ebx,0xb8(%esp)
		test   %ch,%ch
		jne    jump_b06f1
	jump_b0806:
		add    $0xc,%ebp
	jump_b0809:
		mov    0xac(%esp),%eax
		decb   player_unkn0C9(%eax)
		mov    0xac(%esp),%edx
		xor    %eax,%eax
		mov    player_unkn0C9(%edx),%al
		test   %eax,%eax
		jne    jump_b0838
		mov    0xb0(%esp),%eax
		xor    %bl,%bl
		mov    %bl,player_unknCC9(%eax)
	jump_b0838:
		mov    0xd8(%esp),%edx
		mov    0xb0(%esp),%ebx
		mov    0xac(%esp),%ecx
		add    $0x10,%edx
		add    $0x80,%ebx
		inc    %ecx
		mov    %edx,0xd8(%esp)
		mov    %ebx,0xb0(%esp)
		mov    %ecx,0xac(%esp)
		cmp    $0x8,%ecx
		jge    jump_b08b4
	jump_b0871:
		mov    0xac(%esp),%eax
		cmpb   $0x0,player_unkn0C9(%eax)
		je     jump_b0838
		mov    EXPORT_SYMBOL(byte_1C5C30)(%eax),%al
		mov    %al,0xf0(%esp)
		mov    0xb0(%esp),%eax
		cmpb   $0x0,player_unknCC9(%eax)
		jne    jump_b052f
		mov    0xd8(%esp),%edx
		push   %edx
		push   $aSSaidNothing_
		jmp    jump_b0566
	jump_b08b4:
		add    $0xf4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_SCANNER_unkn_func_205)	/* 0x0B0908 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x58,%esp
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		xor    %edx,%edx
		mov    mouser,%dl
		mov    data_1a6390(%edx,%eax,1),%al
		and    $0xff,%eax
		cmp    $0x11,%eax
		jne    jump_b099d
		testb  $0x1,gameturn
		je     jump_b0954
		mov    $0x2d,%al
		jmp    jump_b0956
	jump_b0954:
		mov    $0x20,%al
	jump_b0956:
		movsbl %al,%eax
		push   %eax
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(local_player_no),%al
		mov    %eax,%edx
		shl    $0x7,%edx
		add    $player_unknCC9,%edx
		mov    EXPORT_SYMBOL(byte_1C5C30)(%eax),%al
		push   %edx
		and    $0xff,%eax
		push   %eax
		push   $0x1
		push   $ascCCSC
		push   $data_1dc374
		mov    $data_1dc374,%edx
		call   ac_sprintf
		add    $0x18,%esp
		mov    %edx,EXPORT_SYMBOL(scroll_text)
		jmp    jump_b0bc3
	jump_b099d:
		xor    %eax,%eax
	jump_b099f:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(byte_1C5C28)(%eax),%dl
		xor    %ebx,%ebx
		inc    %eax
		mov    %bx,0x40(%esp,%edx,2)
		cmp    $0x8,%eax
		jb     jump_b099f
		xor    %ebx,%ebx
		xor    %esi,%esi
		xor    %edi,%edi
		mov    %ebx,0x50(%esp)
		mov    $0x8,%ebp
		jmp    jump_b0a29
	jump_b09c5:
		movswl (%ebx),%ecx
		add    %ecx,0x20(%esp,%eax,1)
	jump_b09cc:
		inc    %edx
		add    $0x2,%ebx
		cmp    $0x8,%edx
		jae    jump_b09f0
	jump_b09d5:
		mov    0x50(%esp),%ecx
		mov    EXPORT_SYMBOL(byte_1C5C30)(%ecx),%cl
		cmp    EXPORT_SYMBOL(byte_1C5C30)(%edx),%cl
		jne    jump_b09c5
		movswl (%ebx),%ecx
		sub    %ecx,0x20(%esp,%eax,1)
		jmp    jump_b09cc
	jump_b09f0:
		mov    0x50(%esp),%edx
		cmpb   $0x0,EXPORT_SYMBOL(byte_1C5C28)(%edx)
		je     jump_b0a13
		mov    0x50(%esp),%ebx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(byte_1C5C28)(%ebx),%dl
		mov    0x20(%esp,%eax,1),%ax
		add    %ax,0x40(%esp,%edx,2)
	jump_b0a13:
		mov    0x50(%esp),%ecx
		add    $0x4,%esi
		inc    %ecx
		add    $0x1aa,%edi
		mov    %ecx,0x50(%esp)
		cmp    %ecx,%ebp
		jbe    jump_b0a6c
	jump_b0a29:
		mov    0x50(%esp),%cl
		xor    %edx,%edx
		mov    $0x1,%eax
		mov    ingame__InNetGame_UNSURE,%dl
		shl    %cl,%eax
		test   %eax,%edx
		je     jump_b0a13
		xor    %ecx,%ecx
		mov    EXPORT_SYMBOL(players)+0x09C(%edi),%eax # players[0].MyAgent[0]
		mov    %ecx,0x20(%esp,%esi,1)
		mov    0x54(%eax),%ax
		and    $0xffff,%eax
		sar    $0x2,%eax
		imul   $0x28,%eax,%eax
		add    $mission_status,%eax
		lea    0x10(%eax),%ebx
		xor    %edx,%edx
		mov    %esi,%eax
		jmp    jump_b09d5
	jump_b0a6c:
		movb   $0x20,data_1dc374
		mov    $data_1dc374,%edx
		inc    %edx
		xor    %ebx,%ebx
		xor    %edi,%edi
		movb   $0x2d,(%edx)
		inc    %edx
		xor    %esi,%esi
		mov    %ebx,0x54(%esp)
		movb   $0x20,(%edx)
		inc    %edx
		mov    $0x8,%ebp
		jmp    jump_b0b24
	jump_b0a95:
		mov    0x20(%esp,%esi,1),%eax
		push   %eax
		push   $ascD_56
		lea    0x8(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
	jump_b0aac:
		mov    0x54(%esp),%ecx
		xor    %ebx,%ebx
		mov    level_def__PlayableGroups(%ecx),%bl
		shl    $0x4,%ebx
		mov    data_19f1a0(%ebx),%ebx
		sar    $0x10,%ebx
		mov    %esp,%eax
		test   %ebx,%ebx
		jne    jump_b0ae7
		testb  $0x4,unkn_flags_08
		jne    jump_b0ae7
		test   %ebp,gameturn
		je     jump_b0ae7
	jump_b0adb:
		cmpb   $0x0,(%eax)
		je     jump_b0af4
		inc    %eax
		movb   $0x2d,(%edx)
		inc    %edx
		jmp    jump_b0adb
	jump_b0ae7:
		mov    (%eax),%bh
		test   %bh,%bh
		je     jump_b0af4
		inc    %edx
		inc    %eax
		mov    %bh,-0x1(%edx)
		jmp    jump_b0ae7
	jump_b0af4:
		movb   $0x1,(%edx)
		inc    %edx
		inc    %edx
		mov    EXPORT_SYMBOL(SCANNER_colour),%al
		mov    %al,-0x1(%edx)
		movb   $0x20,(%edx)
		inc    %edx
		movb   $0x2d,(%edx)
		inc    %edx
		movb   $0x20,(%edx)
		inc    %edx
	jump_b0b0d:
		mov    0x54(%esp),%eax
		add    $0x10,%edi
		inc    %eax
		add    $0x4,%esi
		mov    %eax,0x54(%esp)
		cmp    %eax,%ebp
		jbe    jump_b0bb5
	jump_b0b24:
		cmpb   $0x0,unkn2_names(%edi)
		je     jump_b0b0d
		mov    0x54(%esp),%cl
		xor    %ebx,%ebx
		mov    $0x1,%eax
		mov    ingame__InNetGame_UNSURE,%bl
		shl    %cl,%eax
		test   %eax,%ebx
		je     jump_b0b0d
		mov    0x54(%esp),%eax
		movb   $0x1,(%edx)
		mov    EXPORT_SYMBOL(byte_1C5C30)(%eax),%al
		mov    %al,0x1(%edx)
		mov    $unkn2_names,%eax
		add    %edi,%eax
		inc    %edx
		mov    (%eax),%bl
		inc    %edx
		test   %bl,%bl
		je     jump_b0b6f
	jump_b0b63:
		mov    (%eax),%bl
		inc    %eax
		mov    %bl,(%edx)
		mov    (%eax),%bh
		inc    %edx
		test   %bh,%bh
		jne    jump_b0b63
	jump_b0b6f:
		mov    0x54(%esp),%eax
		movb   $0x20,(%edx)
		mov    EXPORT_SYMBOL(byte_1C5C28)(%eax),%cl
		inc    %edx
		test   %cl,%cl
		je     jump_b0a95
		mov    0x54(%esp),%ebx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(byte_1C5C28)(%ebx),%al
		mov    0x3e(%esp,%eax,2),%eax
		sar    $0x10,%eax
		push   %eax
		mov    0x24(%esp,%esi,1),%ebx
		push   %ebx
		push   $ascDD
		lea    0xc(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0x10,%esp
		jmp    jump_b0aac
	jump_b0bb5:
		mov    $data_1dc374,%ecx
		movb   $0x0,(%edx)
		mov    %ecx,EXPORT_SYMBOL(scroll_text)
	jump_b0bc3:
		add    $0x58,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
SCANNER_fill_in_a_little_bit:	/* 0x0B0C30 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x28,%esp
		mov    %edx,0x1c(%esp)
		mov    %ecx,0xc(%esp)
		cmp    %ebx,%eax
		jg     jump_b0dd6
		mov    %eax,%edx
		shl    $0x8,%ebx
		shl    $0xf,%edx
		shl    $0x8,%eax
		mov    %ebx,0x10(%esp)
		mov    %edx,0x18(%esp)
		mov    %eax,0x20(%esp)
	jump_b0c5d:
		mov    0x1c(%esp),%eax
		mov    0xc(%esp),%esi
		cmp    %esi,%eax
		jle    jump_b0cbe
	jump_b0c6d:
		mov    0x18(%esp),%edx
		mov    0x20(%esp),%ebx
		mov    0x10(%esp),%ecx
		add    $0x8000,%edx
		add    $0x100,%ebx
		mov    %edx,0x18(%esp)
		mov    %ebx,0x20(%esp)
		cmp    %ecx,%ebx
		jg     jump_b0dd6
		jmp    jump_b0c5d
	jump_b0c97:
		mov    EXPORT_SYMBOL(SCANNER_colour),%al
		mov    %al,0x24(%esp)
		jmp    jump_b0d20
	jump_b0ca5:
		mov    EXPORT_SYMBOL(SCANNER_colour)+1,%al
		mov    %al,0x24(%esp)
		jmp    jump_b0d20
	jump_b0cb3:
		mov    EXPORT_SYMBOL(SCANNER_colour)+2,%al
		mov    %al,0x24(%esp)
		jmp    jump_b0d20
	jump_b0cbe:
		mov    0x18(%esp),%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		mov    0x20(%esp),%edx
		mov    %eax,%ebp
		mov    0x1c(%esp),%eax
		add    %edx,%eax
		mov    %eax,0x14(%esp)
		mov    %esi,%eax
		mov    0x1c(%esp),%ecx
		shl    $0xf,%eax
		shl    $0xf,%ecx
		mov    %eax,(%esp)
	jump_b0cee:
		mov    %ecx,%edx
		mov    %ecx,%eax
		sar    $0x1f,%edx
		shl    $0x8,%edx
		sbb    %edx,%eax
		sar    $0x8,%eax
		mov    %eax,%ebx
		mov    %eax,%edx
		mov    %ebp,%eax
		mov    %ebp,%esi
		call   SCANNER_find_colour
		cmp    $0x1,%eax
		jb     jump_b0d18
		jbe    jump_b0ca5
		cmp    $0x2,%eax
		je     jump_b0cb3
		jmp    jump_b0d20
	jump_b0d18:
		test   %eax,%eax
		je     jump_b0c97
	jump_b0d20:
		mov    %esi,%eax
		mov    %ebx,%esi
		mov    %eax,%ebx
		add    $0x80,%eax
		movswl %si,%edi
		movswl %ax,%edx
		mov    %edi,%eax
		call   ac_alt_at_point
		mov    %eax,0x4(%esp)
		mov    %ebx,%eax
		sub    $0x80,%eax
		movswl %ax,%edx
		mov    %edi,%eax
		call   ac_alt_at_point
		mov    %eax,0x8(%esp)
		mov    %esi,%eax
		movswl %bx,%ebx
		add    $0x80,%eax
		mov    %ebx,%edx
		cwtl
		sub    $0x80,%esi
		call   ac_alt_at_point
		mov    %eax,%edi
		mov    %ebx,%edx
		movswl %si,%eax
		mov    0x8(%esp),%ebx
		call   ac_alt_at_point
		mov    0x4(%esp),%edx
		sub    %eax,%edi
		sub    %ebx,%edx
		mov    %edi,%eax
		sar    $0x9,%edx
		sar    $0x9,%eax
		add    $0x20,%edx
		add    %edx,%eax
		test   %eax,%eax
		jge    jump_b0d95
		xor    %eax,%eax
	jump_b0d95:
		cmp    $0x3f,%eax
		jle    jump_b0d9f
		mov    $0x3f,%eax
	jump_b0d9f:
		xor    %edx,%edx
		shl    $0x8,%eax
		mov    0x24(%esp),%dl
		mov    EXPORT_SYMBOL(pixmap)(%edx,%eax,1),%al # pixmap.fade_table[?]
		mov    0x14(%esp),%edx
		add    $0x8000,%ecx
		lea    0x1(%edx),%edi
		mov    %al,EXPORT_SYMBOL(SCANNER_data)(%edx)
		mov    (%esp),%eax
		mov    %edi,0x14(%esp)
		cmp    %eax,%ecx
		jg     jump_b0c6d
		jmp    jump_b0cee
	jump_b0dd6:
		add    $0x28,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
SCANNER_clear:	/* 0x0B0DE0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		mov    $0x10000,%ebx
		xor    %edx,%edx
		mov    $EXPORT_SYMBOL(SCANNER_data),%eax
		mov    EXPORT_SYMBOL(SCANNER_colour),%dl
		call   ac_memset
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_bang_init)	/* 0xB0E00 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		mov    $0x3000,%ebx
		mov    $shrapnel,%eax
		xor    %edx,%edx
		call   ac_memset
		mov    $0x7000,%ebx
		mov    $EXPORT_SYMBOL(phwoar),%eax
		xor    %edx,%edx
		call   ac_memset
		mov    $0x1,%eax
		mov    $0x18,%edx
	jump_b0e30:
		mov    %eax,%ebx
		add    $0x18,%edx
		inc    %ebx
		inc    %eax
		mov    %bx,data_18d14a(%edx)
		cmp    $0x1ff,%eax
		jl     jump_b0e30
		xor    %ebx,%ebx
		mov    $0x1,%eax
		mov    %bx,data_18d162(%edx)
		mov    $0x1c,%edx
	jump_b0e58:
		mov    %eax,%ebx
		add    $0x1c,%edx
		inc    %ebx
		inc    %eax
		mov    %bx,data_190148(%edx)
		cmp    $0x3ff,%eax
		jl     jump_b0e58
		mov    $0x1,%esi
		mov    $0x3ff,%ebx
		xor    %ecx,%ecx
		mov    %si,shrapnel_free
		mov    %si,phwoar_free
		mov    %cx,data_190164(%edx)
		xor    %edx,%edx
		mov    %ebx,data_1dc4e0
		mov    %edx,phwoar__child
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_bang_set_detail)
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		test   %eax,%eax
		jbe    jump_b0fdd
		cmp    $0x1,%eax
		je     jump_b0eee
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_b0eee:
		mov    $0x2aa,%edx
		mov    $0x3,%ebx
		mov    $0x199,%ecx
		mov    $0x5,%esi
		mov    $0xba,%edi
		mov    $0xb,%ebp
		mov    $0x78,%eax
		mov    %edx,bangdetail__circle
		mov    %ebx,data_1a72c0
		mov    %ecx,data_1a72c4
		mov    %esi,data_1a72c8
		mov    %edi,data_1a72cc
		mov    %ebp,data_1a72d0
		mov    %eax,data_1a72d4
		mov    %ebx,data_1a72e4
		mov    %ebx,data_1a72f0
		mov    $0x11,%edx
		mov    $0x2,%ecx
		mov    $0x100,%esi
		mov    $0x4,%ebx
		mov    $0x3,%eax
		mov    %edx,data_1a72d8
		mov    %ecx,data_1a72e0
		mov    %esi,bangdetail__sphere
		mov    %ecx,data_1a72ec
		mov    %esi,data_1a72e8
		mov    %ebx,data_1a72f8
		mov    %ebx,data_1a7304
		mov    %eax,bangdetailmask
		mov    $0x5,%edx
		mov    $0x80,%ecx
		mov    $0x8,%esi
		mov    $0xf,%ebx
		mov    %edx,data_1a72fc
		mov    %ecx,data_1a72f4
		mov    %esi,data_1a7308
		mov    %ecx,data_1a7300
		mov    %ebx,minimum_explode_and
		mov    $0x457,%edx
		mov    $0x2,%ecx
		mov    %edx,minimum_explode_size
		mov    %ecx,minimum_explode_depth
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_b0fdd:
		mov    $0x200,%esi
		mov    $0x4,%edi
		mov    $0xe3,%ebp
		mov    $0x9,%eax
		mov    $0x78,%edx
		mov    $0x11,%ebx
		mov    $0x46,%ecx
		mov    %esi,bangdetail__circle
		mov    %edi,data_1a72c0
		mov    %ebp,data_1a72c4
		mov    %eax,data_1a72c8
		mov    %edx,data_1a72cc
		mov    %ebx,data_1a72d0
		mov    %ecx,data_1a72d4
		mov    $0x1d,%esi
		mov    $0x3,%edi
		mov    $0x2,%ebp
		mov    $0x100,%eax
		mov    $0x5,%edx
		mov    $0x4,%ebx
		mov    $0x80,%ecx
		mov    %esi,data_1a72d8
		mov    %edi,data_1a72e4
		mov    %ebp,data_1a72e0
		mov    %eax,bangdetail__sphere
		mov    %edx,data_1a72f0
		mov    %ebx,data_1a72ec
		mov    %ecx,data_1a72e8
		mov    %ebx,data_1a72f8
		mov    %ecx,data_1a72f4
		mov    %edx,data_1a7304
		mov    $0x8,%esi
		mov    $0xd,%eax
		mov    $0x66,%ebx
		mov    $0x1,%ecx
		mov    $0x1f,%edi
		mov    %esi,data_1a72fc
		mov    %eax,data_1a7308
		mov    %ebx,data_1a7300
		mov    %ecx,bangdetailmask
		mov    %edi,minimum_explode_and
		mov    $0x1bc,%esi
		mov    %ecx,minimum_explode_depth
		mov    %esi,minimum_explode_size
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
get_some_phwoar:	/* 0x0B1110 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		mov    phwoar_free,%dx
		test   %dx,%dx
		jne    jump_b1123
		xor    %eax,%eax
		pop    %edx
		pop    %ebx
		ret
	jump_b1123:
		mov    %edx,%ebx
		xor    %edx,%edx
		mov    %bx,%dx
		lea    0x0(,%edx,8),%eax
		sub    %edx,%eax
		mov    data_190164(,%eax,4),%ax
		mov    phwoar__child,%edx
		mov    %ax,phwoar_free
		mov    %ebx,%eax
		mov    data_1dc4e0,%ebx
		inc    %edx
		dec    %ebx
		mov    %edx,phwoar__child
		mov    %ebx,data_1dc4e0
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
give_some_shrapnel:	/* 0x0B1160 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		mov    %eax,%edx
		xor    %ebx,%ebx
		mov    %ax,%bx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		mov    shrapnel_free,%bx
		mov    %dx,shrapnel_free
		mov    %bx,data_18d162(,%eax,8)
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
give_some_phwoar:	/* 0x0B118C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		mov    %eax,%edx
		xor    %ebx,%ebx
		mov    %ax,%bx
		lea    0x0(,%ebx,8),%eax
		sub    %ebx,%eax
		lea    0x0(,%eax,4),%ebx
		mov    phwoar_free,%ax
		mov    %dx,phwoar_free
		mov    %ax,data_190164(%ebx)
		mov    phwoar__child,%edx
		mov    data_1dc4e0,%ebx
		dec    %edx
		inc    %ebx
		mov    %edx,phwoar__child
		mov    %ebx,data_1dc4e0
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
fillin_phwoar_type_info:	/* 0x0B11D8 */
/*----------------------------------------------------------------*/
		push   %edx
		sub    $0x20,%esp
		mov    %eax,%edx
		mov    0xf(%eax),%ah
		mov    %ah,%al
		cmp    $0x61,%ah
		jb     jump_b1970
		jbe    jump_b1518
		cmp    $0x78,%ah
		jb     jump_b1895
		jbe    jump_b12bf
		cmp    $0x9f,%ah
		jb     jump_b1846
		jbe    jump_b1292
		cmp    $0xb3,%ah
		jb     jump_b181f
		jbe    jump_b1292
		cmp    $0xbd,%ah
		jb     jump_b1815
		jbe    jump_b1238
		cmp    $0xbe,%ah
		je     jump_b17e8
		jmp    jump_b1ad0
	jump_b1238:
		mov    nstart_ani,%eax
		mov    0x708(%eax),%ax
		mov    %ax,0x14(%edx)
		call   ac_LbRandomAnyShort
		movb   $0xff,0x11(%edx)
		movb   $0x0,0x10(%edx)
		and    $0x3,%al
		movb   $0xe,0x12(%edx)
		add    $0x75,%al
		mov    %al,0x13(%edx)
		add    $0x20,%esp
		pop    %edx
		ret
	jump_b1265:
		mov    nstart_ani,%eax
		mov    0x708(%eax),%ax
		mov    %ax,0x14(%edx)
		call   ac_LbRandomAnyShort
		movb   $0x0,0x11(%edx)
		movb   $0x35,0x10(%edx)
		and    $0x3,%al
		movb   $0xe,0x12(%edx)
		add    $0x7,%al
		mov    %al,0x13(%edx)
		add    $0x20,%esp
		pop    %edx
		ret
	jump_b1292:
		mov    nstart_ani,%eax
		mov    0x708(%eax),%ax
		mov    %ax,0x14(%edx)
		call   ac_LbRandomAnyShort
		movb   $0xff,0x11(%edx)
		movb   $0x0,0x10(%edx)
		and    $0x3,%al
		movb   $0xe,0x12(%edx)
		add    $0x65,%al
		mov    %al,0x13(%edx)
		add    $0x20,%esp
		pop    %edx
		ret
	jump_b12bf:
		mov    nstart_ani,%eax
		mov    0x708(%eax),%ax
		mov    %ax,0x14(%edx)
		call   ac_LbRandomAnyShort
		movb   $0x0,0x11(%edx)
		movb   $0x23,0x10(%edx)
		and    $0x3,%al
		movb   $0xe,0x12(%edx)
		add    $0x7,%al
		mov    %al,0x13(%edx)
		add    $0x20,%esp
		pop    %edx
		ret
	jump_b12ec:
		mov    nstart_ani,%eax
		mov    0x708(%eax),%ax
		mov    %ax,0x14(%edx)
		call   ac_LbRandomAnyShort
		and    $0x3,%al
		add    $0x25,%al
		mov    %al,0x13(%edx)
		call   ac_LbRandomAnyShort
		movb   $0xd9,0x10(%edx)
		and    $0x3,%al
		movb   $0xe,0x12(%edx)
		add    $0x3,%al
		mov    %al,0x11(%edx)
		add    $0x20,%esp
		pop    %edx
		ret
	jump_b1321:
		mov    nstart_ani,%eax
		mov    0x708(%eax),%ax
		mov    %ax,0x14(%edx)
		call   ac_LbRandomAnyShort
		movb   $0xff,0x11(%edx)
		movb   $0x0,0x10(%edx)
		and    $0x3,%al
		movb   $0xe,0x12(%edx)
		add    $0x57,%al
		mov    %al,0x13(%edx)
		add    $0x20,%esp
		pop    %edx
		ret
	jump_b134e:
		mov    nstart_ani,%eax
		mov    0x708(%eax),%ax
		mov    %ax,0x14(%edx)
		call   ac_LbRandomAnyShort
		movb   $0x0,0x11(%edx)
		movb   $0x26,0x10(%edx)
		and    $0x3,%al
		movb   $0xe,0x12(%edx)
		add    $0x7,%al
		mov    %al,0x13(%edx)
		add    $0x20,%esp
		pop    %edx
		ret
	jump_b137b:
		mov    nstart_ani,%eax
		mov    0x708(%eax),%ax
		mov    %ax,0x14(%edx)
		call   ac_LbRandomAnyShort
		and    $0x3,%al
		add    $0x25,%al
		mov    %al,0x13(%edx)
		call   ac_LbRandomAnyShort
		movb   $0xd8,0x10(%edx)
		and    $0x3,%al
		movb   $0xe,0x12(%edx)
		add    $0x3,%al
		mov    %al,0x11(%edx)
		add    $0x20,%esp
		pop    %edx
		ret
	jump_b13b0:
		mov    nstart_ani,%eax
		mov    0x708(%eax),%ax
		mov    %ax,0x14(%edx)
		call   ac_LbRandomAnyShort
		movb   $0xff,0x11(%edx)
		movb   $0x0,0x10(%edx)
		and    $0x3,%al
		movb   $0xe,0x12(%edx)
		add    $0x55,%al
		mov    %al,0x13(%edx)
		add    $0x20,%esp
		pop    %edx
		ret
	jump_b13dd:
		mov    nstart_ani,%eax
		mov    0x708(%eax),%ax
		mov    %ax,0x14(%edx)
		call   ac_LbRandomAnyShort
		movb   $0x0,0x11(%edx)
		movb   $0x24,0x10(%edx)
		and    $0x3,%al
		movb   $0xe,0x12(%edx)
		add    $0x5,%al
		mov    %al,0x13(%edx)
		add    $0x20,%esp
		pop    %edx
		ret
	jump_b140a:
		mov    nstart_ani,%eax
		mov    0x708(%eax),%ax
		mov    %ax,0x14(%edx)
		call   ac_LbRandomAnyShort
		movb   $0xff,0x11(%edx)
		movb   $0x0,0x10(%edx)
		and    $0x3,%al
		movb   $0xe,0x12(%edx)
		add    $0x47,%al
		mov    %al,0x13(%edx)
		add    $0x20,%esp
		pop    %edx
		ret
	jump_b1437:
		mov    nstart_ani,%eax
		mov    0x708(%eax),%ax
		mov    %ax,0x14(%edx)
		call   ac_LbRandomAnyShort
		movb   $0xff,0x11(%edx)
		movb   $0x0,0x10(%edx)
		and    $0x3,%al
		movb   $0xe,0x12(%edx)
		add    $0x25,%al
		mov    %al,0x13(%edx)
		add    $0x20,%esp
		pop    %edx
		ret
	jump_b1464:
		mov    nstart_ani,%eax
		mov    0x708(%eax),%ax
		mov    %ax,0x14(%edx)
		call   ac_LbRandomAnyShort
		movb   $0x0,0x11(%edx)
		movb   $0x3,0x10(%edx)
		and    $0x3,%al
		movb   $0xe,0x12(%edx)
		add    $0xb,%al
		mov    %al,0x13(%edx)
		add    $0x20,%esp
		pop    %edx
		ret
	jump_b1491:
		mov    nstart_ani,%eax
		mov    0x708(%eax),%ax
		mov    %ax,0x14(%edx)
		call   ac_LbRandomAnyShort
		movb   $0x2,0x11(%edx)
		movb   $0x3,0x10(%edx)
		and    $0x3,%al
		movb   $0xe,0x12(%edx)
		add    $0xb,%al
		mov    %al,0x13(%edx)
		add    $0x20,%esp
		pop    %edx
		ret
	jump_b14be:
		mov    nstart_ani,%eax
		mov    0x708(%eax),%ax
		mov    %ax,0x14(%edx)
		call   ac_LbRandomAnyShort
		movb   $0xff,0x11(%edx)
		movb   $0x0,0x10(%edx)
		and    $0x3,%al
		movb   $0xe,0x12(%edx)
		add    $0x17,%al
		mov    %al,0x13(%edx)
		add    $0x20,%esp
		pop    %edx
		ret
	jump_b14eb:
		mov    nstart_ani,%eax
		mov    0x708(%eax),%ax
		mov    %ax,0x14(%edx)
		call   ac_LbRandomAnyShort
		movb   $0xc,0x11(%edx)
		movb   $0x7,0x10(%edx)
		and    $0x3,%al
		movb   $0xe,0x12(%edx)
		add    $0x3,%al
		mov    %al,0x13(%edx)
		add    $0x20,%esp
		pop    %edx
		ret
	jump_b1518:
		mov    nstart_ani,%eax
		mov    0x708(%eax),%ax
		mov    %ax,0x14(%edx)
		call   ac_LbRandomAnyShort
		movb   $0xc,0x11(%edx)
		movb   $0x23,0x10(%edx)
		and    $0x3,%al
		movb   $0xe,0x12(%edx)
		add    $0x3,%al
		mov    %al,0x13(%edx)
		add    $0x20,%esp
		pop    %edx
		ret
	jump_b1545:
		mov    nstart_ani,%eax
		mov    0x708(%eax),%ax
		mov    %ax,0x14(%edx)
		call   ac_LbRandomAnyShort
		movb   $0xff,0x11(%edx)
		movb   $0x0,0x10(%edx)
		and    $0x3,%al
		movb   $0xe,0x12(%edx)
		add    $0x73,%al
		mov    %al,0x13(%edx)
		add    $0x20,%esp
		pop    %edx
		ret
	jump_b1572:
		mov    nstart_ani,%eax
		mov    0x712(%eax),%ax
		mov    %ax,0x14(%edx)
		call   ac_LbRandomAnyShort
		movb   $0xff,0x11(%edx)
		movb   $0x0,0x10(%edx)
		and    $0x3,%al
		movb   $0x4,0x12(%edx)
		add    $0x45,%al
		mov    %al,0x13(%edx)
		add    $0x20,%esp
		pop    %edx
		ret
	jump_b159f:
		mov    nstart_ani,%eax
		mov    0x718(%eax),%ax
		mov    %ax,0x14(%edx)
		call   ac_LbRandomAnyShort
		movb   $0xff,0x11(%edx)
		movb   $0x0,0x10(%edx)
		and    $0x3,%al
		movb   $0x7,0x12(%edx)
		add    $0x75,%al
		mov    %al,0x13(%edx)
		add    $0x20,%esp
		pop    %edx
		ret
	jump_b15cc:
		mov    nstart_ani,%eax
		mov    0x718(%eax),%ax
		mov    %ax,0x14(%edx)
		call   ac_LbRandomAnyShort
		movb   $0xff,0x11(%edx)
		movb   $0x0,0x10(%edx)
		and    $0x3,%al
		movb   $0x7,0x12(%edx)
		add    $0x25,%al
		mov    %al,0x13(%edx)
		add    $0x20,%esp
		pop    %edx
		ret
	jump_b15f9:
		mov    nstart_ani,%eax
		mov    0x718(%eax),%ax
		mov    %ax,0x14(%edx)
		call   ac_LbRandomAnyShort
		movb   $0xff,0x11(%edx)
		movb   $0x0,0x10(%edx)
		and    $0x3,%al
		movb   $0x7,0x12(%edx)
		add    $0x15,%al
		mov    %al,0x13(%edx)
		add    $0x20,%esp
		pop    %edx
		ret
	jump_b1626:
		mov    nstart_ani,%eax
		mov    0x718(%eax),%ax
		mov    %ax,0x14(%edx)
		call   ac_LbRandomAnyShort
		movb   $0x0,0x11(%edx)
		movb   $0x9,0x10(%edx)
		and    $0x3,%al
		movb   $0x7,0x12(%edx)
		add    $0xb,%al
		mov    %al,0x13(%edx)
		add    $0x20,%esp
		pop    %edx
		ret
	jump_b1653:
		mov    nstart_ani,%eax
		mov    0x718(%eax),%ax
		mov    %ax,0x14(%edx)
		call   ac_LbRandomAnyShort
		movb   $0xff,0x11(%edx)
		movb   $0x0,0x10(%edx)
		and    $0x3,%al
		movb   $0x7,0x12(%edx)
		add    $0x35,%al
		mov    %al,0x13(%edx)
		add    $0x20,%esp
		pop    %edx
		ret
	jump_b1680:
		mov    nstart_ani,%eax
		mov    0x718(%eax),%ax
		mov    %ax,0x14(%edx)
		call   ac_LbRandomAnyShort
		movb   $0x0,0x11(%edx)
		movb   $0x23,0x10(%edx)
		and    $0x3,%al
		movb   $0x7,0x12(%edx)
		add    $0x7,%al
		mov    %al,0x13(%edx)
		add    $0x20,%esp
		pop    %edx
		ret
	jump_b16ad:
		mov    nstart_ani,%eax
		mov    0x73a(%eax),%ax
		mov    %ax,0x14(%edx)
		call   ac_LbRandomAnyShort
		movb   $0xff,0x11(%edx)
		movb   $0x0,0x10(%edx)
		and    $0x3,%al
		movb   $0x1,0x12(%edx)
		add    $0x11,%al
		mov    %al,0x13(%edx)
		add    $0x20,%esp
		pop    %edx
		ret
	jump_b16da:
		mov    nstart_ani,%eax
		mov    0x73a(%eax),%ax
		mov    %ax,0x14(%edx)
		call   ac_LbRandomAnyShort
		movb   $0x0,0x11(%edx)
		movb   $0x5,0x10(%edx)
		and    $0x3,%al
		movb   $0x1,0x12(%edx)
		inc    %al
		mov    %al,0x13(%edx)
		add    $0x20,%esp
		pop    %edx
		ret
	jump_b1707:
		mov    nstart_ani,%eax
		mov    0x708(%eax),%ax
		mov    %ax,0x14(%edx)
		call   ac_LbRandomAnyShort
		movb   $0xff,0x11(%edx)
		movb   $0x0,0x10(%edx)
		and    $0x3,%al
		movb   $0xe,0x12(%edx)
		add    $0x45,%al
		mov    %al,0x13(%edx)
		add    $0x20,%esp
		pop    %edx
		ret
	jump_b1734:
		mov    nstart_ani,%eax
		mov    0x708(%eax),%ax
		mov    %ax,0x14(%edx)
		call   ac_LbRandomAnyShort
		movb   $0x0,0x11(%edx)
		movb   $0x28,0x10(%edx)
		and    $0x3,%al
		movb   $0xe,0x12(%edx)
		add    $0x7,%al
		mov    %al,0x13(%edx)
		add    $0x20,%esp
		pop    %edx
		ret
	jump_b1761:
		mov    nstart_ani,%eax
		mov    0x708(%eax),%ax
		mov    %ax,0x14(%edx)
		call   ac_LbRandomAnyShort
		movb   $0x0,0x11(%edx)
		movb   $0x13,0x10(%edx)
		and    $0x3,%al
		movb   $0xe,0x12(%edx)
		add    $0x7,%al
		mov    %al,0x13(%edx)
		add    $0x20,%esp
		pop    %edx
		ret
	jump_b178e:
		mov    nstart_ani,%eax
		mov    0x708(%eax),%ax
		mov    %ax,0x14(%edx)
		call   ac_LbRandomAnyShort
		movb   $0x0,0x11(%edx)
		movb   $0x16,0x10(%edx)
		and    $0x3,%al
		movb   $0xe,0x12(%edx)
		add    $0x7,%al
		mov    %al,0x13(%edx)
		add    $0x20,%esp
		pop    %edx
		ret
	jump_b17bb:
		mov    nstart_ani,%eax
		mov    0x708(%eax),%ax
		mov    %ax,0x14(%edx)
		call   ac_LbRandomAnyShort
		movb   $0x0,0x11(%edx)
		movb   $0x15,0x10(%edx)
		and    $0x3,%al
		movb   $0xe,0x12(%edx)
		add    $0x7,%al
		mov    %al,0x13(%edx)
		add    $0x20,%esp
		pop    %edx
		ret
	jump_b17e8:
		mov    nstart_ani,%eax
		mov    0x708(%eax),%ax
		mov    %ax,0x14(%edx)
		call   ac_LbRandomAnyShort
		movb   $0x0,0x11(%edx)
		movb   $0x18,0x10(%edx)
		and    $0x3,%al
		movb   $0xe,0x12(%edx)
		add    $0x7,%al
		mov    %al,0x13(%edx)
		add    $0x20,%esp
		pop    %edx
		ret
	jump_b1815:
		cmp    $0xb4,%ah
		je     jump_b17bb
		jmp    jump_b1ad0
	jump_b181f:
		cmp    $0xa9,%ah
		jb     jump_b1838
		jbe    jump_b1707
		cmp    $0xaa,%ah
		je     jump_b178e
		jmp    jump_b1ad0
	jump_b1838:
		cmp    $0xa0,%ah
		je     jump_b1761
		jmp    jump_b1ad0
	jump_b1846:
		cmp    $0x8b,%ah
		jb     jump_b1878
		jbe    jump_b1292
		cmp    $0x95,%ah
		jb     jump_b186a
		jbe    jump_b1238
		cmp    $0x96,%ah
		je     jump_b1734
		jmp    jump_b1ad0
	jump_b186a:
		cmp    $0x8c,%ah
		je     jump_b1943
		jmp    jump_b1ad0
	jump_b1878:
		cmp    $0x81,%ah
		jb     jump_b1ad0
		jbe    jump_b1707
		cmp    $0x82,%ah
		je     jump_b134e
		jmp    jump_b1ad0
	jump_b1895:
		cmp    $0x69,%ah
		jb     jump_b18e9
		jbe    jump_b15f9
		cmp    $0x6f,%ah
		jb     jump_b18d2
		jbe    jump_b1680
		cmp    $0x72,%ah
		jb     jump_b18c4
		jbe    jump_b16da
		cmp    $0x77,%ah
		je     jump_b1292
		jmp    jump_b1ad0
	jump_b18c4:
		cmp    $0x71,%ah
		je     jump_b16ad
		jmp    jump_b1ad0
	jump_b18d2:
		cmp    $0x6a,%ah
		jbe    jump_b1626
		cmp    $0x6e,%ah
		je     jump_b1653
		jmp    jump_b1ad0
	jump_b18e9:
		cmp    $0x64,%ah
		jb     jump_b193a
		jbe    jump_b1572
		cmp    $0x67,%ah
		jb     jump_b192c
		jbe    jump_b15cc
		mov    nstart_ani,%eax
		mov    0x718(%eax),%ax
		mov    %ax,0x14(%edx)
		call   ac_LbRandomAnyShort
		movb   $0x0,0x11(%edx)
		movb   $0x4,0x10(%edx)
		and    $0x3,%al
		movb   $0x7,0x12(%edx)
		add    $0xb,%al
		mov    %al,0x13(%edx)
		add    $0x20,%esp
		pop    %edx
		ret
	jump_b192c:
		cmp    $0x65,%ah
		je     jump_b159f
		jmp    jump_b1ad0
	jump_b193a:
		cmp    $0x62,%ah
		jbe    jump_b1545
	jump_b1943:
		mov    nstart_ani,%eax
		mov    0x708(%eax),%ax
		mov    %ax,0x14(%edx)
		call   ac_LbRandomAnyShort
		movb   $0x0,0x11(%edx)
		movb   $0x25,0x10(%edx)
		and    $0x3,%al
		movb   $0xe,0x12(%edx)
		add    $0x7,%al
		mov    %al,0x13(%edx)
		add    $0x20,%esp
		pop    %edx
		ret
	jump_b1970:
		cmp    $0x48,%ah
		jb     jump_b1a44
		jbe    jump_b13b0
		cmp    $0x57,%ah
		jb     jump_b19e6
		jbe    jump_b1437
		cmp    $0x5a,%ah
		jb     jump_b19b0
		jbe    jump_b1464
		cmp    $0x5f,%ah
		jb     jump_b19a2
		jbe    jump_b14eb
		jmp    jump_b19b9
	jump_b19a2:
		cmp    $0x5e,%ah
		je     jump_b14be
		jmp    jump_b1ad0
	jump_b19b0:
		cmp    $0x58,%ah
		jbe    jump_b1491
	jump_b19b9:
		mov    nstart_ani,%eax
		mov    0x708(%eax),%ax
		mov    %ax,0x14(%edx)
		call   ac_LbRandomAnyShort
		movb   $0xff,0x11(%edx)
		movb   $0x0,0x10(%edx)
		and    $0x3,%al
		movb   $0xe,0x12(%edx)
		add    $0x77,%al
		mov    %al,0x13(%edx)
		add    $0x20,%esp
		pop    %edx
		ret
	jump_b19e6:
		cmp    $0x53,%ah
		jb     jump_b1a2d
		jbe    jump_b1437
		cmp    $0x55,%ah
		jb     jump_b1464
		jbe    jump_b1437
		mov    nstart_ani,%eax
		mov    0x708(%eax),%ax
		mov    %ax,0x14(%edx)
		call   ac_LbRandomAnyShort
		movb   $0x1,0x11(%edx)
		movb   $0x3,0x10(%edx)
		and    $0x3,%al
		movb   $0xe,0x12(%edx)
		add    $0xb,%al
		mov    %al,0x13(%edx)
		add    $0x20,%esp
		pop    %edx
		ret
	jump_b1a2d:
		cmp    $0x49,%ah
		jbe    jump_b13dd
		cmp    $0x52,%ah
		je     jump_b140a
		jmp    jump_b1ad0
	jump_b1a44:
		cmp    $0x3c,%ah
		jb     jump_b1aad
		jbe    jump_b12ec
		cmp    $0x40,%ah
		jb     jump_b1a9d
		jbe    jump_b134e
		cmp    $0x46,%ah
		jb     jump_b1a92
		jbe    jump_b137b
	jump_b1a65:
		mov    nstart_ani,%eax
		mov    0x708(%eax),%ax
		mov    %ax,0x14(%edx)
		call   ac_LbRandomAnyShort
		movb   $0x0,0x11(%edx)
		movb   $0x39,0x10(%edx)
		and    $0x3,%al
		movb   $0xe,0x12(%edx)
		add    $0x7,%al
		mov    %al,0x13(%edx)
		add    $0x20,%esp
		pop    %edx
		ret
	jump_b1a92:
		cmp    $0x45,%ah
		je     jump_b1238
		jmp    jump_b1ad0
	jump_b1a9d:
		cmp    $0x3d,%ah
		jbe    jump_b1a65
		cmp    $0x3f,%ah
		je     jump_b1321
		jmp    jump_b1ad0
	jump_b1aad:
		cmp    $0x33,%ah
		jb     jump_b1aed
		jbe    jump_b1265
		cmp    $0x35,%ah
		jb     jump_b1292
		jbe    jump_b12bf
		cmp    $0x3b,%ah
		je     jump_b1238
	jump_b1ad0:
		xor    %eax,%eax
		mov    0xf(%edx),%al
		push   %eax
		push   $aBadPhwoarTypeD
		lea    0x8(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
		add    $0x20,%esp
		pop    %edx
		ret
	jump_b1aed:
		cmp    $0x31,%ah
		jb     jump_b1ad0
		jbe    jump_b1238
		mov    nstart_ani,%eax
		mov    0x708(%eax),%ax
		mov    %ax,0x14(%edx)
		call   ac_LbRandomAnyShort
		and    $0x3,%al
		add    $0x35,%al
		mov    %al,0x13(%edx)
		call   ac_LbRandomAnyShort
		movb   $0xd6,0x10(%edx)
		and    $0x7,%al
		movb   $0xe,0x12(%edx)
		add    $0x3,%al
		mov    %al,0x11(%edx)
		add    $0x20,%esp
		pop    %edx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_new_bang)	/* 0xB1B30 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xbc,%esp
		mov    0xd0(%esp),%esi
		mov    %eax,0x9c(%esp)
		mov    %edx,0x94(%esp)
		mov    %ebx,%ebp
		xor    %edx,%edx
		mov    %edx,0x98(%esp)
		mov    %edx,0x84(%esp)
		mov    %edx,0xac(%esp)
		mov    %edx,0xa4(%esp)
		mov    %edx,0x8c(%esp)
		mov    %edx,0x90(%esp)
		test   %eax,%eax
		jl     jump_b2629
		sar    $0x8,%eax
		cmp    $0x8000,%eax
		jge    jump_b2629
		test   %ebx,%ebx
		jl     jump_b2629
		mov    %ebx,%eax
		sar    $0x8,%eax
		cmp    $0x8000,%eax
		jge    jump_b2629
		mov    phwoar_free,%bx
		inc    %esi
		test   %bx,%bx
		je     jump_b2629
		cmpw   $0x0,shrapnel_free
		je     jump_b2629
		cmp    $0xa,%ecx
		jne    jump_b1c40
		mov    0xcc(%esp),%ebx
		push   %esi
		mov    $0xb,%ecx
		mov    0x98(%esp),%edx
		push   %ebx
		mov    0xa4(%esp),%eax
		mov    %ebp,%ebx
		call   ac_new_bang
		mov    0xcc(%esp),%ecx
		push   %esi
		mov    0x98(%esp),%edx
		mov    0xa0(%esp),%eax
		push   %ecx
		mov    %ebp,%ebx
		mov    $0xc,%ecx
		call   ac_new_bang
		push   $0x19
		mov    $0x80,%ecx
		mov    0x98(%esp),%edx
		mov    0xa0(%esp),%eax
		push   $0x80
		mov    %ebp,%ebx
		add    $0x6400,%edx
		call   create_temp_light
		jmp    jump_b2629
	jump_b1c40:
		cmp    $0xf,%ecx
		jne    jump_b1cd4
		mov    0xcc(%esp),%edi
		push   %esi
		mov    $0x10,%ecx
		mov    0x98(%esp),%edx
		push   %edi
		mov    0xa4(%esp),%eax
		mov    %ebp,%ebx
		call   ac_new_bang
		push   %esi
		mov    $0x11,%ecx
		mov    0x98(%esp),%edx
		push   %edi
		mov    0xa4(%esp),%eax
		mov    %ebp,%ebx
		call   ac_new_bang
		push   %esi
		mov    $0x12,%ecx
		mov    0x98(%esp),%edx
		push   %edi
		mov    0xa4(%esp),%eax
		mov    %ebp,%ebx
		call   ac_new_bang
		push   $0x14
		mov    $0x50,%ecx
		mov    0x98(%esp),%edx
		mov    0xa0(%esp),%eax
		push   $0x50
		mov    %ebp,%ebx
		add    $0x6400,%edx
		call   create_temp_light
		add    $0xbc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x8
	jump_b1cd4:
		cmp    $0x14,%ecx
		jne    jump_b1d4f
		mov    0xcc(%esp),%ebx
		push   %esi
		mov    $0x15,%ecx
		mov    0x98(%esp),%edx
		push   %ebx
		mov    0xa4(%esp),%eax
		mov    %ebp,%ebx
		call   ac_new_bang
		mov    0xcc(%esp),%ecx
		push   %esi
		mov    0x98(%esp),%edx
		mov    0xa0(%esp),%eax
		push   %ecx
		mov    %ebp,%ebx
		mov    $0x16,%ecx
		call   ac_new_bang
		push   $0x5
		mov    $0x32,%ecx
		mov    0x98(%esp),%edx
		mov    0xa0(%esp),%eax
		push   $0x32
		mov    %ebp,%ebx
		add    $0x6400,%edx
		call   create_temp_light
		add    $0xbc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x8
	jump_b1d4f:
		cmp    $0x19,%ecx
		jne    jump_b1de3
		mov    0xcc(%esp),%edi
		push   %esi
		mov    $0x1a,%ecx
		mov    0x98(%esp),%edx
		push   %edi
		mov    0xa4(%esp),%eax
		mov    %ebp,%ebx
		call   ac_new_bang
		push   %esi
		mov    $0x1b,%ecx
		mov    0x98(%esp),%edx
		push   %edi
		mov    0xa4(%esp),%eax
		mov    %ebp,%ebx
		call   ac_new_bang
		push   %esi
		mov    $0x1c,%ecx
		mov    0x98(%esp),%edx
		push   %edi
		mov    0xa4(%esp),%eax
		mov    %ebp,%ebx
		call   ac_new_bang
		push   $0x5
		mov    $0x100,%ecx
		mov    0x98(%esp),%edx
		mov    0xa0(%esp),%eax
		push   $0xa
		mov    %ebp,%ebx
		add    $0xc800,%edx
		call   create_temp_light
		add    $0xbc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x8
	jump_b1de3:
		cmp    $0x2d,%ecx
		jne    jump_b1e88
		mov    0xcc(%esp),%ebx
		push   %esi
		mov    $0x2e,%ecx
		mov    0x98(%esp),%edx
		push   %ebx
		mov    0xa4(%esp),%eax
		mov    %ebp,%ebx
		call   ac_new_bang
		mov    0xcc(%esp),%ecx
		push   %esi
		mov    0x98(%esp),%edx
		mov    0xa0(%esp),%eax
		push   %ecx
		mov    %ebp,%ebx
		mov    $0x2f,%ecx
		call   ac_new_bang
		mov    $0x30,%ecx
		push   %esi
		mov    0xd0(%esp),%esi
		mov    0x98(%esp),%edx
		push   %esi
		mov    0xa4(%esp),%eax
		mov    %ebp,%ebx
		call   ac_new_bang
		push   $0x19
		mov    $0x80,%ecx
		mov    0x98(%esp),%edx
		mov    0xa0(%esp),%eax
		push   $0x80
		mov    %ebp,%ebx
		add    $0x9600,%edx
		call   create_temp_light
		add    $0xbc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x8
	jump_b1e88:
		call   ac_get_new_sthing
		mov    %ax,0xb4(%esp)
		test   %ax,%ax
		jne    jump_b21e7
		add    $0xbc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x8
	jump_b1eaa:
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		add    $0x6,%eax
		mov    %eax,0x98(%esp)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		add    $0x6,%eax
		mov    %eax,0x84(%esp)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		add    $0x6,%eax
		mov    %eax,0xac(%esp)
		movl   $0x35,0xa8(%esp)
	jump_b1efd:
		mov    0x98(%esp),%eax
		mov    0x84(%esp),%ecx
		mov    0xac(%esp),%esi
		add    %ecx,%eax
		movw   $0x0,0x2c(%edi)
		mov    %eax,0x80(%esp)
		add    %esi,%eax
		movw   $0x0,0x2e(%edi)
		lea    (%eax,%edx,1),%ecx
		xor    %ebx,%ebx
		mov    %ecx,0xb0(%esp)
		test   %ecx,%ecx
		jle    jump_b254a
		mov    %eax,0x88(%esp)
	jump_b1f44:
		mov    shrapnel_free,%cx
		test   %cx,%cx
		jne    jump_b23e0
		xor    %eax,%eax
		jmp    jump_b23f8
	jump_b1f5b:
		movl   $0x33,0xa8(%esp)
		jmp    jump_b1efd
	jump_b1f68:
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		add    $0x4,%eax
		mov    %eax,0x98(%esp)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		add    $0x4,%eax
		mov    %eax,0x84(%esp)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		add    $0x4,%eax
		mov    %eax,0xac(%esp)
		movl   $0x40,0xa8(%esp)
		jmp    jump_b1efd
	jump_b1fc0:
		movl   $0x3d,0xa8(%esp)
		jmp    jump_b1efd
	jump_b1fd0:
		movl   $0x5a,0xa8(%esp)
		jmp    jump_b1efd
	jump_b1fe0:
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x7,%al
		and    $0xffff,%eax
		mov    $0x3f,%ebx
		add    $0x4,%eax
		mov    %ebx,0xa8(%esp)
		mov    %eax,0x84(%esp)
		jmp    jump_b1efd
	jump_b2009:
		movl   $0x64,0xa8(%esp)
		jmp    jump_b1efd
	jump_b2019:
		movl   $0x65,0xa8(%esp)
		jmp    jump_b1efd
	jump_b2029:
		movl   $0x52,0xa8(%esp)
		jmp    jump_b1efd
	jump_b2039:
		movl   $0x54,0xa8(%esp)
		jmp    jump_b1efd
	jump_b2049:
		movl   $0x56,0xa8(%esp)
		jmp    jump_b1efd
	jump_b2059:
		movl   $0x58,0xa8(%esp)
		jmp    jump_b1efd
	jump_b2069:
		movl   $0x63,0xa8(%esp)
		jmp    jump_b1efd
	jump_b2079:
		movl   $0x61,0xa8(%esp)
		jmp    jump_b1efd
	jump_b2089:
		mov    $0x68,%ecx
		movw   $0x64,0xa(%edi)
		mov    %ecx,0xa8(%esp)
		jmp    jump_b1efd
	jump_b20a0:
		movl   $0x68,0xa8(%esp)
		jmp    jump_b1efd
	jump_b20b0:
		mov    $0x6a,%eax
		movw   $0xf,0xa(%edi)
		mov    %eax,0xa8(%esp)
		jmp    jump_b1efd
	jump_b20c7:
		movl   $0x6f,0xa8(%esp)
		jmp    jump_b1efd
	jump_b20d7:
		movl   $0x72,0xa8(%esp)
		jmp    jump_b1efd
	jump_b20e7:
		movl   $0x96,0xa8(%esp)
		jmp    jump_b1efd
	jump_b20f7:
		movl   $0x8c,0xa8(%esp)
		jmp    jump_b1efd
	jump_b2107:
		movl   $0x82,0xa8(%esp)
		jmp    jump_b1efd
	jump_b2117:
		movl   $0x78,0xa8(%esp)
		jmp    jump_b1efd
	jump_b2127:
		movl   $0xbe,0xa8(%esp)
		jmp    jump_b1efd
	jump_b2137:
		movl   $0xb4,0xa8(%esp)
		jmp    jump_b1efd
	jump_b2147:
		movl   $0xaa,0xa8(%esp)
		jmp    jump_b1efd
	jump_b2157:
		movl   $0xa0,0xa8(%esp)
		jmp    jump_b1efd
	jump_b2167:
		push   $0xf
		mov    $0x32,%ecx
		mov    0xa0(%esp),%eax
		push   $0x32
		mov    %ebp,%ebx
		mov    $0x96,%esi
		call   create_temp_light
		mov    %esi,0xa8(%esp)
		mov    $0x7f,%eax
		mov    $0x1,%edx
		mov    %eax,0x8c(%esp)
		mov    %edx,0x90(%esp)
		jmp    jump_b1efd
	jump_b21a7:
		push   $0xa
		mov    $0x32,%ecx
		push   $0x32
		mov    0xa4(%esp),%eax
		mov    %ebp,%ebx
		call   create_temp_light
		mov    $0x96,%edx
		mov    $0x40,%ebx
		mov    %edx,0xa8(%esp)
		mov    $0x1,%edx
		mov    %ebx,0x8c(%esp)
		mov    %edx,0x90(%esp)
		jmp    jump_b1efd
	jump_b21e7:
		movswl %ax,%ebx
		mov    %ebx,%eax
		shl    $0x4,%eax
		sub    %ebx,%eax
		mov    EXPORT_SYMBOL(sthings),%edi
		shl    $0x2,%eax
		add    %eax,%edi
		movb   $0x32,0x9(%edi)
		movw   $0x0,0xa(%edi)
		mov    0x9c(%esp),%eax
		mov    %ebp,0x20(%edi)
		mov    %eax,0x18(%edi)
		mov    0x94(%esp),%eax
		mov    %eax,0x1c(%edi)
		mov    0xcc(%esp),%eax
		mov    %ax,0x38(%edi)
		mov    %ecx,%eax
		cmp    $0x30,%ecx
		jb     jump_b2306
		jbe    jump_b2079
		cmp    $0x55,%ecx
		jb     jump_b22ad
		jbe    jump_b2107
		cmp    $0x69,%ecx
		jb     jump_b2286
		jbe    jump_b2147
		cmp    $0x73,%ecx
		jb     jump_b2278
		mov    0x94(%esp),%edx
		add    $0x6400,%edx
		cmp    $0x73,%ecx
		jbe    jump_b2167
		cmp    $0x78,%ecx
		je     jump_b21a7
		jmp    jump_b23a7
	jump_b2278:
		cmp    $0x6e,%ecx
		je     jump_b2157
		jmp    jump_b23a7
	jump_b2286:
		cmp    $0x5f,%ecx
		jb     jump_b229f
		jbe    jump_b2127
		cmp    $0x64,%ecx
		je     jump_b2137
		jmp    jump_b23a7
	jump_b229f:
		cmp    $0x5a,%ecx
		je     jump_b2117
		jmp    jump_b23a7
	jump_b22ad:
		cmp    $0x3c,%ecx
		jb     jump_b22df
		jbe    jump_b20c7
		cmp    $0x4b,%ecx
		jb     jump_b22d1
		jbe    jump_b20e7
		cmp    $0x50,%ecx
		je     jump_b20f7
		jmp    jump_b23a7
	jump_b22d1:
		cmp    $0x41,%ecx
		je     jump_b20d7
		jmp    jump_b23a7
	jump_b22df:
		cmp    $0x35,%ecx
		jb     jump_b22f8
		jbe    jump_b20a0
		cmp    $0x37,%ecx
		je     jump_b20b0
		jmp    jump_b23a7
	jump_b22f8:
		cmp    $0x32,%ecx
		je     jump_b2089
		jmp    jump_b23a7
	jump_b2306:
		cmp    $0x1a,%ecx
		jb     jump_b235c
		jbe    jump_b2039
		cmp    $0x23,%ecx
		jb     jump_b2342
		jbe    jump_b2019
		cmp    $0x2e,%ecx
		jb     jump_b2337
		jbe    jump_b2069
		movl   $0x5f,0xa8(%esp)
		jmp    jump_b1efd
	jump_b2337:
		cmp    $0x28,%ecx
		je     jump_b2029
		jmp    jump_b23a7
	jump_b2342:
		cmp    $0x1c,%ecx
		jb     jump_b2049
		jbe    jump_b2059
		cmp    $0x1e,%ecx
		je     jump_b2009
		jmp    jump_b23a7
	jump_b235c:
		cmp    $0x11,%ecx
		jb     jump_b2388
		jbe    jump_b1fc0
		cmp    $0x15,%ecx
		jb     jump_b237d
		jbe    jump_b1fe0
		cmp    $0x16,%ecx
		je     jump_b1fc0
		jmp    jump_b23a7
	jump_b237d:
		cmp    $0x12,%ecx
		je     jump_b1fd0
		jmp    jump_b23a7
	jump_b2388:
		cmp    $0xc,%ecx
		jb     jump_b239e
		jbe    jump_b1f5b
		cmp    $0x10,%ecx
		je     jump_b1f68
		jmp    jump_b23a7
	jump_b239e:
		cmp    $0xb,%ecx
		je     jump_b1eaa
	jump_b23a7:
		push   %esi
		push   %ecx
		mov    0xd4(%esp),%ecx
		push   %ecx
		push   %ebp
		mov    0xa4(%esp),%esi
		push   %esi
		mov    0xb0(%esp),%edi
		push   %edi
		push   $aXYZ0xX0xX0xXOw
		lea    0x1c(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0x20,%esp
		add    $0xbc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x8
	jump_b23e0:
		xor    %edx,%edx
		mov    %cx,%dx
		imul   $0x18,%edx,%edx
		mov    data_18d162(%edx),%dx
		mov    %ecx,%eax
		mov    %dx,shrapnel_free
	jump_b23f8:
		mov    %eax,0xb8(%esp)
		test   %ax,%ax
		je     jump_b253a
		and    $0xffff,%eax
		imul   $0x18,%eax,%eax
		mov    $shrapnel,%edx
		mov    0x98(%esp),%ecx
		add    %eax,%edx
		cmp    %ecx,%ebx
		jl     jump_b2429
		cmp    0x80(%esp),%ebx
	jump_b2429:
		cmp    0x98(%esp),%ebx
		jge    jump_b2439
		mov    $0x1,%eax
		jmp    jump_b245e
	jump_b2439:
		cmp    0x80(%esp),%ebx
		jge    jump_b2449
		mov    $0x3,%eax
		jmp    jump_b245e
	jump_b2449:
		cmp    0x88(%esp),%ebx
		jge    jump_b2459
		mov    $0x2,%eax
		jmp    jump_b245e
	jump_b2459:
		mov    $0x4,%eax
	jump_b245e:
		mov    %al,0x13(%edx)
		mov    0x9c(%esp),%eax
		mov    %eax,(%edx)
		mov    0x94(%esp),%eax
		mov    %eax,0x4(%edx)
		mov    0x90(%esp),%eax
		mov    %ebp,0x8(%edx)
		test   %eax,%eax
		je     jump_b2493
		movb   $0x0,0xc(%edx)
		mov    0x8c(%esp),%al
		movb   $0x0,0xe(%edx)
		jmp    jump_b2510
	jump_b2493:
		call   ac_LbRandomAnyShort
		and    $0x7,%ah
		xor    %esi,%esi
		mov    %ax,%si
		call   ac_LbRandomAnyShort
		and    $0x1,%ah
		and    $0x7ff,%esi
		mov    EXPORT_SYMBOL(lbSinTable)(,%esi,4),%ecx
		and    $0xffff,%eax
		sar    $0xa,%ecx
		and    $0x7ff,%eax
		imul   EXPORT_SYMBOL(lbSinTable)+2048(,%eax,4),%ecx
		sar    $0x10,%ecx
		mov    %ecx,0xa0(%esp)
		mov    0xa0(%esp),%cl
		mov    %cl,0xc(%edx)
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%esi,4),%esi
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%eax,4),%ecx
		sar    $0xa,%esi
		imul   %ecx,%esi
		sar    $0x10,%esi
		mov    %esi,0xa0(%esp)
		mov    0xa0(%esp),%cl
		mov    %cl,0xe(%edx)
		mov    EXPORT_SYMBOL(lbSinTable)(,%eax,4),%eax
		sar    $0xa,%eax
	jump_b2510:
		mov    %al,0xd(%edx)
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		mov    %al,0x11(%edx)
		call   ac_LbRandomAnyShort
		and    $0x1f,%al
		mov    %al,0x12(%edx)
		mov    0x2c(%edi),%ax
		mov    %ax,0x16(%edx)
		mov    0xb8(%esp),%eax
		mov    %ax,0x2c(%edi)
	jump_b253a:
		mov    0xb0(%esp),%esi
		inc    %ebx
		cmp    %esi,%ebx
		jl     jump_b1f44
	jump_b254a:
		cmpl   $0x0,0xa8(%esp)
		je     jump_b261a
		mov    phwoar_free,%ax
		test   %ax,%ax
		je     jump_b259d
		xor    %edx,%edx
		mov    %ax,%dx
		mov    %eax,%ebx
		lea    0x0(,%edx,8),%eax
		sub    %edx,%eax
		mov    data_190164(,%eax,4),%ax
		mov    phwoar__child,%edx
		mov    %ax,phwoar_free
		mov    %ebx,%eax
		mov    data_1dc4e0,%ebx
		inc    %edx
		dec    %ebx
		mov    %edx,phwoar__child
		mov    %ebx,data_1dc4e0
	jump_b259d:
		test   %ax,%ax
		je     jump_b261a
		xor    %edx,%edx
		mov    %ax,%dx
		mov    %ax,0x2e(%edi)
		lea    0x0(,%edx,8),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		mov    0x9c(%esp),%edx
		mov    %edx,EXPORT_SYMBOL(phwoar)(%eax)
		mov    %ebp,data_190154(%eax)
		mov    0x94(%esp),%edx
		mov    %edx,data_190150(%eax)
		xor    %dl,%dl
		mov    %dl,data_190158(%eax)
		xor    %dh,%dh
		mov    %dl,data_19015a(%eax)
		mov    0xa4(%esp),%dl
		mov    %dl,data_190159(%eax)
		mov    0xa8(%esp),%dl
		mov    %dl,data_19015b(%eax)
		xor    %dl,%dl
		mov    %dx,data_190164(%eax)
		mov    %dl,data_190166(%eax)
		add    $EXPORT_SYMBOL(phwoar),%eax
		call   fillin_phwoar_type_info
	jump_b261a:
		mov    0xb2(%esp),%eax
		sar    $0x10,%eax
		call   ac_add_node_sthing
	jump_b2629:
		add    $0xbc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x8


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_bang_new4)	/* 0xB264C */
/*----------------------------------------------------------------*/
		push   $0x0
		push   $0x0
		call   ac_new_bang
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_button_text)	/* 0x0B26CC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    %eax,%esi
		mov    0xc(%eax),%eax
		xor    %edx,%edx
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    0x8(%esi),%eax
		mov    0x4(%esi),%dx
		call   ac_my_string_width
		sub    %eax,%edx
		mov    %edx,%eax
		xor    %edx,%edx
		shr    %eax
		mov    (%esi),%dx
		add    %edx,%eax
		inc    %eax
		xor    %edx,%edx
		mov    %eax,%edi
		mov    $0x41,%eax
		mov    0x6(%esi),%dx
		call   ac_font_height
		and    $0xff,%eax
		sub    %eax,%edx
		mov    %edx,%eax
		xor    %edx,%edx
		sar    %eax
		mov    0x2(%esi),%dx
		add    %edx,%eax
		mov    %eax,%ebx
		mov    $0x41,%eax
		xor    %ecx,%ecx
		call   ac_font_height
		xor    %ah,%ah
		xor    %edx,%edx
		add    %ebx,%eax
		mov    %bx,%dx
		mov    %ax,%cx
		xor    %eax,%eax
		mov    $0x280,%ebx
		mov    %di,%ax
		call   ac_my_set_text_window
		testb  $0x80,0x24(%esi)
		je     jump_b275a
		mov    0x24(%esi),%dl
		movw   $0xfffd,0x22(%esi)
		and    $0x7f,%dl
		mov    %dl,0x24(%esi)
	jump_b275a:
		push   $0x1
		lea    0x22(%esi),%eax
		mov    0x8(%esi),%ebx
		push   %eax
		xor    %eax,%eax
		xor    %ecx,%ecx
		mov    0x20(%esi),%ax
		xor    %edx,%edx
		push   %eax
		mov    0x28(%esi),%cl
		xor    %eax,%eax
		call   ac_flashy_draw_text
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_info_box_text)	/* 0x0B2780 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    %eax,%esi
		testb  $0x80,0x24(%eax)
		je     jump_b27a5
		movw   $0xfffb,0x20(%esi)
		mov    0x24(%esi),%dl
		movw   $0xfffb,0x22(%esi)
		and    $0x7f,%dl
		mov    %dl,0x24(%esi)
	jump_b27a5:
		mov    0x10(%esi),%eax
		mov    0x2(%esi),%dx
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    $0x41,%eax
		add    $0x3,%edx
		call   ac_font_height
		xor    %ah,%ah
		xor    %ecx,%ecx
		add    %edx,%eax
		mov    %ax,%cx
		mov    0x4(%esi),%dx
		mov    (%esi),%ax
		xor    %ebx,%ebx
		add    %edx,%eax
		mov    %ax,%bx
		mov    0x2(%esi),%ax
		xor    %edx,%edx
		add    $0x3,%eax
		mov    %ax,%dx
		mov    (%esi),%ax
		add    $0x3,%eax
		and    $0xffff,%eax
		call   ac_my_set_text_window
		push   $0x0
		lea    0x20(%esi),%eax
		mov    0x8(%esi),%ebx
		push   %eax
		xor    %ecx,%ecx
		xor    %edx,%edx
		push   $0x0
		mov    0x28(%esi),%cl
		xor    %eax,%eax
		call   ac_flashy_draw_text
		test   %al,%al
		je     jump_b28a3
		mov    0x14(%esi),%eax
		mov    0x6(%esi),%bx
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    0x2(%esi),%ax
		xor    %ecx,%ecx
		add    %ebx,%eax
		mov    0x4(%esi),%di
		mov    %ax,%cx
		mov    (%esi),%ax
		xor    %ebx,%ebx
		add    %edi,%eax
		xor    %edx,%edx
		mov    %ax,%bx
		mov    $0x41,%eax
		mov    0x6(%esi),%dx
		call   ac_font_height
		movzbl %al,%edi
		lea    -0x1(%edx),%eax
		sub    %edi,%eax
		xor    %edx,%edx
		sar    %eax
		mov    0x2(%esi),%dx
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x4(%esi),%di
		mov    %ax,%dx
		mov    (%esi),%ax
		add    %edi,%eax
		mov    %eax,(%esp)
		mov    0xc(%esi),%eax
		mov    (%esp),%edi
		call   ac_my_string_width
		sub    %eax,%edi
		mov    %edi,%eax
		sub    $0x2,%eax
		and    $0xffff,%eax
		call   ac_my_set_text_window
		push   $0x0
		lea    0x22(%esi),%eax
		mov    0xc(%esi),%ebx
		push   %eax
		xor    %ecx,%ecx
		xor    %edx,%edx
		push   $0x0
		mov    0x28(%esi),%cl
		xor    %eax,%eax
		call   ac_flashy_draw_text
	jump_b28a3:
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_init_screen_box)	/* 0x0B28AC */
/*----------------------------------------------------------------*/
		movw   $0x1,0xa(%eax)
		movl   $ac_flashy_draw_purple_box,0xc(%eax)
		movl   $0x0,0x10(%eax)
		movb   $0xf7,0x16(%eax)
		movb   $0x38,0x17(%eax)
		mov    %dx,(%eax)
		mov    %bx,0x2(%eax)
		mov    %cx,0x4(%eax)
		mov    0x4(%esp),%edx
		mov    %dx,0x6(%eax)
		mov    0x8(%esp),%dl
		mov    %dl,0x8(%eax)
		ret    $0x8


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_init_screen_text_box)	/* 0x0B28E8 */
/*----------------------------------------------------------------*/
		movw   $0x1,0x3c(%eax)
		movl   $ac_flashy_draw_purple_text_box,0x20(%eax)
		movl   $0x0,0x18(%eax)
		movb   $0x4,0xb(%eax)
		movl   $0x0,0x24(%eax)
		movl   $0x0,0x28(%eax)
		movl   $0x0,0x30(%eax)
		movb   $0xf7,0x3e(%eax)
		movb   $0x38,0x3f(%eax)
		movw   $0x0,0x12(%eax)
		movb   $0x0,0x40(%eax)
		movw   $0x0,0x16(%eax)
		mov    %dx,(%eax)
		mov    %bx,0x2(%eax)
		mov    0x4(%esp),%edx
		mov    %dx,0x6(%eax)
		mov    0x8(%esp),%dl
		mov    %dl,0x8(%eax)
		mov    0xc(%esp),%edx
		mov    %edx,0x1c(%eax)
		mov    0x10(%esp),%dl
		mov    %dl,0xa(%eax)
		mov    0x6(%eax),%dx
		mov    %cx,0x4(%eax)
		sub    $0x1f,%edx
		mov    %dx,0x10(%eax)
		ret    $0x10


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_init_screen_button)	/* 0x0B2964 */
/*----------------------------------------------------------------*/
		push   %esi
		mov    %eax,%esi
		mov    0xc(%esp),%eax
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    %ecx,%eax
		mov    %bx,0x2(%esi)
		call   ac_my_string_width
		add    $0x4,%eax
		mov    %ax,0x4(%esi)
		mov    $0x41,%eax
		call   ac_font_height
		xor    %ah,%ah
		add    $0x6,%eax
		mov    %ax,0x6(%esi)
		mov    0x8(%esp),%al
		mov    %al,0x26(%esi)
		mov    0xc(%esp),%eax
		mov    %eax,0xc(%esi)
		mov    0x14(%esp),%eax
		or     $0x1,%al
		mov    %ax,0x24(%esi)
		testb  $0x80,0x14(%esp)
		je     jump_b29be
		mov    0x4(%esi),%ax
		sub    %eax,%edx
	jump_b29be:
		mov    %dx,(%esi)
		movl   $ac_flashy_draw_purple_button,0x10(%esi)
		movl   $ac_button_text,0x14(%esi)
		movl   $0x0,0x18(%esi)
		movb   $0x1,0x29(%esi)
		movb   $0xae,0x2a(%esi)
		movb   $0xf3,0x2b(%esi)
		movb   $0x0,0x2c(%esi)
		mov    0x10(%esp),%al
		mov    %ecx,0x8(%esi)
		mov    %al,0x28(%esi)
		mov    (%ecx),%dl
		test   %dl,%dl
		je     jump_b2a02
		movsbl %dl,%eax
		mov    EXPORT_SYMBOL(lbAsciiToInkey)(%eax),%al
		mov    %al,0x2c(%esi)
	jump_b2a02:
		movl   $0x0,0x1c(%esi)
		movb   $0x0,0x2d(%esi)
		pop    %esi
		ret    $0x10


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_init_screen_info_box)	/* 0x0B2A14 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    %eax,%esi
		mov    %edx,%edi
		mov    0x1c(%esp),%eax
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    $0x41,%eax
		call   ac_font_height
		mov    %al,%dl
		mov    %di,(%esi)
		xor    %ah,%ah
		mov    %bx,0x2(%esi)
		mov    %eax,(%esp)
		mov    0x20(%esp),%eax
		mov    %cx,0x4(%esi)
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    $0x41,%eax
		xor    %ebx,%ebx
		call   ac_font_height
		mov    %al,%bl
		xor    %eax,%eax
		mov    %dl,%al
		cmp    %ebx,%eax
		jle    jump_b2a66
		mov    (%esp),%eax
		jmp    jump_b2a72
	jump_b2a66:
		mov    $0x41,%eax
		call   ac_font_height
		xor    %ah,%ah
	jump_b2a72:
		add    $0x6,%eax
		mov    %ax,0x6(%esi)
		movw   $0x1,0x24(%esi)
		movl   $ac_flashy_draw_purple_info_box,0x18(%esi)
		movl   $ac_info_box_text,0x1c(%esi)
		movb   $0xf7,0x29(%esi)
		mov    0x18(%esp),%al
		movb   $0x38,0x2a(%esi)
		mov    %al,0x26(%esi)
		mov    0x1c(%esp),%eax
		mov    %eax,0x10(%esi)
		mov    0x20(%esp),%eax
		mov    %eax,0x14(%esi)
		mov    0x10(%esp),%eax
		mov    %eax,0x8(%esi)
		mov    0x14(%esp),%eax
		mov    %eax,0xc(%esi)
		mov    0x24(%esp),%al
		mov    %al,0x28(%esi)
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret    $0x18


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_flashy_draw_purple_shape)	/* 0x0B2ACC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4c,%esp
		mov    %eax,%esi
		movb   $0xf,0x44(%esp)
		xor    %eax,%eax
		mov    0x28(%esi),%al
		cmp    $0xf7,%eax
		setne  %al
		and    $0xff,%eax
		add    $0xb,%eax
		mov    %al,0x48(%esp)
		xor    %eax,%eax
		mov    0x29(%esi),%al
		sar    %eax
		mov    0x26(%esi),%dl
		mov    %al,0x40(%esp)
		test   $0x2,%dl
		je     jump_b2b14
		mov    %dl,%dh
		movb   $0xff,0x25(%esi)
		and    $0x7c,%dh
		mov    %dh,0x26(%esi)
	jump_b2b14:
		testb  $0x1,0x26(%esi)
		je     jump_b2b27
		mov    0x26(%esi),%bh
		movb   $0x0,0x25(%esi)
		and    $0xfe,%bh
		mov    %bh,0x26(%esi)
	jump_b2b27:
		xor    %ebx,%ebx
		mov    0x25(%esi),%bl
		cmp    $0x48,%ebx
		jle    jump_b2bc0
		xor    %eax,%eax
		mov    0x29(%esi),%al
		sar    %eax
		xor    %edi,%edi
		mov    %eax,0x34(%esp)
		test   %ax,%ax
		jle    jump_b2bb4
	jump_b2b47:
		movswl %di,%ebp
		xor    %eax,%eax
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    0x28(%esi),%al
		mov    0x14(%esi,%ebp,2),%dx
		mov    0x2(%esi,%ebp,2),%bx
		push   %eax
		mov    %edx,0x8(%esp)
		xor    %edx,%edx
		mov    (%esi,%ebp,2),%ax
		mov    0x12(%esi,%ebp,2),%dx
		mov    0x8(%esp),%ecx
		and    $0xffff,%eax
		call   ac_draw_line_purple_list
		xor    %eax,%eax
		mov    0x28(%esi),%al
		push   %eax
		xor    %eax,%eax
		mov    0x44(%esp),%al
		xor    %ecx,%ecx
		add    %eax,%ebp
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    0x14(%esi,%ebp,2),%cx
		mov    0x2(%esi,%ebp,2),%bx
		mov    0x12(%esi,%ebp,2),%dx
		mov    (%esi,%ebp,2),%ax
		and    $0xffff,%eax
		call   ac_draw_line_purple_list
		inc    %edi
		cmp    0x34(%esp),%di
		jl     jump_b2b47
	jump_b2bb4:
		mov    $0x3,%al
		add    $0x4c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_b2bc0:
		cmp    $0x18,%ebx
		jg     jump_b2e00
		xor    %eax,%eax
		mov    proj_origin_m2,%ebp
		mov    (%esi),%ax
		sar    $0x10,%ebp
		mov    %eax,%edx
		sub    %ebp,%edx
		imul   %ebx,%edx
		mov    $0x18,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    EXPORT_SYMBOL(proj_origin),%edi
		xor    %edx,%edx
		sar    $0x10,%edi
		mov    0x12(%esi),%dx
		sub    %edi,%edx
		imul   %ebx,%edx
		add    %ebp,%eax
		mov    %ax,0x38(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		xor    %ecx,%ecx
		mov    0x40(%esp),%cl
		xor    %edx,%edx
		mov    (%esi,%ecx,2),%dx
		sub    %ebp,%edx
		imul   %ebx,%edx
		add    %edi,%eax
		mov    %ax,0x20(%esp)
		movl   $0x18,0x10(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idivl  0x10(%esp)
		add    %ebp,%eax
		mov    %ax,0x30(%esp)
		xor    %eax,%eax
		mov    0x12(%esi,%ecx,2),%ax
		mov    %eax,%edx
		sub    %edi,%edx
		imul   %ebx,%edx
		mov    $0x18,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		add    %edi,%eax
		mov    %ax,0x28(%esp)
		xor    %eax,%eax
		mov    0x28(%esi),%al
		mov    $0x4,%ebx
		push   %eax
		mov    0x22(%esp),%eax
		mov    %edi,%edx
		sar    $0x10,%eax
		mov    0x32(%esp),%edi
		mov    %eax,0xc(%esp)
		mov    0x3a(%esp),%eax
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		sar    $0x10,%eax
		mov    0xc(%esp),%ecx
		mov    %eax,0x8(%esp)
		mov    %eax,%ebx
		mov    %ebp,%eax
		sar    $0x10,%edi
		call   ac_draw_line_purple_list
		mov    0x26(%esp),%ebp
		mov    EXPORT_SYMBOL(proj_origin),%edx
		mov    %edi,%ebx
		xor    %eax,%eax
		sar    $0x10,%ebp
		mov    0x28(%esi),%al
		sar    $0x10,%edx
		push   %eax
		mov    proj_origin_m2,%eax
		mov    %ebp,%ecx
		sar    $0x10,%eax
		call   ac_draw_line_purple_list
		xor    %edx,%edx
		mov    0x48(%esp),%dl
		xor    %ecx,%ecx
		lea    0x0(,%edx,4),%eax
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		sub    %edx,%eax
		mov    fe_mouseptr_sprites,%ecx
		add    %eax,%eax
		mov    0x8(%esp),%edx
		add    %eax,%ecx
		mov    0x4(%esp),%eax
		dec    %edx
		dec    %eax
		mov    %edx,(%esp)
		mov    EXPORT_SYMBOL(lbDisplay)+40,%dx # lbDisplay.GraphicsWindowX
		add    %eax,%edx
		mov    %edx,0x38(%esp)
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(purple_draw_index),%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    purple_draw_list,%edx
		mov    0x38(%esp),%ebx
		mov    %bx,(%edx,%eax,2)
		mov    (%esp),%ebx
		movw   $0x0,0x18(%edx,%eax,2)
		add    EXPORT_SYMBOL(lbDisplay)+44,%bx # lbDisplay.GraphicsWindowY
		mov    %ecx,0x4(%edx,%eax,2)
		mov    %bx,0x2(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+113,%bl # lbDisplay.DrawColour
		mov    %bl,0x8(%edx,%eax,2)
		mov    EXPORT_SYMBOL(purple_draw_index),%ax
		xor    %ebx,%ebx
		mov    %ax,%bx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		inc    %ebx
		movb   $0x5,0x17(%edx,%eax,2)
		mov    %bx,EXPORT_SYMBOL(purple_draw_index)
		lea    -0x1(%edi),%eax
		mov    EXPORT_SYMBOL(lbDisplay)+40,%bx # lbDisplay.GraphicsWindowX
		add    %eax,%ebx
		mov    %ebx,0x38(%esp)
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(purple_draw_index),%bx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    0x38(%esp),%ebx
		lea    -0x1(%ebp),%edi
		mov    %bx,(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+44,%bx # lbDisplay.GraphicsWindowY
		mov    %ecx,0x4(%edx,%eax,2)
		add    %ebx,%edi
		mov    EXPORT_SYMBOL(lbDisplay)+113,%bl # lbDisplay.DrawColour
		mov    EXPORT_SYMBOL(purple_draw_index),%cx
		mov    %bl,0x8(%edx,%eax,2)
		xor    %ebx,%ebx
		movw   $0x0,0x18(%edx,%eax,2)
		mov    %cx,%bx
		mov    %di,0x2(%edx,%eax,2)
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		inc    %ecx
		movb   $0x5,0x17(%edx,%eax,2)
		mov    %cx,EXPORT_SYMBOL(purple_draw_index)
		mov    0x24(%esi),%al
		mov    0x25(%esi),%cl
		add    %al,%cl
		xor    %al,%al
		mov    %cl,0x25(%esi)
		add    $0x4c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_b2e00:
		mov    $0x4,%edx
		xor    %ebx,%ebx
		xor    %eax,%eax
		call   ac_IsSamplePlaying
		test   %al,%al
		jne    jump_b2e2e
		push   $0x1
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x6e,%edx
		xor    %eax,%eax
		call   ac_play_sample_using_heap
	jump_b2e2e:
		mov    $0x30,%eax
		xor    %ebx,%ebx
		mov    %eax,%edx
		mov    0x40(%esp),%bl
		sar    $0x1f,%edx
		idiv   %ebx
		xor    %edx,%edx
		mov    %ax,0x24(%esp)
		mov    0x25(%esi),%dl
		mov    0x22(%esp),%ebx
		sub    $0x18,%edx
		sar    $0x10,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		xor    %edi,%edi
		mov    %ax,0x3c(%esp)
		test   %ax,%ax
		jle    jump_b2ed4
	jump_b2e67:
		movswl %di,%ebp
		xor    %eax,%eax
		xor    %ecx,%ecx
		xor    %edx,%edx
		mov    0x28(%esi),%al
		mov    0x14(%esi,%ebp,2),%cx
		mov    0x2(%esi,%ebp,2),%dx
		push   %eax
		mov    %edx,0x8(%esp)
		xor    %edx,%edx
		mov    (%esi,%ebp,2),%ax
		mov    0x12(%esi,%ebp,2),%dx
		mov    0x8(%esp),%ebx
		and    $0xffff,%eax
		call   ac_draw_line_purple_list
		xor    %eax,%eax
		mov    0x28(%esi),%al
		push   %eax
		xor    %eax,%eax
		mov    0x44(%esp),%al
		xor    %ecx,%ecx
		add    %eax,%ebp
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    0x14(%esi,%ebp,2),%cx
		mov    0x2(%esi,%ebp,2),%bx
		mov    0x12(%esi,%ebp,2),%dx
		mov    (%esi,%ebp,2),%ax
		and    $0xffff,%eax
		call   ac_draw_line_purple_list
		inc    %edi
		cmp    0x3c(%esp),%di
		jl     jump_b2e67
	jump_b2ed4:
		xor    %edx,%edx
		mov    0x25(%esi),%dl
		mov    0x22(%esp),%ebx
		sub    $0x18,%edx
		sar    $0x10,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    0x3a(%esp),%eax
		mov    %dx,0x1c(%esp)
		sar    $0x10,%eax
		xor    %edx,%edx
		mov    0x3c(%esp),%edi
		mov    0x2(%esi,%eax,2),%dx
		mov    (%esi,%eax,2),%ax
		mov    0x1a(%esp),%ecx
		and    $0xffff,%eax
		sar    $0x10,%ecx
		sub    %eax,%edx
		imul   %ecx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %ax,0x3c(%esp)
		movswl %di,%eax
		xor    %edx,%edx
		movzwl 0x14(%esi,%eax,2),%ebp
		mov    0x12(%esi,%eax,2),%dx
		sub    %edx,%ebp
		mov    %ebp,%edx
		imul   %ecx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %ax,0x2c(%esp)
		mov    0x3a(%esp),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_b2f5e
		mov    0x2a(%esp),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		je     jump_b306e
	jump_b2f5e:
		mov    0x28(%esi),%al
		mov    %al,EXPORT_SYMBOL(vec_colour)
		movswl %di,%eax
		add    %eax,%eax
		mov    0x3a(%esp),%ebx
		lea    (%esi,%eax,1),%edx
		xor    %eax,%eax
		sar    $0x10,%ebx
		mov    (%edx),%ax
		lea    (%eax,%ebx,1),%ecx
		mov    %ecx,data_1dc50c
		xor    %ecx,%ecx
		mov    0x12(%edx),%cx
		mov    0x2a(%esp),%edx
		sar    $0x10,%edx
		add    %edx,%ecx
		mov    data_1dc50c,%edx
		mov    %ecx,data_1dc510
		test   %ebx,%ebx
		jle    jump_b2fb6
		xor    %ebx,%ebx
		mov    0x44(%esp),%bl
		sub    %ebx,%edx
		mov    %edx,data_1dc534
		cmp    %edx,%eax
		jle    jump_b2fcd
		jmp    jump_b2fc8
	jump_b2fb6:
		xor    %ebx,%ebx
		mov    0x44(%esp),%bl
		add    %ebx,%edx
		mov    %edx,data_1dc534
		cmp    %edx,%eax
		jge    jump_b2fcd
	jump_b2fc8:
		mov    %eax,data_1dc534
	jump_b2fcd:
		mov    0x2a(%esp),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jle    jump_b2ffb
		movswl %di,%edx
		mov    0x12(%esi,%edx,2),%dx
		xor    %ebx,%ebx
		and    $0xffff,%edx
		mov    0x44(%esp),%bl
		add    %edx,%eax
		sub    %ebx,%eax
		mov    %eax,data_1dc538
		cmp    %eax,%edx
		jle    jump_b3022
		jmp    jump_b301c
	jump_b2ffb:
		movswl %di,%edx
		mov    0x12(%esi,%edx,2),%dx
		xor    %ebx,%ebx
		and    $0xffff,%edx
		mov    0x44(%esp),%bl
		add    %edx,%eax
		add    %ebx,%eax
		mov    %eax,data_1dc538
		cmp    %eax,%edx
		jge    jump_b3022
	jump_b301c:
		mov    %edx,data_1dc538
	jump_b3022:
		mov    data_1dc538,%ecx
		mov    data_1dc534,%ebx
		mov    data_1dc510,%edx
		mov    data_1dc50c,%eax
		call   ac_draw_trig_purple_list
		xor    %eax,%eax
		mov    0x2a(%esp),%ecx
		mov    0x28(%esi),%al
		xor    %edx,%edx
		push   %eax
		movswl %di,%eax
		sar    $0x10,%ecx
		mov    0x12(%esi,%eax,2),%dx
		mov    (%esi,%eax,2),%ax
		add    %edx,%ecx
		mov    0x3e(%esp),%ebx
		and    $0xffff,%eax
		sar    $0x10,%ebx
		add    %eax,%ebx
		call   ac_draw_line_purple_list
	jump_b306e:
		xor    %eax,%eax
		mov    0x28(%esi),%al
		movswl %di,%ebp
		push   %eax
		lea    0x0(,%ebp,2),%eax
		add    %esi,%eax
		xor    %ecx,%ecx
		mov    %eax,0x8(%esp)
		mov    0x12(%eax),%cx
		mov    0x2e(%esp),%eax
		sar    $0x10,%eax
		mov    %eax,0xc(%esp)
		add    %eax,%ecx
		mov    0x8(%esp),%eax
		xor    %ebx,%ebx
		mov    (%eax),%bx
		mov    0x3e(%esp),%eax
		sar    $0x10,%eax
		mov    EXPORT_SYMBOL(proj_origin),%edx
		mov    %eax,0x14(%esp)
		add    %eax,%ebx
		mov    proj_origin_m2,%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		call   ac_draw_line_purple_list
		xor    %edx,%edx
		mov    0x48(%esp),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    fe_mouseptr_sprites,%edx
		add    %eax,%eax
		add    %eax,%edx
		mov    %edx,0x14(%esp)
		mov    0x4(%esp),%edx
		xor    %eax,%eax
		mov    0x8(%esp),%ebx
		mov    0x12(%edx),%ax
		add    %ebx,%eax
		mov    0x4(%esp),%ebx
		xor    %edx,%edx
		mov    0x10(%esp),%ecx
		mov    (%ebx),%dx
		add    %ecx,%edx
		mov    EXPORT_SYMBOL(lbDisplay)+40,%cx # lbDisplay.GraphicsWindowX
		dec    %edx
		add    %edx,%ecx
		xor    %edx,%edx
		dec    %eax
		mov    EXPORT_SYMBOL(purple_draw_index),%dx
		mov    %eax,0xc(%esp)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		mov    purple_draw_list,%ebx
		add    %edx,%eax
		mov    0xc(%esp),%edx
		mov    %cx,(%ebx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+44,%cx # lbDisplay.GraphicsWindowY
		add    %ecx,%edx
		mov    %dx,0x2(%ebx,%eax,2)
		mov    0x14(%esp),%edx
		mov    %edx,0x4(%ebx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+113,%dl # lbDisplay.DrawColour
		mov    %dl,0x8(%ebx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+96,%dx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(purple_draw_index),%cx
		mov    %dx,0x18(%ebx,%eax,2)
		xor    %edx,%edx
		mov    %cx,%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		movb   $0x5,0x17(%ebx,%eax,2)
		xor    %eax,%eax
		mov    0x40(%esp),%al
		add    %ebp,%eax
		xor    %edx,%edx
		lea    0x0(,%eax,2),%ebx
		mov    0x1a(%esp),%ebp
		xor    %eax,%eax
		mov    0x2(%esi,%ebx,1),%dx
		mov    (%esi,%ebx,1),%ax
		sar    $0x10,%ebp
		sub    %eax,%edx
		imul   %ebp,%edx
		inc    %ecx
		mov    %cx,EXPORT_SYMBOL(purple_draw_index)
		mov    0x22(%esp),%ecx
		sar    $0x10,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %ax,0x3c(%esp)
		xor    %edx,%edx
		xor    %eax,%eax
		mov    0x14(%esi,%ebx,1),%dx
		mov    0x12(%esi,%ebx,1),%ax
		sub    %eax,%edx
		imul   %ebp,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %ax,0x2c(%esp)
		mov    0x3a(%esp),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_b31fa
		mov    0x2a(%esp),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		je     jump_b3326
	jump_b31fa:
		xor    %edx,%edx
		movswl %di,%eax
		mov    0x40(%esp),%dl
		add    %edx,%eax
		add    %eax,%eax
		mov    0x3a(%esp),%edx
		lea    (%esi,%eax,1),%ebx
		xor    %eax,%eax
		sar    $0x10,%edx
		mov    (%ebx),%ax
		lea    (%eax,%edx,1),%ecx
		mov    0x12(%ebx),%bx
		mov    %ecx,data_1dc50c
		mov    0x2a(%esp),%ecx
		and    $0xffff,%ebx
		sar    $0x10,%ecx
		add    %ecx,%ebx
		mov    %ebx,data_1dc510
		mov    data_1dc50c,%ebx
		test   %edx,%edx
		jle    jump_b3256
		xor    %edx,%edx
		mov    0x44(%esp),%dl
		sub    %edx,%ebx
		mov    %ebx,data_1dc534
		cmp    %ebx,%eax
		jle    jump_b326d
		jmp    jump_b3268
	jump_b3256:
		xor    %edx,%edx
		mov    0x44(%esp),%dl
		add    %edx,%ebx
		mov    %ebx,data_1dc534
		cmp    %ebx,%eax
		jge    jump_b326d
	jump_b3268:
		mov    %eax,data_1dc534
	jump_b326d:
		mov    0x2a(%esp),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		jle    jump_b32a4
		xor    %ebx,%ebx
		movswl %di,%eax
		mov    0x40(%esp),%bl
		add    %ebx,%eax
		mov    0x12(%esi,%eax,2),%ax
		and    $0xffff,%eax
		lea    (%eax,%edx,1),%ebx
		xor    %edx,%edx
		mov    0x44(%esp),%dl
		sub    %edx,%ebx
		mov    %ebx,data_1dc538
		cmp    %ebx,%eax
		jle    jump_b32d2
		jmp    jump_b32cd
	jump_b32a4:
		xor    %ebx,%ebx
		movswl %di,%eax
		mov    0x40(%esp),%bl
		add    %ebx,%eax
		mov    0x12(%esi,%eax,2),%ax
		xor    %ebx,%ebx
		and    $0xffff,%eax
		mov    0x44(%esp),%bl
		add    %eax,%edx
		add    %ebx,%edx
		mov    %edx,data_1dc538
		cmp    %edx,%eax
		jge    jump_b32d2
	jump_b32cd:
		mov    %eax,data_1dc538
	jump_b32d2:
		mov    data_1dc538,%ecx
		mov    data_1dc534,%ebx
		mov    data_1dc510,%edx
		mov    data_1dc50c,%eax
		call   ac_draw_trig_purple_list
		xor    %eax,%eax
		mov    0x28(%esi),%al
		push   %eax
		xor    %eax,%eax
		movswl %di,%edx
		mov    0x44(%esp),%al
		mov    0x2e(%esp),%ecx
		add    %edx,%eax
		xor    %edx,%edx
		sar    $0x10,%ecx
		mov    0x12(%esi,%eax,2),%dx
		mov    (%esi,%eax,2),%ax
		add    %edx,%ecx
		mov    0x3e(%esp),%ebx
		and    $0xffff,%eax
		sar    $0x10,%ebx
		add    %eax,%ebx
		call   ac_draw_line_purple_list
	jump_b3326:
		mov    0x2a(%esp),%ebp
		xor    %eax,%eax
		xor    %edx,%edx
		xor    %ecx,%ecx
		mov    0x28(%esi),%al
		mov    0x40(%esp),%dl
		push   %eax
		movswl %di,%eax
		xor    %ebx,%ebx
		add    %edx,%eax
		sar    $0x10,%ebp
		lea    0x0(,%eax,2),%edi
		mov    EXPORT_SYMBOL(proj_origin),%edx
		mov    0x3e(%esp),%eax
		sar    $0x10,%edx
		mov    0x12(%edi,%esi,1),%cx
		sar    $0x10,%eax
		mov    (%edi,%esi,1),%bx
		mov    %eax,0x14(%esp)
		add    %eax,%ebx
		mov    proj_origin_m2,%eax
		add    %ebp,%ecx
		sar    $0x10,%eax
		call   ac_draw_line_purple_list
		xor    %edx,%edx
		mov    0x48(%esp),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    fe_mouseptr_sprites,%edx
		add    %eax,%eax
		add    %eax,%edx
		mov    0x10(%esp),%ebx
		mov    %edx,0x18(%esp)
		xor    %edx,%edx
		xor    %eax,%eax
		mov    (%edi,%esi,1),%dx
		mov    0x12(%edi,%esi,1),%ax
		add    %ebx,%edx
		mov    EXPORT_SYMBOL(lbDisplay)+40,%di # lbDisplay.GraphicsWindowX
		dec    %edx
		add    %ebp,%eax
		add    %edx,%edi
		xor    %edx,%edx
		lea    -0x1(%eax),%ebx
		mov    EXPORT_SYMBOL(purple_draw_index),%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		mov    purple_draw_list,%ecx
		add    %edx,%eax
		mov    0x18(%esp),%edx
		mov    %di,(%ecx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+44,%di # lbDisplay.GraphicsWindowY
		mov    %edx,0x4(%ecx,%eax,2)
		add    %edi,%ebx
		mov    EXPORT_SYMBOL(lbDisplay)+113,%dl # lbDisplay.DrawColour
		mov    %bx,0x2(%ecx,%eax,2)
		mov    %dl,0x8(%ecx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+96,%dx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(purple_draw_index),%bx
		mov    %dx,0x18(%ecx,%eax,2)
		xor    %edx,%edx
		mov    %bx,%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		movb   $0x5,0x17(%ecx,%eax,2)
		mov    0x24(%esi),%al
		mov    0x25(%esi),%ch
		inc    %ebx
		add    %al,%ch
		xor    %eax,%eax
		mov    %bx,EXPORT_SYMBOL(purple_draw_index)
		mov    %ch,%al
		mov    %ch,0x25(%esi)
		cmp    $0x48,%eax
		jle    jump_b344a
		mov    $0x3,%al
		add    $0x4c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_b344a:
		mov    $0x2,%al
		add    $0x4c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_flashy_draw_purple_box)	/* 0x0B3458 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x54,%esp
		mov    %eax,%esi
		movb   $0xf,0x50(%esp)
		xor    %eax,%eax
		mov    0x16(%esi),%al
		cmp    $0xf7,%eax
		setne  %al
		and    $0xff,%eax
		add    $0xb,%eax
		mov    0x4(%esi),%di
		mov    %al,0x4c(%esp)
		mov    0x6(%esi),%ax
		mov    0xa(%esi),%dl
		dec    %eax
		dec    %edi
		mov    %ax,0x2c(%esp)
		test   $0x2,%dl
		je     jump_b34aa
		movb   $0xff,0x9(%esi)
		mov    %dl,%dh
		movw   $0xffff,0x14(%esi)
		and    $0x7c,%dh
		mov    %dh,0xa(%esi)
	jump_b34aa:
		testb  $0x1,0xa(%esi)
		je     jump_b34cd
		movw   $0x0,0x14(%esi)
		mov    0xa(%esi),%bh
		mov    0x14(%esi),%al
		and    $0x7e,%bh
		mov    %al,0x9(%esi)
		mov    %bh,%cl
		mov    %bh,0xa(%esi)
		or     $0x80,%cl
		mov    %cl,0xa(%esi)
	jump_b34cd:
		xor    %ebx,%ebx
		mov    0x9(%esi),%bl
		cmp    $0x48,%ebx
		jle    jump_b35a0
		testb  $0x4,0xa(%esi)
		jne    jump_b3589
		mov    $0x4,%edi
		xor    %eax,%eax
		xor    %ecx,%ecx
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    0x17(%esi),%al
		mov    0x6(%esi),%cx
		mov    0x4(%esi),%bx
		mov    0x2(%esi),%dx
		push   %eax
		add    $0x6,%ecx
		xor    %eax,%eax
		add    $0x6,%ebx
		mov    (%esi),%ax
		sub    $0x3,%edx
		sub    $0x3,%eax
		mov    %di,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		call   ac_draw_box_purple_list
		mov    $0x10,%eax
		xor    %ecx,%ecx
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    %ax,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %eax,%eax
		mov    0x6(%esi),%cx
		mov    0x16(%esi),%al
		mov    0x4(%esi),%bx
		push   %eax
		xor    %eax,%eax
		mov    0x2(%esi),%dx
		mov    (%esi),%ax
		call   ac_draw_box_purple_list
		xor    %edx,%edx
		mov    0xa(%esi),%bl
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		test   $0x8,%bl
		jne    jump_b3589
		xor    %ecx,%ecx
		xor    %ebx,%ebx
		xor    %edx,%edx
		xor    %eax,%eax
		mov    0x6(%esi),%cx
		mov    0x4(%esi),%bx
		mov    0x2(%esi),%dx
		mov    (%esi),%ax
		add    $0x6,%ecx
		add    $0x6,%ebx
		sub    $0x3,%edx
		sub    $0x3,%eax
		call   ac_copy_box_purple_list
		orb    $0x4,0xa(%esi)
	jump_b3589:
		cmpl   $0x0,0x10(%esi)
		je     jump_b3594
		mov    %esi,%eax
		call   *0x10(%esi)
	jump_b3594:
		mov    $0x3,%al
		add    $0x54,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_b35a0:
		cmp    $0x18,%ebx
		jg     jump_b37df
		xor    %eax,%eax
		mov    proj_origin_m2,%ebp
		mov    (%esi),%ax
		sar    $0x10,%ebp
		mov    %eax,%edx
		sub    %ebp,%edx
		imul   %ebx,%edx
		mov    $0x18,%ecx
		mov    %eax,(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		add    %ebp,%eax
		xor    %ecx,%ecx
		mov    %ax,0x28(%esp)
		mov    0x2(%esi),%cx
		mov    EXPORT_SYMBOL(proj_origin),%eax
		mov    %ecx,%edx
		sar    $0x10,%eax
		sub    %eax,%edx
		imul   %ebx,%edx
		mov    %eax,0x4(%esp)
		movl   $0x18,0x24(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idivl  0x24(%esp)
		add    0x4(%esp),%eax
		movswl %di,%edx
		add    (%esp),%edx
		sub    %ebp,%edx
		imul   %ebx,%edx
		mov    %ax,0x44(%esp)
		mov    $0x18,%edi
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %edi
		add    %ebp,%eax
		mov    %ax,0x40(%esp)
		mov    0x2a(%esp),%eax
		sar    $0x10,%eax
		lea    (%ecx,%eax,1),%edx
		sub    0x4(%esp),%edx
		imul   %ebx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %edi
		mov    0x4(%esp),%edx
		add    %edx,%eax
		mov    %ax,0x30(%esp)
		movw   $0x4,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %eax,%eax
		mov    0x16(%esi),%al
		mov    0x26(%esp),%edi
		push   %eax
		mov    0x46(%esp),%eax
		sar    $0x10,%edi
		sar    $0x10,%eax
		mov    %edi,%ebx
		mov    %eax,0x28(%esp)
		mov    %eax,%ecx
		mov    %ebp,%eax
		call   ac_draw_line_purple_list
		mov    0x2e(%esp),%ebp
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(proj_origin),%edx
		mov    0x16(%esi),%al
		sar    $0x10,%ebp
		push   %eax
		mov    0x42(%esp),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		mov    %ebp,%ecx
		mov    %eax,0x20(%esp)
		mov    proj_origin_m2,%eax
		mov    0x20(%esp),%ebx
		sar    $0x10,%eax
		call   ac_draw_line_purple_list
		xor    %edx,%edx
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %edx,%edx
		mov    0x4c(%esp),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		lea    (%eax,%eax,1),%edx
		mov    fe_mouseptr_sprites,%eax
		add    %edx,%eax
		mov    %eax,0x20(%esp)
		mov    0x24(%esp),%eax
		lea    -0x1(%edi),%edx
		dec    %eax
		mov    EXPORT_SYMBOL(lbDisplay)+40,%bx # lbDisplay.GraphicsWindowX
		add    %edx,%ebx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(purple_draw_index),%dx
		mov    %eax,%ecx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    purple_draw_list,%edx
		mov    %bx,(%edx,%eax,2)
		add    EXPORT_SYMBOL(lbDisplay)+44,%cx # lbDisplay.GraphicsWindowY
		mov    0x20(%esp),%ebx
		mov    %cx,0x2(%edx,%eax,2)
		mov    %ebx,0x4(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+113,%bl # lbDisplay.DrawColour
		mov    EXPORT_SYMBOL(purple_draw_index),%cx
		mov    %bl,0x8(%edx,%eax,2)
		xor    %ebx,%ebx
		mov    %cx,%bx
		movw   $0x0,0x18(%edx,%eax,2)
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		inc    %ecx
		add    %ebx,%eax
		mov    %cx,EXPORT_SYMBOL(purple_draw_index)
		mov    EXPORT_SYMBOL(lbDisplay)+40,%cx # lbDisplay.GraphicsWindowX
		movb   $0x5,0x17(%edx,%eax,2)
		mov    0x1c(%esp),%eax
		xor    %ebx,%ebx
		dec    %eax
		mov    EXPORT_SYMBOL(purple_draw_index),%bx
		add    %eax,%ecx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		lea    -0x1(%ebp),%edi
		mov    0x20(%esp),%ebx
		mov    %cx,(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+44,%cx # lbDisplay.GraphicsWindowY
		mov    %ebx,0x4(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+113,%bl # lbDisplay.DrawColour
		add    %ecx,%edi
		mov    EXPORT_SYMBOL(purple_draw_index),%cx
		mov    %bl,0x8(%edx,%eax,2)
		xor    %ebx,%ebx
		movw   $0x0,0x18(%edx,%eax,2)
		mov    %cx,%bx
		mov    %di,0x2(%edx,%eax,2)
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		movb   $0x5,0x17(%edx,%eax,2)
		inc    %ecx
		mov    0x8(%esi),%al
		mov    0x9(%esi),%dl
		mov    %cx,EXPORT_SYMBOL(purple_draw_index)
		add    %al,%dl
		xor    %al,%al
		mov    %dl,0x9(%esi)
		add    $0x54,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_b37df:
		mov    $0x4,%edx
		xor    %ebx,%ebx
		xor    %eax,%eax
		call   ac_IsSamplePlaying
		test   %al,%al
		jne    jump_b380d
		push   $0x1
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x6e,%edx
		xor    %eax,%eax
		call   ac_play_sample_using_heap
	jump_b380d:
		xor    %eax,%eax
		mov    0x9(%esi),%al
		cmp    $0x30,%eax
		jg     jump_b3ab4
		movswl %di,%edx
		sub    $0x18,%eax
		imul   %eax,%edx
		mov    $0x18,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    (%esi),%dx
		add    %eax,%edx
		mov    %dx,0x38(%esp)
		mov    (%esi),%dx
		add    %edi,%edx
		sub    %eax,%edx
		mov    0x16(%esi),%al
		mov    %al,EXPORT_SYMBOL(vec_colour)
		mov    0x36(%esp),%eax
		sar    $0x10,%eax
		mov    %eax,EXPORT_SYMBOL(purple_box_x1)
		xor    %eax,%eax
		mov    0x2(%esi),%ax
		mov    %dx,0x48(%esp)
		mov    %eax,EXPORT_SYMBOL(purple_box_y1)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(purple_box_x1),%edx
		mov    0x50(%esp),%al
		sub    %eax,%edx
		xor    %eax,%eax
		mov    (%esi),%ax
		mov    %edx,EXPORT_SYMBOL(purple_box_x2)
		cmp    %edx,%eax
		jle    jump_b3887
		mov    %eax,EXPORT_SYMBOL(purple_box_x2)
	jump_b3887:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(purple_box_x2),%ebx
		mov    0x2(%esi),%ax
		mov    EXPORT_SYMBOL(purple_box_y1),%edx
		mov    %eax,EXPORT_SYMBOL(purple_box_y2)
		mov    %eax,%ecx
		mov    EXPORT_SYMBOL(purple_box_x1),%eax
		call   ac_draw_trig_purple_list
		mov    0x36(%esp),%ebx
		xor    %eax,%eax
		xor    %edx,%edx
		sar    $0x10,%ebx
		mov    0x16(%esi),%al
		mov    0x2(%esi),%dx
		push   %eax
		xor    %eax,%eax
		mov    %edx,%ecx
		mov    (%esi),%ax
		call   ac_draw_line_purple_list
		mov    0x46(%esp),%eax
		sar    $0x10,%eax
		mov    0x2a(%esp),%edx
		mov    %eax,EXPORT_SYMBOL(purple_box_x1)
		xor    %eax,%eax
		sar    $0x10,%edx
		mov    0x2(%esi),%ax
		add    %edx,%eax
		xor    %edx,%edx
		mov    %eax,EXPORT_SYMBOL(purple_box_y1)
		mov    0x50(%esp),%dl
		mov    EXPORT_SYMBOL(purple_box_x1),%eax
		add    %edx,%eax
		mov    %eax,EXPORT_SYMBOL(purple_box_x2)
		xor    %eax,%eax
		movswl %di,%edx
		mov    (%esi),%ax
		mov    EXPORT_SYMBOL(purple_box_x2),%ebx
		add    %edx,%eax
		cmp    %ebx,%eax
		jge    jump_b3914
		mov    %eax,EXPORT_SYMBOL(purple_box_x2)
	jump_b3914:
		mov    0x2a(%esp),%ebp
		xor    %eax,%eax
		sar    $0x10,%ebp
		mov    0x2(%esi),%ax
		mov    EXPORT_SYMBOL(purple_box_x2),%ebx
		add    %ebp,%eax
		mov    EXPORT_SYMBOL(purple_box_y1),%edx
		mov    %eax,EXPORT_SYMBOL(purple_box_y2)
		mov    %eax,%ecx
		mov    EXPORT_SYMBOL(purple_box_x1),%eax
		call   ac_draw_trig_purple_list
		xor    %eax,%eax
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    0x16(%esi),%al
		mov    0x2(%esi),%dx
		mov    (%esi),%bx
		push   %eax
		add    %ebp,%edx
		movswl %di,%eax
		mov    0x4a(%esp),%edi
		mov    %edx,%ecx
		sar    $0x10,%edi
		add    %eax,%ebx
		mov    %edi,%eax
		call   ac_draw_line_purple_list
		xor    %edx,%edx
		mov    0x4c(%esp),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    fe_mouseptr_sprites,%ecx
		add    %eax,%eax
		xor    %edx,%edx
		add    %eax,%ecx
		mov    0x36(%esp),%eax
		mov    0x2(%esi),%dx
		sar    $0x10,%eax
		dec    %edx
		dec    %eax
		mov    %edx,0x8(%esp)
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay)+40,%bx # lbDisplay.GraphicsWindowX
		mov    EXPORT_SYMBOL(purple_draw_index),%dx
		add    %eax,%ebx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    purple_draw_list,%edx
		mov    %bx,(%edx,%eax,2)
		mov    0x8(%esp),%ebx
		add    EXPORT_SYMBOL(lbDisplay)+44,%bx # lbDisplay.GraphicsWindowY
		mov    %ecx,0x4(%edx,%eax,2)
		mov    %bx,0x2(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+113,%bl # lbDisplay.DrawColour
		mov    %bl,0x8(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		mov    %bx,0x18(%edx,%eax,2)
		mov    EXPORT_SYMBOL(purple_draw_index),%ax
		xor    %ebx,%ebx
		mov    %ax,%bx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		inc    %ebx
		movb   $0x5,0x17(%edx,%eax,2)
		mov    %bx,EXPORT_SYMBOL(purple_draw_index)
		xor    %eax,%eax
		xor    %ebx,%ebx
		mov    0x6(%esi),%ax
		mov    0x2(%esi),%bx
		add    %ebx,%eax
		dec    %edi
		lea    -0x2(%eax),%ebx
		mov    %edi,%eax
		mov    %ebx,0xc(%esp)
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(lbDisplay)+40,%di # lbDisplay.GraphicsWindowX
		mov    EXPORT_SYMBOL(purple_draw_index),%bx
		add    %eax,%edi
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    0xc(%esp),%ebx
		mov    %di,(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+44,%di # lbDisplay.GraphicsWindowY
		mov    %ecx,0x4(%edx,%eax,2)
		add    %edi,%ebx
		mov    %bx,0x2(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+113,%bl # lbDisplay.DrawColour
		mov    %bl,0x8(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(purple_draw_index),%cx
		mov    %bx,0x18(%edx,%eax,2)
		xor    %ebx,%ebx
		mov    %cx,%bx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		movb   $0x5,0x17(%edx,%eax,2)
		mov    0x8(%esi),%al
		mov    0x9(%esi),%ah
		inc    %ecx
		add    %al,%ah
		mov    %cx,EXPORT_SYMBOL(purple_draw_index)
		mov    %ah,0x9(%esi)
		xor    %al,%al
		add    $0x54,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_b3ab4:
		mov    0x2a(%esp),%edx
		sub    $0x30,%eax
		sar    $0x10,%edx
		imul   %eax,%edx
		mov    $0x18,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    0x2(%esi),%dx
		add    %eax,%edx
		mov    0x2c(%esp),%ebx
		mov    %dx,0x3c(%esp)
		mov    0x2(%esi),%dx
		add    %ebx,%edx
		sub    %eax,%edx
		mov    0x16(%esi),%al
		mov    %al,EXPORT_SYMBOL(vec_colour)
		xor    %eax,%eax
		movswl %di,%ecx
		mov    (%esi),%ax
		add    %ecx,%eax
		mov    %eax,EXPORT_SYMBOL(purple_box_x1)
		mov    0x3a(%esp),%eax
		sar    $0x10,%eax
		mov    %eax,EXPORT_SYMBOL(purple_box_y1)
		mov    EXPORT_SYMBOL(purple_box_x1),%eax
		mov    %dx,0x34(%esp)
		mov    %eax,EXPORT_SYMBOL(purple_box_x2)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(purple_box_y1),%edx
		mov    0x50(%esp),%al
		sub    %eax,%edx
		xor    %eax,%eax
		mov    0x2(%esi),%ax
		mov    %edx,EXPORT_SYMBOL(purple_box_y2)
		cmp    %edx,%eax
		jle    jump_b3b39
		mov    %eax,EXPORT_SYMBOL(purple_box_y2)
	jump_b3b39:
		mov    EXPORT_SYMBOL(purple_box_y2),%ecx
		mov    EXPORT_SYMBOL(purple_box_x2),%ebx
		mov    EXPORT_SYMBOL(purple_box_y1),%edx
		mov    EXPORT_SYMBOL(purple_box_x1),%eax
		call   ac_draw_trig_purple_list
		mov    0x3a(%esp),%ecx
		xor    %eax,%eax
		xor    %edx,%edx
		mov    0x16(%esi),%al
		mov    (%esi),%dx
		push   %eax
		movswl %di,%eax
		sar    $0x10,%ecx
		add    %edx,%eax
		xor    %edx,%edx
		mov    %eax,%ebx
		mov    0x2(%esi),%dx
		call   ac_draw_line_purple_list
		xor    %eax,%eax
		mov    (%esi),%ax
		mov    %eax,EXPORT_SYMBOL(purple_box_x1)
		mov    0x32(%esp),%eax
		sar    $0x10,%eax
		mov    %eax,EXPORT_SYMBOL(purple_box_y1)
		mov    EXPORT_SYMBOL(purple_box_x1),%eax
		mov    %eax,EXPORT_SYMBOL(purple_box_x2)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(purple_box_y1),%edx
		mov    0x50(%esp),%al
		add    %eax,%edx
		mov    0x2a(%esp),%eax
		mov    %edx,EXPORT_SYMBOL(purple_box_y2)
		xor    %edx,%edx
		sar    $0x10,%eax
		mov    0x2(%esi),%dx
		mov    EXPORT_SYMBOL(purple_box_y2),%ebx
		add    %edx,%eax
		cmp    %ebx,%eax
		jge    jump_b3bcb
		mov    %eax,EXPORT_SYMBOL(purple_box_y2)
	jump_b3bcb:
		mov    EXPORT_SYMBOL(purple_box_y2),%ecx
		mov    EXPORT_SYMBOL(purple_box_x2),%ebx
		mov    EXPORT_SYMBOL(purple_box_y1),%edx
		mov    EXPORT_SYMBOL(purple_box_x1),%eax
		call   ac_draw_trig_purple_list
		xor    %eax,%eax
		mov    0x16(%esi),%al
		mov    0x32(%esp),%ebp
		push   %eax
		mov    0x2e(%esp),%eax
		xor    %ecx,%ecx
		sar    $0x10,%eax
		mov    0x2(%esi),%cx
		mov    %eax,0x1c(%esp)
		add    %eax,%ecx
		xor    %eax,%eax
		sar    $0x10,%ebp
		mov    (%esi),%ax
		mov    %ebp,%edx
		mov    %eax,%ebx
		call   ac_draw_line_purple_list
		xor    %edx,%edx
		mov    0x4c(%esp),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		lea    (%eax,%eax,1),%edx
		mov    fe_mouseptr_sprites,%eax
		add    %edx,%eax
		mov    %eax,0x10(%esp)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+40,%bx # lbDisplay.GraphicsWindowX
		mov    (%esi),%ax
		xor    %edx,%edx
		dec    %eax
		mov    EXPORT_SYMBOL(purple_draw_index),%dx
		add    %eax,%ebx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    purple_draw_list,%edx
		lea    -0x1(%ebp),%ecx
		mov    %bx,(%edx,%eax,2)
		add    EXPORT_SYMBOL(lbDisplay)+44,%cx # lbDisplay.GraphicsWindowY
		mov    0x10(%esp),%ebx
		mov    %cx,0x2(%edx,%eax,2)
		mov    %ebx,0x4(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+113,%bl # lbDisplay.DrawColour
		mov    %bl,0x8(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(purple_draw_index),%cx
		mov    %bx,0x18(%edx,%eax,2)
		xor    %ebx,%ebx
		mov    %cx,%bx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		inc    %ecx
		add    %ebx,%eax
		mov    %cx,EXPORT_SYMBOL(purple_draw_index)
		movb   $0x5,0x17(%edx,%eax,2)
		mov    0x3a(%esp),%ebx
		xor    %eax,%eax
		xor    %ecx,%ecx
		sar    $0x10,%ebx
		mov    0x4(%esi),%ax
		mov    (%esi),%cx
		dec    %ebx
		add    %ecx,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+40,%cx # lbDisplay.GraphicsWindowX
		mov    %ebx,0x14(%esp)
		xor    %ebx,%ebx
		sub    $0x2,%eax
		mov    EXPORT_SYMBOL(purple_draw_index),%bx
		add    %eax,%ecx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    0x14(%esp),%ebx
		mov    %cx,(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+44,%cx # lbDisplay.GraphicsWindowY
		add    %ecx,%ebx
		mov    %bx,0x2(%edx,%eax,2)
		mov    0x10(%esp),%ebx
		mov    %ebx,0x4(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+113,%bl # lbDisplay.DrawColour
		mov    %bl,0x8(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(purple_draw_index),%cx
		mov    %bx,0x18(%edx,%eax,2)
		xor    %ebx,%ebx
		mov    %cx,%bx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		movswl %di,%edi
		inc    %ecx
		movb   $0x5,0x17(%edx,%eax,2)
		xor    %eax,%eax
		mov    %cx,EXPORT_SYMBOL(purple_draw_index)
		mov    0x16(%esi),%al
		xor    %edx,%edx
		push   %eax
		xor    %eax,%eax
		mov    0x2(%esi),%dx
		mov    (%esi),%ax
		mov    %edx,%ecx
		lea    (%eax,%edi,1),%ebx
		call   ac_draw_line_purple_list
		xor    %eax,%eax
		xor    %edx,%edx
		mov    0x16(%esi),%al
		mov    0x2(%esi),%dx
		push   %eax
		add    0x1c(%esp),%edx
		xor    %eax,%eax
		mov    (%esi),%ax
		mov    %edx,%ecx
		lea    (%eax,%edi,1),%ebx
		call   ac_draw_line_purple_list
		mov    0x8(%esi),%al
		mov    0x9(%esi),%ch
		add    %al,%ch
		mov    $0x2,%al
		mov    %ch,0x9(%esi)
		add    $0x54,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_flashy_draw_purple_text_box)	/* 0x0B3DA4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x6c,%esp
		mov    %eax,%esi
		mov    $0xf,%ah
		xor    %dl,%dl
		mov    %ah,0x60(%esp)
		xor    %eax,%eax
		mov    %dl,0x64(%esp)
		mov    0x3e(%esi),%al
		mov    %dl,0x68(%esp)
		cmp    $0xf7,%eax
		setne  %al
		and    $0xff,%eax
		add    $0xb,%eax
		mov    0x3d(%esi),%bl
		mov    %al,0x5c(%esp)
		test   $0x1,%bl
		je     jump_b3de4
		mov    $0xc,%al
		jmp    jump_b3de6
	jump_b3de4:
		xor    %al,%al
	jump_b3de6:
		cmpl   $0x0,0x28(%esi)
		jne    jump_b3dfb
		mov    0x30(%esi),%ebx
		test   %ebx,%ebx
		jne    jump_b3dfb
		cmp    $brief_netscan_box,%esi
		jne    jump_b3e2a
	jump_b3dfb:
		mov    0x10(%esi),%dx
		xor    %ecx,%ecx
		add    $0x2,%edx
		mov    0x12(%esi),%di
		mov    %dx,%cx
		mov    0x4(%esi),%dx
		xor    %ah,%ah
		sub    $0x8,%edx
		xor    %ebx,%ebx
		sub    %eax,%edx
		mov    0x2(%esi),%ax
		mov    %dx,%bx
		add    $0x4,%eax
		xor    %edx,%edx
		add    %edi,%eax
		jmp    jump_b3e54
	jump_b3e2a:
		mov    0x10(%esi),%dx
		mov    0x4(%esi),%bx
		xor    %ecx,%ecx
		xor    %ah,%ah
		add    $0x17,%edx
		sub    $0x8,%bx
		mov    %dx,%cx
		sub    %ax,%bx
		mov    0x2(%esi),%ax
		mov    0x12(%esi),%dx
		add    $0x4,%eax
		add    %edx,%eax
		xor    %edx,%edx
	jump_b3e54:
		mov    %ax,%dx
		mov    (%esi),%ax
		add    $0x4,%eax
		and    $0xffff,%eax
		call   ac_my_set_text_window
		mov    0x1c(%esi),%eax
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    0xb(%esi),%al
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		mov    %al,EXPORT_SYMBOL(byte_197160)
		mov    EXPORT_SYMBOL(text_window_y2),%ax
		sub    %edx,%eax
		mov    %eax,%edx
		mov    0x40(%esi),%bh
		dec    %edx
		test   %bh,%bh
		jne    jump_b3ea7
		mov    $0x41,%eax
		call   ac_font_height
		mov    EXPORT_SYMBOL(byte_197160),%ah
		add    %ah,%al
		mov    %al,0x40(%esi)
	jump_b3ea7:
		xor    %ebx,%ebx
		mov    0x40(%esi),%bl
		and    $0xffff,%edx
		add    $0x2,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    0x4(%esi),%di
		mov    %eax,0x4c(%esp)
		mov    0x6(%esi),%ax
		mov    0x3c(%esi),%cl
		dec    %eax
		dec    %edi
		mov    %ax,0x54(%esp)
		test   $0x1,%cl
		je     jump_b3f2a
		mov    0x3c(%esi),%ch
		and    $0x7e,%ch
		movb   $0x0,0x9(%esi)
		mov    %ch,%al
		mov    %ch,0x3c(%esi)
		or     $0x80,%al
		mov    %al,0x3c(%esi)
		xor    %eax,%eax
		xor    %edx,%edx
		jmp    jump_b3ef2
	jump_b3ef1:
		inc    %eax
	jump_b3ef2:
		xor    %ebx,%ebx
		mov    %ax,%bx
		cmp    $0x2,%ebx
		jge    jump_b3f2a
		shl    $0x2,%ebx
		add    %esi,%ebx
		mov    0x28(%ebx),%ecx
		cmp    %ecx,%edx
		je     jump_b3f13
		mov    %ecx,%ebx
		mov    0x24(%ecx),%cl
		or     $0x1,%cl
		mov    %cl,0x24(%ebx)
	jump_b3f13:
		xor    %ebx,%ebx
		mov    %ax,%bx
		shl    $0x2,%ebx
		add    %esi,%ebx
		mov    0x30(%ebx),%ebp
		cmp    %ebp,%edx
		je     jump_b3ef1
		orb    $0x1,0x24(%ebp)
		jmp    jump_b3ef1
	jump_b3f2a:
		mov    0x3c(%esi),%al
		test   $0x2,%al
		je     jump_b3f92
		mov    %al,%ah
		and    $0xfc,%ah
		mov    %ah,0x3c(%esi)
		mov    0x18(%esi),%eax
		movb   $0xff,0x9(%esi)
		test   %eax,%eax
		je     jump_b3f4f
		call   ac_my_str_len
		mov    %ax,0x3a(%esi)
		jmp    jump_b3f55
	jump_b3f4f:
		movw   $0xfffb,0x3a(%esi)
	jump_b3f55:
		mov    $0x2,%edx
		xor    %eax,%eax
		xor    %ecx,%ecx
		jmp    jump_b3f61
	jump_b3f60:
		inc    %eax
	jump_b3f61:
		xor    %ebx,%ebx
		mov    %ax,%bx
		cmp    $0x2,%ebx
		jge    jump_b3f92
		shl    $0x2,%ebx
		add    %esi,%ebx
		mov    0x28(%ebx),%ebp
		cmp    %ebp,%ecx
		je     jump_b3f7b
		or     %dx,0x24(%ebp)
	jump_b3f7b:
		xor    %ebx,%ebx
		mov    %ax,%bx
		shl    $0x2,%ebx
		add    %esi,%ebx
		mov    0x30(%ebx),%ebp
		cmp    %ebp,%ecx
		je     jump_b3f60
		or     %dx,0x24(%ebp)
		jmp    jump_b3f60
	jump_b3f92:
		xor    %ebx,%ebx
		mov    0x9(%esi),%bl
		cmp    $0x48,%ebx
		jle    jump_b51d1
		testb  $0x1,0x3d(%esi)
		jne    jump_b4045
		testb  $0x80,0x3c(%esi)
		je     jump_b3fbf
		mov    0x3c(%esi),%ch
		movw   $0xfffb,0x3a(%esi)
		and    $0x7f,%ch
		mov    %ch,0x3c(%esi)
	jump_b3fbf:
		testb  $0x4,0x3c(%esi)
		jne    jump_b50e4
		movw   $0x4,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %eax,%eax
		xor    %ecx,%ecx
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    0x3f(%esi),%al
		mov    0x6(%esi),%cx
		mov    0x4(%esi),%bx
		mov    0x2(%esi),%dx
		push   %eax
		add    $0x6,%ecx
		xor    %eax,%eax
		add    $0x6,%ebx
		mov    (%esi),%ax
		sub    $0x3,%edx
		sub    $0x3,%eax
		mov    $0x10,%edi
		call   ac_draw_box_purple_list
		mov    %di,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %eax,%eax
		xor    %ecx,%ecx
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    0x3e(%esi),%al
		mov    0x6(%esi),%cx
		mov    0x4(%esi),%bx
		push   %eax
		xor    %eax,%eax
		mov    0x2(%esi),%dx
		mov    (%esi),%ax
		call   ac_draw_box_purple_list
		xor    %eax,%eax
		mov    %ax,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		testb  $0x8,0x3c(%esi)
		jne    jump_b50e4
		jmp    jump_b50b8
	jump_b4045:
		testb  $0x80,0x3c(%esi)
		je     jump_b40f0
		cmpw   $0x0,0x16(%esi)
		jne    jump_b4062
		mov    0x18(%esi),%eax
		call   ac_my_count_lines
		mov    %ax,0x16(%esi)
	jump_b4062:
		xor    %edx,%edx
		mov    0xe(%esi),%eax
		mov    0x4c(%esp),%dx
		sar    $0x10,%eax
		imul   %eax,%edx
		xor    %ebx,%ebx
		mov    0x16(%esi),%bx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		xor    %edx,%edx
		mov    %ax,0xe(%esi)
		mov    %ax,%dx
		mov    0xe(%esi),%eax
		sar    $0x10,%eax
		cmp    %eax,%edx
		jl     jump_b40a4
		mov    0x3d(%esi),%bl
		test   $0x2,%bl
		jne    jump_b40a4
		mov    %bl,%bh
		and    $0xfe,%bh
		mov    %bh,0x3d(%esi)
		jmp    jump_b40ca
	jump_b40a4:
		mov    0xe(%esi),%eax
		xor    %edx,%edx
		sar    $0x10,%eax
		mov    0xe(%esi),%dx
		cmp    %eax,%edx
		jl     jump_b40c4
		movw   $0x0,0xc(%esi)
		mov    0x10(%esi),%ax
		mov    %ax,0xe(%esi)
		jmp    jump_b40ca
	jump_b40c4:
		movw   $0x0,0xc(%esi)
	jump_b40ca:
		mov    0x3c(%esi),%bx
		movw   $0x0,0x38(%esi)
		xor    %eax,%eax
		and    $0xfb7f,%ebx
		mov    0x9(%esi),%al
		mov    %bx,0x3c(%esi)
		cmp    $0xff,%eax
		je     jump_b40f0
		movw   $0xfffb,0x3a(%esi)
	jump_b40f0:
		mov    0x3d(%esi),%cl
		test   $0x1,%cl
		je     jump_b5041
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+106 # lbDisplay.MLeftButton
		je     jump_b418b
		test   $0x4,%cl
		je     jump_b418b
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_b4128
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		add    %eax,%eax
		jmp    jump_b412d
	jump_b4128:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
	jump_b412d:
		xor    %edx,%edx
		mov    0x14(%esi),%dx
		sub    %edx,%eax
		mov    %ax,0xc(%esi)
		mov    0xa(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_b414b
		movw   $0x0,0xc(%esi)
		jmp    jump_b416b
	jump_b414b:
		xor    %edx,%edx
		mov    0xe(%esi),%dx
		add    %eax,%edx
		mov    0xe(%esi),%eax
		sar    $0x10,%eax
		cmp    %eax,%edx
		jle    jump_b416b
		mov    0x10(%esi),%ax
		mov    0xe(%esi),%dx
		sub    %edx,%eax
		mov    %ax,0xc(%esi)
	jump_b416b:
		mov    0xa(%esi),%edx
		xor    %eax,%eax
		sar    $0x10,%edx
		mov    0x16(%esi),%ax
		imul   %eax,%edx
		mov    0xe(%esi),%ebx
		sar    $0x10,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %ax,0x38(%esi)
	jump_b418b:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_b41a1
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
		add    %eax,%eax
		jmp    jump_b41a6
	jump_b41a1:
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
	jump_b41a6:
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    0x4(%esi),%dx
		mov    (%esi),%bx
		add    %ebx,%edx
		sub    $0xc,%edx
		cmp    %edx,%eax
		jl     jump_b43e1
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_b41d4
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
		add    %eax,%eax
		jmp    jump_b41d9
	jump_b41d4:
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
	jump_b41d9:
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    0x4(%esi),%bx
		mov    (%esi),%dx
		add    %ebx,%edx
		sub    $0x6,%edx
		cmp    %edx,%eax
		jg     jump_b43e1
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_b4207
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		add    %eax,%eax
		jmp    jump_b420c
	jump_b4207:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
	jump_b420c:
		xor    %edx,%edx
		mov    0x10(%esi),%ebx
		mov    0x2(%esi),%dx
		sar    $0x10,%ebx
		add    $0x5,%edx
		add    %ebx,%edx
		cmp    %edx,%eax
		jl     jump_b42d4
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_b423b
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		add    %eax,%eax
		jmp    jump_b4240
	jump_b423b:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
	jump_b4240:
		mov    0xa(%esi),%ebx
		xor    %edx,%edx
		mov    0x10(%esi),%ecx
		mov    0x2(%esi),%dx
		sar    $0x10,%ebx
		add    $0x5,%edx
		sar    $0x10,%ecx
		add    %ebx,%edx
		add    %ecx,%edx
		cmp    %edx,%eax
		jge    jump_b42d4
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		je     jump_b43e1
		xor    %ch,%ch
		mov    %ch,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		xor    %eax,%eax
		mov    0xe(%esi),%edx
		mov    0x4c(%esp),%ax
		sar    $0x10,%edx
		dec    %eax
		imul   %eax,%edx
		xor    %ecx,%ecx
		mov    0x16(%esi),%cx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		sub    %eax,%ebx
		mov    %bx,0xc(%esi)
		mov    0xa(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_b42ab
		movw   $0x0,0xc(%esi)
		jmp    jump_b43c1
	jump_b42ab:
		xor    %edx,%edx
		mov    0xe(%esi),%dx
		add    %eax,%edx
		mov    0xe(%esi),%eax
		sar    $0x10,%eax
		cmp    %eax,%edx
		jle    jump_b43c1
		mov    0x10(%esi),%ax
		mov    0xe(%esi),%cx
		sub    %ecx,%eax
		mov    %ax,0xc(%esi)
		jmp    jump_b43c1
	jump_b42d4:
		xor    %eax,%eax
		mov    0xa(%esi),%edx
		mov    0x2(%esi),%ax
		sar    $0x10,%edx
		add    $0x5,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    0xe(%esi),%dx
		add    %eax,%edx
		mov    0x10(%esi),%eax
		sar    $0x10,%eax
		add    %eax,%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_b430b
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		add    %eax,%eax
		jmp    jump_b4310
	jump_b430b:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
	jump_b4310:
		cmp    %edx,%eax
		jle    jump_b43e1
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_b432e
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		add    %eax,%eax
		jmp    jump_b4333
	jump_b432e:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
	jump_b4333:
		mov    0xe(%esi),%edx
		xor    %ebx,%ebx
		sar    $0x10,%edx
		mov    0x2(%esi),%bx
		mov    0x10(%esi),%ecx
		add    %edx,%ebx
		sar    $0x10,%ecx
		add    $0x6,%ebx
		add    %ecx,%ebx
		cmp    %ebx,%eax
		jge    jump_b43e1
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		je     jump_b43e1
		xor    %bh,%bh
		mov    %bh,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		xor    %eax,%eax
		mov    0x4c(%esp),%ax
		dec    %eax
		imul   %eax,%edx
		xor    %ebx,%ebx
		mov    0x16(%esi),%bx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,%edx
		mov    0xa(%esi),%eax
		sar    $0x10,%eax
		add    %edx,%eax
		mov    %ax,0xc(%esi)
		mov    0xa(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_b43a1
		movw   $0x0,0xc(%esi)
		jmp    jump_b43c1
	jump_b43a1:
		xor    %edx,%edx
		mov    0xe(%esi),%dx
		add    %eax,%edx
		mov    0xe(%esi),%eax
		sar    $0x10,%eax
		cmp    %eax,%edx
		jle    jump_b43c1
		mov    0x10(%esi),%ax
		mov    0xe(%esi),%bx
		sub    %ebx,%eax
		mov    %ax,0xc(%esi)
	jump_b43c1:
		mov    0xa(%esi),%edx
		xor    %eax,%eax
		sar    $0x10,%edx
		mov    0x16(%esi),%ax
		imul   %eax,%edx
		mov    0xe(%esi),%ebx
		sar    $0x10,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %ax,0x38(%esi)
	jump_b43e1:
		mov    0x2(%esi),%ax
		add    0x6(%esi),%ax
		mov    0x4(%esi),%dx
		movswl %ax,%ecx
		mov    (%esi),%ax
		mov    (%esi),%ebx
		add    %edx,%eax
		sar    $0x10,%ebx
		movswl %ax,%edx
		movswl (%esi),%eax
		call   ac_mouse_move_over_rect
		test   %al,%al
		je     jump_b454b
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+200
		jne    jump_b4435
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+208
		jne    jump_b4435
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+201
		jne    jump_b4435
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+209
		je     jump_b454b
	jump_b4435:
		testb  $0x4,0x3d(%esi)
		jne    jump_b454b
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+208
		je     jump_b4467
		mov    0xe(%esi),%edx
		xor    %ebx,%ebx
		sar    $0x10,%edx
		mov    0x16(%esi),%bx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,%edx
		mov    0xa(%esi),%eax
		sar    $0x10,%eax
		add    %edx,%eax
		jmp    jump_b448d
	jump_b4467:
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+200
		je     jump_b4491
		mov    0xe(%esi),%edx
		xor    %ebx,%ebx
		sar    $0x10,%edx
		mov    0x16(%esi),%bx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,%edx
		mov    0xa(%esi),%eax
		sar    $0x10,%eax
		sub    %edx,%eax
	jump_b448d:
		mov    %ax,0xc(%esi)
	jump_b4491:
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+209
		je     jump_b44c4
		xor    %edx,%edx
		mov    0xe(%esi),%eax
		mov    0x4c(%esp),%dx
		sar    $0x10,%eax
		dec    %edx
		imul   %eax,%edx
		xor    %ebx,%ebx
		mov    0x16(%esi),%bx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,%edx
		mov    0xa(%esi),%eax
		sar    $0x10,%eax
		add    %edx,%eax
		jmp    jump_b44f5
	jump_b44c4:
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+201
		je     jump_b44f9
		xor    %eax,%eax
		mov    0xe(%esi),%edx
		mov    0x4c(%esp),%ax
		sar    $0x10,%edx
		dec    %eax
		imul   %eax,%edx
		xor    %ebx,%ebx
		mov    0x16(%esi),%bx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,%edx
		mov    0xa(%esi),%eax
		sar    $0x10,%eax
		sub    %edx,%eax
	jump_b44f5:
		mov    %ax,0xc(%esi)
	jump_b44f9:
		mov    0xa(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_b450b
		movw   $0x0,0xc(%esi)
		jmp    jump_b452b
	jump_b450b:
		xor    %edx,%edx
		mov    0xe(%esi),%dx
		add    %eax,%edx
		mov    0xe(%esi),%eax
		sar    $0x10,%eax
		cmp    %eax,%edx
		jle    jump_b452b
		mov    0x10(%esi),%ax
		mov    0xe(%esi),%bx
		sub    %ebx,%eax
		mov    %ax,0xc(%esi)
	jump_b452b:
		mov    0xa(%esi),%eax
		xor    %edx,%edx
		sar    $0x10,%eax
		mov    0x16(%esi),%dx
		imul   %eax,%edx
		mov    0xe(%esi),%ebx
		sar    $0x10,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %ax,0x38(%esi)
	jump_b454b:
		testb  $0x4,0x3c(%esi)
		jne    jump_b469d
		movw   $0x4,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %eax,%eax
		xor    %ecx,%ecx
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    0x3f(%esi),%al
		mov    0x6(%esi),%cx
		mov    0x4(%esi),%bx
		mov    0x2(%esi),%dx
		push   %eax
		add    $0x6,%ecx
		xor    %eax,%eax
		sub    $0xa,%ebx
		mov    (%esi),%ax
		sub    $0x3,%edx
		sub    $0x3,%eax
		call   ac_draw_box_purple_list
		xor    %eax,%eax
		xor    %ecx,%ecx
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    0x3f(%esi),%al
		mov    0x6(%esi),%cx
		mov    0x2(%esi),%dx
		mov    (%esi),%bx
		push   %eax
		xor    %eax,%eax
		add    $0x6,%ecx
		mov    0x4(%esi),%ax
		sub    $0x3,%edx
		add    %ebx,%eax
		mov    $0x8,%ebx
		sub    $0x5,%eax
		call   ac_draw_box_purple_list
		mov    0x10(%esi),%ecx
		xor    %eax,%eax
		xor    %edx,%edx
		xor    %ebx,%ebx
		sar    $0x10,%ecx
		mov    0x3f(%esi),%al
		mov    0x2(%esi),%dx
		mov    (%esi),%bx
		push   %eax
		xor    %eax,%eax
		add    $0x7,%ecx
		mov    0x4(%esi),%ax
		sub    $0x3,%edx
		add    %ebx,%eax
		mov    $0x8,%ebx
		sub    $0xd,%eax
		call   ac_draw_box_purple_list
		xor    %eax,%eax
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    0x3f(%esi),%al
		mov    0x6(%esi),%dx
		mov    0x2(%esi),%bx
		push   %eax
		mov    %edx,%ecx
		mov    0xe(%esi),%eax
		mov    0x10(%esi),%edx
		sar    $0x10,%eax
		sar    $0x10,%edx
		sub    %eax,%ecx
		add    %ebx,%eax
		sub    $0x3,%ecx
		add    $0x6,%eax
		sub    %edx,%ecx
		xor    %ebx,%ebx
		add    %eax,%edx
		xor    %eax,%eax
		mov    (%esi),%bx
		mov    0x4(%esi),%ax
		add    %ebx,%eax
		mov    $0x8,%ebx
		sub    $0xd,%eax
		call   ac_draw_box_purple_list
		movw   $0x10,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %eax,%eax
		xor    %ecx,%ecx
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    0x3e(%esi),%al
		mov    0x6(%esi),%cx
		mov    0x4(%esi),%bx
		push   %eax
		xor    %eax,%eax
		mov    0x2(%esi),%dx
		mov    (%esi),%ax
		call   ac_draw_box_purple_list
		xor    %eax,%eax
		mov    %ax,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		testb  $0x8,0x3c(%esi)
		jne    jump_b469d
		xor    %ecx,%ecx
		xor    %ebx,%ebx
		xor    %edx,%edx
		xor    %eax,%eax
		mov    0x6(%esi),%cx
		mov    0x4(%esi),%bx
		mov    0x2(%esi),%dx
		mov    (%esi),%ax
		add    $0x6,%ecx
		add    $0x6,%ebx
		sub    $0x3,%edx
		sub    $0x3,%eax
		call   ac_copy_box_purple_list
		orb    $0x4,0x3c(%esi)
	jump_b469d:
		mov    0x3d(%esi),%bl
		test   $0x1,%bl
		je     jump_b483f
		mov    0xa(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jl     jump_b483f
		movw   $0x4,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		test   $0x4,%bl
		jne    jump_b4797
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_b46df
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
		add    %eax,%eax
		jmp    jump_b46e4
	jump_b46df:
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
	jump_b46e4:
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    0x4(%esi),%dx
		mov    (%esi),%bx
		add    %ebx,%edx
		sub    $0xc,%edx
		cmp    %edx,%eax
		jl     jump_b47f8
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_b4712
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
		add    %eax,%eax
		jmp    jump_b4717
	jump_b4712:
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
	jump_b4717:
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    0x4(%esi),%dx
		mov    (%esi),%bx
		add    %ebx,%edx
		sub    $0x6,%edx
		cmp    %edx,%eax
		jg     jump_b47f8
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_b4746
		mov    EXPORT_SYMBOL(lbDisplay)+84,%ebx # lbDisplay.MMouseY
		add    %ebx,%ebx
		jmp    jump_b474c
	jump_b4746:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%ebx # lbDisplay.MMouseY
	jump_b474c:
		xor    %eax,%eax
		mov    0xa(%esi),%edx
		mov    0x2(%esi),%ax
		sar    $0x10,%edx
		add    $0x5,%eax
		add    %eax,%edx
		mov    0x10(%esi),%eax
		sar    $0x10,%eax
		lea    (%edx,%eax,1),%ecx
		cmp    %ecx,%ebx
		jl     jump_b47f8
		xor    %ebx,%ebx
		mov    0xe(%esi),%bx
		add    %ebx,%edx
		add    %eax,%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_b478e
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		add    %eax,%eax
		jmp    jump_b4793
	jump_b478e:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
	jump_b4793:
		cmp    %edx,%eax
		jg     jump_b47f8
	jump_b4797:
		xor    %ebx,%ebx
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		je     jump_b47f8
		xor    %ch,%ch
		mov    %ch,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		orb    $0x4,0x3d(%esi)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_b47cb
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_b47d0
	jump_b47cb:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_b47d0:
		push   $0x1
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		mov    0xa(%esi),%edx
		push   $0x0
		sar    $0x10,%edx
		push   $0x64
		sub    %edx,%eax
		mov    $0x7d,%edx
		mov    %ax,0x14(%esi)
		xor    %eax,%eax
		call   ac_play_sample_using_heap
	jump_b47f8:
		xor    %edx,%edx
		mov    0xa(%esi),%eax
		mov    0x2(%esi),%dx
		sar    $0x10,%eax
		add    $0x5,%edx
		push   $0xae
		add    %edx,%eax
		mov    0x10(%esi),%edx
		xor    %ecx,%ecx
		sar    $0x10,%edx
		xor    %ebx,%ebx
		add    %eax,%edx
		xor    %eax,%eax
		mov    0x4(%esi),%bx
		mov    (%esi),%ax
		mov    0xe(%esi),%cx
		add    %ebx,%eax
		mov    $0x6,%ebx
		sub    $0xc,%eax
		call   ac_draw_box_purple_list
		xor    %ecx,%ecx
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
	jump_b483f:
		movw   $0x4,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_b485e
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
		add    %eax,%eax
		jmp    jump_b4863
	jump_b485e:
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
	jump_b4863:
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    0x4(%esi),%dx
		mov    (%esi),%bx
		add    %ebx,%edx
		sub    $0xd,%edx
		cmp    %edx,%eax
		jl     jump_b4b6d
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_b4891
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
		add    %eax,%eax
		jmp    jump_b4896
	jump_b4891:
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
	jump_b4896:
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    0x4(%esi),%dx
		mov    (%esi),%bx
		add    %ebx,%edx
		sub    $0x5,%edx
		cmp    %edx,%eax
		jg     jump_b4b6d
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_b48c4
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		add    %eax,%eax
		jmp    jump_b48c9
	jump_b48c4:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
	jump_b48c9:
		mov    0xe(%esi),%edx
		xor    %ebx,%ebx
		sar    $0x10,%edx
		mov    0x2(%esi),%bx
		add    %ebx,%edx
		mov    0x10(%esi),%ebx
		add    $0x9,%edx
		sar    $0x10,%ebx
		add    %ebx,%edx
		cmp    %edx,%eax
		jl     jump_b4b6d
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_b4900
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		add    %eax,%eax
		jmp    jump_b4905
	jump_b4900:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
	jump_b4905:
		mov    0xe(%esi),%ebx
		xor    %edx,%edx
		sar    $0x10,%ebx
		mov    0x2(%esi),%dx
		add    %edx,%ebx
		mov    0x10(%esi),%edx
		sar    $0x10,%edx
		add    %ebx,%edx
		add    $0x12,%edx
		cmp    %edx,%eax
		jge    jump_b4b6d
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+106 # lbDisplay.MLeftButton
		jne    jump_b493c
		cmpl   $0x0,joy_Buttons
		je     jump_b49ed
	jump_b493c:
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		je     jump_b4961
		push   $0x1
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x7d,%edx
		xor    %eax,%eax
		call   ac_play_sample_using_heap
	jump_b4961:
		xor    %dh,%dh
		mov    %dh,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		mov    0x3d(%esi),%bl
		or     $0x8,%bl
		xor    %eax,%eax
		mov    %bl,0x3d(%esi)
		mov    %ax,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    0xe(%esi),%edx
		xor    %ebx,%ebx
		sar    $0x10,%edx
		mov    0x16(%esi),%bx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,%edx
		mov    0xa(%esi),%eax
		sar    $0x10,%eax
		sub    %edx,%eax
		mov    %ax,0xc(%esi)
		mov    0xa(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_b49ad
		movw   $0x0,0xc(%esi)
		jmp    jump_b49cd
	jump_b49ad:
		xor    %edx,%edx
		mov    0xe(%esi),%dx
		add    %edx,%eax
		mov    0xe(%esi),%edx
		sar    $0x10,%edx
		cmp    %edx,%eax
		jle    jump_b49cd
		mov    0x10(%esi),%ax
		mov    0xe(%esi),%dx
		sub    %edx,%eax
		mov    %ax,0xc(%esi)
	jump_b49cd:
		mov    0xa(%esi),%edx
		xor    %eax,%eax
		sar    $0x10,%edx
		mov    0x16(%esi),%ax
		imul   %eax,%edx
		mov    0xe(%esi),%ebx
		sar    $0x10,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %ax,0x38(%esi)
	jump_b49ed:
		cmpl   $0x0,0x18(%esi)
		je     jump_b4a04
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		or     $0x80,%bh
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
	jump_b4a04:
		mov    0xe(%esi),%eax
		xor    %edx,%edx
		sar    $0x10,%eax
		mov    0x2(%esi),%dx
		add    %edx,%eax
		mov    0x10(%esi),%edx
		add    $0x9,%eax
		sar    $0x10,%edx
		xor    %ebx,%ebx
		add    %eax,%edx
		xor    %eax,%eax
		mov    0x4(%esi),%bx
		mov    (%esi),%ax
		mov    fe_mouseptr_sprites,%ecx
		add    %ebx,%eax
		mov    %edx,0x4(%esp)
		sub    $0xd,%eax
		lea    0x36(%ecx),%ebx
		mov    EXPORT_SYMBOL(lbDisplay)+40,%di # lbDisplay.GraphicsWindowX
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(purple_draw_index),%dx
		add    %eax,%edi
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    purple_draw_list,%edx
		mov    %di,(%edx,%eax,2)
		mov    0x4(%esp),%edi
		add    EXPORT_SYMBOL(lbDisplay)+44,%di # lbDisplay.GraphicsWindowY
		mov    %di,0x2(%edx,%eax,2)
		mov    %ebx,0x4(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+113,%bl # lbDisplay.DrawColour
		mov    %bl,0x8(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(purple_draw_index),%di
		mov    %bx,0x18(%edx,%eax,2)
		xor    %ebx,%ebx
		mov    %di,%bx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		inc    %edi
		add    %ebx,%eax
		mov    %di,EXPORT_SYMBOL(purple_draw_index)
		xor    %edi,%edi
		movb   $0x5,0x17(%edx,%eax,2)
		mov    %di,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    0xe(%esi),%eax
		xor    %ebx,%ebx
		sar    $0x10,%eax
		mov    0x2(%esi),%bx
		add    %ebx,%eax
		mov    0x10(%esi),%ebx
		add    $0x9,%eax
		sar    $0x10,%ebx
		lea    (%eax,%ebx,1),%edi
		xor    %eax,%eax
		xor    %ebx,%ebx
		mov    0x4(%esi),%ax
		mov    (%esi),%bx
		add    %ebx,%eax
		lea    0x4e(%ecx),%ebp
		sub    $0xd,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+40,%cx # lbDisplay.GraphicsWindowX
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(purple_draw_index),%bx
		add    %eax,%ecx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    %cx,(%edx,%eax,2)
		add    EXPORT_SYMBOL(lbDisplay)+44,%di # lbDisplay.GraphicsWindowY
		mov    %ebp,0x4(%edx,%eax,2)
		mov    %di,0x2(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+113,%bl # lbDisplay.DrawColour
		mov    %bl,0x8(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(purple_draw_index),%cx
		mov    %bx,0x18(%edx,%eax,2)
		xor    %ebx,%ebx
		mov    %cx,%bx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		inc    %ecx
		add    %ebx,%eax
		mov    %cx,EXPORT_SYMBOL(purple_draw_index)
		mov    $0x4,%ecx
		movb   $0x5,0x17(%edx,%eax,2)
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		jmp    jump_b4c3c
	jump_b4b6d:
		cmpl   $0x0,0x18(%esi)
		je     jump_b4b82
		mov    EXPORT_SYMBOL(lbDisplay)+96,%ax # lbDisplay__DrawFlags
		or     $0x80,%ah
		mov    %ax,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
	jump_b4b82:
		mov    0xe(%esi),%eax
		xor    %edx,%edx
		sar    $0x10,%eax
		mov    0x2(%esi),%dx
		mov    fe_mouseptr_sprites,%edi
		add    %edx,%eax
		mov    0x10(%esi),%edx
		add    $0x9,%eax
		sar    $0x10,%edx
		xor    %ebx,%ebx
		add    %eax,%edx
		xor    %eax,%eax
		mov    (%esi),%bx
		mov    0x4(%esi),%ax
		add    $0x36,%edi
		add    %ebx,%eax
		mov    %edx,0x8(%esp)
		sub    $0xd,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+40,%cx # lbDisplay.GraphicsWindowX
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(purple_draw_index),%dx
		add    %eax,%ecx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		mov    purple_draw_list,%ebx
		add    %edx,%eax
		mov    0x8(%esp),%edx
		mov    %cx,(%ebx,%eax,2)
		add    EXPORT_SYMBOL(lbDisplay)+44,%dx # lbDisplay.GraphicsWindowY
		mov    %edi,0x4(%ebx,%eax,2)
		mov    %dx,0x2(%ebx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+113,%dl # lbDisplay.DrawColour
		mov    %dl,0x8(%ebx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+96,%dx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(purple_draw_index),%cx
		mov    %dx,0x18(%ebx,%eax,2)
		xor    %edx,%edx
		mov    %cx,%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		inc    %ecx
		add    %edx,%eax
		mov    %cx,EXPORT_SYMBOL(purple_draw_index)
		movb   $0x5,0x17(%ebx,%eax,2)
		andw   $0x7fff,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
	jump_b4c3c:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_b4c52
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
		add    %eax,%eax
		jmp    jump_b4c57
	jump_b4c52:
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
	jump_b4c57:
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    0x4(%esi),%dx
		mov    (%esi),%bx
		add    %ebx,%edx
		sub    $0xd,%edx
		cmp    %edx,%eax
		jl     jump_b4f56
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_b4c85
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
		add    %eax,%eax
		jmp    jump_b4c8a
	jump_b4c85:
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
	jump_b4c8a:
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    0x4(%esi),%dx
		mov    (%esi),%bx
		add    %ebx,%edx
		sub    $0x5,%edx
		cmp    %edx,%eax
		jg     jump_b4f56
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_b4cb8
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		add    %eax,%eax
		jmp    jump_b4cbd
	jump_b4cb8:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
	jump_b4cbd:
		mov    0xe(%esi),%edx
		xor    %ebx,%ebx
		sar    $0x10,%edx
		mov    0x2(%esi),%bx
		add    %ebx,%edx
		mov    0x10(%esi),%ebx
		sar    $0x10,%ebx
		add    %ebx,%edx
		add    $0x12,%edx
		cmp    %edx,%eax
		jl     jump_b4f56
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_b4cf4
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		add    %eax,%eax
		jmp    jump_b4cf9
	jump_b4cf4:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
	jump_b4cf9:
		mov    0xe(%esi),%edx
		xor    %ebx,%ebx
		sar    $0x10,%edx
		mov    0x2(%esi),%bx
		add    %edx,%ebx
		mov    0x10(%esi),%edx
		sar    $0x10,%edx
		add    %ebx,%edx
		add    $0x1b,%edx
		cmp    %edx,%eax
		jge    jump_b4f56
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+106 # lbDisplay.MLeftButton
		jne    jump_b4d30
		cmpl   $0x0,joy_Buttons
		je     jump_b4de1
	jump_b4d30:
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		je     jump_b4d55
		push   $0x1
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x7d,%edx
		xor    %eax,%eax
		call   ac_play_sample_using_heap
	jump_b4d55:
		xor    %ch,%ch
		mov    %ch,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		mov    0x3d(%esi),%al
		or     $0x8,%al
		xor    %edx,%edx
		mov    %al,0x3d(%esi)
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    0xe(%esi),%edx
		xor    %ebx,%ebx
		sar    $0x10,%edx
		mov    0x16(%esi),%bx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,%edx
		mov    0xa(%esi),%eax
		sar    $0x10,%eax
		add    %edx,%eax
		mov    %ax,0xc(%esi)
		mov    0xa(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_b4da1
		movw   $0x0,0xc(%esi)
		jmp    jump_b4dc1
	jump_b4da1:
		xor    %edx,%edx
		mov    0xe(%esi),%dx
		add    %eax,%edx
		mov    0xe(%esi),%eax
		sar    $0x10,%eax
		cmp    %eax,%edx
		jle    jump_b4dc1
		mov    0x10(%esi),%ax
		mov    0xe(%esi),%bx
		sub    %ebx,%eax
		mov    %ax,0xc(%esi)
	jump_b4dc1:
		mov    0xa(%esi),%edx
		xor    %eax,%eax
		sar    $0x10,%edx
		mov    0x16(%esi),%ax
		imul   %eax,%edx
		mov    0xe(%esi),%ebx
		sar    $0x10,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %ax,0x38(%esi)
	jump_b4de1:
		cmpl   $0x0,0x18(%esi)
		je     jump_b4df8
		mov    EXPORT_SYMBOL(lbDisplay)+96,%cx # lbDisplay__DrawFlags
		or     $0x80,%ch
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
	jump_b4df8:
		mov    0xe(%esi),%edx
		xor    %eax,%eax
		sar    $0x10,%edx
		mov    0x2(%esi),%ax
		add    %edx,%eax
		mov    0x10(%esi),%edx
		add    $0x12,%eax
		sar    $0x10,%edx
		lea    (%eax,%edx,1),%edi
		mov    fe_mouseptr_sprites,%ecx
		xor    %eax,%eax
		xor    %edx,%edx
		mov    0x4(%esi),%ax
		mov    (%esi),%dx
		lea    0x3c(%ecx),%ebx
		add    %edx,%eax
		mov    %edi,0xc(%esp)
		sub    $0xd,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+40,%di # lbDisplay.GraphicsWindowX
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(purple_draw_index),%dx
		add    %eax,%edi
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    purple_draw_list,%edx
		mov    %di,(%edx,%eax,2)
		mov    0xc(%esp),%edi
		add    EXPORT_SYMBOL(lbDisplay)+44,%di # lbDisplay.GraphicsWindowY
		mov    %di,0x2(%edx,%eax,2)
		mov    %ebx,0x4(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+113,%bl # lbDisplay.DrawColour
		mov    %bl,0x8(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(purple_draw_index),%di
		mov    %bx,0x18(%edx,%eax,2)
		xor    %ebx,%ebx
		mov    %di,%bx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		inc    %edi
		add    %ebx,%eax
		mov    %di,EXPORT_SYMBOL(purple_draw_index)
		xor    %edi,%edi
		movb   $0x5,0x17(%edx,%eax,2)
		mov    %di,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    0xe(%esi),%ebx
		xor    %eax,%eax
		sar    $0x10,%ebx
		mov    0x2(%esi),%ax
		add    %ebx,%eax
		mov    0x10(%esi),%ebx
		add    $0x12,%eax
		sar    $0x10,%ebx
		lea    (%eax,%ebx,1),%edi
		xor    %ebx,%ebx
		xor    %eax,%eax
		mov    0x4(%esi),%bx
		mov    (%esi),%ax
		add    %ebx,%eax
		lea    0x54(%ecx),%ebp
		sub    $0xd,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+40,%cx # lbDisplay.GraphicsWindowX
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(purple_draw_index),%bx
		add    %eax,%ecx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    %cx,(%edx,%eax,2)
		add    EXPORT_SYMBOL(lbDisplay)+44,%di # lbDisplay.GraphicsWindowY
		mov    %ebp,0x4(%edx,%eax,2)
		mov    %di,0x2(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+113,%bl # lbDisplay.DrawColour
		mov    %bl,0x8(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(purple_draw_index),%cx
		mov    %bx,0x18(%edx,%eax,2)
		xor    %ebx,%ebx
		mov    %cx,%bx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		inc    %ecx
		add    %ebx,%eax
		mov    %cx,EXPORT_SYMBOL(purple_draw_index)
		movb   $0x5,0x17(%edx,%eax,2)
		jmp    jump_b501e
	jump_b4f56:
		cmpl   $0x0,0x18(%esi)
		je     jump_b4f65
		orw    $0x8000,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
	jump_b4f65:
		mov    0xe(%esi),%edx
		xor    %eax,%eax
		sar    $0x10,%edx
		mov    0x2(%esi),%ax
		add    %edx,%eax
		mov    0x10(%esi),%edx
		add    $0x12,%eax
		sar    $0x10,%edx
		xor    %ebx,%ebx
		add    %eax,%edx
		xor    %eax,%eax
		mov    (%esi),%bx
		mov    0x4(%esi),%ax
		mov    fe_mouseptr_sprites,%ecx
		add    %ebx,%eax
		mov    %edx,0x10(%esp)
		sub    $0xd,%eax
		lea    0x3c(%ecx),%ebx
		mov    EXPORT_SYMBOL(lbDisplay)+40,%di # lbDisplay.GraphicsWindowX
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(purple_draw_index),%dx
		add    %eax,%edi
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		mov    purple_draw_list,%ecx
		add    %edx,%eax
		mov    0x10(%esp),%edx
		mov    %di,(%ecx,%eax,2)
		add    EXPORT_SYMBOL(lbDisplay)+44,%dx # lbDisplay.GraphicsWindowY
		mov    %ebx,0x4(%ecx,%eax,2)
		mov    %dx,0x2(%ecx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+113,%dl # lbDisplay.DrawColour
		mov    %dl,0x8(%ecx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+96,%dx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(purple_draw_index),%bx
		mov    %dx,0x18(%ecx,%eax,2)
		xor    %edx,%edx
		mov    %bx,%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		inc    %ebx
		add    %edx,%eax
		mov    %bx,EXPORT_SYMBOL(purple_draw_index)
		movb   $0x5,0x17(%ecx,%eax,2)
		xor    %eax,%eax
		mov    %ax,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
	jump_b501e:
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+106 # lbDisplay.MLeftButton
		jne    jump_b50e4
		cmpl   $0x0,joy_Buttons
		jne    jump_b50e4
		andb   $0xf3,0x3d(%esi)
		jmp    jump_b50e4
	jump_b5041:
		testb  $0x4,0x3c(%esi)
		jne    jump_b50e4
		movw   $0x4,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %eax,%eax
		xor    %ecx,%ecx
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    0x3f(%esi),%al
		mov    0x6(%esi),%cx
		mov    0x4(%esi),%bx
		mov    0x2(%esi),%dx
		push   %eax
		add    $0x6,%ecx
		xor    %eax,%eax
		add    $0x6,%ebx
		mov    (%esi),%ax
		sub    $0x3,%edx
		sub    $0x3,%eax
		mov    $0x10,%edi
		call   ac_draw_box_purple_list
		mov    %di,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %eax,%eax
		xor    %ecx,%ecx
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    0x3e(%esi),%al
		mov    0x6(%esi),%cx
		mov    0x4(%esi),%bx
		push   %eax
		xor    %eax,%eax
		mov    0x2(%esi),%dx
		mov    (%esi),%ax
		call   ac_draw_box_purple_list
		xor    %eax,%eax
		mov    %ax,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
	jump_b50b8:
		xor    %ecx,%ecx
		xor    %ebx,%ebx
		xor    %edx,%edx
		xor    %eax,%eax
		mov    0x6(%esi),%cx
		mov    0x4(%esi),%bx
		mov    0x2(%esi),%dx
		mov    (%esi),%ax
		add    $0x6,%ecx
		add    $0x6,%ebx
		sub    $0x3,%edx
		sub    $0x3,%eax
		call   ac_copy_box_purple_list
		orb    $0x4,0x3c(%esi)
	jump_b50e4:
		mov    0x3d(%esi),%dh
		test   $0x20,%dh
		je     jump_b50f7
		movw   $0x80,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		jmp    jump_b5105
	jump_b50f7:
		test   $0x40,%dh
		je     jump_b5105
		movw   $0x100,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
	jump_b5105:
		testb  $0x10,0x3d(%esi)
		jne    jump_b517d
		mov    0x24(%esi),%edi
		test   %edi,%edi
		je     jump_b511d
		mov    %esi,%eax
		call   *0x24(%esi)
		jmp    jump_b5140
	jump_b511d:
		mov    0x18(%esi),%ebp
		test   %ebp,%ebp
		je     jump_b5144
		push   %edi
		lea    0x3a(%esi),%eax
		mov    %ebp,%ebx
		push   %eax
		xor    %eax,%eax
		xor    %ecx,%ecx
		mov    0x38(%esi),%ax
		xor    %edx,%edx
		push   %eax
		mov    0xa(%esi),%cl
		xor    %eax,%eax
		call   ac_flashy_draw_text
	jump_b5140:
		mov    %al,0x64(%esp)
	jump_b5144:
		cmpb   $0x0,0x64(%esp)
		je     jump_b517d
		testb  $0x1,0x3d(%esi)
		jne    jump_b517d
		xor    %ecx,%ecx
		xor    %ebx,%ebx
		xor    %edx,%edx
		xor    %eax,%eax
		mov    0x6(%esi),%cx
		mov    0x4(%esi),%bx
		mov    0x2(%esi),%dx
		mov    (%esi),%ax
		add    $0x6,%ecx
		add    $0x6,%ebx
		sub    $0x3,%edx
		sub    $0x3,%eax
		call   ac_copy_box_purple_list
		orb    $0x10,0x3d(%esi)
	jump_b517d:
		xor    %eax,%eax
		mov    %ax,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		cmpb   $0x0,0x68(%esp)
		jne    jump_b59dd
		xor    %edx,%edx
		xor    %ecx,%ecx
		jmp    jump_b5197
	jump_b5196:
		inc    %edx
	jump_b5197:
		xor    %eax,%eax
		mov    %dx,%ax
		cmp    $0x2,%eax
		jge    jump_b59dd
		shl    $0x2,%eax
		lea    (%esi,%eax,1),%ebx
		mov    0x28(%ebx),%eax
		cmp    %eax,%ecx
		je     jump_b51b7
		mov    %eax,%ebx
		call   *0x10(%ebx)
	jump_b51b7:
		xor    %ebx,%ebx
		mov    %dx,%bx
		shl    $0x2,%ebx
		add    %esi,%ebx
		mov    0x30(%ebx),%edi
		cmp    %edi,%ecx
		je     jump_b5196
		mov    %edi,%ebx
		mov    %edi,%eax
		call   *0x18(%ebx)
		jmp    jump_b5196
	jump_b51d1:
		cmp    $0x18,%ebx
		jg     jump_b541f
		xor    %eax,%eax
		mov    proj_origin_m2,%ebp
		mov    (%esi),%ax
		sar    $0x10,%ebp
		mov    %eax,%edx
		sub    %ebp,%edx
		imul   %ebx,%edx
		mov    $0x18,%ecx
		mov    %eax,0x14(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		add    %ebp,%eax
		xor    %ecx,%ecx
		mov    %ax,0x50(%esp)
		mov    0x2(%esi),%cx
		mov    EXPORT_SYMBOL(proj_origin),%eax
		mov    %ecx,%edx
		sar    $0x10,%eax
		sub    %eax,%edx
		imul   %ebx,%edx
		mov    %eax,0x18(%esp)
		movl   $0x18,0x1c(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idivl  0x1c(%esp)
		add    0x18(%esp),%eax
		movswl %di,%edx
		add    0x14(%esp),%edx
		sub    %ebp,%edx
		imul   %ebx,%edx
		mov    %ax,0x44(%esp)
		mov    $0x18,%edi
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %edi
		add    %ebp,%eax
		mov    %ax,0x58(%esp)
		mov    0x52(%esp),%eax
		sar    $0x10,%eax
		mov    0x18(%esp),%edx
		add    %ecx,%eax
		sub    %edx,%eax
		imul   %ebx,%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		idiv   %edi
		add    0x18(%esp),%eax
		mov    $0x4,%ecx
		mov    %ax,0x34(%esp)
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %eax,%eax
		mov    0x42(%esp),%edi
		mov    0x3e(%esi),%al
		mov    0x18(%esp),%edx
		push   %eax
		mov    0x52(%esp),%eax
		sar    $0x10,%edi
		sar    $0x10,%eax
		mov    %edi,%ecx
		mov    %eax,0x20(%esp)
		mov    %eax,%ebx
		mov    %ebp,%eax
		call   ac_draw_line_purple_list
		mov    0x32(%esp),%ebp
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(proj_origin),%edx
		mov    0x3e(%esi),%al
		sar    $0x10,%ebp
		push   %eax
		mov    0x5a(%esp),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		mov    %ebp,%ecx
		mov    %eax,0x24(%esp)
		mov    proj_origin_m2,%eax
		mov    0x24(%esp),%ebx
		sar    $0x10,%eax
		call   ac_draw_line_purple_list
		xor    %eax,%eax
		mov    %ax,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %edx,%edx
		mov    0x5c(%esp),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    fe_mouseptr_sprites,%edx
		add    %eax,%eax
		lea    -0x1(%edi),%ecx
		add    %eax,%edx
		mov    0x1c(%esp),%eax
		mov    %edx,0x2c(%esp)
		dec    %eax
		mov    EXPORT_SYMBOL(lbDisplay)+40,%bx # lbDisplay.GraphicsWindowX
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(purple_draw_index),%dx
		add    %eax,%ebx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    purple_draw_list,%edx
		mov    %bx,(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+44,%bx # lbDisplay.GraphicsWindowY
		add    %ecx,%ebx
		mov    %bx,0x2(%edx,%eax,2)
		mov    0x2c(%esp),%ebx
		mov    %ebx,0x4(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+113,%bl # lbDisplay.DrawColour
		mov    %bl,0x8(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(purple_draw_index),%cx
		mov    %bx,0x18(%edx,%eax,2)
		xor    %ebx,%ebx
		mov    %cx,%bx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		lea    -0x1(%ebp),%edi
		inc    %ecx
		movb   $0x5,0x17(%edx,%eax,2)
		mov    0x20(%esp),%eax
		mov    %cx,EXPORT_SYMBOL(purple_draw_index)
		dec    %eax
		mov    EXPORT_SYMBOL(lbDisplay)+40,%cx # lbDisplay.GraphicsWindowX
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(purple_draw_index),%bx
		add    %eax,%ecx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    %cx,(%edx,%eax,2)
		add    EXPORT_SYMBOL(lbDisplay)+44,%di # lbDisplay.GraphicsWindowY
		mov    0x2c(%esp),%ebx
		mov    %di,0x2(%edx,%eax,2)
		mov    %ebx,0x4(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+113,%bl # lbDisplay.DrawColour
		mov    %bl,0x8(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(purple_draw_index),%cx
		mov    %bx,0x18(%edx,%eax,2)
		xor    %ebx,%ebx
		mov    %cx,%bx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		movb   $0x5,0x17(%edx,%eax,2)
		inc    %ecx
		mov    0x8(%esi),%al
		mov    0x9(%esi),%bl
		mov    %cx,EXPORT_SYMBOL(purple_draw_index)
		add    %al,%bl
		xor    %al,%al
		mov    %bl,0x9(%esi)
		add    $0x6c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_b541f:
		mov    $0x4,%edx
		xor    %ebx,%ebx
		xor    %eax,%eax
		call   ac_IsSamplePlaying
		test   %al,%al
		jne    jump_b544d
		push   $0x1
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x6e,%edx
		xor    %eax,%eax
		call   ac_play_sample_using_heap
	jump_b544d:
		xor    %eax,%eax
		mov    0x9(%esi),%al
		cmp    $0x30,%eax
		jg     jump_b56eb
		movswl %di,%edx
		sub    $0x18,%eax
		imul   %eax,%edx
		mov    $0x18,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    (%esi),%dx
		add    %eax,%edx
		mov    %dx,0x38(%esp)
		mov    (%esi),%dx
		add    %edi,%edx
		sub    %eax,%edx
		mov    0x3e(%esi),%al
		mov    %al,EXPORT_SYMBOL(vec_colour)
		mov    0x36(%esp),%eax
		sar    $0x10,%eax
		mov    %eax,EXPORT_SYMBOL(dword_1DC5FC)
		xor    %eax,%eax
		mov    0x2(%esi),%ax
		mov    %dx,0x40(%esp)
		mov    %eax,EXPORT_SYMBOL(dword_1DC600)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(dword_1DC5FC),%edx
		mov    0x60(%esp),%al
		sub    %eax,%edx
		xor    %eax,%eax
		mov    (%esi),%ax
		mov    %edx,EXPORT_SYMBOL(dword_1DC624)
		cmp    %edx,%eax
		jle    jump_b54c7
		mov    %eax,EXPORT_SYMBOL(dword_1DC624)
	jump_b54c7:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(dword_1DC624),%ebx
		mov    0x2(%esi),%ax
		mov    EXPORT_SYMBOL(dword_1DC600),%edx
		mov    %eax,EXPORT_SYMBOL(dword_1DC628)
		mov    %eax,%ecx
		mov    EXPORT_SYMBOL(dword_1DC5FC),%eax
		call   ac_draw_trig_purple_list
		mov    0x36(%esp),%ebx
		xor    %eax,%eax
		xor    %edx,%edx
		sar    $0x10,%ebx
		mov    0x3e(%esi),%al
		mov    0x2(%esi),%dx
		push   %eax
		xor    %eax,%eax
		mov    %edx,%ecx
		mov    (%esi),%ax
		call   ac_draw_line_purple_list
		mov    0x3e(%esp),%eax
		sar    $0x10,%eax
		xor    %edx,%edx
		mov    %eax,EXPORT_SYMBOL(dword_1DC5FC)
		mov    0x52(%esp),%eax
		mov    0x2(%esi),%dx
		sar    $0x10,%eax
		add    %eax,%edx
		xor    %eax,%eax
		mov    %edx,EXPORT_SYMBOL(dword_1DC600)
		mov    0x60(%esp),%al
		mov    EXPORT_SYMBOL(dword_1DC5FC),%edx
		add    %eax,%edx
		mov    %edx,EXPORT_SYMBOL(dword_1DC624)
		xor    %eax,%eax
		movswl %di,%edx
		mov    (%esi),%ax
		mov    EXPORT_SYMBOL(dword_1DC624),%ebx
		add    %edx,%eax
		cmp    %ebx,%eax
		jge    jump_b5557
		mov    %eax,EXPORT_SYMBOL(dword_1DC624)
	jump_b5557:
		mov    0x52(%esp),%ebp
		xor    %eax,%eax
		sar    $0x10,%ebp
		mov    0x2(%esi),%ax
		mov    EXPORT_SYMBOL(dword_1DC624),%ebx
		add    %ebp,%eax
		mov    EXPORT_SYMBOL(dword_1DC600),%edx
		mov    %eax,EXPORT_SYMBOL(dword_1DC628)
		mov    %eax,%ecx
		mov    EXPORT_SYMBOL(dword_1DC5FC),%eax
		call   ac_draw_trig_purple_list
		movswl %di,%ebx
		xor    %eax,%eax
		xor    %edx,%edx
		mov    0x3e(%esp),%edi
		mov    0x3e(%esi),%al
		mov    0x2(%esi),%dx
		push   %eax
		sar    $0x10,%edi
		xor    %eax,%eax
		add    %ebp,%edx
		mov    (%esi),%ax
		mov    %edx,%ecx
		add    %eax,%ebx
		mov    %edi,%eax
		call   ac_draw_line_purple_list
		xor    %edx,%edx
		mov    0x5c(%esp),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    fe_mouseptr_sprites,%ebp
		add    %eax,%eax
		mov    0x36(%esp),%edx
		add    %eax,%ebp
		xor    %eax,%eax
		sar    $0x10,%edx
		mov    0x2(%esi),%ax
		dec    %edx
		dec    %eax
		mov    %eax,0x24(%esp)
		mov    EXPORT_SYMBOL(lbDisplay)+40,%bx # lbDisplay.GraphicsWindowX
		add    %edx,%ebx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(purple_draw_index),%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    purple_draw_list,%edx
		mov    %bx,(%edx,%eax,2)
		mov    0x24(%esp),%ebx
		add    EXPORT_SYMBOL(lbDisplay)+44,%bx # lbDisplay.GraphicsWindowY
		mov    %ebp,0x4(%edx,%eax,2)
		mov    %bx,0x2(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+113,%bl # lbDisplay.DrawColour
		mov    %bl,0x8(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(purple_draw_index),%cx
		mov    %bx,0x18(%edx,%eax,2)
		xor    %ebx,%ebx
		mov    %cx,%bx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		dec    %edi
		movb   $0x5,0x17(%edx,%eax,2)
		xor    %ebx,%ebx
		xor    %eax,%eax
		mov    0x2(%esi),%bx
		mov    0x6(%esi),%ax
		inc    %ecx
		add    %ebx,%eax
		mov    %cx,EXPORT_SYMBOL(purple_draw_index)
		lea    -0x2(%eax),%ecx
		mov    EXPORT_SYMBOL(lbDisplay)+40,%ax # lbDisplay.GraphicsWindowX
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(purple_draw_index),%bx
		add    %eax,%edi
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    %di,(%edx,%eax,2)
		add    EXPORT_SYMBOL(lbDisplay)+44,%cx # lbDisplay.GraphicsWindowY
		mov    %ebp,0x4(%edx,%eax,2)
		mov    %cx,0x2(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+113,%bl # lbDisplay.DrawColour
		mov    %bl,0x8(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(purple_draw_index),%cx
		mov    %bx,0x18(%edx,%eax,2)
		xor    %ebx,%ebx
		mov    %cx,%bx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		movb   $0x5,0x17(%edx,%eax,2)
		inc    %ecx
		mov    0x8(%esi),%al
		mov    0x9(%esi),%dh
		mov    %cx,EXPORT_SYMBOL(purple_draw_index)
		add    %al,%dh
		xor    %al,%al
		mov    %dh,0x9(%esi)
		add    $0x6c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_b56eb:
		mov    0x52(%esp),%edx
		sub    $0x30,%eax
		sar    $0x10,%edx
		imul   %eax,%edx
		mov    $0x18,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    0x2(%esi),%dx
		add    %eax,%edx
		mov    0x54(%esp),%ebx
		mov    %dx,0x3c(%esp)
		mov    0x2(%esi),%dx
		add    %ebx,%edx
		sub    %eax,%edx
		mov    0x3e(%esi),%al
		mov    %al,EXPORT_SYMBOL(vec_colour)
		xor    %eax,%eax
		movswl %di,%ecx
		mov    (%esi),%ax
		add    %ecx,%eax
		mov    %eax,EXPORT_SYMBOL(dword_1DC5FC)
		mov    0x3a(%esp),%eax
		sar    $0x10,%eax
		mov    %eax,EXPORT_SYMBOL(dword_1DC600)
		mov    EXPORT_SYMBOL(dword_1DC5FC),%eax
		mov    %dx,0x48(%esp)
		mov    %eax,EXPORT_SYMBOL(dword_1DC624)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(dword_1DC600),%edx
		mov    0x60(%esp),%al
		sub    %eax,%edx
		xor    %eax,%eax
		mov    0x2(%esi),%ax
		mov    %edx,EXPORT_SYMBOL(dword_1DC628)
		cmp    %edx,%eax
		jle    jump_b5770
		mov    %eax,EXPORT_SYMBOL(dword_1DC628)
	jump_b5770:
		mov    EXPORT_SYMBOL(dword_1DC628),%ecx
		mov    EXPORT_SYMBOL(dword_1DC624),%ebx
		mov    EXPORT_SYMBOL(dword_1DC600),%edx
		mov    EXPORT_SYMBOL(dword_1DC5FC),%eax
		call   ac_draw_trig_purple_list
		mov    0x3a(%esp),%ecx
		xor    %eax,%eax
		xor    %edx,%edx
		mov    0x3e(%esi),%al
		mov    (%esi),%dx
		push   %eax
		movswl %di,%eax
		sar    $0x10,%ecx
		add    %edx,%eax
		xor    %edx,%edx
		mov    %eax,%ebx
		mov    0x2(%esi),%dx
		call   ac_draw_line_purple_list
		xor    %eax,%eax
		mov    (%esi),%ax
		mov    %eax,EXPORT_SYMBOL(dword_1DC5FC)
		mov    0x46(%esp),%eax
		sar    $0x10,%eax
		mov    %eax,EXPORT_SYMBOL(dword_1DC600)
		mov    EXPORT_SYMBOL(dword_1DC5FC),%eax
		mov    %eax,EXPORT_SYMBOL(dword_1DC624)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(dword_1DC600),%edx
		mov    0x60(%esp),%al
		add    %eax,%edx
		mov    0x52(%esp),%eax
		mov    %edx,EXPORT_SYMBOL(dword_1DC628)
		xor    %edx,%edx
		sar    $0x10,%eax
		mov    0x2(%esi),%dx
		mov    EXPORT_SYMBOL(dword_1DC628),%ebx
		add    %edx,%eax
		cmp    %ebx,%eax
		jge    jump_b5802
		mov    %eax,EXPORT_SYMBOL(dword_1DC628)
	jump_b5802:
		mov    EXPORT_SYMBOL(dword_1DC628),%ecx
		mov    EXPORT_SYMBOL(dword_1DC624),%ebx
		mov    EXPORT_SYMBOL(dword_1DC600),%edx
		mov    EXPORT_SYMBOL(dword_1DC5FC),%eax
		call   ac_draw_trig_purple_list
		xor    %eax,%eax
		mov    0x3e(%esi),%al
		mov    0x46(%esp),%ebp
		push   %eax
		mov    0x56(%esp),%eax
		xor    %ecx,%ecx
		sar    $0x10,%eax
		mov    0x2(%esi),%cx
		mov    %eax,0x34(%esp)
		add    %eax,%ecx
		xor    %eax,%eax
		sar    $0x10,%ebp
		mov    (%esi),%ax
		mov    %ebp,%edx
		mov    %eax,%ebx
		call   ac_draw_line_purple_list
		xor    %edx,%edx
		mov    0x5c(%esp),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    fe_mouseptr_sprites,%ecx
		add    %eax,%eax
		add    %eax,%ecx
		xor    %eax,%eax
		dec    %ebp
		mov    (%esi),%ax
		mov    %ebp,(%esp)
		dec    %eax
		mov    EXPORT_SYMBOL(lbDisplay)+40,%bx # lbDisplay.GraphicsWindowX
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(purple_draw_index),%dx
		add    %eax,%ebx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    purple_draw_list,%edx
		mov    %bx,(%edx,%eax,2)
		mov    (%esp),%ebx
		add    EXPORT_SYMBOL(lbDisplay)+44,%bx # lbDisplay.GraphicsWindowY
		mov    %bx,0x2(%edx,%eax,2)
		mov    %ecx,0x4(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+113,%bl # lbDisplay.DrawColour
		mov    %bl,0x8(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		mov    %bx,0x18(%edx,%eax,2)
		mov    EXPORT_SYMBOL(purple_draw_index),%ax
		xor    %ebx,%ebx
		mov    %ax,%bx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		inc    %ebx
		movb   $0x5,0x17(%edx,%eax,2)
		mov    %bx,EXPORT_SYMBOL(purple_draw_index)
		mov    0x3a(%esp),%eax
		sar    $0x10,%eax
		xor    %ebx,%ebx
		mov    %eax,0x14(%esp)
		xor    %eax,%eax
		mov    (%esi),%bx
		mov    0x4(%esi),%ax
		add    %ebx,%eax
		mov    0x14(%esp),%ebx
		dec    %ebx
		sub    $0x2,%eax
		mov    %ebx,0x28(%esp)
		mov    EXPORT_SYMBOL(lbDisplay)+40,%bx # lbDisplay.GraphicsWindowX
		add    %eax,%ebx
		mov    %ebx,0x44(%esp)
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(purple_draw_index),%bx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    0x44(%esp),%ebx
		mov    %bx,(%edx,%eax,2)
		mov    0x28(%esp),%ebx
		add    EXPORT_SYMBOL(lbDisplay)+44,%bx # lbDisplay.GraphicsWindowY
		mov    %bx,0x2(%edx,%eax,2)
		mov    %ecx,0x4(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+113,%bl # lbDisplay.DrawColour
		mov    %bl,0x8(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(purple_draw_index),%cx
		mov    %bx,0x18(%edx,%eax,2)
		xor    %ebx,%ebx
		mov    %cx,%bx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		movswl %di,%edi
		inc    %ecx
		movb   $0x5,0x17(%edx,%eax,2)
		xor    %eax,%eax
		mov    %cx,EXPORT_SYMBOL(purple_draw_index)
		mov    0x3e(%esi),%al
		xor    %edx,%edx
		push   %eax
		xor    %eax,%eax
		mov    0x2(%esi),%dx
		mov    (%esi),%ax
		mov    %edx,%ecx
		lea    (%eax,%edi,1),%ebx
		call   ac_draw_line_purple_list
		xor    %eax,%eax
		xor    %edx,%edx
		mov    0x3e(%esi),%al
		mov    0x2(%esi),%dx
		push   %eax
		add    0x34(%esp),%edx
		xor    %eax,%eax
		mov    (%esi),%ax
		mov    %edx,%ecx
		lea    (%eax,%edi,1),%ebx
		call   ac_draw_line_purple_list
		mov    0x8(%esi),%al
		mov    0x9(%esi),%dl
		add    %al,%dl
		mov    $0x2,%al
		mov    %dl,0x9(%esi)
		add    $0x6c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_b59dd:
		mov    $0x3,%al
		add    $0x6c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_flashy_draw_purple_button)	/* 0x0B59EC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x5c,%esp
		mov    %eax,%esi
		movb   $0xf,0x50(%esp)
		xor    %eax,%eax
		mov    0x2a(%esi),%al
		cmp    $0xf7,%eax
		setne  %al
		and    $0xff,%eax
		add    $0xb,%eax
		mov    %al,0x58(%esp)
		mov    0x29(%esi),%al
		mov    %al,0x44(%esp)
		mov    0x6(%esi),%ax
		xor    %ecx,%ecx
		sub    $0x4,%eax
		mov    %ax,%cx
		mov    0x4(%esi),%ax
		xor    %ebx,%ebx
		sub    $0x12,%eax
		mov    %ax,%bx
		mov    0x2(%esi),%ax
		xor    %edx,%edx
		add    $0x2,%eax
		mov    %ax,%dx
		mov    (%esi),%ax
		add    $0x2,%eax
		and    $0xffff,%eax
		call   ac_my_set_text_window
		mov    0xc(%esi),%eax
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    0x4(%esi),%ax
		dec    %eax
		mov    %ax,0x40(%esp)
		mov    0x6(%esi),%ax
		dec    %eax
		mov    0x24(%esi),%dl
		mov    %ax,0x3c(%esp)
		test   $0x2,%dl
		je     jump_b5aa3
		mov    %dl,%dh
		and    $0x7c,%dh
		mov    %dh,0x24(%esi)
		mov    0x8(%esi),%edx
		movb   $0xff,0x27(%esi)
		test   %edx,%edx
		je     jump_b5a9d
		mov    %edx,%edi
		sub    %ecx,%ecx
		dec    %ecx
		xor    %eax,%eax
		repnz scas %es:(%edi),%al
		not    %ecx
		dec    %ecx
		mov    %cx,0x22(%esi)
		jmp    jump_b5aa3
	jump_b5a9d:
		movw   $0xfffb,0x22(%esi)
	jump_b5aa3:
		testb  $0x1,0x24(%esi)
		je     jump_b5abe
		mov    0x24(%esi),%bh
		and    $0x7e,%bh
		movb   $0x0,0x27(%esi)
		mov    %bh,%cl
		mov    %bh,0x24(%esi)
		or     $0x80,%cl
		mov    %cl,0x24(%esi)
	jump_b5abe:
		xor    %ebx,%ebx
		mov    $0x3,%ch
		mov    0x27(%esi),%bl
		mov    %ch,0x48(%esp)
		cmp    $0x48,%ebx
		jle    jump_b62db
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_b5ae8
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_b5aed
	jump_b5ae8:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_b5aed:
		xor    %edx,%edx
		mov    (%esi),%dx
		cmp    %edx,%eax
		jl     jump_b5ba6
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_b5b10
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
		add    %eax,%eax
		jmp    jump_b5b15
	jump_b5b10:
		mov    EXPORT_SYMBOL(lbDisplay)+72,%eax # lbDisplay.MouseX
	jump_b5b15:
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    0x4(%esi),%bx
		mov    (%esi),%dx
		add    %ebx,%edx
		cmp    %edx,%eax
		jge    jump_b5ba6
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_b5b40
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_b5b45
	jump_b5b40:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_b5b45:
		xor    %edx,%edx
		mov    0x2(%esi),%dx
		cmp    %edx,%eax
		jl     jump_b5ba6
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_b5b65
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
		add    %eax,%eax
		jmp    jump_b5b6a
	jump_b5b65:
		mov    EXPORT_SYMBOL(lbDisplay)+76,%eax # lbDisplay.MouseY
	jump_b5b6a:
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    0x2(%esi),%dx
		mov    0x6(%esi),%bx
		add    %ebx,%edx
		cmp    %edx,%eax
		jge    jump_b5ba6
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		je     jump_b5b91
		xor    %bl,%bl
		mov    %bl,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		orb    $0x4,0x25(%esi)
	jump_b5b91:
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+104 # lbDisplay.RightButton
		je     jump_b5ba6
		xor    %ch,%ch
		mov    %ch,EXPORT_SYMBOL(lbDisplay)+104 # lbDisplay.RightButton
		orb    $0x8,0x25(%esi)
	jump_b5ba6:
		xor    %ah,%ah
		mov    %ah,0x54(%esp)
		xor    %eax,%eax
		mov    0x2c(%esi),%al
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)(%eax)
		je     jump_b5c11
		cmp    $0x1c,%eax
		je     jump_b5bc4
		cmp    $0x1,%eax
		jne    jump_b5bd7
	jump_b5bc4:
		xor    %eax,%eax
		mov    0x2c(%esi),%al
		xor    %bh,%bh
		mov    %bh,EXPORT_SYMBOL(lbKeyOn)(%eax)
		orb    $0x4,0x25(%esi)
		jmp    jump_b5c0c
	jump_b5bd7:
		mov    EXPORT_SYMBOL(lbShift),%dh
		test   $0x4,%dh
		je     jump_b5bfb
		xor    %dl,%dl
		mov    %dl,EXPORT_SYMBOL(lbKeyOn)(%eax)
		mov    0x25(%esi),%dh
		mov    $0x1,%bl
		or     $0x4,%dh
		mov    %bl,0x54(%esp)
		mov    %dh,0x25(%esi)
		jmp    jump_b5c11
	jump_b5bfb:
		test   $0x2,%dh
		je     jump_b5c11
		xor    %bh,%bh
		mov    %bh,EXPORT_SYMBOL(lbKeyOn)(%eax)
		orb    $0x8,0x25(%esi)
	jump_b5c0c:
		movb   $0x1,0x54(%esp)
	jump_b5c11:
		mov    0x2(%esi),%ax
		add    0x6(%esi),%ax
		mov    0x4(%esi),%di
		movswl %ax,%ecx
		mov    (%esi),%ax
		mov    (%esi),%ebx
		add    %edi,%eax
		sar    $0x10,%ebx
		movswl %ax,%edx
		movswl (%esi),%eax
		call   ac_mouse_move_over_rect
		mov    %al,0x4c(%esp)
		test   %al,%al
		jne    jump_b5c43
		andb   $0xfd,0x25(%esi)
		jmp    jump_b5c6b
	jump_b5c43:
		je     jump_b5c6b
		testb  $0x2,0x25(%esi)
		jne    jump_b5c6b
		push   $0x1
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x7b,%edx
		xor    %eax,%eax
		call   ac_play_sample_using_heap
		orb    $0x2,0x25(%esi)
	jump_b5c6b:
		mov    0x4c(%esp),%dh
		test   %dh,%dh
		jne    jump_b5c7e
		cmpb   $0x0,0x54(%esp)
		je     jump_b604d
	jump_b5c7e:
		movw   $0x4,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		testb  $0xc,0x25(%esi)
		je     jump_b5c96
		xor    %ecx,%ecx
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
	jump_b5c96:
		testb  $0x1,0x25(%esi)
		je     jump_b5caf
		mov    0x1c(%esi),%eax
		mov    0x2d(%esi),%cl
		cmp    (%eax),%cl
		jne    jump_b5caf
		xor    %edi,%edi
		mov    %di,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
	jump_b5caf:
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+106 # lbDisplay.MLeftButton
		jne    jump_b5cc1
		cmpl   $0x0,joy_Buttons
		je     jump_b5cdf
	jump_b5cc1:
		xor    %bh,%bh
		mov    %bh,EXPORT_SYMBOL(lbDisplay)+103 # lbDisplay.LeftButton
		mov    $0x4,%cl
		xor    %eax,%eax
		mov    %cl,0x48(%esp)
		mov    %ax,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		or     %cl,0x25(%esi)
		jmp    jump_b5d74
	jump_b5cdf:
		testb  $0x4,0x25(%esi)
		je     jump_b5d74
		cmpb   $0x0,show_alert
		je     jump_b5cfe
		cmp    $alert_OK_button,%esi
		jne    jump_b5d70
	jump_b5cfe:
		mov    0x18(%esi),%edi
		test   %edi,%edi
		je     jump_b5d2b
		xor    %eax,%eax
		/* XXX: called when a button is pressed (for some buttons) */
		call   *0x18(%esi)
		test   %al,%al
		je     jump_b5d25
		push   $0x2
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x6f,%edx
		jmp    jump_b5d5b
	jump_b5d25:
		push   $0x2
		push   $0x0
		jmp    jump_b5d4a
	jump_b5d2b:
		testb  $0x1,0x25(%esi)
		je     jump_b5d47
		push   $0x2
		push   %edi
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x6f,%edx
		jmp    jump_b5d5b
	jump_b5d47:
		push   $0x2
		push   %edi
	jump_b5d4a:
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x81,%edx
	jump_b5d5b:
		xor    %eax,%eax
		call   ac_play_sample_using_heap
		testb  $0x1,0x25(%esi)
		je     jump_b5d70
		mov    0x1c(%esi),%edx
		mov    0x2d(%esi),%al
		mov    %al,(%edx)
	jump_b5d70:
		andb   $0xfb,0x25(%esi)
	jump_b5d74:
		cmpb   $0x0,EXPORT_SYMBOL(lbDisplay)+107 # lbDisplay.MRightButton
		je     jump_b5d9d
		xor    %bh,%bh
		mov    %bh,EXPORT_SYMBOL(lbDisplay)+104 # lbDisplay.RightButton
		mov    $0x5,%cl
		xor    %edx,%edx
		mov    %cl,0x48(%esp)
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		orb    $0x8,0x25(%esi)
		jmp    jump_b5e15
	jump_b5d9d:
		testb  $0x8,0x25(%esi)
		je     jump_b5e15
		cmpb   $0x0,show_alert
		je     jump_b5db8
		cmp    $alert_OK_button,%esi
		jne    jump_b5e11
	jump_b5db8:
		mov    0x18(%esi),%ebp
		test   %ebp,%ebp
		je     jump_b5de8
		mov    $0x1,%eax
		call   *0x18(%esi)
		test   %al,%al
		je     jump_b5de2
		push   $0x2
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x6f,%edx
		jmp    jump_b5dfc
	jump_b5de2:
		push   $0x2
		push   $0x0
		jmp    jump_b5deb
	jump_b5de8:
		push   $0x2
		push   %ebp
	jump_b5deb:
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x81,%edx
	jump_b5dfc:
		xor    %eax,%eax
		call   ac_play_sample_using_heap
		testb  $0x1,0x25(%esi)
		je     jump_b5e11
		mov    0x1c(%esi),%edx
		mov    0x2d(%esi),%al
		mov    %al,(%edx)
	jump_b5e11:
		andb   $0xf7,0x25(%esi)
	jump_b5e15:
		mov    0x24(%esi),%al
		test   $0x10,%al
		je     jump_b5fa6
		test   $0x20,%al
		je     jump_b5e2d
		movw   $0x4,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
	jump_b5e2d:
		movzbl 0x44(%esp),%edi
		mov    0x3e(%esp),%ebp
		xor    %eax,%eax
		xor    %edx,%edx
		lea    0x5(%edi),%ecx
		sar    $0x10,%ebp
		mov    0x2b(%esi),%al
		mov    0x2(%esi),%dx
		push   %eax
		xor    %eax,%eax
		lea    (%edi,%ebp,1),%ebx
		mov    (%esi),%ax
		sub    %edi,%edx
		sub    %edi,%eax
		sub    $0x4,%ebx
		call   ac_draw_box_purple_list
		mov    EXPORT_SYMBOL(lbDisplay)+96,%cx # lbDisplay__DrawFlags
		or     $0x80,%ch
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %eax,%eax
		mov    0x2b(%esi),%al
		push   %eax
		mov    0x3e(%esp),%eax
		sar    $0x10,%eax
		sub    $0x4,%eax
		lea    (%eax,%edi,1),%ecx
		lea    0x1(%ebp),%ebx
		lea    0x0(,%edi,2),%eax
		xor    %edx,%edx
		add    %eax,%ebx
		xor    %eax,%eax
		mov    0x2(%esi),%dx
		mov    (%esi),%ax
		add    $0x5,%edx
		sub    %edi,%eax
		call   ac_draw_box_purple_list
		mov    EXPORT_SYMBOL(lbDisplay)+96,%ax # lbDisplay__DrawFlags
		and    $0x7f,%ah
		mov    %ax,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %eax,%eax
		mov    0x2b(%esi),%al
		xor    %edx,%edx
		push   %eax
		xor    %eax,%eax
		mov    0x2(%esi),%dx
		mov    (%esi),%ax
		lea    0x5(%edx),%ecx
		add    %eax,%ebp
		push   %ecx
		lea    -0x4(%ebp),%eax
		push   %eax
		inc    %ebp
		sub    %edi,%edx
		lea    (%edi,%ebp,1),%ebx
		call   ac_draw_triangle_purple_list
		movw   $0x10,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		testb  $0x40,0x24(%esi)
		je     jump_b5ef6
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		or     $0x4,%bl
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
	jump_b5ef6:
		mov    0x3a(%esp),%ebp
		mov    0x3e(%esp),%edi
		xor    %eax,%eax
		xor    %edx,%edx
		mov    0x2a(%esi),%al
		sar    $0x10,%ebp
		push   %eax
		xor    %eax,%eax
		mov    0x2(%esi),%dx
		mov    (%esi),%ax
		lea    (%edx,%ebp,1),%ecx
		mov    %eax,%ebx
		sar    $0x10,%edi
		call   ac_draw_line_purple_list
		xor    %eax,%eax
		xor    %edx,%edx
		mov    0x2a(%esi),%al
		mov    0x2(%esi),%dx
		push   %eax
		xor    %eax,%eax
		add    %ebp,%edx
		mov    (%esi),%ax
		mov    %edx,%ecx
		lea    (%eax,%edi,1),%ebx
		call   ac_draw_line_purple_list
		xor    %eax,%eax
		mov    0x2a(%esi),%al
		push   %eax
		xor    %eax,%eax
		xor    %edx,%edx
		mov    (%esi),%ax
		mov    0x2(%esi),%dx
		lea    (%eax,%edi,1),%ebx
		mov    %edx,%ecx
		sub    $0x5,%ebx
		call   ac_draw_line_purple_list
		xor    %eax,%eax
		mov    0x2a(%esi),%al
		xor    %edx,%edx
		push   %eax
		xor    %eax,%eax
		mov    0x2(%esi),%dx
		mov    (%esi),%ax
		lea    (%edx,%ebp,1),%ecx
		add    %edi,%eax
		add    $0x5,%edx
		mov    %eax,%ebx
		call   ac_draw_line_purple_list
		xor    %eax,%eax
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    0x2a(%esi),%al
		mov    0x2(%esi),%dx
		mov    (%esi),%bx
		push   %eax
		add    %edi,%ebx
		lea    0x5(%edx),%ecx
		lea    -0x5(%ebx),%eax
		call   ac_draw_line_purple_list
		xor    %ecx,%ecx
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		jmp    jump_b6293
	jump_b5fa6:
		test   $0x20,%al
		je     jump_b5fb3
		movw   $0x4,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
	jump_b5fb3:
		mov    EXPORT_SYMBOL(lbDisplay)+96,%cx # lbDisplay__DrawFlags
		or     $0x80,%ch
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %eax,%eax
		mov    0x2b(%esi),%al
		mov    0x3a(%esp),%ebx
		push   %eax
		xor    %eax,%eax
		sar    $0x10,%ebx
		mov    0x48(%esp),%al
		inc    %ebx
		lea    0x0(,%eax,2),%edx
		lea    (%ebx,%edx,1),%ecx
		mov    0x42(%esp),%ebx
		sar    $0x10,%ebx
		inc    %ebx
		xor    %edi,%edi
		add    %edx,%ebx
		xor    %edx,%edx
		mov    (%esi),%di
		mov    0x2(%esi),%dx
		sub    %eax,%edi
		sub    %eax,%edx
		mov    %edi,%eax
		mov    $0x10,%edi
		call   ac_draw_box_purple_list
		mov    %di,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		testb  $0x40,0x24(%esi)
		je     jump_b6022
		mov    EXPORT_SYMBOL(lbDisplay)+96,%ax # lbDisplay__DrawFlags
		or     $0x4,%al
		mov    %ax,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
	jump_b6022:
		mov    0x3a(%esp),%ecx
		mov    0x3e(%esp),%ebx
		xor    %eax,%eax
		xor    %edx,%edx
		sar    $0x10,%ecx
		sar    $0x10,%ebx
		mov    0x2a(%esi),%al
		mov    0x2(%esi),%dx
		push   %eax
		inc    %ecx
		xor    %eax,%eax
		inc    %ebx
		mov    (%esi),%ax
		call   ac_draw_box_purple_list
		jmp    jump_b628a
	jump_b604d:
		movw   $0x4,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		testb  $0x1,0x25(%esi)
		je     jump_b606f
		mov    0x1c(%esi),%eax
		mov    0x2d(%esi),%cl
		cmp    (%eax),%cl
		jne    jump_b606f
		xor    %dl,%dl
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
	jump_b606f:
		testb  $0x10,0x24(%esi)
		je     jump_b61da
		movzbl 0x44(%esp),%edi
		mov    0x3e(%esp),%ebp
		xor    %eax,%eax
		xor    %edx,%edx
		lea    0x5(%edi),%ecx
		sar    $0x10,%ebp
		mov    0x2b(%esi),%al
		mov    0x2(%esi),%dx
		push   %eax
		xor    %eax,%eax
		lea    (%edi,%ebp,1),%ebx
		mov    (%esi),%ax
		sub    %edi,%edx
		sub    %edi,%eax
		sub    $0x4,%ebx
		call   ac_draw_box_purple_list
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		or     $0x80,%bh
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %eax,%eax
		mov    0x2b(%esi),%al
		push   %eax
		mov    0x3e(%esp),%eax
		sar    $0x10,%eax
		mov    %eax,0x1c(%esp)
		lea    -0x4(%eax),%ecx
		lea    0x1(%ebp),%eax
		add    %edi,%ecx
		lea    0x0(,%edi,2),%ebx
		add    %eax,%ebx
		xor    %eax,%eax
		xor    %edx,%edx
		mov    (%esi),%ax
		mov    0x2(%esi),%dx
		sub    %edi,%eax
		add    $0x5,%edx
		call   ac_draw_box_purple_list
		mov    EXPORT_SYMBOL(lbDisplay)+96,%cx # lbDisplay__DrawFlags
		and    $0x7f,%ch
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %eax,%eax
		mov    0x2b(%esi),%al
		xor    %edx,%edx
		push   %eax
		xor    %eax,%eax
		mov    (%esi),%dx
		mov    0x2(%esi),%ax
		add    %ebp,%edx
		mov    %eax,0x4(%esp)
		lea    0x5(%eax),%ecx
		lea    -0x4(%edx),%eax
		inc    %edx
		lea    (%edx,%edi,1),%ebx
		push   %ecx
		mov    0x8(%esp),%edx
		push   %eax
		sub    %edi,%edx
		call   ac_draw_triangle_purple_list
		orw    $0x10,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %eax,%eax
		mov    0x18(%esp),%ecx
		mov    0x2a(%esi),%al
		xor    %edx,%edx
		push   %eax
		xor    %eax,%eax
		mov    0x2(%esi),%dx
		mov    (%esi),%ax
		add    %edx,%ecx
		mov    %eax,%ebx
		call   ac_draw_line_purple_list
		mov    0x18(%esp),%ebx
		xor    %eax,%eax
		xor    %edx,%edx
		mov    0x2a(%esi),%al
		mov    0x2(%esi),%dx
		push   %eax
		xor    %eax,%eax
		add    %ebx,%edx
		mov    (%esi),%ax
		mov    %edx,%ecx
		lea    (%eax,%ebp,1),%ebx
		call   ac_draw_line_purple_list
		xor    %eax,%eax
		mov    0x2a(%esi),%al
		push   %eax
		xor    %eax,%eax
		xor    %edx,%edx
		mov    (%esi),%ax
		mov    0x2(%esi),%dx
		lea    (%eax,%ebp,1),%ebx
		mov    %edx,%ecx
		sub    $0x5,%ebx
		call   ac_draw_line_purple_list
		xor    %eax,%eax
		mov    0x18(%esp),%ecx
		mov    0x2a(%esi),%al
		xor    %edx,%edx
		push   %eax
		xor    %eax,%eax
		mov    0x2(%esi),%dx
		mov    (%esi),%ax
		add    %edx,%ecx
		add    %ebp,%eax
		add    $0x5,%edx
		mov    %eax,%ebx
		call   ac_draw_line_purple_list
		xor    %eax,%eax
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    0x2a(%esi),%al
		mov    0x2(%esi),%dx
		mov    (%esi),%bx
		push   %eax
		add    %ebp,%ebx
		lea    0x5(%edx),%ecx
		lea    -0x5(%ebx),%eax
		call   ac_draw_line_purple_list
		jmp    jump_b6262
	jump_b61da:
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		or     $0x80,%bh
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    0x3a(%esp),%ebp
		mov    0x3e(%esp),%edi
		xor    %eax,%eax
		xor    %edx,%edx
		mov    0x2b(%esi),%al
		sar    $0x10,%ebp
		push   %eax
		xor    %eax,%eax
		sar    $0x10,%edi
		mov    0x48(%esp),%al
		mov    0x2(%esi),%dx
		lea    0x0(,%eax,2),%ebx
		sub    %eax,%edx
		inc    %ebp
		mov    %edx,0x4(%esp)
		xor    %edx,%edx
		inc    %edi
		mov    (%esi),%dx
		lea    (%ebx,%ebp,1),%ecx
		sub    %eax,%edx
		add    %edi,%ebx
		mov    %edx,%eax
		mov    0x4(%esp),%edx
		call   ac_draw_box_purple_list
		andw   $0x7fef,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(lbDisplay)+96,%ax # lbDisplay__DrawFlags
		or     $0x10,%al
		mov    %ax,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    %ebp,%ecx
		xor    %eax,%eax
		mov    %edi,%ebx
		mov    0x2a(%esi),%al
		xor    %edx,%edx
		push   %eax
		xor    %eax,%eax
		mov    0x2(%esi),%dx
		mov    (%esi),%ax
		call   ac_draw_box_purple_list
	jump_b6262:
		movw   $0x4,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    0x25(%esi),%al
		test   $0xc,%al
		je     jump_b627a
		mov    %al,%ah
		and    $0xf3,%ah
		mov    %ah,0x25(%esi)
	jump_b627a:
		testb  $0x1,0x25(%esi)
		je     jump_b6293
		mov    0x1c(%esi),%eax
		mov    0x2d(%esi),%dh
		cmp    (%eax),%dh
		jne    jump_b6293
	jump_b628a:
		xor    %edx,%edx
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
	jump_b6293:
		mov    0x25(%esi),%bh
		test   $0x20,%bh
		je     jump_b62ab
		mov    EXPORT_SYMBOL(lbDisplay)+96,%ax # lbDisplay__DrawFlags
		or     $0x80,%al
		mov    %ax,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		jmp    jump_b62b9
	jump_b62ab:
		test   $0x40,%bh
		je     jump_b62b9
		orw    $0x100,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
	jump_b62b9:
		cmpl   $0x0,0x14(%esi)
		je     jump_b62c4
		mov    %esi,%eax
		call   *0x14(%esi)
	jump_b62c4:
		xor    %edx,%edx
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    0x48(%esp),%al
		add    $0x5c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_b62db:
		cmp    $0x18,%ebx
		jg     jump_b6528
		xor    %ecx,%ecx
		mov    proj_origin_m2,%ebp
		mov    (%esi),%cx
		sar    $0x10,%ebp
		mov    %ecx,%edx
		sub    %ebp,%edx
		imul   %ebx,%edx
		mov    $0x18,%edi
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %edi
		add    %ebp,%eax
		mov    %ax,0x30(%esp)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(proj_origin),%edi
		mov    0x2(%esi),%ax
		sar    $0x10,%edi
		mov    %eax,%edx
		sub    %edi,%edx
		imul   %ebx,%edx
		mov    %eax,(%esp)
		movl   $0x18,0x8(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idivl  0x8(%esp)
		mov    0x3e(%esp),%edx
		sar    $0x10,%edx
		add    %ecx,%edx
		sub    %ebp,%edx
		imul   %ebx,%edx
		add    %edi,%eax
		mov    %ax,0x24(%esp)
		mov    $0x18,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		add    %ebp,%eax
		mov    %ax,0x28(%esp)
		mov    0x3a(%esp),%eax
		mov    (%esp),%edx
		sar    $0x10,%eax
		add    %eax,%edx
		sub    %edi,%edx
		imul   %ebx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		add    %edi,%eax
		mov    $0x4,%ebx
		mov    %ax,0x34(%esp)
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %eax,%eax
		mov    0x2a(%esi),%al
		push   %eax
		mov    0x26(%esp),%eax
		sar    $0x10,%eax
		mov    %edi,%edx
		mov    %eax,0x4(%esp)
		mov    0x32(%esp),%eax
		mov    0x2a(%esp),%edi
		sar    $0x10,%eax
		mov    0x4(%esp),%ecx
		mov    %eax,0xc(%esp)
		mov    %eax,%ebx
		mov    %ebp,%eax
		sar    $0x10,%edi
		call   ac_draw_line_purple_list
		mov    0x32(%esp),%ebp
		mov    EXPORT_SYMBOL(proj_origin),%edx
		mov    %edi,%ebx
		xor    %eax,%eax
		sar    $0x10,%ebp
		mov    0x2a(%esi),%al
		sar    $0x10,%edx
		push   %eax
		mov    proj_origin_m2,%eax
		mov    %ebp,%ecx
		sar    $0x10,%eax
		call   ac_draw_line_purple_list
		xor    %ecx,%ecx
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %edx,%edx
		mov    0x58(%esp),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		lea    (%eax,%eax,1),%edx
		mov    fe_mouseptr_sprites,%eax
		add    %edx,%eax
		mov    (%esp),%edx
		mov    %eax,0xc(%esp)
		mov    0x8(%esp),%eax
		dec    %edx
		dec    %eax
		mov    %edx,0x4(%esp)
		mov    EXPORT_SYMBOL(lbDisplay)+40,%bx # lbDisplay.GraphicsWindowX
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(purple_draw_index),%dx
		add    %eax,%ebx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    purple_draw_list,%edx
		mov    %bx,(%edx,%eax,2)
		mov    0x4(%esp),%ebx
		mov    EXPORT_SYMBOL(lbDisplay)+44,%cx # lbDisplay.GraphicsWindowY
		add    %ecx,%ebx
		mov    %bx,0x2(%edx,%eax,2)
		mov    0xc(%esp),%ebx
		mov    %ebx,0x4(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+113,%bl # lbDisplay.DrawColour
		mov    %bl,0x8(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(purple_draw_index),%cx
		mov    %bx,0x18(%edx,%eax,2)
		xor    %ebx,%ebx
		mov    %cx,%bx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		inc    %ecx
		add    %ebx,%eax
		mov    %cx,EXPORT_SYMBOL(purple_draw_index)
		lea    -0x1(%ebp),%ecx
		movb   $0x5,0x17(%edx,%eax,2)
		lea    -0x1(%edi),%eax
		mov    EXPORT_SYMBOL(lbDisplay)+40,%di # lbDisplay.GraphicsWindowX
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(purple_draw_index),%bx
		add    %eax,%edi
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    %di,(%edx,%eax,2)
		add    EXPORT_SYMBOL(lbDisplay)+44,%cx # lbDisplay.GraphicsWindowY
		mov    0xc(%esp),%ebx
		mov    %cx,0x2(%edx,%eax,2)
		mov    %ebx,0x4(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+113,%bl # lbDisplay.DrawColour
		mov    %bl,0x8(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(purple_draw_index),%cx
		mov    %bx,0x18(%edx,%eax,2)
		xor    %ebx,%ebx
		mov    %cx,%bx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		movb   $0x5,0x17(%edx,%eax,2)
		inc    %ecx
		mov    0x26(%esi),%al
		mov    0x27(%esi),%dl
		mov    %cx,EXPORT_SYMBOL(purple_draw_index)
		add    %al,%dl
		xor    %al,%al
		mov    %dl,0x27(%esi)
		add    $0x5c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_b6528:
		mov    $0x4,%edx
		xor    %ebx,%ebx
		xor    %eax,%eax
		call   ac_IsSamplePlaying
		test   %al,%al
		jne    jump_b6556
		push   $0x1
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x6e,%edx
		xor    %eax,%eax
		call   ac_play_sample_using_heap
	jump_b6556:
		mov    0x2(%esi),%ax
		add    0x6(%esi),%ax
		mov    0x4(%esi),%di
		movswl %ax,%ecx
		mov    (%esi),%ax
		mov    (%esi),%ebx
		add    %edi,%eax
		sar    $0x10,%ebx
		movswl %ax,%edx
		movswl (%esi),%eax
		call   ac_mouse_move_over_rect
		test   %al,%al
		jne    jump_b6587
		movw   $0x4,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
	jump_b6587:
		xor    %eax,%eax
		mov    0x27(%esi),%al
		cmp    $0x30,%eax
		jg     jump_b685f
		mov    0x3e(%esp),%edi
		sar    $0x10,%edi
		lea    -0x18(%eax),%ecx
		mov    %edi,%edx
		imul   %ecx,%edx
		mov    $0x18,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,%ebx
		testb  $0x10,0x24(%esi)
		je     jump_b65d5
		lea    -0x5(%edi),%edx
		imul   %ecx,%edx
		mov    $0x18,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		xor    %edx,%edx
		mov    (%esi),%dx
		add    %edx,%eax
		mov    %eax,%edi
		jmp    jump_b65da
	jump_b65d5:
		mov    (%esi),%di
		add    %ebx,%edi
	jump_b65da:
		mov    0x40(%esp),%edx
		mov    (%esi),%ax
		add    %edx,%eax
		sub    %ebx,%eax
		mov    %ax,0x2c(%esp)
		mov    0x2a(%esi),%al
		mov    %al,EXPORT_SYMBOL(vec_colour)
		movswl %di,%eax
		mov    %eax,data_1dc674
		xor    %eax,%eax
		xor    %edx,%edx
		mov    0x2(%esi),%ax
		mov    0x50(%esp),%dl
		mov    %eax,data_1dc678
		mov    data_1dc674,%eax
		sub    %edx,%eax
		mov    %eax,data_1dc69c
		xor    %eax,%eax
		mov    data_1dc69c,%edx
		mov    (%esi),%ax
		cmp    %edx,%eax
		jle    jump_b662b
		mov    %eax,data_1dc69c
	jump_b662b:
		xor    %eax,%eax
		mov    data_1dc69c,%ebx
		mov    0x2(%esi),%ax
		mov    data_1dc678,%edx
		mov    %eax,data_1dc6a0
		mov    %eax,%ecx
		mov    data_1dc674,%eax
		call   ac_draw_trig_purple_list
		movswl %di,%ebx
		xor    %eax,%eax
		xor    %edx,%edx
		mov    0x2a(%esi),%al
		mov    0x2(%esi),%dx
		push   %eax
		xor    %eax,%eax
		mov    %edx,%ecx
		mov    (%esi),%ax
		call   ac_draw_line_purple_list
		mov    0x2a(%esp),%eax
		sar    $0x10,%eax
		xor    %edx,%edx
		mov    %eax,data_1dc674
		mov    0x3a(%esp),%eax
		mov    0x2(%esi),%dx
		sar    $0x10,%eax
		add    %eax,%edx
		xor    %eax,%eax
		mov    %edx,data_1dc678
		mov    0x50(%esp),%al
		mov    data_1dc674,%edx
		add    %eax,%edx
		mov    %edx,data_1dc69c
		xor    %eax,%eax
		mov    0x3e(%esp),%edx
		mov    (%esi),%ax
		sar    $0x10,%edx
		mov    data_1dc69c,%ebx
		add    %edx,%eax
		cmp    %ebx,%eax
		jge    jump_b66bb
		mov    %eax,data_1dc69c
	jump_b66bb:
		mov    0x3a(%esp),%ebp
		xor    %eax,%eax
		sar    $0x10,%ebp
		mov    0x2(%esi),%ax
		mov    data_1dc69c,%ebx
		add    %ebp,%eax
		mov    data_1dc678,%edx
		mov    %eax,data_1dc6a0
		mov    %eax,%ecx
		mov    data_1dc674,%eax
		call   ac_draw_trig_purple_list
		xor    %eax,%eax
		xor    %edx,%edx
		mov    0x2a(%esi),%al
		xor    %ebx,%ebx
		push   %eax
		mov    0x42(%esp),%eax
		mov    (%esi),%bx
		sar    $0x10,%eax
		mov    0x2(%esi),%dx
		add    %eax,%ebx
		mov    0x2e(%esp),%eax
		add    %ebp,%edx
		sar    $0x10,%eax
		mov    %edx,%ecx
		mov    %eax,0x24(%esp)
		call   ac_draw_line_purple_list
		xor    %ebx,%ebx
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %edx,%edx
		mov    0x58(%esp),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		lea    (%eax,%eax,1),%edx
		mov    fe_mouseptr_sprites,%eax
		add    %edx,%eax
		mov    %eax,0x1c(%esp)
		xor    %edx,%edx
		movswl %di,%eax
		mov    0x2(%esi),%dx
		dec    %eax
		lea    -0x1(%edx),%ecx
		mov    EXPORT_SYMBOL(lbDisplay)+40,%di # lbDisplay.GraphicsWindowX
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(purple_draw_index),%dx
		add    %eax,%edi
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		mov    purple_draw_list,%ebx
		add    %edx,%eax
		mov    %di,(%ebx,%eax,2)
		add    EXPORT_SYMBOL(lbDisplay)+44,%cx # lbDisplay.GraphicsWindowY
		mov    0x1c(%esp),%edx
		mov    %cx,0x2(%ebx,%eax,2)
		mov    %edx,0x4(%ebx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+113,%dl # lbDisplay.DrawColour
		mov    %dl,0x8(%ebx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+96,%dx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(purple_draw_index),%cx
		mov    %dx,0x18(%ebx,%eax,2)
		xor    %edx,%edx
		mov    %cx,%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		inc    %ecx
		movb   $0x5,0x17(%ebx,%eax,2)
		xor    %eax,%eax
		mov    %cx,EXPORT_SYMBOL(purple_draw_index)
		mov    0x2(%esi),%ax
		mov    0x20(%esp),%edx
		add    %ebp,%eax
		dec    %edx
		lea    -0x1(%eax),%edi
		mov    EXPORT_SYMBOL(lbDisplay)+40,%cx # lbDisplay.GraphicsWindowX
		add    %edx,%ecx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(purple_draw_index),%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    %cx,(%ebx,%eax,2)
		add    EXPORT_SYMBOL(lbDisplay)+44,%di # lbDisplay.GraphicsWindowY
		mov    0x1c(%esp),%edx
		mov    %di,0x2(%ebx,%eax,2)
		mov    %edx,0x4(%ebx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+113,%dl # lbDisplay.DrawColour
		mov    %dl,0x8(%ebx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+96,%dx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(purple_draw_index),%cx
		mov    %dx,0x18(%ebx,%eax,2)
		xor    %edx,%edx
		mov    %cx,%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		movb   $0x5,0x17(%ebx,%eax,2)
		mov    0x26(%esi),%al
		mov    0x27(%esi),%ah
		inc    %ecx
		add    %al,%ah
		mov    %cx,EXPORT_SYMBOL(purple_draw_index)
		mov    %ah,0x27(%esi)
		xor    %al,%al
		add    $0x5c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_b685f:
		mov    0x3a(%esp),%edi
		sar    $0x10,%edi
		lea    -0x30(%eax),%ecx
		mov    %edi,%edx
		imul   %ecx,%edx
		mov    $0x18,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,%ebx
		testb  $0x10,0x24(%esi)
		je     jump_b68a3
		lea    -0x5(%edi),%edx
		imul   %ecx,%edx
		mov    $0x18,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		xor    %edx,%edx
		mov    0x2(%esi),%dx
		add    $0x5,%edx
		add    %edx,%eax
		mov    %eax,%edi
		jmp    jump_b68a9
	jump_b68a3:
		mov    0x2(%esi),%di
		add    %ebx,%edi
	jump_b68a9:
		mov    0x3c(%esp),%edx
		mov    0x2(%esi),%ax
		add    %edx,%eax
		sub    %ebx,%eax
		mov    %ax,0x38(%esp)
		mov    0x2a(%esi),%al
		xor    %edx,%edx
		mov    %al,EXPORT_SYMBOL(vec_colour)
		mov    0x3e(%esp),%eax
		mov    (%esi),%dx
		sar    $0x10,%eax
		add    %eax,%edx
		mov    %edx,data_1dc674
		movswl %di,%eax
		mov    %edx,data_1dc69c
		mov    %eax,data_1dc678
		mov    %eax,%edx
		xor    %eax,%eax
		mov    0x50(%esp),%al
		sub    %eax,%edx
		mov    0x24(%esi),%ah
		mov    %edx,data_1dc6a0
		test   $0x10,%ah
		je     jump_b690b
		xor    %eax,%eax
		mov    0x2(%esi),%ax
		add    $0x5,%eax
		cmp    %edx,%eax
		jle    jump_b691a
		jmp    jump_b6915
	jump_b690b:
		xor    %eax,%eax
		mov    0x2(%esi),%ax
		cmp    %edx,%eax
		jle    jump_b691a
	jump_b6915:
		mov    %eax,data_1dc6a0
	jump_b691a:
		mov    data_1dc6a0,%ecx
		mov    data_1dc69c,%ebx
		mov    data_1dc678,%edx
		mov    data_1dc674,%eax
		call   ac_draw_trig_purple_list
		testb  $0x10,0x24(%esi)
		je     jump_b6960
		xor    %eax,%eax
		mov    0x2a(%esi),%al
		xor    %edx,%edx
		push   %eax
		mov    0x42(%esp),%eax
		mov    (%esi),%dx
		sar    $0x10,%eax
		add    %edx,%eax
		xor    %edx,%edx
		movswl %di,%ecx
		mov    0x2(%esi),%dx
		mov    %eax,%ebx
		add    $0x5,%edx
		jmp    jump_b697f
	jump_b6960:
		xor    %eax,%eax
		mov    0x2a(%esi),%al
		xor    %edx,%edx
		push   %eax
		mov    0x42(%esp),%eax
		mov    (%esi),%dx
		sar    $0x10,%eax
		movswl %di,%ecx
		add    %edx,%eax
		xor    %edx,%edx
		mov    %eax,%ebx
		mov    0x2(%esi),%dx
	jump_b697f:
		call   ac_draw_line_purple_list
		xor    %eax,%eax
		mov    (%esi),%ax
		mov    %eax,data_1dc674
		mov    0x36(%esp),%eax
		sar    $0x10,%eax
		mov    %eax,data_1dc678
		mov    data_1dc674,%eax
		mov    %eax,data_1dc69c
		xor    %eax,%eax
		mov    data_1dc678,%edx
		mov    0x50(%esp),%al
		add    %eax,%edx
		mov    %edx,data_1dc6a0
		xor    %eax,%eax
		mov    0x3a(%esp),%edx
		mov    0x2(%esi),%ax
		sar    $0x10,%edx
		mov    data_1dc6a0,%ebp
		add    %edx,%eax
		cmp    %ebp,%eax
		jge    jump_b69d6
		mov    %eax,data_1dc6a0
	jump_b69d6:
		mov    data_1dc6a0,%ecx
		mov    data_1dc69c,%ebx
		mov    data_1dc678,%edx
		mov    data_1dc674,%eax
		mov    0x3a(%esp),%ebp
		call   ac_draw_trig_purple_list
		mov    0x36(%esp),%edx
		sar    $0x10,%ebp
		xor    %eax,%eax
		xor    %ecx,%ecx
		mov    0x2a(%esi),%al
		sar    $0x10,%edx
		push   %eax
		xor    %eax,%eax
		mov    0x2(%esi),%cx
		mov    (%esi),%ax
		add    %ebp,%ecx
		mov    %eax,%ebx
		call   ac_draw_line_purple_list
		xor    %eax,%eax
		xor    %edx,%edx
		mov    0x2a(%esi),%al
		mov    0x2(%esi),%dx
		push   %eax
		add    %ebp,%edx
		mov    0x42(%esp),%ebp
		xor    %eax,%eax
		sar    $0x10,%ebp
		mov    (%esi),%ax
		mov    %edx,%ecx
		lea    (%eax,%ebp,1),%ebx
		call   ac_draw_line_purple_list
		testb  $0x10,0x24(%esi)
		je     jump_b6a7d
		xor    %eax,%eax
		mov    0x2a(%esi),%al
		push   %eax
		xor    %eax,%eax
		xor    %edx,%edx
		mov    (%esi),%ax
		mov    0x2(%esi),%dx
		lea    (%eax,%ebp,1),%ebx
		mov    %edx,%ecx
		sub    $0x5,%ebx
		call   ac_draw_line_purple_list
		xor    %eax,%eax
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    0x2a(%esi),%al
		mov    0x2(%esi),%dx
		mov    (%esi),%bx
		push   %eax
		add    %ebp,%ebx
		lea    0x5(%edx),%ecx
		lea    -0x5(%ebx),%eax
		jmp    jump_b6a93
	jump_b6a7d:
		xor    %eax,%eax
		mov    0x2a(%esi),%al
		xor    %edx,%edx
		push   %eax
		xor    %eax,%eax
		mov    0x2(%esi),%dx
		mov    (%esi),%ax
		mov    %edx,%ecx
		lea    (%eax,%ebp,1),%ebx
	jump_b6a93:
		call   ac_draw_line_purple_list
		xor    %ebx,%ebx
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %edx,%edx
		mov    0x58(%esp),%dl
		lea    0x0(,%edx,4),%eax
		mov    fe_mouseptr_sprites,%ecx
		sub    %edx,%eax
		mov    0x36(%esp),%edx
		add    %eax,%eax
		sar    $0x10,%edx
		add    %eax,%ecx
		xor    %eax,%eax
		dec    %edx
		mov    (%esi),%ax
		mov    %edx,0x10(%esp)
		dec    %eax
		mov    EXPORT_SYMBOL(lbDisplay)+40,%bx # lbDisplay.GraphicsWindowX
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(purple_draw_index),%dx
		add    %eax,%ebx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    purple_draw_list,%edx
		mov    %bx,(%edx,%eax,2)
		mov    0x10(%esp),%ebx
		add    EXPORT_SYMBOL(lbDisplay)+44,%bx # lbDisplay.GraphicsWindowY
		mov    %bx,0x2(%edx,%eax,2)
		mov    %ecx,0x4(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+113,%bl # lbDisplay.DrawColour
		mov    %bl,0x8(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		mov    %bx,0x18(%edx,%eax,2)
		mov    EXPORT_SYMBOL(purple_draw_index),%ax
		xor    %ebx,%ebx
		mov    %ax,%bx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		inc    %ebx
		movb   $0x5,0x17(%edx,%eax,2)
		mov    0x3e(%esp),%eax
		mov    %bx,EXPORT_SYMBOL(purple_draw_index)
		movswl %di,%ebx
		xor    %edi,%edi
		sar    $0x10,%eax
		mov    (%esi),%di
		dec    %ebx
		add    %edi,%eax
		mov    %ebx,0x14(%esp)
		dec    %eax
		mov    EXPORT_SYMBOL(lbDisplay)+40,%di # lbDisplay.GraphicsWindowX
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(purple_draw_index),%bx
		add    %eax,%edi
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    0x14(%esp),%ebx
		mov    %di,(%edx,%eax,2)
		add    EXPORT_SYMBOL(lbDisplay)+44,%bx # lbDisplay.GraphicsWindowY
		mov    %ecx,0x4(%edx,%eax,2)
		mov    %bx,0x2(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+113,%bl # lbDisplay.DrawColour
		mov    %bl,0x8(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(purple_draw_index),%cx
		mov    %bx,0x18(%edx,%eax,2)
		xor    %ebx,%ebx
		mov    %cx,%bx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		movb   $0x5,0x17(%edx,%eax,2)
		inc    %ecx
		mov    0x26(%esi),%al
		mov    0x27(%esi),%bl
		mov    %cx,EXPORT_SYMBOL(purple_draw_index)
		add    %al,%bl
		mov    $0x2,%al
		mov    %bl,0x27(%esi)
		add    $0x5c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_flashy_draw_purple_info_box)	/* 0x0B6BEC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x54,%esp
		mov    %eax,%esi
		movb   $0xf,0x50(%esp)
		xor    %eax,%eax
		mov    0x29(%esi),%al
		cmp    $0xf7,%eax
		setne  %al
		and    $0xff,%eax
		add    $0xb,%eax
		mov    0x4(%esi),%di
		mov    %al,0x4c(%esp)
		mov    0x6(%esi),%ax
		mov    0x24(%esi),%dl
		dec    %eax
		dec    %edi
		mov    %ax,0x44(%esp)
		test   $0x2,%dl
		je     jump_b6c38
		mov    %dl,%dh
		movb   $0xff,0x27(%esi)
		and    $0x7c,%dh
		mov    %dh,0x24(%esi)
	jump_b6c38:
		testb  $0x1,0x24(%esi)
		je     jump_b6c53
		mov    0x24(%esi),%bh
		and    $0x7e,%bh
		movb   $0x0,0x27(%esi)
		mov    %bh,%cl
		mov    %bh,0x24(%esi)
		or     $0x80,%cl
		mov    %cl,0x24(%esi)
	jump_b6c53:
		xor    %ebx,%ebx
		mov    0x27(%esi),%bl
		cmp    $0x48,%ebx
		jle    jump_b6d25
		testb  $0x4,0x24(%esi)
		jne    jump_b6d05
		mov    $0x4,%eax
		xor    %ecx,%ecx
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    %ax,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    0x6(%esi),%cx
		mov    0x4(%esi),%bx
		xor    %eax,%eax
		mov    0x2(%esi),%dx
		mov    0x2a(%esi),%al
		add    $0x2,%ecx
		push   %eax
		xor    %eax,%eax
		add    $0x2,%ebx
		mov    (%esi),%ax
		dec    %edx
		dec    %eax
		call   ac_draw_box_purple_list
		mov    $0x10,%edx
		xor    %eax,%eax
		xor    %ecx,%ecx
		xor    %ebx,%ebx
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    0x29(%esi),%al
		mov    0x6(%esi),%cx
		mov    0x4(%esi),%bx
		push   %eax
		xor    %edx,%edx
		xor    %eax,%eax
		mov    0x2(%esi),%dx
		mov    (%esi),%ax
		call   ac_draw_box_purple_list
		xor    %ebx,%ebx
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		testb  $0x8,0x24(%esi)
		jne    jump_b6d05
		xor    %ecx,%ecx
		xor    %ebx,%ebx
		xor    %edx,%edx
		xor    %eax,%eax
		mov    0x6(%esi),%cx
		mov    0x4(%esi),%bx
		mov    0x2(%esi),%dx
		mov    (%esi),%ax
		add    $0x2,%ecx
		add    $0x2,%ebx
		dec    %edx
		dec    %eax
		call   ac_copy_box_purple_list
		orb    $0x4,0x24(%esi)
	jump_b6d05:
		cmpl   $0x0,0x1c(%esi)
		je     jump_b6d10
		mov    %esi,%eax
		call   *0x1c(%esi)
	jump_b6d10:
		xor    %ecx,%ecx
		mov    $0x3,%al
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		add    $0x54,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_b6d25:
		cmp    $0x18,%ebx
		jg     jump_b6f6b
		xor    %eax,%eax
		mov    proj_origin_m2,%ebp
		mov    (%esi),%ax
		sar    $0x10,%ebp
		mov    %eax,%edx
		sub    %ebp,%edx
		imul   %ebx,%edx
		mov    $0x18,%ecx
		mov    %eax,(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		add    %ebp,%eax
		xor    %ecx,%ecx
		mov    %ax,0x30(%esp)
		mov    0x2(%esi),%cx
		mov    EXPORT_SYMBOL(proj_origin),%eax
		mov    %ecx,%edx
		sar    $0x10,%eax
		sub    %eax,%edx
		imul   %ebx,%edx
		mov    %eax,0x4(%esp)
		movl   $0x18,0x28(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idivl  0x28(%esp)
		add    0x4(%esp),%eax
		movswl %di,%edx
		add    (%esp),%edx
		sub    %ebp,%edx
		imul   %ebx,%edx
		mov    %ax,0x34(%esp)
		mov    $0x18,%edi
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %edi
		add    %ebp,%eax
		mov    %ax,0x48(%esp)
		mov    0x42(%esp),%eax
		sar    $0x10,%eax
		lea    (%ecx,%eax,1),%edx
		sub    0x4(%esp),%edx
		imul   %ebx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %edi
		mov    0x4(%esp),%edx
		mov    0x32(%esp),%edi
		add    %edx,%eax
		sar    $0x10,%edi
		mov    %ax,0x34(%esp)
		xor    %eax,%eax
		mov    $0x4,%edx
		mov    0x29(%esi),%al
		mov    %edi,%ecx
		push   %eax
		mov    0x32(%esp),%eax
		mov    %dx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		sar    $0x10,%eax
		mov    0x8(%esp),%edx
		mov    %eax,0x2c(%esp)
		mov    %eax,%ebx
		mov    %ebp,%eax
		call   ac_draw_line_purple_list
		mov    0x32(%esp),%ebp
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(proj_origin),%edx
		mov    0x29(%esi),%al
		sar    $0x10,%ebp
		push   %eax
		mov    0x4a(%esp),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		mov    %ebp,%ecx
		mov    %eax,0x28(%esp)
		mov    proj_origin_m2,%eax
		mov    0x28(%esp),%ebx
		sar    $0x10,%eax
		call   ac_draw_line_purple_list
		xor    %edx,%edx
		mov    0x4c(%esp),%dl
		lea    0x0(,%edx,4),%eax
		dec    %edi
		sub    %edx,%eax
		mov    fe_mouseptr_sprites,%ecx
		add    %eax,%eax
		xor    %ebx,%ebx
		add    %eax,%ecx
		mov    0x28(%esp),%eax
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		dec    %eax
		mov    %edi,0x8(%esp)
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay)+40,%di # lbDisplay.GraphicsWindowX
		mov    EXPORT_SYMBOL(purple_draw_index),%dx
		add    %eax,%edi
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		mov    purple_draw_list,%ebx
		add    %edx,%eax
		mov    0x8(%esp),%edx
		mov    %di,(%ebx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+44,%di # lbDisplay.GraphicsWindowY
		add    %edi,%edx
		mov    %dx,0x2(%ebx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+113,%dl # lbDisplay.DrawColour
		mov    EXPORT_SYMBOL(purple_draw_index),%di
		mov    %dl,0x8(%ebx,%eax,2)
		xor    %edx,%edx
		movw   $0x0,0x18(%ebx,%eax,2)
		mov    %di,%dx
		mov    %ecx,0x4(%ebx,%eax,2)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		inc    %edi
		add    %edx,%eax
		mov    %di,EXPORT_SYMBOL(purple_draw_index)
		mov    EXPORT_SYMBOL(lbDisplay)+40,%di # lbDisplay.GraphicsWindowX
		movb   $0x5,0x17(%ebx,%eax,2)
		mov    0x24(%esp),%eax
		xor    %edx,%edx
		dec    %eax
		mov    EXPORT_SYMBOL(purple_draw_index),%dx
		add    %eax,%edi
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		dec    %ebp
		shl    $0x2,%eax
		mov    %ebp,0xc(%esp)
		add    %edx,%eax
		mov    0xc(%esp),%edx
		mov    %di,(%ebx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+44,%di # lbDisplay.GraphicsWindowY
		mov    %ecx,0x4(%ebx,%eax,2)
		add    %edi,%edx
		mov    %dx,0x2(%ebx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+113,%dl # lbDisplay.DrawColour
		mov    EXPORT_SYMBOL(purple_draw_index),%cx
		mov    %dl,0x8(%ebx,%eax,2)
		xor    %edx,%edx
		mov    %cx,%dx
		movw   $0x0,0x18(%ebx,%eax,2)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		movb   $0x5,0x17(%ebx,%eax,2)
		inc    %ecx
		mov    0x26(%esi),%al
		mov    0x27(%esi),%dh
		mov    %cx,EXPORT_SYMBOL(purple_draw_index)
		add    %al,%dh
		xor    %al,%al
		mov    %dh,0x27(%esi)
		add    $0x54,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_b6f6b:
		mov    $0x4,%edx
		xor    %ebx,%ebx
		xor    %eax,%eax
		call   ac_IsSamplePlaying
		test   %al,%al
		jne    jump_b6f99
		push   $0x1
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x6e,%edx
		xor    %eax,%eax
		call   ac_play_sample_using_heap
	jump_b6f99:
		xor    %eax,%eax
		mov    0x27(%esi),%al
		cmp    $0x30,%eax
		jg     jump_b724e
		movswl %di,%edx
		sub    $0x18,%eax
		imul   %eax,%edx
		mov    $0x18,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    (%esi),%dx
		add    %eax,%edx
		mov    %dx,0x38(%esp)
		mov    (%esi),%dx
		add    %edi,%edx
		sub    %eax,%edx
		mov    0x29(%esi),%al
		mov    %al,EXPORT_SYMBOL(vec_colour)
		mov    0x36(%esp),%eax
		sar    $0x10,%eax
		mov    %eax,data_1dc6ec
		xor    %eax,%eax
		mov    0x2(%esi),%ax
		mov    %dx,0x2c(%esp)
		mov    %eax,data_1dc6f0
		xor    %eax,%eax
		mov    data_1dc6ec,%edx
		mov    0x50(%esp),%al
		sub    %eax,%edx
		xor    %eax,%eax
		mov    (%esi),%ax
		mov    %edx,data_1dc714
		cmp    %edx,%eax
		jle    jump_b7013
		mov    %eax,data_1dc714
	jump_b7013:
		xor    %eax,%eax
		mov    data_1dc714,%ebx
		mov    0x2(%esi),%ax
		mov    data_1dc6f0,%edx
		mov    %eax,data_1dc718
		mov    %eax,%ecx
		mov    data_1dc6ec,%eax
		call   ac_draw_trig_purple_list
		mov    0x36(%esp),%ebx
		xor    %eax,%eax
		xor    %edx,%edx
		sar    $0x10,%ebx
		mov    0x29(%esi),%al
		mov    0x2(%esi),%dx
		push   %eax
		xor    %eax,%eax
		mov    %edx,%ecx
		mov    (%esi),%ax
		call   ac_draw_line_purple_list
		mov    0x2a(%esp),%eax
		sar    $0x10,%eax
		xor    %edx,%edx
		mov    %eax,data_1dc6ec
		mov    0x42(%esp),%eax
		mov    0x2(%esi),%dx
		sar    $0x10,%eax
		add    %eax,%edx
		xor    %eax,%eax
		mov    %edx,data_1dc6f0
		mov    0x50(%esp),%al
		mov    data_1dc6ec,%edx
		add    %eax,%edx
		mov    %edx,data_1dc714
		xor    %eax,%eax
		movswl %di,%edx
		mov    (%esi),%ax
		mov    data_1dc714,%ebx
		add    %edx,%eax
		cmp    %ebx,%eax
		jge    jump_b70a3
		mov    %eax,data_1dc714
	jump_b70a3:
		mov    0x42(%esp),%ebp
		xor    %eax,%eax
		sar    $0x10,%ebp
		mov    0x2(%esi),%ax
		mov    data_1dc714,%ebx
		add    %ebp,%eax
		mov    data_1dc6f0,%edx
		mov    %eax,data_1dc718
		mov    %eax,%ecx
		mov    data_1dc6ec,%eax
		call   ac_draw_trig_purple_list
		xor    %eax,%eax
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    0x29(%esi),%al
		mov    0x2(%esi),%dx
		mov    (%esi),%bx
		push   %eax
		add    %ebp,%edx
		mov    0x2e(%esp),%ebp
		movswl %di,%eax
		mov    %edx,%ecx
		sar    $0x10,%ebp
		add    %eax,%ebx
		mov    %ebp,%eax
		call   ac_draw_line_purple_list
		xor    %edx,%edx
		mov    0x4c(%esp),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    fe_mouseptr_sprites,%ecx
		add    %eax,%eax
		xor    %edx,%edx
		add    %eax,%ecx
		mov    0x36(%esp),%eax
		mov    0x2(%esi),%dx
		sar    $0x10,%eax
		dec    %edx
		dec    %eax
		mov    %edx,0x10(%esp)
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay)+40,%bx # lbDisplay.GraphicsWindowX
		mov    EXPORT_SYMBOL(purple_draw_index),%dx
		add    %eax,%ebx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    purple_draw_list,%edx
		mov    EXPORT_SYMBOL(lbDisplay)+44,%di # lbDisplay.GraphicsWindowY
		mov    %bx,(%edx,%eax,2)
		mov    0x10(%esp),%ebx
		add    %edi,%ebx
		mov    %bx,0x2(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+113,%bl # lbDisplay.DrawColour
		mov    %bl,0x8(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(purple_draw_index),%di
		mov    %bx,0x18(%edx,%eax,2)
		xor    %ebx,%ebx
		mov    %di,%bx
		mov    %ecx,0x4(%edx,%eax,2)
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		dec    %ebp
		movb   $0x5,0x17(%edx,%eax,2)
		xor    %ebx,%ebx
		xor    %eax,%eax
		mov    0x2(%esi),%bx
		mov    0x6(%esi),%ax
		inc    %edi
		add    %ebx,%eax
		mov    %di,EXPORT_SYMBOL(purple_draw_index)
		lea    -0x2(%eax),%ebx
		mov    EXPORT_SYMBOL(lbDisplay)+40,%di # lbDisplay.GraphicsWindowX
		mov    %ebx,0x14(%esp)
		xor    %ebx,%ebx
		mov    %ebp,%eax
		mov    EXPORT_SYMBOL(purple_draw_index),%bx
		add    %eax,%edi
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    0x14(%esp),%ebx
		mov    %di,(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+44,%di # lbDisplay.GraphicsWindowY
		mov    %ecx,0x4(%edx,%eax,2)
		add    %edi,%ebx
		mov    %bx,0x2(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+113,%bl # lbDisplay.DrawColour
		mov    %bl,0x8(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(purple_draw_index),%cx
		mov    %bx,0x18(%edx,%eax,2)
		xor    %ebx,%ebx
		mov    %cx,%bx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		inc    %ecx
		movb   $0x5,0x17(%edx,%eax,2)
		xor    %eax,%eax
		mov    0x27(%esi),%dl
		mov    %ax,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    0x26(%esi),%al
		mov    %cx,EXPORT_SYMBOL(purple_draw_index)
		add    %al,%dl
		xor    %al,%al
		mov    %dl,0x27(%esi)
		add    $0x54,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_b724e:
		mov    0x42(%esp),%edx
		sub    $0x30,%eax
		sar    $0x10,%edx
		imul   %eax,%edx
		mov    $0x18,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    0x2(%esi),%dx
		add    %eax,%edx
		mov    0x44(%esp),%ebx
		mov    %dx,0x3c(%esp)
		mov    0x2(%esi),%dx
		add    %ebx,%edx
		sub    %eax,%edx
		movb   $0x11,EXPORT_SYMBOL(vec_mode)
		mov    0x29(%esi),%al
		mov    %al,EXPORT_SYMBOL(vec_colour)
		xor    %eax,%eax
		movswl %di,%ecx
		mov    (%esi),%ax
		add    %ecx,%eax
		mov    %eax,data_1dc6ec
		mov    0x3a(%esp),%eax
		sar    $0x10,%eax
		mov    %eax,data_1dc6f0
		mov    data_1dc6ec,%eax
		mov    %dx,0x40(%esp)
		mov    %eax,data_1dc714
		xor    %eax,%eax
		mov    data_1dc6f0,%edx
		mov    0x50(%esp),%al
		sub    %eax,%edx
		xor    %eax,%eax
		mov    0x2(%esi),%ax
		mov    %edx,data_1dc718
		cmp    %edx,%eax
		jle    jump_b72da
		mov    %eax,data_1dc718
	jump_b72da:
		mov    data_1dc718,%ecx
		mov    data_1dc714,%ebx
		mov    data_1dc6f0,%edx
		mov    data_1dc6ec,%eax
		call   ac_draw_trig_purple_list
		mov    0x3a(%esp),%ecx
		xor    %eax,%eax
		xor    %edx,%edx
		mov    0x29(%esi),%al
		mov    (%esi),%dx
		push   %eax
		movswl %di,%eax
		sar    $0x10,%ecx
		add    %edx,%eax
		xor    %edx,%edx
		mov    %eax,%ebx
		mov    0x2(%esi),%dx
		call   ac_draw_line_purple_list
		xor    %eax,%eax
		mov    (%esi),%ax
		mov    %eax,data_1dc6ec
		mov    0x3e(%esp),%eax
		sar    $0x10,%eax
		mov    %eax,data_1dc6f0
		mov    data_1dc6ec,%eax
		mov    %eax,data_1dc714
		xor    %eax,%eax
		mov    data_1dc6f0,%edx
		mov    0x50(%esp),%al
		add    %eax,%edx
		mov    0x42(%esp),%eax
		mov    %edx,data_1dc718
		xor    %edx,%edx
		sar    $0x10,%eax
		mov    0x2(%esi),%dx
		mov    data_1dc718,%ebx
		add    %edx,%eax
		cmp    %ebx,%eax
		jge    jump_b736c
		mov    %eax,data_1dc718
	jump_b736c:
		mov    data_1dc718,%ecx
		mov    data_1dc714,%ebx
		mov    data_1dc6f0,%edx
		mov    data_1dc6ec,%eax
		call   ac_draw_trig_purple_list
		xor    %eax,%eax
		mov    0x29(%esi),%al
		mov    0x3e(%esp),%ebp
		push   %eax
		mov    0x46(%esp),%eax
		xor    %ecx,%ecx
		sar    $0x10,%eax
		mov    0x2(%esi),%cx
		mov    %eax,0x1c(%esp)
		add    %eax,%ecx
		xor    %eax,%eax
		sar    $0x10,%ebp
		mov    (%esi),%ax
		mov    %ebp,%edx
		mov    %eax,%ebx
		call   ac_draw_line_purple_list
		xor    %edx,%edx
		mov    0x4c(%esp),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		lea    (%eax,%eax,1),%edx
		mov    fe_mouseptr_sprites,%eax
		add    %edx,%eax
		mov    %eax,0x20(%esp)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+40,%bx # lbDisplay.GraphicsWindowX
		mov    (%esi),%ax
		xor    %edx,%edx
		dec    %eax
		mov    EXPORT_SYMBOL(purple_draw_index),%dx
		add    %eax,%ebx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    purple_draw_list,%edx
		lea    -0x1(%ebp),%ecx
		mov    %bx,(%edx,%eax,2)
		add    EXPORT_SYMBOL(lbDisplay)+44,%cx # lbDisplay.GraphicsWindowY
		mov    0x20(%esp),%ebx
		mov    %cx,0x2(%edx,%eax,2)
		mov    %ebx,0x4(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+113,%bl # lbDisplay.DrawColour
		mov    %bl,0x8(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(purple_draw_index),%cx
		mov    %bx,0x18(%edx,%eax,2)
		xor    %ebx,%ebx
		mov    %cx,%bx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		inc    %ecx
		add    %ebx,%eax
		mov    %cx,EXPORT_SYMBOL(purple_draw_index)
		movb   $0x5,0x17(%edx,%eax,2)
		mov    0x3a(%esp),%ebx
		xor    %eax,%eax
		xor    %ecx,%ecx
		sar    $0x10,%ebx
		mov    0x4(%esi),%ax
		mov    (%esi),%cx
		dec    %ebx
		add    %ecx,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+40,%cx # lbDisplay.GraphicsWindowX
		mov    %ebx,0x1c(%esp)
		xor    %ebx,%ebx
		sub    $0x2,%eax
		mov    EXPORT_SYMBOL(purple_draw_index),%bx
		add    %eax,%ecx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    0x1c(%esp),%ebx
		mov    %cx,(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+44,%cx # lbDisplay.GraphicsWindowY
		add    %ecx,%ebx
		mov    %bx,0x2(%edx,%eax,2)
		mov    0x20(%esp),%ebx
		mov    %ebx,0x4(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+113,%bl # lbDisplay.DrawColour
		mov    %bl,0x8(%edx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+96,%bx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(purple_draw_index),%cx
		mov    %bx,0x18(%edx,%eax,2)
		xor    %ebx,%ebx
		mov    %cx,%bx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		movswl %di,%edi
		movb   $0x5,0x17(%edx,%eax,2)
		xor    %eax,%eax
		inc    %ecx
		mov    %ax,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		xor    %eax,%eax
		mov    %cx,EXPORT_SYMBOL(purple_draw_index)
		mov    0x29(%esi),%al
		xor    %edx,%edx
		push   %eax
		xor    %eax,%eax
		mov    0x2(%esi),%dx
		mov    (%esi),%ax
		mov    %edx,%ecx
		lea    (%eax,%edi,1),%ebx
		call   ac_draw_line_purple_list
		xor    %eax,%eax
		xor    %edx,%edx
		mov    0x29(%esi),%al
		mov    0x2(%esi),%dx
		push   %eax
		add    0x1c(%esp),%edx
		xor    %eax,%eax
		mov    (%esi),%ax
		mov    %edx,%ecx
		lea    (%eax,%edi,1),%ebx
		call   ac_draw_line_purple_list
		mov    0x26(%esi),%al
		add    %al,0x27(%esi)
		mov    $0x2,%al
		add    $0x54,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_copy_box_purple_list)	/* 0x0B7548 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    %edx,%esi
		mov    EXPORT_SYMBOL(lbDisplay)+40,%dx # lbDisplay.GraphicsWindowX
		add    %eax,%edx
		mov    %edx,(%esp)
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(purple_draw_index),%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		mov    purple_draw_list,%edi
		add    %edx,%eax
		mov    (%esp),%edx
		mov    %dx,(%edi,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+44,%dx # lbDisplay.GraphicsWindowY
		movb   $0x0,0x8(%edi,%eax,2)
		add    %edx,%esi
		mov    EXPORT_SYMBOL(lbDisplay)+96,%dx # lbDisplay__DrawFlags
		mov    %si,0x2(%edi,%eax,2)
		mov    EXPORT_SYMBOL(purple_draw_index),%si
		mov    %dx,0x18(%edi,%eax,2)
		xor    %edx,%edx
		mov    %bx,0x4(%edi,%eax,2)
		mov    %si,%dx
		mov    %cx,0x6(%edi,%eax,2)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		inc    %esi
		add    %edx,%eax
		mov    %si,EXPORT_SYMBOL(purple_draw_index)
		movb   $0x4,0x17(%edi,%eax,2)
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
/* void draw_box_purple_list(long x, long y, unsigned long width, unsigned long height, unsigned char colour)
 */
GLOBAL_FUNC(ASM_draw_box_purple_list) /* 0xb75d8 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    %edx,%edi
		mov    %ecx,%esi
		mov    EXPORT_SYMBOL(lbDisplay)+40,%dx # lbDisplay.GraphicsWindowX
		add    %eax,%edx
		mov    %edx,(%esp)
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(purple_draw_index),%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		mov    purple_draw_list,%ecx
		add    %edx,%eax
		mov    (%esp),%edx
		mov    %dx,(%ecx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+44,%dx # lbDisplay.GraphicsWindowY
		mov    %bx,0x4(%ecx,%eax,2)
		add    %edx,%edi
		mov    0x10(%esp),%dl
		mov    %dl,0x8(%ecx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+96,%dx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(purple_draw_index),%bx
		mov    %dx,0x18(%ecx,%eax,2)
		xor    %edx,%edx
		mov    %si,0x6(%ecx,%eax,2)
		mov    %bx,%dx
		mov    %di,0x2(%ecx,%eax,2)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		inc    %ebx
		add    %edx,%eax
		mov    %bx,EXPORT_SYMBOL(purple_draw_index)
		movb   $0x1,0x17(%ecx,%eax,2)
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_text_purple_list2)	/* 0x0B766C */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    %eax,%esi
		mov    %edx,%edi
		mov    %ecx,(%esp)
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(purple_draw_index),%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		mov    purple_draw_list,%ecx
		add    %edx,%eax
		mov    EXPORT_SYMBOL(text_window_x1),%dx
		mov    %si,0x8(%ecx,%eax,2)
		mov    %dx,(%ecx,%eax,2)
		mov    EXPORT_SYMBOL(text_window_y1),%dx
		mov    EXPORT_SYMBOL(text_window_x1),%si
		mov    %dx,0x2(%ecx,%eax,2)
		mov    EXPORT_SYMBOL(text_window_x2),%dx
		sub    %esi,%edx
		mov    %di,0xa(%ecx,%eax,2)
		inc    %edx
		mov    EXPORT_SYMBOL(text_window_y1),%di
		mov    %dx,0x4(%ecx,%eax,2)
		mov    EXPORT_SYMBOL(text_window_y2),%dx
		sub    %edi,%edx
		mov    %ebx,0xc(%ecx,%eax,2)
		inc    %edx
		mov    %dx,0x6(%ecx,%eax,2)
		mov    (%esp),%edx
		mov    %dx,0x14(%ecx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+113,%dl # lbDisplay.DrawColour
		mov    %dl,0x16(%ecx,%eax,2)
		mov    EXPORT_SYMBOL(lbFontPtr),%edx
		mov    %edx,0x10(%ecx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+96,%dx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(purple_draw_index),%bx
		mov    %dx,0x18(%ecx,%eax,2)
		xor    %edx,%edx
		mov    %bx,%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		inc    %ebx
		add    %edx,%eax
		mov    %bx,EXPORT_SYMBOL(purple_draw_index)
		movb   $0x2,0x17(%ecx,%eax,2)
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_sprite_purple_list)	/* 0x0B773C */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		mov    %edx,%ecx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay)+40,%di # lbDisplay.GraphicsWindowX
		mov    EXPORT_SYMBOL(purple_draw_index),%dx
		add    %eax,%edi
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		mov    purple_draw_list,%esi
		add    %edx,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+44,%dx # lbDisplay.GraphicsWindowY
		mov    %ebx,0x4(%esi,%eax,2)
		add    %edx,%ecx
		mov    EXPORT_SYMBOL(lbDisplay)+113,%dl # lbDisplay.DrawColour
		mov    %dl,0x8(%esi,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+96,%dx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(purple_draw_index),%bx
		mov    %dx,0x18(%esi,%eax,2)
		xor    %edx,%edx
		mov    %di,(%esi,%eax,2)
		mov    %bx,%dx
		mov    %cx,0x2(%esi,%eax,2)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		inc    %ebx
		add    %edx,%eax
		mov    %bx,EXPORT_SYMBOL(purple_draw_index)
		movb   $0x5,0x17(%esi,%eax,2)
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_trig_purple_list)	/* 0x0B77C0 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    %edx,%esi
		mov    EXPORT_SYMBOL(lbDisplay)+40,%dx # lbDisplay.GraphicsWindowX
		add    %eax,%edx
		mov    %edx,(%esp)
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(purple_draw_index),%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		mov    purple_draw_list,%edi
		add    %edx,%eax
		mov    (%esp),%edx
		mov    %dx,(%edi,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+44,%dx # lbDisplay.GraphicsWindowY
		add    %edx,%esi
		add    %edx,%ecx
		mov    EXPORT_SYMBOL(vec_colour),%dl
		mov    %si,0x2(%edi,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+40,%si # lbDisplay.GraphicsWindowX
		mov    %dl,0x8(%edi,%eax,2)
		add    %esi,%ebx
		mov    EXPORT_SYMBOL(lbDisplay)+96,%dx # lbDisplay__DrawFlags
		mov    %bx,0x4(%edi,%eax,2)
		mov    %dx,0x18(%edi,%eax,2)
		mov    EXPORT_SYMBOL(purple_draw_index),%bx
		xor    %edx,%edx
		mov    %bx,%dx
		mov    %cx,0x6(%edi,%eax,2)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		inc    %ebx
		add    %edx,%eax
		mov    %bx,EXPORT_SYMBOL(purple_draw_index)
		movb   $0x6,0x17(%edi,%eax,2)
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_triangle_purple_list)	/* 0x0B7860 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    %edx,%esi
		mov    EXPORT_SYMBOL(lbDisplay)+40,%dx # lbDisplay.GraphicsWindowX
		add    %eax,%edx
		mov    %edx,(%esp)
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(purple_draw_index),%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		mov    purple_draw_list,%edi
		add    %edx,%eax
		mov    (%esp),%edx
		mov    %dx,(%edi,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+44,%dx # lbDisplay.GraphicsWindowY
		add    %edx,%esi
		add    %edx,%ecx
		mov    %si,0x2(%edi,%eax,2)
		mov    0x10(%esp),%edx
		mov    %cx,0x6(%edi,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+40,%si # lbDisplay.GraphicsWindowX
		mov    EXPORT_SYMBOL(lbDisplay)+44,%cx # lbDisplay.GraphicsWindowY
		add    %esi,%edx
		add    %esi,%ebx
		mov    %dx,0x8(%edi,%eax,2)
		mov    0x14(%esp),%edx
		mov    %bx,0x4(%edi,%eax,2)
		add    %ecx,%edx
		mov    %dx,0xa(%edi,%eax,2)
		mov    0x18(%esp),%dl
		mov    %dl,0xc(%edi,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+96,%dx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(purple_draw_index),%bx
		mov    %dx,0x18(%edi,%eax,2)
		xor    %edx,%edx
		mov    %bx,%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		inc    %ebx
		add    %edx,%eax
		mov    %bx,EXPORT_SYMBOL(purple_draw_index)
		movb   $0xb,0x17(%edi,%eax,2)
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret    $0xc


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_line_purple_list)	/* 0x0B791C */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    %eax,%esi
		mov    %edx,%edi
		mov    EXPORT_SYMBOL(lbDisplay)+40,%ax # lbDisplay.GraphicsWindowX
		xor    %edx,%edx
		add    %esi,%eax
		mov    EXPORT_SYMBOL(purple_draw_index),%dx
		mov    %eax,(%esp)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		mov    purple_draw_list,%ebp
		add    %edx,%eax
		mov    (%esp),%edx
		mov    %dx,0x0(%ebp,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+44,%dx # lbDisplay.GraphicsWindowY
		add    %edi,%edx
		mov    %dx,0x2(%ebp,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+40,%dx # lbDisplay.GraphicsWindowX
		add    %ebx,%edx
		mov    %dx,0x4(%ebp,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+44,%dx # lbDisplay.GraphicsWindowY
		add    %ecx,%edx
		mov    %dx,0x6(%ebp,%eax,2)
		mov    0x14(%esp),%dl
		mov    %dl,0x8(%ebp,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+96,%dx # lbDisplay__DrawFlags
		mov    %dx,0x18(%ebp,%eax,2)
		cmp    %ebx,%esi
		je     jump_b799c
		cmp    %ecx,%edi
		jne    jump_b79cb
	jump_b799c:
		mov    EXPORT_SYMBOL(purple_draw_index),%bx
		xor    %edx,%edx
		mov    %bx,%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		inc    %ebx
		add    %edx,%eax
		mov    purple_draw_list,%edx
		mov    %bx,EXPORT_SYMBOL(purple_draw_index)
		movb   $0xa,0x17(%edx,%eax,2)
		jmp    jump_b79f2
	jump_b79cb:
		mov    EXPORT_SYMBOL(purple_draw_index),%bx
		xor    %edx,%edx
		mov    %bx,%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		inc    %ebx
		add    %edx,%eax
		mov    %bx,EXPORT_SYMBOL(purple_draw_index)
		movb   $0x9,0x17(%ebp,%eax,2)
	jump_b79f2:
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_flic_purple_list)	/* 0x0B79FC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		mov    %eax,%ecx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(purple_draw_index),%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		mov    purple_draw_list,%ebx
		add    %edx,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+113,%dl # lbDisplay.DrawColour
		mov    %ecx,(%ebx,%eax,2)
		mov    %dl,0x8(%ebx,%eax,2)
		mov    EXPORT_SYMBOL(lbDisplay)+96,%dx # lbDisplay__DrawFlags
		mov    EXPORT_SYMBOL(purple_draw_index),%cx
		mov    %dx,0x18(%ebx,%eax,2)
		xor    %edx,%edx
		mov    %cx,%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		inc    %ecx
		add    %edx,%eax
		mov    %cx,EXPORT_SYMBOL(purple_draw_index)
		movb   $0x7,0x17(%ebx,%eax,2)
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_hotspot_purple_list)	/* 0x0B7A64 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		mov    %edx,%ebx
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay)+40,%si # lbDisplay.GraphicsWindowX
		mov    EXPORT_SYMBOL(purple_draw_index),%dx
		add    %eax,%esi
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+44,%dx # lbDisplay.GraphicsWindowY
		mov    purple_draw_list,%ecx
		add    %edx,%ebx
		xor    %edx,%edx
		mov    %bx,0x2(%ecx,%eax,2)
		mov    EXPORT_SYMBOL(purple_draw_index),%bx
		mov    %bx,%dx
		mov    %si,(%ecx,%eax,2)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		inc    %ebx
		add    %edx,%eax
		mov    %bx,EXPORT_SYMBOL(purple_draw_index)
		movb   $0xc,0x17(%ecx,%eax,2)
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
find_next_ship_tnode:	/* 0x0BB474 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    %eax,%esi
		mov    %dl,(%esp)
		xor    %edx,%edx
	jump_bb482:
		mov    $0x7,%ecx
		mov    rand_d,%eax
		mov    rand_d,%ebx
		ror    %cl,%eax
		movswl %si,%ecx
		imul   $0x24,%ecx,%ecx
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edi
		add    $0x16365267,%eax
		and    $0x3,%ebx
		mov    %eax,rand_d
		lea    (%edi,%ecx,1),%eax
		lea    0x0(,%ebx,2),%ecx
		add    %eax,%ecx
		mov    0x6(%ecx),%di
		test   %di,%di
		je     jump_bb4db
		mov    0xe(%ebx,%eax,1),%al
		and    $0xc0,%al
		xor    %ebx,%ebx
		mov    %al,%bl
		xor    %eax,%eax
		mov    (%esp),%al
		cmp    %eax,%ebx
		jne    jump_bb4db
		mov    %edi,%eax
		neg    %eax
		jmp    jump_bb529
	jump_bb4db:
		inc    %edx
		cmp    $0xc,%edx
		jl     jump_bb482
		xor    %eax,%eax
		xor    %edx,%edx
	jump_bb4e5:
		movswl %si,%ebx
		imul   $0x24,%ebx,%ecx
		mov    EXPORT_SYMBOL(game_traffic_nodes),%ebx
		add    %ecx,%ebx
		lea    (%ebx,%edx,1),%ecx
		cmpw   $0x0,0x6(%ecx)
		je     jump_bb51e
		mov    0xe(%ebx,%eax,1),%bl
		and    $0xc0,%bl
		movzbl %bl,%edi
		xor    %ebx,%ebx
		mov    (%esp),%bl
		cmp    %ebx,%edi
		jne    jump_bb51e
		mov    0x6(%ecx),%ax
		neg    %eax
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_bb51e:
		inc    %eax
		add    $0x2,%edx
		cmp    $0x4,%eax
		jl     jump_bb4e5
		xor    %eax,%eax
	jump_bb529:
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_ship)	/* 0x0BB534 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x18,%esp
		mov    %eax,%esi
		mov    0x5e(%eax),%edx
		mov    0x18(%eax),%ebx
		sar    $0x10,%edx
		mov    0x20(%eax),%edi
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edx
		shl    $0x2,%eax
		add    %edx,%eax
		sar    $0x8,%ebx
		movswl (%eax),%edx
		mov    0x2(%eax),%eax
		sar    $0x8,%edi
		sar    $0x10,%eax
		sub    %ebx,%edx
		sub    %edi,%eax
		mov    %edx,0xc(%esp)
		mov    %eax,0x10(%esp)
		mov    %eax,%edx
		mov    0xc(%esp),%eax
		call   ac_arctan
		mov    0x64(%esi),%ebx
		and    $0xffff,%eax
		sar    $0x10,%ebx
		sub    %ebx,%eax
		mov    %eax,%ebx
		cmp    $0x400,%eax
		jle    jump_bb5a1
		lea    -0x7ff(%eax),%ebx
	jump_bb5a1:
		cmp    $0xfffffc00,%ebx
		jge    jump_bb5af
		add    $0x7ff,%ebx
	jump_bb5af:
		cmp    $0xa0,%ebx
		jle    jump_bb5bc
		mov    $0xa0,%ebx
	jump_bb5bc:
		cmp    $0xffffff60,%ebx
		jge    jump_bb5c9
		mov    $0xffffff60,%ebx
	jump_bb5c9:
		mov    %ebx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0x28,%eax
		jle    jump_bb5d8
		sar    $0x2,%ebx
	jump_bb5d8:
		mov    0x60(%esi),%eax
		sar    $0x10,%eax
		cmp    %ebx,%eax
		jle    jump_bb5e6
		decw   0x62(%esi)
	jump_bb5e6:
		mov    0x60(%esi),%eax
		sar    $0x10,%eax
		cmp    %ebx,%eax
		jge    jump_bb5f4
		incw   0x62(%esi)
	jump_bb5f4:
		mov    0x60(%esi),%eax
		sar    $0x10,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    $0x12c,%edx
		shl    $0x2,%eax
		sub    %eax,%edx
		mov    0xc(%esp),%eax
		imul   %eax,%eax
		mov    %dx,0x5a(%esi)
		mov    0x10(%esp),%edx
		imul   %edx,%edx
		add    %eax,%edx
		cmp    $0x100000,%edx
		jge    jump_bb767
		mov    0x5e(%esi),%ebx
		sar    $0x10,%ebx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edi
		shl    $0x2,%eax
		add    %edi,%eax
		mov    0x12(%eax),%cl
		test   $0x80,%cl
		je     jump_bba28
		cmp    $0x20000,%edx
		jl     jump_bb66e
		jmp    jump_bb767
	jump_bb65c:
		inc    %eax
		add    $0x2,%edx
		cmp    $0x4,%eax
		jl     jump_bb6f2
		jmp    jump_bb750
	jump_bb66e:
		mov    %cl,%dl
		and    $0xbf,%dl
		mov    %dl,0x12(%eax)
		xor    %edx,%edx
		call   ac_LbRandomAnyShort
		mov    %ax,%dx
		mov    data_1c84f4,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    data_1c84f8(,%edx,4),%ax
		mov    %ax,0x60(%esi)
		mov    0x5e(%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,8),%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edi
		add    %edx,%eax
		movswl (%edi,%eax,4),%eax
		shl    $0x8,%eax
		mov    %eax,(%esp)
		mov    0x5e(%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    0x2(%edi,%eax,4),%eax
		sar    $0x10,%eax
		mov    0x1c(%esi),%ebx
		shl    $0x8,%eax
		mov    (%esp),%edx
		mov    %eax,0x4(%esp)
		mov    %eax,%ecx
		mov    %esi,%eax
		call   ac_move_mapwho
		mov    0x5e(%esi),%edx
		sar    $0x10,%edx
		xor    %eax,%eax
		mov    %edx,0x8(%esp)
		xor    %edx,%edx
	jump_bb6f2:
		imul   $0x24,0x8(%esp),%ebx
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edi
		add    %edi,%ebx
		lea    (%ebx,%edx,1),%ebp
		cmpw   $0x0,0x6(%ebp)
		je     jump_bb65c
		testb  $0xc0,0xe(%ebx,%eax,1)
		jne    jump_bb65c
		mov    0x4(%ebp),%edx
		sar    $0x10,%edx
		neg    %edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %eax,%edi
		movswl (%edi),%eax
		mov    (%esp),%ebp
		shl    $0x8,%eax
		sub    %ebp,%eax
		mov    %eax,0xc(%esp)
		mov    0x2(%edi),%eax
		sar    $0x10,%eax
		mov    0x4(%esp),%edx
		shl    $0x8,%eax
		sub    %edx,%eax
		mov    %eax,0x10(%esp)
	jump_bb750:
		mov    0x10(%esp),%edx
		mov    0xc(%esp),%eax
		movw   $0x0,0x62(%esi)
		call   ac_arctan
		mov    %ax,0x66(%esi)
	jump_bb767:
		mov    0x5e(%esi),%edx
		sar    $0x10,%edx
		xor    %eax,%eax
		mov    %edx,0x14(%esp)
		xor    %edx,%edx
	jump_bb775:
		imul   $0x24,0x14(%esp),%edi
		mov    EXPORT_SYMBOL(game_traffic_nodes),%ebx
		add    %ebx,%edi
		testb  $0x40,0xe(%edi,%eax,1)
		je     jump_bba47
		mov    0x4(%edx,%edi,1),%edi
		sar    $0x10,%edi
		neg    %edi
		imul   $0x24,%edi,%edi
		testb  $0x40,0x12(%edi,%ebx,1)
		je     jump_bba47
		mov    0x60(%esi),%eax
		sar    $0x10,%eax
		movw   $0x0,0x5a(%esi)
		test   %eax,%eax
		jle    jump_bb7b9
		subw   $0x4,0x62(%esi)
	jump_bb7b9:
		mov    0x60(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_bb7c8
		addw   $0x4,0x62(%esi)
	jump_bb7c8:
		cmpw   $0x0,0x72(%esi)
		je     jump_bb7f7
		mov    0x60(%esi),%eax
		sar    $0x10,%eax
		movw   $0x0,0x5a(%esi)
		test   %eax,%eax
		jle    jump_bb7e4
		subw   $0x4,0x62(%esi)
	jump_bb7e4:
		mov    0x60(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_bb7f3
		addw   $0x4,0x62(%esi)
	jump_bb7f3:
		decw   0x72(%esi)
	jump_bb7f7:
		mov    0x5e(%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edx
		testb  $0x10,0x12(%edx,%eax,4)
		je     jump_bb859
		cmpw   $0x0,0x72(%esi)
		je     jump_bb859
		mov    0x60(%esi),%eax
		sar    $0x10,%eax
		movw   $0x0,0x5a(%esi)
		test   %eax,%eax
		jle    jump_bb82f
		subw   $0x4,0x62(%esi)
	jump_bb82f:
		mov    0x60(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_bb83e
		addw   $0x4,0x62(%esi)
	jump_bb83e:
		decw   0x72(%esi)
		mov    0x70(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_bb859
		cmpw   $0x0,0x5e(%esi)
		jne    jump_bb859
		movw   $0x96,0x72(%esi)
	jump_bb859:
		mov    0x38(%esi),%ax
		cmp    0x5a(%esi),%ax
		jge    jump_bb86a
		mov    %eax,%ebx
		inc    %ebx
		mov    %bx,0x38(%esi)
	jump_bb86a:
		mov    0x38(%esi),%ax
		cmp    0x5a(%esi),%ax
		jle    jump_bb87d
		mov    %eax,%edi
		sub    $0xa,%edi
		mov    %di,0x38(%esi)
	jump_bb87d:
		mov    0x60(%esi),%edx
		mov    0x64(%esi),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		sar    $0x4,%edx
		add    %edx,%eax
		mov    %ax,0x66(%esi)
		mov    0x67(%esi),%al
		mov    0x52(%esi),%edx
		and    $0x7,%al
		sar    $0x10,%edx
		mov    %al,0x67(%esi)
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(local_mats),%edi
		shl    $0x2,%eax
		add    %eax,%edi
		mov    0x66(%esi),%ax
		xor    %ebx,%ebx
		neg    %eax
		mov    %edi,%ecx
		movswl %ax,%edx
		xor    %eax,%eax
		call   rotate_obj
		mov    0x8(%edi),%edx
		mov    0x36(%esi),%eax
		neg    %edx
		sar    $0x10,%eax
		imul   %edx,%eax
		sar    $0xa,%eax
		mov    %eax,0x2c(%esi)
		mov    0x14(%edi),%edx
		mov    0x36(%esi),%eax
		neg    %edx
		sar    $0x10,%eax
		imul   %edx,%eax
		sar    $0xa,%eax
		mov    %eax,0x30(%esi)
		mov    0x36(%esi),%edx
		mov    0x20(%edi),%eax
		sar    $0x10,%edx
		neg    %eax
		imul   %edx,%eax
		sar    $0xa,%eax
		mov    %eax,0x34(%esi)
		mov    0x2c(%esi),%ecx
		mov    0x18(%esi),%eax
		add    %ecx,%eax
		mov    %eax,(%esp)
		mov    (%esp),%edx
		mov    0x1c(%esi),%ebx
		mov    0x20(%esi),%eax
		mov    0x34(%esi),%ebp
		mov    0x30(%esi),%edi
		add    %ebp,%eax
		add    %edi,%ebx
		mov    %eax,0x4(%esp)
		mov    %eax,%ecx
		mov    %esi,%eax
		call   ac_move_mapwho
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_bb938:
		mov    %ebx,%eax
		xor    %edx,%edx
		call   find_next_ship_tnode
		movswl %ax,%edx
		mov    %eax,%ebx
		test   %edx,%edx
		jne    jump_bb955
		movw   $0x0,0x5a(%esi)
		jmp    jump_bb767
	jump_bb955:
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edx
		testb  $0x40,0x12(%edx,%eax,4)
		jne    jump_bb9be
		mov    0x5e(%esi),%edi
		sar    $0x10,%edi
		lea    0x0(,%edi,8),%eax
		add    %edi,%eax
		andb   $0xbf,0x12(%edx,%eax,4)
		mov    %bx,0x60(%esi)
		mov    0x5e(%esi),%ebx
		sar    $0x10,%ebx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		orb    $0x40,0x12(%edx,%eax,4)
		mov    0x5e(%esi),%ebx
		sar    $0x10,%ebx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		testw  $0x810,0x12(%edx,%eax,4)
		je     jump_bb767
		movw   $0xc8,0x72(%esi)
		jmp    jump_bb767
	jump_bb9be:
		mov    0x60(%esi),%eax
		sar    $0x10,%eax
		movw   $0x0,0x5a(%esi)
		test   %eax,%eax
		jle    jump_bb9d3
		subw   $0x4,0x62(%esi)
	jump_bb9d3:
		mov    0x60(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_bb767
		addw   $0x4,0x62(%esi)
		jmp    jump_bb767
	jump_bb9eb:
		mov    0x14(%eax),%dx
		test   %dx,%dx
		je     jump_bb9fd
		mov    %dx,0x60(%esi)
		jmp    jump_bb767
	jump_bb9fd:
		mov    0x60(%esi),%eax
		sar    $0x10,%eax
		mov    %dx,0x5a(%esi)
		test   %eax,%eax
		jle    jump_bba10
		subw   $0x4,0x62(%esi)
	jump_bba10:
		mov    0x60(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_bb767
		addw   $0x4,0x62(%esi)
		jmp    jump_bb767
	jump_bba28:
		mov    0xa(%esi),%dx
		cmp    $0x3f,%dx
		jb     jump_bb767
		jbe    jump_bb9eb
		cmp    $0x40,%dx
		je     jump_bb938
		jmp    jump_bb767
	jump_bba47:
		inc    %eax
		add    $0x2,%edx
		cmp    $0x4,%eax
		jl     jump_bb775
		jmp    jump_bb7c8


/*----------------------------------------------------------------*/
send_ship_to:	/* 0x0BBA5C */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x5c,%esp
		mov    %eax,%edi
		mov    %dx,0x58(%esp)
		mov    %bx,0x54(%esp)
		mov    $0xfffffff,%edx
		mov    $0x1,%ebx
		mov    %edx,0x40(%esp)
		xor    %edx,%edx
		mov    $0x24,%eax
		mov    %edx,0x48(%esp)
		jmp    jump_bba8e
	jump_bba8a:
		add    $0x24,%eax
		inc    %ebx
	jump_bba8e:
		xor    %ecx,%ecx
		mov    EXPORT_SYMBOL(next_traffic_node),%cx
		cmp    %ecx,%ebx
		jge    jump_bbab1
		mov    EXPORT_SYMBOL(game_traffic_nodes),%ecx
		add    %eax,%ecx
		testb  $0x2,0x13(%ecx)
		je     jump_bba8a
		movw   $0xffff,0x14(%ecx)
		jmp    jump_bba8a
	jump_bbab1:
		mov    0x5e(%edi),%ebx
		sar    $0x10,%ebx
		lea    0x0(,%ebx,8),%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%ecx
		add    %ebx,%eax
		movw   $0x0,0x14(%ecx,%eax,4)
		mov    0x60(%edi),%di
		movswl %di,%ebx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		add    %eax,%ecx
		mov    %ecx,%eax
		mov    %ecx,%ebx
		add    $0x8,%ecx
		mov    %ecx,0x44(%esp)
		jmp    jump_bbafb
	jump_bbaef:
		mov    0x44(%esp),%ecx
		add    $0x2,%eax
		inc    %ebx
		cmp    %ecx,%eax
		je     jump_bbb45
	jump_bbafb:
		cmpw   $0x0,0x6(%eax)
		je     jump_bbaef
		testb  $0xc0,0xe(%ebx)
		jne    jump_bbaef
		mov    0x4(%eax),%ecx
		sar    $0x10,%ecx
		neg    %ecx
		imul   $0x24,%ecx,%esi
		mov    EXPORT_SYMBOL(game_traffic_nodes),%ecx
		mov    0x12(%ecx,%esi,1),%esi
		sar    $0x10,%esi
		cmp    $0xffffffff,%esi
		jne    jump_bbaef
		mov    0x6(%eax),%si
		neg    %esi
		mov    %si,(%esp,%edx,2)
		mov    0x4(%eax),%esi
		sar    $0x10,%esi
		neg    %esi
		imul   $0x24,%esi,%esi
		inc    %edx
		and    $0x1f,%edx
		mov    %di,0x14(%ecx,%esi,1)
		jmp    jump_bbaef
	jump_bbb45:
		mov    0x48(%esp),%esi
		cmp    %esi,%edx
		je     jump_bbc19
		mov    (%esp,%esi,2),%ax
		mov    %ax,0x50(%esp)
		mov    0x4e(%esp),%eax
		sar    $0x10,%eax
		imul   $0x24,%eax,%eax
		lea    0x1(%esi),%edi
		mov    EXPORT_SYMBOL(game_traffic_nodes),%esi
		mov    0x56(%esp),%ebx
		add    %eax,%esi
		sar    $0x10,%ebx
		movswl (%esi),%eax
		sub    %eax,%ebx
		mov    %ebx,%eax
		imul   %eax,%eax
		mov    0x52(%esp),%ecx
		mov    0x2(%esi),%ebx
		sar    $0x10,%ecx
		sar    $0x10,%ebx
		sub    %ebx,%ecx
		mov    %ecx,%ebx
		imul   %ecx,%ebx
		mov    %edi,%ebp
		mov    %edi,0x48(%esp)
		and    $0x1f,%ebp
		add    %ebx,%eax
		mov    0x40(%esp),%ebx
		mov    %ebp,0x48(%esp)
		cmp    %ebx,%eax
		jge    jump_bbbb7
		mov    0x50(%esp),%ebx
		mov    %eax,0x40(%esp)
		mov    %ebx,0x4c(%esp)
	jump_bbbb7:
		mov    %esi,%eax
		xor    %ebx,%ebx
		jmp    jump_bbbcb
	jump_bbbbd:
		add    $0x2,%eax
		inc    %ebx
		inc    %esi
		cmp    $0x4,%ebx
		jge    jump_bbb45
	jump_bbbcb:
		cmpw   $0x0,0x6(%eax)
		je     jump_bbbbd
		testb  $0xc0,0xe(%esi)
		jne    jump_bbbbd
		mov    0x4(%eax),%ecx
		sar    $0x10,%ecx
		neg    %ecx
		imul   $0x24,%ecx,%ebp
		mov    EXPORT_SYMBOL(game_traffic_nodes),%ecx
		mov    0x12(%ecx,%ebp,1),%edi
		sar    $0x10,%edi
		cmp    $0xffffffff,%edi
		jne    jump_bbbbd
		mov    0x6(%eax),%di
		neg    %edi
		mov    %di,(%esp,%edx,2)
		mov    0x4(%eax),%ebp
		sar    $0x10,%ebp
		neg    %ebp
		imul   $0x24,%ebp,%ebp
		inc    %edx
		mov    0x50(%esp),%edi
		and    $0x1f,%edx
		mov    %di,0x14(%ecx,%ebp,1)
		jmp    jump_bbbbd
	jump_bbc19:
		cmpl   $0x200000,0x40(%esp)
		jge    jump_bbc48
		mov    0x4c(%esp),%eax
		xor    %ebx,%ebx
	jump_bbc29:
		movswl %ax,%edx
		imul   $0x24,%edx,%edx
		mov    EXPORT_SYMBOL(game_traffic_nodes),%ecx
		add    %ecx,%edx
		mov    %eax,%ecx
		mov    0x14(%edx),%ax
		mov    %bx,0x14(%edx)
		mov    %ecx,%ebx
		test   %ax,%ax
		jne    jump_bbc29
	jump_bbc48:
		add    $0x5c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_init_mech)	/* 0x0BBC80 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		mov    EXPORT_SYMBOL(unkn_mech_arr7),%eax
		mov    %eax,%esi
		add    $0x3b0,%eax
		mov    %eax,unkn_mech_arr4
		add    $0x7a00,%eax
		mov    %eax,unkn_mech_arr5
		add    $0x6a40,%eax
		mov    %eax,unkn_mech_arr1
		add    $0x4400,%eax
		mov    %eax,unkn_mech_arr6
		add    $0x8,%eax
		mov    $0x4000,%ecx
		mov    %eax,unkn_mech_arr2
		lea    0x890(%eax),%ebx
		xor    %edx,%edx
		mov    %esi,%eax
		sub    %esi,%ebx
		mov    %esi,unkn_mech_arr3
		call   ac_memset
		mov    $aDataMech_dat,%eax
		mov    %ecx,unkn_mech_var8
		xor    %edx,%edx
		mov    %ecx,unkn_mech_var9
		mov    %edx,unkn_mech_var10
		mov    %edx,unkn_mech_var11
		mov    %edx,unkn_mech_var12
		mov    %edx,unkn_mech_var13
		mov    %edx,unkn_mech_var14
		mov    %edx,unkn_mech_var15
		mov    %edx,unkn_mech_var16
		mov    %edx,unkn_mech_var17
		mov    $aDataMech_txt,%edx
		mov    %ecx,unkn_mech_var18
		call   load_mech_dat
		mov    unkn_mech_arr3,%edi
		xor    %ebp,%ebp
		mov    %edi,%edx
		jmp    jump_bbd43
	jump_bbd38:
		add    $0x76,%ebp
		cmp    $0x3b0,%ebp
		je     jump_bbd57
	jump_bbd43:
		mov    %ebp,%esi
		xor    %eax,%eax
		lea    (%edi,%esi,1),%ebx
	jump_bbd4a:
		inc    %eax
		movb   $0x0,0x73(%ebx,%eax,1)
		cmp    $0x2,%eax
		jge    jump_bbd38
		jmp    jump_bbd4a
	jump_bbd57:
		movl   $0x0,0x6c(%edx)
		mov    0x6c(%edx),%ebx
		mov    %ebx,%eax
		shl    $0x4,%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		add    %eax,%ebx
		mov    unkn_mech_arr2,%eax
		mov    (%ebx,%eax,1),%eax
		mov    %eax,%ebx
		mov    %eax,0x64(%edx)
		shl    $0x4,%eax
		add    %eax,%ebx
		mov    unkn_mech_arr1,%eax
		mov    0x9(%ebx,%eax,1),%eax
		mov    %eax,0x5c(%edx)
		mov    %edi,unkn_mech_arr3
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_mech_unkn_func_02)	/* 0x0BBD98 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		push   %esi
		push   %edi
		mov    unkn_mech_arr3,%esi
		xor    %edx,%edx
		xor    %edi,%edi
		mov    %edx,unkn_mech_var10
		mov    %edx,unkn_mech_var11
		jmp    jump_bbdbf
	jump_bbdb4:
		add    $0x76,%edi
		cmp    $0x3b0,%edi
		je     jump_bbdd3
	jump_bbdbf:
		mov    %edi,%ebx
		xor    %eax,%eax
		lea    (%esi,%ebx,1),%edx
	jump_bbdc6:
		inc    %eax
		movb   $0x0,0x73(%edx,%eax,1)
		cmp    $0x2,%eax
		jge    jump_bbdb4
		jmp    jump_bbdc6
	jump_bbdd3:
		mov    %esi,unkn_mech_arr3
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_mech_unkn_func_03)	/* 0x0BBDE0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		sub    $0xc,%esp
		mov    0x20(%eax),%ecx
		mov    0x1c(%eax),%ebx
		mov    0x18(%eax),%edx
		sar    $0x8,%ecx
		sar    $0x5,%ebx
		sar    $0x8,%edx
		mov    0x3c(%eax),%ax
		and    $0xffff,%eax
		mov    %edx,(%esp)
		mov    %eax,%edx
		shl    $0x4,%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    (%eax,%eax,1),%edx
		add    $0x258,%ebx
		mov    unkn_mech_arr3,%eax
		mov    %ecx,0x8(%esp)
		add    %edx,%eax
		mov    %ebx,0x4(%esp)
		lea    0xc(%eax),%ebx
		mov    %esp,%edx
		mov    (%eax),%eax
		call   mech_unkn_func_11
		add    $0xc,%esp
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_mech_unkn_func_05)	/* 0x0BBE3C */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		mov    %eax,%edi
		mov    %edx,%ecx
		mov    %ebx,%esi
		mov    %ebx,%eax
		shl    $0x4,%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		mov    unkn_mech_arr2,%edx
		add    %ebx,%eax
		mov    (%edx,%eax,1),%ebx
		mov    %edi,%edx
		mov    %edx,%eax
		shl    $0x4,%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    unkn_mech_arr3,%edi
		add    %eax,%eax
		add    %eax,%edi
		mov    %ebx,%eax
		mov    %esi,0x6c(%edi,%ecx,4)
		shl    $0x4,%eax
		mov    unkn_mech_arr1,%esi
		add    %ebx,%eax
		add    %esi,%eax
		mov    0xd(%eax),%esi
		mov    %esi,0x54(%edi,%ecx,4)
		mov    0x9(%eax),%eax
		mov    %eax,0x5c(%edi,%ecx,4)
		mov    %ebx,0x64(%edi,%ecx,4)
		mov    %ebx,%eax
		movb   $0x1,0x74(%ecx,%edi,1)
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_mech_unknown1)	/* 0x0BBEA4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		mov    %eax,%ebx
		mov    0x18(%eax),%eax
		sar    $0x8,%eax
		mov    %eax,EXPORT_SYMBOL(mech_unkn_tile_x1)
		mov    0x1c(%ebx),%eax
		sar    $0x8,%eax
		mov    %eax,EXPORT_SYMBOL(mech_unkn_tile_y1)
		mov    EXPORT_SYMBOL(mech_unkn_tile_x1),%eax
		mov    %eax,EXPORT_SYMBOL(mech_unkn_tile_x2)
		mov    %eax,EXPORT_SYMBOL(mech_unkn_tile_y2)
		mov    EXPORT_SYMBOL(mech_unkn_tile_y1),%eax
		mov    0x52(%ebx),%edx
		mov    %eax,EXPORT_SYMBOL(mech_unkn_tile_x3)
		mov    EXPORT_SYMBOL(mech_unkn_tile_y2),%eax
		sar    $0x10,%edx
		mov    %eax,EXPORT_SYMBOL(mech_unkn_tile_y3)
		lea    0x0(,%edx,8),%eax
		mov    $EXPORT_SYMBOL(local_mats),%ecx
		add    %edx,%eax
		xor    %edx,%edx
		shl    $0x2,%eax
		mov    0x3c(%ebx),%dx
		add    %eax,%ecx
		mov    %edx,%eax
		shl    $0x4,%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    unkn_mech_arr3,%edx
		add    %eax,%eax
		add    %edx,%eax
		add    $0xc,%eax
		mov    %ecx,%edx
		call   mech_unkn_func_07
		xor    %eax,%eax
		mov    0x3c(%ebx),%ax
		call   mech_unkn_func_08
		cmp    $0x6,%eax
		jb     jump_bbf7f
		jbe    jump_bbf5a
		cmp    $0x8,%eax
		jb     jump_bbf83
		jbe    jump_bbf47
		cmp    $0xe,%eax
		je     jump_bbf6c
		jmp    jump_bbf83
	jump_bbf41:
		orb    $0x4,0x60(%ebx)
		jmp    jump_bbf83
	jump_bbf47:
		mov    0x60(%ebx),%dh
		or     $0x1,%dh
		mov    %dh,%cl
		mov    %dh,0x60(%ebx)
		and    $0xfb,%cl
		mov    %cl,0x60(%ebx)
		jmp    jump_bbf83
	jump_bbf5a:
		mov    0x60(%ebx),%ch
		or     $0x2,%ch
		mov    %ch,%al
		mov    %ch,0x60(%ebx)
		and    $0xfb,%al
		mov    %al,0x60(%ebx)
		jmp    jump_bbf83
	jump_bbf6c:
		mov    0x60(%ebx),%ah
		or     $0x8,%ah
		mov    %ah,%dl
		mov    %ah,0x60(%ebx)
		and    $0xfb,%dl
		mov    %dl,0x60(%ebx)
		jmp    jump_bbf83
	jump_bbf7f:
		test   %eax,%eax
		je     jump_bbf41
	jump_bbf83:
		xor    %eax,%eax
		mov    0xa(%ebx),%ax
		cmp    $0x32,%eax
		jne    jump_bbfae
		mov    0xa2(%ebx),%ax
		cmp    0x3a(%ebx),%ax
		je     jump_bbfae
		mov    %ebx,%eax
		call   ac_remove_path
		movw   $0x0,0x4c(%ebx)
		movw   $0x33,0xa(%ebx)
	jump_bbfae:
		mov    0x3a(%ebx),%ax
		mov    %ax,0xa2(%ebx)
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
init_unkn1thing:	/* 0x0BBFC0 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    %eax,%esi
		mov    %edx,(%esp)
		mov    %ebx,%ebp
		mov    %ecx,%ebx
		call   ac_get_new_thing
		mov    %eax,0x4(%esp)
		xor    %eax,%eax
		mov    0x4(%esp),%ax
		lea    0x0(,%eax,4),%ecx
		add    %eax,%ecx
		shl    $0x2,%ecx
		add    %eax,%ecx
		mov    things,%eax
		shl    $0x3,%ecx
		movl   $0x0,0x2c(%ecx,%eax,1)
		movl   $0x0,0x34(%ecx,%eax,1)
		movl   $0x0,0x30(%ecx,%eax,1)
		movw   $0x0,0x64(%ecx,%eax,1)
		movw   $0x0,0x66(%ecx,%eax,1)
		movw   $0x0,0x68(%ecx,%eax,1)
		movb   $0x23,0x9(%ecx,%eax,1)
		movw   $0x96,0x14(%ecx,%eax,1)
		movw   $0x0,(%ecx,%eax,1)
		movw   $0x0,0x38(%ecx,%eax,1)
		movw   $0x0,0x26(%ecx,%eax,1)
		movw   $0x0,0xa(%ecx,%eax,1)
		movl   $0x0,0xc(%ecx,%eax,1)
		mov    %edx,0x18(%ecx,%eax,1)
		mov    EXPORT_SYMBOL(next_object),%dx
		mov    %dx,0x52(%ecx,%eax,1)
		mov    EXPORT_SYMBOL(next_local_mat),%dx
		mov    %dx,0x54(%ecx,%eax,1)
		mov    %edx,%edi
		mov    0x52(%ecx,%eax,1),%edx
		mov    %ebx,0x20(%ecx,%eax,1)
		sar    $0x10,%edx
		mov    %ebp,0x1c(%ecx,%eax,1)
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		inc    %edi
		add    $EXPORT_SYMBOL(local_mats),%eax
		mov    %di,EXPORT_SYMBOL(next_local_mat)
		call   ac_matrix_identity_fill
		mov    things,%edx
		add    %ecx,%edx
		mov    0x52(%edx),%ecx
		sar    $0x10,%ecx
		lea    0x0(,%ecx,8),%eax
		add    %ecx,%eax
		mov    $0x9,%ecx
		lea    EXPORT_SYMBOL(local_mats)(,%eax,4),%edi
		rep movsl %ds:(%esi),%es:(%edi)
		orb    $0x4,0xf(%edx)
		mov    EXPORT_SYMBOL(game_level_unique_id),%ax
		mov    %eax,%ecx
		mov    %ax,0x4e(%edx)
		mov    0x18(%esp),%eax
		inc    %ecx
		mov    %ax,unkn2_pos_x
		mov    0x1c(%esp),%eax
		xor    %dl,%dl
		mov    %ax,unkn2_pos_y
		mov    0x20(%esp),%eax
		mov    %cx,EXPORT_SYMBOL(game_level_unique_id)
		mov    %ax,unkn2_pos_z
		mov    %ebp,%eax
		xor    %ecx,%ecx
		sar    $0x8,%eax
		mov    %dl,EXPORT_SYMBOL(byte_1C83D1)
		mov    %ax,%cx
		mov    prim_unknprop01,%ax
		mov    0x24(%esp),%edx
		neg    %eax
		sub    %edx,%eax
		sar    $0x8,%ebx
		movswl %ax,%esi
		xor    %edx,%edx
		mov    (%esp),%eax
		mov    %bx,%dx
		sar    $0x8,%eax
		and    $0xffff,%eax
		mov    %esi,%ebx
		call   ac_sub_6031C
		mov    EXPORT_SYMBOL(next_object),%ax
		dec    %eax
		and    $0xffff,%eax
		xor    %edx,%edx
		call   ac_unkn_object_shift_03
		mov    EXPORT_SYMBOL(next_object),%dx
		dec    %edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    game_objects,%edx
		shl    $0x2,%eax
		add    %edx,%eax
		mov    0x4(%esp),%edx
		mov    %dx,0xa(%eax)
		mov    %edx,%eax
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x10


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_mech_unkn_func_09)	/* 0x0BC178 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xb0,%esp
		mov    %eax,%ebx
		mov    $0xc,%ecx
		mov    %esp,%edi
		mov    $0x40,%edx
		mov    $data_1554f8,%esi
		shl    $0x2,%eax
		mov    %edx,0xa8(%esp)
		mov    %edx,0xa0(%esp)
		mov    %edx,0xa4(%esp)
		rep movsl %ds:(%esi),%es:(%edi)
		add    %ebx,%eax
		mov    $0xc,%ecx
		lea    0x30(%esp),%edi
		mov    $data_155528,%esi
		shl    $0x2,%eax
		rep movsl %ds:(%esi),%es:(%edi)
		lea    (%ebx,%eax,1),%edx
		mov    $0xc,%ecx
		lea    0x60(%esp),%edi
		mov    things,%eax
		shl    $0x3,%edx
		mov    $data_155558,%esi
		add    %edx,%eax
		rep movsl %ds:(%esi),%es:(%edi)
		mov    0x18(%eax),%edx
		mov    %edx,0x98(%esp)
		mov    0x1c(%eax),%edx
		mov    %edx,0x94(%esp)
		mov    0x20(%eax),%edx
		mov    %edx,0x9c(%esp)
		mov    0x52(%eax),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(local_mats),%edx
		shl    $0x2,%eax
		mov    unkn_mech_var10,%ebp
		add    %eax,%edx
		mov    %ebp,0x90(%esp)
		mov    %edx,0xac(%esp)
		xor    %edx,%edx
	jump_bc230:
		imul   $0x4,(%esp,%edx,1),%eax
		mov    0x30(%esp,%edx,1),%ecx
		mov    %eax,(%esp,%edx,1)
		imul   $0xfffffffc,%ecx,%eax
		mov    0x60(%esp,%edx,1),%esi
		mov    %eax,0x30(%esp,%edx,1)
		imul   $0x4,%esi,%eax
		add    $0x4,%edx
		mov    %eax,0x5c(%esp,%edx,1)
		cmp    $0x30,%edx
		jne    jump_bc230
		mov    unkn_mech_var10,%edx
		mov    %edx,%eax
		shl    $0x4,%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    unkn_mech_arr4,%ecx
		add    %eax,%eax
		mov    unkn_mech_var11,%edx
		add    %eax,%ecx
		mov    %edx,%eax
		shl    $0x4,%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    unkn_mech_arr3,%edx
		add    %eax,%eax
		add    %edx,%eax
		mov    $unkn_mech_var8,%esi
		mov    unkn_mech_var10,%edx
		lea    0xc(%eax),%edi
		mov    %ecx,(%eax)
		mov    $0x9,%ecx
		mov    %edx,0x4(%eax)
		rep movsl %ds:(%esi),%es:(%edi)
		movl   $0x0,0x3c(%eax)
		movl   $0x0,0x40(%eax)
		movl   $0x0,0x44(%eax)
		movl   $0x0,0x48(%eax)
		movl   $0x0,0x4c(%eax)
		mov    0x98(%esp),%edx
		movl   $0x0,0x50(%eax)
		mov    %edx,0x30(%eax)
		mov    0x94(%esp),%edx
		mov    %edx,0x34(%eax)
		mov    0x9c(%esp),%edx
		mov    %edx,0x38(%eax)
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		lea    (%ebx,%eax,1),%edx
		mov    things,%eax
		shl    $0x3,%edx
		mov    0x52(%edx,%eax,1),%ebx
		sar    $0x10,%ebx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		add    $EXPORT_SYMBOL(local_mats),%eax
		call   ac_matrix_identity_fill
		mov    things,%eax
		add    %edx,%eax
		movl   $0x4000000,0xc(%eax)
		mov    unkn_mech_var11,%dx
		movw   $0x4,0x60(%eax)
		mov    %dx,0x3c(%eax)
		call   ac_VNAV_unkn_func_207
		push   $0x1a
		mov    0xa8(%esp),%edi
		push   %edi
		mov    0xa8(%esp),%eax
		xor    %ecx,%ecx
		push   %eax
		mov    0xb4(%esp),%edx
		xor    %ebx,%ebx
		push   %edx
		mov    0xbc(%esp),%eax
		xor    %edx,%edx
		call   init_unkn1thing
		mov    unkn_mech_var10,%edx
		mov    %eax,%ecx
		mov    %edx,%eax
		shl    $0x4,%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    unkn_mech_arr4,%ebx
		add    %eax,%eax
		lea    (%ebx,%eax,1),%edx
		mov    %ebp,%eax
		mov    %cx,(%edx)
		mov    0x90(%esp),%ecx
		movw   $0x0,0x23(%edx)
		sub    %ecx,%eax
		movb   $0x1,0x79(%edx)
		mov    (%esp,%eax,4),%ecx
		mov    %ecx,0x61(%edx)
		mov    0x30(%esp,%eax,4),%ecx
		mov    %ecx,0x65(%edx)
		mov    0x90(%esp),%ecx
		mov    0x60(%esp,%eax,4),%eax
		inc    %ecx
		mov    %eax,0x69(%edx)
		mov    %ecx,%eax
		shl    $0x4,%eax
		sub    %ecx,%eax
		shl    $0x2,%eax
		add    %ecx,%eax
		add    %eax,%eax
		movb   $0x3,0x2(%edx)
		add    %ebx,%eax
		mov    %eax,0x3(%edx)
		mov    0x90(%esp),%ecx
		add    $0x6,%ecx
		mov    %ecx,%eax
		shl    $0x4,%eax
		sub    %ecx,%eax
		shl    $0x2,%eax
		add    %ecx,%eax
		add    %eax,%eax
		mov    0x90(%esp),%ecx
		add    %ebx,%eax
		add    $0xb,%ecx
		mov    %eax,0x7(%edx)
		mov    %ecx,%eax
		push   $0x0
		shl    $0x4,%eax
		mov    %edi,%esi
		sub    %ecx,%eax
		push   %edi
		shl    $0x2,%eax
		mov    0xa8(%esp),%edi
		add    %ecx,%eax
		push   %edi
		add    %eax,%eax
		xor    %ecx,%ecx
		add    %eax,%ebx
		mov    0xb4(%esp),%eax
		mov    %ebx,0xb(%edx)
		mov    unkn_mech_var10,%edx
		push   %eax
		xor    %ebx,%ebx
		inc    %edx
		mov    0xbc(%esp),%eax
		mov    %edx,unkn_mech_var10
		xor    %edx,%edx
		call   init_unkn1thing
		mov    unkn_mech_var10,%edx
		mov    %eax,%ebx
		mov    %edx,%eax
		shl    $0x4,%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    unkn_mech_arr4,%ecx
		add    %eax,%eax
		inc    %ebp
		lea    (%ecx,%eax,1),%edx
		mov    %ebp,%eax
		mov    %bx,(%edx)
		mov    0x90(%esp),%ebx
		movw   $0x1,0x23(%edx)
		sub    %ebx,%eax
		movb   $0x0,0x79(%edx)
		mov    (%esp,%eax,4),%ebx
		mov    %ebx,0x61(%edx)
		mov    0x30(%esp,%eax,4),%ebx
		mov    %ebx,0x65(%edx)
		mov    0x90(%esp),%ebx
		mov    0x60(%esp,%eax,4),%eax
		add    $0x2,%ebx
		mov    %eax,0x69(%edx)
		mov    %ebx,%eax
		shl    $0x4,%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		add    %eax,%eax
		mov    0x90(%esp),%ebx
		add    %ecx,%eax
		add    $0x4,%ebx
		mov    %eax,0x3(%edx)
		mov    %ebx,%eax
		shl    $0x4,%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		push   $0x24
		add    %ebx,%eax
		movb   $0x2,0x2(%edx)
		add    %eax,%eax
		xor    %ebx,%ebx
		add    %ecx,%eax
		mov    %esi,%ecx
		mov    %eax,0x7(%edx)
		push   %ecx
		mov    unkn_mech_var10,%eax
		xor    %edx,%edx
		push   %edi
		inc    %eax
		mov    0xb4(%esp),%edi
		xor    %ecx,%ecx
		push   %edi
		mov    %eax,unkn_mech_var10
		mov    0xbc(%esp),%eax
		call   init_unkn1thing
		mov    unkn_mech_var10,%edx
		mov    %eax,%ebx
		mov    %edx,%eax
		shl    $0x4,%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    unkn_mech_arr4,%ecx
		add    %eax,%eax
		inc    %ebp
		lea    (%ecx,%eax,1),%edx
		mov    %ebp,%eax
		mov    %bx,(%edx)
		mov    0x90(%esp),%ebx
		movw   $0x3,0x23(%edx)
		sub    %ebx,%eax
		movb   $0x1,0x79(%edx)
		mov    (%esp,%eax,4),%ebx
		mov    %ebx,0x61(%edx)
		mov    0x30(%esp,%eax,4),%ebx
		mov    %ebx,0x65(%edx)
		mov    0x60(%esp,%eax,4),%eax
		movb   $0x1,0x2(%edx)
		mov    %eax,0x69(%edx)
		mov    0x90(%esp),%ebx
		add    $0x3,%ebx
		mov    %ebx,%eax
		shl    $0x4,%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		push   $0x26
		add    %eax,%eax
		xor    %ebx,%ebx
		add    %ecx,%eax
		mov    %esi,%ecx
		mov    %eax,0x3(%edx)
		mov    0xa4(%esp),%esi
		push   %ecx
		mov    unkn_mech_var10,%eax
		xor    %edx,%edx
		push   %esi
		inc    %eax
		xor    %ecx,%ecx
		push   %edi
		mov    %eax,unkn_mech_var10
		mov    0xbc(%esp),%eax
		call   init_unkn1thing
		mov    unkn_mech_var10,%edx
		mov    %eax,%ebx
		mov    %edx,%eax
		shl    $0x4,%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    unkn_mech_arr4,%edx
		add    %eax,%eax
		inc    %ebp
		add    %edx,%eax
		mov    %ebp,%edx
		mov    %bx,(%eax)
		mov    0x90(%esp),%ebx
		movw   $0x5,0x23(%eax)
		sub    %ebx,%edx
		movb   $0x1,0x79(%eax)
		push   $0x25
		mov    0x4(%esp,%edx,4),%ebx
		mov    0xa8(%esp),%ecx
		mov    %ebx,0x61(%eax)
		push   %ecx
		mov    0x38(%esp,%edx,4),%ebx
		push   %esi
		mov    %ebx,0x65(%eax)
		xor    %ecx,%ecx
		mov    0x6c(%esp,%edx,4),%edx
		movb   $0x0,0x2(%eax)
		push   %edi
		mov    %edx,0x69(%eax)
		mov    unkn_mech_var10,%eax
		xor    %ebx,%ebx
		inc    %eax
		xor    %edx,%edx
		mov    %eax,unkn_mech_var10
		mov    0xbc(%esp),%eax
		call   init_unkn1thing
		mov    unkn_mech_var10,%edx
		mov    %eax,%ebx
		mov    %edx,%eax
		shl    $0x4,%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    unkn_mech_arr4,%ecx
		add    %eax,%eax
		inc    %ebp
		lea    (%ecx,%eax,1),%edx
		mov    %ebp,%eax
		mov    %bx,(%edx)
		mov    0x90(%esp),%ebx
		movw   $0x4,0x23(%edx)
		sub    %ebx,%eax
		movb   $0x1,0x79(%edx)
		mov    (%esp,%eax,4),%ebx
		mov    %ebx,0x61(%edx)
		mov    0x30(%esp,%eax,4),%ebx
		mov    %ebx,0x65(%edx)
		mov    0x90(%esp),%ebx
		mov    0x60(%esp,%eax,4),%eax
		add    $0x5,%ebx
		mov    %eax,0x69(%edx)
		mov    %ebx,%eax
		shl    $0x4,%eax
		sub    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		add    %eax,%eax
		movb   $0x1,0x2(%edx)
		add    %eax,%ecx
		push   $0x27
		mov    %ecx,0x3(%edx)
		mov    0xa8(%esp),%ecx
		mov    unkn_mech_var10,%eax
		push   %ecx
		xor    %ebx,%ebx
		inc    %eax
		push   %esi
		xor    %edx,%edx
		mov    %eax,unkn_mech_var10
		push   %edi
		mov    0xbc(%esp),%eax
		xor    %ecx,%ecx
		call   init_unkn1thing
		mov    unkn_mech_var10,%edx
		mov    %eax,%ebx
		mov    %edx,%eax
		shl    $0x4,%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %eax,%edx
		mov    unkn_mech_arr4,%eax
		add    %edx,%edx
		add    %edx,%eax
		movw   $0x6,0x23(%eax)
		movb   $0x1,0x79(%eax)
		inc    %ebp
		mov    %bx,(%eax)
		mov    0x90(%esp),%ebx
		mov    %ebp,%edx
		sub    %ebx,%edx
		push   $0x0
		mov    0x4(%esp,%edx,4),%ebx
		mov    0xa8(%esp),%ecx
		mov    %ebx,0x61(%eax)
		push   %ecx
		mov    0x38(%esp,%edx,4),%ebx
		push   %esi
		mov    %ebx,0x65(%eax)
		xor    %ecx,%ecx
		mov    0x6c(%esp,%edx,4),%edx
		movb   $0x0,0x2(%eax)
		push   %edi
		mov    %edx,0x69(%eax)
		mov    unkn_mech_var10,%eax
		xor    %ebx,%ebx
		inc    %eax
		xor    %edx,%edx
		mov    %eax,unkn_mech_var10
		mov    0xbc(%esp),%eax
		call   init_unkn1thing
		mov    unkn_mech_var10,%edx
		mov    %eax,%ecx
		mov    %edx,%eax
		shl    $0x4,%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    unkn_mech_arr4,%ebx
		add    %eax,%eax
		inc    %ebp
		lea    (%ebx,%eax,1),%edx
		mov    %ebp,%eax
		mov    %cx,(%edx)
		mov    0x90(%esp),%ecx
		movw   $0x2,0x23(%edx)
		sub    %ecx,%eax
		movb   $0x0,0x79(%edx)
		mov    (%esp,%eax,4),%ecx
		mov    %ecx,0x61(%edx)
		mov    0x30(%esp,%eax,4),%ecx
		mov    %ecx,0x65(%edx)
		mov    0x90(%esp),%ecx
		mov    0x60(%esp,%eax,4),%eax
		add    $0x7,%ecx
		mov    %eax,0x69(%edx)
		mov    %ecx,%eax
		shl    $0x4,%eax
		sub    %ecx,%eax
		shl    $0x2,%eax
		add    %ecx,%eax
		add    %eax,%eax
		mov    0x90(%esp),%ecx
		add    %ebx,%eax
		add    $0x8,%ecx
		mov    %eax,0x3(%edx)
		mov    %ecx,%eax
		shl    $0x4,%eax
		sub    %ecx,%eax
		shl    $0x2,%eax
		add    %ecx,%eax
		add    %eax,%eax
		mov    0x90(%esp),%ecx
		add    %ebx,%eax
		add    $0x9,%ecx
		mov    %eax,0x7(%edx)
		mov    %ecx,%eax
		shl    $0x4,%eax
		sub    %ecx,%eax
		shl    $0x2,%eax
		add    %ecx,%eax
		mov    0xa4(%esp),%esi
		add    %eax,%eax
		mov    0x90(%esp),%ecx
		add    %ebx,%eax
		add    $0xa,%ecx
		mov    %eax,0xb(%edx)
		mov    %ecx,%eax
		push   $0x22
		shl    $0x4,%eax
		mov    0xa4(%esp),%edi
		sub    %ecx,%eax
		push   %esi
		shl    $0x2,%eax
		push   %edi
		add    %ecx,%eax
		movb   $0x4,0x2(%edx)
		add    %eax,%eax
		xor    %ecx,%ecx
		add    %ebx,%eax
		xor    %ebx,%ebx
		mov    %eax,0xf(%edx)
		mov    0xb4(%esp),%eax
		mov    unkn_mech_var10,%edx
		push   %eax
		inc    %edx
		mov    0xbc(%esp),%eax
		mov    %edx,unkn_mech_var10
		xor    %edx,%edx
		call   init_unkn1thing
		mov    unkn_mech_var10,%edx
		mov    %eax,%ebx
		mov    %edx,%eax
		shl    $0x4,%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %eax,%edx
		mov    unkn_mech_arr4,%eax
		add    %edx,%edx
		inc    %ebp
		add    %edx,%eax
		mov    %ebp,%edx
		mov    %bx,(%eax)
		sub    0x90(%esp),%edx
		movw   $0x7,0x23(%eax)
		shl    $0x2,%edx
		movb   $0x1,0x79(%eax)
		mov    (%esp,%edx,1),%ebx
		mov    %ebx,0x61(%eax)
		push   $0x23
		mov    0x34(%esp,%edx,1),%ebx
		xor    %ecx,%ecx
		push   %esi
		mov    %ebx,0x65(%eax)
		mov    %edi,%esi
		push   %edi
		mov    0x6c(%esp,%edx,1),%edx
		xor    %ebx,%ebx
		movb   $0x0,0x2(%eax)
		mov    0xb4(%esp),%edi
		mov    %edx,0x69(%eax)
		mov    unkn_mech_var10,%eax
		push   %edi
		inc    %eax
		xor    %edx,%edx
		mov    %eax,unkn_mech_var10
		mov    0xbc(%esp),%eax
		call   init_unkn1thing
		mov    unkn_mech_var10,%edx
		mov    %eax,%ebx
		mov    %edx,%eax
		shl    $0x4,%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    unkn_mech_arr4,%edx
		add    %eax,%eax
		inc    %ebp
		add    %edx,%eax
		mov    %ebp,%edx
		mov    %bx,(%eax)
		mov    0x90(%esp),%ebx
		movw   $0x8,0x23(%eax)
		sub    %ebx,%edx
		movb   $0x1,0x79(%eax)
		push   $0x21
		mov    0x4(%esp,%edx,4),%ebx
		mov    0xa8(%esp),%ecx
		mov    %ebx,0x61(%eax)
		push   %ecx
		mov    0x38(%esp,%edx,4),%ebx
		push   %esi
		mov    %ebx,0x65(%eax)
		xor    %ecx,%ecx
		mov    0x6c(%esp,%edx,4),%edx
		movb   $0x0,0x2(%eax)
		push   %edi
		mov    %edx,0x69(%eax)
		mov    unkn_mech_var10,%eax
		xor    %ebx,%ebx
		inc    %eax
		xor    %edx,%edx
		mov    %eax,unkn_mech_var10
		mov    0xbc(%esp),%eax
		call   init_unkn1thing
		mov    unkn_mech_var10,%edx
		mov    %eax,%ebx
		mov    %edx,%eax
		shl    $0x4,%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %eax,%edx
		mov    unkn_mech_arr4,%eax
		add    %edx,%edx
		inc    %ebp
		add    %edx,%eax
		mov    %ebp,%edx
		mov    %bx,(%eax)
		mov    0x90(%esp),%ebx
		movw   $0x9,0x23(%eax)
		sub    %ebx,%edx
		movb   $0x1,0x79(%eax)
		push   $0x20
		mov    0x4(%esp,%edx,4),%ebx
		mov    0xa8(%esp),%ecx
		mov    %ebx,0x61(%eax)
		push   %ecx
		mov    0x38(%esp,%edx,4),%ebx
		push   %esi
		mov    %ebx,0x65(%eax)
		xor    %ecx,%ecx
		mov    0x6c(%esp,%edx,4),%edx
		movb   $0x0,0x2(%eax)
		push   %edi
		mov    %edx,0x69(%eax)
		mov    unkn_mech_var10,%eax
		xor    %ebx,%ebx
		inc    %eax
		xor    %edx,%edx
		mov    %eax,unkn_mech_var10
		mov    0xbc(%esp),%eax
		call   init_unkn1thing
		mov    unkn_mech_var10,%edx
		mov    %eax,%ebx
		mov    %edx,%eax
		shl    $0x4,%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    unkn_mech_arr4,%edx
		add    %eax,%eax
		add    %edx,%eax
		inc    %ebp
		mov    %bx,(%eax)
		mov    0x90(%esp),%ebx
		mov    %ebp,%edx
		movw   $0xa,0x23(%eax)
		sub    %ebx,%edx
		movb   $0x1,0x79(%eax)
		push   $0x1b
		mov    0x4(%esp,%edx,4),%ebx
		mov    0xa8(%esp),%ecx
		mov    %ebx,0x61(%eax)
		push   %ecx
		mov    0x38(%esp,%edx,4),%ebx
		push   %esi
		mov    %ebx,0x65(%eax)
		xor    %ecx,%ecx
		mov    0x6c(%esp,%edx,4),%edx
		movb   $0x0,0x2(%eax)
		push   %edi
		mov    %edx,0x69(%eax)
		mov    unkn_mech_var10,%eax
		xor    %ebx,%ebx
		inc    %eax
		xor    %edx,%edx
		mov    %eax,unkn_mech_var10
		mov    0xbc(%esp),%eax
		call   init_unkn1thing
		mov    unkn_mech_var10,%edx
		mov    %eax,%ebx
		mov    %edx,%eax
		shl    $0x4,%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    unkn_mech_arr4,%edx
		add    %eax,%eax
		inc    %ebp
		add    %edx,%eax
		mov    %ebp,%edx
		mov    %bx,(%eax)
		mov    0x90(%esp),%ebx
		movw   $0xb,0x23(%eax)
		sub    %ebx,%edx
		movb   $0x1,0x79(%eax)
		mov    (%esp,%edx,4),%ebx
		mov    %ebx,0x61(%eax)
		mov    0x30(%esp,%edx,4),%ebx
		mov    %ebx,0x65(%eax)
		mov    0x60(%esp,%edx,4),%edx
		mov    0x90(%esp),%esi
		mov    %edx,0x69(%eax)
		mov    unkn_mech_var11,%edx
		movb   $0x0,0x2(%eax)
		mov    %edx,%eax
		mov    unkn_mech_var10,%ecx
		shl    $0x4,%eax
		mov    unkn_mech_var11,%edi
		sub    %edx,%eax
		inc    %ecx
		shl    $0x2,%eax
		inc    %edi
		sub    %edx,%eax
		mov    %ecx,unkn_mech_var10
		lea    (%eax,%eax,1),%edx
		inc    %ebp
		mov    unkn_mech_arr3,%eax
		sub    %esi,%ebp
		mov    %edi,unkn_mech_var11
		mov    %ebp,0x8(%edx,%eax,1)
		add    $0xb0,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
mech_unkn_func_08:	/* 0x0BCAA0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x14,%esp
		mov    unkn_mech_arr1,%ebx
		mov    %eax,0x4(%esp)
		movl   $0x7fffffff,0x8(%esp)
		mov    %eax,%edx
		shl    $0x4,%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    $0x1,%esi
		add    %eax,%eax
		mov    $0x4,%edi
		mov    %eax,0x10(%esp)
		jmp    jump_bcaf8
	jump_bcad9:
		mov    %dl,0x74(%esi,%eax,1)
		movl   $0x0,0x54(%ecx)
		jmp    jump_bcaec
	jump_bcae6:
		lea    -0x1(%ebp),%eax
		mov    %eax,0x54(%edx)
	jump_bcaec:
		dec    %esi
		sub    $0x4,%edi
		test   %esi,%esi
		jl     jump_bcba9
	jump_bcaf8:
		mov    0x10(%esp),%ecx
		mov    unkn_mech_arr3,%edx
		add    %ecx,%edx
		cmpb   $0x0,0x74(%edx,%esi,1)
		je     jump_bcaec
		add    %edi,%edx
		mov    0x54(%edx),%ebp
		test   %ebp,%ebp
		jg     jump_bcae6
		mov    $0x1,%eax
		mov    0x64(%edx),%edx
	jump_bcb1c:
		test   %eax,%eax
		jle    jump_bcb2a
		imul   $0x11,%edx,%edx
		mov    %ebx,%ecx
		dec    %eax
		mov    0x5(%ecx,%edx,1),%edx
	jump_bcb2a:
		test   %eax,%eax
		jge    jump_bcb38
		imul   $0x11,%edx,%ecx
		mov    %ebx,%edx
		inc    %eax
		mov    0x1(%ecx,%edx,1),%edx
	jump_bcb38:
		test   %eax,%eax
		jne    jump_bcb1c
		mov    0x10(%esp),%ecx
		mov    unkn_mech_arr3,%eax
		add    %ecx,%eax
		lea    (%eax,%edi,1),%ecx
		imul   $0x89,0x6c(%ecx),%ebp
		mov    %ebp,(%esp)
		mov    unkn_mech_arr2,%ebp
		add    (%esp),%ebp
		mov    %edx,0xc(%esp)
		cmp    0x0(%ebp),%edx
		jne    jump_bcb71
		mov    0x8(%ebp),%dl
		test   %dl,%dl
		je     jump_bcad9
	jump_bcb71:
		mov    0x10(%esp),%ebp
		mov    unkn_mech_arr3,%eax
		add    %ebp,%eax
		mov    0xc(%esp),%edx
		mov    %edx,0x64(%edi,%eax,1)
		imul   $0x11,%edx,%ecx
		mov    %ebx,%edx
		mov    0xd(%ecx,%edx,1),%ecx
		mov    0x64(%edi,%eax,1),%ebp
		mov    %ecx,0x54(%edi,%eax,1)
		imul   $0x11,%ebp,%ecx
		mov    0x9(%ecx,%edx,1),%edx
		mov    %edx,0x8(%esp)
		mov    %edx,0x5c(%edi,%eax,1)
		jmp    jump_bcaec
	jump_bcba9:
		mov    0x4(%esp),%eax
		mov    %ebx,unkn_mech_arr1
		call   mech_unkn_func_19
		mov    0x8(%esp),%eax
		mov    unkn_mech_arr1,%ebx
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
mech_unkn_func_11:	/* 0x0BCC08 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x48,%esp
		mov    %eax,%ebp
		mov    %edx,0x3c(%esp)
		mov    %ebx,0x40(%esp)
		lea    0x24(%esp),%edi
		lea    0x61(%ebp),%esi
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		lea    0x30(%esp),%edi
		lea    0x61(%ebp),%esi
		xor    %ah,%ah
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		mov    %ah,0x44(%esp)
		mov    0x30(%esp),%edx
		mov    0x6d(%ebp),%eax
		add    %eax,%edx
		mov    %edx,0x30(%esp)
		mov    0x34(%esp),%ebx
		add    0x71(%ebp),%ebx
		mov    0x38(%esp),%ecx
		mov    %ebx,0x34(%esp)
		mov    0x40(%esp),%edx
		mov    0x75(%ebp),%eax
		lea    0x30(%esp),%ebx
		add    %eax,%ecx
		mov    $0x1,%eax
		mov    %ecx,0x38(%esp)
		lea    0x24(%esp),%ecx
		call   mech_unkn_func_18
		mov    0x24(%esp),%eax
		mov    0x3c(%esp),%edx
		sar    $0xe,%eax
		mov    (%edx),%edx
		add    %eax,%edx
		mov    0x28(%esp),%eax
		mov    %edx,0x30(%esp)
		mov    0x3c(%esp),%edx
		sar    $0xe,%eax
		mov    0x4(%edx),%edx
		add    %eax,%edx
		mov    0x2c(%esp),%eax
		mov    %edx,0x34(%esp)
		mov    0x3c(%esp),%edx
		sar    $0xe,%eax
		mov    0x8(%edx),%edx
		add    %eax,%edx
		mov    0x40(%esp),%esi
		mov    %edx,0x38(%esp)
		mov    0x40(%esp),%eax
		lea    0x25(%ebp),%edi
		add    $0xc,%eax
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		mov    %eax,%esi
		lea    0x31(%ebp),%edi
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		lea    0xc(%eax),%esi
		lea    0x3d(%ebp),%edi
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		cmpl   $0x0,0x49(%ebp)
		je     jump_bcd2a
		cmpl   $0x0,0x25(%ebp)
		jne    jump_bcce3
		cmpl   $0x0,0x29(%ebp)
		jne    jump_bcce3
		cmpl   $0x0,0x2d(%ebp)
		je     jump_bcd2a
	jump_bcce3:
		cmpl   $0x0,0x31(%ebp)
		jne    jump_bccf5
		cmpl   $0x0,0x35(%ebp)
		jne    jump_bccf5
		cmpl   $0x0,0x39(%ebp)
		je     jump_bcd2a
	jump_bccf5:
		cmpl   $0x0,0x3d(%ebp)
		jne    jump_bcd07
		cmpl   $0x0,0x41(%ebp)
		jne    jump_bcd07
		cmpl   $0x0,0x45(%ebp)
		je     jump_bcd2a
	jump_bcd07:
		push   $0x0
		mov    0x49(%ebp),%ebx
		lea    0x4(%esp),%edx
		lea    0x25(%ebp),%eax
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%ebx,4),%ecx
		mov    EXPORT_SYMBOL(lbSinTable)(,%ebx,4),%ebx
		call   mech_unkn_func_12
		incb   0x44(%esp)
	jump_bcd2a:
		cmpl   $0x0,0x4d(%ebp)
		je     jump_bcd89
		cmpl   $0x0,0x25(%ebp)
		jne    jump_bcd42
		cmpl   $0x0,0x29(%ebp)
		jne    jump_bcd42
		cmpl   $0x0,0x2d(%ebp)
		je     jump_bcd89
	jump_bcd42:
		cmpl   $0x0,0x31(%ebp)
		jne    jump_bcd54
		cmpl   $0x0,0x35(%ebp)
		jne    jump_bcd54
		cmpl   $0x0,0x39(%ebp)
		je     jump_bcd89
	jump_bcd54:
		cmpl   $0x0,0x3d(%ebp)
		jne    jump_bcd66
		cmpl   $0x0,0x41(%ebp)
		jne    jump_bcd66
		cmpl   $0x0,0x45(%ebp)
		je     jump_bcd89
	jump_bcd66:
		push   $0x1
		mov    0x4d(%ebp),%ebx
		lea    0x4(%esp),%edx
		lea    0x25(%ebp),%eax
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%ebx,4),%ecx
		mov    EXPORT_SYMBOL(lbSinTable)(,%ebx,4),%ebx
		call   mech_unkn_func_12
		incb   0x44(%esp)
	jump_bcd89:
		cmpl   $0x0,0x51(%ebp)
		je     jump_bcde8
		cmpl   $0x0,0x25(%ebp)
		jne    jump_bcda1
		cmpl   $0x0,0x29(%ebp)
		jne    jump_bcda1
		cmpl   $0x0,0x2d(%ebp)
		je     jump_bcde8
	jump_bcda1:
		cmpl   $0x0,0x31(%ebp)
		jne    jump_bcdb3
		cmpl   $0x0,0x35(%ebp)
		jne    jump_bcdb3
		cmpl   $0x0,0x39(%ebp)
		je     jump_bcde8
	jump_bcdb3:
		cmpl   $0x0,0x3d(%ebp)
		jne    jump_bcdc5
		cmpl   $0x0,0x41(%ebp)
		jne    jump_bcdc5
		cmpl   $0x0,0x45(%ebp)
		je     jump_bcde8
	jump_bcdc5:
		push   $0x2
		mov    0x51(%ebp),%ebx
		lea    0x4(%esp),%edx
		lea    0x25(%ebp),%eax
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%ebx,4),%ecx
		mov    EXPORT_SYMBOL(lbSinTable)(,%ebx,4),%ebx
		call   mech_unkn_func_12
		incb   0x44(%esp)
	jump_bcde8:
		cmpb   $0x0,0x44(%esp)
		je     jump_bcdf9
		mov    %esp,%edx
		lea    0x25(%ebp),%eax
		call   mech_unkn_func_13
	jump_bcdf9:
		xor    %edx,%edx
		mov    0x0(%ebp),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		mov    0x52(%edx,%eax,8),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(local_mats),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		lea    0x25(%ebp),%eax
		call   mech_unkn_func_14
		xor    %edx,%edx
		mov    0x0(%ebp),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%ecx
		shl    $0x3,%eax
		lea    (%ecx,%eax,1),%edx
		mov    0x30(%esp),%eax
		mov    %eax,0x18(%edx)
		xor    %edx,%edx
		mov    0x0(%ebp),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		shl    $0x3,%eax
		lea    (%ecx,%eax,1),%edx
		mov    0x38(%esp),%eax
		mov    %eax,0x20(%edx)
		xor    %edx,%edx
		mov    0x0(%ebp),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		shl    $0x3,%eax
		add    %eax,%ecx
		mov    0x34(%esp),%eax
		mov    %eax,0x1c(%ecx)
		xor    %eax,%eax
		mov    0x23(%ebp),%ax
		cmp    $0x5,%eax
		jne    jump_bcec3
		mov    0x30(%esp),%eax
		mov    %eax,EXPORT_SYMBOL(mech_unkn_dw_1DC880)
		mov    0x34(%esp),%eax
		mov    %eax,EXPORT_SYMBOL(mech_unkn_dw_1DC884)
		mov    0x38(%esp),%eax
		mov    %eax,EXPORT_SYMBOL(mech_unkn_dw_1DC888)
	jump_bcec3:
		xor    %eax,%eax
		mov    0x23(%ebp),%ax
		cmp    $0x6,%eax
		jne    jump_bcee9
		mov    0x30(%esp),%eax
		mov    %eax,EXPORT_SYMBOL(mech_unkn_dw_1DC88C)
		mov    0x34(%esp),%eax
		mov    %eax,EXPORT_SYMBOL(mech_unkn_dw_1DC890)
		mov    0x38(%esp),%eax
		mov    %eax,EXPORT_SYMBOL(mech_unkn_dw_1DC894)
	jump_bcee9:
		xor    %eax,%eax
		mov    0x79(%ebp),%al
		cmp    $0x1,%eax
		jne    jump_bcf55
		xor    %edx,%edx
		mov    0x0(%ebp),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		add    %eax,%edx
		mov    0x50(%edx),%ebx
		mov    game_objects,%ecx
		sar    $0x10,%ebx
		mov    engn_zc,%esi
		lea    0x0(,%ebx,8),%eax
		mov    engn_yc,%edi
		add    %ebx,%eax
		push   %edx
		shl    $0x2,%eax
		mov    0x20(%edx),%ebx
		add    %eax,%ecx
		sub    %esi,%ebx
		mov    0x1c(%edx),%esi
		mov    0x18(%edx),%eax
		mov    engn_xc,%edx
		sub    %edi,%esi
		sub    %edx,%eax
		mov    %esi,%edx
		call   ac_draw_rot_object
	jump_bcf55:
		lea    0x25(%ebp),%edi
		xor    %ecx,%ecx
		mov    %ebp,%esi
		jmp    jump_bcf70
	jump_bcf5e:
		lea    0x30(%esp),%edx
		mov    %edi,%ebx
		mov    0x3(%esi),%eax
		call   mech_unkn_func_11
		add    $0x4,%esi
		inc    %ecx
	jump_bcf70:
		xor    %eax,%eax
		mov    0x2(%ebp),%al
		cmp    %eax,%ecx
		jb     jump_bcf5e
		xor    %eax,%eax
		add    $0x48,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
mech_unkn_func_12:	/* 0x0BD008 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x50,%esp
		mov    %eax,0x2c(%esp)
		mov    %edx,%esi
		mov    %ecx,%edi
		mov    0x60(%esp),%al
		mov    0x2c(%esp),%ecx
		mov    0x8(%ecx),%ecx
		mov    %ecx,(%edx)
		mov    0x2c(%esp),%ecx
		mov    0x14(%ecx),%ecx
		mov    %ecx,0x4(%edx)
		mov    0x2c(%esp),%ecx
		mov    0x20(%ecx),%ecx
		mov    %ecx,0x8(%edx)
		mov    0x2c(%esp),%ecx
		mov    0x4(%ecx),%ecx
		mov    %ecx,0xc(%edx)
		mov    0x2c(%esp),%ecx
		mov    0x10(%ecx),%ecx
		mov    %ecx,0x10(%edx)
		mov    0x2c(%esp),%ecx
		mov    0x1c(%ecx),%ecx
		mov    %ecx,0x14(%edx)
		mov    0x2c(%esp),%ecx
		mov    (%ecx),%ecx
		mov    %ecx,0x18(%edx)
		mov    0x2c(%esp),%ecx
		mov    0xc(%ecx),%ecx
		mov    %ecx,0x1c(%edx)
		mov    0x2c(%esp),%ecx
		mov    0x18(%ecx),%ecx
		neg    %ebx
		mov    %ecx,0x20(%edx)
		cmp    $0x10000,%ebx
		jl     jump_bd085
		mov    $0xffff,%ebx
	jump_bd085:
		cmp    $0x1,%al
		jb     jump_bdb7e
		jbe    jump_bd44b
		cmp    $0x2,%al
		je     jump_bd7e7
		jmp    jump_bdb86
	jump_bd0a0:
		mov    %esi,%ecx
		mov    %ebx,0x34(%esp)
		xor    %ebp,%ebp
		mov    %esp,%esi
	jump_bd0aa:
		mov    (%ecx),%eax
		mov    %eax,(%esi)
		mov    %edi,%ebx
		mov    0x4(%ecx),%eax
		imul   %ebx
		shrd   $0x10,%edx,%eax
		mov    0x34(%esp),%ebx
		mov    %eax,0x28(%esp)
		neg    %ebx
		mov    0x8(%ecx),%eax
		imul   %ebx
		shrd   $0x10,%edx,%eax
		mov    0x28(%esp),%ebx
		add    %eax,%ebx
		mov    %ebx,0x4(%esi)
		mov    0x34(%esp),%ebx
		mov    0x4(%ecx),%eax
		imul   %ebx
		shrd   $0x10,%edx,%eax
		mov    %eax,0x28(%esp)
		mov    %edi,%ebx
		mov    0x8(%ecx),%eax
		add    $0xc,%ecx
		imul   %ebx
		shrd   $0x10,%edx,%eax
		mov    0x28(%esp),%ebx
		add    $0xc,%esi
		add    %eax,%ebx
		inc    %ebp
		mov    %ebx,-0x4(%esi)
		cmp    $0x3,%ebp
		jb     jump_bd0aa
		mov    0x4(%esp),%ebx
		mov    $0xe,%cl
		mov    %ebx,%eax
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    $0xe,%cl
		mov    0x10(%esp),%ebx
		mov    %eax,%esi
		mov    %ebx,%eax
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    $0xe,%cl
		mov    0x1c(%esp),%ebx
		add    %eax,%esi
		mov    %ebx,%eax
		imul   %ebx
		shrd   %cl,%edx,%eax
		add    %esi,%eax
		jne    jump_bd17f
		mov    0x4(%esp),%ebx
		mov    0x10(%esp),%ecx
		mov    0x1c(%esp),%esi
		shl    $0x10,%ebx
		shl    $0x10,%ecx
		shl    $0x10,%esi
		mov    %ebx,0x4(%esp)
		mov    %ecx,0x10(%esp)
		mov    %ebx,%eax
		mov    $0xe,%cl
		mov    %esi,0x1c(%esp)
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    $0xe,%cl
		mov    0x10(%esp),%ebx
		mov    %eax,%esi
		mov    %ebx,%eax
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    $0xe,%cl
		mov    0x1c(%esp),%ebx
		add    %eax,%esi
		mov    %ebx,%eax
		imul   %ebx
		shrd   %cl,%edx,%eax
		add    %esi,%eax
	jump_bd17f:
		jne    jump_bd197
		mov    $0x4000,%edi
		mov    %eax,0x10(%esp)
		mov    %eax,0x1c(%esp)
		mov    %edi,0x4(%esp)
		jmp    jump_bd2a4
	jump_bd197:
		cmp    $0x10000,%eax
		jle    jump_bd1c1
		mov    0x4(%esp),%edx
		mov    0x10(%esp),%ebx
		mov    0x1c(%esp),%ecx
		sar    $0x2,%eax
		sar    %edx
		sar    %ebx
		sar    %ecx
		mov    %edx,0x4(%esp)
		mov    %ebx,0x10(%esp)
		mov    %ecx,0x1c(%esp)
		jmp    jump_bd197
	jump_bd1c1:
		cmp    $0x1000,%eax
		jge    jump_bd1eb
		mov    0x4(%esp),%ebx
		mov    0x10(%esp),%ecx
		mov    0x1c(%esp),%esi
		shl    $0x2,%eax
		add    %ebx,%ebx
		add    %ecx,%ecx
		add    %esi,%esi
		mov    %ebx,0x4(%esp)
		mov    %ecx,0x10(%esp)
		mov    %esi,0x1c(%esp)
		jmp    jump_bd1c1
	jump_bd1eb:
		mov    0x4(%esp),%esi
		mov    0x10(%esp),%ebp
		mov    0x1c(%esp),%edi
		mov    $0xa,%edx
		sar    %esi
		sar    %ebp
		sar    %edi
		mov    %edx,0x3c(%esp)
	jump_bd206:
		cmp    $0x4001,%eax
		jle    jump_bd22d
		mov    0x4(%esp),%ecx
		mov    0x10(%esp),%eax
		mov    0x1c(%esp),%edx
		sub    %esi,%ecx
		sub    %ebp,%eax
		sub    %edi,%edx
		mov    %ecx,0x4(%esp)
		mov    %eax,0x10(%esp)
		mov    %edx,0x1c(%esp)
		jmp    jump_bd252
	jump_bd22d:
		cmp    $0x3fff,%eax
		jge    jump_bd2a4
		mov    0x4(%esp),%eax
		mov    0x10(%esp),%edx
		mov    0x1c(%esp),%ebx
		add    %esi,%eax
		add    %ebp,%edx
		add    %edi,%ebx
		mov    %eax,0x4(%esp)
		mov    %edx,0x10(%esp)
		mov    %ebx,0x1c(%esp)
	jump_bd252:
		mov    0x4(%esp),%ebx
		mov    $0xe,%cl
		mov    %ebx,%eax
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    $0xe,%cl
		mov    0x10(%esp),%ebx
		mov    %eax,0x28(%esp)
		mov    %ebx,%eax
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    0x28(%esp),%ebx
		sar    %esi
		add    %eax,%ebx
		sar    %ebp
		mov    %ebx,0x28(%esp)
		mov    0x1c(%esp),%ebx
		mov    $0xe,%cl
		mov    %ebx,%eax
		sar    %edi
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    0x3c(%esp),%ecx
		mov    0x28(%esp),%ebx
		dec    %ecx
		add    %ebx,%eax
		mov    %ecx,0x3c(%esp)
		test   %ecx,%ecx
		jg     jump_bd206
	jump_bd2a4:
		mov    0x8(%esp),%ebx
		mov    $0xe,%cl
		mov    %ebx,%eax
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    $0xe,%cl
		mov    0x14(%esp),%ebx
		mov    %eax,%esi
		mov    %ebx,%eax
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    $0xe,%cl
		mov    0x20(%esp),%ebx
		add    %eax,%esi
		mov    %ebx,%eax
		imul   %ebx
		shrd   %cl,%edx,%eax
		add    %esi,%eax
		jne    jump_bd31d
		mov    0x8(%esp),%ebx
		mov    0x14(%esp),%ecx
		mov    0x20(%esp),%esi
		shl    $0x10,%ebx
		shl    $0x10,%ecx
		shl    $0x10,%esi
		mov    %ebx,0x8(%esp)
		mov    %ecx,0x14(%esp)
		mov    %ebx,%eax
		mov    $0xe,%cl
		mov    %esi,0x20(%esp)
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    $0xe,%cl
		mov    0x14(%esp),%ebx
		mov    %eax,%esi
		mov    %ebx,%eax
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    $0xe,%cl
		mov    0x20(%esp),%ebx
		add    %eax,%esi
		mov    %ebx,%eax
		imul   %ebx
		shrd   %cl,%edx,%eax
		add    %esi,%eax
	jump_bd31d:
		jne    jump_bd335
		mov    $0x4000,%edi
		mov    %eax,0x14(%esp)
		mov    %eax,0x20(%esp)
		mov    %edi,0x8(%esp)
		jmp    jump_bdb86
	jump_bd335:
		cmp    $0x10000,%eax
		jle    jump_bd35f
		mov    0x8(%esp),%edx
		mov    0x14(%esp),%ebx
		mov    0x20(%esp),%ecx
		sar    $0x2,%eax
		sar    %edx
		sar    %ebx
		sar    %ecx
		mov    %edx,0x8(%esp)
		mov    %ebx,0x14(%esp)
		mov    %ecx,0x20(%esp)
		jmp    jump_bd335
	jump_bd35f:
		cmp    $0x1000,%eax
		jge    jump_bd389
		mov    0x8(%esp),%ebx
		mov    0x14(%esp),%ecx
		mov    0x20(%esp),%esi
		shl    $0x2,%eax
		add    %ebx,%ebx
		add    %ecx,%ecx
		add    %esi,%esi
		mov    %ebx,0x8(%esp)
		mov    %ecx,0x14(%esp)
		mov    %esi,0x20(%esp)
		jmp    jump_bd35f
	jump_bd389:
		mov    0x8(%esp),%edi
		mov    0x14(%esp),%ebp
		mov    0x20(%esp),%esi
		mov    $0xa,%edx
		sar    %edi
		sar    %ebp
		sar    %esi
		mov    %edx,0x44(%esp)
	jump_bd3a4:
		cmp    $0x4001,%eax
		jle    jump_bd3cb
		mov    0x8(%esp),%ecx
		mov    0x14(%esp),%eax
		mov    0x20(%esp),%edx
		sub    %edi,%ecx
		sub    %ebp,%eax
		sub    %esi,%edx
		mov    %ecx,0x8(%esp)
		mov    %eax,0x14(%esp)
		mov    %edx,0x20(%esp)
		jmp    jump_bd3f4
	jump_bd3cb:
		cmp    $0x3fff,%eax
		jge    jump_bdb86
		mov    0x8(%esp),%eax
		mov    0x14(%esp),%edx
		mov    0x20(%esp),%ebx
		add    %edi,%eax
		add    %ebp,%edx
		add    %esi,%ebx
		mov    %eax,0x8(%esp)
		mov    %edx,0x14(%esp)
		mov    %ebx,0x20(%esp)
	jump_bd3f4:
		mov    0x8(%esp),%ebx
		mov    $0xe,%cl
		mov    %ebx,%eax
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    $0xe,%cl
		mov    0x14(%esp),%ebx
		mov    %eax,0x28(%esp)
		mov    %ebx,%eax
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    0x28(%esp),%ebx
		sar    %edi
		add    %eax,%ebx
		sar    %ebp
		mov    %ebx,0x28(%esp)
		mov    0x20(%esp),%ebx
		mov    $0xe,%cl
		mov    %ebx,%eax
		sar    %esi
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    0x44(%esp),%ecx
		mov    0x28(%esp),%ebx
		dec    %ecx
		add    %ebx,%eax
		mov    %ecx,0x44(%esp)
		test   %ecx,%ecx
		jg     jump_bd3a4
		jmp    jump_bdb86
	jump_bd44b:
		mov    %esi,%ecx
		mov    %ebx,0x38(%esp)
		xor    %ebp,%ebp
		mov    %esp,%esi
	jump_bd455:
		mov    %edi,%ebx
		mov    (%ecx),%eax
		imul   %ebx
		shrd   $0x10,%edx,%eax
		mov    0x38(%esp),%ebx
		mov    %eax,0x28(%esp)
		mov    0x8(%ecx),%eax
		imul   %ebx
		shrd   $0x10,%edx,%eax
		mov    0x28(%esp),%ebx
		add    %eax,%ebx
		mov    %ebx,(%esi)
		mov    0x4(%ecx),%eax
		mov    0x38(%esp),%ebx
		mov    %eax,0x4(%esi)
		neg    %ebx
		mov    (%ecx),%eax
		imul   %ebx
		shrd   $0x10,%edx,%eax
		mov    %eax,0x28(%esp)
		mov    %edi,%ebx
		mov    0x8(%ecx),%eax
		add    $0xc,%ecx
		imul   %ebx
		shrd   $0x10,%edx,%eax
		mov    0x28(%esp),%ebx
		add    $0xc,%esi
		add    %eax,%ebx
		inc    %ebp
		mov    %ebx,-0x4(%esi)
		cmp    $0x3,%ebp
		jb     jump_bd455
		mov    (%esp),%ebx
		mov    $0xe,%cl
		mov    %ebx,%eax
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    $0xe,%cl
		mov    0xc(%esp),%ebx
		mov    %eax,%esi
		mov    %ebx,%eax
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    $0xe,%cl
		mov    0x18(%esp),%ebx
		add    %eax,%esi
		mov    %ebx,%eax
		imul   %ebx
		shrd   %cl,%edx,%eax
		add    %esi,%eax
		jne    jump_bd526
		mov    (%esp),%ebx
		mov    0xc(%esp),%ecx
		mov    0x18(%esp),%esi
		shl    $0x10,%ebx
		shl    $0x10,%ecx
		shl    $0x10,%esi
		mov    %ebx,(%esp)
		mov    %ecx,0xc(%esp)
		mov    %ebx,%eax
		mov    $0xe,%cl
		mov    %esi,0x18(%esp)
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    $0xe,%cl
		mov    0xc(%esp),%ebx
		mov    %eax,%esi
		mov    %ebx,%eax
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    $0xe,%cl
		mov    0x18(%esp),%ebx
		add    %eax,%esi
		mov    %ebx,%eax
		imul   %ebx
		shrd   %cl,%edx,%eax
		add    %esi,%eax
	jump_bd526:
		jne    jump_bd53d
		mov    $0x4000,%edi
		mov    %eax,0xc(%esp)
		mov    %eax,0x18(%esp)
		mov    %edi,(%esp)
		jmp    jump_bd640
	jump_bd53d:
		cmp    $0x10000,%eax
		jle    jump_bd565
		mov    (%esp),%edx
		mov    0xc(%esp),%ebx
		mov    0x18(%esp),%ecx
		sar    $0x2,%eax
		sar    %edx
		sar    %ebx
		sar    %ecx
		mov    %edx,(%esp)
		mov    %ebx,0xc(%esp)
		mov    %ecx,0x18(%esp)
		jmp    jump_bd53d
	jump_bd565:
		cmp    $0x1000,%eax
		jge    jump_bd58d
		mov    (%esp),%ebx
		mov    0xc(%esp),%ecx
		mov    0x18(%esp),%esi
		shl    $0x2,%eax
		add    %ebx,%ebx
		add    %ecx,%ecx
		add    %esi,%esi
		mov    %ebx,(%esp)
		mov    %ecx,0xc(%esp)
		mov    %esi,0x18(%esp)
		jmp    jump_bd565
	jump_bd58d:
		mov    (%esp),%esi
		mov    0xc(%esp),%edi
		mov    0x18(%esp),%ebp
		mov    $0xa,%edx
		sar    %esi
		sar    %edi
		sar    %ebp
		mov    %edx,0x24(%esp)
	jump_bd5a7:
		cmp    $0x4001,%eax
		jle    jump_bd5cc
		mov    (%esp),%ecx
		mov    0xc(%esp),%eax
		mov    0x18(%esp),%edx
		sub    %esi,%ecx
		sub    %edi,%eax
		sub    %ebp,%edx
		mov    %ecx,(%esp)
		mov    %eax,0xc(%esp)
		mov    %edx,0x18(%esp)
		jmp    jump_bd5ef
	jump_bd5cc:
		cmp    $0x3fff,%eax
		jge    jump_bd640
		mov    (%esp),%eax
		mov    0xc(%esp),%edx
		mov    0x18(%esp),%ebx
		add    %esi,%eax
		add    %edi,%edx
		add    %ebp,%ebx
		mov    %eax,(%esp)
		mov    %edx,0xc(%esp)
		mov    %ebx,0x18(%esp)
	jump_bd5ef:
		mov    (%esp),%ebx
		mov    $0xe,%cl
		mov    %ebx,%eax
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    $0xe,%cl
		mov    0xc(%esp),%ebx
		mov    %eax,0x28(%esp)
		mov    %ebx,%eax
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    0x28(%esp),%ebx
		sar    %esi
		add    %eax,%ebx
		sar    %edi
		mov    %ebx,0x28(%esp)
		mov    0x18(%esp),%ebx
		mov    $0xe,%cl
		mov    %ebx,%eax
		sar    %ebp
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    0x24(%esp),%ecx
		mov    0x28(%esp),%ebx
		dec    %ecx
		add    %ebx,%eax
		mov    %ecx,0x24(%esp)
		test   %ecx,%ecx
		jg     jump_bd5a7
	jump_bd640:
		mov    0x8(%esp),%ebx
		mov    $0xe,%cl
		mov    %ebx,%eax
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    $0xe,%cl
		mov    0x14(%esp),%ebx
		mov    %eax,%esi
		mov    %ebx,%eax
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    $0xe,%cl
		mov    0x20(%esp),%ebx
		add    %eax,%esi
		mov    %ebx,%eax
		imul   %ebx
		shrd   %cl,%edx,%eax
		add    %esi,%eax
		jne    jump_bd6b9
		mov    0x8(%esp),%ebx
		mov    0x14(%esp),%ecx
		mov    0x20(%esp),%esi
		shl    $0x10,%ebx
		shl    $0x10,%ecx
		shl    $0x10,%esi
		mov    %ebx,0x8(%esp)
		mov    %ecx,0x14(%esp)
		mov    %ebx,%eax
		mov    $0xe,%cl
		mov    %esi,0x20(%esp)
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    $0xe,%cl
		mov    0x14(%esp),%ebx
		mov    %eax,%esi
		mov    %ebx,%eax
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    $0xe,%cl
		mov    0x20(%esp),%ebx
		add    %eax,%esi
		mov    %ebx,%eax
		imul   %ebx
		shrd   %cl,%edx,%eax
		add    %esi,%eax
	jump_bd6b9:
		jne    jump_bd6d1
		mov    $0x4000,%edi
		mov    %eax,0x14(%esp)
		mov    %eax,0x20(%esp)
		mov    %edi,0x8(%esp)
		jmp    jump_bdb86
	jump_bd6d1:
		cmp    $0x10000,%eax
		jle    jump_bd6fb
		mov    0x8(%esp),%edx
		mov    0x14(%esp),%ebx
		mov    0x20(%esp),%ecx
		sar    $0x2,%eax
		sar    %edx
		sar    %ebx
		sar    %ecx
		mov    %edx,0x8(%esp)
		mov    %ebx,0x14(%esp)
		mov    %ecx,0x20(%esp)
		jmp    jump_bd6d1
	jump_bd6fb:
		cmp    $0x1000,%eax
		jge    jump_bd725
		mov    0x8(%esp),%ebx
		mov    0x14(%esp),%ecx
		mov    0x20(%esp),%esi
		shl    $0x2,%eax
		add    %ebx,%ebx
		add    %ecx,%ecx
		add    %esi,%esi
		mov    %ebx,0x8(%esp)
		mov    %ecx,0x14(%esp)
		mov    %esi,0x20(%esp)
		jmp    jump_bd6fb
	jump_bd725:
		mov    0x8(%esp),%esi
		mov    0x14(%esp),%ebp
		mov    0x20(%esp),%edi
		mov    $0xa,%edx
		sar    %esi
		sar    %ebp
		sar    %edi
		mov    %edx,0x48(%esp)
	jump_bd740:
		cmp    $0x4001,%eax
		jle    jump_bd767
		mov    0x8(%esp),%ecx
		mov    0x14(%esp),%eax
		mov    0x20(%esp),%edx
		sub    %esi,%ecx
		sub    %ebp,%eax
		sub    %edi,%edx
		mov    %ecx,0x8(%esp)
		mov    %eax,0x14(%esp)
		mov    %edx,0x20(%esp)
		jmp    jump_bd790
	jump_bd767:
		cmp    $0x3fff,%eax
		jge    jump_bdb86
		mov    0x8(%esp),%eax
		mov    0x14(%esp),%edx
		mov    0x20(%esp),%ebx
		add    %esi,%eax
		add    %ebp,%edx
		add    %edi,%ebx
		mov    %eax,0x8(%esp)
		mov    %edx,0x14(%esp)
		mov    %ebx,0x20(%esp)
	jump_bd790:
		mov    0x8(%esp),%ebx
		mov    $0xe,%cl
		mov    %ebx,%eax
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    $0xe,%cl
		mov    0x14(%esp),%ebx
		mov    %eax,0x28(%esp)
		mov    %ebx,%eax
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    0x28(%esp),%ebx
		sar    %esi
		add    %eax,%ebx
		sar    %ebp
		mov    %ebx,0x28(%esp)
		mov    0x20(%esp),%ebx
		mov    $0xe,%cl
		mov    %ebx,%eax
		sar    %edi
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    0x48(%esp),%ecx
		mov    0x28(%esp),%ebx
		dec    %ecx
		add    %ebx,%eax
		mov    %ecx,0x48(%esp)
		test   %ecx,%ecx
		jg     jump_bd740
		jmp    jump_bdb86
	jump_bd7e7:
		mov    %esi,%ecx
		mov    %ebx,0x30(%esp)
		xor    %ebp,%ebp
		mov    %esp,%esi
	jump_bd7f1:
		mov    %edi,%ebx
		mov    (%ecx),%eax
		imul   %ebx
		shrd   $0x10,%edx,%eax
		mov    0x30(%esp),%ebx
		mov    %eax,0x28(%esp)
		neg    %ebx
		mov    0x4(%ecx),%eax
		imul   %ebx
		shrd   $0x10,%edx,%eax
		mov    0x28(%esp),%ebx
		add    %eax,%ebx
		mov    %ebx,(%esi)
		mov    0x30(%esp),%ebx
		mov    (%ecx),%eax
		imul   %ebx
		shrd   $0x10,%edx,%eax
		mov    %eax,0x28(%esp)
		mov    %edi,%ebx
		mov    0x4(%ecx),%eax
		imul   %ebx
		shrd   $0x10,%edx,%eax
		mov    0x28(%esp),%ebx
		add    %eax,%ebx
		add    $0xc,%ecx
		mov    %ebx,0x4(%esi)
		add    $0xc,%esi
		mov    -0x4(%ecx),%eax
		inc    %ebp
		mov    %eax,-0x4(%esi)
		cmp    $0x3,%ebp
		jb     jump_bd7f1
		mov    (%esp),%ebx
		mov    $0xe,%cl
		mov    %ebx,%eax
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    $0xe,%cl
		mov    0xc(%esp),%ebx
		mov    %eax,%esi
		mov    %ebx,%eax
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    $0xe,%cl
		mov    0x18(%esp),%ebx
		add    %eax,%esi
		mov    %ebx,%eax
		imul   %ebx
		shrd   %cl,%edx,%eax
		add    %esi,%eax
		jne    jump_bd8c4
		mov    (%esp),%edx
		mov    0xc(%esp),%ebx
		mov    0x18(%esp),%ecx
		shl    $0x10,%edx
		shl    $0x10,%ebx
		shl    $0x10,%ecx
		mov    %ebx,0xc(%esp)
		mov    %ecx,0x18(%esp)
		mov    %edx,%eax
		mov    $0xe,%cl
		mov    %edx,%ebx
		mov    %edx,(%esp)
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    $0xe,%cl
		mov    0xc(%esp),%ebx
		mov    %eax,%esi
		mov    %ebx,%eax
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    $0xe,%cl
		mov    0x18(%esp),%ebx
		add    %eax,%esi
		mov    %ebx,%eax
		imul   %ebx
		shrd   %cl,%edx,%eax
		add    %esi,%eax
	jump_bd8c4:
		jne    jump_bd8db
		mov    $0x4000,%esi
		mov    %eax,0xc(%esp)
		mov    %eax,0x18(%esp)
		mov    %esi,(%esp)
		jmp    jump_bd9de
	jump_bd8db:
		cmp    $0x10000,%eax
		jle    jump_bd903
		mov    (%esp),%edx
		mov    0xc(%esp),%ebx
		mov    0x18(%esp),%ecx
		sar    $0x2,%eax
		sar    %edx
		sar    %ebx
		sar    %ecx
		mov    %edx,(%esp)
		mov    %ebx,0xc(%esp)
		mov    %ecx,0x18(%esp)
		jmp    jump_bd8db
	jump_bd903:
		cmp    $0x1000,%eax
		jge    jump_bd92b
		mov    (%esp),%ebx
		mov    0xc(%esp),%ecx
		mov    0x18(%esp),%esi
		shl    $0x2,%eax
		add    %ebx,%ebx
		add    %ecx,%ecx
		add    %esi,%esi
		mov    %ebx,(%esp)
		mov    %ecx,0xc(%esp)
		mov    %esi,0x18(%esp)
		jmp    jump_bd903
	jump_bd92b:
		mov    (%esp),%ebp
		mov    0xc(%esp),%edi
		mov    0x18(%esp),%esi
		mov    $0xa,%edx
		sar    %ebp
		sar    %edi
		sar    %esi
		mov    %edx,0x4c(%esp)
	jump_bd945:
		cmp    $0x4001,%eax
		jle    jump_bd96a
		mov    (%esp),%ecx
		mov    0xc(%esp),%eax
		mov    0x18(%esp),%edx
		sub    %ebp,%ecx
		sub    %edi,%eax
		sub    %esi,%edx
		mov    %ecx,(%esp)
		mov    %eax,0xc(%esp)
		mov    %edx,0x18(%esp)
		jmp    jump_bd98d
	jump_bd96a:
		cmp    $0x3fff,%eax
		jge    jump_bd9de
		mov    (%esp),%eax
		mov    0xc(%esp),%edx
		mov    0x18(%esp),%ebx
		add    %ebp,%eax
		add    %edi,%edx
		add    %esi,%ebx
		mov    %eax,(%esp)
		mov    %edx,0xc(%esp)
		mov    %ebx,0x18(%esp)
	jump_bd98d:
		mov    (%esp),%ebx
		mov    $0xe,%cl
		mov    %ebx,%eax
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    $0xe,%cl
		mov    0xc(%esp),%ebx
		mov    %eax,0x28(%esp)
		mov    %ebx,%eax
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    0x28(%esp),%ebx
		sar    %ebp
		add    %eax,%ebx
		sar    %edi
		mov    %ebx,0x28(%esp)
		mov    0x18(%esp),%ebx
		mov    $0xe,%cl
		mov    %ebx,%eax
		sar    %esi
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    0x4c(%esp),%ecx
		mov    0x28(%esp),%ebx
		dec    %ecx
		add    %ebx,%eax
		mov    %ecx,0x4c(%esp)
		test   %ecx,%ecx
		jg     jump_bd945
	jump_bd9de:
		mov    0x4(%esp),%ebx
		mov    $0xe,%cl
		mov    %ebx,%eax
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    $0xe,%cl
		mov    0x10(%esp),%ebx
		mov    %eax,%esi
		mov    %ebx,%eax
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    $0xe,%cl
		mov    0x1c(%esp),%ebx
		add    %eax,%esi
		mov    %ebx,%eax
		imul   %ebx
		shrd   %cl,%edx,%eax
		add    %esi,%eax
		jne    jump_bda57
		mov    0x4(%esp),%ebx
		mov    0x10(%esp),%ecx
		mov    0x1c(%esp),%esi
		shl    $0x10,%ebx
		shl    $0x10,%ecx
		shl    $0x10,%esi
		mov    %ebx,0x4(%esp)
		mov    %ecx,0x10(%esp)
		mov    %ebx,%eax
		mov    $0xe,%cl
		mov    %esi,0x1c(%esp)
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    $0xe,%cl
		mov    0x10(%esp),%ebx
		mov    %eax,%esi
		mov    %ebx,%eax
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    $0xe,%cl
		mov    0x1c(%esp),%ebx
		add    %eax,%esi
		mov    %ebx,%eax
		imul   %ebx
		shrd   %cl,%edx,%eax
		add    %esi,%eax
	jump_bda57:
		jne    jump_bda6f
		mov    $0x4000,%edi
		mov    %eax,0x10(%esp)
		mov    %eax,0x1c(%esp)
		mov    %edi,0x4(%esp)
		jmp    jump_bdb86
	jump_bda6f:
		cmp    $0x10000,%eax
		jle    jump_bda99
		mov    0x4(%esp),%edx
		mov    0x10(%esp),%ebx
		mov    0x1c(%esp),%ecx
		sar    $0x2,%eax
		sar    %edx
		sar    %ebx
		sar    %ecx
		mov    %edx,0x4(%esp)
		mov    %ebx,0x10(%esp)
		mov    %ecx,0x1c(%esp)
		jmp    jump_bda6f
	jump_bda99:
		cmp    $0x1000,%eax
		jge    jump_bdac3
		mov    0x4(%esp),%ebx
		mov    0x10(%esp),%ecx
		mov    0x1c(%esp),%esi
		shl    $0x2,%eax
		add    %ebx,%ebx
		add    %ecx,%ecx
		add    %esi,%esi
		mov    %ebx,0x4(%esp)
		mov    %ecx,0x10(%esp)
		mov    %esi,0x1c(%esp)
		jmp    jump_bda99
	jump_bdac3:
		mov    0x4(%esp),%edi
		mov    0x10(%esp),%esi
		mov    0x1c(%esp),%ebp
		mov    $0xa,%edx
		sar    %edi
		sar    %esi
		sar    %ebp
		mov    %edx,0x40(%esp)
	jump_bdade:
		cmp    $0x4001,%eax
		jle    jump_bdb05
		mov    0x4(%esp),%ecx
		mov    0x10(%esp),%eax
		mov    0x1c(%esp),%edx
		sub    %edi,%ecx
		sub    %esi,%eax
		sub    %ebp,%edx
		mov    %ecx,0x4(%esp)
		mov    %eax,0x10(%esp)
		mov    %edx,0x1c(%esp)
		jmp    jump_bdb2a
	jump_bdb05:
		cmp    $0x3fff,%eax
		jge    jump_bdb86
		mov    0x4(%esp),%eax
		mov    0x10(%esp),%edx
		mov    0x1c(%esp),%ebx
		add    %edi,%eax
		add    %esi,%edx
		add    %ebp,%ebx
		mov    %eax,0x4(%esp)
		mov    %edx,0x10(%esp)
		mov    %ebx,0x1c(%esp)
	jump_bdb2a:
		mov    0x4(%esp),%ebx
		mov    $0xe,%cl
		mov    %ebx,%eax
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    $0xe,%cl
		mov    0x10(%esp),%ebx
		mov    %eax,0x28(%esp)
		mov    %ebx,%eax
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    0x28(%esp),%ebx
		sar    %edi
		add    %eax,%ebx
		sar    %esi
		mov    %ebx,0x28(%esp)
		mov    0x1c(%esp),%ebx
		mov    $0xe,%cl
		mov    %ebx,%eax
		sar    %ebp
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    0x40(%esp),%ecx
		mov    0x28(%esp),%ebx
		dec    %ecx
		add    %ebx,%eax
		mov    %ecx,0x40(%esp)
		test   %ecx,%ecx
		jg     jump_bdade
		jmp    jump_bdb86
	jump_bdb7e:
		test   %al,%al
		je     jump_bd0a0
	jump_bdb86:
		mov    0x2c(%esp),%ebx
		mov    (%esp),%eax
		mov    %eax,0x8(%ebx)
		mov    0x4(%esp),%eax
		mov    %eax,0x14(%ebx)
		mov    0x8(%esp),%eax
		mov    %eax,0x20(%ebx)
		mov    0xc(%esp),%eax
		mov    %eax,0x4(%ebx)
		mov    0x10(%esp),%eax
		mov    %eax,0x10(%ebx)
		mov    0x14(%esp),%eax
		mov    %eax,0x1c(%ebx)
		mov    0x18(%esp),%eax
		mov    %eax,(%ebx)
		mov    0x1c(%esp),%eax
		mov    %eax,0xc(%ebx)
		mov    0x20(%esp),%eax
		mov    %eax,0x18(%ebx)
		xor    %eax,%eax
		add    $0x50,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
mech_unkn_func_13:	/* 0x0BDD60 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x78,%esp
		mov    %eax,%esi
		mov    %edx,0x2c(%esp)
		mov    (%eax),%ecx
		mov    %ecx,%ebp
		imul   %ecx,%ebp
		mov    %eax,0x28(%esp)
		mov    0x4(%eax),%edi
		mov    0x8(%eax),%edx
		mov    %edi,%eax
		imul   %edi,%eax
		mov    %eax,(%esp)
		mov    %edx,%eax
		imul   %edx,%eax
		mov    %eax,0x4(%esp)
		add    %ebp,%eax
		call   ac_LbSqrL
		mov    %eax,%ebx
		mov    %eax,0xc(%esp)
		add    (%esp),%ebp
		mov    0x4(%esp),%eax
		add    %ebp,%eax
		call   ac_LbSqrL
		mov    %eax,%ebp
		test   %ebx,%ebx
		jle    jump_bddd1
		shl    $0x10,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %ecx,%edx
		shl    $0x10,%edx
		mov    %eax,0x18(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,0x1c(%esp)
		jmp    jump_bdde0
	jump_bddd1:
		xor    %edx,%edx
		mov    $0x10000,%ebx
		mov    %edx,0x18(%esp)
		mov    %ebx,0x1c(%esp)
	jump_bdde0:
		mov    %edi,%edx
		shl    $0x10,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebp
		mov    0xc(%esp),%edx
		shl    $0x10,%edx
		mov    %eax,0x10(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebp
		mov    %esi,%ecx
		mov    %eax,0x14(%esp)
		mov    0x18(%esp),%eax
		mov    0x2c(%esp),%edi
		mov    %eax,0x38(%esp)
		xor    %eax,%eax
		mov    0x1c(%esp),%ebp
		mov    %eax,0x54(%esp)
	jump_bde1a:
		mov    %ebp,%ebx
		mov    (%ecx),%eax
		imul   %ebx
		shrd   $0x10,%edx,%eax
		mov    0x38(%esp),%ebx
		mov    %eax,0x8(%esp)
		mov    0x8(%ecx),%eax
		imul   %ebx
		shrd   $0x10,%edx,%eax
		mov    0x8(%esp),%edx
		add    %eax,%edx
		mov    %edx,(%edi)
		mov    0x4(%ecx),%eax
		mov    0x38(%esp),%ebx
		mov    %eax,0x4(%edi)
		neg    %ebx
		mov    (%ecx),%eax
		imul   %ebx
		shrd   $0x10,%edx,%eax
		mov    %eax,0x8(%esp)
		mov    %ebp,%ebx
		mov    0x8(%ecx),%eax
		imul   %ebx
		shrd   $0x10,%edx,%eax
		mov    0x8(%esp),%edx
		add    %eax,%edx
		mov    %edx,0x8(%edi)
		mov    0x54(%esp),%edx
		add    $0xc,%ecx
		inc    %edx
		add    $0xc,%edi
		mov    %edx,0x54(%esp)
		cmp    $0x3,%edx
		jb     jump_bde1a
		mov    0x10(%esp),%eax
		mov    0x2c(%esp),%ecx
		neg    %eax
		mov    0x14(%esp),%ebp
		mov    %eax,0x40(%esp)
		xor    %eax,%eax
		mov    %esi,%edi
		mov    %eax,0x4c(%esp)
	jump_bde97:
		mov    %ebp,%ebx
		mov    (%ecx),%eax
		imul   %ebx
		shrd   $0x10,%edx,%eax
		mov    0x40(%esp),%ebx
		mov    %eax,0x8(%esp)
		neg    %ebx
		mov    0x4(%ecx),%eax
		imul   %ebx
		shrd   $0x10,%edx,%eax
		mov    0x8(%esp),%edx
		add    %eax,%edx
		mov    %edx,(%edi)
		mov    0x40(%esp),%ebx
		mov    (%ecx),%eax
		imul   %ebx
		shrd   $0x10,%edx,%eax
		mov    %eax,0x8(%esp)
		mov    %ebp,%ebx
		mov    0x4(%ecx),%eax
		imul   %ebx
		shrd   $0x10,%edx,%eax
		mov    0x8(%esp),%edx
		add    $0xc,%edi
		add    %eax,%edx
		add    $0xc,%ecx
		mov    %edx,-0x8(%edi)
		mov    0x4c(%esp),%edx
		mov    -0x4(%ecx),%eax
		inc    %edx
		mov    %eax,-0x4(%edi)
		mov    %edx,0x4c(%esp)
		cmp    $0x3,%edx
		jb     jump_bde97
		mov    0x28(%esp),%ecx
		mov    0x10(%ecx),%eax
		imul   %eax,%eax
		mov    %eax,(%esp)
		mov    0x14(%ecx),%eax
		imul   %eax,%eax
		mov    %eax,0x4(%esp)
		mov    (%esp),%eax
		mov    0x4(%esp),%edx
		add    $0xc,%ecx
		add    %edx,%eax
		mov    %ecx,0x28(%esp)
		call   ac_LbSqrL
		mov    %eax,%ebx
		test   %eax,%eax
		jle    jump_bdf50
		mov    0x8(%ecx),%edx
		shl    $0x10,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    0x4(%ecx),%edx
		shl    $0x10,%edx
		mov    %eax,0x24(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,0x20(%esp)
		jmp    jump_bdf5f
	jump_bdf50:
		xor    %eax,%ebx
		mov    $0x10000,%ecx
		mov    %ebx,0x24(%esp)
		mov    %ecx,0x20(%esp)
	jump_bdf5f:
		mov    0x24(%esp),%eax
		mov    0x2c(%esp),%edi
		neg    %eax
		mov    0x20(%esp),%ebp
		mov    %eax,0x34(%esp)
		xor    %eax,%eax
		mov    %esi,%ecx
		mov    %eax,0x68(%esp)
	jump_bdf79:
		mov    (%ecx),%eax
		mov    %eax,(%edi)
		mov    %ebp,%ebx
		mov    0x4(%ecx),%eax
		imul   %ebx
		shrd   $0x10,%edx,%eax
		mov    0x34(%esp),%ebx
		mov    %eax,0x8(%esp)
		neg    %ebx
		mov    0x8(%ecx),%eax
		imul   %ebx
		shrd   $0x10,%edx,%eax
		mov    0x8(%esp),%edx
		add    %eax,%edx
		mov    %edx,0x4(%edi)
		mov    0x34(%esp),%ebx
		mov    0x4(%ecx),%eax
		imul   %ebx
		shrd   $0x10,%edx,%eax
		mov    %eax,0x8(%esp)
		mov    %ebp,%ebx
		mov    0x8(%ecx),%eax
		imul   %ebx
		shrd   $0x10,%edx,%eax
		mov    0x8(%esp),%edx
		add    %eax,%edx
		mov    %edx,0x8(%edi)
		mov    0x68(%esp),%edx
		add    $0xc,%ecx
		inc    %edx
		add    $0xc,%edi
		mov    %edx,0x68(%esp)
		cmp    $0x3,%edx
		jb     jump_bdf79
		mov    0x2c(%esp),%eax
		movl   $0x4000,(%eax)
		movl   $0x0,0x4(%eax)
		movl   $0x0,0x8(%eax)
		movl   $0x0,0xc(%eax)
		movl   $0x4000,0x10(%eax)
		movl   $0x0,0x14(%eax)
		movl   $0x0,0x18(%eax)
		movl   $0x0,0x1c(%eax)
		mov    %eax,%ecx
		movl   $0x4000,0x20(%eax)
		mov    0x24(%esp),%eax
		mov    0x20(%esp),%ebp
		mov    %eax,0x30(%esp)
		xor    %eax,%eax
		mov    %esi,%edi
		mov    %eax,0x58(%esp)
	jump_be035:
		mov    (%ecx),%eax
		mov    %eax,(%edi)
		mov    %ebp,%ebx
		mov    0x4(%ecx),%eax
		imul   %ebx
		shrd   $0x10,%edx,%eax
		mov    0x30(%esp),%ebx
		mov    %eax,0x8(%esp)
		neg    %ebx
		mov    0x8(%ecx),%eax
		imul   %ebx
		shrd   $0x10,%edx,%eax
		mov    0x8(%esp),%edx
		add    %eax,%edx
		mov    %edx,0x4(%edi)
		mov    0x30(%esp),%ebx
		mov    0x4(%ecx),%eax
		imul   %ebx
		shrd   $0x10,%edx,%eax
		mov    %eax,0x8(%esp)
		mov    %ebp,%ebx
		mov    0x8(%ecx),%eax
		imul   %ebx
		shrd   $0x10,%edx,%eax
		mov    0x8(%esp),%edx
		add    %eax,%edx
		mov    %edx,0x8(%edi)
		mov    0x58(%esp),%edx
		add    $0xc,%ecx
		inc    %edx
		add    $0xc,%edi
		mov    %edx,0x58(%esp)
		cmp    $0x3,%edx
		jb     jump_be035
		mov    0x2c(%esp),%edi
		mov    0x10(%esp),%eax
		mov    0x14(%esp),%ebp
		mov    %eax,0x44(%esp)
		xor    %eax,%eax
		mov    %esi,%ecx
		mov    %eax,0x60(%esp)
	jump_be0b1:
		mov    %ebp,%ebx
		mov    (%ecx),%eax
		imul   %ebx
		shrd   $0x10,%edx,%eax
		mov    0x44(%esp),%ebx
		mov    %eax,0x8(%esp)
		neg    %ebx
		mov    0x4(%ecx),%eax
		imul   %ebx
		shrd   $0x10,%edx,%eax
		mov    0x8(%esp),%edx
		add    %eax,%edx
		mov    %edx,(%edi)
		mov    0x44(%esp),%ebx
		mov    (%ecx),%eax
		imul   %ebx
		shrd   $0x10,%edx,%eax
		mov    %eax,0x8(%esp)
		mov    %ebp,%ebx
		mov    0x4(%ecx),%eax
		imul   %ebx
		shrd   $0x10,%edx,%eax
		mov    0x8(%esp),%edx
		add    $0xc,%edi
		add    %eax,%edx
		add    $0xc,%ecx
		mov    %edx,-0x8(%edi)
		mov    0x60(%esp),%edx
		mov    -0x4(%ecx),%eax
		inc    %edx
		mov    %eax,-0x4(%edi)
		mov    %edx,0x60(%esp)
		cmp    $0x3,%edx
		jb     jump_be0b1
		mov    0x18(%esp),%eax
		mov    0x2c(%esp),%ecx
		neg    %eax
		mov    0x1c(%esp),%ebp
		mov    %eax,0x3c(%esp)
		xor    %eax,%eax
		mov    %esi,%edi
		mov    %eax,0x48(%esp)
	jump_be12e:
		mov    %ebp,%ebx
		mov    (%ecx),%eax
		imul   %ebx
		shrd   $0x10,%edx,%eax
		mov    0x3c(%esp),%ebx
		mov    %eax,0x8(%esp)
		mov    0x8(%ecx),%eax
		imul   %ebx
		shrd   $0x10,%edx,%eax
		mov    0x8(%esp),%edx
		add    %eax,%edx
		mov    %edx,(%edi)
		mov    0x4(%ecx),%eax
		mov    0x3c(%esp),%ebx
		mov    %eax,0x4(%edi)
		neg    %ebx
		mov    (%ecx),%eax
		imul   %ebx
		shrd   $0x10,%edx,%eax
		mov    %eax,0x8(%esp)
		mov    %ebp,%ebx
		mov    0x8(%ecx),%eax
		imul   %ebx
		shrd   $0x10,%edx,%eax
		mov    0x8(%esp),%edx
		add    %eax,%edx
		mov    %edx,0x8(%edi)
		mov    0x48(%esp),%edx
		add    $0xc,%ecx
		inc    %edx
		add    $0xc,%edi
		mov    %edx,0x48(%esp)
		cmp    $0x3,%edx
		jb     jump_be12e
		mov    (%esi),%eax
		mov    $0xe,%cl
		mov    %eax,%ebx
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    %eax,%edi
		mov    0x4(%esi),%eax
		mov    $0xe,%cl
		mov    %eax,%ebx
		imul   %ebx
		shrd   %cl,%edx,%eax
		add    %eax,%edi
		mov    0x8(%esi),%eax
		mov    $0xe,%cl
		mov    %eax,%ebx
		imul   %ebx
		shrd   %cl,%edx,%eax
		add    %edi,%eax
		jne    jump_be1fe
		mov    (%esi),%ecx
		shl    $0x10,%ecx
		mov    0x4(%esi),%edi
		mov    %ecx,(%esi)
		shl    $0x10,%edi
		mov    0x8(%esi),%ebp
		mov    %edi,0x4(%esi)
		shl    $0x10,%ebp
		mov    (%esi),%eax
		mov    $0xe,%cl
		mov    %eax,%ebx
		mov    %ebp,0x8(%esi)
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    %eax,%edi
		mov    0x4(%esi),%eax
		mov    $0xe,%cl
		mov    %eax,%ebx
		imul   %ebx
		shrd   %cl,%edx,%eax
		add    %eax,%edi
		mov    0x8(%esi),%eax
		mov    $0xe,%cl
		mov    %eax,%ebx
		imul   %ebx
		shrd   %cl,%edx,%eax
		add    %edi,%eax
	jump_be1fe:
		jne    jump_be211
		movl   $0x4000,(%esi)
		mov    %eax,0x4(%esi)
		mov    %eax,0x8(%esi)
		jmp    jump_be30a
	jump_be211:
		cmp    $0x10000,%eax
		jle    jump_be233
		mov    (%esi),%edx
		mov    0x4(%esi),%ebx
		mov    0x8(%esi),%ecx
		sar    %edx
		sar    %ebx
		mov    %edx,(%esi)
		sar    %ecx
		mov    %ebx,0x4(%esi)
		sar    $0x2,%eax
		mov    %ecx,0x8(%esi)
		jmp    jump_be211
	jump_be233:
		cmp    $0x1000,%eax
		jge    jump_be255
		mov    (%esi),%ebx
		mov    0x4(%esi),%ecx
		mov    0x8(%esi),%edi
		add    %ebx,%ebx
		add    %ecx,%ecx
		mov    %ebx,(%esi)
		add    %edi,%edi
		mov    %ecx,0x4(%esi)
		shl    $0x2,%eax
		mov    %edi,0x8(%esi)
		jmp    jump_be233
	jump_be255:
		mov    (%esi),%edx
		mov    0x4(%esi),%edi
		mov    0x8(%esi),%ebp
		sar    %edx
		sar    %edi
		mov    %edx,0x6c(%esp)
		mov    $0xa,%edx
		sar    %ebp
		mov    %edx,0x5c(%esp)
	jump_be270:
		cmp    $0x4001,%eax
		jle    jump_be293
		mov    0x6c(%esp),%eax
		mov    (%esi),%edx
		mov    0x4(%esi),%ebx
		mov    0x8(%esi),%ecx
		sub    %eax,%edx
		sub    %edi,%ebx
		mov    %edx,(%esi)
		sub    %ebp,%ecx
		mov    %ebx,0x4(%esi)
		mov    %ecx,0x8(%esi)
		jmp    jump_be2b4
	jump_be293:
		cmp    $0x3fff,%eax
		jge    jump_be30a
		mov    0x6c(%esp),%eax
		mov    (%esi),%edx
		mov    0x4(%esi),%ebx
		mov    0x8(%esi),%ecx
		add    %eax,%edx
		add    %edi,%ebx
		mov    %edx,(%esi)
		add    %ebp,%ecx
		mov    %ebx,0x4(%esi)
		mov    %ecx,0x8(%esi)
	jump_be2b4:
		mov    (%esi),%eax
		mov    $0xe,%cl
		mov    %eax,%ebx
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    %eax,0x8(%esp)
		mov    0x4(%esi),%eax
		mov    $0xe,%cl
		mov    %eax,%ebx
		sar    %edi
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    0x8(%esp),%edx
		sar    %ebp
		add    %eax,%edx
		mov    0x8(%esi),%eax
		mov    $0xe,%cl
		mov    %eax,%ebx
		mov    %edx,0x8(%esp)
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    0x8(%esp),%edx
		mov    0x6c(%esp),%ebx
		mov    0x5c(%esp),%ecx
		sar    %ebx
		dec    %ecx
		add    %edx,%eax
		mov    %ebx,0x6c(%esp)
		mov    %ecx,0x5c(%esp)
		test   %ecx,%ecx
		jg     jump_be270
	jump_be30a:
		mov    0xc(%esi),%eax
		mov    $0xe,%cl
		mov    %eax,%ebx
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    %eax,%edi
		mov    0x10(%esi),%eax
		mov    $0xe,%cl
		mov    %eax,%ebx
		imul   %ebx
		shrd   %cl,%edx,%eax
		add    %eax,%edi
		mov    0x14(%esi),%eax
		mov    $0xe,%cl
		mov    %eax,%ebx
		add    $0xc,%esi
		imul   %ebx
		shrd   %cl,%edx,%eax
		add    %edi,%eax
		jne    jump_be37b
		mov    (%esi),%ebx
		shl    $0x10,%ebx
		mov    0x4(%esi),%ecx
		mov    %ebx,(%esi)
		shl    $0x10,%ecx
		mov    0x8(%esi),%edi
		mov    %ecx,0x4(%esi)
		shl    $0x10,%edi
		mov    (%esi),%eax
		mov    $0xe,%cl
		mov    %eax,%ebx
		mov    %edi,0x8(%esi)
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    %eax,%edi
		mov    0x4(%esi),%eax
		mov    $0xe,%cl
		mov    %eax,%ebx
		imul   %ebx
		shrd   %cl,%edx,%eax
		add    %eax,%edi
		mov    0x8(%esi),%eax
		mov    $0xe,%cl
		mov    %eax,%ebx
		imul   %ebx
		shrd   %cl,%edx,%eax
		add    %edi,%eax
	jump_be37b:
		jne    jump_be38e
		movl   $0x4000,(%esi)
		mov    %eax,0x4(%esi)
		mov    %eax,0x8(%esi)
		jmp    jump_be487
	jump_be38e:
		cmp    $0x10000,%eax
		jle    jump_be3b0
		mov    (%esi),%ebp
		mov    0x4(%esi),%edx
		mov    0x8(%esi),%ebx
		sar    %ebp
		sar    %edx
		mov    %ebp,(%esi)
		sar    %ebx
		mov    %edx,0x4(%esi)
		sar    $0x2,%eax
		mov    %ebx,0x8(%esi)
		jmp    jump_be38e
	jump_be3b0:
		cmp    $0x1000,%eax
		jge    jump_be3d2
		mov    (%esi),%edi
		mov    0x4(%esi),%ebp
		mov    0x8(%esi),%edx
		add    %edi,%edi
		add    %ebp,%ebp
		mov    %edi,(%esi)
		add    %edx,%edx
		mov    %ebp,0x4(%esi)
		shl    $0x2,%eax
		mov    %edx,0x8(%esi)
		jmp    jump_be3b0
	jump_be3d2:
		mov    $0xa,%ecx
		mov    (%esi),%ebp
		mov    0x4(%esi),%edi
		mov    0x8(%esi),%edx
		sar    %ebp
		sar    %edi
		sar    %edx
		mov    %ecx,0x50(%esp)
		mov    %edx,0x70(%esp)
	jump_be3ed:
		cmp    $0x4001,%eax
		jle    jump_be410
		mov    0x70(%esp),%eax
		mov    (%esi),%ebx
		mov    0x4(%esi),%ecx
		mov    0x8(%esi),%edx
		sub    %ebp,%ebx
		sub    %edi,%ecx
		mov    %ebx,(%esi)
		sub    %eax,%edx
		mov    %ecx,0x4(%esi)
		mov    %edx,0x8(%esi)
		jmp    jump_be431
	jump_be410:
		cmp    $0x3fff,%eax
		jge    jump_be487
		mov    0x70(%esp),%eax
		mov    (%esi),%ebx
		mov    0x4(%esi),%ecx
		mov    0x8(%esi),%edx
		add    %ebp,%ebx
		add    %edi,%ecx
		mov    %ebx,(%esi)
		add    %eax,%edx
		mov    %ecx,0x4(%esi)
		mov    %edx,0x8(%esi)
	jump_be431:
		mov    (%esi),%eax
		mov    $0xe,%cl
		mov    %eax,%ebx
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    %eax,0x8(%esp)
		mov    0x4(%esi),%eax
		mov    $0xe,%cl
		mov    %eax,%ebx
		sar    %ebp
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    0x8(%esp),%edx
		sar    %edi
		add    %eax,%edx
		mov    0x8(%esi),%eax
		mov    $0xe,%cl
		mov    %eax,%ebx
		mov    %edx,0x8(%esp)
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    0x8(%esp),%ebx
		mov    0x70(%esp),%ecx
		mov    0x50(%esp),%edx
		sar    %ecx
		dec    %edx
		add    %ebx,%eax
		mov    %ecx,0x70(%esp)
		mov    %edx,0x50(%esp)
		test   %edx,%edx
		jg     jump_be3ed
	jump_be487:
		mov    0xc(%esi),%eax
		mov    $0xe,%cl
		mov    %eax,%ebx
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    %eax,%edi
		mov    0x10(%esi),%eax
		mov    $0xe,%cl
		mov    %eax,%ebx
		imul   %ebx
		shrd   %cl,%edx,%eax
		add    %eax,%edi
		mov    0x14(%esi),%eax
		mov    $0xe,%cl
		mov    %eax,%ebx
		add    $0xc,%esi
		imul   %ebx
		shrd   %cl,%edx,%eax
		add    %edi,%eax
		jne    jump_be4f8
		mov    (%esi),%ecx
		shl    $0x10,%ecx
		mov    0x4(%esi),%edi
		mov    %ecx,(%esi)
		shl    $0x10,%edi
		mov    0x8(%esi),%ebp
		mov    %edi,0x4(%esi)
		shl    $0x10,%ebp
		mov    (%esi),%eax
		mov    $0xe,%cl
		mov    %eax,%ebx
		mov    %ebp,0x8(%esi)
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    %eax,%edi
		mov    0x4(%esi),%eax
		mov    $0xe,%cl
		mov    %eax,%ebx
		imul   %ebx
		shrd   %cl,%edx,%eax
		add    %eax,%edi
		mov    0x8(%esi),%eax
		mov    $0xe,%cl
		mov    %eax,%ebx
		imul   %ebx
		shrd   %cl,%edx,%eax
		add    %edi,%eax
	jump_be4f8:
		jne    jump_be50b
		movl   $0x4000,(%esi)
		mov    %eax,0x4(%esi)
		mov    %eax,0x8(%esi)
		jmp    jump_be613
	jump_be50b:
		cmp    $0x10000,%eax
		jle    jump_be52d
		mov    (%esi),%edx
		mov    0x4(%esi),%ebx
		mov    0x8(%esi),%ecx
		sar    %edx
		sar    %ebx
		mov    %edx,(%esi)
		sar    %ecx
		mov    %ebx,0x4(%esi)
		sar    $0x2,%eax
		mov    %ecx,0x8(%esi)
		jmp    jump_be50b
	jump_be52d:
		cmp    $0x1000,%eax
		jge    jump_be553
		mov    (%esi),%ebx
		mov    0x4(%esi),%ecx
		mov    0x8(%esi),%edi
		add    %ebx,%ebx
		add    %ecx,%ecx
		mov    %ebx,(%esi)
		add    %edi,%edi
		mov    %ecx,0x4(%esi)
		shl    $0x2,%eax
		mov    %edi,0x8(%esi)
		jmp    jump_be52d
	jump_be553:
		mov    (%esi),%ebp
		mov    0x8(%esi),%edx
		mov    0x4(%esi),%edi
		sar    %edx
		sar    %ebp
		mov    %edx,0x74(%esp)
		mov    $0xa,%edx
		sar    %edi
		mov    %edx,0x64(%esp)
	jump_be56e:
		cmp    $0x4001,%eax
		jle    jump_be591
		mov    (%esi),%ecx
		mov    0x4(%esi),%eax
		mov    0x8(%esi),%edx
		sub    %edi,%eax
		sub    %ebp,%ecx
		mov    %eax,0x4(%esi)
		mov    0x74(%esp),%eax
		mov    %ecx,(%esi)
		sub    %eax,%edx
		mov    %edx,0x8(%esi)
		jmp    jump_be5b2
	jump_be591:
		cmp    $0x3fff,%eax
		jge    jump_be613
		mov    (%esi),%eax
		mov    0x4(%esi),%edx
		mov    0x8(%esi),%ebx
		add    %ebp,%eax
		add    %edi,%edx
		mov    %eax,(%esi)
		mov    0x74(%esp),%eax
		mov    %edx,0x4(%esi)
		add    %eax,%ebx
		mov    %ebx,0x8(%esi)
	jump_be5b2:
		mov    (%esi),%eax
		mov    $0xe,%cl
		mov    %eax,%ebx
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    %eax,0x8(%esp)
		mov    0x4(%esi),%eax
		mov    $0xe,%cl
		mov    %eax,%ebx
		sar    %ebp
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    0x8(%esp),%edx
		sar    %edi
		add    %eax,%edx
		mov    0x8(%esi),%eax
		mov    $0xe,%cl
		mov    %eax,%ebx
		mov    %edx,0x8(%esp)
		imul   %ebx
		shrd   %cl,%edx,%eax
		mov    0x8(%esp),%ebx
		mov    0x74(%esp),%ecx
		mov    0x64(%esp),%edx
		sar    %ecx
		dec    %edx
		add    %ebx,%eax
		mov    %ecx,0x74(%esp)
		mov    %edx,0x64(%esp)
		test   %edx,%edx
		jg     jump_be56e
		xor    %eax,%eax
		add    $0x78,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_be613:
		xor    %eax,%eax
		add    $0x78,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
mech_unkn_func_18:	/* 0x0BE620 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x24,%esp
		mov    %eax,%edi
		mov    (%edx),%eax
		mov    %eax,0xc(%esp)
		mov    0x4(%edx),%eax
		mov    %eax,(%esp)
		mov    0x8(%edx),%eax
		mov    %eax,0x8(%esp)
		mov    0xc(%edx),%eax
		mov    %eax,0x10(%esp)
		mov    0x10(%edx),%eax
		mov    %eax,0x1c(%esp)
		mov    0x14(%edx),%eax
		mov    %eax,0x20(%esp)
		mov    0x18(%edx),%eax
		mov    %eax,0x14(%esp)
		mov    0x1c(%edx),%eax
		add    $0xc,%edx
		mov    %eax,0x4(%esp)
		mov    0x14(%edx),%eax
		add    $0xc,%edx
		mov    %eax,0x18(%esp)
		xor    %eax,%eax
		test   %edi,%edi
		jbe    jump_be6e0
	jump_be671:
		mov    0x10(%esp),%esi
		imul   0x4(%ebx),%esi
		mov    (%ebx),%ebp
		mov    0xc(%esp),%edx
		imul   %ebp,%edx
		mov    0x8(%ebx),%ebp
		add    %esi,%edx
		mov    0x14(%esp),%esi
		imul   %ebp,%esi
		add    %esi,%edx
		mov    %edx,(%ecx)
		mov    0x1c(%esp),%esi
		imul   0x4(%ebx),%esi
		mov    (%ebx),%ebp
		mov    (%esp),%edx
		imul   %ebp,%edx
		mov    0x8(%ebx),%ebp
		add    %edx,%esi
		mov    0x4(%esp),%edx
		imul   %ebp,%edx
		add    %edx,%esi
		mov    %esi,0x4(%ecx)
		mov    0x20(%esp),%edx
		imul   0x4(%ebx),%edx
		mov    (%ebx),%ebp
		mov    0x8(%esp),%esi
		imul   %ebp,%esi
		mov    0x8(%ebx),%ebp
		add    %edx,%esi
		mov    0x18(%esp),%edx
		imul   %ebp,%edx
		inc    %eax
		add    $0xc,%ecx
		add    %edx,%esi
		add    $0xc,%ebx
		mov    %esi,-0x4(%ecx)
		cmp    %edi,%eax
		jb     jump_be671
	jump_be6e0:
		xor    %eax,%eax
		add    $0x24,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
mech_unkn_func_07:	/* 0x0BE6EC */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    (%edx),%ebx
		mov    %ebx,(%eax)
		mov    0xc(%edx),%ebx
		mov    %ebx,0x4(%eax)
		mov    0x18(%edx),%ebx
		mov    %ebx,0x8(%eax)
		mov    0x4(%edx),%ebx
		mov    %ebx,0xc(%eax)
		mov    0x10(%edx),%ebx
		mov    %ebx,0x10(%eax)
		mov    0x1c(%edx),%ebx
		mov    %ebx,0x14(%eax)
		mov    0x8(%edx),%ebx
		mov    %ebx,0x18(%eax)
		add    $0xc,%eax
		mov    0x14(%edx),%ebx
		mov    %ebx,0x10(%eax)
		add    $0xc,%eax
		mov    0x20(%edx),%edx
		mov    %edx,0x8(%eax)
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
mech_unkn_func_14:	/* 0x0BE72C */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    (%eax),%ebx
		mov    %ebx,(%edx)
		mov    0x4(%eax),%ebx
		mov    %ebx,0xc(%edx)
		mov    0x8(%eax),%ebx
		mov    %ebx,0x18(%edx)
		mov    0xc(%eax),%ebx
		mov    %ebx,0x4(%edx)
		mov    0x10(%eax),%ebx
		mov    %ebx,0x10(%edx)
		mov    0x14(%eax),%ebx
		mov    %ebx,0x1c(%edx)
		mov    0x18(%eax),%ebx
		add    $0xc,%eax
		mov    %ebx,0x8(%edx)
		mov    0x10(%eax),%ebx
		add    $0xc,%eax
		mov    %ebx,0x14(%edx)
		mov    0x8(%eax),%eax
		mov    %eax,0x20(%edx)
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
load_mech_dat:	/* 0x0BE76C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		mov    unkn_mech_arr5,%esi
		mov    $0x2,%edx
		call   ac_LbFileOpen
		mov    %eax,%edi
		cmp    $0xffffffff,%eax
		je     jump_be876
		mov    unkn_mech_arr5,%esi
		xor    %ebp,%ebp
		jmp    jump_be7a4
	jump_be796:
		add    $0x1a9,%ebp
		cmp    $0x6a40,%ebp
		je     jump_be80f
	jump_be7a4:
		mov    $0x1a9,%ebx
		mov    %edi,%eax
		lea    (%esi,%ebp,1),%edx
		mov    %ebp,%ecx
		mov    %esi,unkn_mech_arr5
		call   ac_LbFileRead
		mov    unkn_mech_arr5,%esi
		xor    %edx,%edx
		lea    (%esi,%ecx,1),%eax
	jump_be7c6:
		mov    $0x800,%ebx
		sub    0xc(%edx,%eax,1),%ebx
		mov    %ebx,0xc(%edx,%eax,1)
		mov    $0x800,%ebx
		sub    0x14(%edx,%eax,1),%ebx
		mov    %ebx,0x14(%edx,%eax,1)
		andl   $0x7ff,0xc(%edx,%eax,1)
		andl   $0x7ff,0x10(%edx,%eax,1)
		andl   $0x7ff,0x14(%edx,%eax,1)
		mov    0x4(%edx,%eax,1),%ebx
		add    $0x18,%edx
		neg    %ebx
		mov    %ebx,-0x14(%edx,%eax,1)
		cmp    $0x198,%edx
		je     jump_be796
		jmp    jump_be7c6
	jump_be80f:
		xor    %ecx,%ecx
		mov    $0x89,%ebp
		mov    %esi,unkn_mech_arr5
	jump_be81c:
		mov    unkn_mech_arr2,%edx
		mov    %ebp,%ebx
		mov    %edi,%eax
		add    %ecx,%edx
		add    $0x89,%ecx
		call   ac_LbFileRead
		cmp    $0x890,%ecx
		jne    jump_be81c
		xor    %ecx,%ecx
		mov    $0x11,%ebp
	jump_be842:
		mov    unkn_mech_arr1,%edx
		mov    %ebp,%ebx
		mov    %edi,%eax
		add    %ecx,%edx
		add    $0x11,%ecx
		call   ac_LbFileRead
		cmp    $0x4400,%ecx
		jne    jump_be842
		mov    %edi,%eax
		call   ac_LbFileClose
		mov    $0x1,%eax
		mov    unkn_mech_arr5,%esi
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_be876:
		xor    %eax,%eax
		mov    unkn_mech_arr5,%esi
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
mech_unkn_func_19:	/* 0x0BE884 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x100,%esp
		mov    %eax,0xf0(%esp)
		mov    0xf0(%esp),%edx
		mov    %edx,%ebp
		shl    $0x4,%ebp
		sub    %edx,%ebp
		shl    $0x2,%ebp
		sub    %edx,%ebp
		xor    %eax,%eax
		add    %ebp,%ebp
		xor    %edx,%edx
		jmp    jump_be8ce
	jump_be8b2:
		mov    0x4(%ebx),%ebx
		add    %eax,%ebx
		imul   $0x7a,%ebx,%ebx
		mov    unkn_mech_arr4,%ecx
		lea    (%esp,%edx,1),%edi
		lea    0x49(%ecx,%ebx,1),%esi
		add    $0xc,%edx
		inc    %eax
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
	jump_be8ce:
		mov    unkn_mech_arr3,%ebx
		add    %ebp,%ebx
		cmp    0x8(%ebx),%eax
		jb     jump_be8b2
		mov    0xf0(%esp),%edx
		mov    %edx,%eax
		shl    $0x4,%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		xor    %esi,%esi
		sub    %edx,%eax
		mov    %esi,0xfc(%esp)
		add    %eax,%eax
		mov    %esi,0xf4(%esp)
		mov    %eax,0xf8(%esp)
		jmp    jump_bead2
	jump_be90c:
		sub    $0x4,%ecx
		test   %ecx,%ecx
		jge    jump_be921
		jmp    jump_beab2
	jump_be918:
		mov    0xfc(%esp),%ebp
		xor    %ecx,%ecx
	jump_be921:
		mov    0xf8(%esp),%edi
		mov    unkn_mech_arr3,%eax
		add    %edi,%eax
		mov    0x4(%eax),%edx
		add    %ebp,%edx
		imul   $0x7a,%edx,%edx
		lea    (%eax,%ecx,1),%esi
		imul   $0x1a9,0x5c(%esi),%ebx
		mov    unkn_mech_arr4,%edi
		mov    unkn_mech_arr5,%eax
		add    %edx,%edi
		xor    %edx,%edx
		add    %ebx,%eax
		mov    0x23(%edi),%dx
		cmpb   $0x0,0x198(%edx,%eax,1)
		je     jump_be90c
		imul   $0x18,%edx,%edx
		add    %edx,%eax
		mov    0x54(%esi),%ebx
		lea    0xc(%eax),%edx
		lea    0xd8(%esp),%esi
		lea    0x49(%edi),%eax
		call   mech_unkn_func_20
		mov    0xf4(%esp),%edi
		mov    0xf8(%esp),%edx
		mov    unkn_mech_arr3,%eax
		lea    0xd8(%esp),%esi
		add    %edx,%eax
		lea    (%esp,%edi,1),%edi
		lea    (%eax,%ecx,1),%ebx
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		imul   $0x1a9,0x5c(%ebx),%ecx
		mov    0x4(%eax),%eax
		add    %ebp,%eax
		imul   $0x7a,%eax,%eax
		mov    unkn_mech_arr4,%edx
		add    %edx,%eax
		xor    %esi,%esi
		mov    0x23(%eax),%si
		imul   $0x18,%esi,%esi
		mov    unkn_mech_arr5,%edx
		add    %ecx,%edx
		add    $0x6d,%eax
		add    %esi,%edx
		mov    0x54(%ebx),%ebx
		mov    (%eax),%ebp
		mov    (%edx),%esi
		mov    0x4(%eax),%edi
		sub    %ebp,%esi
		mov    %eax,%ecx
		mov    %esi,0xcc(%esp)
		mov    0x8(%eax),%ebp
		mov    0x4(%edx),%esi
		mov    0x8(%edx),%edx
		sub    %edi,%esi
		sub    %ebp,%edx
		mov    %esi,0xd0(%esp)
		mov    %edx,0xd4(%esp)
		test   %ebx,%ebx
		je     jump_bea3a
		mov    0xcc(%esp),%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,0xcc(%esp)
		mov    %esi,%edx
		mov    %esi,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,0xd0(%esp)
		mov    0xd4(%esp),%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,0xd4(%esp)
	jump_bea3a:
		mov    0xcc(%esp),%edx
		mov    0xd0(%esp),%ebx
		mov    (%ecx),%eax
		lea    0xe4(%esp),%edi
		add    %eax,%edx
		mov    0x4(%ecx),%eax
		lea    0xcc(%esp),%esi
		add    %eax,%ebx
		mov    0x8(%ecx),%eax
		mov    0xd4(%esp),%ecx
		mov    %edx,0xcc(%esp)
		add    %eax,%ecx
		mov    %ebx,0xd0(%esp)
		mov    %ecx,0xd4(%esp)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		mov    unkn_mech_arr3,%eax
		add    0xf8(%esp),%eax
		mov    0xfc(%esp),%edi
		mov    0x4(%eax),%eax
		add    %edi,%eax
		imul   $0x7a,%eax,%eax
		mov    unkn_mech_arr4,%edx
		lea    0xcc(%esp),%esi
		lea    0x6d(%edx,%eax,1),%edi
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
	jump_beab2:
		mov    0xf4(%esp),%ebp
		mov    0xfc(%esp),%eax
		add    $0xc,%ebp
		inc    %eax
		mov    %ebp,0xf4(%esp)
		mov    %eax,0xfc(%esp)
	jump_bead2:
		mov    0xf8(%esp),%ebp
		mov    unkn_mech_arr3,%eax
		add    %ebp,%eax
		mov    0xfc(%esp),%edx
		cmp    0x8(%eax),%edx
		jb     jump_be918
		mov    0xf0(%esp),%eax
		mov    %eax,%ebp
		shl    $0x4,%ebp
		sub    %eax,%ebp
		shl    $0x2,%ebp
		sub    %eax,%ebp
		xor    %ecx,%ecx
		add    %ebp,%ebp
		xor    %eax,%eax
		jmp    jump_beb27
	jump_beb0b:
		mov    0x4(%edx),%edx
		add    %ecx,%edx
		imul   $0x7a,%edx,%edx
		mov    unkn_mech_arr4,%ebx
		lea    (%esp,%eax,1),%esi
		lea    0x49(%edx,%ebx,1),%edi
		add    $0xc,%eax
		inc    %ecx
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
	jump_beb27:
		mov    unkn_mech_arr3,%edx
		add    %ebp,%edx
		cmp    0x8(%edx),%ecx
		jb     jump_beb0b
		xor    %eax,%eax
		add    $0x100,%esp
	jump_beb3c:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
mech_unkn_func_20:	/* 0x0BEBC0 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %edi
		push   %ebp
		sub    $0x38,%esp
		mov    %esi,%ebp
		mov    %eax,%ecx
		mov    %edx,%edi
		mov    %ebx,%esi
		mov    (%eax),%eax
		mov    (%edx),%ebx
		mov    $0x800,%edx
		sub    %eax,%ebx
		mov    %edx,0x20(%esp)
		test   %ebx,%ebx
		jge    jump_bebeb
		movl   $0xffffffff,0x28(%esp)
		jmp    jump_bebf7
	jump_bebeb:
		setne  %al
		and    $0xff,%eax
		mov    %eax,0x28(%esp)
	jump_bebf7:
		mov    %ebx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    0x20(%esp),%edx
		sub    %eax,%edx
		mov    %edx,%eax
		mov    0x28(%esp),%edx
		imul   %edx,%eax
		mov    %eax,0x24(%esp)
		neg    %eax
		mov    %eax,0x24(%esp)
		mov    %ebx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,0x34(%esp)
		mov    0x24(%esp),%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    0x34(%esp),%eax
		jge    jump_bec35
		mov    0x24(%esp),%ebx
	jump_bec35:
		mov    %ebx,0xc(%esp)
		mov    0x4(%edi),%eax
		mov    0x4(%ecx),%ebx
		mov    $0x800,%edx
		sub    %ebx,%eax
		mov    %edx,0x1c(%esp)
		mov    %eax,%ebx
		test   %eax,%eax
		jge    jump_bec5a
		movl   $0xffffffff,0x2c(%esp)
		jmp    jump_bec66
	jump_bec5a:
		setne  %al
		and    $0xff,%eax
		mov    %eax,0x2c(%esp)
	jump_bec66:
		mov    %ebx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    0x1c(%esp),%edx
		sub    %eax,%edx
		mov    %edx,%eax
		mov    0x2c(%esp),%edx
		imul   %edx,%eax
		mov    %eax,0x30(%esp)
		neg    %eax
		mov    %eax,0x30(%esp)
		mov    %ebx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,0x34(%esp)
		mov    0x30(%esp),%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    0x34(%esp),%eax
		jge    jump_beca4
		mov    0x30(%esp),%ebx
	jump_beca4:
		mov    %ebx,0x10(%esp)
		mov    0x8(%ecx),%eax
		mov    0x8(%edi),%ebx
		mov    $0x800,%edi
		sub    %eax,%ebx
		mov    %edi,0x18(%esp)
		test   %ebx,%ebx
		jge    jump_becc4
		mov    $0xffffffff,%edi
		jmp    jump_beccf
	jump_becc4:
		setne  %al
		mov    %eax,%edi
		and    $0xff,%edi
	jump_beccf:
		mov    %ebx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    0x18(%esp),%edx
		sub    %eax,%edx
		imul   %edx,%edi
		mov    %ebx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		neg    %edi
		mov    %eax,0x34(%esp)
		mov    %edi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    0x34(%esp),%eax
		jge    jump_becfb
		mov    %edi,%ebx
	jump_becfb:
		mov    %ebx,0x14(%esp)
		test   %esi,%esi
		je     jump_bed2e
		mov    0xc(%esp),%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		idiv   %esi
		mov    %eax,0xc(%esp)
		mov    0x10(%esp),%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		idiv   %esi
		mov    %eax,0x10(%esp)
		mov    %ebx,%edx
		mov    %ebx,%eax
		sar    $0x1f,%edx
		idiv   %esi
		mov    %eax,0x14(%esp)
	jump_bed2e:
		mov    0xc(%esp),%ebx
		mov    (%ecx),%eax
		mov    0x10(%esp),%esi
		add    %eax,%ebx
		mov    0x4(%ecx),%eax
		mov    0x14(%esp),%edi
		add    %eax,%esi
		mov    %ebx,0xc(%esp)
		mov    %esi,0x10(%esp)
		mov    %esi,%edx
		mov    0x8(%ecx),%eax
		lea    0xc(%esp),%esi
		add    %eax,%edi
		and    $0x7ff,%edx
		mov    %edi,0x14(%esp)
		mov    %ebx,%eax
		mov    %edx,0x10(%esp)
		and    $0x7ff,%eax
		mov    %edi,%ebx
		mov    %esp,%edi
		and    $0x7ff,%ebx
		mov    %eax,0xc(%esp)
		mov    %ebx,0x14(%esp)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		lea    0xc(%esp),%esi
		mov    %ebp,%edi
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		mov    %ebp,%eax
		add    $0x38,%esp
		pop    %ebp
		pop    %edi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
init_mech_explode:	/* 0x0BEE30 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		mov    %eax,%esi
		mov    0x18(%eax),%edi
		mov    0x20(%eax),%ebp
		xor    %eax,%eax
		mov    0x9(%esi),%al
		cmp    $0x2,%eax
		jne    jump_beb3c
		xor    %eax,%eax
		mov    0x8(%esi),%al
		cmp    $0x3b,%eax
		jne    jump_beb3c
	jump_bee5a:
		mov    0x5e(%esi),%dx
		test   %dx,%dx
		je     jump_bee9b
		xor    %eax,%eax
		mov    %dx,%ax
		imul   $0xa8,%eax,%eax
		mov    things,%ebx
		add    %eax,%ebx
		mov    0x60(%ebx),%ax
		mov    %ax,0x5e(%esi)
		andb   $0xed,0xf(%ebx)
		xor    %eax,%eax
		mov    0x16(%ebx),%ax
		mov    $0xc,%edx
		call   ac_add_node_thing
		mov    %ebx,%eax
		call   ac_set_person_dead
		jmp    jump_bee5a
	jump_bee9b:
		mov    $0xa,%ecx
		mov    0x20(%esi),%ebx
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		call   ac_bang_new4
		mov    $0x73,%ecx
		mov    0x20(%esi),%ebx
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		call   ac_bang_new4
		mov    $0x2d,%ecx
		mov    0x20(%esi),%ebx
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		call   ac_bang_new4
		mov    $0x2,%ebx
		mov    0x20(%esi),%edx
		mov    0x18(%esi),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		call   ac_quick_crater
		movl   $0x2,0xc(%esi)
		xor    %eax,%eax
		mov    0x16(%esi),%ax
		movw   $0xd,0xa(%esi)
		call   ac_remove_thing
		mov    %esi,%eax
		call   ac_delete_node
		mov    things_used_head,%dx
	jump_bef10:
		movswl %dx,%eax
		test   %eax,%eax
		jle    jump_beb3c
		imul   $0xa8,%eax,%eax
		mov    things,%ebx
		add    %ebx,%eax
		xor    %ebx,%ebx
		mov    0x9(%eax),%bl
		mov    0x6(%eax),%dx
		cmp    $0x23,%ebx
		jne    jump_bef10
		mov    0xc(%eax),%bl
		movw   $0xd,0xa(%eax)
		or     $0x2,%bl
		mov    %bl,0xc(%eax)
		mov    0x18(%eax),%ebx
		movl   $0x3e8,0x30(%eax)
		shl    $0x8,%ebx
		mov    %ebx,0x18(%eax)
		mov    0x20(%eax),%esi
		mov    0x18(%eax),%ebx
		shl    $0x8,%esi
		sub    %edi,%ebx
		mov    %esi,0x20(%eax)
		sar    $0x4,%ebx
		mov    %ebx,0x2c(%eax)
		mov    0x1c(%eax),%ecx
		mov    0x20(%eax),%ebx
		shl    $0x8,%ecx
		sub    %ebp,%ebx
		mov    %ecx,0x1c(%eax)
		sar    $0x4,%ebx
		mov    %ebx,0x34(%eax)
		mov    0x16(%eax),%ax
		and    $0xffff,%eax
		call   ac_add_node_thing
		jmp    jump_bef10


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_unkn35)	/* 0x0BEF90 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    %eax,%esi
		mov    0x18(%eax),%eax
		mov    0x2c(%esi),%edx
		add    %edx,%eax
		mov    %eax,(%esp)
		mov    0x1c(%esi),%eax
		mov    0x30(%esi),%ebx
		mov    0x34(%esi),%ecx
		add    %eax,%ebx
		mov    0x20(%esi),%eax
		add    %ecx,%eax
		mov    (%esp),%edx
		mov    %eax,0x4(%esp)
		mov    %eax,%ecx
		mov    %esi,%eax
		call   ac_move_mapwho
		mov    0x2c(%esi),%eax
		mov    0x2c(%esi),%edi
		sar    $0x4,%eax
		sub    %eax,%edi
		mov    %edi,0x2c(%esi)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x7f,%al
		and    $0xffff,%eax
		mov    0x30(%esi),%ebp
		add    $0x200,%eax
		sub    %eax,%ebp
		mov    0x34(%esi),%eax
		mov    0x34(%esi),%edx
		sar    $0x4,%eax
		sub    %eax,%edx
		mov    0x20(%esi),%eax
		sar    $0x8,%eax
		mov    %edx,0x34(%esi)
		movswl %ax,%edx
		mov    0x18(%esi),%eax
		sar    $0x8,%eax
		cwtl
		mov    %ebp,0x30(%esi)
		call   ac_alt_at_point
		cmp    0x1c(%esi),%eax
		jle    jump_bf03c
		mov    $0x50,%ecx
		mov    0x20(%esi),%ebx
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		call   ac_bang_new4
		xor    %eax,%eax
		mov    0x16(%esi),%ax
		call   ac_remove_thing
		mov    %esi,%eax
		call   ac_delete_node
	jump_bf03c:
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_count_fnavs)	/* 0x0BF050 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		test   %al,%al
		je     jump_bf12e
		testb  $0x2,EXPORT_SYMBOL(ingame)+0x930 # ingame.Flags+1
		je     jump_bf120
		xor    %esi,%esi
		jmp    jump_bf0e5
	jump_bf070:
		mov    EXPORT_SYMBOL(colour_lookup)+3,%al
	jump_bf075:
		and    $0xff,%eax
		push   %eax
		xor    %eax,%eax
		mov    %si,%ax
		imul   $0xc,%eax,%eax
		mov    $0x156,%edx
		mov    $0x3,%ecx
		mov    $0x17,%ebx
		sub    %eax,%edx
		mov    $0x123,%eax
		sar    %edx
		call   ac_LbDrawBox
		jmp    jump_bf0e4
	jump_bf0a2:
		mov    data_1dc899(%eax),%eax
		sar    $0x18,%eax
		test   %eax,%eax
		jne    jump_bf0b6
		mov    EXPORT_SYMBOL(colour_lookup)+2,%al
		jmp    jump_bf0bb
	jump_bf0b6:
		mov    EXPORT_SYMBOL(colour_lookup)+3,%al
	jump_bf0bb:
		and    $0xff,%eax
		push   %eax
		xor    %eax,%eax
		mov    %si,%ax
		imul   $0xc,%eax,%eax
		mov    $0x156,%edx
		mov    $0x6,%ecx
		mov    $0x2e,%ebx
		sub    %eax,%edx
		mov    $0x246,%eax
		call   ac_LbDrawBox
	jump_bf0e4:
		inc    %esi
	jump_bf0e5:
		xor    %eax,%eax
		mov    data_1dc896,%edx
		mov    %si,%ax
		sar    $0x10,%edx
		cmp    %edx,%eax
		jge    jump_bf120
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay)+100,%dx # lbDisplay.ScreenMode
		cmp    $0x1,%edx
		jne    jump_bf0a2
		mov    data_1dc899(%eax),%eax
		sar    $0x18,%eax
		test   %eax,%eax
		jne    jump_bf070
		mov    EXPORT_SYMBOL(colour_lookup)+2,%al
		jmp    jump_bf075
	jump_bf120:
		xor    %ebx,%ebx
		mov    %bx,EXPORT_SYMBOL(word_1DC898)
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_bf12e:
		mov    data_1dc896,%edx
		sar    $0x10,%edx
		mov    %al,EXPORT_SYMBOL(byte_1DC89C)(%edx)
		incw   EXPORT_SYMBOL(word_1DC898)
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_navi_onscreen_debug)	/* 0x0BF14C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		test   %al,%al
		je     jump_bf1f0
		testb  $0x2,EXPORT_SYMBOL(ingame)+0x930 # ingame.Flags+1
		je     jump_bf1d8
		xor    %esi,%esi
		jmp    jump_bf189
	jump_bf169:
		xor    %edx,%edx
		mov    $0xa,%ecx
		mov    EXPORT_SYMBOL(colour_lookup)+4,%dl
		mov    $0x32,%ebx
		push   %edx
		mov    %eax,%edx
		mov    $0x244,%eax
		call   ac_LbDrawBox
	jump_bf188:
		inc    %esi
	jump_bf189:
		xor    %eax,%eax
		mov    data_1dc8cc,%edx
		mov    %si,%ax
		sar    $0x10,%edx
		cmp    %edx,%eax
		jge    jump_bf1d8
		imul   $0xc,%eax,%eax
		mov    $0x154,%ebx
		xor    %edx,%edx
		sub    %eax,%ebx
		mov    EXPORT_SYMBOL(lbDisplay)+100,%dx # lbDisplay.ScreenMode
		mov    %ebx,%eax
		cmp    $0x1,%edx
		jne    jump_bf169
		xor    %edx,%edx
		mov    $0x5,%ecx
		mov    EXPORT_SYMBOL(colour_lookup)+4,%dl
		mov    $0x122,%eax
		push   %edx
		mov    %ebx,%edx
		mov    $0x19,%ebx
		sar    %edx
		call   ac_LbDrawBox
		jmp    jump_bf188
	jump_bf1d8:
		xor    %ebx,%ebx
		mov    $0x1,%eax
		mov    %bx,EXPORT_SYMBOL(word_1DC8CE)
		call   ac_count_fnavs
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_bf1f0:
		incw   EXPORT_SYMBOL(word_1DC8CE)
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_init_my_paths)	/* 0x0BF1FC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		xor    %eax,%eax
		jmp    jump_bf218
	jump_bf202:
		imul   $0x13,%edx,%edx
		mov    %eax,%ebx
		inc    %ebx
		mov    %bx,EXPORT_SYMBOL(my_paths)+0x11(%edx)
		xor    %bl,%bl
		inc    %eax
		mov    %bl,EXPORT_SYMBOL(my_paths)(%edx)
	jump_bf218:
		xor    %edx,%edx
		mov    %ax,%dx
		cmp    $0x63f,%edx
		jl     jump_bf202
		xor    %bh,%bh
		xor    %eax,%edx
		mov    %bh,data_17ee79
		mov    $0x1,%ebx
		mov    %dx,data_17ee8a
		mov    %bx,EXPORT_SYMBOL(head_my_path)
		mov    %bx,EXPORT_SYMBOL(path_count)
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
do_next_navigate_index:	/* 0x0BF2A0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    EXPORT_SYMBOL(head_my_path),%di
		cmpw   $0x0,0x4c(%eax)
		jne    jump_bf2ba
		mov    $0x1,%al
		jmp    jump_bf374
	jump_bf2ba:
		mov    0x4a(%eax),%ebx
		sar    $0x10,%ebx
		lea    0x0(,%ebx,4),%edx
		add    %ebx,%edx
		shl    $0x2,%edx
		sub    %ebx,%edx
		mov    EXPORT_SYMBOL(my_paths)(%edx),%dl
		incb   0x3e(%eax)
		xor    %ebx,%ebx
		xor    %dh,%dh
		mov    0x3e(%eax),%bl
		mov    EXPORT_SYMBOL(path_count),%si
		and    $0xffff,%edx
		dec    %esi
		cmp    %edx,%ebx
		jl     jump_bf334
		mov    0x4c(%eax),%cx
		xor    %ebx,%ebx
		mov    %cx,%bx
		lea    0x0(,%ebx,4),%edx
		add    %ebx,%edx
		shl    $0x2,%edx
		sub    %ebx,%edx
		xor    %cl,%bl
		mov    %di,EXPORT_SYMBOL(my_paths)+0x11(%edx)
		mov    %si,EXPORT_SYMBOL(path_count)
		mov    %bl,EXPORT_SYMBOL(my_paths)(%edx)
		mov    %ecx,%edi
		movw   $0x0,0x4c(%eax)
		mov    $0x1,%al
		mov    %di,EXPORT_SYMBOL(head_my_path)
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_bf334:
		test   $0x3,%bl
		jne    jump_bf372
		mov    0x4c(%eax),%cx
		xor    %ebx,%ebx
		mov    %cx,%bx
		lea    0x0(,%ebx,4),%edx
		add    %ebx,%edx
		shl    $0x2,%edx
		sub    %ebx,%edx
		movb   $0x0,EXPORT_SYMBOL(my_paths)(%edx)
		mov    %si,EXPORT_SYMBOL(path_count)
		mov    EXPORT_SYMBOL(my_paths)+0x11(%edx),%bx
		mov    %di,EXPORT_SYMBOL(my_paths)+0x11(%edx)
		mov    %ecx,%edi
		mov    %bx,0x4c(%eax)
	jump_bf372:
		xor    %al,%al
	jump_bf374:
		mov    %di,EXPORT_SYMBOL(head_my_path)
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
use_nav_data:	/* 0x0BF384 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x3c,%esp
		mov    EXPORT_SYMBOL(head_my_path),%si
		mov    %eax,%ebp
		xor    %ebx,%ebx
		mov    0x9(%eax),%bl
		cmp    $0x3,%ebx
		jne    jump_bf3a9
		cmpw   $0x0,0x4c(%eax)
		je     jump_bf3b7
		jmp    jump_bf3b0
	jump_bf3a9:
		cmpw   $0x0,0x4c(%eax)
		je     jump_bf3b7
	jump_bf3b0:
		xor    %edx,%edx
		call   ac_unkn_path_func_001
	jump_bf3b7:
		xor    %ebx,%ebx
		mov    g_fat_data__PathLength,%ecx
		mov    EXPORT_SYMBOL(path_count),%bx
		sar    $0x2,%ecx
		add    %ebx,%ecx
		cmp    $0x63c,%ecx
		jle    jump_bf407
		push   %ebx
		mov    g_fat_data__PathLength,%edx
		push   %edx
		push   $aPathlengthDPat
		lea    0xc(%esp),%ebx
		push   %ebx
		xor    %ebx,%ebx
		call   ac_sprintf
		mov    0x9(%ebp),%bl
		add    $0x10,%esp
		cmp    $0x3,%ebx
		mov    EXPORT_SYMBOL(head_my_path),%si
		movw   $0x0,0x4c(%ebp)
		jmp    jump_bf50e
	jump_bf407:
		xor    %ebx,%ebx
		mov    0x9(%ebp),%bl
		mov    EXPORT_SYMBOL(head_my_path),%dx
		cmp    $0x3,%ebx
		mov    %dx,0x4c(%ebp)
		xor    %ecx,%ecx
		mov    %dx,%cx
		lea    0x0(,%ecx,4),%ebx
		add    %ecx,%ebx
		shl    $0x2,%ebx
		sub    %ecx,%ebx
		mov    g_fat_data__PathLength,%al
		mov    %al,EXPORT_SYMBOL(my_paths)(%ebx)
		xor    %edi,%edi
		mov    EXPORT_SYMBOL(my_paths)+0x11(%ebx),%si
		mov    %di,EXPORT_SYMBOL(my_paths)+0x11(%ebx)
		mov    EXPORT_SYMBOL(path_count),%bx
		inc    %ebx
		xor    %eax,%eax
		mov    %bx,EXPORT_SYMBOL(path_count)
		jmp    jump_bf4a9
	jump_bf45b:
		xor    %edi,%edi
		mov    %dx,%di
		imul   $0x13,%edi,%edi
		xor    %ebx,%ebx
		mov    %ax,%bx
		mov    g_fat_data__WayPoints__x8(,%ebx,8),%ecx
		sar    $0x8,%ecx
		mov    %ecx,0x38(%esp)
		mov    %eax,%ecx
		xor    %ah,%ch
		and    $0x3,%cl
		mov    %ecx,0x34(%esp)
		xor    %ecx,%ecx
		mov    0x34(%esp),%cx
		add    %ecx,%ecx
		mov    g_fat_data__WayPoints__y8(,%ebx,8),%ebx
		add    %edi,%ecx
		sar    $0x8,%ebx
		mov    0x38(%esp),%edi
		mov    %bx,data_1777d5(%ecx)
		inc    %eax
		mov    %di,data_1777cd(%ecx)
	jump_bf4a9:
		xor    %ebx,%ebx
		mov    g_fat_data__PathLength,%ecx
		mov    %ax,%bx
		cmp    %ecx,%ebx
		jge    jump_bf50a
		test   $0x3,%al
		jne    jump_bf45b
		cmp    $0x3,%ebx
		jle    jump_bf45b
		xor    %ebx,%ebx
		mov    %dx,%bx
		imul   $0x13,%ebx,%ebx
		mov    %si,EXPORT_SYMBOL(my_paths)+0x11(%ebx)
		xor    %ebx,%ebx
		mov    %si,%bx
		imul   $0x13,%ebx,%ebx
		mov    EXPORT_SYMBOL(path_count),%di
		xor    %ecx,%ecx
		inc    %edi
		mov    %esi,%edx
		mov    EXPORT_SYMBOL(my_paths)+0x11(%ebx),%si
		mov    %cx,EXPORT_SYMBOL(my_paths)+0x11(%ebx)
		mov    g_fat_data__PathLength,%cl
		mov    %di,EXPORT_SYMBOL(path_count)
		mov    %cl,EXPORT_SYMBOL(my_paths)(%ebx)
		jmp    jump_bf45b
	jump_bf50a:
		movb   $0x0,0x3e(%ebp)
	jump_bf50e:
		mov    %si,EXPORT_SYMBOL(head_my_path)
		add    $0x3c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
set_xz_for_quad_unkn03:	/* 0x0BF5B8 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x38,%esp
		mov    %eax,%esi
		mov    %edx,%ebp
		mov    %ebx,%edi
		xor    %edx,%edx
		mov    0xe(%eax),%dx
		lea    0x0(,%edx,8),%eax
		mov    game_objects,%ebx
		add    %edx,%eax
		xor    %edx,%edx
		shl    $0x2,%eax
		mov    0x2(%esi),%dx
		add    %eax,%ebx
		lea    0x0(,%edx,4),%eax
		add    %eax,%edx
		mov    EXPORT_SYMBOL(game_object_points),%eax
		add    %edx,%edx
		add    %eax,%edx
		mov    %edx,0x10(%esp)
		mov    (%edx),%edx
		sar    $0x10,%edx
		mov    %edx,0x18(%esp)
		xor    %edx,%edx
		mov    (%esi),%dx
		mov    %edx,0x1c(%esp)
		mov    0x1c(%esp),%ecx
		shl    $0x2,%edx
		add    %ecx,%edx
		add    %edx,%edx
		lea    (%edx,%eax,1),%ecx
		mov    (%ecx),%edx
		sar    $0x10,%edx
		mov    %edx,0x14(%esp)
		mov    0x18(%esp),%edx
		sub    0x14(%esp),%edx
		sar    $0x2,%edx
		mov    %edx,(%esp)
		mov    0x10(%esp),%edx
		mov    0x4(%edx),%edx
		sar    $0x10,%edx
		mov    %edx,0x1c(%esp)
		mov    0x4(%ecx),%edx
		sar    $0x10,%edx
		mov    %edx,0x18(%esp)
		mov    0x1c(%esp),%edx
		sub    0x18(%esp),%edx
		sar    $0x2,%edx
		mov    %edx,0x4(%esp)
		xor    %edx,%edx
		mov    0x4(%esi),%dx
		mov    %edx,0x1c(%esp)
		mov    0x1c(%esp),%ecx
		shl    $0x2,%edx
		add    %ecx,%edx
		mov    (%eax,%edx,2),%ecx
		sar    $0x10,%ecx
		sub    0x14(%esp),%ecx
		mov    0x4(%eax,%edx,2),%edx
		sar    $0x2,%ecx
		sar    $0x10,%edx
		mov    %ecx,0x8(%esp)
		sub    0x18(%esp),%edx
		sar    $0x2,%edx
		mov    %edx,0xc(%esp)
		mov    0x12(%ebx),%edx
		sar    $0x10,%edx
		mov    %edx,0x0(%ebp)
		mov    0x14(%ebx),%edx
		sar    $0x10,%edx
		mov    %edx,(%edi)
		xor    %edx,%edx
		mov    (%esi),%dx
		mov    %edx,0x1c(%esp)
		mov    0x1c(%esp),%ecx
		shl    $0x2,%edx
		add    %ecx,%edx
		mov    (%eax,%edx,2),%edx
		sar    $0x10,%edx
		mov    0x0(%ebp),%ecx
		add    %edx,%ecx
		xor    %edx,%edx
		mov    %ecx,0x0(%ebp)
		mov    (%esi),%dx
		mov    %edx,0x1c(%esp)
		mov    0x1c(%esp),%ecx
		shl    $0x2,%edx
		add    %ecx,%edx
		mov    0x4(%eax,%edx,2),%edx
		mov    (%edi),%ecx
		sar    $0x10,%edx
		add    %edx,%ecx
		mov    %ecx,(%edi)
		mov    (%esp),%edx
		add    %edx,0x0(%ebp)
		mov    0x4(%esp),%edx
		add    %edx,(%edi)
		mov    0x8(%esp),%edx
		add    %edx,0x0(%ebp)
		mov    0xc(%esp),%edx
		add    %edx,(%edi)
		mov    0x12(%ebx),%edx
		sar    $0x10,%edx
		mov    %edx,0x34(%esp)
		mov    0x14(%ebx),%edx
		sar    $0x10,%edx
		mov    %edx,0x30(%esp)
		mov    0x34(%esp),%edx
		mov    %edx,0x24(%esp)
		mov    0x30(%esp),%edx
		mov    %edx,0x20(%esp)
		mov    0x34(%esp),%edx
		mov    %edx,0x2c(%esp)
		mov    0x30(%esp),%edx
		mov    %edx,0x28(%esp)
		xor    %ebx,%ebx
		mov    (%esi),%bx
		lea    0x0(,%ebx,4),%edx
		add    %ebx,%edx
		mov    0x34(%esp),%ecx
		mov    (%eax,%edx,2),%ebx
		mov    0x4(%eax,%edx,2),%edx
		sar    $0x10,%ebx
		sar    $0x10,%edx
		add    %ebx,%ecx
		add    %edx,0x30(%esp)
		xor    %ebx,%ebx
		mov    0x2(%esi),%bx
		lea    0x0(,%ebx,4),%edx
		add    %ebx,%edx
		mov    %ecx,0x34(%esp)
		mov    0x24(%esp),%ecx
		mov    (%eax,%edx,2),%ebx
		mov    0x4(%eax,%edx,2),%edx
		sar    $0x10,%ebx
		sar    $0x10,%edx
		add    %ebx,%ecx
		add    %edx,0x20(%esp)
		xor    %ebx,%ebx
		mov    0x4(%esi),%bx
		lea    0x0(,%ebx,4),%edx
		add    %ebx,%edx
		add    %edx,%edx
		mov    %ecx,0x24(%esp)
		add    %edx,%eax
		mov    0x2c(%esp),%ecx
		mov    0x20(%esp),%ebx
		mov    (%eax),%edx
		mov    0x4(%eax),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		add    %edx,%ecx
		mov    0x28(%esp),%edx
		mov    %ecx,0x2c(%esp)
		mov    0x0(%ebp),%ecx
		add    %eax,%edx
		mov    0x24(%esp),%eax
		mov    %edx,0x28(%esp)
		mov    (%edi),%edx
		sub    %eax,%ecx
		mov    0x30(%esp),%eax
		sub    %ebx,%edx
		sub    %eax,%ebx
		mov    0x24(%esp),%eax
		sub    0x34(%esp),%eax
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_bf7e8
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_bf7e8:
		movsbl %al,%eax
		test   %eax,%eax
		jl     jump_bf86f
		mov    0x28(%esp),%ebx
		mov    0x2c(%esp),%eax
		mov    0x0(%ebp),%ecx
		mov    (%edi),%edx
		sub    %eax,%ecx
		mov    0x20(%esp),%eax
		sub    %ebx,%edx
		sub    %eax,%ebx
		mov    0x2c(%esp),%eax
		sub    0x24(%esp),%eax
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_bf82a
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_bf82a:
		movsbl %al,%eax
		test   %eax,%eax
		jl     jump_bf86f
		mov    0x30(%esp),%ebx
		mov    0x34(%esp),%eax
		mov    0x0(%ebp),%ecx
		mov    (%edi),%edx
		sub    %eax,%ecx
		mov    0x28(%esp),%eax
		sub    %ebx,%edx
		sub    %eax,%ebx
		mov    0x34(%esp),%eax
		sub    0x2c(%esp),%eax
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_bf868
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_bf868:
		movsbl %al,%eax
		test   %eax,%eax
		jge    jump_bf8a3
	jump_bf86f:
		xor    %edx,%edx
		mov    (%esi),%dx
		lea    0x0(,%edx,4),%eax
		mov    EXPORT_SYMBOL(game_object_points),%ebx
		add    %edx,%eax
		mov    (%ebx,%eax,2),%eax
		sar    $0x10,%eax
		xor    %edx,%edx
		mov    %eax,0x0(%ebp)
		mov    (%esi),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    0x4(%ebx,%eax,2),%eax
		sar    $0x10,%eax
		mov    %eax,(%edi)
	jump_bf8a3:
		add    $0x38,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
set_xz_for_quad210:	/* 0x0BF8AC */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x34,%esp
		mov    %edx,%edi
		mov    %ebx,%esi
		xor    %ebx,%ebx
		mov    0xe(%eax),%bx
		lea    0x0(,%ebx,8),%edx
		mov    game_objects,%ebp
		add    %ebx,%edx
		xor    %ebx,%ebx
		shl    $0x2,%edx
		mov    0x2(%eax),%bx
		add    %edx,%ebp
		lea    0x0(,%ebx,4),%edx
		add    %edx,%ebx
		mov    EXPORT_SYMBOL(game_object_points),%edx
		add    %ebx,%ebx
		add    %edx,%ebx
		mov    %ebx,0x10(%esp)
		mov    (%ebx),%ebx
		sar    $0x10,%ebx
		mov    %ebx,0x18(%esp)
		xor    %ebx,%ebx
		mov    0x6(%eax),%bx
		mov    %ebx,0x1c(%esp)
		mov    0x1c(%esp),%ecx
		shl    $0x2,%ebx
		add    %ecx,%ebx
		add    %ebx,%ebx
		lea    (%ebx,%edx,1),%ecx
		mov    (%ecx),%ebx
		sar    $0x10,%ebx
		mov    %ebx,0x14(%esp)
		mov    0x18(%esp),%ebx
		sub    0x14(%esp),%ebx
		sar    $0x2,%ebx
		mov    %ebx,(%esp)
		mov    0x10(%esp),%ebx
		mov    0x4(%ebx),%ebx
		sar    $0x10,%ebx
		mov    %ebx,0x1c(%esp)
		mov    0x4(%ecx),%ebx
		sar    $0x10,%ebx
		mov    %ebx,0x18(%esp)
		mov    0x1c(%esp),%ebx
		sub    0x18(%esp),%ebx
		sar    $0x2,%ebx
		mov    %ebx,0x4(%esp)
		xor    %ebx,%ebx
		mov    0x4(%eax),%bx
		mov    %ebx,0x1c(%esp)
		mov    0x1c(%esp),%ecx
		shl    $0x2,%ebx
		add    %ecx,%ebx
		mov    (%edx,%ebx,2),%ecx
		sar    $0x10,%ecx
		sub    0x14(%esp),%ecx
		mov    0x4(%edx,%ebx,2),%ebx
		sar    $0x2,%ecx
		sar    $0x10,%ebx
		mov    %ecx,0x8(%esp)
		sub    0x18(%esp),%ebx
		sar    $0x2,%ebx
		mov    %ebx,0xc(%esp)
		mov    0x12(%ebp),%ebx
		sar    $0x10,%ebx
		mov    %ebx,(%edi)
		mov    0x14(%ebp),%ebx
		sar    $0x10,%ebx
		mov    %ebx,(%esi)
		xor    %ebx,%ebx
		mov    0x6(%eax),%bx
		mov    %ebx,0x1c(%esp)
		mov    0x1c(%esp),%ecx
		shl    $0x2,%ebx
		add    %ecx,%ebx
		mov    (%edx,%ebx,2),%ebx
		sar    $0x10,%ebx
		mov    (%edi),%ecx
		add    %ebx,%ecx
		xor    %ebx,%ebx
		mov    %ecx,(%edi)
		mov    0x6(%eax),%bx
		mov    %ebx,0x1c(%esp)
		mov    0x1c(%esp),%ecx
		shl    $0x2,%ebx
		add    %ecx,%ebx
		mov    0x4(%edx,%ebx,2),%ebx
		mov    (%esi),%ecx
		sar    $0x10,%ebx
		add    %ebx,%ecx
		mov    %ecx,(%esi)
		mov    (%esp),%ebx
		add    %ebx,(%edi)
		mov    0x4(%esp),%ebx
		add    %ebx,(%esi)
		mov    0x8(%esp),%ebx
		add    %ebx,(%edi)
		mov    0xc(%esp),%ebx
		add    %ebx,(%esi)
		mov    0x12(%ebp),%ebx
		sar    $0x10,%ebx
		mov    0x14(%ebp),%ebp
		mov    %ebx,0x30(%esp)
		sar    $0x10,%ebp
		mov    %ebx,0x20(%esp)
		mov    %ebx,0x28(%esp)
		mov    %ebp,0x2c(%esp)
		mov    %ebp,0x24(%esp)
		xor    %ebx,%ebx
		mov    0x2(%eax),%bx
		mov    %ebx,0x1c(%esp)
		mov    0x1c(%esp),%ecx
		shl    $0x2,%ebx
		add    %ecx,%ebx
		mov    (%edx,%ebx,2),%ecx
		mov    0x4(%edx,%ebx,2),%ebx
		sar    $0x10,%ebx
		add    %ebx,%ebp
		xor    %ebx,%ebx
		sar    $0x10,%ecx
		mov    0x4(%eax),%bx
		mov    %ebx,0x1c(%esp)
		add    %ecx,0x30(%esp)
		mov    0x1c(%esp),%ecx
		shl    $0x2,%ebx
		add    %ecx,%ebx
		mov    (%edx,%ebx,2),%ecx
		sar    $0x10,%ecx
		mov    0x4(%edx,%ebx,2),%ebx
		add    %ecx,0x20(%esp)
		sar    $0x10,%ebx
		mov    0x2c(%esp),%ecx
		add    %ebx,%ecx
		xor    %ebx,%ebx
		mov    0x6(%eax),%bx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		add    %eax,%eax
		add    %eax,%edx
		mov    (%edx),%eax
		mov    0x28(%esp),%ebx
		sar    $0x10,%eax
		mov    %ecx,0x2c(%esp)
		add    %eax,%ebx
		mov    0x24(%esp),%ecx
		mov    %ebx,0x28(%esp)
		mov    0x4(%edx),%eax
		mov    0x20(%esp),%ebx
		sar    $0x10,%eax
		mov    (%esi),%edx
		add    %eax,%ecx
		mov    0x2c(%esp),%eax
		mov    %ecx,0x24(%esp)
		mov    (%edi),%ecx
		sub    %eax,%edx
		sub    %ebx,%ecx
		mov    %eax,%ebx
		mov    0x20(%esp),%eax
		sub    %ebp,%ebx
		sub    0x30(%esp),%eax
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_bfac3
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_bfac3:
		movsbl %al,%eax
		test   %eax,%eax
		jg     jump_bfb3f
		mov    0x24(%esp),%ecx
		mov    (%esi),%edx
		mov    0x28(%esp),%eax
		sub    %ecx,%edx
		mov    (%edi),%ecx
		mov    0x24(%esp),%ebx
		sub    %eax,%ecx
		sub    0x2c(%esp),%ebx
		mov    0x28(%esp),%eax
		sub    0x20(%esp),%eax
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_bfb02
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_bfb02:
		movsbl %al,%eax
		test   %eax,%eax
		jg     jump_bfb3f
		mov    0x30(%esp),%ebx
		mov    0x30(%esp),%eax
		mov    (%esi),%edx
		mov    (%edi),%ecx
		mov    0x24(%esp),%esi
		mov    0x28(%esp),%edi
		sub    %ebp,%edx
		sub    %ebx,%ecx
		mov    %ebp,%ebx
		sub    %edi,%eax
		sub    %esi,%ebx
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_bfb3f
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_bfb3f:
		add    $0x34,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
set_xz_for_quad123:	/* 0x0BFB48 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    %eax,%esi
		mov    %edx,0x4(%esp)
		mov    %ebx,(%esp)
		xor    %edx,%edx
		mov    0xe(%eax),%dx
		lea    0x0(,%edx,8),%eax
		mov    game_objects,%edi
		add    %edx,%eax
		xor    %edx,%edx
		shl    $0x2,%eax
		mov    0x4(%esi),%dx
		add    %eax,%edi
		lea    0x0(,%edx,4),%eax
		mov    EXPORT_SYMBOL(game_object_points),%ecx
		add    %edx,%eax
		xor    %edx,%edx
		add    %eax,%eax
		mov    0x2(%esi),%dx
		lea    (%ecx,%eax,1),%ebx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		add    %eax,%eax
		mov    (%ebx),%ebp
		add    %eax,%ecx
		sar    $0x10,%ebp
		mov    (%ecx),%eax
		mov    %ebp,%edx
		sar    $0x10,%eax
		sub    %eax,%edx
		mov    %edx,%eax
		mov    0x4(%ebx),%edx
		mov    0x4(%ecx),%ecx
		sar    $0x10,%edx
		sar    $0x10,%ecx
		mov    %edx,%ebx
		sub    %ecx,%ebx
		mov    0x12(%edi),%ecx
		sar    $0x10,%ecx
		mov    0x14(%edi),%edi
		sar    $0x10,%edi
		add    %ebp,%ecx
		add    %edi,%edx
		mov    0x4(%esp),%edi
		sub    %ecx,%edi
		mov    %edi,%ecx
		mov    (%esp),%edi
		sub    %edx,%edi
		mov    %edi,%edx
		imul   %edx
		xchg   %eax,%ebx
		xchg   %ecx,%edx
		imul   %edx
		sub    %eax,%ebx
		setne  %al
		sbb    %edx,%ecx
		je     jump_bfbf6
		setl   %ah
		setg   %al
		sub    %ah,%al
	jump_bfbf6:
		movsbl %al,%eax
		test   %eax,%eax
		jle    jump_bfc03
		mov    0x24(%esi),%ax
		jmp    jump_bfc07
	jump_bfc03:
		mov    0x26(%esi),%ax
	jump_bfc07:
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
set_xz_for_tri:	/* 0x0BFC10 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		mov    %eax,%ecx
		mov    %edx,%esi
		mov    %ebx,0x8(%esp)
		xor    %edx,%edx
		mov    0xc(%eax),%dx
		lea    0x0(,%edx,8),%eax
		mov    game_objects,%edi
		add    %edx,%eax
		xor    %edx,%edx
		shl    $0x2,%eax
		mov    0x2(%ecx),%dx
		add    %eax,%edi
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_object_points),%edx
		add    %eax,%eax
		lea    (%edx,%eax,1),%ebp
		mov    0x0(%ebp),%eax
		xor    %ebx,%ebx
		sar    $0x10,%eax
		mov    (%ecx),%bx
		mov    %eax,0x4(%esp)
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		add    %eax,%eax
		lea    (%edx,%eax,1),%ebx
		mov    (%ebx),%eax
		sar    $0x10,%eax
		mov    %eax,(%esp)
		mov    0x4(%esp),%eax
		add    (%esp),%eax
		mov    0x4(%ecx),%cx
		mov    %eax,0x4(%esp)
		and    $0xffff,%ecx
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		add    %eax,%eax
		add    %eax,%edx
		mov    %edx,(%esp)
		mov    (%edx),%edx
		mov    0x4(%esp),%ecx
		sar    $0x10,%edx
		add    %ecx,%edx
		mov    $0x3,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %eax,%ecx
		mov    0x4(%ebp),%edx
		mov    0x4(%ebx),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		add    %edx,%eax
		mov    (%esp),%edx
		mov    0x4(%edx),%edx
		sar    $0x10,%edx
		add    %eax,%edx
		mov    $0x3,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %eax,%edx
		mov    0x14(%edi),%bx
		mov    0x16(%edi),%ax
		add    %ebx,%ecx
		add    %eax,%edx
		movswl %cx,%eax
		mov    %eax,(%esi)
		movswl %dx,%eax
		mov    0x8(%esp),%edx
		mov    %eax,(%edx)
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_build_navigate_path_to_person)	/* 0x0BFD00 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x18,%esp
		mov    %eax,%esi
		mov    %edx,%ecx
		mov    $0xffffffff,%edx
		mov    0xf(%eax),%ah
		mov    %dx,0x14(%esp)
		mov    %edx,%edi
		test   $0x10,%ah
		je     jump_bfd4f
		mov    0x5c(%esi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		mov    0x8(%edx,%eax,8),%al
		and    $0xff,%eax
		cmp    $0x1d,%eax
		je     jump_bfd4f
		xor    %eax,%eax
		jmp    jump_c028d
	jump_bfd4f:
		testb  $0x20,0xd(%esi)
		jne    jump_bfd72
		testb  $0x2,0x46(%esi)
		je     jump_bfd72
		mov    0x44(%esi),%edx
		or     $0x20040,%edx
		xor    %eax,%eax
		mov    %edx,0x44(%esi)
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_bfd72:
		cmpw   $0x0,0x62(%esi)
		je     jump_bfe0f
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		mov    0x20(%ecx),%ebx
		shl    $0x5,%eax
		mov    0x18(%ecx),%edx
		mov    %eax,0x10(%esp)
		sar    $0x8,%ebx
		mov    0x10(%esp),%ebp
		mov    game_commands,%eax
		sar    $0x8,%edx
		add    %ebp,%eax
		call   ac_check_person_within
		test   %al,%al
		jne    jump_bfe0f
		mov    0x18(%ecx),%eax
		sub    0x18(%esi),%eax
		sar    $0x8,%eax
		mov    %eax,%ecx
		cmp    $0x800,%eax
		jle    jump_bfdc1
		mov    $0x800,%eax
	jump_bfdc1:
		cmp    $0xfffff800,%eax
		jge    jump_bfdcd
		mov    $0xfffff800,%eax
	jump_bfdcd:
		cmp    $0x800,%ecx
		jle    jump_bfdda
		mov    $0x800,%ecx
	jump_bfdda:
		cmp    $0xfffff800,%ecx
		jge    jump_bfde7
		mov    $0xfffff800,%ecx
	jump_bfde7:
		mov    0x20(%esi),%edx
		sar    $0x8,%edx
		add    %edx,%ecx
		mov    0x18(%esi),%edx
		sar    $0x8,%edx
		movswl %cx,%ebx
		add    %edx,%eax
		xor    %ecx,%ecx
		movswl %ax,%edx
		mov    %esi,%eax
		call   ac_build_navigate_path
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_bfe0f:
		testb  $0x8,0x44(%esi)
		jne    jump_bfe19
		movb   $0x0,0x5d(%esi)
	jump_bfe19:
		movw   $0x7d00,0x64(%esi)
		mov    0x45(%esi),%bh
		mov    0x18(%esi),%eax
		or     $0x80,%bh
		sar    $0x8,%eax
		mov    %bh,0x45(%esi)
		test   %eax,%eax
		jl     jump_bfe6c
		cmp    $0x8000,%eax
		jge    jump_bfe6c
		mov    0x20(%esi),%eax
		sar    $0x8,%eax
		test   %eax,%eax
		jl     jump_bfe6c
		cmp    $0x8000,%eax
		jge    jump_bfe6c
		mov    0x18(%ecx),%eax
		sar    $0x8,%eax
		test   %eax,%eax
		jl     jump_bfe6c
		cmp    $0x8000,%eax
		jge    jump_bfe6c
		mov    0x20(%ecx),%eax
		sar    $0x8,%eax
		test   %eax,%eax
		jl     jump_bfe6c
		cmp    $0x8000,%eax
		jl     jump_bfe83
	jump_bfe6c:
		mov    0x44(%esi),%ebx
		or     $0x20040,%ebx
		xor    %eax,%eax
		mov    %ebx,0x44(%esi)
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_bfe83:
		mov    0x20(%esi),%eax
		mov    0x18(%esi),%edx
		sar    $0x10,%eax
		sar    $0x10,%edx
		shl    $0x7,%eax
		add    %eax,%edx
		lea    0x0(,%edx,8),%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%ebp
		add    %edx,%eax
		mov    0xe(%ebp,%eax,2),%dl
		test   %dl,%dl
		je     jump_bfef9
		mov    0x20(%ecx),%eax
		mov    0x18(%ecx),%ebx
		sar    $0x10,%eax
		sar    $0x10,%ebx
		shl    $0x7,%eax
		add    %eax,%ebx
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		cmp    0xe(%ebp,%eax,2),%dl
		jne    jump_bfef9
		movl   $0x1,g_fat_data__PathLength
		mov    0x18(%ecx),%eax
		mov    gamep_unknval_14,%edx
		mov    %eax,g_fat_data__WayPoints__x8
		mov    0x20(%ecx),%eax
		inc    %edx
		mov    %eax,g_fat_data__WayPoints__y8
		mov    %esi,%eax
		mov    %edx,gamep_unknval_14
		jmp    jump_c0283
	jump_bfef9:
		cmpw   $0x0,0x6e(%esi)
		je     jump_bff9e
		mov    0x6c(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jle    jump_bff30
		mov    %eax,%edx
		mov    game_object_faces,%eax
		shl    $0x5,%edx
		add    %edx,%eax
		mov    0x1e(%eax),%dx
		lea    0x4(%esp),%ebx
		mov    %dx,0x14(%esp)
		mov    %esp,%edx
		call   set_xz_for_tri
		jmp    jump_bff88
	jump_bff30:
		testb  $0x20,0xc(%esi)
		je     jump_bff60
		neg    %eax
		mov    %eax,%edx
		shl    $0x2,%eax
		add    %edx,%eax
		mov    game_object_faces4,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		mov    0x26(%eax),%dx
		lea    0x4(%esp),%ebx
		mov    %dx,0x14(%esp)
		mov    %esp,%edx
		call   set_xz_for_quad210
		jmp    jump_bff88
	jump_bff60:
		neg    %eax
		mov    %eax,%edx
		shl    $0x2,%eax
		add    %edx,%eax
		mov    game_object_faces4,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		mov    0x24(%eax),%dx
		lea    0x4(%esp),%ebx
		mov    %dx,0x14(%esp)
		mov    %esp,%edx
		call   set_xz_for_quad_unkn03
	jump_bff88:
		mov    (%esp),%ebx
		mov    0x4(%esp),%ebp
		shl    $0x8,%ebx
		shl    $0x8,%ebp
		mov    %ebx,(%esp)
		mov    %ebp,0x4(%esp)
		jmp    jump_bffab
	jump_bff9e:
		mov    0x18(%esi),%eax
		mov    %eax,(%esp)
		mov    0x20(%esi),%eax
		mov    %eax,0x4(%esp)
	jump_bffab:
		cmpw   $0x0,0x6e(%ecx)
		je     jump_c004a
		mov    0x6c(%ecx),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jle    jump_bffde
		mov    game_object_faces,%edx
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0xc(%esp),%ebx
		lea    0x8(%esp),%edx
		mov    0x1e(%eax),%di
		call   set_xz_for_tri
		jmp    jump_c002f
	jump_bffde:
		testb  $0x20,0xc(%ecx)
		je     jump_c000b
		neg    %eax
		mov    %eax,%edx
		shl    $0x2,%eax
		add    %edx,%eax
		mov    game_object_faces4,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		lea    0xc(%esp),%ebx
		lea    0x8(%esp),%edx
		mov    0x26(%eax),%di
		call   set_xz_for_quad210
		jmp    jump_c002f
	jump_c000b:
		neg    %eax
		mov    %eax,%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    game_object_faces4,%eax
		shl    $0x3,%edx
		add    %edx,%eax
		lea    0xc(%esp),%ebx
		lea    0x8(%esp),%edx
		mov    0x24(%eax),%di
		call   set_xz_for_quad_unkn03
	jump_c002f:
		mov    0x8(%esp),%ebx
		mov    0xc(%esp),%ecx
		shl    $0x8,%ebx
		shl    $0x8,%ecx
		mov    %ebx,0x8(%esp)
		mov    %ecx,0xc(%esp)
		jmp    jump_c00e5
	jump_c004a:
		testb  $0x10,0xf(%ecx)
		je     jump_c00d7
		mov    0x5c(%ecx),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %eax,%edx
		mov    things,%eax
		shl    $0x3,%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x8(%eax),%dl
		cmp    $0x1d,%edx
		jne    jump_c00d7
		xor    %ebx,%ebx
		mov    0x9(%eax),%bl
		cmp    $0x2,%ebx
		jne    jump_c008a
		cmp    %edx,%edx
		je     jump_c0095
	jump_c008a:
		xor    %eax,%eax
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_c0095:
		mov    0x7c(%eax),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %eax,%edx
		mov    game_object_faces4,%eax
		shl    $0x3,%edx
		add    %edx,%eax
		lea    0xc(%esp),%ebx
		lea    0x8(%esp),%edx
		mov    0x26(%eax),%di
		call   set_xz_for_quad210
		mov    0x8(%esp),%eax
		mov    0xc(%esp),%edx
		shl    $0x8,%eax
		shl    $0x8,%edx
		mov    %eax,0x8(%esp)
		mov    %edx,0xc(%esp)
		jmp    jump_c00e5
	jump_c00d7:
		mov    0x18(%ecx),%eax
		mov    %eax,0x8(%esp)
		mov    0x20(%ecx),%eax
		mov    %eax,0xc(%esp)
	jump_c00e5:
		mov    (%esp),%eax
		mov    nav_stats__ThisTurn,%ebp
		mov    0x8(%esp),%edx
		inc    %ebp
		sub    %edx,%eax
		mov    %ebp,nav_stats__ThisTurn
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    0xc(%esp),%ebx
		mov    %eax,%ecx
		mov    0x4(%esp),%eax
		sub    %ebx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%ecx
		jle    jump_c0119
		sar    %eax
		jmp    jump_c011b
	jump_c0119:
		sar    %ecx
	jump_c011b:
		add    %ecx,%eax
		cmp    $0x100000,%eax
		jge    jump_c01ba
		mov    0x12(%esp),%eax
		sar    $0x10,%eax
		cmp    $0xffffffff,%eax
		jne    jump_c01ba
		movswl %di,%eax
		cmp    $0xffffffff,%eax
		jne    jump_c01ba
		testb  $0x20,0xd(%esi)
		jne    jump_c01ba
		cmpw   $0x0,0x8e(%esi)
		je     jump_c01ba
		cmpw   $0x0,0x62(%esi)
		jne    jump_c01ba
		testb  $0x8,0xe(%esi)
		jne    jump_c01ba
		xor    %eax,%eax
		mov    0x8(%esi),%al
		cmp    $0x7,%eax
		je     jump_c01ba
		call   ac_LbRandomAnyShort
		test   $0x1,%al
		je     jump_c01ba
		push   $0xfffffffe
		mov    0x80(%esi),%bh
		mov    $g_nav_data,%eax
		or     $0x10,%bh
		mov    navi2_unkn_counter,%edi
		mov    %bh,0x80(%esi)
		inc    %edi
		mov    0x10(%esp),%ecx
		mov    0x8(%esp),%ebx
		mov    0x4(%esp),%edx
		push   %ecx
		mov    0x10(%esp),%ecx
		mov    %edi,navi2_unkn_counter
		call   ac_path_init8_unkn3
		mov    %esi,%eax
		call   ac_set_person_animmode_run
		jmp    jump_c01ff
	jump_c01ba:
		push   $0xfffffffe
		mov    0x80(%esi),%cl
		mov    navi2_unkn_counter,%ebx
		and    $0xef,%cl
		inc    %ebx
		mov    %cl,0x80(%esi)
		mov    %ebx,navi2_unkn_counter
		mov    0x10(%esp),%ebp
		mov    0xc(%esp),%eax
		push   %ebp
		mov    0xc(%esp),%edx
		mov    0x8(%esp),%ecx
		push   %eax
		mov    $g_nav_data,%ebx
		mov    0x1e(%esp),%eax
		push   %edx
		movswl %di,%edx
		sar    $0x10,%eax
		call   tri_path_init8
	jump_c01ff:
		cmpl   $0x0,data_1dc8e0
		jne    jump_c026d
		mov    (%esp),%eax
		mov    %eax,g_fat_data
		mov    0x4(%esp),%eax
		mov    %eax,data_1dd0e8
		mov    0x8(%esp),%eax
		mov    %eax,data_1dd0ec
		mov    0xc(%esp),%eax
		mov    %eax,data_1dd0f0
		mov    0x8(%esp),%eax
		mov    %eax,g_fat_data__WayPoints__x8
		mov    0xc(%esp),%eax
		mov    $0x1,%edi
		mov    %eax,g_fat_data__WayPoints__y8
		mov    %esi,%eax
		mov    %edi,g_fat_data__PathLength
		call   use_nav_data
		xor    %eax,%eax
		call   ac_count_fnavs
		mov    0x44(%esi),%ebp
		or     $0x20040,%ebp
		xor    %eax,%eax
		mov    %ebp,0x44(%esi)
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_c026d:
		mov    $0x80,%ebx
		mov    $g_fat_data,%edx
		mov    $g_nav_data,%eax
		call   fatter_than_nothing
		mov    %esi,%eax
	jump_c0283:
		call   use_nav_data
		mov    $0x1,%eax
	jump_c028d:
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_build_navigate_path_to_face)	/* 0x0C0298 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x10,%esp
		mov    %eax,%esi
		mov    %edx,%edi
		mov    0xf(%eax),%ah
		mov    $0xffffffff,%ecx
		test   $0x10,%ah
		jne    jump_c04be
		testb  $0x20,0xd(%esi)
		jne    jump_c02cd
		testb  $0x2,0x46(%esi)
		je     jump_c02cd
		orl    $0x20040,0x44(%esi)
		jmp    jump_c04be
	jump_c02cd:
		mov    0x44(%esi),%bl
		movw   $0x7d00,0x64(%esi)
		test   $0x8,%bl
		jne    jump_c02df
		movb   $0x0,0x5d(%esi)
	jump_c02df:
		mov    0x18(%esi),%eax
		sar    $0x8,%eax
		test   %eax,%eax
		jl     jump_c0301
		cmp    $0x8000,%eax
		jge    jump_c0301
		mov    0x20(%esi),%eax
		sar    $0x8,%eax
		test   %eax,%eax
		jl     jump_c0301
		cmp    $0x8000,%eax
		jl     jump_c0311
	jump_c0301:
		orl    $0x20040,0x44(%esi)
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_c0311:
		mov    0x18(%esi),%eax
		mov    %eax,0x8(%esp)
		mov    0x20(%esi),%eax
		mov    %eax,0xc(%esp)
		cmpw   $0x0,0x6e(%esi)
		je     jump_c03b9
		mov    0x6c(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jle    jump_c0352
		mov    game_object_faces,%edx
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0xc(%esp),%ebx
		lea    0x8(%esp),%edx
		mov    0x1e(%eax),%cx
		call   set_xz_for_tri
		jmp    jump_c03b9
	jump_c0352:
		testb  $0x20,0xc(%esi)
		je     jump_c037e
		neg    %eax
		mov    %eax,%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    game_object_faces4,%eax
		shl    $0x3,%edx
		add    %edx,%eax
		lea    0xc(%esp),%ebx
		lea    0x8(%esp),%edx
		mov    0x26(%eax),%cx
		call   set_xz_for_quad210
		jmp    jump_c03a3
	jump_c037e:
		neg    %eax
		mov    %eax,%edx
		shl    $0x2,%eax
		add    %edx,%eax
		mov    game_object_faces4,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		lea    0xc(%esp),%ebx
		lea    0x8(%esp),%edx
		mov    0x24(%eax),%cx
		call   set_xz_for_quad_unkn03
	jump_c03a3:
		mov    0x8(%esp),%ebx
		mov    0xc(%esp),%ebp
		shl    $0x8,%ebx
		shl    $0x8,%ebp
		mov    %ebx,0x8(%esp)
		mov    %ebp,0xc(%esp)
	jump_c03b9:
		movswl %di,%eax
		test   %eax,%eax
		jge    jump_c03de
		neg    %eax
		mov    game_object_faces,%edx
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x4(%esp),%ebx
		mov    %esp,%edx
		mov    0x1e(%eax),%di
		call   set_xz_for_tri
		jmp    jump_c03fe
	jump_c03de:
		mov    %eax,%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    game_object_faces4,%eax
		shl    $0x3,%edx
		add    %edx,%eax
		lea    0x4(%esp),%ebx
		mov    %esp,%edx
		mov    0x24(%eax),%di
		call   set_xz_for_quad_unkn03
	jump_c03fe:
		mov    (%esp),%eax
		mov    0x4(%esp),%edx
		push   $0xfffffffe
		mov    nav_stats__ThisTurn,%ebx
		shl    $0x8,%eax
		shl    $0x8,%edx
		inc    %ebx
		mov    %eax,0x4(%esp)
		mov    %edx,0x8(%esp)
		push   %edx
		mov    %ebx,nav_stats__ThisTurn
		mov    $g_nav_data,%ebx
		push   %eax
		mov    0x18(%esp),%eax
		movswl %di,%edx
		push   %eax
		movswl %cx,%eax
		mov    0x18(%esp),%ecx
		call   tri_path_init8
		cmpl   $0x0,data_1dc8e0
		jne    jump_c04a3
		mov    0x8(%esp),%eax
		mov    %eax,g_fat_data
		mov    0xc(%esp),%eax
		mov    %eax,data_1dd0e8
		mov    (%esp),%eax
		mov    %eax,data_1dd0ec
		mov    0x4(%esp),%eax
		mov    %eax,data_1dd0f0
		mov    (%esp),%eax
		mov    %eax,g_fat_data__WayPoints__x8
		mov    0x4(%esp),%eax
		mov    $0x1,%edi
		mov    %eax,g_fat_data__WayPoints__y8
		mov    %esi,%eax
		mov    %edi,g_fat_data__PathLength
		call   use_nav_data
		xor    %eax,%eax
		call   ac_count_fnavs
		orl    $0x20040,0x44(%esi)
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_c04a3:
		mov    $0x80,%ebx
		mov    $g_fat_data,%edx
		mov    $g_nav_data,%eax
		call   fatter_than_nothing
		mov    %esi,%eax
		call   use_nav_data
	jump_c04be:
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_build_navigate_path_to_face_xz)	/* 0x0C04C8 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		mov    %eax,%esi
		mov    %dx,0x8(%esp)
		mov    %ebx,%ebp
		mov    %ecx,%edi
		mov    0xf(%eax),%ah
		mov    $0xffffffff,%ecx
		test   $0x10,%ah
		jne    jump_c06c9
		testb  $0x20,0xd(%esi)
		jne    jump_c0502
		testb  $0x2,0x46(%esi)
		je     jump_c0502
		orl    $0x20040,0x44(%esi)
		jmp    jump_c06c9
	jump_c0502:
		mov    0x44(%esi),%bl
		movw   $0x7d00,0x64(%esi)
		test   $0x8,%bl
		jne    jump_c0514
		movb   $0x0,0x5d(%esi)
	jump_c0514:
		mov    0x18(%esi),%eax
		sar    $0x8,%eax
		test   %eax,%eax
		jl     jump_c0536
		cmp    $0x8000,%eax
		jge    jump_c0536
		mov    0x20(%esi),%eax
		sar    $0x8,%eax
		test   %eax,%eax
		jl     jump_c0536
		cmp    $0x8000,%eax
		jl     jump_c0544
	jump_c0536:
		orl    $0x20040,0x44(%esi)
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_c0544:
		mov    0x18(%esi),%eax
		mov    %eax,(%esp)
		mov    0x20(%esi),%eax
		mov    %eax,0x4(%esp)
		cmpw   $0x0,0x6e(%esi)
		je     jump_c05e3
		mov    0x6c(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jle    jump_c0582
		mov    game_object_faces,%edx
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x4(%esp),%ebx
		mov    %esp,%edx
		mov    0x1e(%eax),%cx
		call   set_xz_for_tri
		jmp    jump_c05cf
	jump_c0582:
		testb  $0x20,0xc(%esi)
		je     jump_c05ac
		neg    %eax
		mov    %eax,%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    game_object_faces4,%eax
		shl    $0x3,%edx
		add    %edx,%eax
		lea    0x4(%esp),%ebx
		mov    %esp,%edx
		mov    0x26(%eax),%cx
		call   set_xz_for_quad210
		jmp    jump_c05cf
	jump_c05ac:
		neg    %eax
		mov    %eax,%edx
		shl    $0x2,%eax
		add    %edx,%eax
		mov    game_object_faces4,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		lea    0x4(%esp),%ebx
		mov    %esp,%edx
		mov    0x24(%eax),%cx
		call   set_xz_for_quad_unkn03
	jump_c05cf:
		mov    (%esp),%ebx
		mov    0x4(%esp),%eax
		shl    $0x8,%ebx
		shl    $0x8,%eax
		mov    %ebx,(%esp)
		mov    %eax,0x4(%esp)
	jump_c05e3:
		mov    0x6(%esp),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_c0600
		neg    %eax
		mov    game_object_faces,%edx
		shl    $0x5,%eax
		mov    0x1e(%edx,%eax,1),%ax
		jmp    jump_c061a
	jump_c0600:
		mov    %eax,%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    game_object_faces4,%eax
		shl    $0x3,%edx
		mov    %edi,%ebx
		add    %edx,%eax
		mov    %ebp,%edx
		call   set_xz_for_quad123
	jump_c061a:
		push   $0xfffffffe
		mov    0x8(%esp),%edx
		shl    $0x8,%edi
		mov    nav_stats__ThisTurn,%ebx
		push   %edi
		shl    $0x8,%ebp
		inc    %ebx
		push   %ebp
		mov    %ebx,nav_stats__ThisTurn
		mov    $g_nav_data,%ebx
		push   %edx
		movswl %ax,%edx
		movswl %cx,%eax
		mov    0x10(%esp),%ecx
		call   tri_path_init8
		cmpl   $0x0,data_1dc8e0
		jne    jump_c06a2
		mov    (%esp),%eax
		mov    %ebp,data_1dd0ec
		mov    %eax,g_fat_data
		mov    0x4(%esp),%eax
		mov    %edi,data_1dd0f0
		mov    %eax,data_1dd0e8
		mov    $0x1,%eax
		mov    %ebp,g_fat_data__WayPoints__x8
		mov    %eax,g_fat_data__PathLength
		mov    %esi,%eax
		mov    %edi,g_fat_data__WayPoints__y8
		call   use_nav_data
		xor    %eax,%eax
		call   ac_count_fnavs
		orl    $0x20040,0x44(%esi)
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_c06a2:
		mov    $0x80,%ebx
		mov    $g_fat_data,%edx
		mov    $g_nav_data,%eax
		call   fatter_than_nothing
		mov    %esi,%eax
		mov    $0x1,%edx
		call   use_nav_data
		mov    %esi,%eax
		call   ac_unkn_path_func_001
	jump_c06c9:
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_build_navigate_path)	/* 0x0C06D0 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x28,%esp
		mov    %eax,%esi
		mov    %dx,0x20(%esp)
		mov    %bx,0x1c(%esp)
		xor    %eax,%eax
		mov    0x44(%esi),%dl
		mov    %eax,0xc(%esp)
		test   $0x8,%dl
		jne    jump_c06f4
		movb   $0x0,0x5d(%esi)
	jump_c06f4:
		testb  $0x20,0xd(%esi)
		jne    jump_c0713
		testb  $0x2,0x46(%esi)
		je     jump_c0713
		mov    0x44(%esi),%edx
		or     $0x20040,%edx
		xor    %eax,%eax
		mov    %edx,0x44(%esi)
		jmp    jump_c0a8d
	jump_c0713:
		testb  $0x10,0xf(%esi)
		je     jump_c0722
		xor    %eax,%eax
		add    $0x28,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_c0722:
		mov    0x18(%esi),%edx
		sar    $0x8,%edx
		movw   $0x7d00,0x64(%esi)
		test   %edx,%edx
		jl     jump_c0772
		cmp    $0x8000,%edx
		jge    jump_c0772
		mov    0x20(%esi),%edx
		sar    $0x8,%edx
		test   %edx,%edx
		jl     jump_c0772
		cmp    $0x8000,%edx
		jge    jump_c0772
		mov    0x1e(%esp),%ebx
		sar    $0x10,%ebx
		test   %ebx,%ebx
		jl     jump_c0772
		cmp    $0x8000,%ebx
		jge    jump_c0772
		mov    0x1a(%esp),%ecx
		sar    $0x10,%ecx
		test   %ecx,%ecx
		jl     jump_c0772
		cmp    $0x8000,%ecx
		jl     jump_c078c
	jump_c0772:
		mov    0x44(%esi),%eax
		movw   $0x0,0x4c(%esi)
		or     $0x20040,%eax
		mov    %eax,0x44(%esi)
		xor    %eax,%eax
		add    $0x28,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_c078c:
		mov    0x20(%esi),%edx
		mov    0x18(%esi),%edi
		sar    $0x10,%edx
		sar    $0x10,%edi
		shl    $0x7,%edx
		add    %edx,%edi
		lea    0x0(,%edi,8),%edx
		add    %edi,%edx
		mov    EXPORT_SYMBOL(game_my_big_map),%edi
		mov    0xe(%edi,%edx,2),%dl
		mov    %dl,0x24(%esp)
		test   %dl,%dl
		je     jump_c0818
		mov    %ecx,%edx
		mov    %ebx,%ebp
		sar    $0x8,%edx
		sar    $0x8,%ebp
		shl    $0x7,%edx
		add    %ebp,%edx
		mov    %edx,0x8(%esp)
		mov    0x8(%esp),%ebp
		shl    $0x3,%edx
		add    %ebp,%edx
		add    %edx,%edx
		add    %edx,%edi
		mov    0x24(%esp),%dl
		cmp    0xe(%edi),%dl
		jne    jump_c0818
		mov    $0x1,%edi
		mov    gamep_unknval_14,%ebp
		shl    $0x8,%ebx
		shl    $0x8,%ecx
		mov    %esi,%eax
		mov    %edi,g_fat_data__PathLength
		mov    %ebx,g_fat_data__WayPoints__x8
		add    %edi,%ebp
		mov    %ecx,g_fat_data__WayPoints__y8
		mov    %ebp,gamep_unknval_14
		call   use_nav_data
		jmp    jump_c0a88
	jump_c0818:
		mov    0x6e(%esi),%bx
		test   %bx,%bx
		je     jump_c0953
		mov    0x6c(%esi),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		jle    jump_c084d
		mov    %edx,%eax
		mov    game_object_faces,%edx
		shl    $0x5,%eax
		add    %edx,%eax
		lea    0x4(%esp),%ebx
		mov    %esp,%edx
		mov    0x1e(%eax),%cx
		call   set_xz_for_tri
		jmp    jump_c0899
	jump_c084d:
		testb  $0x20,0xc(%esi)
		je     jump_c0877
		neg    %edx
		mov    %edx,%eax
		shl    $0x2,%edx
		add    %eax,%edx
		mov    game_object_faces4,%eax
		shl    $0x3,%edx
		add    %edx,%eax
		lea    0x4(%esp),%ebx
		mov    %esp,%edx
		mov    0x26(%eax),%cx
		call   set_xz_for_quad210
		jmp    jump_c0899
	jump_c0877:
		neg    %edx
		mov    %edx,%eax
		shl    $0x2,%edx
		add    %eax,%edx
		mov    game_object_faces4,%eax
		shl    $0x3,%edx
		add    %edx,%eax
		lea    0x4(%esp),%ebx
		mov    %esp,%edx
		mov    0x24(%eax),%cx
		call   set_xz_for_quad_unkn03
	jump_c0899:
		mov    (%esp),%ebx
		mov    0x4(%esp),%edi
		push   $0xfffffffe
		mov    0x1e(%esp),%ebp
		mov    nav_stats__ThisTurn,%edx
		shl    $0x8,%ebx
		shl    $0x8,%edi
		sar    $0x10,%ebp
		inc    %edx
		mov    %ebx,0x4(%esp)
		mov    %edi,0x8(%esp)
		mov    0x22(%esp),%edi
		shl    $0x8,%ebp
		sar    $0x10,%edi
		push   %ebp
		shl    $0x8,%edi
		mov    %edx,nav_stats__ThisTurn
		push   %edi
		mov    0x10(%esp),%eax
		mov    $0xffffffff,%edx
		push   %eax
		movswl %cx,%eax
		mov    %ebx,%ecx
		mov    $g_nav_data,%ebx
		call   tri_path_init8
		mov    data_1dc8e0,%ax
		and    $0xffff,%eax
		jne    jump_c0a61
		mov    $0x1,%ebx
		mov    %edi,data_1dd0ec
		mov    %ebp,data_1dd0f0
		mov    0x18(%esi),%eax
		mov    %edi,g_fat_data__WayPoints__x8
		mov    %eax,g_fat_data
		mov    0x20(%esi),%eax
		mov    %ebp,g_fat_data__WayPoints__y8
		mov    %eax,data_1dd0e8
		mov    %esi,%eax
		mov    %ebx,g_fat_data__PathLength
		call   use_nav_data
		xor    %eax,%eax
		call   ac_count_fnavs
		mov    0x44(%esi),%ecx
		or     $0x20040,%ecx
		xor    %eax,%eax
		mov    %ecx,0x44(%esi)
		add    $0x28,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_c0953:
		mov    0x1c(%esp),%edx
		mov    %dx,0x10(%esp)
		mov    0x20(%esp),%edx
		mov    %dx,0x14(%esp)
		mov    nav_stats__ThisTurn,%edx
		inc    %edx
		mov    %bx,0x18(%esp)
		mov    %edx,nav_stats__ThisTurn
	jump_c0977:
		xor    %edx,%edx
		mov    %ax,%dx
		test   %edx,%edx
		jne    jump_c0a2c
		mov    0x16(%esp),%edx
		sar    $0x10,%edx
		cmp    $0xb,%edx
		jge    jump_c0a2c
		push   $0xfffffffe
		mov    0x1e(%esp),%ebp
		mov    0x22(%esp),%edi
		mov    $g_nav_data,%eax
		mov    0x20(%esi),%ebx
		sar    $0x10,%ebp
		sar    $0x10,%edi
		shl    $0x8,%ebp
		shl    $0x8,%edi
		push   %ebp
		mov    0x18(%esi),%edx
		mov    %edi,%ecx
		call   path_init8_thing
		mov    data_1dc8e0,%ax
		xor    %edx,%edx
		mov    %ax,%dx
		test   %edx,%edx
		jne    jump_c0a22
		mov    $0x1,%ebx
		mov    %edi,data_1dd0ec
		mov    %ebp,data_1dd0f0
		mov    0x18(%esi),%eax
		mov    %edi,g_fat_data__WayPoints__x8
		mov    %eax,g_fat_data
		mov    0x20(%esi),%eax
		mov    %ebp,g_fat_data__WayPoints__y8
		mov    %eax,data_1dd0e8
		mov    %esi,%eax
		mov    %ebx,g_fat_data__PathLength
		call   use_nav_data
		xor    %eax,%eax
		call   ac_count_fnavs
		mov    0x44(%esi),%ecx
		or     $0x20040,%ecx
		xor    %eax,%eax
		mov    %ecx,0x44(%esi)
		add    $0x28,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret
	jump_c0a22:
		incw   0x18(%esp)
		jmp    jump_c0977
	jump_c0a2c:
		cmpw   $0x0,0xc(%esp)
		je     jump_c0a61
		mov    0x12(%esp),%edx
		sar    $0x10,%edx
		shl    $0x8,%edx
		and    $0xffff,%eax
		mov    %edx,data_1dc8e4(,%eax,8)
		mov    0xe(%esp),%edx
		sar    $0x10,%edx
		shl    $0x8,%edx
		mov    %edx,data_1dc8e8(,%eax,8)
		incl   data_1dc8e0
	jump_c0a61:
		mov    $0x80,%ebx
		mov    $g_fat_data,%edx
		mov    $g_nav_data,%eax
		call   fatter_than_nothing
		mov    %esi,%eax
		mov    $0x1,%edx
		call   use_nav_data
		mov    %esi,%eax
		call   ac_unkn_path_func_001
	jump_c0a88:
		mov    $0x1,%eax
	jump_c0a8d:
		add    $0x28,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
ariadne_initialise_route:
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    %eax,%esi
		mov    %edx,%edi
		mov    %ebx,%ebp
		mov    0x18(%eax),%eax
		sar    $0x8,%eax
		test   %eax,%eax
		jl     jump_c0adb
		cmp    $0x8000,%eax
		jge    jump_c0adb
		mov    0x20(%esi),%eax
		sar    $0x8,%eax
		test   %eax,%eax
		jl     jump_c0adb
		cmp    $0x8000,%eax
		jge    jump_c0adb
		test   %edx,%edx
		jl     jump_c0adb
		cmp    $0x8000,%edx
		jge    jump_c0adb
		test   %ebx,%ebx
		jl     jump_c0adb
		cmp    $0x8000,%ebx
		jle    jump_c0ae2
	jump_c0adb:
		xor    %eax,%eax
		jmp    jump_c0c4f
	jump_c0ae2:
		mov    0x20(%esi),%eax
		mov    0x18(%esi),%edx
		sar    $0x10,%eax
		sar    $0x10,%edx
		shl    $0x7,%eax
		add    %eax,%edx
		lea    0x0(,%edx,8),%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%ebx
		add    %edx,%eax
		mov    0xe(%ebx,%eax,2),%cl
		test   %cl,%cl
		je     jump_c0b5e
		mov    %edi,%edx
		sar    $0x8,%edx
		mov    %ebp,%eax
		mov    %edx,(%esp)
		mov    gamep_unknval_14,%edx
		sar    $0x8,%eax
		inc    %edx
		shl    $0x7,%eax
		mov    %edx,gamep_unknval_14
		mov    (%esp),%edx
		add    %eax,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		cmp    0xe(%ebx,%eax,2),%cl
		jne    jump_c0b5e
		mov    $0x1,%eax
		shl    $0x8,%edi
		shl    $0x8,%ebp
		mov    %eax,g_fat_data__PathLength
		mov    %edi,g_fat_data__WayPoints__x8
		mov    %esi,%eax
		mov    %ebp,g_fat_data__WayPoints__y8
		jmp    jump_c0c45
	jump_c0b5e:
		mov    %ebp,%ecx
		mov    %edi,%ebx
		mov    0x20(%esi),%edx
		mov    0x18(%esi),%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		call   func_5fe50
		mov    %ebp,%ebx
		mov    %edi,%edx
		shl    $0x8,%ebx
		shl    $0x8,%edx
		test   %eax,%eax
		je     jump_c0ba9
		mov    $0x1,%ecx
		mov    %edx,g_fat_data__WayPoints__x8
		mov    %ebx,g_fat_data__WayPoints__y8
		mov    %esi,%eax
		mov    %ecx,g_fat_data__PathLength
		call   use_nav_data
		mov    %ecx,%eax
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_c0ba9:
		mov    $0x2,%eax
		mov    data_1aa3ac,%ebp
		mov    data_1aa3b0,%edi
		call   ac_triangulation_select
		push   $0xfffffffe
		mov    nav_stats__ThisTurn,%ecx
		mov    0x18(%esi),%eax
		inc    %ecx
		push   %ebx
		mov    %ecx,nav_stats__ThisTurn
		mov    0x20(%esi),%ebx
		mov    %edx,%ecx
		mov    %eax,%edx
		mov    $g_nav_data,%eax
		call   path_init8_wide
		mov    data_1dc8e0,%eax
		test   %eax,%eax
		je     jump_c0c13
		mov    $0x100,%ebx
		mov    $g_fat_data,%edx
		mov    $g_nav_data,%eax
		call   fatter_than_nothing
		mov    %esi,%eax
		call   use_nav_data
		mov    $0x1,%eax
		call   ac_triangulation_select
		jmp    jump_c0c4a
	jump_c0c13:
		mov    $0xffffffff,%eax
		call   ac_count_fnavs
		shl    $0x8,%ebp
		mov    $0x1,%eax
		shl    $0x8,%edi
		call   ac_triangulation_select
		mov    $0x1,%eax
		mov    %ebp,g_fat_data__WayPoints__x8
		mov    %eax,g_fat_data__PathLength
		mov    %esi,%eax
		mov    %edi,g_fat_data__WayPoints__y8
	jump_c0c45:
		call   use_nav_data
	jump_c0c4a:
		mov    $0x1,%eax
	jump_c0c4f:
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
build_tank_path:	/* 0x0C0C58 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    %eax,%esi
		mov    %edx,%edi
		mov    %ebx,%ebp
		mov    0x18(%eax),%eax
		sar    $0x8,%eax
		test   %eax,%eax
		jl     jump_c0c9f
		cmp    $0x8000,%eax
		jge    jump_c0c9f
		mov    0x20(%esi),%eax
		sar    $0x8,%eax
		test   %eax,%eax
		jl     jump_c0c9f
		cmp    $0x8000,%eax
		jge    jump_c0c9f
		test   %edx,%edx
		jl     jump_c0c9f
		cmp    $0x8000,%edx
		jge    jump_c0c9f
		test   %ebx,%ebx
		jl     jump_c0c9f
		cmp    $0x8000,%ebx
		jle    jump_c0ca6
	jump_c0c9f:
		xor    %eax,%eax
		jmp    jump_c0e39
	jump_c0ca6:
		mov    0x20(%esi),%eax
		mov    0x18(%esi),%edx
		sar    $0x10,%eax
		sar    $0x10,%edx
		shl    $0x7,%eax
		add    %eax,%edx
		lea    0x0(,%edx,8),%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%ebx
		add    %edx,%eax
		mov    0xe(%ebx,%eax,2),%cl
		test   %cl,%cl
		je     jump_c0d27
		mov    %edi,%edx
		sar    $0x8,%edx
		mov    %ebp,%eax
		mov    %edx,(%esp)
		mov    gamep_unknval_14,%edx
		sar    $0x8,%eax
		inc    %edx
		shl    $0x7,%eax
		mov    %edx,gamep_unknval_14
		mov    (%esp),%edx
		add    %eax,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		cmp    0xe(%ebx,%eax,2),%cl
		jne    jump_c0d27
		mov    $0x1,%eax
		mov    $0x1,%edx
		shl    $0x8,%edi
		shl    $0x8,%ebp
		mov    %eax,g_fat_data__PathLength
		mov    %edi,g_fat_data__WayPoints__x8
		mov    %esi,%eax
		mov    %ebp,g_fat_data__WayPoints__y8
		jmp    jump_c0e28
	jump_c0d27:
		mov    %ebp,%ecx
		mov    %edi,%ebx
		mov    0x20(%esi),%edx
		mov    0x18(%esi),%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		call   tank_los
		mov    %ebp,%ebx
		mov    %edi,%edx
		shl    $0x8,%ebx
		shl    $0x8,%edx
		test   %eax,%eax
		je     jump_c0d7b
		mov    $0x1,%ecx
		mov    %edx,g_fat_data__WayPoints__x8
		mov    %ebx,g_fat_data__WayPoints__y8
		mov    %esi,%eax
		mov    %ecx,g_fat_data__PathLength
		call   use_nav_data
		mov    %ecx,%edx
		mov    %esi,%eax
		call   ac_unkn_path_func_001
		mov    %ecx,%eax
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_c0d7b:
		mov    $0x2,%eax
		mov    data_1aa3a4,%ebp
		mov    data_1aa3a8,%edi
		call   ac_triangulation_select
		push   $0xfffffffe
		mov    nav_stats__ThisTurn,%ecx
		mov    0x18(%esi),%eax
		inc    %ecx
		push   %ebx
		mov    %ecx,nav_stats__ThisTurn
		mov    0x20(%esi),%ebx
		mov    %edx,%ecx
		mov    %eax,%edx
		mov    $g_nav_data,%eax
		call   path_init8_tank
		mov    data_1dc8e0,%eax
		test   %eax,%eax
		je     jump_c0df1
		mov    $0x100,%ebx
		mov    $g_fat_data,%edx
		mov    $g_nav_data,%eax
		call   fatter_than_nothing
		mov    %esi,%eax
		mov    $0x1,%edx
		call   use_nav_data
		mov    %esi,%eax
		call   ac_unkn_path_func_001
		mov    $0x1,%eax
		call   ac_triangulation_select
		jmp    jump_c0e34
	jump_c0df1:
		mov    $0xffffffff,%eax
		mov    $0x1,%edx
		call   ac_count_fnavs
		shl    $0x8,%ebp
		mov    $0x1,%eax
		shl    $0x8,%edi
		call   ac_triangulation_select
		mov    $0x1,%eax
		mov    %ebp,g_fat_data__WayPoints__x8
		mov    %eax,g_fat_data__PathLength
		mov    %esi,%eax
		mov    %edi,g_fat_data__WayPoints__y8
	jump_c0e28:
		call   use_nav_data
		mov    %esi,%eax
		call   ac_unkn_path_func_001
	jump_c0e34:
		mov    $0x1,%eax
	jump_c0e39:
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_unkn_path_func_001)	/* 0x0C0ED4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x14,%esp
		mov    %eax,%ebx
		xor    %eax,%eax
		mov    %dl,%al
		cmp    $0x1,%eax
		je     jump_c1014
		mov    0x4c(%ebx),%ax
		xor    %edx,%edx
		mov    %ax,%dx
		mov    %eax,0x10(%esp)
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		movzbw 0x3e(%ebx),%di
		mov    EXPORT_SYMBOL(my_paths)(%eax),%al
		xor    %ah,%ah
		mov    0x18(%ebx),%ecx
		mov    %ax,0x4(%esp)
		mov    0x20(%ebx),%eax
		sar    $0x8,%ecx
		sar    $0x8,%eax
		test   %dx,%dx
		je     jump_c1014
	jump_c0f2d:
		xor    %ebx,%ebx
		mov    0x2(%esp),%edx
		mov    %di,%bx
		sar    $0x10,%edx
		cmp    %edx,%ebx
		jge    jump_c1014
		xor    %edx,%edx
		mov    0x10(%esp),%dx
		imul   $0x13,%edx,%esi
		mov    %edi,%edx
		xor    %dh,%dh
		xor    %ebx,%ebx
		and    $0x3,%dl
		mov    %dx,%bx
		mov    data_1777cd(%esi,%ebx,2),%dx
		mov    %dx,(%esp)
		mov    data_1777d5(%esi,%ebx,2),%dx
		mov    %dx,0x8(%esp)
		movswl %ax,%ebx
		movswl %cx,%esi
		mov    0x6(%esp),%ebp
		mov    %ebx,%edx
		mov    %esi,%eax
		mov    -0x2(%esp),%ecx
		call   ac_alt_at_point
		sar    $0x5,%eax
		sar    $0x10,%ebp
		sar    $0x10,%ecx
		mov    %ax,0xc(%esp)
		mov    %ebp,%edx
		mov    %ecx,%eax
		call   ac_alt_at_point
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbShift),%dl
		sar    $0x5,%eax
		cmp    $0x1,%edx
		jne    jump_c0fca
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(colour_lookup)+2,%dl
		push   %edx
		cwtl
		push   %ebp
		mov    0x12(%esp),%edx
		push   %eax
		sar    $0x10,%edx
		mov    %esi,%eax
		call   ac_func_6fe80
		jmp    jump_c0fe4
	jump_c0fca:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(colour_lookup)+2,%dl
		push   %edx
		cwtl
		push   %ebp
		mov    0x12(%esp),%edx
		push   %eax
		sar    $0x10,%edx
		mov    %esi,%eax
		call   ac_func_6fd1c
	jump_c0fe4:
		mov    (%esp),%ecx
		inc    %edi
		mov    0x8(%esp),%eax
		test   $0x3,%di
		jne    jump_c1008
		xor    %edx,%edx
		mov    0x10(%esp),%dx
		imul   $0x13,%edx,%edx
		mov    EXPORT_SYMBOL(my_paths)+0x11(%edx),%dx
		mov    %edx,0x10(%esp)
	jump_c1008:
		cmpw   $0x0,0x10(%esp)
		jne    jump_c0f2d
	jump_c1014:
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
init_shoot_recoil:	/* 0x0C19F0 */
/*----------------------------------------------------------------*/
		push   %esi
		mov    %eax,%esi
		movswl %cx,%ebx
		neg    %ebx
		movswl %dx,%eax
		mov    %ebx,%edx
		call   ac_arctan
		movswl %ax,%edx
		add    $0x4,%ah
		sar    $0x3,%edx
		and    $0x7,%ah
		mov    %edx,%ebx
		mov    %eax,%edx
		mov    0x47(%esi),%ah
		sar    $0x8,%dx
		test   $0x1,%ah
		jne    jump_c1ac6
		testb  $0x1,0xe(%esi)
		jne    jump_c1ac6
		movb   $0x3,0x7d(%esi)
		xor    %eax,%eax
		mov    %bl,0x98(%esi)
		mov    0x6c(%esi),%al
		mov    %dl,0x57(%esi)
		cmp    $0x10,%eax
		je     jump_c1a46
		mov    %al,0x6d(%esi)
	jump_c1a46:
		xor    %edx,%edx
		mov    0x8(%esi),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		movb   $0x10,0x6c(%esi)
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		add    %eax,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    0x57(%esi),%al
		add    %edx,%eax
		lea    0x0(,%eax,2),%edx
		mov    nstart_ani,%eax
		mov    (%edx,%eax,1),%ax
		xor    %edx,%edx
		mov    0x8(%esi),%dl
		mov    %ax,0x24(%esi)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		mov    0xe(%esi),%ch
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		or     $0x1,%ch
		dec    %eax
		mov    %ch,0xe(%esi)
		mov    %ax,0x26(%esi)
	jump_c1ac6:
		pop    %esi
		ret


/*----------------------------------------------------------------*/
weapon_sweep:	/* 0x0C1AC8 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x10,%esp
		mov    %eax,%esi
		mov    %edx,0xc(%esp)
		mov    %ecx,0x8(%esp)
		mov    0x70(%eax),%eax
		sar    $0x10,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebx
		mov    0x70(%esi),%ax
		shl    $0xa,%eax
		add    $0x3c,%ebx
		shr    $0xd,%ax
		and    $0xffff,%eax
		movswl %bx,%ebx
		shl    $0x4,%eax
		sub    %eax,%ebx
		movswl %bx,%eax
		cmp    $0xa,%eax
		jl     jump_c1c05
		mov    0x18(%esi),%eax
		mov    0xc(%esp),%edx
		sar    $0x8,%eax
		sub    (%edx),%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    0x8(%esp),%edx
		mov    %eax,%ebp
		mov    0x20(%esi),%eax
		mov    (%edx),%edi
		sar    $0x8,%eax
		sub    %edi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    0xc(%esp),%edx
		mov    %eax,%edi
		mov    0x20(%esi),%eax
		mov    (%edx),%edx
		sar    $0x8,%eax
		mov    %edx,(%esp)
		mov    %eax,0x4(%esp)
		mov    0x18(%esi),%eax
		mov    (%esp),%ecx
		sar    $0x8,%eax
		mov    0x8(%esp),%edx
		sub    %eax,%ecx
		mov    (%edx),%edx
		mov    %ecx,%eax
		sub    0x4(%esp),%edx
		neg    %edx
		call   ac_arctan
		mov    %eax,%ecx
		cmp    %edi,%ebp
		jle    jump_c1b6f
		sar    %edi
		jmp    jump_c1b71
	jump_c1b6f:
		sar    %ebp
	jump_c1b71:
		add    %ebp,%edi
		mov    gameturn,%ebp
		movswl %bx,%edx
		xor    %eax,%eax
		add    %edx,%edx
		mov    0x16(%esi),%ax
		mov    %edx,0x4(%esp)
		add    %ebp,%eax
		mov    0x4(%esp),%ebp
		shl    $0x4,%eax
		xor    %edx,%edx
		div    %ebp
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x1f,%al
		sub    $0x10,%eax
		add    %eax,%edx
		cmp    %bx,%dx
		jle    jump_c1bb0
		mov    %ebx,%eax
		add    %ebx,%eax
		sub    %edx,%eax
		mov    %eax,%edx
	jump_c1bb0:
		movswl %bx,%eax
		mov    %eax,%ebx
		sar    %ebx
		movswl %dx,%eax
		sub    %ebx,%eax
		and    $0xffff,%ecx
		add    %eax,%ecx
		add    $0x8,%ch
		xor    %eax,%eax
		and    $0x7,%ch
		mov    %cx,%ax
		mov    EXPORT_SYMBOL(lbSinTable)(,%eax,4),%ebx
		imul   %edi,%ebx
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%eax,4),%edx
		imul   %edi,%edx
		mov    0x18(%esi),%eax
		sar    $0x8,%eax
		sar    $0x10,%ebx
		add    %ebx,%eax
		mov    0xc(%esp),%ebx
		mov    %eax,(%ebx)
		mov    0x20(%esi),%eax
		sar    $0x10,%edx
		sar    $0x8,%eax
		add    %edx,%eax
		mov    0x8(%esp),%edx
		mov    %eax,(%edx)
	jump_c1c05:
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_init_uzi)	/* 0x0C1C0C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x20,%esp
		mov    %eax,%esi
		mov    0x18(%esi),%ecx
		mov    0x20(%esi),%edi
		xor    %ebx,%ebx
		xor    %ah,%ah
		mov    0x57(%esi),%bl
		xor    %edx,%edx
		mov    %ah,0x1c(%esp)
		mov    data_15335a(,%ebx,4),%eax
		mov    %dx,0x14(%esp)
		sar    $0x10,%eax
		mov    EXPORT_SYMBOL(angle_direction)(,%ebx,4),%ebx
		mov    %eax,%edx
		sar    $0x10,%ebx
		shl    $0x7,%edx
		shl    $0x7,%ebx
		add    %ecx,%edx
		add    %ebx,%edi
		mov    %edx,%ebx
		mov    0x1c(%esi),%ebp
		sar    $0x10,%ebx
		add    $0x1400,%ebp
		test   %ebx,%ebx
		jl     jump_c206d
		cmp    $0x80,%ebx
		jge    jump_c206d
		mov    %edi,%ebx
		sar    $0x10,%ebx
		test   %ebx,%ebx
		jl     jump_c206d
		cmp    $0x80,%ebx
		jge    jump_c206d
		testb  $0x20,0xf(%esi)
		je     jump_c1cb5
		mov    0x2c(%esi),%eax
		mov    %eax,(%esp)
		mov    0x30(%esi),%eax
		mov    %eax,0x4(%esp)
		mov    0x34(%esi),%eax
		mov    %eax,0x8(%esp)
		mov    0xf(%esi),%bh
		mov    $0x1,%cl
		and    $0xdf,%bh
		mov    %cl,0x1c(%esp)
		mov    %bh,0xf(%esi)
		jmp    jump_c1d2a
	jump_c1cb5:
		mov    0x40(%esi),%ebx
		test   %ebx,%ebx
		je     jump_c1cf0
		mov    0x18(%ebx),%eax
		sar    $0x8,%eax
		mov    %eax,(%esp)
		mov    0x40(%esi),%eax
		mov    0x1c(%eax),%eax
		sar    $0x8,%eax
		add    $0xa,%eax
		mov    %eax,0x4(%esp)
		mov    0x40(%esi),%eax
		mov    0x20(%eax),%eax
		sar    $0x8,%eax
		mov    %eax,0x8(%esp)
		mov    0x40(%esi),%eax
		mov    0x16(%eax),%ax
		mov    %ax,0x14(%esp)
		jmp    jump_c1d2a
	jump_c1cf0:
		mov    EXPORT_SYMBOL(weapon_defs)+25,%bx # sizeof(struct WeaponDef) * 1
		imul   %ebx,%eax
		mov    %edx,%ecx
		sar    $0x8,%ecx
		add    %eax,%ecx
		mov    %ebp,%eax
		sar    $0x8,%eax
		mov    %ecx,(%esp)
		mov    %eax,0x4(%esp)
		xor    %eax,%eax
		mov    0x57(%esi),%al
		mov    EXPORT_SYMBOL(angle_direction)(,%eax,4),%eax
		sar    $0x10,%eax
		imul   %eax,%ebx
		mov    %edi,%eax
		sar    $0x8,%eax
		add    %ebx,%eax
		mov    %eax,0x8(%esp)
	jump_c1d2a:
		lea    0x18(%esp),%eax
		mov    %esp,%ecx
		sar    $0x8,%edi
		push   %eax
		sar    $0x8,%ebp
		push   %esi
		mov    %edi,0x14(%esp)
		lea    0x10(%esp),%eax
		push   $0x32
		mov    0x18(%esp),%ebx
		mov    %edx,%edi
		push   %eax
		lea    0x14(%esp),%eax
		sar    $0x8,%edi
		push   %eax
		mov    %ebp,%edx
		mov    %edi,%eax
		call   bul_path_end
		mov    (%esp),%edx
		mov    0x4(%esp),%ebx
		mov    0x8(%esp),%ecx
		mov    %eax,0x10(%esp)
		sub    %edi,%edx
		mov    0xc(%esp),%edi
		sub    %ebp,%ebx
		sub    %edi,%ecx
		test   %eax,%eax
		jle    jump_c1e05
		test   $0x20000000,%eax
		jne    jump_c200b
		test   $0x40000000,%eax
		je     jump_c1dcc
		push   $0x1
		push   %esi
		mov    %eax,%esi
		and    $0xbfffffff,%esi
		neg    %esi
		movswl %cx,%ecx
		mov    %esi,%eax
		push   %ecx
		shl    $0x4,%eax
		movswl %bx,%ecx
		sub    %esi,%eax
		movswl %dx,%ebx
		lea    0x0(,%eax,4),%esi
		mov    EXPORT_SYMBOL(weapon_defs)+25,%edx # sizeof(struct WeaponDef) * 1
		mov    EXPORT_SYMBOL(sthings),%eax
		sar    $0x10,%edx
		add    %esi,%eax
		call   ac_person_hit_by_bullet
		jmp    jump_c200b
	jump_c1dcc:
		push   $0x1
		push   %esi
		movswl %cx,%ecx
		push   %ecx
		movswl %bx,%ecx
		movswl %dx,%ebx
		mov    %eax,%edx
		shl    $0x2,%eax
		add    %edx,%eax
		shl    $0x2,%eax
		mov    EXPORT_SYMBOL(weapon_defs)+25,%esi # sizeof(struct WeaponDef) * 1
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		sar    $0x10,%esi
		add    %edx,%eax
		mov    %esi,%edx
		call   ac_person_hit_by_bullet
		jmp    jump_c200b
	jump_c1e05:
		jge    jump_c1e3b
		xor    %eax,%eax
		mov    0x18(%esp),%al
		cmp    $0x1,%eax
		jne    jump_c1e2f
		mov    0x8(%esp),%ebx
		push   %eax
		mov    0x14(%esp),%eax
		mov    0x8(%esp),%edx
		neg    %eax
		push   $0x4
		movswl %ax,%ecx
		mov    0x8(%esp),%eax
		call   ac_bul_hit_vector
	jump_c1e2f:
		orb    $0x40,0x80(%esi)
		jmp    jump_c200b
	jump_c1e3b:
		cmpw   $0x0,0x14(%esp)
		je     jump_c1f15
		movswl %cx,%eax
		movswl %bx,%ecx
		movswl %dx,%ebx
		mov    0x12(%esp),%edx
		push   $0x1
		sar    $0x10,%edx
		push   %esi
		lea    0x0(,%edx,4),%esi
		mov    EXPORT_SYMBOL(weapon_defs)+25,%edi # sizeof(struct WeaponDef) * 1
		add    %edx,%esi
		sar    $0x10,%edi
		shl    $0x2,%esi
		push   %eax
		add    %edx,%esi
		mov    things,%eax
		shl    $0x3,%esi
		mov    %edi,%edx
		add    %esi,%eax
		call   ac_person_hit_by_bullet
		mov    things,%eax
		add    %esi,%eax
		testb  $0x2,0xc(%eax)
		je     jump_c206d
		push   $0x28
		mov    0x20(%eax),%ebx
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		sar    $0x8,%ebx
		and    $0x3f,%al
		and    $0xffff,%eax
		add    %eax,%ebx
		mov    things,%eax
		sub    $0x20,%ebx
		mov    0x1c(%esi,%eax,1),%edx
		mov    0x18(%esi,%eax,1),%ecx
		call   ac_LbRandomAnyShort
		sar    $0x8,%edx
		xor    %ah,%ah
		sar    $0x8,%ecx
		and    $0x3f,%al
		and    $0xffff,%eax
		add    %ecx,%eax
		mov    $0x41e,%ecx
		sub    $0x20,%eax
		call   create_scale_effect
		test   %eax,%eax
		je     jump_c206d
		push   $0x1
		mov    $0x40,%ecx
		push   $0x0
		mov    $0x7f,%ebx
		movb   $0x3a,0x8(%eax)
		push   $0x64
		mov    $0x44,%edx
		movw   $0x100,0x12(%eax)
		call   ac_play_dist_ssample
		add    $0x20,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_c1f15:
		cmpb   $0x0,0x1c(%esp)
		je     jump_c200b
		mov    (%esp),%edx
		sar    $0x8,%edx
		test   %edx,%edx
		jl     jump_c206d
		cmp    $0x80,%edx
		jge    jump_c206d
		mov    0x8(%esp),%eax
		sar    $0x8,%eax
		test   %eax,%eax
		jl     jump_c206d
		cmp    $0x80,%eax
		jge    jump_c206d
		shl    $0x7,%eax
		add    %eax,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    (%edx,%eax,2),%ax
		and    $0x3f,%ah
		cwtl
		call   ac_get_my_texture_bits
		test   $0x2,%al
		je     jump_c1ff2
		mov    (%esp),%ecx
		push   $0x8
		mov    0xa(%esp),%edx
		mov    0x2(%esp),%eax
		xor    %ebx,%ebx
		sar    $0x10,%edx
		sar    $0x10,%eax
		mov    0xc(%esp),%bx
		call   ac_alt_at_point
		mov    %eax,%edx
		xor    %eax,%eax
		sar    $0x8,%edx
		mov    %cx,%ax
		mov    $0x43f,%ecx
		call   create_scale_effect
		mov    %eax,%esi
		test   %eax,%eax
		je     jump_c206d
		call   ac_LbRandomAnyShort
		push   $0x3
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		xor    %ah,%ah
		push   $0x0
		and    $0x7f,%al
		mov    $0x3,%edx
		add    $0x3e,%eax
		push   $0x64
		mov    %ax,0x12(%esi)
		mov    %esi,%eax
		movb   $0x3c,0x8(%esi)
		call   ac_play_dist_ssample
		add    $0x20,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_c1ff2:
		push   %esi
		mov    $0xffffffce,%ecx
		mov    0xc(%esp),%ebx
		push   $0x1
		mov    0xc(%esp),%edx
		mov    0x8(%esp),%eax
		call   do_shockwave
	jump_c200b:
		cmpl   $0x0,0x10(%esp)
		jle    jump_c201c
		movzbw EXPORT_SYMBOL(colour_lookup)+2,%si
		jmp    jump_c2024
	jump_c201c:
		movzbw EXPORT_SYMBOL(colour_lookup)+0x05,%si
	jump_c2024:
		xor    %ecx,%ecx
		jmp    jump_c2051
	jump_c2028:
		movw   $0x3,0x28(%eax)
		mov    0x2c(%eax),%dx
		mov    0x2e(%eax),%bx
		mov    0x30(%eax),%di
		mov    %si,0x12(%eax)
		add    %edx,%edx
		add    %ebx,%ebx
		mov    %dx,0x2c(%eax)
		add    %edi,%edi
		mov    %bx,0x2e(%eax)
		inc    %ecx
		mov    %di,0x30(%eax)
	jump_c2051:
		movswl %cx,%eax
		cmp    $0x4,%eax
		jge    jump_c206d
		mov    0x8(%esp),%ebx
		mov    0x4(%esp),%edx
		mov    (%esp),%eax
		call   init_spark
		test   %eax,%eax
		jne    jump_c2028
	jump_c206d:
		add    $0x20,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_init_long_range)	/* 0x0C2078 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x28,%esp
		mov    %eax,%esi
		xor    %ah,%ah
		mov    %ah,0x20(%esp)
		xor    %eax,%eax
		mov    0x57(%esi),%al
		mov    data_15335a(,%eax,4),%ebx
		mov    0x18(%esi),%edx
		sar    $0x10,%ebx
		mov    EXPORT_SYMBOL(angle_direction)(,%eax,4),%eax
		mov    %ebx,%ebp
		sar    $0x10,%eax
		shl    $0x7,%ebp
		shl    $0x7,%eax
		add    %edx,%ebp
		mov    0x20(%esi),%edx
		add    %eax,%edx
		mov    0x1c(%esi),%eax
		mov    0xf(%esi),%cl
		add    $0x1400,%eax
		xor    %edi,%edi
		mov    %eax,0x1c(%esp)
		test   $0x20,%cl
		je     jump_c20f2
		mov    0x2c(%esi),%eax
		mov    %eax,(%esp)
		mov    0x30(%esi),%eax
		mov    %eax,0x4(%esp)
		mov    0x34(%esi),%eax
		mov    %eax,0x8(%esp)
		mov    0xf(%esi),%ch
		mov    $0x1,%al
		and    $0xdf,%ch
		mov    %al,0x20(%esp)
		mov    %ch,0xf(%esi)
		jmp    jump_c216d
	jump_c20f2:
		mov    0x40(%esi),%ecx
		test   %ecx,%ecx
		je     jump_c2128
		mov    0x18(%ecx),%eax
		sar    $0x8,%eax
		mov    %eax,(%esp)
		mov    0x40(%esi),%eax
		mov    0x1c(%eax),%eax
		sar    $0x8,%eax
		add    $0xa,%eax
		mov    %eax,0x4(%esp)
		mov    0x40(%esi),%eax
		mov    0x20(%eax),%eax
		sar    $0x8,%eax
		mov    %eax,0x8(%esp)
		mov    0x40(%esi),%edi
		mov    0x16(%edi),%di
		jmp    jump_c216d
	jump_c2128:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(weapon_defs)+25,%ax # sizeof(struct WeaponDef) * 1
		imul   %eax,%ebx
		mov    %ebx,0xc(%esp)
		mov    %ebp,%ebx
		mov    0xc(%esp),%ecx
		sar    $0x8,%ebx
		add    %ebx,%ecx
		mov    0x1c(%esp),%ebx
		sar    $0x8,%ebx
		mov    %ecx,(%esp)
		mov    %ebx,0x4(%esp)
		xor    %ebx,%ebx
		mov    0x57(%esi),%bl
		mov    EXPORT_SYMBOL(angle_direction)(,%ebx,4),%ebx
		sar    $0x10,%ebx
		imul   %eax,%ebx
		mov    %edx,%eax
		sar    $0x8,%eax
		add    %ebx,%eax
		mov    %eax,0x8(%esp)
	jump_c216d:
		lea    0x24(%esp),%eax
		push   %eax
		push   %esi
		lea    0x8(%esp),%ecx
		lea    0x10(%esp),%eax
		push   $0x32
		sar    $0x8,%edx
		push   %eax
		lea    0x14(%esp),%eax
		sar    $0x8,%ebp
		push   %eax
		mov    0x30(%esp),%eax
		mov    %edx,0x24(%esp)
		sar    $0x8,%eax
		mov    %edx,%ebx
		mov    %eax,0x28(%esp)
		mov    %eax,%edx
		mov    %ebp,%eax
		call   bul_path_end
		mov    (%esp),%ebx
		mov    0x4(%esp),%ecx
		sub    %ebp,%ebx
		mov    0x14(%esp),%ebp
		mov    0x8(%esp),%edx
		sub    %ebp,%ecx
		mov    0x10(%esp),%ebp
		mov    %eax,0x18(%esp)
		sub    %ebp,%edx
		test   %eax,%eax
		jle    jump_c2253
		test   $0x20000000,%eax
		jne    jump_c2455
		test   $0x40000000,%eax
		je     jump_c221b
		push   $0x8
		push   %esi
		movswl %cx,%esi
		mov    %eax,%ecx
		and    $0xbfffffff,%ecx
		neg    %ecx
		mov    %ecx,%eax
		movswl %dx,%edx
		shl    $0x4,%eax
		movswl %bx,%ebx
		sub    %ecx,%eax
		push   %edx
		lea    0x0(,%eax,4),%ecx
		mov    EXPORT_SYMBOL(weapon_defs)+375,%edx # sizeof(struct WeaponDef) * 15
		mov    EXPORT_SYMBOL(sthings),%eax
		sar    $0x10,%edx
		add    %ecx,%eax
		mov    %esi,%ecx
		call   ac_person_hit_by_bullet
		jmp    jump_c2455
	jump_c221b:
		push   $0x8
		push   %esi
		movswl %dx,%edx
		push   %edx
		mov    %eax,%edx
		shl    $0x2,%eax
		movswl %cx,%ecx
		add    %edx,%eax
		movswl %bx,%ebx
		shl    $0x2,%eax
		mov    EXPORT_SYMBOL(weapon_defs)+375,%esi # sizeof(struct WeaponDef) * 15
		add    %eax,%edx
		mov    things,%eax
		shl    $0x3,%edx
		sar    $0x10,%esi
		add    %edx,%eax
		mov    %esi,%edx
		call   ac_person_hit_by_bullet
		jmp    jump_c2455
	jump_c2253:
		jge    jump_c228a
		xor    %eax,%eax
		mov    0x24(%esp),%al
		cmp    $0x1,%eax
		jne    jump_c227e
		push   $0x2
		mov    0x1c(%esp),%eax
		mov    0xc(%esp),%ebx
		mov    0x8(%esp),%edx
		neg    %eax
		push   $0x4
		movswl %ax,%ecx
		mov    0x8(%esp),%eax
		call   ac_bul_hit_vector
	jump_c227e:
		orb    $0x40,0x80(%esi)
		jmp    jump_c2455
	jump_c228a:
		test   %di,%di
		je     jump_c235f
		push   $0x8
		mov    EXPORT_SYMBOL(weapon_defs)+375,%ebp # sizeof(struct WeaponDef) * 15
		movswl %dx,%eax
		xor    %edx,%edx
		movswl %cx,%ecx
		mov    %di,%dx
		push   %esi
		lea    0x0(,%edx,4),%esi
		movswl %bx,%ebx
		add    %edx,%esi
		sar    $0x10,%ebp
		shl    $0x2,%esi
		push   %eax
		add    %edx,%esi
		mov    things,%eax
		shl    $0x3,%esi
		mov    %ebp,%edx
		add    %esi,%eax
		call   ac_person_hit_by_bullet
		mov    things,%eax
		add    %esi,%eax
		testb  $0x2,0xc(%eax)
		je     jump_c24b7
		push   $0x28
		mov    0x20(%eax),%edx
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		xor    %ebx,%ebx
		and    $0x3f,%al
		sar    $0x8,%edx
		mov    %ax,%bx
		add    %edx,%ebx
		mov    things,%eax
		sub    $0x20,%ebx
		mov    0x1c(%esi,%eax,1),%edx
		mov    0x18(%esi,%eax,1),%ecx
		call   ac_LbRandomAnyShort
		sar    $0x8,%edx
		xor    %ah,%ah
		sar    $0x8,%ecx
		and    $0x3f,%al
		and    $0xffff,%eax
		add    %ecx,%eax
		mov    $0x41e,%ecx
		sub    $0x20,%eax
		call   create_scale_effect
		test   %eax,%eax
		je     jump_c24b7
		push   $0x1
		mov    $0x40,%ecx
		push   $0x0
		mov    $0x7f,%ebx
		movb   $0x3a,0x8(%eax)
		push   $0x64
		mov    $0x44,%edx
		movw   $0x100,0x12(%eax)
		call   ac_play_dist_ssample
		add    $0x28,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_c235f:
		cmpb   $0x0,0x20(%esp)
		je     jump_c2455
		mov    (%esp),%edx
		sar    $0x8,%edx
		test   %edx,%edx
		jl     jump_c24b7
		cmp    $0x80,%edx
		jge    jump_c24b7
		mov    0x8(%esp),%eax
		sar    $0x8,%eax
		test   %eax,%eax
		jl     jump_c24b7
		cmp    $0x80,%eax
		jge    jump_c24b7
		shl    $0x7,%eax
		add    %eax,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    (%edx,%eax,2),%ax
		and    $0x3f,%ah
		cwtl
		call   ac_get_my_texture_bits
		test   $0x2,%al
		je     jump_c243c
		mov    (%esp),%ecx
		push   $0x1
		mov    0xa(%esp),%edx
		mov    0x2(%esp),%eax
		xor    %ebx,%ebx
		sar    $0x10,%edx
		sar    $0x10,%eax
		mov    0xc(%esp),%bx
		call   ac_alt_at_point
		mov    %eax,%edx
		xor    %eax,%eax
		sar    $0x8,%edx
		mov    %cx,%ax
		mov    $0x43f,%ecx
		call   create_scale_effect
		mov    %eax,%esi
		test   %eax,%eax
		je     jump_c24b7
		call   ac_LbRandomAnyShort
		push   $0x3
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		xor    %ah,%ah
		push   $0x0
		and    $0x7f,%al
		mov    $0x3,%edx
		add    $0x3e,%eax
		push   $0x64
		mov    %ax,0x12(%esi)
		mov    %esi,%eax
		movb   $0x3c,0x8(%esi)
		call   ac_play_dist_ssample
		add    $0x28,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_c243c:
		push   %esi
		mov    $0xffffffce,%ecx
		mov    0xc(%esp),%ebx
		push   $0x1
		mov    0xc(%esp),%edx
		mov    0x8(%esp),%eax
		call   do_shockwave
	jump_c2455:
		cmpl   $0x0,0x18(%esp)
		jle    jump_c2466
		movzbw EXPORT_SYMBOL(colour_lookup)+2,%si
		jmp    jump_c246e
	jump_c2466:
		movzbw EXPORT_SYMBOL(colour_lookup)+0x05,%si
	jump_c246e:
		xor    %ecx,%ecx
		jmp    jump_c249b
	jump_c2472:
		movw   $0x3,0x28(%eax)
		mov    0x2c(%eax),%dx
		mov    0x2e(%eax),%bx
		mov    0x30(%eax),%di
		mov    %si,0x12(%eax)
		add    %edx,%edx
		add    %ebx,%ebx
		mov    %dx,0x2c(%eax)
		add    %edi,%edi
		mov    %bx,0x2e(%eax)
		inc    %ecx
		mov    %di,0x30(%eax)
	jump_c249b:
		movswl %cx,%eax
		cmp    $0x4,%eax
		jge    jump_c24b7
		mov    0x8(%esp),%ebx
		mov    0x4(%esp),%edx
		mov    (%esp),%eax
		call   init_spark
		test   %eax,%eax
		jne    jump_c2472
	jump_c24b7:
		add    $0x28,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_init_minigun)	/* 0x0C24C4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x2c,%esp
		mov    %eax,%esi
		mov    0x18(%esi),%ecx
		xor    %edx,%edx
		xor    %ah,%ah
		mov    0x57(%esi),%dl
		xor    %edi,%edi
		mov    %ah,0x24(%esp)
		mov    data_15335a(,%edx,4),%eax
		mov    EXPORT_SYMBOL(angle_direction)(,%edx,4),%ebp
		sar    $0x10,%eax
		sar    $0x10,%ebp
		mov    0x20(%esi),%edx
		shl    $0x7,%ebp
		mov    %eax,%ebx
		add    %edx,%ebp
		mov    0x1c(%esi),%edx
		shl    $0x7,%ebx
		add    $0x1400,%edx
		add    %ebx,%ecx
		mov    %edx,0x20(%esp)
		mov    0xf(%esi),%dl
		mov    %ecx,0x1c(%esp)
		test   $0x20,%dl
		je     jump_c2540
		mov    0x2c(%esi),%eax
		mov    %eax,(%esp)
		mov    0x30(%esi),%eax
		mov    %eax,0x4(%esp)
		mov    0x34(%esi),%eax
		mov    %eax,0x8(%esp)
		mov    0xf(%esi),%dh
		mov    $0x1,%bl
		and    $0xdf,%dh
		mov    %bl,0x24(%esp)
		mov    %dh,0xf(%esi)
		jmp    jump_c25b4
	jump_c2540:
		mov    0x40(%esi),%ebx
		test   %ebx,%ebx
		je     jump_c2576
		mov    0x18(%ebx),%eax
		sar    $0x8,%eax
		mov    %eax,(%esp)
		mov    0x40(%esi),%eax
		mov    0x1c(%eax),%eax
		sar    $0x8,%eax
		add    $0xa,%eax
		mov    %eax,0x4(%esp)
		mov    0x40(%esi),%eax
		mov    0x20(%eax),%eax
		sar    $0x8,%eax
		mov    %eax,0x8(%esp)
		mov    0x40(%esi),%edi
		mov    0x16(%edi),%di
		jmp    jump_c25b4
	jump_c2576:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(weapon_defs)+25,%dx # sizeof(struct WeaponDef) * 1
		imul   %edx,%eax
		mov    %ecx,%ebx
		sar    $0x8,%ebx
		add    %eax,%ebx
		mov    0x20(%esp),%eax
		sar    $0x8,%eax
		mov    %ebx,(%esp)
		mov    %eax,0x4(%esp)
		xor    %eax,%eax
		mov    0x57(%esi),%al
		mov    EXPORT_SYMBOL(angle_direction)(,%eax,4),%eax
		sar    $0x10,%eax
		imul   %eax,%edx
		mov    %ebp,%eax
		sar    $0x8,%eax
		add    %edx,%eax
		mov    %eax,0x8(%esp)
	jump_c25b4:
		lea    0x8(%esp),%ecx
		lea    0x4(%esp),%ebx
		mov    %esp,%edx
		mov    %esi,%eax
		call   weapon_sweep
		lea    0x28(%esp),%eax
		push   %eax
		sar    $0x8,%ebp
		push   %esi
		lea    0x8(%esp),%ecx
		mov    %ebp,0x14(%esp)
		push   $0x32
		lea    0x14(%esp),%eax
		mov    0x2c(%esp),%ebp
		push   %eax
		lea    0x14(%esp),%eax
		mov    0x1c(%esp),%ebx
		push   %eax
		mov    0x30(%esp),%eax
		sar    $0x8,%ebp
		sar    $0x8,%eax
		mov    %ebp,%edx
		mov    %eax,0x24(%esp)
		call   bul_path_end
		mov    (%esp),%ecx
		mov    0x10(%esp),%edx
		mov    0x4(%esp),%ebx
		sub    %edx,%ecx
		sub    %ebp,%ebx
		mov    0x8(%esp),%edx
		mov    0xc(%esp),%ebp
		mov    %eax,0x18(%esp)
		sub    %ebp,%edx
		test   %eax,%eax
		jle    jump_c26b5
		test   $0x20000000,%eax
		jne    jump_c28c6
		test   $0x40000000,%eax
		je     jump_c2678
		push   $0x7
		push   %esi
		movswl %dx,%edx
		push   %edx
		mov    %eax,%edx
		mov    EXPORT_SYMBOL(weapon_defs)+50,%ebp # sizeof(struct WeaponDef) * 2
		and    $0xbfffffff,%edx
		movswl %bx,%ebx
		neg    %edx
		sar    $0x10,%ebp
		mov    %edx,%eax
		movswl %cx,%esi
		shl    $0x4,%eax
		mov    %ebx,%ecx
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(sthings),%edx
		shl    $0x2,%eax
		mov    %esi,%ebx
		add    %edx,%eax
		mov    %ebp,%edx
		call   ac_person_hit_by_bullet
		jmp    jump_c28c6
	jump_c2678:
		push   $0x7
		mov    EXPORT_SYMBOL(weapon_defs)+50,%ebp # sizeof(struct WeaponDef) * 2
		movswl %dx,%edx
		push   %esi
		movswl %bx,%ebx
		push   %edx
		mov    %eax,%edx
		shl    $0x2,%eax
		sar    $0x10,%ebp
		add    %edx,%eax
		movswl %cx,%esi
		shl    $0x2,%eax
		mov    %ebx,%ecx
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		mov    %esi,%ebx
		add    %edx,%eax
		mov    %ebp,%edx
		call   ac_person_hit_by_bullet
		jmp    jump_c28c6
	jump_c26b5:
		jge    jump_c26f0
		xor    %eax,%eax
		mov    0x28(%esp),%al
		cmp    $0x1,%eax
		jne    jump_c28c6
		push   $0x3
		mov    0x1c(%esp),%eax
		mov    0xc(%esp),%ebx
		mov    0x8(%esp),%edx
		neg    %eax
		push   $0x4
		movswl %ax,%ecx
		mov    0x8(%esp),%eax
		call   ac_bul_hit_vector
		orb    $0x40,0x80(%esi)
		jmp    jump_c28c6
	jump_c26f0:
		test   %di,%di
		je     jump_c27cf
		push   $0x7
		mov    EXPORT_SYMBOL(weapon_defs)+50,%ebp # sizeof(struct WeaponDef) * 2
		movswl %dx,%eax
		movswl %bx,%ebx
		push   %esi
		sar    $0x10,%ebp
		xor    %edx,%edx
		push   %eax
		mov    %di,%dx
		movswl %cx,%eax
		lea    0x0(,%edx,4),%esi
		mov    %eax,0x20(%esp)
		add    %edx,%esi
		mov    %ebx,%ecx
		shl    $0x2,%esi
		mov    0x20(%esp),%ebx
		add    %edx,%esi
		mov    things,%eax
		shl    $0x3,%esi
		mov    %ebp,%edx
		add    %esi,%eax
		call   ac_person_hit_by_bullet
		mov    things,%eax
		add    %esi,%eax
		testb  $0x2,0xc(%eax)
		je     jump_c2928
		push   $0x28
		mov    0x20(%eax),%edx
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		sar    $0x8,%edx
		and    $0x3f,%al
		and    $0xffff,%eax
		add    %edx,%eax
		lea    -0x20(%eax),%ebx
		mov    things,%eax
		mov    0x1c(%esi,%eax,1),%edx
		mov    0x18(%esi,%eax,1),%ecx
		call   ac_LbRandomAnyShort
		sar    $0x8,%edx
		xor    %ah,%ah
		sar    $0x8,%ecx
		and    $0x3f,%al
		and    $0xffff,%eax
		add    %ecx,%eax
		mov    $0x41e,%ecx
		sub    $0x20,%eax
		call   create_scale_effect
		test   %eax,%eax
		je     jump_c2928
		push   $0x1
		mov    $0x40,%ecx
		push   $0x0
		mov    $0x7f,%ebx
		movb   $0x3a,0x8(%eax)
		push   $0x64
		mov    $0x44,%edx
		movw   $0x100,0x12(%eax)
		call   ac_play_dist_ssample
		add    $0x2c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_c27cf:
		cmpb   $0x0,0x24(%esp)
		je     jump_c28c6
		mov    (%esp),%edx
		sar    $0x8,%edx
		test   %edx,%edx
		jl     jump_c2928
		cmp    $0x80,%edx
		jge    jump_c2928
		mov    0x8(%esp),%eax
		sar    $0x8,%eax
		test   %eax,%eax
		jl     jump_c2928
		cmp    $0x80,%eax
		jge    jump_c2928
		shl    $0x7,%eax
		add    %eax,%edx
		lea    0x0(,%edx,8),%eax
		add    %eax,%edx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %edx,%edx
		mov    (%edx,%eax,1),%ax
		and    $0x3f,%ah
		cwtl
		call   ac_get_my_texture_bits
		test   $0x2,%al
		je     jump_c28ad
		mov    (%esp),%ecx
		push   $0x8
		mov    0xa(%esp),%edx
		mov    0x2(%esp),%eax
		xor    %ebx,%ebx
		sar    $0x10,%edx
		sar    $0x10,%eax
		mov    0xc(%esp),%bx
		call   ac_alt_at_point
		mov    %eax,%edx
		xor    %eax,%eax
		sar    $0x8,%edx
		mov    %cx,%ax
		mov    $0x43f,%ecx
		call   create_scale_effect
		mov    %eax,%esi
		test   %eax,%eax
		je     jump_c2928
		call   ac_LbRandomAnyShort
		push   $0x3
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		xor    %ah,%ah
		push   $0x0
		and    $0x7f,%al
		mov    $0x3,%edx
		add    $0x3e,%eax
		push   $0x64
		mov    %ax,0x12(%esi)
		mov    %esi,%eax
		movb   $0x3c,0x8(%esi)
		call   ac_play_dist_ssample
		add    $0x2c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_c28ad:
		push   %esi
		mov    $0xffffffce,%ecx
		mov    0xc(%esp),%ebx
		push   $0x1
		mov    0xc(%esp),%edx
		mov    0x8(%esp),%eax
		call   do_shockwave
	jump_c28c6:
		cmpl   $0x0,0x18(%esp)
		jle    jump_c28d7
		movzbw EXPORT_SYMBOL(colour_lookup)+2,%si
		jmp    jump_c28df
	jump_c28d7:
		movzbw EXPORT_SYMBOL(colour_lookup)+0x05,%si
	jump_c28df:
		xor    %ecx,%ecx
		jmp    jump_c290c
	jump_c28e3:
		movw   $0x3,0x28(%eax)
		mov    0x2c(%eax),%dx
		mov    0x2e(%eax),%bx
		mov    0x30(%eax),%di
		mov    %si,0x12(%eax)
		add    %edx,%edx
		add    %ebx,%ebx
		mov    %dx,0x2c(%eax)
		add    %edi,%edi
		mov    %bx,0x2e(%eax)
		inc    %ecx
		mov    %di,0x30(%eax)
	jump_c290c:
		movswl %cx,%eax
		cmp    $0x4,%eax
		jge    jump_c2928
		mov    0x8(%esp),%ebx
		mov    0x4(%esp),%edx
		mov    (%esp),%eax
		call   init_spark
		test   %eax,%eax
		jne    jump_c28e3
	jump_c2928:
		add    $0x2c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
create_time_pod:	/* 0x0C2934 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    %eax,%esi
		mov    %dx,(%esp)
		mov    %ecx,%edi
		mov    %ebx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(sthings_used),%dx
		cmp    $0x5d7,%edx
		jle    jump_c295b
		xor    %edx,%edx
		jmp    jump_c29f8
	jump_c295b:
		movswl %si,%ebx
		test   %ebx,%ebx
		jl     jump_c2979
		cmp    $0x8000,%ebx
		jg     jump_c2979
		movswl %ax,%ecx
		test   %ecx,%ecx
		jl     jump_c2979
		cmp    $0x8000,%ecx
		jle    jump_c2983
	jump_c2979:
		xor    %edx,%edx
		mov    %edx,%eax
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret
	jump_c2983:
		call   ac_get_new_sthing
		test   %ax,%ax
		jne    jump_c2997
		xor    %edx,%edx
		mov    %edx,%eax
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret
	jump_c2997:
		cwtl
		cmp    $0xffffffff,%eax
		jg     jump_c29a4
		cmp    $0xfffffa24,%eax
		jge    jump_c29ae
	jump_c29a4:
		xor    %edx,%edx
		mov    %edx,%eax
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret
	jump_c29ae:
		mov    %eax,%edx
		shl    $0x4,%edx
		sub    %eax,%edx
		mov    EXPORT_SYMBOL(sthings),%esi
		shl    $0x2,%edx
		add    %esi,%edx
		movw   $0x0,0x14(%edx)
		movw   $0x0,0x26(%edx)
		movb   $0x1e,0x9(%edx)
		shl    $0x8,%ebx
		movw   $0x0,0xa(%edx)
		shl    $0x8,%ecx
		mov    %ebx,0x18(%edx)
		mov    -0x2(%esp),%ebx
		mov    %ecx,0x20(%edx)
		sar    $0x10,%ebx
		mov    %di,0x28(%edx)
		shl    $0x8,%ebx
		mov    %ebx,0x1c(%edx)
		call   ac_add_node_sthing
	jump_c29f8:
		mov    %edx,%eax
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
create_stasis_pod:	/* 0x0C2A00 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    %dx,(%esp)
		mov    %ecx,%edi
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(sthings_used),%dx
		cmp    $0x5d7,%edx
		jle    jump_c2a23
		xor    %edx,%edx
		jmp    jump_c2ad6
	jump_c2a23:
		movswl %ax,%ecx
		test   %ecx,%ecx
		jl     jump_c2a41
		cmp    $0x8000,%ecx
		jg     jump_c2a41
		movswl %bx,%ebx
		test   %ebx,%ebx
		jl     jump_c2a41
		cmp    $0x8000,%ebx
		jle    jump_c2a4d
	jump_c2a41:
		xor    %edx,%edx
		mov    %edx,%eax
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret    $0x4
	jump_c2a4d:
		call   ac_get_new_sthing
		test   %ax,%ax
		jne    jump_c2a63
		xor    %edx,%edx
		mov    %edx,%eax
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret    $0x4
	jump_c2a63:
		cwtl
		cmp    $0xffffffff,%eax
		jg     jump_c2a70
		cmp    $0xfffffa24,%eax
		jge    jump_c2a7c
	jump_c2a70:
		xor    %edx,%edx
		mov    %edx,%eax
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret    $0x4
	jump_c2a7c:
		mov    %eax,%edx
		shl    $0x4,%edx
		sub    %eax,%edx
		lea    0x0(,%edx,4),%esi
		mov    EXPORT_SYMBOL(sthings),%edx
		add    %esi,%edx
		movw   $0x0,0x14(%edx)
		movw   $0x0,0x26(%edx)
		shl    $0x8,%ebx
		movb   $0x24,0x9(%edx)
		shl    $0x8,%ecx
		mov    %ebx,0x20(%edx)
		mov    -0x2(%esp),%ebx
		movw   $0x0,0xa(%edx)
		sar    $0x10,%ebx
		mov    %ecx,0x18(%edx)
		shl    $0x8,%ebx
		mov    %ebx,0x1c(%edx)
		mov    0x10(%esp),%ebx
		mov    %di,0x28(%edx)
		mov    0x16(%ebx),%bx
		mov    %bx,0x38(%edx)
		call   ac_add_node_sthing
	jump_c2ad6:
		mov    %edx,%eax
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_init_time_gun)	/* 0x0C2AE0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x14,%esp
		mov    %eax,%esi
		xor    %eax,%eax
		mov    0x57(%esi),%al
		mov    0x18(%esi),%edx
		mov    data_15335a(,%eax,4),%ecx
		mov    0x20(%esi),%ebx
		sar    $0x10,%ecx
		mov    EXPORT_SYMBOL(angle_direction)(,%eax,4),%eax
		mov    %ecx,%edi
		sar    $0x10,%eax
		shl    $0x7,%edi
		shl    $0x7,%eax
		add    %edx,%edi
		add    %eax,%ebx
		mov    0xf(%esi),%ah
		mov    0x1c(%esi),%edx
		test   $0x20,%ah
		je     jump_c2b3b
		mov    0x2c(%esi),%eax
		mov    %eax,(%esp)
		mov    0x30(%esi),%eax
		mov    %eax,0x4(%esp)
		mov    0x34(%esi),%eax
		mov    %eax,0x8(%esp)
		andb   $0xdf,0xf(%esi)
		jmp    jump_c2bad
	jump_c2b3b:
		mov    0x40(%esi),%ebp
		test   %ebp,%ebp
		je     jump_c2b6a
		mov    0x18(%ebp),%eax
		sar    $0x8,%eax
		mov    %eax,(%esp)
		mov    0x40(%esi),%eax
		mov    0x1c(%eax),%eax
		sar    $0x8,%eax
		add    $0xa,%eax
		mov    %eax,0x4(%esp)
		mov    0x40(%esi),%eax
		mov    0x20(%eax),%eax
		sar    $0x8,%eax
		mov    %eax,0x8(%esp)
		jmp    jump_c2bad
	jump_c2b6a:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(weapon_defs)+25,%ax # sizeof(struct WeaponDef) * 1
		imul   %eax,%ecx
		mov    %ecx,0xc(%esp)
		mov    %edi,%ecx
		mov    0xc(%esp),%ebp
		sar    $0x8,%ecx
		add    %ecx,%ebp
		mov    %edx,%ecx
		sar    $0x8,%ecx
		mov    %ebp,(%esp)
		mov    %ecx,0x4(%esp)
		xor    %ecx,%ecx
		mov    0x57(%esi),%cl
		mov    EXPORT_SYMBOL(angle_direction)(,%ecx,4),%ecx
		sar    $0x10,%ecx
		imul   %ecx,%eax
		mov    %ebx,%ecx
		sar    $0x8,%ecx
		add    %eax,%ecx
		mov    %ecx,0x8(%esp)
	jump_c2bad:
		lea    0x10(%esp),%eax
		push   %eax
		push   %esi
		push   $0x32
		lea    0x14(%esp),%eax
		push   %eax
		lea    0x14(%esp),%eax
		lea    0x10(%esp),%ecx
		push   %eax
		mov    0x18(%esp),%eax
		sar    $0x8,%ebx
		add    $0x1e,%eax
		add    $0x1e,%edx
		mov    %eax,0x18(%esp)
		mov    %edi,%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		call   bul_path_end
		mov    0x6(%esp),%ebx
		mov    0x4(%esp),%edx
		mov    -0x2(%esp),%eax
		sub    $0x1e,%edx
		mov    $0x32,%ecx
		mov    %edx,0x4(%esp)
		sar    $0x10,%ebx
		mov    0x2(%esp),%edx
		sar    $0x10,%eax
		sar    $0x10,%edx
		call   create_time_pod
		mov    0xf(%esi),%al
		mov    0x40(%esi),%ebx
		or     $0x20,%al
		movl   $0x0,0x40(%esi)
		mov    %al,0xf(%esi)
		mov    (%esp),%eax
		mov    %eax,0x2c(%esi)
		mov    0x4(%esp),%eax
		add    $0xa,%eax
		mov    $0x1,%edx
		mov    %eax,0x30(%esi)
		mov    data_1dd8f8,%ch
		mov    0x8(%esp),%eax
		or     $0x1,%ch
		mov    %eax,0x34(%esi)
		mov    %esi,%eax
		mov    %ch,data_1dd8f8
		call   ac_init_laser
		mov    data_1dd8f8,%ah
		and    $0xfe,%ah
		mov    %ebx,0x40(%esi)
		mov    %ah,data_1dd8f8
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_init_stasis_gun)	/* 0x0C2C6C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x14,%esp
		mov    %eax,%esi
		xor    %edx,%edx
		mov    0x57(%eax),%dl
		mov    0x18(%esi),%ebx
		mov    0x20(%esi),%ebp
		mov    data_15335a(,%edx,4),%eax
		mov    EXPORT_SYMBOL(angle_direction)(,%edx,4),%ecx
		sar    $0x10,%eax
		sar    $0x10,%ecx
		mov    0xf(%esi),%dl
		mov    %eax,%edi
		shl    $0x7,%ecx
		shl    $0x7,%edi
		add    %ebp,%ecx
		add    %ebx,%edi
		mov    0x1c(%esi),%ebx
		test   $0x20,%dl
		je     jump_c2d6e
		mov    0x2c(%esi),%eax
		mov    %eax,(%esp)
		mov    0x34(%esi),%eax
		mov    %eax,0x8(%esp)
		testb  $0x20,0xd(%esi)
		je     jump_c2d4b
		xor    %edx,%edx
		mov    0x54(%esi),%dx
		sar    $0x2,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		add    %eax,%eax
		add    %edx,%eax
		cmpw   $0x0,data_1a63c8(%eax)
		je     jump_c2d4b
		mov    data_1a63c6(%eax),%eax
		sar    $0x10,%eax
		mov    %eax,0x4(%esp)
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		sar    $0x2,%eax
		mov    %eax,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		movw   $0x0,data_1a63c8(%edx,%eax,2)
		jmp    jump_c2d68
	jump_c2d4b:
		mov    0x6(%esp),%edx
		mov    -0x2(%esp),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		call   ac_alt_at_point
		sar    $0x8,%eax
		add    $0x14,%eax
		mov    %eax,0x4(%esp)
	jump_c2d68:
		andb   $0xdf,0xf(%esi)
		jmp    jump_c2ddc
	jump_c2d6e:
		mov    0x40(%esi),%edx
		test   %edx,%edx
		je     jump_c2d9a
		mov    0x18(%edx),%eax
		sar    $0x8,%eax
		mov    %eax,(%esp)
		mov    0x40(%esi),%eax
		mov    0x1c(%eax),%eax
		sar    $0x8,%eax
		mov    %eax,0x4(%esp)
		mov    0x40(%esi),%eax
		mov    0x20(%eax),%eax
		sar    $0x8,%eax
		mov    %eax,0x8(%esp)
		jmp    jump_c2ddc
	jump_c2d9a:
		mov    EXPORT_SYMBOL(weapon_defs)+25,%dx # sizeof(struct WeaponDef) * 1
		imul   %edx,%eax
		mov    %eax,0xc(%esp)
		mov    %edi,%eax
		mov    0xc(%esp),%ebp
		sar    $0x8,%eax
		add    %eax,%ebp
		mov    %ebx,%eax
		sar    $0x8,%eax
		mov    %ebp,(%esp)
		mov    %eax,0x4(%esp)
		xor    %eax,%eax
		mov    0x57(%esi),%al
		mov    EXPORT_SYMBOL(angle_direction)(,%eax,4),%eax
		sar    $0x10,%eax
		imul   %edx,%eax
		mov    %ecx,%edx
		sar    $0x8,%edx
		add    %eax,%edx
		mov    %edx,0x8(%esp)
	jump_c2ddc:
		lea    0x10(%esp),%eax
		push   %eax
		push   %esi
		lea    0x1e(%ebx),%edx
		lea    0x10(%esp),%eax
		push   $0x32
		sar    $0x8,%edi
		push   %eax
		lea    0x14(%esp),%eax
		sar    $0x8,%edx
		push   %eax
		mov    %ecx,%eax
		mov    0x18(%esp),%ecx
		sar    $0x8,%eax
		add    $0x1e,%ecx
		mov    %eax,%ebx
		mov    %ecx,0x18(%esp)
		mov    %edi,%eax
		lea    0x14(%esp),%ecx
		call   bul_path_end
		mov    0x6(%esp),%ebx
		mov    0x4(%esp),%edi
		mov    -0x2(%esp),%eax
		mov    $0x32,%ecx
		sub    $0x1e,%edi
		push   %esi
		mov    %edi,0x8(%esp)
		sar    $0x10,%ebx
		mov    0x6(%esp),%edx
		sar    $0x10,%eax
		sar    $0x10,%edx
		call   create_stasis_pod
		test   %eax,%eax
		je     jump_c2e4b
		mov    0x16(%esi),%dx
		mov    %dx,0x38(%eax)
	jump_c2e4b:
		mov    0xf(%esi),%ah
		mov    0x40(%esi),%ebx
		or     $0x20,%ah
		movl   $0x0,0x40(%esi)
		mov    %ah,0xf(%esi)
		mov    (%esp),%eax
		mov    %eax,0x2c(%esi)
		mov    0x4(%esp),%eax
		mov    %eax,0x30(%esi)
		mov    0x8(%esp),%eax
		mov    $0x1,%edx
		mov    %eax,0x34(%esi)
		mov    %esi,%eax
		call   ac_init_laser
		mov    %ebx,0x40(%esi)
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_init_c_iff)	/* 0x0C2E8C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    %eax,%esi
		push   $0x1
		push   $0x0
		mov    $0x40,%ecx
		push   $0x64
		mov    $0x7f,%ebx
		mov    $0x27,%edx
		call   ac_play_dist_sample
		xor    %edx,%edx
		mov    0x57(%esi),%dl
		mov    data_15335a(,%edx,4),%eax
		sar    $0x10,%eax
		mov    0x18(%esi),%ebp
		shl    $0x7,%eax
		add    %eax,%ebp
		mov    EXPORT_SYMBOL(angle_direction)(,%edx,4),%eax
		sar    $0x10,%eax
		mov    0x20(%esi),%edx
		shl    $0x7,%eax
		mov    0x1c(%esi),%edi
		add    %eax,%edx
		call   ac_get_new_thing
		mov    %edx,(%esp)
		test   %ax,%ax
		je     jump_c2fc1
		xor    %ecx,%ecx
		mov    %ax,%cx
		lea    0x0(,%ecx,4),%ebx
		add    %ecx,%ebx
		shl    $0x2,%ebx
		add    %ecx,%ebx
		mov    things,%edx
		shl    $0x3,%ebx
		add    %edx,%ebx
		mov    (%esp),%eax
		mov    %eax,0x20(%ebx)
		mov    %esi,%eax
		sub    %edx,%eax
		mov    %edi,0x1c(%ebx)
		mov    %eax,%edx
		mov    $0xa8,%edi
		sar    $0x1f,%edx
		idiv   %edi
		movw   $0x1e,0x28(%ebx)
		mov    %ax,0x3c(%ebx)
		mov    nstart_ani,%eax
		mov    %ebp,0x18(%ebx)
		mov    0x810(%eax),%ax
		movw   $0x408,0x26(%ebx)
		mov    %ax,0x24(%ebx)
		mov    %ecx,%eax
		movl   $0x4,0xc(%ebx)
		call   ac_add_node_thing
		movb   $0xf,0x9(%ebx)
		movb   $0x30,0x8(%ebx)
		movw   $0x32,0x14(%ebx)
		movw   $0x400,0x96(%ebx)
		movw   $0x400,0x94(%ebx)
		movw   $0x0,0xa0(%ebx)
		movw   $0x0,0xa2(%ebx)
		movw   $0xc00,0x3a(%ebx)
		movw   $0xc00,0x7e(%ebx)
		movb   $0x0,0x6c(%ebx)
		mov    0x51(%esi),%al
		movb   $0x3,0x99(%ebx)
		movw   $0x1,0x6e(%ebx)
		movw   $0x0,0x70(%ebx)
		movl   $0x0,0x40(%ebx)
		movw   $0x5,0xa(%ebx)
		mov    %al,0x51(%ebx)
		mov    %al,0x50(%ebx)
	jump_c2fc1:
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_init_flamer)	/* 0x0C303C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x24,%esp
		mov    %eax,0x18(%esp)
		mov    0x18(%esp),%edx
		mov    0x18(%esp),%esi
		xor    %eax,%eax
		mov    0x18(%esp),%edi
		mov    0x57(%edx),%al
		mov    0x18(%esp),%ebp
		mov    0x18(%esi),%esi
		mov    data_15335a(,%eax,4),%edx
		mov    EXPORT_SYMBOL(angle_direction)(,%eax,4),%eax
		mov    0x20(%edi),%edi
		sar    $0x10,%eax
		sar    $0x10,%edx
		shl    $0x6,%eax
		shl    $0x6,%edx
		add    %eax,%edi
		mov    0x18(%esp),%eax
		mov    0x1c(%ebp),%ebp
		add    %edx,%esi
		mov    0x40(%eax),%edx
		add    $0xf00,%ebp
		test   %edx,%edx
		je     jump_c30ec
		mov    %edx,%eax
		mov    0x20(%eax),%eax
		sar    $0x8,%eax
		mov    0x18(%esp),%ebx
		mov    %eax,0x4(%esp)
		mov    0x18(%esp),%eax
		mov    0x18(%edx),%edx
		mov    0x20(%ebx),%ebx
		mov    0x18(%eax),%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		sar    $0x8,%ebx
		mov    %eax,%ecx
		mov    %edx,%eax
		mov    0x4(%esp),%edx
		sub    %ebx,%edx
		sub    %ecx,%eax
		neg    %edx
		call   ac_arctan
		cwtl
		add    $0x80,%eax
		sar    $0x8,%eax
		add    $0x8,%eax
		xor    %edx,%edx
		and    $0x7,%eax
		mov    %ax,%dx
		mov    0x18(%esp),%eax
		call   change_player_angle
	jump_c30ec:
		mov    0x18(%esp),%edx
		xor    %eax,%eax
		mov    0x57(%edx),%al
		mov    %eax,%ebx
		xor    %eax,%eax
		shl    $0x5,%ebx
		mov    0x85(%edx),%al
		sub    %eax,%ebx
		movswl %bx,%eax
		cmp    $0xffffff80,%eax
		jge    jump_c3113
		mov    $0x20,%eax
		jmp    jump_c313b
	jump_c3113:
		cmp    $0x80,%eax
		jle    jump_c3121
		mov    $0xffffffe0,%eax
		jmp    jump_c313b
	jump_c3121:
		cmp    $0xfffffff7,%eax
		jge    jump_c312d
		mov    $0xfffffff8,%eax
		jmp    jump_c313b
	jump_c312d:
		cmp    $0x9,%eax
		jle    jump_c3139
		mov    $0x8,%eax
		jmp    jump_c313b
	jump_c3139:
		xor    %eax,%eax
	jump_c313b:
		add    %al,0x85(%edx)
		xor    %eax,%eax
		mov    0x18(%esp),%edx
		mov    %eax,0xc(%esp)
		mov    0x85(%edx),%al
		shl    $0x5,%eax
		mov    EXPORT_SYMBOL(lbSinTable)(%eax),%edx
		mov    EXPORT_SYMBOL(lbSinTable)+2048(%eax),%eax
		sar    $0x8,%eax
		sar    $0x8,%edx
		mov    %eax,0x14(%esp)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		mov    %edx,0x8(%esp)
		and    $0xf,%al
		and    $0xffff,%eax
		sub    $0x8,%eax
		add    %eax,%edx
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		mov    %edx,0x8(%esp)
		and    $0xf,%al
		and    $0xffff,%eax
		sub    $0x8,%eax
		mov    %eax,0xc(%esp)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0xf,%al
		and    $0xffff,%eax
		mov    0x14(%esp),%ebx
		sub    $0x8,%eax
		add    %eax,%ebx
		mov    0x8(%esp),%eax
		shl    $0x5,%eax
		mov    %eax,(%esp)
		mov    0xc(%esp),%eax
		add    %eax,%eax
		xor    %edx,%edx
		mov    %eax,0x1c(%esp)
		mov    %ebx,%eax
		mov    %edx,0x20(%esp)
		shl    $0x5,%eax
		mov    %ebx,0x14(%esp)
		mov    %eax,0x10(%esp)
		jmp    jump_c31f4
	jump_c31da:
		mov    (%esp),%ecx
		mov    0x1c(%esp),%eax
		mov    0x10(%esp),%edx
		add    %ecx,%esi
		mov    0x20(%esp),%ecx
		add    %eax,%ebp
		inc    %ecx
		add    %edx,%edi
		mov    %ecx,0x20(%esp)
	jump_c31f4:
		xor    %eax,%eax
		mov    0x20(%esp),%ax
		cmp    $0x3,%eax
		jge    jump_c3319
		push   $0xf
		mov    $0x384,%ecx
		mov    %edi,%ebx
		mov    %ebp,%edx
		mov    %esi,%eax
		sar    $0x8,%ebx
		sar    $0x8,%edx
		sar    $0x8,%eax
		call   create_scale_effect
		mov    %eax,%edx
		test   %eax,%eax
		je     jump_c31da
		incw   ingame__FlameCount
		call   ac_LbRandomAnyShort
		movb   $0x2e,0x8(%edx)
		mov    0x28(%edx),%cx
		movw   $0x28,0x12(%edx)
		xor    %ah,%ah
		movw   $0x9,0x26(%edx)
		and    $0x7,%al
		xor    %ebx,%ebx
		sub    $0x4,%eax
		mov    0x24(%edx),%bx
		add    %eax,%ecx
		mov    frame,%eax
		mov    %cx,0x28(%edx)
		mov    0x6(%eax,%ebx,8),%bx
		mov    %bx,0x24(%edx)
		xor    %ebx,%ebx
		mov    0x24(%edx),%bx
		mov    0x6(%eax,%ebx,8),%bx
		mov    %bx,0x24(%edx)
		xor    %ebx,%ebx
		mov    0x24(%edx),%bx
		mov    0x6(%eax,%ebx,8),%bx
		mov    %bx,0x24(%edx)
		xor    %ebx,%ebx
		mov    0x24(%edx),%bx
		mov    0x6(%eax,%ebx,8),%bx
		mov    %bx,0x24(%edx)
		xor    %ebx,%ebx
		mov    0x24(%edx),%bx
		mov    0x6(%eax,%ebx,8),%ax
		mov    %ax,0x24(%edx)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		mov    0x8(%esp),%ebx
		and    $0xf,%al
		add    %ebx,%eax
		sub    $0x8,%eax
		shl    $0x4,%eax
		mov    %ax,0x2c(%edx)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		mov    0xc(%esp),%ecx
		and    $0xf,%al
		add    %ecx,%eax
		sub    $0x8,%eax
		mov    %ax,0x2e(%edx)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		mov    0x14(%esp),%ebx
		and    $0xf,%al
		add    %ebx,%eax
		sub    $0x8,%eax
		shl    $0x4,%eax
		mov    %ax,0x30(%edx)
		mov    0x8(%esp),%eax
		neg    %eax
		sar    %eax
		mov    %ax,0x32(%edx)
		mov    0x14(%esp),%eax
		neg    %eax
		sar    %eax
		mov    %ax,0x36(%edx)
		mov    0x18(%esp),%eax
		movw   $0x0,0x34(%edx)
		mov    0x16(%eax),%ax
		mov    %ax,0x38(%edx)
		jmp    jump_c31da
	jump_c3319:
		add    $0x24,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
create_electric_strand:	/* 0x0C3324 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		mov    %eax,%edi
		test   %eax,%eax
		jl     jump_c333f
		cmp    $0x8000,%eax
		jg     jump_c333f
		test   %ebx,%ebx
		jl     jump_c333f
		cmp    $0x8000,%ebx
		jle    jump_c3346
	jump_c333f:
		xor    %esi,%esi
		jmp    jump_c33d4
	jump_c3346:
		call   ac_get_new_sthing
		test   %ax,%ax
		jne    jump_c3359
		xor    %esi,%esi
		mov    %esi,%eax
		pop    %edi
		pop    %esi
		ret    $0xc
	jump_c3359:
		cwtl
		mov    %eax,%esi
		shl    $0x4,%esi
		sub    %eax,%esi
		mov    EXPORT_SYMBOL(sthings),%eax
		shl    $0x2,%esi
		shl    $0x8,%edi
		add    %eax,%esi
		shl    $0x8,%ebx
		mov    %edi,0x18(%esi)
		mov    0xc(%esp),%eax
		mov    %ebx,0x20(%esi)
		mov    %ax,0x2e(%esi)
		mov    0x10(%esp),%eax
		mov    %ax,0x30(%esi)
		shl    $0x8,%edx
		mov    0x14(%esi),%eax
		mov    %edx,0x1c(%esi)
		sar    $0x10,%eax
		mov    %cx,0x2c(%esi)
		call   ac_add_node_sthing
		movb   $0x1b,0x9(%esi)
		movb   $0x0,0x8(%esi)
		movw   $0x32,0x14(%esi)
		mov    0x14(%esp),%ah
		movw   $0x5,0x28(%esi)
		test   %ah,%ah
		je     jump_c33d4
		push   $0x1
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x28,%edx
		mov    %esi,%eax
		call   ac_play_dist_ssample
	jump_c33d4:
		mov    %esi,%eax
		pop    %edi
		pop    %esi
		ret    $0xc


/*----------------------------------------------------------------*/
create_growing_e_strand:	/* 0x0C33DC */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		sub    $0x20,%esp
		mov    %eax,0x18(%esp)
		mov    %edx,0x8(%esp)
		mov    %ebx,0x14(%esp)
		mov    %ecx,%edi
		call   ac_get_new_sthing
		mov    %ax,0x1c(%esp)
		xor    %ebx,%ebx
		xor    %ecx,%ecx
		xor    %esi,%esi
		test   %ax,%ax
		jne    jump_c340b
		xor    %eax,%eax
		jmp    jump_c35ea
	jump_c340b:
		mov    0x44(%edi),%ah
		or     $0x20,%ah
		mov    0xf(%edi),%dl
		mov    %ah,0x44(%edi)
		test   $0x10,%dl
		je     jump_c349f
		xor    %edx,%edx
		call   ac_LbRandomAnyShort
		mov    %ax,%dx
		mov    $0x140,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		lea    -0xa0(%edx),%ebx
		xor    %edx,%edx
		call   ac_LbRandomAnyShort
		mov    %ax,%dx
		mov    $0x140,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		lea    -0xa0(%edx),%ecx
		xor    %edx,%edx
		call   ac_LbRandomAnyShort
		mov    %ax,%dx
		mov    $0x140,%esi
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %esi
		lea    -0xa0(%edx),%esi
		movl   $0x1388,0x4(%esp)
		mov    0x5c(%edi),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %eax,%edx
		mov    things,%eax
		shl    $0x3,%edx
		orb    $0x80,0x7c(%edx,%eax,1)
		jmp    jump_c34ab
	jump_c349f:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(weapon_defs)+302,%ax # sizeof(struct WeaponDef) * 12 + 2
		mov    %eax,0x4(%esp)
	jump_c34ab:
		mov    0x18(%edi),%eax
		sar    $0x8,%eax
		add    %eax,%ebx
		mov    0x1c(%edi),%eax
		sar    $0x5,%eax
		add    %eax,%ecx
		mov    0x20(%edi),%eax
		mov    0x1a(%esp),%edx
		sar    $0x8,%eax
		sar    $0x10,%edx
		add    %eax,%esi
		mov    %edx,%eax
		shl    $0x4,%eax
		mov    %esi,0x10(%esp)
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(sthings),%esi
		shl    $0x2,%eax
		add    %eax,%esi
		mov    0x18(%esp),%eax
		shl    $0x8,%eax
		mov    %eax,0x18(%esi)
		mov    0x14(%esp),%eax
		shl    $0x8,%eax
		mov    %eax,0x20(%esi)
		mov    0x8(%esp),%eax
		shl    $0x8,%eax
		mov    %ebx,0xc(%esp)
		mov    %eax,0x1c(%esi)
		mov    0xc(%esp),%eax
		mov    %ecx,(%esp)
		mov    %ax,0x2c(%esi)
		mov    (%esp),%eax
		mov    %ax,0x2e(%esi)
		mov    0x10(%esp),%eax
		mov    %ax,0x30(%esi)
		mov    0x14(%esp),%ecx
		mov    0x14(%esi),%eax
		mov    0x10(%esp),%edx
		sar    $0x10,%eax
		sub    %ecx,%edx
		call   ac_add_node_sthing
		mov    0x2c(%esp),%eax
		mov    $0x40,%ecx
		mov    %ax,0x28(%esi)
		neg    %edx
		mov    %ax,0x2a(%esi)
		mov    %ebx,%eax
		mov    0x18(%esp),%ebx
		movb   $0x1b,0x9(%esi)
		sub    %ebx,%eax
		movb   $0x6,0x8(%esi)
		call   ac_arctan
		push   $0x1
		mov    $0x7f,%ebx
		mov    %ax,0x12(%esi)
		mov    $0x28,%edx
		mov    0x16(%edi),%ax
		push   $0x0
		mov    %ax,0x14(%esi)
		mov    0x38(%esp),%eax
		push   $0x64
		mov    %ax,0x38(%esi)
		mov    %esi,%eax
		call   ac_play_dist_ssample
		xor    %edx,%edx
		mov    0x30(%esp),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		push   $0xa
		add    %edx,%eax
		mov    0x14(%esp),%edx
		push   %eax
		mov    0x1c(%esp),%eax
		sub    %edx,%eax
		cwtl
		mov    0x8(%esp),%ebx
		push   %eax
		mov    0x14(%esp),%eax
		sub    %ebx,%eax
		mov    0x18(%esp),%edx
		movswl %ax,%ecx
		mov    0x24(%esp),%eax
		sub    %edx,%eax
		mov    0xe(%esp),%edx
		movswl %ax,%ebx
		sar    $0x10,%edx
		mov    %edi,%eax
		call   ac_person_hit_by_bullet
		testb  $0x8,0xe(%edi)
		je     jump_c35e8
		mov    %edi,%eax
		call   stop_being_persuaded
	jump_c35e8:
		mov    %esi,%eax
	jump_c35ea:
		add    $0x20,%esp
		pop    %edi
		pop    %esi
		ret    $0x8


/*----------------------------------------------------------------*/
create_another_strand:	/* 0x0C35F4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x1b4,%esp
		mov    %eax,0x1a8(%esp)
		mov    0x34(%eax),%ax
		mov    %ax,0x1ac(%esp)
		mov    0x1a8(%esp),%eax
		mov    0x30(%eax),%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,8),%ecx
		add    %eax,%ecx
		mov    game_objects,%eax
		shl    $0x2,%ecx
		add    %ecx,%eax
		mov    %eax,0x1a0(%esp)
		mov    0x12(%eax),%eax
		sar    $0x10,%eax
		mov    %eax,0x198(%esp)
		mov    0x1a0(%esp),%eax
		mov    0x14(%eax),%eax
		sar    $0x10,%eax
		mov    %eax,0x194(%esp)
		mov    0x1a0(%esp),%eax
		mov    0xc(%eax),%eax
		sar    $0x10,%eax
		mov    %eax,0x190(%esp)
		mov    0x1a0(%esp),%eax
		mov    0x2(%eax),%bx
		xor    %edx,%edx
		test   %bx,%bx
		je     jump_c373f
		mov    0x1a0(%esp),%ebx
		xor    %eax,%eax
		mov    (%ebx),%ax
		mov    game_object_faces,%ebx
		shl    $0x5,%eax
		mov    0x1a0(%esp),%esi
		add    %eax,%ebx
		mov    (%esi),%si
		mov    %ebx,0x1a4(%esp)
		jmp    jump_c36c1
	jump_c36af:
		mov    0x1a4(%esp),%ebp
		add    $0x20,%ebp
		inc    %esi
		mov    %ebp,0x1a4(%esp)
	jump_c36c1:
		mov    0x1a0(%esp),%eax
		xor    %ecx,%ecx
		xor    %edi,%edi
		mov    0x2(%eax),%cx
		mov    (%eax),%di
		add    %edi,%ecx
		movswl %si,%edi
		cmp    %ecx,%edi
		jge    jump_c373f
		cmp    0x1ac(%esp),%si
		je     jump_c36af
		mov    $0x2,%ebx
		xor    %eax,%eax
		jmp    jump_c36f1
	jump_c36ef:
		inc    %ebx
		inc    %eax
	jump_c36f1:
		movswl %ax,%ecx
		cmp    $0x3,%ecx
		jge    jump_c36af
		mov    0x1a4(%esp),%edi
		add    %ecx,%ecx
		add    %edi,%ecx
		xor    %edi,%edi
		mov    (%ecx),%di
		mov    0x1a8(%esp),%ecx
		mov    0x34(%ecx),%ecx
		sar    $0x10,%ecx
		cmp    %ecx,%edi
		jne    jump_c36ef
		mov    %eax,%edi
		movswl %dx,%ecx
		inc    %edi
		inc    %edx
		mov    %si,0xc8(%esp,%ecx,2)
		mov    %di,(%esp,%ecx,2)
		movswl %dx,%ecx
		inc    %edx
		mov    %si,0xc8(%esp,%ecx,2)
		mov    %bx,(%esp,%ecx,2)
		jmp    jump_c36ef
	jump_c373f:
		mov    0x1a0(%esp),%eax
		cmpw   $0x0,0x8(%eax)
		je     jump_c385a
		mov    0x1a0(%esp),%ebx
		xor    %eax,%eax
		mov    0x6(%ebx),%ax
		lea    0x0(,%eax,4),%ecx
		add    %eax,%ecx
		mov    game_object_faces4,%eax
		shl    $0x3,%ecx
		add    %ecx,%eax
		mov    %eax,0x19c(%esp)
		mov    0x6(%ebx),%ax
		mov    %ax,0x1b0(%esp)
		jmp    jump_c37a7
	jump_c3786:
		mov    0x19c(%esp),%eax
		mov    0x1b0(%esp),%edi
		add    $0x28,%eax
		inc    %edi
		mov    %eax,0x19c(%esp)
		mov    %di,0x1b0(%esp)
	jump_c37a7:
		mov    0x1a0(%esp),%eax
		xor    %edi,%edi
		xor    %ecx,%ecx
		mov    0x6(%eax),%di
		mov    0x8(%eax),%cx
		add    %ecx,%edi
		mov    0x1ae(%esp),%ecx
		sar    $0x10,%ecx
		cmp    %edi,%ecx
		jge    jump_c385a
		mov    0x1aa(%esp),%edi
		sar    $0x10,%edi
		neg    %edi
		cmp    %edi,%ecx
		je     jump_c3786
		mov    $0x3,%esi
		mov    $0x2,%ecx
		xor    %eax,%eax
		jmp    jump_c37ef
	jump_c37ec:
		inc    %esi
		inc    %ecx
		inc    %eax
	jump_c37ef:
		movswl %ax,%edi
		cmp    $0x4,%edi
		jge    jump_c3786
		mov    0x19c(%esp),%ebx
		add    %edi,%edi
		add    %ebx,%edi
		mov    (%edi),%di
		mov    0x1a8(%esp),%ebx
		mov    0x34(%ebx),%ebx
		sar    $0x10,%ebx
		and    $0xffff,%edi
		cmp    %ebx,%edi
		jne    jump_c37ec
		mov    0x1b0(%esp),%ebx
		movswl %dx,%ebp
		mov    %eax,%edi
		neg    %ebx
		inc    %edi
		inc    %edx
		mov    %bx,0xc8(%esp,%ebp,2)
		mov    %di,(%esp,%ebp,2)
		movswl %dx,%edi
		inc    %edx
		mov    %bx,0xc8(%esp,%edi,2)
		mov    %cx,(%esp,%edi,2)
		movswl %dx,%edi
		inc    %edx
		mov    %bx,0xc8(%esp,%edi,2)
		mov    %si,(%esp,%edi,2)
		jmp    jump_c37ec
	jump_c385a:
		movswl %dx,%eax
		test   %eax,%eax
		jle    jump_c3a30
		call   ac_LbRandomAnyShort
		mov    gameturn,%ebx
		and    $0xffff,%eax
		add    %ebx,%eax
		movswl %dx,%ebx
		xor    %edx,%edx
		div    %ebx
		movswl %dx,%eax
		add    %eax,%eax
		mov    0xc6(%esp,%eax,1),%ecx
		sar    $0x10,%ecx
		mov    %edx,%esi
		test   %ecx,%ecx
		jle    jump_c394f
		mov    game_object_faces,%edx
		shl    $0x5,%ecx
		mov    (%esp,%eax,1),%ax
		lea    (%edx,%ecx,1),%edi
		movswl %ax,%edx
		cmp    $0x2,%edx
		jle    jump_c38b2
		sub    $0x2,%eax
	jump_c38b2:
		movswl %si,%edx
		mov    0xc8(%esp,%edx,2),%si
		mov    gameturn,%dl
		and    $0x1,%dl
		cwtl
		add    %eax,%eax
		add    %eax,%edi
		xor    %eax,%eax
		mov    (%edi),%ax
		lea    0x0(,%eax,4),%ecx
		and    $0xff,%edx
		add    %eax,%ecx
		mov    EXPORT_SYMBOL(game_object_points),%eax
		push   %edx
		mov    0x4(%eax,%ecx,2),%edx
		mov    0x198(%esp),%ebx
		sar    $0x10,%edx
		mov    0x194(%esp),%ebp
		add    %ebx,%edx
		mov    0x1ac(%esp),%ebx
		push   %edx
		mov    0x2(%eax,%ecx,2),%edx
		mov    0x2e(%ebx),%ebx
		sar    $0x10,%edx
		mov    (%eax,%ecx,2),%ecx
		mov    0x1a0(%esp),%eax
		add    %ebp,%edx
		sar    $0x10,%ecx
		push   %edx
		add    %eax,%ecx
		mov    0x1b4(%esp),%edx
		mov    0x1b4(%esp),%eax
		sar    $0x10,%ebx
		mov    0x2a(%eax),%eax
		mov    0x2c(%edx),%edx
		sar    $0x10,%eax
		sar    $0x10,%edx
		call   create_electric_strand
		test   %eax,%eax
		je     jump_c3a30
		jmp    jump_c3a06
	jump_c394f:
		neg    %ecx
		mov    %ecx,%edx
		shl    $0x2,%ecx
		mov    game_object_faces4,%edi
		add    %edx,%ecx
		mov    (%esp,%eax,1),%ax
		shl    $0x3,%ecx
		movswl %ax,%edx
		add    %ecx,%edi
		cmp    $0x3,%edx
		jle    jump_c3972
		sub    $0x3,%eax
	jump_c3972:
		movswl %si,%edx
		mov    0xc8(%esp,%edx,2),%si
		mov    gameturn,%dl
		and    $0x1,%dl
		cwtl
		add    %eax,%eax
		add    %eax,%edi
		xor    %eax,%eax
		mov    (%edi),%ax
		lea    0x0(,%eax,4),%ecx
		and    $0xff,%edx
		add    %eax,%ecx
		mov    EXPORT_SYMBOL(game_object_points),%eax
		push   %edx
		mov    0x4(%eax,%ecx,2),%edx
		mov    0x198(%esp),%ebp
		sar    $0x10,%edx
		add    %ebp,%edx
		mov    0x194(%esp),%ebx
		push   %edx
		mov    0x2(%eax,%ecx,2),%edx
		mov    0x1a0(%esp),%ebp
		sar    $0x10,%edx
		mov    (%eax,%ecx,2),%ecx
		mov    0x1b0(%esp),%eax
		sar    $0x10,%ecx
		add    %ebx,%edx
		mov    0x1b0(%esp),%ebx
		push   %edx
		mov    0x2a(%eax),%eax
		add    %ebp,%ecx
		mov    0x1b4(%esp),%edx
		sar    $0x10,%eax
		mov    0x2e(%ebx),%ebx
		mov    0x2c(%edx),%edx
		sar    $0x10,%ebx
		sar    $0x10,%edx
		call   create_electric_strand
		test   %eax,%eax
		je     jump_c3a30
	jump_c3a06:
		mov    0x1a8(%esp),%edx
		mov    0x32(%edx),%dx
		mov    %dx,0x32(%eax)
		mov    %si,0x34(%eax)
		mov    (%edi),%dx
		mov    %dx,0x36(%eax)
		mov    0x1a8(%esp),%edx
		mov    0x2a(%edx),%dx
		inc    %edx
		mov    %dx,0x2a(%eax)
	jump_c3a30:
		add    $0x1b4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_electric_strand)	/* 0x0C3A40 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		sub    $0x4,%esp
		mov    %eax,%esi
		xor    %edx,%edx
		mov    %edx,(%esp)
		mov    0x8(%eax),%al
		test   %al,%al
		jbe    jump_c3a61
		cmp    $0x6,%al
		je     jump_c3aa2
	jump_c3a59:
		add    $0x4,%esp
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_c3a61:
		mov    0x28(%esi),%ax
		movswl %ax,%edx
		dec    %eax
		mov    %ax,0x28(%esi)
		test   %edx,%edx
		jne    jump_c3a83
		mov    %esi,%eax
		call   ac_delete_snode
		mov    0x14(%esi),%eax
		sar    $0x10,%eax
		call   ac_remove_sthing
	jump_c3a83:
		mov    0x26(%esi),%eax
		sar    $0x10,%eax
		cmp    $0x4,%eax
		jne    jump_c3a59
		mov    0x28(%esi),%eax
		sar    $0x10,%eax
		cmp    $0xf,%eax
		jge    jump_c3a59
		mov    %esi,%eax
		call   create_another_strand
		jmp    jump_c3a59
	jump_c3aa2:
		mov    0x28(%esi),%ax
		movswl %ax,%edx
		dec    %eax
		mov    %ax,0x28(%esi)
		test   %edx,%edx
		jne    jump_c3ae9
		mov    0x14(%esi),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		andb   $0xdf,0x44(%edx,%eax,8)
		mov    %esi,%eax
		call   ac_delete_snode
		mov    0x14(%esi),%eax
		sar    $0x10,%eax
		call   ac_remove_sthing
		add    $0x4,%esp
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_c3ae9:
		mov    0x28(%esi),%eax
		mov    0x26(%esi),%edx
		sar    $0x10,%eax
		sar    $0x10,%edx
		dec    %eax
		cmp    %eax,%edx
		je     jump_c3b0d
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0xf,%al
		cmp    $0x7,%ax
		jae    jump_c3a59
	jump_c3b0d:
		push   $0xffffffff
		mov    0x4(%esp),%ecx
		mov    0x10(%esi),%eax
		mov    0x20(%esi),%ebx
		sar    $0x10,%eax
		mov    0x1c(%esi),%edx
		push   %eax
		lea    0x8(%esp),%eax
		sar    $0x8,%ebx
		push   %eax
		mov    0x18(%esi),%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		call   find_nearest_person_min
		test   %ax,%ax
		je     jump_c3a59
		cmpl   $0x200000,(%esp)
		jge    jump_c3a59
		xor    %edx,%edx
		mov    0x38(%esi),%dx
		push   %edx
		xor    %edx,%edx
		mov    0x28(%esi),%dx
		push   %edx
		movswl %ax,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    things,%ecx
		shl    $0x2,%eax
		mov    0x2e(%esi),%ebx
		add    %edx,%eax
		sar    $0x10,%ebx
		shl    $0x3,%eax
		mov    0x2c(%esi),%edx
		add    %eax,%ecx
		mov    0x2a(%esi),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		call   create_growing_e_strand
		add    $0x4,%esp
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
elec_hit_building:	/* 0x0C3B98 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x30,%esp
		mov    %eax,%esi
		mov    %edx,%ebp
		mov    %ebx,%edi
		mov    %cx,0x20(%esp)
		mov    0x1e(%esp),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    game_col_vects_list,%edx
		add    %eax,%eax
		add    %edx,%eax
		mov    0x2(%eax),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		je     jump_c3e39
		xor    %ecx,%ecx
		mov    (%eax),%cx
		lea    0x0(,%ecx,8),%eax
		sub    %ecx,%eax
		lea    (%eax,%eax,1),%ecx
		mov    game_col_vects,%eax
		add    %ecx,%eax
		mov    %eax,0x14(%esp)
		mov    0xa(%eax),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		je     jump_c3e39
		mov    0x14(%esp),%eax
		mov    0xc(%eax),%ax
		mov    %ax,0x2c(%esp)
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		mov    0x50(%edx,%eax,8),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    game_objects,%edx
		shl    $0x2,%eax
		add    %edx,%eax
		mov    0x12(%eax),%edx
		sar    $0x10,%edx
		mov    %edx,0x18(%esp)
		mov    0x14(%eax),%edx
		mov    0xc(%eax),%eax
		sar    $0x10,%eax
		mov    %eax,0x10(%esp)
		mov    0x2a(%esp),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		mov    %edx,0xc(%esp)
		test   %eax,%eax
		jge    jump_c3d4a
		neg    %eax
		mov    %eax,%edx
		shl    $0x2,%eax
		add    %edx,%eax
		mov    game_object_faces4,%edx
		shl    $0x3,%eax
		add    %eax,%edx
		mov    %edx,0x8(%esp)
		xor    %edx,%edx
		mov    %edx,0x28(%esp)
		jmp    jump_c3c89
	jump_c3c84:
		addl   $0x2,0x28(%esp)
	jump_c3c89:
		xor    %eax,%eax
		mov    0x28(%esp),%ax
		cmp    $0x4,%eax
		jge    jump_c3d4a
		test   %eax,%eax
		sete   %al
		and    $0xff,%eax
		and    $0xff,%eax
		push   %eax
		xor    %eax,%eax
		mov    0x2c(%esp),%ax
		mov    0xc(%esp),%edx
		add    %eax,%eax
		add    %eax,%edx
		xor    %eax,%eax
		mov    (%edx),%ax
		imul   $0xa,%eax,%eax
		mov    %edx,0x20(%esp)
		mov    EXPORT_SYMBOL(game_object_points),%edx
		add    %edx,%eax
		mov    0x4(%eax),%edx
		mov    0x10(%esp),%ebx
		sar    $0x10,%edx
		add    %ebx,%edx
		push   %edx
		mov    0x2(%eax),%edx
		mov    0x18(%esp),%ecx
		sar    $0x10,%edx
		add    %ecx,%edx
		mov    %edi,%ebx
		push   %edx
		mov    (%eax),%ecx
		mov    0x24(%esp),%eax
		sar    $0x10,%ecx
		mov    %ebp,%edx
		add    %eax,%ecx
		mov    %esi,%eax
		call   create_electric_strand
		test   %eax,%eax
		je     jump_c3c84
		mov    0x1e(%esp),%edx
		sar    $0x10,%edx
		imul   $0x6,%edx,%edx
		mov    game_col_vects_list,%ecx
		mov    0x2(%ecx,%edx,1),%edx
		sar    $0x10,%edx
		imul   $0xa8,%edx,%ecx
		mov    things,%edx
		mov    0x52(%ecx,%edx,1),%cx
		mov    0x2c(%esp),%edx
		mov    %cx,0x32(%eax)
		mov    0x1c(%esp),%ecx
		mov    %dx,0x34(%eax)
		mov    (%ecx),%cx
		movw   $0x1,0x2a(%eax)
		mov    %cx,0x36(%eax)
		jmp    jump_c3c84
	jump_c3d4a:
		mov    0x2a(%esp),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jle    jump_c3e39
		mov    %eax,%edx
		mov    game_object_faces,%eax
		shl    $0x5,%edx
		xor    %ecx,%ecx
		add    %edx,%eax
		mov    %ecx,0x24(%esp)
		mov    %eax,(%esp)
		jmp    jump_c3d75
	jump_c3d70:
		addl   $0x2,0x24(%esp)
	jump_c3d75:
		xor    %eax,%eax
		mov    0x24(%esp),%ax
		cmp    $0x3,%eax
		jge    jump_c3e39
		test   %eax,%eax
		sete   %al
		and    $0xff,%eax
		and    $0xff,%eax
		push   %eax
		xor    %eax,%eax
		mov    0x28(%esp),%ax
		mov    0x4(%esp),%edx
		add    %eax,%eax
		add    %eax,%edx
		xor    %eax,%eax
		mov    (%edx),%ax
		mov    %edx,0x8(%esp)
		imul   $0xa,%eax,%edx
		mov    EXPORT_SYMBOL(game_object_points),%eax
		add    %edx,%eax
		mov    0x4(%eax),%edx
		mov    0x10(%esp),%ebx
		sar    $0x10,%edx
		add    %ebx,%edx
		push   %edx
		mov    0x2(%eax),%edx
		mov    0x18(%esp),%ecx
		sar    $0x10,%edx
		add    %ecx,%edx
		mov    %edi,%ebx
		push   %edx
		mov    (%eax),%ecx
		mov    0x24(%esp),%eax
		sar    $0x10,%ecx
		mov    %ebp,%edx
		add    %eax,%ecx
		mov    %esi,%eax
		call   create_electric_strand
		test   %eax,%eax
		je     jump_c3d70
		mov    0x1e(%esp),%ecx
		sar    $0x10,%ecx
		imul   $0x6,%ecx,%edx
		mov    game_col_vects_list,%ecx
		mov    0x2(%ecx,%edx,1),%ecx
		sar    $0x10,%ecx
		imul   $0xa8,%ecx,%edx
		mov    things,%ecx
		mov    0x52(%ecx,%edx,1),%cx
		mov    %cx,0x32(%eax)
		mov    0x14(%esp),%ecx
		mov    0xc(%ecx),%cx
		mov    %cx,0x34(%eax)
		mov    0x4(%esp),%ecx
		mov    (%ecx),%cx
		movw   $0x1,0x2a(%eax)
		mov    %cx,0x36(%eax)
		jmp    jump_c3d70
	jump_c3e39:
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_tasered_person)	/* 0x0C3E40 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		decb   0x7d(%eax)
		xor    %edx,%edx
		mov    0x7d(%eax),%dl
		test   %edx,%edx
		jg     jump_c3ed3
		andb   $0xee,0x46(%eax)
		xor    %ebx,%ebx
		mov    0x6d(%eax),%dl
		mov    0x8(%eax),%bl
		mov    %dl,0x6c(%eax)
		lea    0x0(,%ebx,4),%edx
		sub    %ebx,%edx
		shl    $0x2,%edx
		sub    %ebx,%edx
		lea    0x0(,%edx,4),%ebx
		xor    %edx,%edx
		mov    0x6c(%eax),%dl
		movb   $0x0,0x7d(%eax)
		mov    EXPORT_SYMBOL(people_frames)(%ebx,%edx,2),%dx
		xor    %ebx,%ebx
		and    $0xffff,%edx
		mov    0x57(%eax),%bl
		add    %ebx,%edx
		lea    0x0(,%edx,2),%ebx
		mov    nstart_ani,%edx
		mov    (%edx,%ebx,1),%dx
		xor    %ebx,%ebx
		mov    0x8(%eax),%bl
		mov    %dx,0x24(%eax)
		lea    0x0(,%ebx,4),%edx
		sub    %ebx,%edx
		shl    $0x2,%edx
		sub    %ebx,%edx
		xor    %ebx,%ebx
		mov    0x6c(%eax),%bl
		add    %ebx,%ebx
		mov    EXPORT_SYMBOL(people_frames)(%ebx,%edx,4),%dx
		dec    %edx
		mov    %dx,0x26(%eax)
		pop    %edx
		pop    %ebx
		ret
	jump_c3ed3:
		test   $0x1,%dl
		je     jump_c3f31
		xor    %ebx,%ebx
		mov    0x8(%eax),%bl
		lea    0x0(,%ebx,4),%edx
		sub    %ebx,%edx
		shl    $0x2,%edx
		sub    %ebx,%edx
		mov    EXPORT_SYMBOL(people_frames)+0x20(,%edx,4),%dx
		xor    %ebx,%ebx
		and    $0xffff,%edx
		mov    0x57(%eax),%bl
		add    %ebx,%edx
		mov    nstart_ani,%ebx
		mov    (%ebx,%edx,2),%dx
		xor    %ebx,%ebx
		mov    0x8(%eax),%bl
		mov    %dx,0x24(%eax)
		lea    0x0(,%ebx,4),%edx
		sub    %ebx,%edx
		shl    $0x2,%edx
		sub    %ebx,%edx
		mov    EXPORT_SYMBOL(people_frames)+0x20(,%edx,4),%dx
		dec    %edx
		mov    %dx,0x26(%eax)
		pop    %edx
		pop    %ebx
		ret
	jump_c3f31:
		xor    %ebx,%ebx
		mov    0x8(%eax),%bl
		lea    0x0(,%ebx,4),%edx
		sub    %ebx,%edx
		shl    $0x2,%edx
		sub    %ebx,%edx
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(people_frames)(,%edx,4),%bx
		xor    %edx,%edx
		mov    0x57(%eax),%dl
		add    %ebx,%edx
		mov    nstart_ani,%ebx
		mov    (%ebx,%edx,2),%dx
		xor    %ebx,%ebx
		mov    0x8(%eax),%bl
		mov    %dx,0x24(%eax)
		lea    0x0(,%ebx,4),%edx
		sub    %ebx,%edx
		shl    $0x2,%edx
		sub    %ebx,%edx
		mov    EXPORT_SYMBOL(people_frames)(,%edx,4),%dx
		dec    %edx
		mov    %dx,0x26(%eax)
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_init_taser)	/* 0x0C3FA4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x34,%esp
		mov    %eax,%esi
		mov    0x18(%eax),%eax
		sar    $0x8,%eax
		mov    %eax,0x8(%esp)
		mov    0x20(%esi),%eax
		sar    $0x8,%eax
		mov    %eax,(%esp)
		mov    gameturn,%ax
		shl    $0x5,%eax
		xor    %ah,%ah
		add    $0x32,%eax
		mov    $0x10000,%edx
		mov    %ax,0x14(%esp)
		mov    %edx,0xc(%esp)
		mov    0x12(%esp),%eax
		mov    EXPORT_SYMBOL(lbSinTable)+2048,%edx
		sar    $0x10,%eax
		imul   %eax,%edx
		imul   EXPORT_SYMBOL(lbSinTable),%eax
		mov    0x1c(%esi),%edi
		sar    $0x10,%edx
		sar    $0x5,%edi
		mov    %dx,0x30(%esp)
		mov    $0x100,%edx
		sar    $0x10,%eax
		mov    %dx,0x20(%esp)
		mov    %eax,%ebx
		xor    %ebp,%ebp
		jmp    jump_c402f
	jump_c4018:
		mov    0x18(%esp),%eax
		mov    0x21(%esp),%dh
		mov    0x1c(%esp),%ebx
		inc    %dh
		mov    %ax,0x30(%esp)
		mov    %dh,0x21(%esp)
	jump_c402f:
		mov    0x1e(%esp),%eax
		sar    $0x10,%eax
		cmp    $0x800,%eax
		jg     jump_c40d6
		mov    0x20(%esp),%eax
		and    $0x7,%ah
		movswl %ax,%edx
		mov    0x12(%esp),%eax
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%edx,4),%ecx
		sar    $0x10,%eax
		imul   %eax,%ecx
		sar    $0x10,%ecx
		mov    %ecx,0x4(%esp)
		mov    0x4(%esp),%ecx
		mov    %cx,0x18(%esp)
		imul   EXPORT_SYMBOL(lbSinTable)(,%edx,4),%eax
		sar    $0x10,%eax
		push   %ebp
		mov    %ax,0x20(%esp)
		movswl %bx,%ebx
		mov    0x1e(%esp),%eax
		mov    0x4(%esp),%edx
		sar    $0x10,%eax
		mov    0x1a(%esp),%ecx
		add    %edx,%eax
		sar    $0x10,%ecx
		push   %eax
		mov    0x10(%esp),%eax
		add    %edx,%ebx
		add    %eax,%ecx
		mov    0x36(%esp),%eax
		mov    0x10(%esp),%edx
		sar    $0x10,%eax
		push   %edi
		add    %edx,%eax
		mov    %edi,%edx
		call   create_electric_strand
		test   %eax,%eax
		je     jump_c4018
		xor    %edx,%edx
		mov    0xa(%esi),%dx
		cmp    $0x5,%edx
		setne  %dl
		xor    %dh,%dh
		inc    %edx
		mov    %dx,0x28(%eax)
		orb    $0x20,0xd(%eax)
		jmp    jump_c4018
	jump_c40d6:
		mov    0x8(%esp),%eax
		sar    $0x8,%eax
		mov    %ax,0x24(%esp)
		mov    (%esp),%eax
		mov    $0xffffffff,%ebx
		sar    $0x8,%eax
		mov    %bx,0x28(%esp)
		mov    %ax,0x10(%esp)
		xor    %ebp,%ebp
		jmp    jump_c4100
	jump_c40fb:
		incw   0x28(%esp)
	jump_c4100:
		mov    0x26(%esp),%eax
		sar    $0x10,%eax
		cmp    $0x1,%eax
		jge    jump_c421f
		movw   $0xffff,0x2c(%esp)
		jmp    jump_c4131
	jump_c4119:
		imul   $0x3c,%eax,%eax
		mov    EXPORT_SYMBOL(sthings),%edx
		mov    0x2(%edx,%eax,1),%ax
	jump_c4127:
		test   %ax,%ax
		jne    jump_c4187
	jump_c412c:
		incw   0x2c(%esp)
	jump_c4131:
		mov    0x2a(%esp),%edx
		sar    $0x10,%edx
		cmp    $0x1,%edx
		jge    jump_c40fb
		mov    0x22(%esp),%ebx
		mov    0x26(%esp),%eax
		sar    $0x10,%ebx
		sar    $0x10,%eax
		add    %ebx,%eax
		test   %eax,%eax
		jle    jump_c412c
		cmp    $0x80,%eax
		jge    jump_c412c
		mov    0xe(%esp),%ebx
		sar    $0x10,%ebx
		add    %ebx,%edx
		test   %edx,%edx
		jle    jump_c412c
		cmp    $0x80,%edx
		jge    jump_c412c
		shl    $0x7,%edx
		add    %edx,%eax
		imul   $0x12,%eax,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0x8(%edx,%eax,1),%ax
		xor    %ecx,%ecx
		test   %ax,%ax
		je     jump_c412c
	jump_c4187:
		xor    %edx,%edx
		mov    %cx,%dx
		cmp    $0x190,%edx
		jge    jump_c412c
		cwtl
		inc    %ecx
		test   %eax,%eax
		jle    jump_c4119
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		add    %eax,%edx
		xor    %eax,%eax
		mov    0x9(%edx),%al
		cmp    $0x3,%eax
		jne    jump_c4216
		testb  $0x2,0xc(%edx)
		jne    jump_c4216
		cmp    %esi,%edx
		je     jump_c4216
		mov    0x1c(%edx),%eax
		sar    $0x5,%eax
		sub    %edi,%eax
		cmp    $0x37,%eax
		jge    jump_c4216
		cmp    $0xffffffc9,%eax
		jle    jump_c4216
		mov    0x18(%edx),%eax
		mov    0x8(%esp),%ebx
		sar    $0x8,%eax
		sub    %ebx,%eax
		imul   %eax,%eax
		mov    0x20(%edx),%ebx
		sar    $0x8,%ebx
		sub    (%esp),%ebx
		imul   %ebx,%ebx
		add    %ebx,%eax
		cmp    0xc(%esp),%eax
		jge    jump_c4216
		mov    0xe(%edx),%al
		mov    %esi,%ebx
		test   $0x8,%al
		je     jump_c4205
		mov    %edx,%eax
		call   stop_being_persuaded
	jump_c4205:
		cmpw   $0x0,0x92(%ebx)
		je     jump_c4216
		mov    %ebx,%eax
		call   ac_unpersuade_my_peeps
	jump_c4216:
		mov    0x2(%edx),%ax
		jmp    jump_c4127
	jump_c421f:
		xor    %eax,%eax
		add    $0x34,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_init_laser_elec)	/* 0x0C422C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x1c,%esp
		mov    %eax,%edi
		mov    %dx,0x10(%esp)
		call   ac_get_new_thing
		xor    %edx,%edx
		mov    %eax,%ebx
		mov    %edx,0x14(%esp)
		mov    %edx,0x18(%esp)
		test   %ax,%ax
		je     jump_c4680
		and    $0xffff,%eax
		lea    0x0(,%eax,4),%esi
		add    %eax,%esi
		shl    $0x2,%esi
		add    %eax,%esi
		mov    things,%eax
		shl    $0x3,%esi
		add    %eax,%esi
		testb  $0x1,0x47(%edi)
		je     jump_c428c
		mov    0x18(%edi),%eax
		mov    %eax,0x8(%esp)
		mov    0x1c(%edi),%eax
		add    $0x1400,%eax
		mov    0x20(%edi),%ebp
		jmp    jump_c42c1
	jump_c428c:
		xor    %eax,%eax
		mov    0x57(%edi),%al
		mov    0x18(%edi),%ecx
		mov    data_15335a(,%eax,4),%edx
		mov    EXPORT_SYMBOL(angle_direction)(,%eax,4),%eax
		mov    0x20(%edi),%ebp
		sar    $0x10,%eax
		sar    $0x10,%edx
		shl    $0x7,%eax
		shl    $0x7,%edx
		add    %eax,%ebp
		mov    0x1c(%edi),%eax
		add    %edx,%ecx
		add    $0x1400,%eax
		mov    %ecx,0x8(%esp)
	jump_c42c1:
		mov    %eax,0xc(%esp)
		mov    0x57(%edi),%al
		mov    %al,0x57(%esi)
		mov    0x8(%esp),%eax
		sar    $0x8,%eax
		test   %eax,%eax
		jl     jump_c4680
		cmp    $0x8000,%eax
		jg     jump_c4680
		mov    %ebp,%edx
		sar    $0x8,%edx
		test   %edx,%edx
		jl     jump_c4680
		cmp    $0x8000,%edx
		jg     jump_c4680
		testb  $0x20,0xf(%edi)
		je     jump_c432c
		mov    0x2c(%edi),%eax
		mov    %eax,0x2c(%esi)
		mov    0x30(%edi),%eax
		mov    %eax,0x30(%esi)
		mov    0x34(%edi),%eax
		mov    %eax,0x34(%esi)
		mov    0xf(%edi),%al
		mov    $0x1,%ecx
		and    $0xdf,%al
		mov    %ecx,0x18(%esp)
		mov    %al,0xf(%edi)
		jmp    jump_c43c0
	jump_c432c:
		mov    0x40(%edi),%ecx
		test   %ecx,%ecx
		je     jump_c4364
		mov    0x18(%ecx),%eax
		sar    $0x8,%eax
		mov    %eax,0x2c(%esi)
		mov    0x40(%edi),%eax
		mov    0x1c(%eax),%eax
		sar    $0x8,%eax
		add    $0xa,%eax
		mov    %eax,0x30(%esi)
		mov    0x40(%edi),%eax
		mov    0x20(%eax),%eax
		sar    $0x8,%eax
		mov    %eax,0x34(%esi)
		mov    0x40(%edi),%eax
		mov    0x16(%eax),%ax
		mov    %eax,0x14(%esp)
		jmp    jump_c43c0
	jump_c4364:
		testb  $0x10,0xd(%edi)
		jne    jump_c4379
		xor    %eax,%eax
		mov    %bx,%ax
		call   ac_remove_thing
		jmp    jump_c4680
	jump_c4379:
		xor    %ebx,%ebx
		mov    0x57(%edi),%bl
		mov    data_15335a(,%ebx,4),%ebx
		sar    $0x10,%ebx
		mov    %ebx,(%esp)
		xor    %ebx,%ebx
		mov    (%esp),%ecx
		mov    EXPORT_SYMBOL(weapon_defs)+100,%bx # sizeof(struct WeaponDef) * 4
		imul   %ebx,%ecx
		add    %eax,%ecx
		mov    0xc(%esp),%eax
		mov    %ecx,0x2c(%esi)
		sar    $0x8,%eax
		mov    %eax,0x30(%esi)
		xor    %eax,%eax
		mov    0x57(%edi),%al
		mov    EXPORT_SYMBOL(angle_direction)(,%eax,4),%eax
		sar    $0x10,%eax
		imul   %ebx,%eax
		add    %eax,%edx
		mov    %edx,0x34(%esi)
	jump_c43c0:
		mov    0x8(%esp),%eax
		mov    %eax,0x18(%esi)
		mov    0xc(%esp),%eax
		mov    %edi,%edx
		mov    %eax,0x1c(%esi)
		sub    things,%edx
		mov    $0xa8,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		push   %esi
		movw   $0x32,0x14(%esi)
		mov    0x10(%esp),%edx
		mov    %ebp,%ebx
		mov    %ax,0x3c(%esi)
		lea    0x34(%esi),%eax
		sar    $0x8,%ebx
		push   %eax
		lea    0x30(%esi),%eax
		sar    $0x8,%edx
		push   %eax
		mov    0x14(%esp),%eax
		lea    0x2c(%esi),%ecx
		sar    $0x8,%eax
		mov    %ebp,0x20(%esi)
		call   ac_laser_hit_at
		xor    %edx,%edx
		mov    0x10(%esp),%dx
		cmp    $0xf,%edx
		jle    jump_c4426
		movw   $0xf,0x10(%esp)
	jump_c4426:
		xor    %edx,%edx
		mov    0x10(%esp),%dx
		cmp    $0x5,%edx
		jge    jump_c4439
		movw   $0x5,0x10(%esp)
	jump_c4439:
		xor    %edx,%edx
		xor    %ecx,%ecx
		mov    0x10(%esp),%dx
		mov    EXPORT_SYMBOL(weapon_defs)+102,%cx # sizeof(struct WeaponDef) * 4 + 2
		sub    $0x5,%edx
		imul   %ecx,%edx
		sar    $0x3,%edx
		add    %edx,%ecx
		test   %eax,%eax
		jge    jump_c447b
		cmp    $0xffffd8f1,%eax
		je     jump_c463e
		neg    %eax
		mov    0x34(%esi),%ebx
		mov    0x30(%esi),%edx
		movswl %ax,%ecx
		mov    0x2c(%esi),%eax
		call   elec_hit_building
		jmp    jump_c463e
	jump_c447b:
		mov    0x8(%esp),%edx
		sar    $0x8,%edx
		mov    %ebp,%ebx
		mov    %edx,0x4(%esp)
		mov    0xc(%esp),%edx
		sar    $0x8,%ebx
		sar    $0x8,%edx
		test   %eax,%eax
		jle    jump_c4544
		test   $0x20000000,%eax
		jne    jump_c463e
		test   $0x40000000,%eax
		je     jump_c44fb
		push   $0x2
		push   %edi
		mov    0x34(%esi),%edi
		sub    %ebx,%edi
		movswl %di,%ebx
		push   %ebx
		mov    0x30(%esi),%ebx
		sub    %edx,%ebx
		mov    0x10(%esp),%edi
		movswl %bx,%edx
		mov    0x2c(%esi),%ebx
		sub    %edi,%ebx
		movswl %bx,%ebp
		mov    %eax,%ebx
		and    $0xbfffffff,%ebx
		neg    %ebx
		mov    %ebx,%eax
		movswl %cx,%edi
		shl    $0x4,%eax
		mov    %edx,%ecx
		sub    %ebx,%eax
		mov    EXPORT_SYMBOL(sthings),%ebx
		shl    $0x2,%eax
		mov    %edi,%edx
		add    %ebx,%eax
		mov    %ebp,%ebx
		call   ac_person_hit_by_bullet
		jmp    jump_c463e
	jump_c44fb:
		push   $0x2
		push   %edi
		mov    0x34(%esi),%edi
		sub    %ebx,%edi
		movswl %di,%ebx
		mov    0xc(%esp),%ebp
		push   %ebx
		lea    0x0(,%eax,4),%edi
		mov    0x30(%esi),%ebx
		add    %eax,%edi
		sub    %edx,%ebx
		shl    $0x2,%edi
		movswl %bx,%edx
		add    %eax,%edi
		mov    things,%eax
		mov    0x2c(%esi),%ebx
		shl    $0x3,%edi
		sub    %ebp,%ebx
		add    %edi,%eax
		movswl %bx,%ebx
		movswl %cx,%ebp
		mov    %edx,%ecx
		mov    %ebp,%edx
		call   ac_person_hit_by_bullet
		jmp    jump_c463e
	jump_c4544:
		cmpw   $0x0,0x14(%esp)
		je     jump_c459c
		push   $0x2
		push   %edi
		mov    0x34(%esi),%edi
		sub    %ebx,%edi
		movswl %di,%ebx
		push   %ebx
		mov    0x30(%esi),%ebx
		xor    %eax,%eax
		sub    %edx,%ebx
		mov    0x10(%esp),%edi
		movswl %bx,%edx
		mov    0x2c(%esi),%ebx
		mov    0x20(%esp),%ax
		sub    %edi,%ebx
		lea    0x0(,%eax,4),%edi
		movswl %cx,%ebp
		add    %eax,%edi
		mov    %edx,%ecx
		shl    $0x2,%edi
		mov    %ebp,%edx
		add    %eax,%edi
		mov    things,%eax
		shl    $0x3,%edi
		movswl %bx,%ebx
		add    %edi,%eax
		call   ac_person_hit_by_bullet
		jmp    jump_c463e
	jump_c459c:
		testb  $0x1,0x47(%edi)
		je     jump_c45ab
		mov    0x1c(%esi),%eax
		sar    $0x8,%eax
		mov    %eax,0x30(%esi)
	jump_c45ab:
		mov    0x2c(%esi),%edx
		sar    $0x8,%edx
		test   %edx,%edx
		jl     jump_c4680
		cmp    $0x80,%edx
		jge    jump_c4680
		mov    0x34(%esi),%eax
		sar    $0x8,%eax
		test   %eax,%eax
		jl     jump_c4680
		cmp    $0x80,%eax
		jge    jump_c4680
		cmpw   $0x0,0x18(%esp)
		je     jump_c463e
		shl    $0x7,%eax
		add    %eax,%edx
		lea    0x0(,%edx,8),%eax
		add    %eax,%edx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %edx,%edx
		mov    (%edx,%eax,1),%ax
		and    $0x3f,%ah
		cwtl
		call   ac_get_my_texture_bits
		test   $0x2,%al
		je     jump_c463e
		push   $0x8
		mov    0x34(%esi),%ax
		xor    %ebx,%ebx
		mov    0x2c(%esi),%cx
		mov    %ax,%bx
		movswl %ax,%edx
		movswl %cx,%eax
		call   ac_alt_at_point
		mov    %eax,%edx
		xor    %eax,%eax
		sar    $0x8,%edx
		mov    %cx,%ax
		mov    $0x442,%ecx
		call   create_scale_effect
		movb   $0x3a,0x8(%eax)
	jump_c463e:
		mov    0x10(%esp),%eax
		mov    %ax,0x2a(%esi)
		mov    %ax,0x28(%esi)
		xor    %eax,%eax
		mov    0x10(%esp),%ax
		cmp    $0x8,%eax
		jle    jump_c465d
		movw   $0x8,0x10(%esp)
	jump_c465d:
		mov    0x10(%esp),%al
		mov    %al,0x8(%esi)
		xor    %eax,%eax
		mov    0x16(%esi),%ax
		movl   $0x4,0xc(%esi)
		call   ac_add_node_thing
		movb   $0x13,0x9(%esi)
		movw   $0x0,0xa(%esi)
	jump_c4680:
		add    $0x1c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_init_laser_q_sep)	/* 0x0C46D4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		mov    %eax,%ecx
		mov    %edx,%esi
		movswl %dx,%ebx
		mov    %ebx,%edx
		call   ac_init_laser_guided
		mov    %ebx,%edx
		mov    %ecx,%eax
		call   ac_init_laser_guided
		mov    %ebx,%edx
		mov    %ecx,%eax
		call   ac_init_laser_guided
		mov    %ebx,%edx
		mov    %ecx,%eax
		call   ac_init_laser_guided
		mov    %ebx,%edx
		mov    %ecx,%eax
		call   ac_init_laser_guided
		mov    $0x14,%ebx
		xor    %edx,%edx
		mov    %ecx,%eax
		mov    %si,%dx
		call   ac_init_laser_beam
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_init_laser_guided)	/* 0x0C4720 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x14,%esp
		mov    %eax,%esi
		mov    %edx,%edi
		movl   $0x10000,0x8(%esp)
		mov    0x51(%eax),%cl
		mov    $0x1,%eax
		shl    %cl,%eax
		not    %eax
		mov    %eax,(%esp)
	jump_c4743:
		movswl %di,%eax
		test   %eax,%eax
		jle    jump_c48c0
		mov    (%esp),%ebx
		lea    0x8(%esp),%eax
		push   %ebx
		mov    0xc(%esp),%ecx
		mov    0x1c(%esi),%edx
		push   $0xffffffff
		sar    $0x8,%edx
		mov    0x20(%esi),%ebx
		push   %eax
		mov    0x18(%esi),%eax
		sar    $0x8,%ebx
		sar    $0x8,%eax
		call   find_nearest_person_min
		mov    %eax,0x10(%esp)
		test   %ax,%ax
		je     jump_c48c0
		call   ac_get_new_thing
		test   %ax,%ax
		je     jump_c48c0
		and    $0xffff,%eax
		imul   $0xa8,%eax,%eax
		mov    things,%ebx
		add    %eax,%ebx
		testb  $0x1,0x47(%esi)
		je     jump_c47bc
		mov    0x1c(%esi),%eax
		mov    0x18(%esi),%ecx
		add    $0x1400,%eax
		mov    0x20(%esi),%edx
		mov    %eax,0x4(%esp)
		jmp    jump_c47f7
	jump_c47bc:
		xor    %eax,%eax
		mov    0x57(%esi),%al
		add    $0x4,%eax
		and    $0x7,%eax
		mov    data_15335a(,%eax,4),%edx
		sar    $0x10,%edx
		mov    0x18(%esi),%ecx
		shl    $0x7,%edx
		mov    0x20(%esi),%ebp
		add    %edx,%ecx
		mov    EXPORT_SYMBOL(angle_direction)(,%eax,4),%edx
		mov    0x1c(%esi),%eax
		sar    $0x10,%edx
		add    $0x1400,%eax
		shl    $0x7,%edx
		mov    %eax,0x4(%esp)
		add    %ebp,%edx
	jump_c47f7:
		mov    %ecx,%eax
		sar    $0x8,%eax
		test   %eax,%eax
		jl     jump_c48c0
		cmp    $0x8000,%eax
		jg     jump_c48c0
		mov    %edx,%eax
		sar    $0x8,%eax
		test   %eax,%eax
		jl     jump_c48c0
		cmp    $0x8000,%eax
		jg     jump_c48c0
		xor    %eax,%eax
		mov    0x57(%esi),%al
		add    $0x4,%eax
		xor    %ah,%ah
		and    $0x7,%al
		shl    $0x8,%eax
		mov    %ax,0x60(%ebx)
		testb  $0x20,0xd(%esi)
		jne    jump_c4858
		call   ac_LbRandomAnyShort
		and    $0x1,%ah
		add    %ax,0x60(%ebx)
		subw   $0xff,0x60(%ebx)
		andb   $0x7,0x61(%ebx)
	jump_c4858:
		xor    %eax,%eax
		mov    0x10(%esp),%ax
		imul   $0xa8,%eax,%eax
		mov    %ecx,0x18(%ebx)
		mov    %edx,0x20(%ebx)
		mov    0x4(%esp),%edx
		mov    $0xa8,%ecx
		mov    %edx,0x1c(%ebx)
		mov    %esi,%edx
		mov    %eax,0xc(%esp)
		mov    things,%eax
		mov    0xc(%esp),%ebp
		sub    %eax,%edx
		add    %eax,%ebp
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		movw   $0x1e,0x2a(%ebx)
		movw   $0x1e,0x28(%ebx)
		movl   $0x4,0xc(%ebx)
		mov    %ax,0x3c(%ebx)
		xor    %eax,%eax
		dec    %edi
		mov    0x16(%ebx),%ax
		mov    %ebp,0x40(%ebx)
		call   ac_add_node_thing
		movb   $0xc,0x9(%ebx)
		jmp    jump_c4743
	jump_c48c0:
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_init_laser_beam)	/* 0x0C48CC */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x34,%esp
		mov    %eax,0x1c(%esp)
		mov    %edx,0x2c(%esp)
		mov    %bl,0x30(%esp)
		call   ac_get_new_thing
		xor    %edx,%edx
		mov    %eax,%ebx
		mov    %edx,0x28(%esp)
		test   %ax,%ax
		je     jump_c4dc0
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%esi
		shl    $0x3,%eax
		add    %eax,%esi
		mov    0x1c(%esp),%eax
		testb  $0x1,0x47(%eax)
		je     jump_c493d
		mov    0x18(%eax),%eax
		mov    %eax,0x10(%esp)
		mov    0x1c(%esp),%eax
		mov    0x20(%eax),%eax
		mov    %eax,0x18(%esp)
		mov    0x1c(%esp),%eax
		mov    0x1c(%eax),%eax
		add    $0x1400,%eax
		jmp    jump_c4986
	jump_c493d:
		mov    0x1c(%esp),%edx
		xor    %eax,%eax
		mov    0x57(%edx),%al
		mov    0x1c(%esp),%ecx
		mov    data_15335a(,%eax,4),%edx
		mov    0x18(%ecx),%ecx
		sar    $0x10,%edx
		mov    EXPORT_SYMBOL(angle_direction)(,%eax,4),%eax
		shl    $0x7,%edx
		sar    $0x10,%eax
		add    %edx,%ecx
		mov    0x1c(%esp),%edx
		shl    $0x7,%eax
		mov    0x20(%edx),%edx
		add    %eax,%edx
		mov    0x1c(%esp),%eax
		mov    0x1c(%eax),%eax
		mov    %ecx,0x10(%esp)
		add    $0x1400,%eax
		mov    %edx,0x18(%esp)
	jump_c4986:
		mov    %eax,0x14(%esp)
		mov    0x1c(%esp),%eax
		mov    0x57(%eax),%al
		mov    %al,0x57(%esi)
		mov    0x10(%esp),%eax
		sar    $0x8,%eax
		test   %eax,%eax
		jl     jump_c4dc0
		cmp    $0x8000,%eax
		jg     jump_c4dc0
		mov    0x18(%esp),%edx
		sar    $0x8,%edx
		test   %edx,%edx
		jl     jump_c4dc0
		cmp    $0x8000,%edx
		jg     jump_c4dc0
		mov    0x1c(%esp),%ecx
		testb  $0x20,0xf(%ecx)
		je     jump_c49ee
		mov    0x2c(%ecx),%eax
		mov    %eax,0x2c(%esi)
		mov    0x30(%ecx),%eax
		mov    %eax,0x30(%esi)
		mov    0x34(%ecx),%eax
		mov    %eax,0x34(%esi)
		andb   $0xdf,0xf(%ecx)
		jmp    jump_c4a85
	jump_c49ee:
		mov    0x40(%ecx),%edi
		test   %edi,%edi
		je     jump_c4a26
		mov    0x18(%edi),%eax
		sar    $0x8,%eax
		mov    %eax,0x2c(%esi)
		mov    0x40(%ecx),%eax
		mov    0x1c(%eax),%eax
		sar    $0x8,%eax
		add    $0xa,%eax
		mov    %eax,0x30(%esi)
		mov    0x40(%ecx),%eax
		mov    0x20(%eax),%eax
		sar    $0x8,%eax
		mov    %eax,0x34(%esi)
		mov    0x40(%ecx),%eax
		mov    0x16(%eax),%ax
		mov    %eax,0x28(%esp)
		jmp    jump_c4a85
	jump_c4a26:
		testb  $0x10,0xd(%ecx)
		jne    jump_c4a3b
		xor    %eax,%eax
		mov    %bx,%ax
		call   ac_remove_thing
		jmp    jump_c4dc0
	jump_c4a3b:
		xor    %ebx,%ebx
		mov    0x57(%ecx),%bl
		xor    %ecx,%ecx
		mov    data_15335a(,%ebx,4),%ebx
		mov    EXPORT_SYMBOL(weapon_defs)+425,%cx # sizeof(struct WeaponDef) * 17
		sar    $0x10,%ebx
		imul   %ecx,%ebx
		add    %ebx,%eax
		mov    %eax,0x2c(%esi)
		mov    0x14(%esp),%eax
		sar    $0x8,%eax
		mov    0x1c(%esp),%ebx
		mov    %eax,0x30(%esi)
		xor    %eax,%eax
		mov    0x57(%ebx),%al
		mov    EXPORT_SYMBOL(angle_direction)(,%eax,4),%ebx
		xor    %eax,%eax
		sar    $0x10,%ebx
		mov    %cx,%ax
		imul   %ebx,%eax
		add    %eax,%edx
		mov    %edx,0x34(%esi)
	jump_c4a85:
		mov    0x10(%esp),%eax
		mov    0x1c(%esp),%edx
		mov    $0xa8,%ebx
		mov    %eax,0x18(%esi)
		mov    0x18(%esp),%eax
		mov    things,%ebp
		mov    %eax,0x20(%esi)
		mov    0x14(%esp),%eax
		sub    %ebp,%edx
		mov    %eax,0x1c(%esi)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %ax,0x3c(%esi)
		mov    0x10(%esp),%eax
		mov    0x2c(%esi),%edx
		sar    $0x8,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		mov    0x18(%esp),%eax
		mov    0x34(%esi),%ebx
		sar    $0x8,%eax
		sub    %ebx,%eax
		movswl %dx,%edx
		movswl %ax,%ecx
		xor    %ebx,%ebx
		mov    0x1c(%esp),%eax
		movw   $0x32,0x14(%esi)
		call   init_shoot_recoil
		xor    %eax,%eax
		mov    0x2c(%esp),%ax
		cmp    $0xf,%eax
		jle    jump_c4afb
		movl   $0xf,0x2c(%esp)
	jump_c4afb:
		xor    %eax,%eax
		mov    0x2c(%esp),%ax
		cmp    $0x5,%eax
		jge    jump_c4b0f
		movl   $0x5,0x2c(%esp)
	jump_c4b0f:
		xor    %edx,%edx
		mov    0x30(%esp),%dl
		imul   $0x19,%edx,%eax # sizeof(struct WeaponDef)
		mov    EXPORT_SYMBOL(weapon_defs)+2(%eax),%ax
		xor    %edx,%edx
		and    $0xffff,%eax
		mov    0x2c(%esp),%dx
		mov    %eax,%edi
		sub    $0x5,%edx
		imul   %edx,%edi
		sar    $0x3,%edi
		add    %eax,%edi
	jump_c4b3f:
		mov    0x2c(%esi),%eax
		mov    %eax,(%esp)
		mov    0x30(%esi),%eax
		mov    %eax,0x4(%esp)
		mov    0x34(%esi),%eax
		mov    %eax,0x8(%esp)
		push   %esi
		lea    0xc(%esp),%eax
		push   %eax
		lea    0xc(%esp),%eax
		mov    0x20(%esp),%ebp
		push   %eax
		mov    0x20(%esp),%eax
		lea    0xc(%esp),%ecx
		sar    $0x8,%eax
		sar    $0x8,%ebp
		mov    %eax,0x30(%esp)
		mov    0x1c(%esp),%eax
		mov    %ebp,%ebx
		sar    $0x8,%eax
		mov    0x30(%esp),%edx
		mov    %eax,0x2c(%esp)
		call   ac_laser_hit_at
		mov    %eax,0xc(%esp)
		test   %eax,%eax
		jle    jump_c4c93
		test   %edi,%edi
		jle    jump_c4c93
		test   $0x20000000,%eax
		je     jump_c4bbe
		mov    (%esp),%eax
		mov    %eax,0x2c(%esi)
		mov    0x4(%esp),%eax
		mov    %eax,0x30(%esi)
		mov    0x8(%esp),%eax
		mov    %eax,0x34(%esi)
		jmp    jump_c4c93
	jump_c4bbe:
		test   $0x40000000,%eax
		je     jump_c4c10
		and    $0xbfffffff,%eax
		neg    %eax
		imul   $0x3c,%eax,%eax
		push   $0x3
		mov    0x20(%esp),%edx
		push   %edx
		mov    0x34(%esi),%edx
		sub    %ebp,%edx
		movswl %dx,%edx
		mov    0x2c(%esp),%ebx
		push   %edx
		mov    0x30(%esi),%edx
		sub    %ebx,%edx
		mov    0x2c(%esp),%ebp
		movswl %dx,%ecx
		mov    0x2c(%esi),%edx
		sub    %ebp,%edx
		mov    EXPORT_SYMBOL(sthings),%ebp
		movswl %dx,%ebx
		movswl %di,%edx
		add    %ebp,%eax
		call   ac_person_hit_by_bullet
		test   %eax,%eax
		jge    jump_c4c52
		jmp    jump_c4c93
	jump_c4c10:
		imul   $0xa8,%eax,%eax
		push   $0x3
		mov    0x34(%esi),%edx
		mov    0x20(%esp),%ecx
		sub    %ebp,%edx
		push   %ecx
		movswl %dx,%edx
		mov    0x2c(%esp),%ebp
		push   %edx
		mov    0x30(%esi),%edx
		sub    %ebp,%edx
		mov    0x2c(%esp),%ebx
		movswl %dx,%ecx
		mov    0x2c(%esi),%edx
		mov    things,%ebp
		sub    %ebx,%edx
		add    %ebp,%eax
		movswl %dx,%ebx
		movswl %di,%edx
		call   ac_person_hit_by_bullet
		test   %eax,%eax
		jl     jump_c4c93
	jump_c4c52:
		mov    (%esp),%edx
		shl    $0x8,%edx
		mov    %edx,0x10(%esp)
		mov    0x4(%esp),%edx
		shl    $0x8,%edx
		mov    %edx,0x14(%esp)
		mov    0x8(%esp),%edx
		shl    $0x8,%edx
		mov    %edx,0x18(%esp)
		test   %eax,%eax
		jne    jump_c4c8c
		mov    (%esp),%eax
		mov    %eax,0x2c(%esi)
		mov    0x4(%esp),%eax
		mov    %eax,0x30(%esi)
		mov    0x8(%esp),%eax
		mov    %eax,0x34(%esi)
		jmp    jump_c4c93
	jump_c4c8c:
		sub    %eax,%edi
		jmp    jump_c4b3f
	jump_c4c93:
		cmpl   $0x0,0xc(%esp)
		jge    jump_c4cae
		mov    (%esp),%eax
		mov    %eax,0x2c(%esi)
		mov    0x4(%esp),%eax
		mov    %eax,0x30(%esi)
		mov    0x8(%esp),%eax
		mov    %eax,0x34(%esi)
	jump_c4cae:
		xor    %edx,%edx
		xor    %eax,%eax
		mov    0x2c(%esp),%dx
		mov    EXPORT_SYMBOL(weapon_defs)+427,%ax # sizeof(struct WeaponDef) * 17 + 2
		sub    $0x5,%edx
		imul   %eax,%edx
		sar    $0x3,%edx
		add    %edx,%eax
		cmpl   $0x0,0xc(%esp)
		jge    jump_c4d0c
		mov    0x1c(%esp),%edx
		testb  $0x1,0x47(%edx)
		jne    jump_c4d92
		push   $0x4
		mov    0x80(%edx),%cl
		cwtl
		or     $0x40,%cl
		push   %eax
		mov    0x14(%esp),%eax
		mov    %cl,0x80(%edx)
		neg    %eax
		mov    0x34(%esi),%ebx
		mov    0x30(%esi),%edx
		movswl %ax,%ecx
		mov    0x2c(%esi),%eax
		call   ac_bul_hit_vector
		jmp    jump_c4d92
	jump_c4d0c:
		mov    0x28(%esp),%edi
		test   %di,%di
		je     jump_c4d7f
		push   $0x3
		xor    %edx,%edx
		mov    0x20(%esp),%ebx
		mov    %di,%dx
		push   %ebx
		mov    %edx,0x14(%esp)
		mov    0x20(%esp),%edx
		mov    0x34(%esi),%ebx
		sar    $0x8,%edx
		sub    %edx,%ebx
		movswl %bx,%edx
		push   %edx
		mov    0x20(%esp),%edx
		mov    0x30(%esi),%ebx
		sar    $0x8,%edx
		sub    %edx,%ebx
		mov    0x1c(%esp),%edx
		movswl %bx,%ecx
		sar    $0x8,%edx
		mov    0x2c(%esi),%ebx
		sub    %edx,%ebx
		mov    0x18(%esp),%edx
		movswl %ax,%edi
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		movswl %bx,%ebx
		add    %edx,%eax
		mov    %edi,%edx
		call   ac_person_hit_by_bullet
		jmp    jump_c4d92
	jump_c4d7f:
		mov    0x1c(%esp),%eax
		testb  $0x1,0x47(%eax)
		je     jump_c4d92
		mov    0x1c(%esi),%eax
		sar    $0x8,%eax
		mov    %eax,0x30(%esi)
	jump_c4d92:
		mov    0x2c(%esp),%eax
		mov    %ax,0x2a(%esi)
		mov    %ax,0x28(%esi)
		xor    %eax,%eax
		mov    0x30(%esp),%ch
		mov    0x16(%esi),%ax
		movl   $0x4,0xc(%esi)
		call   ac_add_node_thing
		cmp    $0x11,%ch
		jb     jump_c4dc0
		jbe    jump_c4dc8
		cmp    $0x14,%ch
		je     jump_c4dd4
	jump_c4dc0:
		add    $0x34,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_c4dc8:
		movb   $0x1d,0x9(%esi)
		add    $0x34,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_c4dd4:
		push   $0x3
		mov    $0x40,%ecx
		push   $0x0
		mov    $0x7f,%ebx
		mov    $0x25,%edx
		push   $0x64
		mov    %esi,%eax
		movb   $0x26,0x9(%esi)
		call   ac_play_dist_sample
		mov    $0x14,%ecx
		mov    0x34(%esi),%ebx
		mov    0x30(%esi),%edx
		mov    0x2c(%esi),%eax
		shl    $0x8,%ebx
		shl    $0x8,%edx
		shl    $0x8,%eax
		call   ac_bang_new4
		mov    0x34(%esi),%edx
		mov    0x2c(%esi),%eax
		xor    %ebx,%ebx
		sar    $0x8,%edx
		sar    $0x8,%eax
		call   ac_quick_crater
		add    $0x34,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_init_air_strike)	/* 0x0C4E2C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    %eax,%edi
		call   ac_get_new_thing
		test   %ax,%ax
		je     jump_c4ee2
		xor    %edx,%edx
		mov    %ax,%dx
		push   $0x3
		lea    0x0(,%edx,4),%esi
		mov    $0x40,%ecx
		add    %edx,%esi
		mov    $0x7f,%ebx
		shl    $0x2,%esi
		push   $0x0
		add    %edx,%esi
		mov    things,%eax
		shl    $0x3,%esi
		push   $0x64
		add    %eax,%esi
		mov    $0x42,%edx
		mov    %esi,%eax
		call   ac_play_dist_sample
		mov    0x18(%edi),%eax
		mov    %eax,0x18(%esi)
		mov    things,%ebx
		mov    0x20(%edi),%eax
		mov    %edi,%edx
		mov    %eax,0x20(%esi)
		sub    %ebx,%edx
		mov    0x1c(%edi),%eax
		mov    $0xa8,%ebx
		mov    %eax,0x1c(%esi)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %ax,0x3c(%esi)
		mov    nstart_ani,%eax
		movw   $0x190,0x28(%esi)
		mov    0x7d8(%eax),%ax
		movw   $0x3ec,0x26(%esi)
		movw   $0x0,0x52(%esi)
		movl   $0x4,0xc(%esi)
		movb   $0x1f,0x9(%esi)
		movw   $0x32,0x14(%esi)
		mov    %ax,0x24(%esi)
		mov    0x51(%edi),%al
		mov    %al,0x51(%esi)
		mov    %al,0x50(%esi)
	jump_c4ee2:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_air_strike)	/* 0x0C4EE8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    %eax,%esi
		mov    0x28(%eax),%ax
		movswl %ax,%edx
		dec    %eax
		mov    %ax,0x28(%esi)
		test   %edx,%edx
		jge    jump_c4f13
		xor    %eax,%eax
		mov    0x16(%esi),%ax
		call   ac_remove_thing
		jmp    jump_c5021
	jump_c4f13:
		mov    0x26(%esi),%eax
		sar    $0x10,%eax
		cmp    $0xdc,%eax
		jne    jump_c4f3c
		push   $0x3
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x4,%edx
		mov    %esi,%eax
		call   ac_play_dist_speech
	jump_c4f3c:
		mov    0x26(%esi),%edx
		sar    $0x10,%edx
		cmp    $0xc8,%edx
		jge    jump_c5021
		mov    $0x14,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		test   %edx,%edx
		jne    jump_c5021
		mov    0x20(%esi),%eax
		sar    $0x8,%eax
		mov    0x18(%esi),%edi
		mov    %eax,(%esp)
		call   ac_LbRandomAnyShort
		mov    %ax,%dx
		mov    $0xbb8,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		sar    $0x8,%edi
		sub    $0x5dc,%edx
		add    %edx,%edi
		xor    %edx,%edx
		call   ac_LbRandomAnyShort
		mov    %ax,%dx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    (%esp),%ebx
		sub    $0x5dc,%edx
		add    %edx,%ebx
		mov    %ebx,(%esp)
		mov    -0x2(%esp),%edx
		movswl %di,%eax
		sar    $0x10,%edx
		call   ac_alt_at_point
		sar    $0x8,%eax
		mov    $0x32,%ecx
		lea    0xa(%eax),%ebp
		shl    $0x8,%ebx
		mov    %ebp,%edx
		mov    %edi,%eax
		shl    $0x8,%edx
		shl    $0x8,%eax
		call   ac_bang_new4
		mov    (%esp),%ebx
		mov    %ebp,%edx
		mov    %edi,%eax
		call   init_nuclear_bomb
		mov    %eax,%edi
		test   %eax,%eax
		je     jump_c5021
		push   $0x3
		push   $0x0
		mov    $0x40,%ecx
		push   $0x64
		mov    $0x7f,%ebx
		mov    $0x1,%edx
		call   ac_play_dist_ssample
		mov    0x3c(%esi),%ax
		movw   $0x11,0x28(%edi)
		mov    %ax,0x38(%edi)
		mov    0xe(%edi),%ah
		movw   $0x0,0x14(%edi)
		and    $0xf7,%ah
		mov    %ah,0xe(%edi)
	jump_c5021:
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret

vtable_c502c:
		.long   func_c5453
		.long   func_c54f8
		.long   func_c5222
		.long   func_c52c8
		.long   func_c5325
		.long   func_c533c
		.long   func_c5a48
		.long   func_c557c
		.long   func_c5a48
		.long   func_c5781
		.long   func_c5898
		.long   func_c55e8
		.long   func_c55b0
		.long   func_c5a48
		.long   func_c59af
		.long   func_c575e
		.long   func_c5620
		.long   func_c5a48
		.long   func_c5a48
		.long   func_c5277
		.long   func_c5a48
		.long   func_c56a1
		.long   func_c5a48
		.long   func_c5a48
		.long   func_c5675
		.long   func_c56cd
		.long   func_c5a48
		.long   func_c5a48


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_init_fire_weapon)	/* 0x0C509C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    %eax,%esi
		xor    %edx,%edx
		mov    0x99(%eax),%dl
		imul   $0x19,%edx,%eax # sizeof(struct WeaponDef)
		mov    $EXPORT_SYMBOL(weapon_defs),%edi
		add    %eax,%edi
		testb  $0x1,0xc(%esi)
		jne    jump_c5a72
		xor    %eax,%eax
		mov    gameturn,%edx
		mov    0x16(%esi),%ax
		add    %edx,%eax
		test   $0x7f,%al
		jne    jump_c50e8
		mov    $0x1,%edx
		mov    %esi,%eax
		call   ac_process_random_speech
	jump_c50e8:
		xor    %eax,%eax
		mov    0x9(%esi),%al
		cmp    $0xf,%eax
		je     jump_c5181
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0x5,%eax
		je     jump_c5105
		test   %eax,%eax
		jne    jump_c5181
	jump_c5105:
		mov    $0x1,%edx
		mov    %esi,%eax
		call   ac_gun_out_anim
		xor    %edx,%edx
		mov    0x8(%esi),%dl
		mov    %al,0x6c(%esi)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,2),%ax
		xor    %edx,%edx
		dec    %eax
		mov    0x8(%esi),%dl
		mov    %ax,0x26(%esi)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		lea    0x0(,%eax,4),%edx
		xor    %eax,%eax
		mov    0x6c(%esi),%al
		add    %eax,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    0x57(%esi),%al
		add    %edx,%eax
		mov    nstart_ani,%edx
		mov    (%edx,%eax,2),%ax
		mov    %ax,0x24(%esi)
	jump_c5181:
		mov    0x94(%esi),%edx
		xor    %eax,%eax
		sar    $0x10,%edx
		mov    0x8(%edi),%ax
		cmp    %eax,%edx
		jle    jump_c5a3e
		cmpb   $0x0,in_network_game
		jne    jump_c5205
		cmpb   $0x0,is_single_game
		jne    jump_c5205
		testb  $0x20,0xd(%esi)
		je     jump_c5205
		xor    %ecx,%ecx
		mov    0x99(%esi),%cl
		mov    $0x1,%eax
		dec    %ecx
		mov    data_1c5290,%ebx
		shl    %cl,%eax
		test   %ebx,%eax
		jne    jump_c5205
		xor    %edx,%edx
		call   ac_LbRandomAnyShort
		mov    %ax,%dx
		mov    $0x11,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		cmp    $0x4,%edx
		jge    jump_c5205
		mov    0x8(%edi),%ax
		inc    %eax
		mov    %ax,0x96(%esi)
	jump_c5205:
		mov    0x99(%esi),%al
		dec    %al
		cmp    $0x1b,%al
		ja     func_c5a48
		and    $0xff,%eax
		jmp    *%cs:vtable_c502c(,%eax,4)


/*----------------------------------------------------------------*/
func_c5222:
/*----------------------------------------------------------------*/
		mov    0xd(%esi),%cl
		or     $0x4,%cl
		mov    %cl,0xd(%esi)
		test   $0x20,%cl
		je     jump_c5241
		mov    0x40(%esi),%ebx
		test   %ebx,%ebx
		je     jump_c5241
		testb  $0x2,0xc(%ebx)
		jne    jump_c5241
		orb    $0x20,0x46(%esi)
	jump_c5241:
		mov    0xd(%esi),%bl
		movw   $0x0,0x8c(%esi)
		test   $0x10,%bl
		je     func_c5a48
		push   $0x3
		push   $0xffffffff
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x7,%edx
		mov    %esi,%eax
		call   ac_play_dist_sample
		jmp    func_c5a48


/*----------------------------------------------------------------*/
func_c5277:
/*----------------------------------------------------------------*/
		testb  $0x20,0xd(%esi)
		je     jump_c528e
		mov    0x40(%esi),%ecx
		test   %ecx,%ecx
		je     jump_c528e
		testb  $0x2,0xc(%ecx)
		jne    jump_c528e
		orb    $0x20,0x46(%esi)
	jump_c528e:
		orb    $0x4,0xd(%esi)
		mov    0xd(%esi),%bh
		movw   $0x0,0x8c(%esi)
		test   $0x10,%bh
		je     func_c5a48
		push   $0x3
		push   $0xffffffff
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x7,%edx
		mov    %esi,%eax
		call   ac_play_dist_sample
		jmp    func_c5a48


/*----------------------------------------------------------------*/
func_c52c8:
/*----------------------------------------------------------------*/
		mov    0xd(%esi),%al
		or     $0x4,%al
		mov    %al,0xd(%esi)
		test   $0x20,%al
		je     jump_c52e5
		mov    0x40(%esi),%edx
		test   %edx,%edx
		je     jump_c52e5
		testb  $0x2,0xc(%edx)
		jne    jump_c52e5
		orb    $0x20,0x46(%esi)
	jump_c52e5:
		mov    0x47(%esi),%bl
		movw   $0x0,0x8c(%esi)
		test   $0x1,%bl
		jne    func_c5a48
		testb  $0x10,0xd(%esi)
		je     func_c5a48
		push   $0x3
		push   $0xffffffff
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x7,%edx
		mov    %esi,%eax
		call   ac_play_dist_sample
		jmp    func_c5a48


/*----------------------------------------------------------------*/
func_c5325:
/*----------------------------------------------------------------*/
		mov    0xd(%esi),%ch
		movw   $0x0,0x8c(%esi)
		or     $0x4,%ch
		mov    %ch,0xd(%esi)
		jmp    func_c5a48


/*----------------------------------------------------------------*/
func_c533c:
/*----------------------------------------------------------------*/
		testb  $0x20,0xd(%esi)
		je     jump_c53f2
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x1c,%al
		mov    %eax,%edx
		and    $0xffff,%edx
		sar    $0x2,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		mov    data_1a63ee(%edx,%eax,1),%bl
		dec    %bl
		mov    %bl,data_1a63ee(%edx,%eax,1)
		mov    %bl,%al
		and    $0xff,%eax
		jne    jump_c53f2
		mov    $0x1,%edx
		mov    0xa4(%esi),%bh
		movb   $0x0,0x99(%esi)
		and    $0xdf,%bh
		mov    0x16(%esi),%ax
		mov    %bh,0xa4(%esi)
		call   ac_find_nth_weapon_held
		mov    %al,%bl
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		sar    $0x2,%eax
		mov    %eax,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    0x54(%esi),%dx
		xor    %dh,%dh
		and    $0x3,%dl
		and    $0xffff,%edx
		mov    %bl,data_1a638c(%edx,%eax,1)
	jump_c53f2:
		mov    0x8(%edi),%ax
		mov    0x96(%esi),%dx
		sub    %eax,%edx
		mov    %esi,%eax
		mov    %dx,0x96(%esi)
		mov    $0x3,%edx
		call   ac_init_grenade
		push   $0x2
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x24,%edx
		mov    %esi,%eax
		call   ac_play_dist_sample
		mov    0x4(%edi),%ax
		mov    0xd(%esi),%cl
		mov    %ax,0x58(%esi)
		test   $0x20,%cl
		jne    func_c5a48
		mov    $0x500,%edx
		mov    %esi,%eax
		call   ac_choose_best_weapon_for_range
		jmp    func_c5a48


/*----------------------------------------------------------------*/
func_c5453:
/*----------------------------------------------------------------*/
		mov    0x8(%edi),%ax
		mov    0x96(%esi),%cx
		mov    0xd(%esi),%bl
		sub    %eax,%ecx
		and    $0xfb,%bl
		mov    %cx,0x96(%esi)
		mov    %bl,0xd(%esi)
		test   $0x20,%bl
		je     jump_c5486
		mov    0x40(%esi),%eax
		test   %eax,%eax
		je     jump_c5486
		testb  $0x2,0xc(%eax)
		jne    jump_c5486
		orb    $0x20,0x46(%esi)
	jump_c5486:
		mov    %esi,%eax
		movb   $0x1,0x78(%esi)
		call   ac_init_uzi
		mov    0x4(%edi),%ax
		mov    %ax,0x58(%esi)
		testb  $0x2,0x45(%esi)
		jne    jump_c54ef
		push   $0x3
		mov    0xd(%esi),%ah
		push   $0xffffffff
		test   $0x20,%ah
		je     jump_c54af
		xor    %eax,%eax
		jmp    jump_c54b4
	jump_c54af:
		mov    $0xa,%eax
	jump_c54b4:
		add    $0x64,%eax
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		and    $0xffff,%eax
		mov    0xd(%esi),%dl
		push   %eax
		test   $0x20,%dl
		jne    jump_c54d3
		xor    %eax,%eax
		jmp    jump_c54e0
	jump_c54d3:
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
	jump_c54e0:
		add    $0x50,%eax
		xor    %edx,%edx
		mov    %ax,%dx
		mov    %esi,%eax
		call   ac_play_dist_sample
	jump_c54ef:
		orb    $0x2,0x45(%esi)
		jmp    func_c5a48


/*----------------------------------------------------------------*/
func_c54f8:
/*----------------------------------------------------------------*/
		mov    0x8(%edi),%ax
		sub    %ax,0x96(%esi)
		mov    0xd(%esi),%bh
		and    $0xfb,%bh
		mov    %bh,0xd(%esi)
		test   $0x20,%bh
		je     jump_c5522
		mov    0x40(%esi),%ecx
		test   %ecx,%ecx
		je     jump_c5522
		testb  $0x2,0xc(%ecx)
		jne    jump_c5522
		orb    $0x20,0x46(%esi)
	jump_c5522:
		mov    %esi,%eax
		movb   $0x3,0x78(%esi)
		call   ac_init_minigun
		mov    0x4(%edi),%ax
		mov    %ax,0x58(%esi)
		testb  $0x2,0x45(%esi)
		jne    jump_c5573
		push   $0x3
		mov    $0x40,%ecx
		push   $0xffffffff
		mov    $0x7f,%ebx
		mov    0xd(%esi),%dl
		push   $0x64
		test   $0x20,%dl
		jne    jump_c5557
		xor    %eax,%eax
		jmp    jump_c5564
	jump_c5557:
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
	jump_c5564:
		add    $0x54,%eax
		xor    %edx,%edx
		mov    %ax,%dx
		mov    %esi,%eax
		call   ac_play_dist_sample
	jump_c5573:
		orb    $0x2,0x45(%esi)
		jmp    func_c5a48


/*----------------------------------------------------------------*/
func_c557c:
/*----------------------------------------------------------------*/
		mov    0x8(%edi),%ax
		mov    0x96(%esi),%cx
		sub    %eax,%ecx
		mov    %esi,%eax
		mov    %cx,0x96(%esi)
		call   ac_init_flamer
		mov    0x56(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    func_c5a48
		movw   $0xa,0x58(%esi)
		jmp    func_c5a48


/*----------------------------------------------------------------*/
func_c55b0:
/*----------------------------------------------------------------*/
		mov    0x46(%esi),%ah
		test   $0x80,%ah
		jne    func_c5a48
		mov    %ah,%dl
		or     $0x80,%dl
		mov    %esi,%eax
		mov    %dl,0x46(%esi)
		mov    $0xd,%edx
		call   ac_person_init_drop
		mov    0x8(%edi),%ax
		sub    %ax,0x96(%esi)
		mov    0x4(%edi),%ax
		mov    %ax,0x58(%esi)
		jmp    func_c5a48


/*----------------------------------------------------------------*/
func_c55e8:
/*----------------------------------------------------------------*/
		mov    0x46(%esi),%dh
		test   $0x80,%dh
		jne    func_c5a48
		mov    %dh,%bl
		mov    %esi,%eax
		or     $0x80,%bl
		mov    $0xc,%edx
		mov    %bl,0x46(%esi)
		call   ac_person_init_drop
		mov    0x8(%edi),%ax
		sub    %ax,0x96(%esi)
		mov    0x4(%edi),%ax
		mov    %ax,0x58(%esi)
		jmp    func_c5a48


/*----------------------------------------------------------------*/
func_c5620:
/*----------------------------------------------------------------*/
		mov    0xd(%esi),%cl
		or     $0x4,%cl
		mov    %cl,0xd(%esi)
		test   $0x20,%cl
		je     jump_c563f
		mov    0x40(%esi),%edi
		test   %edi,%edi
		je     jump_c563f
		testb  $0x2,0xc(%edi)
		jne    jump_c563f
		orb    $0x20,0x46(%esi)
	jump_c563f:
		mov    0xd(%esi),%bl
		movw   $0x0,0x8c(%esi)
		test   $0x10,%bl
		je     func_c5a48
		push   $0x3
		push   $0xffffffff
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x7,%edx
		mov    %esi,%eax
		call   ac_play_dist_sample
		jmp    func_c5a48


/*----------------------------------------------------------------*/
func_c5675:
/*----------------------------------------------------------------*/
		mov    0x8(%edi),%ax
		sub    %ax,0x96(%esi)
		mov    0xd(%esi),%bh
		movb   $0x1,0x78(%esi)
		and    $0xfb,%bh
		mov    %esi,%eax
		mov    %bh,0xd(%esi)
		call   ac_init_time_gun
		mov    0x4(%edi),%ax
		mov    %ax,0x58(%esi)
		jmp    func_c5a48


/*----------------------------------------------------------------*/
func_c56a1:
/*----------------------------------------------------------------*/
		mov    0x8(%edi),%ax
		sub    %ax,0x96(%esi)
		mov    0xd(%esi),%cl
		movb   $0x1,0x78(%esi)
		and    $0xfb,%cl
		mov    %esi,%eax
		mov    %cl,0xd(%esi)
		call   ac_init_stasis_gun
		mov    0x4(%edi),%ax
		mov    %ax,0x58(%esi)
		jmp    func_c5a48


/*----------------------------------------------------------------*/
func_c56cd:
/*----------------------------------------------------------------*/
		mov    0x8(%edi),%ax
		mov    0x96(%esi),%dx
		mov    0xd(%esi),%bh
		movb   $0x1,0x78(%esi)
		sub    %eax,%edx
		and    $0xfb,%bh
		mov    %dx,0x96(%esi)
		mov    %esi,%eax
		mov    %bh,0xd(%esi)
		call   ac_init_c_iff
		mov    0x4(%edi),%ax
		mov    0xa7(%esi),%cl
		movb   $0x0,0x99(%esi)
		and    $0xfd,%cl
		movb   $0x0,0x78(%esi)
		mov    %cl,0xa7(%esi)
		mov    0xd(%esi),%ch
		mov    %ax,0x58(%esi)
		test   $0x20,%ch
		je     func_c5a48
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		sar    $0x2,%eax
		mov    %eax,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		xor    %bl,%bl
		mov    %bl,data_1a638c(%edx,%eax,1)
		jmp    func_c5a48


/*----------------------------------------------------------------*/
func_c575e:
/*----------------------------------------------------------------*/
		mov    $0xffffffff,%ebx
		mov    $0x10,%edx
		mov    0x14(%esi),%ecx
		mov    %esi,%eax
		sar    $0x10,%ecx
		call   ac_give_take_me_weapon
		mov    %esi,%eax
		call   ac_init_air_strike
		jmp    func_c5a48


/*----------------------------------------------------------------*/
func_c5781:
/*----------------------------------------------------------------*/
		testb  $0x20,0xd(%esi)
		je     jump_c5837
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x1c,%al
		mov    %eax,%edx
		and    $0xffff,%edx
		sar    $0x2,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		mov    data_1a63f2(%edx,%eax,1),%bl
		dec    %bl
		mov    %bl,data_1a63f2(%edx,%eax,1)
		mov    %bl,%al
		and    $0xff,%eax
		jne    jump_c5837
		mov    $0x1,%edx
		mov    0xa5(%esi),%bh
		movb   $0x0,0x99(%esi)
		and    $0xfd,%bh
		mov    0x16(%esi),%ax
		mov    %bh,0xa5(%esi)
		call   ac_find_nth_weapon_held
		mov    %al,%bl
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		sar    $0x2,%eax
		mov    %eax,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		mov    %bl,data_1a638c(%edx,%eax,1)
	jump_c5837:
		mov    0x8(%edi),%ax
		mov    0x96(%esi),%bx
		mov    $0x4,%edx
		sub    %eax,%ebx
		mov    %esi,%eax
		mov    %bx,0x96(%esi)
		call   ac_init_grenade
		push   $0x2
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x24,%edx
		mov    %esi,%eax
		call   ac_play_dist_sample
		mov    0x4(%edi),%ax
		mov    0xd(%esi),%cl
		mov    %ax,0x58(%esi)
		test   $0x20,%cl
		jne    func_c5a48
		mov    $0x500,%edx
		mov    %esi,%eax
		call   ac_choose_best_weapon_for_range
		jmp    func_c5a48


/*----------------------------------------------------------------*/
func_c5898:
/*----------------------------------------------------------------*/
		testb  $0x20,0xd(%esi)
		je     jump_c5950
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x1c,%al
		mov    %eax,%edx
		and    $0xffff,%edx
		sar    $0x2,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		mov    data_1a63f6(%edx,%eax,1),%cl
		dec    %cl
		mov    %cl,data_1a63f6(%edx,%eax,1)
		mov    %cl,%al
		and    $0xff,%eax
		jne    jump_c5950
		mov    $0x1,%edx
		mov    0xa5(%esi),%ch
		movb   $0x0,0x99(%esi)
		and    $0xfb,%ch
		mov    0x16(%esi),%ax
		mov    %ch,0xa5(%esi)
		call   ac_find_nth_weapon_held
		xor    %edx,%edx
		mov    0x54(%esi),%dx
		sar    $0x2,%edx
		mov    %al,%bl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		mov    %bl,data_1a638c(%edx,%eax,1)
	jump_c5950:
		mov    0x8(%edi),%ax
		mov    0x96(%esi),%dx
		sub    %eax,%edx
		mov    %esi,%eax
		mov    %dx,0x96(%esi)
		mov    $0x5,%edx
		call   ac_init_grenade
		push   $0x2
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x24,%edx
		mov    %esi,%eax
		call   ac_play_dist_sample
		mov    0x4(%edi),%ax
		mov    %ax,0x58(%esi)
		testb  $0x20,0xd(%esi)
		jne    func_c5a48
		mov    $0x500,%edx
		mov    %esi,%eax
		call   ac_choose_best_weapon_for_range
		jmp    func_c5a48


/*----------------------------------------------------------------*/
func_c59af:
/*----------------------------------------------------------------*/
		mov    0x8(%edi),%ax
		mov    0x96(%esi),%dx
		mov    0xd(%esi),%bh
		sub    %eax,%edx
		and    $0xfb,%bh
		mov    %dx,0x96(%esi)
		mov    %bh,0xd(%esi)
		test   $0x20,%bh
		je     jump_c59e2
		mov    0x40(%esi),%eax
		test   %eax,%eax
		je     jump_c59e2
		testb  $0x2,0xc(%eax)
		jne    jump_c59e2
		orb    $0x20,0x46(%esi)
	jump_c59e2:
		mov    %esi,%eax
		movb   $0x1,0x78(%esi)
		call   ac_init_long_range
		push   $0x3
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x0
		mov    $0x21,%edx
		mov    0x4(%edi),%ax
		push   $0x64
		mov    %ax,0x58(%esi)
		mov    %esi,%eax
		call   ac_play_dist_sample
		jmp    func_c5a48
	jump_c5a13:
		push   $0x2
		mov    $0x40,%ecx
		mov    0x54(%esi),%ax
		mov    $0x7f,%ebx
		xor    %ah,%ah
		push   $0x0
		and    $0x3,%al
		xor    %edx,%edx
		add    $0x58,%eax
		push   $0x64
		mov    %ax,%dx
		mov    %esi,%eax
		call   ac_play_dist_sample
		jmp    func_c5a48
	jump_c5a3e:
		mov    0x99(%esi),%al
		cmp    $0x2,%al
		je     jump_c5a13


/*----------------------------------------------------------------*/
func_c5a48:
/*----------------------------------------------------------------*/
		testb  $0x4,0xd(%esi)
		jne    jump_c5a5f
		xor    %eax,%eax
		mov    0x99(%esi),%al
		cmp    $0x8,%eax
		je     jump_c5a5f
		andb   $0xdf,0xf(%esi)
	jump_c5a5f:
		testb  $0x20,0xd(%esi)
		je     jump_c5a72
		xor    %edx,%edx
		mov    %esi,%eax
		mov    0x58(%esi),%dx
		call   ac_set_player_weapon_turn
	jump_c5a72:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_init_razor_wire)	/* 0x0C5A78 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		mov    %eax,%esi
		mov    %dl,%cl
		call   ac_get_new_thing
		mov    %eax,%edx
		test   %ax,%ax
		je     jump_c5b29
		xor    %ebx,%ebx
		mov    %ax,%bx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		add    %eax,%ebx
		mov    things,%eax
		shl    $0x3,%ebx
		mov    0x18(%esi),%ebp
		add    %ebx,%eax
		mov    0x1c(%esi),%edi
		mov    0x20(%esi),%ebx
		movb   $0x1c,0x9(%eax)
		movl   $0x4,0xc(%eax)
		mov    %cl,0x8(%eax)
		mov    %ebp,0x18(%eax)
		mov    %ebx,0x20(%eax)
		mov    %edi,0x1c(%eax)
		sar    $0x8,%ebp
		sar    $0x8,%ebx
		mov    %ebp,0x2c(%eax)
		sar    $0x8,%edi
		mov    %ebx,0x34(%eax)
		mov    %edi,0x30(%eax)
		mov    0x16(%esi),%bx
		movw   $0xff9c,0x3a(%eax)
		mov    %bx,0x3c(%eax)
		mov    0x51(%esi),%bl
		mov    %bl,0x50(%eax)
		mov    %dx,0x86(%esi)
		mov    0x16(%eax),%ax
		and    $0xffff,%eax
		call   ac_add_node_thing
		push   $0x1
		push   $0xffffffff
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x43,%edx
		mov    %esi,%eax
		call   ac_play_dist_sample
		orb    $0x1,0x44(%esi)
	jump_c5b29:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_finalise_razor_wire)	/* 0x0C5B30 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		mov    %eax,%edi
		mov    0x44(%eax),%ah
		and    $0xfa,%ah
		mov    %ah,0x44(%edi)
		xor    %eax,%eax
		mov    $0x43,%edx
		mov    0x16(%edi),%ax
		call   ac_stop_sample_using_heap
		xor    %eax,%eax
		mov    0x86(%edi),%ax
		lea    0x0(,%eax,4),%esi
		add    %eax,%esi
		shl    $0x2,%esi
		add    %eax,%esi
		mov    things,%eax
		shl    $0x3,%esi
		add    %eax,%esi
		mov    0x18(%esi),%eax
		mov    0x2c(%esi),%edx
		sar    $0x8,%eax
		cmp    %edx,%eax
		jne    jump_c5bad
		mov    0x1c(%esi),%eax
		mov    0x30(%esi),%ebx
		sar    $0x8,%eax
		cmp    %ebx,%eax
		jne    jump_c5bad
		mov    0x20(%esi),%eax
		mov    0x34(%esi),%ecx
		sar    $0x8,%eax
		cmp    %ecx,%eax
		jne    jump_c5bad
		xor    %ecx,%eax
		mov    0x16(%esi),%ax
		call   ac_remove_thing
		mov    %esi,%eax
		call   ac_delete_node
		jmp    jump_c5c1d
	jump_c5bad:
		push   $0x2
		mov    0x16(%esi),%ax
		mov    0x34(%esi),%ebp
		mov    0x2c(%esi),%ecx
		mov    0x20(%esi),%ebx
		neg    %eax
		mov    0x1c(%esi),%edx
		cwtl
		add    $0x32,%ecx
		push   %eax
		mov    0x30(%esi),%eax
		sar    $0x8,%ebx
		shl    $0x3,%eax
		push   %ebp
		add    $0x3c,%eax
		sar    $0x5,%edx
		push   %eax
		mov    0x18(%esi),%eax
		add    $0x3c,%edx
		sar    $0x8,%eax
		call   dynamic_insert_vect
		xor    %edx,%edx
		mov    %ax,%dx
		test   %edx,%edx
		jne    jump_c5c07
		xor    %eax,%eax
		mov    0x16(%esi),%ax
		call   ac_remove_thing
		mov    %esi,%eax
		call   ac_delete_node
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_c5c07:
		mov    0x51(%edi),%dl
		movw   $0x7d0,0x28(%esi)
		movw   $0x14,0x3a(%esi)
		mov    %dl,0x50(%esi)
		mov    %ax,0x24(%esi)
	jump_c5c1d:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_update_razor_wire)	/* 0x0C5C24 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		xor    %ebx,%ebx
		mov    0x86(%eax),%bx
		lea    0x0(,%ebx,4),%edx
		add    %ebx,%edx
		shl    $0x2,%edx
		add    %ebx,%edx
		mov    things,%ebx
		shl    $0x3,%edx
		add    %ebx,%edx
		mov    0x18(%eax),%ebx
		mov    0x2c(%edx),%ecx
		sar    $0x8,%ebx
		cmp    %ecx,%ebx
		jne    jump_c5c72
		mov    0x1c(%eax),%ebx
		mov    0x30(%edx),%esi
		sar    $0x8,%ebx
		cmp    %esi,%ebx
		jne    jump_c5c72
		mov    0x20(%eax),%ebx
		mov    0x34(%edx),%edi
		sar    $0x8,%ebx
		cmp    %edi,%ebx
		je     jump_c5ca2
	jump_c5c72:
		testb  $0x20,0xd(%eax)
		je     jump_c5ca2
		subw   $0xf,0x96(%eax)
		cmpb   $0x0,0x8(%edx)
		je     jump_c5c8e
		subw   $0x1e,0x96(%eax)
	jump_c5c8e:
		mov    0x94(%eax),%ebx
		sar    $0x10,%ebx
		test   %ebx,%ebx
		jge    jump_c5ca2
		call   ac_finalise_razor_wire
		jmp    jump_c5cc3
	jump_c5ca2:
		mov    0x18(%eax),%ebx
		sar    $0x8,%ebx
		mov    %ebx,0x2c(%edx)
		mov    0x1c(%eax),%ebx
		sar    $0x8,%ebx
		mov    %ebx,0x30(%edx)
		mov    0x20(%eax),%ebx
		sar    $0x8,%ebx
		mov    %ebx,0x34(%edx)
		mov    0x51(%eax),%al
		mov    %al,0x50(%edx)
	jump_c5cc3:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_persuadertron)	/* 0x0C5CCC */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x30,%esp
		mov    %eax,%ecx
		mov    %dl,0x2c(%esp)
		mov    %ebx,%edi
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(weapon_defs)+175,%ax # sizeof(struct WeaponDef) * 7
		shl    $0x7,%eax
		movw   $0x0,(%ebx)
		mov    %eax,0xc(%esp)
		mov    0x70(%ecx),%ax
		shl    $0x4,%eax
		shr    $0xd,%ax
		and    $0xffff,%eax
		mov    0xc(%esp),%ebx
		inc    %eax
		imul   %eax,%ebx
		mov    0x18(%ecx),%eax
		sar    $0x8,%eax
		mov    %eax,(%esp)
		mov    0x1c(%ecx),%eax
		sar    $0x8,%eax
		mov    %eax,0x4(%esp)
		mov    0x20(%ecx),%eax
		sar    $0x8,%eax
		mov    $0xfffffffd,%edx
		mov    %eax,0x8(%esp)
		mov    0x18(%ecx),%eax
		mov    %dx,0x24(%esp)
		sar    $0x10,%eax
		mov    %ebx,0xc(%esp)
		mov    %ax,0x1c(%esp)
		mov    0x20(%ecx),%eax
		lea    0xc0(%ebx),%edx
		sar    $0x10,%eax
		mov    %edx,0xc(%esp)
		mov    %ax,0x20(%esp)
		xor    %ebp,%ebp
		jmp    jump_c5d5b
	jump_c5d56:
		incw   0x24(%esp)
	jump_c5d5b:
		mov    0x22(%esp),%eax
		sar    $0x10,%eax
		cmp    $0x4,%eax
		jge    jump_c5fc8
		movw   $0xfffd,0x14(%esp)
		jmp    jump_c5f0b
	jump_c5d77:
		xor    %eax,%eax
		mov    0x8(%ebx),%al
		imul   $0x14,%eax,%esi
		mov    EXPORT_SYMBOL(peep_type_stats)+8(%esi),%si
		cmp    $0x2,%eax
		jne    jump_c5d93
	jump_c5d8b:
		movl   $0x1,0x28(%esp)
	jump_c5d93:
		mov    0x70(%ebx),%ax
		shl    $0x4,%eax
		shr    $0xd,%ax
		mov    %eax,0x18(%esp)
		xor    %eax,%eax
		mov    0x18(%esp),%ax
		cmp    $0x4,%eax
		jne    jump_c5db7
		mov    EXPORT_SYMBOL(peep_type_stats)+28,%si
		jmp    jump_c5dc1
	jump_c5db7:
		cmp    $0x5,%eax
		jne    jump_c5dc1
		mov    $0x270f,%esi
	jump_c5dc1:
		testb  $0x20,0xd(%ecx)
		je     jump_c5dd0
		mov    %esi,%eax
		inc    %eax
		imul   $0x1e,%eax,%eax
		mov    %ax,(%edi)
	jump_c5dd0:
		xor    %eax,%eax
		mov    (%edi),%ax
		cmp    $0x258,%eax
		jle    jump_c5de1
		movw   $0x258,(%edi)
	jump_c5de1:
		xor    %eax,%eax
		mov    0x9(%ebx),%al
		cmp    $0x3,%eax
		jne    jump_c5e95
		testl  $0x40080002,0xc(%ebx)
		je     jump_c5e07
		xor    %eax,%eax
		mov    0x2c(%esp),%al
		cmp    $0x2,%eax
		jne    jump_c5e95
	jump_c5e07:
		xor    %eax,%eax
		mov    0x2c(%esp),%al
		cmp    $0x2,%eax
		jne    jump_c5e1c
		testb  $0x4,0x47(%ebx)
		jne    jump_c5e95
	jump_c5e1c:
		cmpw   $0x0,0x28(%esp)
		je     jump_c5e2f
		cmpb   $0x0,0x2c(%esp)
		je     jump_c5e95
	jump_c5e2f:
		cmp    0x92(%ecx),%si
		jle    jump_c5e43
		xor    %eax,%eax
		mov    0x2c(%esp),%al
		cmp    $0x2,%eax
		jne    jump_c5e95
	jump_c5e43:
		mov    0x51(%ebx),%al
		cmp    0x51(%ecx),%al
		jne    jump_c5e56
		xor    %eax,%eax
		mov    0x2c(%esp),%al
		cmp    $0x1,%eax
		jle    jump_c5e95
	jump_c5e56:
		xor    %eax,%eax
		mov    0x99(%ebx),%al
		cmp    $0x9,%eax
		je     jump_c5e95
		mov    0x94(%ecx),%eax
		xor    %esi,%esi
		sar    $0x10,%eax
		mov    (%edi),%si
		cmp    %eax,%esi
		jg     jump_c5e95
		cmp    %ecx,%ebx
		je     jump_c5e95
		xor    %eax,%eax
		mov    0xa(%ecx),%ax
		cmp    $0x28,%eax
		jne    jump_c5e9b
		xor    %eax,%eax
		mov    0x2c(%esp),%al
		cmp    $0x2,%eax
		je     jump_c5e9b
		cmp    0x48(%ecx),%dx
		je     jump_c5e9b
	jump_c5e95:
		mov    0x2(%ebx),%dx
		jmp    jump_c5f01
	jump_c5e9b:
		mov    0x1c(%ebx),%eax
		mov    0x4(%esp),%edx
		sar    $0x8,%eax
		sub    %edx,%eax
		cmp    $0x9b,%eax
		jge    jump_c5e95
		cmp    $0xffffff65,%eax
		jle    jump_c5e95
		mov    0x18(%ebx),%eax
		mov    (%esp),%esi
		sar    $0x8,%eax
		sub    %esi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%esi
		mov    0x20(%ebx),%eax
		mov    0x8(%esp),%edx
		sar    $0x8,%eax
		sub    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%esi
		jle    jump_c5ee0
		sar    %eax
		jmp    jump_c5ee2
	jump_c5ee0:
		sar    %esi
	jump_c5ee2:
		add    %esi,%eax
		cmp    0xc(%esp),%eax
		jge    jump_c5e95
		mov    0x16(%ebx),%dx
		jmp    jump_c5fca
	jump_c5ef3:
		imul   $0x3c,%eax,%eax
		mov    EXPORT_SYMBOL(sthings),%ebx
		mov    0x2(%ebx,%eax,1),%dx
	jump_c5f01:
		test   %dx,%dx
		jne    jump_c5f68
	jump_c5f06:
		incw   0x14(%esp)
	jump_c5f0b:
		mov    0x12(%esp),%ebx
		sar    $0x10,%ebx
		cmp    $0x4,%ebx
		jge    jump_c5d56
		mov    0x1a(%esp),%eax
		mov    0x22(%esp),%esi
		sar    $0x10,%eax
		sar    $0x10,%esi
		add    %esi,%eax
		test   %eax,%eax
		jle    jump_c5f06
		cmp    $0x80,%eax
		jge    jump_c5f06
		mov    0x1e(%esp),%esi
		sar    $0x10,%esi
		add    %esi,%ebx
		test   %ebx,%ebx
		jle    jump_c5f06
		cmp    $0x80,%ebx
		jge    jump_c5f06
		shl    $0x7,%ebx
		add    %ebx,%eax
		imul   $0x12,%eax,%ebx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		mov    0x8(%ebx,%eax,1),%dx
		xor    %eax,%eax
		mov    %eax,0x10(%esp)
		test   %dx,%dx
		je     jump_c5f06
	jump_c5f68:
		xor    %eax,%eax
		mov    0x10(%esp),%ax
		cmp    $0x2bc,%eax
		jge    jump_c5f06
		mov    0x10(%esp),%esi
		movswl %dx,%eax
		xor    %ebx,%ebx
		inc    %esi
		mov    %ebx,0x28(%esp)
		mov    %esi,0x10(%esp)
		test   %eax,%eax
		jle    jump_c5ef3
		imul   $0xa8,%eax,%eax
		mov    things,%ebx
		add    %eax,%ebx
		testb  $0x40,0x46(%ebx)
		je     jump_c5d77
		xor    %eax,%eax
		mov    0x81(%ebx),%al
		imul   $0x14,%eax,%esi
		mov    EXPORT_SYMBOL(peep_type_stats)+8(%esi),%si
		cmp    $0x2,%eax
		jne    jump_c5d93
		jmp    jump_c5d8b
	jump_c5fc8:
		xor    %edx,%edx
	jump_c5fca:
		mov    %edx,%eax
		add    $0x30,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_init_mech_rocket)	/* 0x0C5FD4 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x14,%esp
		mov    %eax,%ebp
		mov    %edx,%edi
		mov    0x40(%edx),%eax
		mov    %eax,0xc(%esp)
		mov    0xf(%edx),%ah
		sar    $0x3,%ecx
		test   $0x20,%ah
		jne    jump_c5ffb
		cmpl   $0x0,0xc(%esp)
		je     jump_c6203
	jump_c5ffb:
		call   ac_get_new_thing
		and    $0xffff,%eax
		mov    %eax,0x8(%esp)
		je     jump_c6203
		lea    0x0(,%eax,4),%esi
		add    %eax,%esi
		shl    $0x2,%esi
		add    %eax,%esi
		mov    things,%edx
		shl    $0x3,%esi
		mov    %ebx,%eax
		add    %edx,%esi
		shl    $0x8,%eax
		mov    %eax,0x18(%esi)
		mov    %ecx,%eax
		shl    $0x8,%eax
		mov    %eax,0x1c(%esi)
		mov    0x24(%esp),%eax
		shl    $0x8,%eax
		mov    %eax,0x20(%esi)
		mov    %ebp,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		movl   $0xa8,0x10(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idivl  0x10(%esp)
		movb   $0x6,0x9(%esi)
		movw   $0x32,0x14(%esi)
		mov    %ax,0x3c(%esi)
		mov    0x57(%ebp),%al
		movw   $0x14,0x2a(%esi)
		movw   $0x3c,0x28(%esi)
		movw   $0x2bc,0x38(%esi)
		movw   $0x0,0x24(%esi)
		movw   $0x0,0x26(%esi)
		movw   $0x0,0x52(%esi)
		mov    0xc(%esi),%dl
		movw   $0x0,(%esi)
		or     $0x4,%dl
		mov    %al,0x57(%esi)
		mov    %dl,0xc(%esi)
		testb  $0x20,0xf(%edi)
		je     jump_c60f1
		andb   $0xdf,0xf(%ebp)
		mov    0x72(%edi),%eax
		mov    0x74(%edi),%ebp
		sar    $0x10,%eax
		sar    $0x10,%ebp
		sub    %ebx,%eax
		sub    %ecx,%ebp
		mov    %eax,%ebx
		mov    0x76(%edi),%ecx
		mov    0x24(%esp),%eax
		sar    $0x10,%ecx
		sub    %eax,%ecx
		mov    0x74(%edi),%ax
		mov    %ax,0x64(%esi)
		mov    0x76(%edi),%ax
		mov    %ax,0x66(%esi)
		mov    0xf(%esi),%dl
		mov    0x78(%edi),%ax
		movl   $0x0,0x40(%esi)
		or     $0x20,%dl
		mov    %ax,0x68(%esi)
		mov    %dl,0xf(%esi)
		jmp    jump_c612a
	jump_c60f1:
		mov    0xc(%esp),%eax
		mov    %eax,0x40(%esi)
		mov    0xf(%esi),%al
		and    $0xdf,%al
		mov    0xc(%esp),%ebp
		mov    %al,0xf(%esi)
		mov    0x24(%esp),%edx
		mov    0x1c(%ebp),%ebp
		mov    0xc(%esp),%eax
		sar    $0x8,%ebp
		mov    0x18(%eax),%eax
		sub    %ecx,%ebp
		mov    0xc(%esp),%ecx
		sar    $0x8,%eax
		mov    0x20(%ecx),%ecx
		sub    %ebx,%eax
		sar    $0x8,%ecx
		mov    %eax,%ebx
		sub    %edx,%ecx
	jump_c612a:
		mov    %ecx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%edi
		mov    %ebx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		sar    $0x7,%edx
		mov    %edx,(%esp)
		mov    %edi,%edx
		sar    $0x7,%edx
		mov    %edx,0x4(%esp)
		cmp    %edi,%eax
		jge    jump_c6174
		mov    %edi,%edx
		sar    $0x5,%edx
		sub    %edx,%edi
		sub    0x4(%esp),%edi
		mov    %eax,%edx
		sar    $0x2,%edx
		add    %edx,%edi
		mov    %eax,%edx
		sar    $0x3,%edx
		sar    $0x6,%eax
		add    %edi,%edx
		add    %edx,%eax
		mov    (%esp),%edx
		add    %edx,%eax
		jmp    jump_c61a1
	jump_c6174:
		mov    %eax,%edx
		sar    $0x5,%edx
		sub    %edx,%eax
		mov    (%esp),%edx
		sub    %edx,%eax
		mov    %eax,0x10(%esp)
		mov    %edi,%eax
		mov    0x10(%esp),%edx
		sar    $0x2,%eax
		add    %eax,%edx
		mov    %edi,%eax
		sar    $0x3,%eax
		add    %eax,%edx
		mov    %edi,%eax
		sar    $0x6,%eax
		add    %edx,%eax
		add    0x4(%esp),%eax
	jump_c61a1:
		mov    %eax,%edi
		jne    jump_c61aa
		mov    $0x1,%edi
	jump_c61aa:
		mov    %ebx,%edx
		shl    $0x8,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %edi
		mov    %ebp,%edx
		shl    $0x8,%edx
		mov    %eax,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %edi
		mov    %ecx,%edx
		shl    $0x8,%edx
		mov    %eax,%ebp
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %edi
		mov    %eax,0x34(%esi)
		xor    %eax,%eax
		mov    %ebx,0x2c(%esi)
		mov    0x8(%esp),%ax
		mov    %ebp,0x30(%esi)
		call   ac_add_node_thing
		push   $0x3
		push   $0x0
		mov    $0x7f,%ebx
		mov    $0x40,%ecx
		push   $0x64
		mov    $0x18,%edx
		mov    %esi,%eax
		call   ac_play_dist_sample
	jump_c6203:
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_vehicle_weapon)	/* 0x0C620C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    %eax,%ecx
		mov    %edx,%esi
		mov    0xd(%edx),%ah
		test   $0x20,%ah
		je     jump_c626e
		test   $0x10,%ah
		jne    jump_c626e
		xor    %eax,%eax
		mov    0x5e(%ecx),%ax
		test   %eax,%eax
		je     jump_c626e
	jump_c622e:
		imul   $0xa8,%eax,%edx
		mov    things,%ebx
		add    %ebx,%edx
		xor    %ebx,%ebx
		mov    0x9(%edx),%bl
		cmp    $0x3,%ebx
		jne    jump_c6257
		mov    0xd(%edx),%bl
		test   $0x20,%bl
		je     jump_c6257
		test   $0x10,%bl
		jne    jump_c63a2
	jump_c6257:
		imul   $0xa8,%eax,%eax
		mov    things,%edx
		mov    0x5e(%edx,%eax,1),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_c622e
	jump_c626e:
		testb  $0x20,0xf(%esi)
		je     jump_c634b
		testb  $0x20,0xd(%esi)
		je     jump_c62fb
		xor    %eax,%eax
		mov    0x54(%esi),%ax
		sar    $0x2,%eax
		mov    %eax,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		mov    0x54(%esi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		add    %eax,%eax
		add    %edx,%eax
		xor    %ebx,%ebx
		xor    %edi,%edi
		mov    data_1a647a(%eax),%bx
		mov    data_1a63c8(%eax),%dx
		mov    data_1a6482(%eax),%di
		test   %dx,%dx
		je     jump_c62e8
		mov    data_1a63c6(%eax),%edx
		sar    $0x10,%edx
		mov    %edx,(%esp)
		xor    %edx,%edx
		mov    %dx,data_1a63c8(%eax)
		jmp    jump_c6310
	jump_c62e8:
		movswl %di,%edx
		movswl %bx,%eax
		call   ac_alt_at_point
		sar    $0x8,%eax
		add    $0x14,%eax
		jmp    jump_c630d
	jump_c62fb:
		mov    0x72(%ecx),%ebx
		mov    0x74(%ecx),%eax
		mov    0x76(%ecx),%edi
		sar    $0x10,%ebx
		sar    $0x10,%eax
		sar    $0x10,%edi
	jump_c630d:
		mov    %eax,(%esp)
	jump_c6310:
		mov    0x72(%ecx),%eax
		sar    $0x10,%eax
		cmp    %ebx,%eax
		jne    jump_c6324
		mov    0x76(%ecx),%eax
		sar    $0x10,%eax
		cmp    %edi,%eax
		je     jump_c632a
	jump_c6324:
		movw   $0x4e20,0x4a(%ecx)
	jump_c632a:
		movl   $0x0,0x40(%ecx)
		mov    %bx,0x74(%ecx)
		mov    (%esp),%eax
		mov    0xf(%ecx),%dh
		mov    %di,0x78(%ecx)
		or     $0x20,%dh
		mov    %ax,0x76(%ecx)
		mov    %dh,0xf(%ecx)
		jmp    jump_c6368
	jump_c634b:
		cmpl   $0x0,0x40(%esi)
		je     jump_c6368
		andb   $0xdf,0xf(%ecx)
		mov    0x40(%ecx),%eax
		mov    0x40(%esi),%ebx
		cmp    %ebx,%eax
		je     jump_c6368
		movw   $0x7d0,0x4a(%ecx)
		mov    %ebx,0x40(%ecx)
	jump_c6368:
		testb  $0x8,0xd(%esi)
		je     jump_c63a2
		mov    0x56(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_c63a2
		mov    0x48(%ecx),%eax
		sar    $0x10,%eax
		cmp    $0x18,%eax
		jge    jump_c63a2
		cmpl   $0x0,0x40(%ecx)
		je     jump_c638f
		cmpl   $0x0,0x40(%esi)
		jne    jump_c6395
	jump_c638f:
		testb  $0x20,0xf(%ecx)
		je     jump_c63a2
	jump_c6395:
		mov    %esi,%eax
		call   ac_init_v_rocket
		movw   $0x14,0x58(%esi)
	jump_c63a2:
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_mech_weapon)	/* 0x0C63AC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    %eax,%esi
		mov    %edx,%edi
		testb  $0x20,0xf(%edx)
		je     jump_c649c
		mov    0xf(%esi),%dh
		movl   $0x0,0x40(%esi)
		or     $0x20,%dh
		mov    %dh,0xf(%esi)
		testb  $0x20,0xd(%edi)
		je     jump_c645b
		xor    %eax,%eax
		mov    0x54(%edi),%ax
		sar    $0x2,%eax
		mov    %eax,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		mov    0x54(%edi),%ax
		xor    %ah,%ah
		and    $0x3,%al
		and    $0xffff,%eax
		add    %eax,%eax
		add    %edx,%eax
		xor    %edx,%edx
		mov    data_1a647a(%eax),%dx
		xor    %ecx,%ecx
		mov    %edx,(%esp)
		mov    data_1a63c8(%eax),%dx
		mov    data_1a6482(%eax),%cx
		test   %dx,%dx
		je     jump_c6442
		mov    data_1a63c6(%eax),%ebx
		xor    %edx,%edx
		sar    $0x10,%ebx
		mov    %dx,data_1a63c8(%eax)
		jmp    jump_c6467
	jump_c6442:
		mov    0x76(%esi),%edx
		mov    0x72(%esi),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		call   ac_alt_at_point
		sar    $0x8,%eax
		lea    0x14(%eax),%ebx
		jmp    jump_c6467
	jump_c645b:
		mov    0x2c(%edi),%eax
		mov    0x30(%edi),%ebx
		mov    0x34(%edi),%ecx
		mov    %eax,(%esp)
	jump_c6467:
		mov    0x72(%esi),%eax
		mov    (%esp),%ebp
		sar    $0x10,%eax
		cmp    %ebp,%eax
		jne    jump_c647e
		mov    0x76(%esi),%eax
		sar    $0x10,%eax
		cmp    %eax,%ecx
		je     jump_c6493
	jump_c647e:
		movw   $0x4e20,0x4a(%esi)
		mov    %bx,0x76(%esi)
		mov    (%esp),%eax
		mov    %cx,0x78(%esi)
		mov    %ax,0x74(%esi)
	jump_c6493:
		movl   $0x0,0x40(%esi)
		jmp    jump_c64b9
	jump_c649c:
		cmpl   $0x0,0x40(%edx)
		je     jump_c64b9
		andb   $0xdf,0xf(%esi)
		mov    0x40(%esi),%eax
		mov    0x40(%edi),%ebx
		cmp    %ebx,%eax
		je     jump_c64b9
		movw   $0x4e20,0x4a(%esi)
		mov    %ebx,0x40(%esi)
	jump_c64b9:
		mov    0xd(%edi),%bh
		test   $0x20,%bh
		jne    jump_c64c9
		mov    %bh,%cl
		or     $0x8,%cl
		mov    %cl,0xd(%edi)
	jump_c64c9:
		testb  $0x8,0xd(%edi)
		je     jump_c6540
		testb  $0x4,0x60(%esi)
		je     jump_c6540
		mov    0x56(%edi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_c6540
		cmpl   $0x0,0x40(%esi)
		je     jump_c64f3
		cmpl   $0x0,0x40(%edi)
		jne    jump_c64f9
	jump_c64f3:
		testb  $0x20,0xf(%esi)
		je     jump_c6540
	jump_c64f9:
		movw   $0xa,0x58(%edi)
		mov    0x48(%esi),%eax
		sar    $0x10,%eax
		cmp    $0x18,%eax
		jge    jump_c6540
		call   ac_LbRandomAnyShort
		test   $0x1f,%al
		jne    jump_c651e
		mov    $0x7,%ebx
		xor    %eax,%eax
		xor    %edx,%edx
		jmp    jump_c6533
	jump_c651e:
		mov    gameturn,%dl
		xor    %ebx,%ebx
		test   $0x1,%dl
		setne  %bl
		xor    %edx,%edx
		xor    %eax,%eax
		add    $0x5,%ebx
	jump_c6533:
		mov    0x3c(%esi),%ax
		call   ac_mech_unkn_func_05
		andb   $0xfb,0x60(%esi)
	jump_c6540:
		mov    0x60(%esi),%bl
		test   $0x1,%bl
		je     jump_c656c
		mov    %bl,%bh
		and    $0xfe,%bh
		mov    EXPORT_SYMBOL(mech_unkn_dw_1DC884),%ecx
		mov    %bh,0x60(%esi)
		mov    EXPORT_SYMBOL(mech_unkn_dw_1DC888),%ebx
		mov    %esi,%edx
		push   %ebx
		mov    %edi,%eax
		mov    EXPORT_SYMBOL(mech_unkn_dw_1DC880),%ebx
		call   ac_init_mech_rocket
	jump_c656c:
		mov    0x60(%esi),%cl
		test   $0x2,%cl
		je     jump_c6598
		mov    %cl,%ch
		and    $0xfd,%ch
		mov    EXPORT_SYMBOL(mech_unkn_dw_1DC88C),%ebx
		mov    %ch,0x60(%esi)
		mov    EXPORT_SYMBOL(mech_unkn_dw_1DC894),%ecx
		mov    %esi,%edx
		push   %ecx
		mov    %edi,%eax
		mov    EXPORT_SYMBOL(mech_unkn_dw_1DC890),%ecx
		call   ac_init_mech_rocket
	jump_c6598:
		mov    0x60(%esi),%al
		test   $0x8,%al
		je     jump_c65d7
		mov    %al,%ah
		and    $0xf7,%ah
		mov    $0x20,%edx
		mov    %ah,0x60(%esi)
		mov    %edi,%eax
		call   ac_init_laser_guided
		mov    $0x20,%edx
		mov    %edi,%eax
		call   ac_init_laser_guided
		mov    $0x20,%edx
		mov    %edi,%eax
		call   ac_init_laser_guided
		mov    $0x20,%edx
		mov    %edi,%eax
		call   ac_init_laser_guided
	jump_c65d7:
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
process_mushroom:	/* 0x0C65E0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		mov    %eax,%esi
		mov    %edx,%edi
		mov    0x1c(%eax),%edx
		mov    0x32(%eax),%eax
		sar    $0x8,%edx
		sar    $0x10,%eax
		mov    0x18(%esi),%ecx
		sub    %eax,%edx
		mov    0x20(%esi),%ebx
		mov    %edx,%eax
		cmp    $0x50,%edx
		jge    jump_c662e
		mov    0x2a(%esi),%edx
		sar    $0x10,%edx
		mov    %edx,0x8(%esp)
		mov    %eax,%edx
		mov    0x8(%esp),%ebp
		sar    %edx
		imul   %edx,%ebp
		sub    %ebp,%ecx
		mov    %ecx,(%esp)
		mov    0x2e(%esi),%ecx
		sar    $0x10,%ecx
		imul   %ecx,%edx
		sub    %edx,%ebx
		jmp    jump_c6650
	jump_c662e:
		sub    $0x50,%edx
		sar    $0x2,%edx
		cmp    $0x78,%eax
		mov    0x2a(%esi),%ebp
		sar    $0x10,%ebp
		imul   %edx,%ebp
		add    %ecx,%ebp
		mov    %ebp,(%esp)
		mov    0x2e(%esi),%ecx
		sar    $0x10,%ecx
		imul   %ecx,%edx
		add    %edx,%ebx
	jump_c6650:
		mov    %ebx,0x4(%esp)
		mov    $0x50,%edx
		sub    %eax,%edx
		mov    %edx,%eax
		shl    $0x3,%eax
		add    %ax,0x2e(%esi)
		mov    0x2c(%esi),%eax
		sar    $0x10,%eax
		cmp    $0xfffff830,%eax
		jge    jump_c6677
		movw   $0xf830,0x2e(%esi)
	jump_c6677:
		mov    0x2c(%esi),%ebx
		lea    0x4(%esp),%ecx
		sar    $0x10,%ebx
		mov    0x1c(%esi),%eax
		sar    %ebx
		mov    %esp,%edx
		add    %eax,%ebx
		mov    %esi,%eax
		call   move_smapwho
		mov    0x12(%esi),%bx
		mov    0x26(%esi),%eax
		add    $0x4,%ebx
		sar    $0x10,%eax
		mov    %bx,0x12(%esi)
		test   %eax,%eax
		jle    jump_c66c3
		decw   0x28(%esi)
		mov    0x26(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_c66c3
		movswl %di,%eax
		call   ac_remove_sthing
		mov    %esi,%eax
		call   ac_delete_snode
	jump_c66c3:
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
test_stuff:	/* 0x0C66CC */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x10,%esp
		mov    %eax,0x8(%esp)
		mov    %edx,(%esp)
		mov    %ebx,0x4(%esp)
		mov    gameturn,%ah
		xor    %edx,%edx
		xor    %ebp,%ebp
		mov    %dx,0xc(%esp)
		test   $0x1,%ah
		je     jump_c6706
		movw   $0x80,0xc(%esp)
		jmp    jump_c6706
	jump_c66fb:
		mov    0xd(%esp),%dl
		inc    %dl
		inc    %ebp
		mov    %dl,0xd(%esp)
	jump_c6706:
		xor    %eax,%eax
		mov    0xc(%esp),%ax
		cmp    $0x800,%eax
		jge    jump_c67e2
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%eax,4),%esi
		mov    EXPORT_SYMBOL(lbSinTable)(,%eax,4),%edi
		xor    %edx,%edx
		call   ac_LbRandomAnyShort
		mov    %ax,%dx
		mov    $0x37,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		sar    $0x8,%esi
		sub    $0x1b,%edx
		add    %edx,%esi
		xor    %edx,%edx
		call   ac_LbRandomAnyShort
		mov    %ax,%dx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		sar    $0x8,%edi
		sub    $0x1b,%edx
		add    %edx,%edi
		test   $0x1,%ebp
		je     jump_c6769
		xor    %edx,%edx
		jmp    jump_c677f
	jump_c6769:
		xor    %edx,%edx
		call   ac_LbRandomAnyShort
		mov    %ax,%dx
		mov    $0xa,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
	jump_c677f:
		mov    0x4(%esp),%ebx
		add    $0x28,%edx
		mov    $0x38b,%ecx
		movswl %dx,%eax
		add    %edi,%ebx
		push   %eax
		mov    0xc(%esp),%eax
		mov    0x4(%esp),%edx
		add    %esi,%eax
		call   create_scale_effect
		test   %eax,%eax
		je     jump_c66fb
		movb   $0x1f,0x8(%eax)
		movw   $0x80,0x12(%eax)
		movw   $0x4,0x26(%eax)
		movw   $0xfa0,0x2e(%eax)
		mov    %si,0x2c(%eax)
		mov    0x8(%esp),%edx
		mov    %di,0x30(%eax)
		mov    %dx,0x32(%eax)
		mov    (%esp),%edx
		mov    %dx,0x34(%eax)
		mov    0x4(%esp),%edx
		mov    %dx,0x36(%eax)
		jmp    jump_c66fb
	jump_c67e2:
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_nuclear_bomb)	/* 0x0C67EC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		mov    %esp,%ebp
		sub    $0x20,%esp
		mov    %eax,-0x1c(%ebp)
		mov    %dx,-0x8(%ebp)
		mov    gameturn,%eax
		mov    %eax,-0x18(%ebp)
		mov    -0x1c(%ebp),%eax
		mov    0x18(%eax),%eax
		sar    $0x8,%eax
		mov    %eax,-0x10(%ebp)
		mov    -0x1c(%ebp),%eax
		mov    0x1c(%eax),%eax
		sar    $0x8,%eax
		mov    %eax,-0x20(%ebp)
		mov    -0x1c(%ebp),%eax
		mov    0x20(%eax),%eax
		sar    $0x8,%eax
		mov    %eax,-0x14(%ebp)
		mov    -0x1c(%ebp),%eax
		mov    0x26(%eax),%eax
		sar    $0x10,%eax
		mov    %eax,EXPORT_SYMBOL(dword_19F4FC)
		cmp    $0xc,%eax
		jge    jump_c6858
		mov    -0x1c(%ebp),%edx
		xor    %eax,%eax
		mov    0x14(%edx),%ax
		mov    %eax,%edx
		sar    $0x3,%edx
		add    $0x4,%edx
		add    %edx,%eax
		mov    -0x1c(%ebp),%edx
		mov    %ax,0x14(%edx)
		jmp    jump_c6882
	jump_c6858:
		cmp    $0x19,%eax
		jge    jump_c6879
		mov    -0x1c(%ebp),%edx
		xor    %eax,%eax
		mov    0x14(%edx),%ax
		mov    %eax,%edx
		sar    $0x2,%edx
		add    $0x4,%edx
		sub    %edx,%eax
		mov    -0x1c(%ebp),%edx
		mov    %ax,0x14(%edx)
		jmp    jump_c6882
	jump_c6879:
		mov    -0x1c(%ebp),%eax
		movw   $0x0,0x14(%eax)
	jump_c6882:
		mov    -0x1c(%ebp),%eax
		mov    0x26(%eax),%eax
		sar    $0x10,%eax
		cmp    $0x14,%eax
		jne    jump_c6a63
		mov    -0x16(%ebp),%ebx
		mov    -0x22(%ebp),%edx
		mov    -0x12(%ebp),%eax
		sar    $0x10,%ebx
		sar    $0x10,%edx
		sar    $0x10,%eax
		call   do_explode
		mov    -0x14(%ebp),%edx
		mov    -0x10(%ebp),%eax
		mov    $0x2,%ebx
		sar    $0x8,%edx
		sar    $0x8,%eax
		call   ac_quick_crater
		mov    -0x1c(%ebp),%eax
		xor    %ebx,%ebx
		mov    0x38(%eax),%bx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		shl    $0x2,%eax
		add    %ebx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		push   %eax
		mov    -0x1c(%ebp),%eax
		testb  $0x8,0xe(%eax)
		je     jump_c68f4
		mov    $0x2710,%eax
		jmp    jump_c68f9
	jump_c68f4:
		mov    $0x1388,%eax
	jump_c68f9:
		mov    $0x400,%ecx
		mov    -0x14(%ebp),%ebx
		push   %eax
		mov    -0x20(%ebp),%edx
		mov    -0x10(%ebp),%eax
		call   do_shockwave
		mov    -0x1c(%ebp),%eax
		mov    0x14(%eax),%eax
		mov    $0x1,%edx
		sar    $0x10,%eax
		call   ac_stop_sample_using_heap
		mov    -0x1c(%ebp),%eax
		xor    %ebx,%ebx
		mov    0x38(%eax),%bx
		push   $0x3
		lea    0x0(,%ebx,4),%edx
		mov    $0x40,%ecx
		add    %ebx,%edx
		push   $0x0
		shl    $0x2,%edx
		push   $0x64
		add    %ebx,%edx
		mov    things,%eax
		shl    $0x3,%edx
		mov    $0x7f,%ebx
		add    %edx,%eax
		mov    $0x16,%edx
		call   ac_play_dist_sample
		mov    -0x14(%ebp),%ebx
		mov    -0x20(%ebp),%edx
		mov    -0x10(%ebp),%eax
		mov    $0x2d,%ecx
		shl    $0x8,%ebx
		shl    $0x8,%edx
		shl    $0x8,%eax
		call   ac_bang_new4
		xor    %edx,%edx
		mov    %edx,-0x4(%ebp)
		jmp    jump_c698e
	jump_c697e:
		mov    -0x4(%ebp),%esi
		mov    -0x18(%ebp),%edx
		add    $0x14,%esi
		inc    %edx
		mov    %esi,-0x4(%ebp)
		mov    %edx,-0x18(%ebp)
	jump_c698e:
		xor    %edi,%edi
		mov    -0x4(%ebp),%di
		cmp    $0x800,%edi
		jge    jump_c6a7c
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%edi,4),%esi
		sar    $0x8,%esi
		mov    EXPORT_SYMBOL(lbSinTable)(,%edi,4),%edi
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		sar    $0x8,%edi
		and    $0x1f,%al
		and    $0xffff,%eax
		sub    $0xf,%eax
		add    %eax,%esi
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x1f,%al
		push   $0x14
		mov    -0x14(%ebp),%ebx
		and    $0xffff,%eax
		mov    $0x384,%ecx
		sub    $0xf,%eax
		mov    -0x20(%ebp),%edx
		add    %eax,%edi
		mov    -0x10(%ebp),%eax
		add    %edi,%ebx
		add    %esi,%eax
		call   create_scale_effect
		test   %eax,%eax
		je     jump_c697e
		mov    -0x18(%ebp),%ebx
		xor    %bh,%bh
		and    $0x1,%bl
		mov    %ebx,%edx
		imul   %esi,%edx
		imul   %edi,%ebx
		movb   $0x2d,0x8(%eax)
		movw   $0x100,0x12(%eax)
		movw   $0x0,0x26(%eax)
		movw   $0x0,0x2e(%eax)
		mov    %edx,-0xc(%ebp)
		mov    %esi,%edx
		mov    -0xc(%ebp),%ecx
		shl    $0x4,%edx
		movw   $0x0,0x34(%eax)
		sub    %ecx,%edx
		mov    %dx,0x2c(%eax)
		mov    %edi,%edx
		neg    %edi
		shl    $0x4,%edx
		sar    $0x4,%edi
		sub    %ebx,%edx
		mov    %esi,%ebx
		mov    %dx,0x30(%eax)
		neg    %ebx
		mov    %di,0x36(%eax)
		sar    $0x4,%ebx
		mov    -0x1c(%ebp),%edx
		mov    %bx,0x32(%eax)
		mov    0x38(%edx),%dx
		mov    %dx,0x38(%eax)
		jmp    jump_c697e
	jump_c6a63:
		jl     jump_c6a7c
		mov    -0x1c(%ebp),%eax
		testb  $0x8,0xe(%eax)
		je     jump_c6a7c
		mov    -0x14(%ebp),%ebx
		mov    -0x20(%ebp),%edx
		mov    -0x10(%ebp),%eax
		call   test_stuff
	jump_c6a7c:
		mov    -0x1c(%ebp),%eax
		mov    0x28(%eax),%ax
		mov    -0x1c(%ebp),%ebx
		movswl %ax,%edx
		inc    %eax
		mov    %ax,0x28(%ebx)
		cmp    $0x1c,%edx
		jle    jump_c6aad
		mov    -0xa(%ebp),%eax
		sar    $0x10,%eax
		call   ac_remove_sthing
		mov    %ebx,%eax
		xor    %ebx,%ebx
		call   ac_delete_snode
		mov    %ebx,EXPORT_SYMBOL(dword_19F4F8)
	jump_c6aad:
		mov    %ebp,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_canister)	/* 0x0C6AB8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x10,%esp
		mov    %eax,%ebp
		mov    0x18(%eax),%eax
		sar    $0x8,%eax
		mov    %eax,0x4(%esp)
		mov    0x1c(%ebp),%eax
		sar    $0x8,%eax
		mov    %eax,0x8(%esp)
		mov    0x20(%ebp),%eax
		sar    $0x8,%eax
		xor    %edx,%edx
		mov    %eax,0xc(%esp)
		mov    0x26(%ebp),%eax
		mov    %edx,(%esp)
		sar    $0x10,%eax
		movw   $0x0,0x14(%ebp)
		mov    %eax,EXPORT_SYMBOL(dword_19F4FC)
		jmp    jump_c6bc4
	jump_c6afc:
		orb    $0x10,0xc(%eax)
		jmp    jump_c6bac
	jump_c6b05:
		mov    0xc(%eax),%bl
		or     $0x20,%bl
		mov    nstart_ani,%esi
		mov    %bl,0xc(%eax)
		mov    0x718(%esi),%si
		and    $0xffff,%esi
		mov    0x6(%edx,%esi,8),%si
		and    $0xffff,%esi
		mov    0x6(%edx,%esi,8),%dx
		mov    %dx,0x24(%eax)
		jmp    jump_c6bac
	jump_c6b37:
		xor    %ebx,%ebx
		mov    frame,%edx
		mov    0x24(%eax),%bx
		mov    0x6(%edx,%ebx,8),%bx
		and    $0xffff,%ebx
		mov    0x6(%edx,%ebx,8),%bx
		movb   $0x1e,0x8(%eax)
		movw   $0x20,0x12(%eax)
		movw   $0xc,0x26(%eax)
		movw   $0x8,0x2e(%eax)
		movw   $0x0,0x34(%eax)
		mov    %bx,0x24(%eax)
		mov    %di,0x2c(%eax)
		mov    %si,0x30(%eax)
		neg    %edi
		neg    %esi
		sar    $0x5,%edi
		sar    $0x5,%esi
		mov    %di,0x32(%eax)
		mov    %si,0x36(%eax)
		mov    0x38(%ebp),%si
		mov    %si,0x38(%eax)
		mov    0x8(%ebp),%bl
		cmp    $0x4,%bl
		jb     jump_c6bac
		jbe    jump_c6afc
		cmp    $0x5,%bl
		je     jump_c6b05
	jump_c6bac:
		mov    (%esp),%ebx
		add    $0x200,%ebx
		mov    %ebx,(%esp)
		cmp    $0x800,%ebx
		je     jump_c6c6d
	jump_c6bc4:
		mov    0x26(%ebp),%eax
		sar    $0x10,%eax
		mov    (%esp),%edi
		shl    $0x6,%eax
		add    %edi,%eax
		and    $0x7ff,%eax
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%eax,4),%edi
		mov    EXPORT_SYMBOL(lbSinTable)(,%eax,4),%esi
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%eax,4),%edx
		sar    $0x4,%edi
		sar    $0x4,%esi
		mov    EXPORT_SYMBOL(lbSinTable)(,%eax,4),%eax
		sar    $0x6,%edx
		sar    $0x6,%eax
		sub    %edx,%edi
		sub    %eax,%esi
		xor    %edx,%edx
		call   ac_LbRandomAnyShort
		mov    %ax,%dx
		mov    $0x320,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		sub    $0x190,%edx
		add    %edx,%edi
		xor    %edx,%edx
		call   ac_LbRandomAnyShort
		mov    %ax,%dx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		mov    $0x398,%ecx
		and    $0xf,%al
		mov    0xc(%esp),%ebx
		add    $0x14,%eax
		sub    $0x190,%edx
		cwtl
		add    %edx,%esi
		push   %eax
		mov    0xc(%esp),%edx
		mov    0x8(%esp),%eax
		call   create_scale_effect
		test   %eax,%eax
		jne    jump_c6b37
		jmp    jump_c6bac
	jump_c6c6d:
		mov    0x28(%ebp),%dx
		inc    %edx
		mov    %dx,0x28(%ebp)
		mov    0x26(%ebp),%eax
		sar    $0x10,%eax
		cmp    $0xa,%eax
		jge    jump_c6cab
		xor    %eax,%eax
		mov    0x8(%ebp),%al
		cmp    $0x4,%eax
		jne    jump_c6c97
		imul   $0xa,%edx,%eax
		xor    %ebx,%ebx
		mov    $0x20,%edx
		jmp    jump_c6ca1
	jump_c6c97:
		imul   $0xa,%edx,%eax
		xor    %ebx,%ebx
		mov    $0x1f,%edx
	jump_c6ca1:
		mov    %ax,%bx
		mov    %ebp,%eax
		call   set_dist_volume
	jump_c6cab:
		mov    0x26(%ebp),%eax
		sar    $0x10,%eax
		cmp    $0xbe,%eax
		jle    jump_c6cf4
		xor    %eax,%eax
		mov    0x8(%ebp),%al
		cmp    $0x4,%eax
		jne    jump_c6cd7
		mov    $0x12d,%eax
		sub    0x28(%ebp),%ax
		imul   $0xa,%eax,%eax
		xor    %ebx,%ebx
		mov    $0x20,%edx
		jmp    jump_c6cea
	jump_c6cd7:
		mov    $0x12d,%eax
		sub    0x28(%ebp),%ax
		imul   $0xa,%eax,%eax
		xor    %ebx,%ebx
		mov    $0x1f,%edx
	jump_c6cea:
		mov    %ax,%bx
		mov    %ebp,%eax
		call   set_dist_volume
	jump_c6cf4:
		mov    0x26(%ebp),%eax
		sar    $0x10,%eax
		cmp    $0xc8,%eax
		jle    jump_c6d3f
		xor    %eax,%eax
		mov    0x8(%ebp),%al
		cmp    $0x4,%eax
		jne    jump_c6d15
		mov    0x14(%ebp),%eax
		mov    $0x20,%edx
		jmp    jump_c6d1d
	jump_c6d15:
		mov    0x14(%ebp),%eax
		mov    $0x1f,%edx
	jump_c6d1d:
		sar    $0x10,%eax
		call   ac_stop_sample_using_heap
		mov    0x14(%ebp),%eax
		sar    $0x10,%eax
		call   ac_remove_sthing
		mov    %ebp,%eax
		xor    %esi,%esi
		call   ac_delete_snode
		mov    %esi,EXPORT_SYMBOL(dword_19F4F8)
	jump_c6d3f:
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_smoke_generator)	/* 0x0C6D4C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		mov    %eax,%esi
		mov    0x18(%eax),%ebp
		mov    0x1c(%eax),%edi
		mov    0x20(%eax),%ebx
		sar    $0x8,%ebp
		mov    0x28(%eax),%ax
		sar    $0x8,%edi
		movswl %ax,%edx
		dec    %eax
		sar    $0x8,%ebx
		mov    %ax,0x28(%esi)
		test   %edx,%edx
		jge    jump_c6e55
		mov    0x36(%esi),%cx
		xor    %edx,%edx
		call   ac_LbRandomAnyShort
		mov    %ax,%dx
		movswl %cx,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		add    %ecx,%edx
		mov    %dx,0x28(%esi)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0xf,%al
		add    $0x50,%eax
		cwtl
		mov    $0x38b,%ecx
		push   %eax
		mov    %edi,%edx
		mov    %ebp,%eax
		call   create_scale_effect
		test   %eax,%eax
		je     jump_c6e55
		movb   $0x2c,0x8(%eax)
		movw   $0x80,0x12(%eax)
		movw   $0x2,0x26(%eax)
		mov    0x2c(%esi),%dx
		mov    %dx,0x2c(%eax)
		mov    0x2e(%esi),%dx
		mov    gameturn,%edi
		mov    %dx,0x2e(%eax)
		shl    $0x7,%edi
		mov    0x30(%esi),%dx
		and    $0x7ff,%edi
		mov    %dx,0x30(%eax)
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%edi,4),%ebx
		mov    0x2a(%eax),%edx
		sar    $0xa,%ebx
		sar    $0x10,%edx
		sub    $0x20,%ebx
		add    %ebx,%edx
		mov    %dx,0x2c(%eax)
		mov    EXPORT_SYMBOL(lbSinTable)(,%edi,4),%ebx
		mov    0x2c(%eax),%edx
		sar    $0xa,%ebx
		sar    $0x10,%edx
		sub    $0x20,%ebx
		add    %ebx,%edx
		mov    %dx,0x2e(%eax)
		mov    0x32(%esi),%dx
		mov    %dx,0x32(%eax)
		mov    0x34(%esi),%dx
		mov    %dx,0x34(%eax)
		mov    0x36(%esi),%dx
		mov    %dx,0x36(%eax)
		mov    0x2a(%esi),%dx
		mov    %dx,0x2a(%eax)
		mov    0x38(%esi),%dx
		movw   $0x0,0xa(%eax)
		mov    %dx,0x38(%eax)
	jump_c6e55:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
process_special_drift_smoke:	/* 0x0C6E5C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		mov    %eax,%esi
		mov    %edx,%edi
		incw   0xa(%eax)
		xor    %eax,%eax
		mov    0x24(%esi),%ax
		lea    0x0(,%eax,8),%edx
		mov    frame,%eax
		mov    0x6(%edx,%eax,1),%ax
		mov    %ax,0x24(%esi)
		mov    0x2a(%esi),%eax
		sar    $0x10,%eax
		mov    0x18(%esi),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    %edx,(%esp)
		mov    0x2c(%esi),%eax
		sar    $0x10,%eax
		mov    0x1c(%esi),%ebx
		shl    $0x2,%eax
		add    %eax,%ebx
		mov    0x2e(%esi),%eax
		sar    $0x10,%eax
		mov    0x20(%esi),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    %edx,0x4(%esp)
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		mov    %eax,%edx
		shl    $0x5,%edx
		and    $0x7ff,%edx
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%edx,4),%ecx
		imul   %eax,%ecx
		imul   EXPORT_SYMBOL(lbSinTable)(,%edx,4),%eax
		sar    $0xb,%ecx
		mov    %ecx,0x8(%esp)
		sar    $0xb,%eax
		mov    0x8(%esp),%ecx
		mov    %eax,%edx
		movswl %cx,%eax
		mov    (%esp),%ecx
		add    %eax,%ecx
		mov    0x4(%esp),%ebp
		mov    %ecx,(%esp)
		movswl %dx,%eax
		lea    0x4(%esp),%ecx
		mov    %esp,%edx
		add    %eax,%ebp
		mov    %esi,%eax
		mov    %ebp,0x4(%esp)
		call   move_smapwho
		mov    0x26(%esi),%ax
		mov    0x12(%esi),%bx
		add    %eax,%ebx
		mov    0x28(%esi),%eax
		sar    $0x10,%eax
		mov    %bx,0x12(%esi)
		test   %eax,%eax
		jle    jump_c6f61
		decw   0x2a(%esi)
		mov    0x32(%esi),%ax
		mov    0x2a(%esi),%edx
		cwtl
		sar    $0x10,%edx
		imul   %eax,%edx
		sar    $0x8,%edx
		mov    %dx,0x2c(%esi)
		mov    0x2c(%esi),%edx
		sar    $0x10,%edx
		imul   %eax,%edx
		sar    $0x8,%edx
		mov    %dx,0x2e(%esi)
		mov    0x2e(%esi),%edx
		sar    $0x10,%edx
		imul   %edx,%eax
		sar    $0x8,%eax
		mov    %ax,0x30(%esi)
	jump_c6f61:
		mov    0x34(%esi),%ax
		mov    0x2e(%esi),%dx
		add    %eax,%edx
		mov    0x26(%esi),%eax
		sar    $0x10,%eax
		mov    %dx,0x2e(%esi)
		test   %eax,%eax
		jle    jump_c6f96
		decw   0x28(%esi)
		mov    0x26(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_c6f96
		movswl %di,%eax
		call   ac_remove_sthing
		mov    %esi,%eax
		call   ac_delete_snode
	jump_c6f96:
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
ASM_angle_between_points:	/* 0x0C6FA0 */
/*----------------------------------------------------------------*/
		sub    %edx,%ecx
		sub    %eax,%ebx
		mov    %ecx,%edx
		mov    %ebx,%eax
		neg    %edx
		jmp    ac_arctan


/*----------------------------------------------------------------*/
napalm_person:	/* 0x0C6FB0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		mov    %eax,%esi
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0x24,%eax
		je     jump_c718b
		testb  $0x2,0xc(%esi)
		jne    jump_c718b
		xor    %eax,%eax
		mov    0x9(%esi),%al
		cmp    $0x5,%eax
		jne    jump_c6ffc
		mov    EXPORT_SYMBOL(weapon_defs)+202,%ax # sizeof(struct WeaponDef) * 8 + 2
		sub    %ax,0x36(%esi)
		mov    0x34(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jg     jump_c718b
		mov    %esi,%eax
		call   ac_set_static_on_fire
		jmp    jump_c718b
	jump_c6ffc:
		xor    %eax,%eax
		mov    0x8(%esi),%al
		cmp    $0x7,%eax
		je     jump_c718b
		mov    0x70(%esi),%ax
		shl    $0x7,%eax
		shr    $0xd,%ax
		and    $0xffff,%eax
		cmp    $0x3,%eax
		jg     jump_c718b
		xor    %eax,%eax
		mov    0x70(%esi),%cx
		mov    EXPORT_SYMBOL(weapon_defs)+202,%ax # sizeof(struct WeaponDef) * 8 + 2
		shr    $0xc,%cx
		and    $0xffff,%ecx
		cmp    $0x2,%ecx
		jne    jump_c7041
		shr    $0x2,%eax
	jump_c7041:
		imul   %edx,%eax
		sub    %ax,0x3a(%esi)
		mov    0x38(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jg     jump_c7163
		testb  $0x10,0x44(%esi)
		je     jump_c706e
		mov    $0x12,%edx
		mov    %esi,%eax
		call   ac_set_person_dead
		mov    $0x1,%al
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_c706e:
		testb  $0x8,0xe(%esi)
		je     jump_c707b
		mov    %esi,%eax
		call   stop_being_persuaded
	jump_c707b:
		push   $0x2
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0xffffffff
		mov    $0x1d,%edx
		movw   $0x24,0xa(%esi)
		push   $0x64
		mov    %esi,%eax
		movb   $0x0,0x74(%esi)
		call   ac_play_dist_sample
		orb    $0x40,0xf(%esi)
		call   ac_LbRandomAnyShort
		mov    0xc(%esi),%edx
		and    $0xfff6ff7e,%edx
		add    $0x32,%al
		mov    %edx,0xc(%esi)
		xor    %edx,%edx
		and    $0x1f,%al
		mov    0x8(%esi),%dl
		mov    %al,0x7d(%esi)
		lea    0x0(,%edx,4),%eax
		movw   $0xa,0x68(%esi)
		sub    %edx,%eax
		movw   $0xa,0x6a(%esi)
		shl    $0x2,%eax
		movw   $0xa,0x28(%esi)
		sub    %edx,%eax
		movw   $0xa,0x2a(%esi)
		lea    0x0(,%eax,4),%edx
		movb   $0x11,0x6c(%esi)
		xor    %eax,%eax
		mov    0x44(%esi),%cl
		mov    0x6c(%esi),%al
		movb   $0x11,0x6d(%esi)
		add    %eax,%eax
		and    $0xe7,%cl
		add    %edx,%eax
		mov    %cl,0x44(%esi)
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%eax),%dx
		xor    %eax,%eax
		mov    0x57(%esi),%al
		add    %edx,%eax
		lea    0x0(,%eax,2),%edx
		mov    nstart_ani,%eax
		mov    (%edx,%eax,1),%ax
		xor    %edx,%edx
		mov    0x8(%esi),%dl
		mov    %ax,0x24(%esi)
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		sub    %edx,%eax
		xor    %edx,%edx
		mov    0x6c(%esi),%dl
		add    %edx,%edx
		mov    EXPORT_SYMBOL(people_frames)(%edx,%eax,4),%ax
		dec    %eax
		movw   $0x0,0x8e(%esi)
		mov    %ax,0x26(%esi)
		mov    $0x1,%al
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_c7163:
		testb  $0x10,0x44(%esi)
		jne    jump_c718b
		xor    %edx,%edx
		mov    0x98(%esi),%dl
		push   $0x7
		shl    $0x5,%edx
		mov    %esi,%eax
		mov    EXPORT_SYMBOL(lbSinTable)+2048(%edx),%edx
		xor    %ebx,%ebx
		movswl %dx,%ecx
		movswl %dx,%edx
		call   init_recoil
	jump_c718b:
		xor    %al,%al
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret

vtable_c7194:
		.long   func_c753e
		.long   func_c753e
		.long   func_c753e
		.long   func_c7560
		.long   func_c7560
		.long   func_c7582
		.long   func_c7582
		.long   func_c7582
		.long   func_c753e
		.long   func_c7560
		.long   func_c7560
		.long   func_c753e
		.long   func_c7560
		.long   func_c7560


/*----------------------------------------------------------------*/
process_drift_smoke:	/* 0x0C71CC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		sub    $0xc,%esp
		mov    %eax,%esi
		mov    %dx,0x8(%esp)
		mov    0x26(%eax),%eax
		sar    $0x10,%eax
		cmp    $0xc,%eax
		jge    jump_c7203
		testb  $0x1,gameturn
		je     jump_c7203
		xor    %eax,%eax
		mov    frame,%edx
		mov    0x24(%esi),%ax
		mov    0x6(%edx,%eax,8),%ax
		mov    %ax,0x24(%esi)
	jump_c7203:
		testb  $0x8,0xc(%esi)
		jne    jump_c730a
		mov    0x2a(%esi),%eax
		sar    $0x10,%eax
		mov    0x18(%esi),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    %edx,(%esp)
		mov    0x2c(%esi),%eax
		sar    $0x10,%eax
		mov    0x1c(%esi),%edi
		shl    $0x2,%eax
		add    %eax,%edi
		mov    0x2e(%esi),%eax
		sar    $0x10,%eax
		mov    0x20(%esi),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    %edx,0x4(%esp)
		xor    %eax,%eax
		mov    0x8(%esi),%al
		cmp    $0x1e,%eax
		je     jump_c726f
		mov    %edx,%eax
		sar    $0x8,%eax
		movswl %ax,%edx
		mov    (%esp),%eax
		sar    $0x8,%eax
		cwtl
		call   ac_alt_at_point
		cmp    %eax,%edi
		jge    jump_c726f
		mov    %eax,%edx
		sub    %edi,%edx
		cmp    $0x800,%edx
		jge    jump_c726f
		lea    0x40(%eax),%edi
	jump_c726f:
		mov    (%esp),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jl     jump_c7292
		cmp    $0x80,%eax
		jge    jump_c7292
		mov    0x4(%esp),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jl     jump_c7292
		cmp    $0x80,%eax
		jl     jump_c729a
	jump_c7292:
		movw   $0xffff,0x28(%esi)
		jmp    jump_c730a
	jump_c729a:
		mov    0x4(%esp),%ebx
		mov    (%esp),%eax
		mov    %edi,%edx
		sar    $0x8,%ebx
		sar    $0x8,%edx
		sar    $0x8,%eax
		call   ac_check_col_collision
		test   %eax,%eax
		je     jump_c72d1
		mov    0xc(%esi),%dh
		mov    0x26(%esi),%eax
		or     $0x8,%dh
		sar    $0x10,%eax
		mov    %dh,0xc(%esi)
		cmp    $0x5,%eax
		jle    jump_c72e0
		movw   $0x5,0x28(%esi)
		jmp    jump_c72e0
	jump_c72d1:
		lea    0x4(%esp),%ecx
		mov    %esp,%edx
		mov    %edi,%ebx
		mov    %esi,%eax
		call   move_smapwho
	jump_c72e0:
		mov    0x32(%esi),%ax
		mov    0x2c(%esi),%dx
		mov    0x2e(%esi),%bx
		mov    0x30(%esi),%cx
		add    %eax,%edx
		mov    0x34(%esi),%ax
		mov    %dx,0x2c(%esi)
		add    %eax,%ebx
		mov    0x36(%esi),%ax
		mov    %bx,0x2e(%esi)
		add    %eax,%ecx
		mov    %cx,0x30(%esi)
	jump_c730a:
		mov    0x26(%esi),%ax
		mov    0x12(%esi),%di
		add    %eax,%edi
		decw   0x28(%esi)
		mov    0x26(%esi),%eax
		sar    $0x10,%eax
		mov    %di,0x12(%esi)
		test   %eax,%eax
		jg     jump_c733e
		mov    0x6(%esp),%eax
		sar    $0x10,%eax
		call   ac_remove_sthing
		mov    %esi,%eax
		call   ac_delete_snode
		jmp    jump_c7637
	jump_c733e:
		testb  $0x30,0xc(%esi)
		je     jump_c7414
		testb  $0x3,gameturn
		jne    jump_c7414
		xor    %eax,%eax
		mov    0x12(%esi),%ax
		cmp    $0x3c,%eax
		jle    jump_c7414
		mov    things,%eax
		xor    %edi,%edi
		test   %eax,%eax
		je     jump_c7414
	jump_c7373:
		movswl %di,%eax
		push   %eax
		mov    0x20(%esi),%ebx
		push   $0x0
		mov    0x1c(%esi),%edx
		xor    %ecx,%ecx
		push   $0x0
		mov    0x12(%esi),%cx
		mov    0x18(%esi),%eax
		call   ac_check_for_radius_hit_person
		mov    %eax,%edx
		test   %eax,%eax
		je     jump_c740b
		xor    %ecx,%ecx
		mov    0x9(%eax),%cl
		cmp    $0x2,%ecx
		je     jump_c740b
		cmp    $0x5,%ecx
		je     jump_c740b
		mov    0x16(%eax),%bx
		mov    0x38(%esi),%cx
		cmp    %cx,%bx
		je     jump_c740b
		mov    0x70(%eax),%bx
		shl    $0x7,%ebx
		shr    $0xd,%bx
		and    $0xffff,%ebx
		cmp    $0x3,%ebx
		jge    jump_c740b
		xor    %ebx,%ebx
		mov    %cx,%bx
		imul   $0xa8,%ebx,%ebx
		mov    things,%ecx
		add    %ebx,%ecx
		mov    0x50(%eax),%bl
		cmp    0x50(%ecx),%bl
		je     jump_c740b
		testb  $0x1,0x44(%eax)
		je     jump_c73f5
		call   ac_finalise_razor_wire
	jump_c73f5:
		testb  $0x10,0xc(%esi)
		je     jump_c7404
		mov    %edx,%eax
		call   person_go_insane
		jmp    jump_c740b
	jump_c7404:
		mov    %edx,%eax
		call   ac_person_go_sleep
	jump_c740b:
		inc    %edi
		test   %edx,%edx
		jne    jump_c7373
	jump_c7414:
		xor    %eax,%eax
		mov    0x8(%esi),%al
		cmp    $0x2d,%eax
		jne    jump_c7637
		push   $0x0
		mov    0x20(%esi),%ebx
		push   $0x0
		mov    0x1c(%esi),%edx
		xor    %ecx,%ecx
		push   $0x0
		mov    0x18(%esi),%eax
		mov    0x12(%esi),%cx
		call   ac_check_for_radius_hit_person
		mov    %eax,%ebx
		test   %eax,%eax
		je     jump_c7637
		xor    %edx,%edx
		mov    0x9(%eax),%dl
		cmp    $0x2,%edx
		je     jump_c7637
		cmp    $0x5,%edx
		je     jump_c747b
		xor    %edx,%edx
		mov    0xa(%eax),%dx
		cmp    $0x24,%edx
		je     jump_c7637
		cmp    $0xc,%edx
		je     jump_c7637
		testb  $0x2,0xc(%eax)
		jne    jump_c7637
	jump_c747b:
		xor    %eax,%eax
		mov    0x9(%ebx),%al
		cmp    $0x5,%eax
		je     jump_c74e0
		testb  $0x10,0x44(%ebx)
		jne    jump_c74e0
		mov    0x20(%esi),%edi
		mov    0x18(%esi),%eax
		mov    0x20(%ebx),%edx
		mov    0x18(%ebx),%ecx
		sar    $0x8,%edi
		sar    $0x8,%edx
		sar    $0x8,%eax
		sub    %edx,%edi
		sar    $0x8,%ecx
		mov    %edi,%edx
		sub    %ecx,%eax
		neg    %edx
		call   ac_arctan
		cwtl
		add    $0x80,%eax
		sar    $0x8,%eax
		mov    %al,0x98(%ebx)
		add    $0x8,%al
		and    $0x7,%al
		mov    %al,0x98(%ebx)
		xor    %ah,%ah
		add    $0x4,%eax
		xor    %ah,%ah
		xor    %edx,%edx
		and    $0x7,%al
		mov    %ax,%dx
		mov    %ebx,%eax
		call   change_player_angle
	jump_c74e0:
		mov    $0x2,%edx
		mov    %ebx,%eax
		call   napalm_person
		test   %al,%al
		je     jump_c7637
		xor    %edx,%edx
		mov    0x38(%esi),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%esi
		shl    $0x3,%eax
		mov    in_network_game,%cl
		add    %esi,%eax
		test   %cl,%cl
		jne    jump_c75be
		mov    0x51(%eax),%al
		mov    ingame__TrainMode,%edx
		and    $0xff,%eax
		sar    $0x10,%edx
		cmp    %edx,%eax
		je     jump_c75a4
		add    $0xc,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_c753e:
/*----------------------------------------------------------------*/
		mov    EXPORT_SYMBOL(open_brief)-2,%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		incw   data_199840(,%eax,8)
		add    $0xc,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_c7560:
/*----------------------------------------------------------------*/
		mov    EXPORT_SYMBOL(open_brief)-2,%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		incw   data_199838(,%eax,8)
		add    $0xc,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_c7582:
/*----------------------------------------------------------------*/
		mov    EXPORT_SYMBOL(open_brief)-2,%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		incw   data_19983c(,%eax,8)
		add    $0xc,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_c75a4:
		mov    0x8(%ebx),%al
		dec    %al
		cmp    $0xd,%al
		ja     jump_c7637
		and    $0xff,%eax
		jmp    *%cs:vtable_c7194(,%eax,4)
	jump_c75be:
		testb  $0x20,0xd(%ebx)
		je     jump_c7637
		mov    0xd(%eax),%cl
		xor    %edx,%edx
		test   $0x20,%cl
		jne    jump_c75f7
		testb  $0x8,0xe(%eax)
		je     jump_c75f9
		xor    %ecx,%ecx
		mov    0x3c(%eax),%cx
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		shl    $0x2,%eax
		add    %ecx,%eax
		shl    $0x3,%eax
		add    %esi,%eax
		testb  $0x20,0xd(%eax)
		je     jump_c75f9
	jump_c75f7:
		mov    %eax,%edx
	jump_c75f9:
		test   %edx,%edx
		je     jump_c7637
		testb  $0x20,0xd(%edx)
		je     jump_c7637
		mov    0x54(%edx),%dx
		and    $0xffff,%edx
		sar    $0x2,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		xor    %edx,%edx
		shl    $0x3,%eax
		mov    0x54(%ebx),%dx
		add    $mission_status,%eax
		sar    $0x2,%edx
		mov    0x10(%eax,%edx,2),%bx
		add    $0x10,%eax
		inc    %ebx
		mov    %bx,(%eax,%edx,2)
	jump_c7637:
		add    $0xc,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret

vtable_c7640:
		.long   func_c790c
		.long   func_c790c
		.long   func_c790c
		.long   func_c792b
		.long   func_c792b
		.long   func_c794a
		.long   func_c794a
		.long   func_c794a
		.long   func_c790c
		.long   func_c792b
		.long   func_c792b
		.long   func_c790c
		.long   func_c792b
		.long   func_c792b


/*----------------------------------------------------------------*/
process_napalm_flame:	/* 0x0C7678 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		sub    $0xc,%esp
		mov    %eax,%esi
		mov    %dx,0x8(%esp)
		mov    0x14(%eax),%eax
		mov    gameturn,%edx
		sar    $0x10,%eax
		add    %edx,%eax
		test   $0x1,%al
		je     jump_c76ad
		xor    %eax,%eax
		mov    frame,%edx
		mov    0x24(%esi),%ax
		mov    0x6(%edx,%eax,8),%ax
		mov    %ax,0x24(%esi)
	jump_c76ad:
		testb  $0x8,0xc(%esi)
		jne    jump_c776d
		mov    0x2a(%esi),%eax
		sar    $0x10,%eax
		mov    0x18(%esi),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    %edx,(%esp)
		mov    0x2c(%esi),%edi
		mov    0x1c(%esi),%ebx
		mov    0x2e(%esi),%eax
		mov    0x20(%esi),%edx
		sar    $0x10,%eax
		sar    $0x10,%edi
		shl    $0x2,%eax
		shl    $0x2,%edi
		add    %eax,%edx
		mov    (%esp),%eax
		add    %ebx,%edi
		sar    $0x10,%eax
		mov    %edx,0x4(%esp)
		test   %eax,%eax
		jl     jump_c7709
		cmp    $0x80,%eax
		jge    jump_c7709
		mov    %edx,%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jl     jump_c7709
		cmp    $0x80,%eax
		jl     jump_c7711
	jump_c7709:
		movw   $0xffff,0x28(%esi)
		jmp    jump_c776d
	jump_c7711:
		mov    (%esp),%eax
		mov    %edx,%ebx
		mov    %edi,%edx
		sar    $0x8,%ebx
		sar    $0x8,%edx
		sar    $0x8,%eax
		add    $0x8,%edx
		call   ac_check_col_collision
		test   %ax,%ax
		je     jump_c7734
		orb    $0x8,0xc(%esi)
		jmp    jump_c7743
	jump_c7734:
		lea    0x4(%esp),%ecx
		mov    %esp,%edx
		mov    %edi,%ebx
		mov    %esi,%eax
		call   move_smapwho
	jump_c7743:
		mov    0x32(%esi),%ax
		mov    0x2c(%esi),%dx
		mov    0x2e(%esi),%bx
		mov    0x30(%esi),%cx
		add    %eax,%edx
		mov    0x34(%esi),%ax
		mov    %dx,0x2c(%esi)
		add    %eax,%ebx
		mov    0x36(%esi),%ax
		mov    %bx,0x2e(%esi)
		add    %eax,%ecx
		mov    %cx,0x30(%esi)
	jump_c776d:
		mov    0x26(%esi),%eax
		sar    $0x10,%eax
		cmp    $0xa,%eax
		jge    jump_c7782
		mov    0x26(%esi),%ax
		add    %ax,0x12(%esi)
		jmp    jump_c7787
	jump_c7782:
		addw   $0x5,0x12(%esi)
	jump_c7787:
		decw   0x28(%esi)
		mov    0x26(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jg     jump_c77b4
		mov    0x6(%esp),%eax
		sar    $0x10,%eax
		call   ac_remove_sthing
		mov    %esi,%eax
		call   ac_delete_snode
		decw   ingame__FlameCount
		jmp    jump_c7a40
	jump_c77b4:
		push   $0x0
		mov    0x20(%esi),%ebx
		push   $0x0
		mov    0x1c(%esi),%edx
		xor    %ecx,%ecx
		push   $0x0
		mov    0x18(%esi),%eax
		mov    0x12(%esi),%cx
		call   ac_check_for_radius_hit_person
		mov    %eax,%edx
		mov    %eax,%ebx
		test   %eax,%eax
		je     jump_c79ec
		xor    %eax,%eax
		mov    0x9(%edx),%al
		cmp    $0x2,%eax
		je     jump_c79ec
		cmp    $0x5,%eax
		je     jump_c7847
		mov    0x16(%edx),%ax
		cmp    0x38(%esi),%ax
		je     jump_c79ec
		xor    %ecx,%ecx
		mov    0x38(%esi),%cx
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		shl    $0x2,%eax
		add    %eax,%ecx
		mov    things,%eax
		shl    $0x3,%ecx
		add    %eax,%ecx
		mov    0x51(%edx),%al
		cmp    0x51(%ecx),%al
		je     jump_c79ec
		xor    %eax,%eax
		mov    0xa(%edx),%ax
		cmp    $0x24,%eax
		je     jump_c79ec
		cmp    $0xc,%eax
		je     jump_c79ec
		testb  $0x2,0xc(%edx)
		jne    jump_c79ec
	jump_c7847:
		mov    0xc(%esi),%ch
		or     $0x8,%ch
		xor    %eax,%eax
		mov    %ch,0xc(%esi)
		mov    0x9(%ebx),%al
		cmp    $0x5,%eax
		je     jump_c78b5
		testb  $0x10,0x44(%ebx)
		jne    jump_c78b5
		mov    0x20(%esi),%ecx
		mov    0x18(%esi),%eax
		mov    0x20(%ebx),%edx
		mov    0x18(%ebx),%edi
		sar    $0x8,%ecx
		sar    $0x8,%edx
		sar    $0x8,%eax
		sub    %edx,%ecx
		sar    $0x8,%edi
		mov    %ecx,%edx
		sub    %edi,%eax
		neg    %edx
		call   ac_arctan
		cwtl
		add    $0x80,%eax
		sar    $0x8,%eax
		mov    %al,0x98(%ebx)
		add    $0x8,%al
		and    $0x7,%al
		mov    %al,0x98(%ebx)
		xor    %ah,%ah
		add    $0x4,%eax
		xor    %ah,%ah
		xor    %edx,%edx
		and    $0x7,%al
		mov    %ax,%dx
		mov    %ebx,%eax
		call   change_player_angle
	jump_c78b5:
		mov    $0x1,%edx
		mov    %ebx,%eax
		call   napalm_person
		test   %al,%al
		je     jump_c79ec
		xor    %edx,%edx
		mov    0x38(%esi),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edi
		shl    $0x3,%eax
		mov    in_network_game,%dl
		add    %edi,%eax
		test   %dl,%dl
		jne    jump_c7983
		xor    %edx,%edx
		mov    0x51(%eax),%dl
		mov    ingame__TrainMode,%eax
		sar    $0x10,%eax
		cmp    %eax,%edx
		je     jump_c7969
		jmp    jump_c79ec


/*----------------------------------------------------------------*/
func_c790c:
/*----------------------------------------------------------------*/
		mov    EXPORT_SYMBOL(open_brief)-2,%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		incw   data_199840(,%eax,8)
		jmp    jump_c79ec


/*----------------------------------------------------------------*/
func_c792b:
/*----------------------------------------------------------------*/
		mov    EXPORT_SYMBOL(open_brief)-2,%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		incw   data_199838(,%eax,8)
		jmp    jump_c79ec


/*----------------------------------------------------------------*/
func_c794a:
/*----------------------------------------------------------------*/
		mov    EXPORT_SYMBOL(open_brief)-2,%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		incw   data_19983c(,%eax,8)
		jmp    jump_c79ec
	jump_c7969:
		mov    0x8(%ebx),%al
		dec    %al
		cmp    $0xd,%al
		ja     jump_c79ec
		and    $0xff,%eax
		jmp    *%cs:vtable_c7640(,%eax,4)
	jump_c7983:
		testb  $0x20,0xd(%ebx)
		je     jump_c79ec
		mov    0xd(%eax),%cl
		xor    %edx,%edx
		test   $0x20,%cl
		jne    jump_c79b8
		testb  $0x8,0xe(%eax)
		je     jump_c79ba
		xor    %ecx,%ecx
		mov    0x3c(%eax),%cx
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		shl    $0x2,%eax
		add    %ecx,%eax
		shl    $0x3,%eax
		add    %edi,%eax
		testb  $0x20,0xd(%eax)
		je     jump_c79ba
	jump_c79b8:
		mov    %eax,%edx
	jump_c79ba:
		test   %edx,%edx
		je     jump_c79ec
		testb  $0x20,0xd(%edx)
		je     jump_c79ec
		xor    %eax,%eax
		mov    0x54(%edx),%ax
		sar    $0x2,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		add    %edx,%eax
		shl    $0x3,%eax
		add    $mission_status,%eax
		lea    0x10(%eax),%edx
		xor    %eax,%eax
		mov    0x54(%ebx),%ax
		sar    $0x2,%eax
		incw   (%edx,%eax,2)
	jump_c79ec:
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		xor    %edx,%edx
		and    $0x1f,%al
		mov    ingame__FlameCount,%dx
		add    $0x50,%eax
		cmp    $0x14,%edx
		jge    jump_c7a1c
		and    $0xffff,%eax
		imul   %eax,%edx
		mov    $0x14,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
	jump_c7a1c:
		movswl %ax,%ecx
		mov    0x36(%esi),%edx
		mov    0x20(%esi),%ebx
		sar    $0x10,%edx
		sar    $0x8,%ebx
		push   %edx
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		add    $0x64,%edx
		call   ac_apply_full_light
	jump_c7a40:
		add    $0xc,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret

vtable_c7a48:
		.long   func_c7c18
		.long   func_c7c18
		.long   func_c7c18
		.long   func_c7c37
		.long   func_c7c37
		.long   func_c7c56
		.long   func_c7c56
		.long   func_c7c56
		.long   func_c7c18
		.long   func_c7c37
		.long   func_c7c37
		.long   func_c7c18
		.long   func_c7c37
		.long   func_c7c37


/*----------------------------------------------------------------*/
process_flame1:	/* 0x0C7A80 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    %eax,%esi
		mov    0x14(%eax),%eax
		mov    gameturn,%edx
		sar    $0x10,%eax
		add    %edx,%eax
		test   $0x1,%al
		je     jump_c7aae
		xor    %eax,%eax
		mov    frame,%edx
		mov    0x24(%esi),%ax
		mov    0x6(%edx,%eax,8),%ax
		mov    %ax,0x24(%esi)
	jump_c7aae:
		mov    0x26(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jle    jump_c7ad8
		decw   0x28(%esi)
		mov    0x26(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_c7ad8
		mov    0x14(%esi),%eax
		sar    $0x10,%eax
		call   ac_remove_sthing
		mov    %esi,%eax
		call   ac_delete_snode
	jump_c7ad8:
		push   $0x0
		mov    0x20(%esi),%ebx
		push   $0x0
		mov    0x1c(%esi),%edx
		xor    %ecx,%ecx
		push   $0x0
		mov    0x18(%esi),%eax
		mov    0x12(%esi),%cx
		call   ac_check_for_radius_hit_person
		mov    %eax,%edx
		mov    %eax,%ebx
		test   %eax,%eax
		je     jump_c7cfa
		xor    %eax,%eax
		mov    0x9(%edx),%al
		cmp    $0x2,%eax
		je     jump_c7cfa
		cmp    $0x5,%eax
		je     jump_c7b58
		mov    0x16(%edx),%ax
		cmp    0x38(%esi),%ax
		je     jump_c7cfa
		xor    %ecx,%ecx
		mov    0x38(%esi),%cx
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		shl    $0x2,%eax
		add    %eax,%ecx
		mov    things,%eax
		shl    $0x3,%ecx
		add    %ecx,%eax
		mov    0x51(%edx),%cl
		cmp    0x51(%eax),%cl
		je     jump_c7cfa
		xor    %eax,%eax
		mov    0xa(%edx),%ax
		cmp    $0x24,%eax
		je     jump_c7cfa
	jump_c7b58:
		orb    $0x8,0xc(%esi)
		xor    %eax,%eax
		mov    0x9(%ebx),%al
		cmp    $0x5,%eax
		je     jump_c7bc1
		testb  $0x10,0x44(%ebx)
		jne    jump_c7bc1
		mov    0x20(%esi),%edx
		mov    0x18(%esi),%ecx
		mov    0x20(%ebx),%edi
		mov    0x18(%ebx),%eax
		sar    $0x8,%edx
		sar    $0x8,%ecx
		sar    $0x8,%eax
		sar    $0x8,%edi
		sub    %eax,%ecx
		sub    %edi,%edx
		mov    %ecx,%eax
		neg    %edx
		call   ac_arctan
		cwtl
		add    $0x80,%eax
		sar    $0x8,%eax
		mov    %al,0x98(%ebx)
		add    $0x8,%al
		and    $0x7,%al
		mov    %al,0x98(%ebx)
		xor    %ah,%ah
		add    $0x4,%eax
		xor    %ah,%ah
		xor    %edx,%edx
		and    $0x7,%al
		mov    %ax,%dx
		mov    %ebx,%eax
		call   change_player_angle
	jump_c7bc1:
		mov    $0x1,%edx
		mov    %ebx,%eax
		call   napalm_person
		test   %al,%al
		je     jump_c7cfa
		xor    %edx,%edx
		mov    0x38(%esi),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%ecx
		shl    $0x3,%eax
		mov    in_network_game,%dl
		add    %ecx,%eax
		test   %dl,%dl
		jne    jump_c7c8f
		xor    %edx,%edx
		mov    0x51(%eax),%dl
		mov    ingame__TrainMode,%eax
		sar    $0x10,%eax
		cmp    %eax,%edx
		je     jump_c7c75
		jmp    jump_c7cfa


/*----------------------------------------------------------------*/
func_c7c18:
/*----------------------------------------------------------------*/
		mov    EXPORT_SYMBOL(open_brief)-2,%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		incw   data_199840(,%eax,8)
		jmp    jump_c7cfa


/*----------------------------------------------------------------*/
func_c7c37:
/*----------------------------------------------------------------*/
		mov    EXPORT_SYMBOL(open_brief)-2,%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		incw   data_199838(,%eax,8)
		jmp    jump_c7cfa


/*----------------------------------------------------------------*/
func_c7c56:
/*----------------------------------------------------------------*/
		mov    EXPORT_SYMBOL(open_brief)-2,%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		incw   data_19983c(,%eax,8)
		jmp    jump_c7cfa
	jump_c7c75:
		mov    0x8(%ebx),%al
		dec    %al
		cmp    $0xd,%al
		ja     jump_c7cfa
		and    $0xff,%eax
		jmp    *%cs:vtable_c7a48(,%eax,4)
	jump_c7c8f:
		testb  $0x20,0xd(%ebx)
		je     jump_c7cfa
		xor    %edx,%edx
		testb  $0x20,0xd(%eax)
		je     jump_c7ca1
		mov    %eax,%edx
		jmp    jump_c7cc8
	jump_c7ca1:
		testb  $0x8,0xe(%eax)
		je     jump_c7cc8
		xor    %esi,%esi
		mov    0x3c(%eax),%si
		lea    0x0(,%esi,4),%eax
		add    %esi,%eax
		shl    $0x2,%eax
		add    %esi,%eax
		shl    $0x3,%eax
		add    %eax,%ecx
		testb  $0x20,0xd(%ecx)
		je     jump_c7cc8
		mov    %ecx,%edx
	jump_c7cc8:
		test   %edx,%edx
		je     jump_c7cfa
		testb  $0x20,0xd(%edx)
		je     jump_c7cfa
		xor    %eax,%eax
		mov    0x54(%edx),%ax
		sar    $0x2,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		add    %edx,%eax
		shl    $0x3,%eax
		add    $mission_status,%eax
		lea    0x10(%eax),%edx
		xor    %eax,%eax
		mov    0x54(%ebx),%ax
		sar    $0x2,%eax
		incw   (%edx,%eax,2)
	jump_c7cfa:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
process_splash:	/* 0x0C7D44 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    %eax,%esi
		decw   0x28(%eax)
		mov    0x26(%eax),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jle    jump_c7dda
		testb  $0x1,0x28(%esi)
		je     jump_c7dda
		mov    0x18(%esi),%edx
		call   ac_LbRandomAnyShort
		sar    $0x8,%edx
		xor    %ah,%ah
		and    $0xffff,%eax
		add    %eax,%edx
		sub    $0x80,%edx
		mov    %edx,%ebx
		mov    0x20(%esi),%edx
		call   ac_LbRandomAnyShort
		sar    $0x8,%edx
		xor    %ah,%ah
		and    $0xffff,%eax
		add    %eax,%edx
		xor    %edi,%edi
		lea    -0x80(%edx),%eax
		push   $0x0
		mov    %ax,%di
		movswl %ax,%edx
		movswl %bx,%eax
		mov    $0x43f,%ecx
		call   ac_alt_at_point
		mov    %eax,%edx
		xor    %eax,%eax
		sar    $0x8,%edx
		mov    %bx,%ax
		mov    %edi,%ebx
		call   create_scale_effect
		mov    %eax,%edx
		test   %eax,%eax
		je     jump_c7dda
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x7f,%al
		movb   $0x3c,0x8(%edx)
		add    $0x3e,%eax
		mov    %ax,0x12(%edx)
	jump_c7dda:
		xor    %eax,%eax
		mov    0x24(%esi),%ax
		lea    0x0(,%eax,8),%edx
		mov    frame,%eax
		mov    0x6(%edx,%eax,1),%dx
		and    $0xffff,%edx
		testb  $0x1,0x5(%eax,%edx,8)
		je     jump_c7e12
		mov    0x14(%esi),%eax
		sar    $0x10,%eax
		call   ac_remove_sthing
		mov    %esi,%eax
		call   ac_delete_snode
		jmp    jump_c7e16
	jump_c7e12:
		mov    %dx,0x24(%esi)
	jump_c7e16:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_scale_effect)	/* 0x0C7E1C */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    %eax,%ebx
		mov    0x8(%eax),%al
		cmp    $0x2e,%al
		jb     jump_c7eea
		jbe    jump_c7e79
		cmp    $0x38,%al
		jb     jump_c7eda
		cmp    $0x39,%al
		jbe    jump_c7e91
		cmp    $0x3a,%al
		jbe    jump_c7e9a
		cmp    $0x3c,%al
		je     jump_c7ed1
		pop    %ebx
		ret
	jump_c7e46:
		movswl %dx,%edx
		mov    %ebx,%eax
		call   process_special_drift_smoke
		pop    %ebx
		ret
	jump_c7e52:
		mov    0x26(%ebx),%eax
		sar    $0x10,%eax
		cmp    $0x4,%eax
		jne    jump_c7e6d
		mov    nstart_ani,%eax
		mov    0x8a0(%eax),%ax
		mov    %ax,0x24(%ebx)
	jump_c7e6d:
		movswl %dx,%edx
		mov    %ebx,%eax
		call   process_drift_smoke
		pop    %ebx
		ret
	jump_c7e79:
		movswl %dx,%edx
		mov    %ebx,%eax
		call   process_napalm_flame
		pop    %ebx
		ret
	jump_c7e85:
		movswl %dx,%edx
		mov    %ebx,%eax
		call   process_mushroom
		pop    %ebx
		ret
	jump_c7e91:
		mov    %ebx,%eax
		call   process_flame1
		pop    %ebx
		ret
	jump_c7e9a:
		xor    %eax,%eax
		mov    frame,%edx
		mov    0x24(%ebx),%ax
		mov    0x6(%edx,%eax,8),%ax
		and    $0xffff,%eax
		testb  $0x1,0x5(%edx,%eax,8)
		je     jump_c7ecb
		mov    0x14(%ebx),%eax
		sar    $0x10,%eax
		call   ac_remove_sthing
		mov    %ebx,%eax
		call   ac_delete_snode
		pop    %ebx
		ret
	jump_c7ecb:
		mov    %ax,0x24(%ebx)
		pop    %ebx
		ret
	jump_c7ed1:
		mov    %ebx,%eax
		call   process_splash
		pop    %ebx
		ret
	jump_c7eda:
		cmp    $0x31,%al
		jb     jump_c7f0e
		jbe    jump_c7e52
		cmp    $0x34,%al
		je     jump_c7e91
		pop    %ebx
		ret
	jump_c7eea:
		cmp    $0x1f,%al
		jb     jump_c7f06
		jbe    jump_c7e85
		cmp    $0x2c,%al
		jb     jump_c7f0e
		jbe    jump_c7e46
		movswl %dx,%edx
		mov    %ebx,%eax
		call   process_drift_smoke
		pop    %ebx
		ret
	jump_c7f06:
		cmp    $0x1e,%al
		je     jump_c7e6d
	jump_c7f0e:
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_init_rocket)	/* 0x0C7F10 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x18,%esp
		mov    %eax,%edi
		call   ac_get_new_thing
		mov    %eax,0x14(%esp)
		test   %ax,%ax
		je     jump_c820c
		and    $0xffff,%eax
		lea    0x0(,%eax,4),%esi
		add    %eax,%esi
		shl    $0x2,%esi
		add    %eax,%esi
		mov    things,%eax
		shl    $0x3,%esi
		add    %eax,%esi
		xor    %eax,%eax
		mov    0x57(%edi),%al
		mov    0x18(%edi),%ebx
		mov    data_15335a(,%eax,4),%edx
		mov    EXPORT_SYMBOL(angle_direction)(,%eax,4),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		shl    $0x5,%edx
		shl    $0x5,%eax
		add    %edx,%ebx
		mov    0x20(%edi),%edx
		add    %eax,%edx
		mov    0x1c(%edi),%eax
		add    $0x1400,%eax
		mov    %eax,0x4(%esp)
		mov    %ebx,%eax
		mov    %ebx,0x10(%esp)
		sar    $0x10,%eax
		mov    %edx,0xc(%esp)
		test   %eax,%eax
		jl     jump_c7fa7
		cmp    $0x80,%eax
		jge    jump_c7fa7
		mov    %edx,%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jl     jump_c7fa7
		cmp    $0x80,%eax
		jl     jump_c7fb8
	jump_c7fa7:
		xor    %eax,%eax
		mov    0x14(%esp),%ax
		call   ac_remove_thing
		jmp    jump_c820c
	jump_c7fb8:
		mov    0x57(%edi),%al
		movl   $0x0,0x40(%esi)
		movl   $0x0,0xc(%esi)
		mov    %al,0x57(%esi)
		mov    0x40(%edi),%eax
		test   %eax,%eax
		jne    jump_c7fdd
		testb  $0x20,0xf(%edi)
		je     jump_c80f6
	jump_c7fdd:
		testb  $0x20,0xf(%edi)
		je     jump_c8035
		mov    0x10(%esp),%ebx
		mov    0x2c(%edi),%eax
		sar    $0x8,%ebx
		mov    0x4(%esp),%ebp
		sub    %ebx,%eax
		sar    $0x8,%ebp
		mov    %eax,%ebx
		mov    0x30(%edi),%eax
		sub    %ebp,%eax
		mov    0xc(%esp),%ecx
		lea    0x14(%eax),%ebp
		sar    $0x8,%ecx
		mov    0x34(%edi),%eax
		sub    %ecx,%eax
		mov    %eax,%ecx
		mov    0x2c(%edi),%ax
		mov    %ax,0x64(%esi)
		mov    0x30(%edi),%ax
		add    $0x14,%eax
		mov    %ax,0x66(%esi)
		mov    0x34(%edi),%ax
		mov    %ax,0x68(%esi)
		orb    $0x20,0xf(%esi)
		andb   $0xdf,0xf(%edi)
		jmp    jump_c808a
	jump_c8035:
		mov    %eax,0x40(%esi)
		mov    0x10(%esp),%edx
		mov    0x18(%eax),%ebx
		mov    0x4(%esp),%ecx
		sub    %edx,%ebx
		mov    0x1c(%eax),%edx
		sub    %ecx,%edx
		sar    $0x8,%edx
		lea    0x14(%edx),%ebp
		mov    0x20(%eax),%ecx
		sub    0xc(%esp),%ecx
		mov    0x18(%eax),%edx
		sar    $0x8,%edx
		mov    %edx,(%esp)
		mov    (%esp),%edx
		mov    %dx,0x64(%esi)
		mov    0x1c(%eax),%edx
		sar    $0x8,%edx
		add    $0x14,%edx
		mov    %edx,(%esp)
		mov    (%esp),%edx
		mov    %dx,0x66(%esi)
		mov    0x20(%eax),%eax
		sar    $0x8,%ebx
		sar    $0x8,%eax
		sar    $0x8,%ecx
		mov    %ax,0x68(%esi)
	jump_c808a:
		mov    %ebx,%eax
		imul   %ebx,%eax
		mov    %eax,(%esp)
		mov    %ecx,%eax
		imul   %ecx,%eax
		mov    (%esp),%edx
		add    %eax,%edx
		mov    %ebp,%eax
		imul   %ebp,%eax
		add    %edx,%eax
		call   ac_LbSqrL
		mov    %eax,0x8(%esp)
		test   %eax,%eax
		jne    jump_c80b8
		movl   $0x1,0x8(%esp)
	jump_c80b8:
		mov    %ebx,%edx
		shl    $0x8,%edx
		mov    0x8(%esp),%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %ebp,%edx
		mov    %eax,%ebx
		shl    $0x8,%edx
		mov    0x8(%esp),%ebp
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebp
		mov    %ecx,%edx
		mov    %eax,%ebp
		shl    $0x8,%edx
		mov    0x8(%esp),%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %ebx,0x2c(%esi)
		mov    %ebp,0x30(%esi)
		mov    %eax,%ecx
		jmp    jump_c8122
	jump_c80f6:
		xor    %ecx,%ecx
		mov    0x57(%edi),%cl
		mov    data_15335a(,%ecx,4),%ebx
		sar    $0x10,%ebx
		mov    EXPORT_SYMBOL(angle_direction)(,%ecx,4),%ecx
		mov    %ebx,0x2c(%esi)
		mov    %eax,0x30(%esi)
		mov    0x57(%edi),%al
		mov    EXPORT_SYMBOL(angle_direction)(,%eax,4),%eax
		sar    $0x10,%eax
		sar    $0x10,%ecx
	jump_c8122:
		mov    %eax,0x34(%esi)
		neg    %ecx
		neg    %ebx
		mov    %edi,%eax
		movswl %cx,%ecx
		movswl %bx,%edx
		xor    %ebx,%ebx
		call   init_shoot_recoil
		mov    0x10(%esp),%eax
		mov    $0xa8,%ebx
		mov    things,%ebp
		mov    %eax,0x18(%esi)
		mov    0xc(%esp),%eax
		mov    %edi,%edx
		mov    %eax,0x20(%esi)
		mov    0x4(%esp),%eax
		sub    %ebp,%edx
		mov    %eax,0x1c(%esi)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		movw   $0x14,0x2a(%esi)
		movw   $0x1e,0x28(%esi)
		movw   $0x190,0x38(%esi)
		movw   $0x0,0x24(%esi)
		movw   $0x0,0x26(%esi)
		movw   $0x0,0x52(%esi)
		movw   $0x0,(%esi)
		mov    0xc(%esi),%dl
		mov    %ax,0x3c(%esi)
		xor    %eax,%eax
		or     $0x4,%dl
		mov    0x14(%esp),%ax
		mov    %dl,0xc(%esi)
		call   ac_add_node_thing
		movb   $0x6,0x9(%esi)
		movw   $0x32,0x14(%esi)
		mov    0x8a(%edi),%eax
		sar    $0x10,%eax
		cmp    $0xe,%eax
		jle    jump_c81e0
		push   $0x3
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x0
		mov    $0x18,%edx
		movb   $0x1,0x8(%esi)
		push   $0x64
		mov    %esi,%eax
		movw   $0x20,0x28(%esi)
		jmp    jump_c8207
	jump_c81e0:
		push   $0x3
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		movw   $0x14,0x28(%esi)
		push   $0x0
		mov    $0x18,%edx
		movw   $0x2bc,0x38(%esi)
		push   $0x64
		mov    %esi,%eax
		movb   $0x0,0x8(%esi)
	jump_c8207:
		call   ac_play_dist_sample
	jump_c820c:
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_init_v_rocket)	/* 0x0C8218 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x18,%esp
		mov    %eax,%ebx
		call   ac_get_new_thing
		mov    %eax,0x14(%esp)
		test   %ax,%ax
		je     jump_c84c4
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edi
		shl    $0x3,%eax
		lea    (%edi,%eax,1),%esi
		mov    0x18(%ebx),%eax
		mov    0x5c(%ebx),%edx
		mov    %eax,0x10(%esp)
		mov    0x1c(%ebx),%eax
		sar    $0x10,%edx
		mov    %eax,0xc(%esp)
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		shl    $0x3,%eax
		lea    (%edi,%eax,1),%edx
		mov    0x78(%edx),%ecx
		sar    $0x10,%ecx
		lea    0x0(,%ecx,4),%eax
		add    %ecx,%eax
		shl    $0x2,%eax
		add    %ecx,%eax
		mov    0x52(%edi,%eax,8),%ecx
		sar    $0x10,%ecx
		lea    0x0(,%ecx,8),%eax
		mov    0x20(%ebx),%ebp
		add    %ecx,%eax
		mov    0xc(%esp),%edi
		shl    $0x2,%eax
		add    $0x4600,%edi
		add    $EXPORT_SYMBOL(local_mats),%eax
		mov    %edi,0xc(%esp)
		mov    0x10(%esp),%edi
		mov    0x8(%eax),%ecx
		mov    0x20(%eax),%eax
		shl    $0x4,%ecx
		shl    $0x4,%eax
		sub    %ecx,%edi
		sub    %eax,%ebp
		mov    %edi,%eax
		sar    $0x10,%eax
		mov    %edi,0x10(%esp)
		test   %eax,%eax
		jl     jump_c82f1
		cmp    $0x80,%eax
		jge    jump_c82f1
		mov    %ebp,%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jl     jump_c82f1
		cmp    $0x80,%eax
		jl     jump_c8302
	jump_c82f1:
		xor    %eax,%eax
		mov    0x14(%esp),%ax
		call   ac_remove_thing
		jmp    jump_c84c4
	jump_c8302:
		mov    0x57(%ebx),%al
		movl   $0x0,0x40(%esi)
		mov    %al,0x57(%esi)
		mov    0x40(%edx),%eax
		/* Tanks bug WA:
		 * Even if we checked the pointer at 0x40(%edx) in detail in this place,
		 * we would have to re-check it later - notice that the two checks for
		 * 0x20 flags are on different thing, so comprehensive check cannot be
		 * moved before them.
		 */
		test   %eax,%eax
		jne    jump_c8320
		testb  $0x20,0xf(%edx)
		je     jump_c84c4
	jump_c8320:
		testb  $0x20,0xf(%ebx)
		je     jump_c837f
		mov    0x72(%edx),%edi
		mov    0x10(%esp),%eax
		sar    $0x10,%edi
		sar    $0x8,%eax
		sub    %eax,%edi
		mov    0x74(%edx),%eax
		sar    $0x10,%eax
		mov    %eax,(%esp)
		mov    0xc(%esp),%eax
		mov    (%esp),%ecx
		sar    $0x8,%eax
		sub    %eax,%ecx
		mov    %ecx,0x4(%esp)
		mov    0x76(%edx),%eax
		mov    %ebp,%ecx
		sar    $0x10,%eax
		sar    $0x8,%ecx
		sub    %ecx,%eax
		mov    %eax,%ecx
		andb   $0xdf,0xf(%ebx)
		mov    0x74(%edx),%ax
		mov    %ax,0x64(%esi)
		mov    0x76(%edx),%ax
		mov    %ax,0x66(%esi)
		mov    0x78(%edx),%ax
		mov    %ax,0x68(%esi)
		orb    $0x20,0xf(%esi)
		jmp    jump_c83d0
	jump_c837f:
		mov    %eax,0x40(%esi)
		/* Tanks bug WA:
		 * It happens sometimes that the pointer at 0x40(%edx) is invalid, even though
		 * is is non-zero. Is it a pointer to a thing, so we can be more strict
		 * in checking it, by making sure it is in range of things allocation
		 */
		cmpl   things,%eax
		jl     jump_c837f_bad
		push   %ebx
		movl   things,%ebx
		add    $168000,%ebx
		cmpl   %ebx,%eax
		pop    %ebx
		jl     jump_c837f_good
	jump_c837f_bad:
	     /* Make up coords. They cannot be random, though they could depend on thing properties.. */
		movl   $0x100,0x4(%esp)
		mov    $9,%edi
		mov    $9,%ecx
		jmp    jump_c83d0
	jump_c837f_good:
		mov    0x10(%esp),%edx
		mov    0x18(%eax),%edi
		mov    0xc(%esp),%ecx
		sub    %edx,%edi
		mov    0x1c(%eax),%edx
		sub    %ecx,%edx
		sar    $0x8,%edx
		mov    %edx,0x4(%esp)
		mov    0x18(%eax),%edx
		sar    $0x8,%edx
		mov    %edx,(%esp)
		mov    (%esp),%edx
		mov    0x20(%eax),%ecx
		mov    %dx,0x64(%esi)
		mov    0x1c(%eax),%edx
		sar    $0x8,%edx
		mov    %edx,(%esp)
		mov    (%esp),%edx
		mov    %dx,0x66(%esi)
		sar    $0x8,%edi
		mov    0x20(%eax),%eax
		sub    %ebp,%ecx
		sar    $0x8,%eax
		sar    $0x8,%ecx
		mov    %ax,0x68(%esi)
	jump_c83d0:
		mov    %edi,%eax
		imul   %edi,%eax
		mov    %ecx,%edx
		imul   %ecx,%edx
		add    %edx,%eax
		call   ac_LbSqrL
		mov    %eax,0x8(%esp)
		test   %eax,%eax
		jne    jump_c83f1
		movl   $0x1,0x8(%esp)
	jump_c83f1:
		mov    %edi,%edx
		shl    $0x8,%edx
		mov    0x8(%esp),%edi
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %edi
		mov    0x4(%esp),%edx
		shl    $0x8,%edx
		mov    %eax,%edi
		mov    %edx,%eax
		sar    $0x1f,%edx
		idivl  0x8(%esp)
		mov    %ecx,%edx
		mov    %eax,0x4(%esp)
		shl    $0x8,%edx
		mov    0x8(%esp),%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %edi,0x2c(%esi)
		mov    things,%edi
		mov    %eax,%ecx
		mov    0x4(%esp),%eax
		mov    %ebx,%edx
		mov    %eax,0x30(%esi)
		mov    0x10(%esp),%eax
		mov    $0xa8,%ebx
		mov    %eax,0x18(%esi)
		mov    0xc(%esp),%eax
		sub    %edi,%edx
		mov    %eax,0x1c(%esi)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		movw   $0x14,0x2a(%esi)
		movw   $0x1e,0x28(%esi)
		movw   $0x258,0x38(%esi)
		movw   $0x0,0x24(%esi)
		movw   $0x0,0x26(%esi)
		movw   $0x0,0x52(%esi)
		movw   $0x0,(%esi)
		mov    %ebp,0x20(%esi)
		mov    %ecx,0x34(%esi)
		mov    0xc(%esi),%dl
		mov    %ax,0x3c(%esi)
		xor    %eax,%eax
		or     $0x4,%dl
		mov    0x16(%esi),%ax
		mov    %dl,0xc(%esi)
		call   ac_add_node_thing
		push   $0x3
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x0
		mov    $0x18,%edx
		movb   $0x6,0x9(%esi)
		push   $0x64
		mov    %esi,%eax
		movw   $0x32,0x14(%esi)
		call   ac_play_dist_sample
	jump_c84c4:
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_init_grenade)	/* 0x0C84D0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    %eax,%ecx
		mov    %dl,0x4(%esp)
		call   ac_get_new_thing
		mov    %eax,%edi
		test   %ax,%ax
		je     jump_c8672
		and    $0xffff,%eax
		lea    0x0(,%eax,4),%ebx
		add    %eax,%ebx
		shl    $0x2,%ebx
		add    %ebx,%eax
		mov    things,%ebx
		shl    $0x3,%eax
		add    %eax,%ebx
		xor    %eax,%eax
		mov    0x57(%ecx),%al
		mov    0x18(%ecx),%esi
		mov    data_15335a(,%eax,4),%edx
		mov    EXPORT_SYMBOL(angle_direction)(,%eax,4),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		shl    $0x5,%edx
		shl    $0x5,%eax
		add    %edx,%esi
		add    0x20(%ecx),%eax
		mov    0x1c(%ecx),%edx
		add    $0xa00,%edx
		mov    %edx,(%esp)
		mov    0x57(%ecx),%dl
		mov    %dl,0x57(%ebx)
		mov    %esi,%edx
		sar    $0x10,%edx
		test   %edx,%edx
		jl     jump_c8567
		cmp    $0x80,%edx
		jge    jump_c8567
		mov    %eax,%edx
		sar    $0x10,%edx
		test   %edx,%edx
		jl     jump_c8567
		cmp    $0x80,%edx
		jl     jump_c8576
	jump_c8567:
		xor    %eax,%eax
		mov    %di,%ax
		call   ac_remove_thing
		jmp    jump_c8672
	jump_c8576:
		mov    0x40(%ecx),%edx
		test   %edx,%edx
		jne    jump_c8583
		testb  $0x20,0xf(%ecx)
		je     jump_c85c9
	jump_c8583:
		testb  $0x20,0xf(%ecx)
		je     jump_c85a7
		mov    %esi,%edi
		mov    0x2c(%ecx),%edx
		sar    $0x8,%edi
		sub    %edi,%edx
		mov    %edx,%edi
		mov    %eax,%edx
		mov    0x34(%ecx),%ebp
		sar    $0x8,%edx
		sub    %edx,%ebp
		andb   $0xdf,0xf(%ecx)
		mov    %ebp,%edx
		jmp    jump_c85b7
	jump_c85a7:
		mov    0x18(%edx),%edi
		mov    0x20(%edx),%edx
		sub    %esi,%edi
		sub    %eax,%edx
		sar    $0x8,%edi
		sar    $0x8,%edx
	jump_c85b7:
		sar    $0x4,%edi
		movl   $0xfa0,0x30(%ebx)
		sar    $0x4,%edx
		mov    %edi,0x2c(%ebx)
		jmp    jump_c85f3
	jump_c85c9:
		mov    0x57(%ecx),%dl
		mov    data_15335a(,%edx,4),%edx
		sar    $0x10,%edx
		movl   $0xfa0,0x30(%ebx)
		add    %edx,%edx
		mov    %edx,0x2c(%ebx)
		xor    %edx,%edx
		mov    0x57(%ecx),%dl
		mov    EXPORT_SYMBOL(angle_direction)(,%edx,4),%edx
		sar    $0x10,%edx
		add    %edx,%edx
	jump_c85f3:
		mov    %edx,0x34(%ebx)
		mov    %esi,0x18(%ebx)
		mov    %ecx,%edx
		mov    %eax,0x20(%ebx)
		mov    (%esp),%eax
		mov    things,%esi
		mov    $0xa8,%ecx
		sub    %esi,%edx
		mov    %eax,0x1c(%ebx)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		movw   $0x3e7,0x2a(%ebx)
		movw   $0x3e7,0x28(%ebx)
		mov    %ax,0x3c(%ebx)
		mov    nstart_ani,%eax
		movw   $0x190,0x38(%ebx)
		mov    0x858(%eax),%ax
		movw   $0x42c,0x26(%ebx)
		movw   $0x0,0x52(%ebx)
		movw   $0x0,(%ebx)
		mov    %ax,0x24(%ebx)
		xor    %eax,%eax
		mov    0x16(%ebx),%ax
		movl   $0x4,0xc(%ebx)
		call   ac_add_node_thing
		movb   $0x10,0x9(%ebx)
		mov    0x4(%esp),%al
		movw   $0x32,0x14(%ebx)
		mov    %al,0x8(%ebx)
	jump_c8672:
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
init_spark:	/* 0x0C867C */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    %eax,%ecx
		mov    %edx,%edi
		test   %eax,%eax
		jl     jump_c869e
		cmp    $0x8000,%eax
		jg     jump_c869e
		test   %ebx,%ebx
		jl     jump_c869e
		cmp    $0x8000,%ebx
		jle    jump_c86a5
	jump_c869e:
		xor    %edx,%edx
		jmp    jump_c87d8
	jump_c86a5:
		cmpb   $0x0,in_network_game
		jne    jump_c86f8
		xor    %eax,%eax
		mov    pktrec_mode,%al
		test   %eax,%eax
		jne    jump_c86f8
		mov    engn_xc,%edx
		mov    %ecx,%eax
		sub    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    engn_zc,%ebp
		mov    %eax,%esi
		mov    %ebx,%eax
		sub    %ebp,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%esi
		jle    jump_c86e1
		sar    %eax
		jmp    jump_c86e3
	jump_c86e1:
		sar    %esi
	jump_c86e3:
		add    %esi,%eax
		cmp    $0xf00,%eax
		jle    jump_c86f8
		xor    %edx,%edx
		mov    %edx,%eax
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_c86f8:
		call   ac_LbRandomAnyShort
		and    $0x7,%ah
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(lbSinTable)(,%eax,4),%edx
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%eax,4),%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		mov    %edx,0x4(%esp)
		mov    %eax,(%esp)
		call   ac_LbRandomAnyShort
		and    $0x7,%ah
		and    $0xffff,%eax
		mov    EXPORT_SYMBOL(lbSinTable)(,%eax,4),%esi
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(sthings_used),%ax
		sar    $0x8,%esi
		cmp    $0x5d7,%eax
		jle    jump_c8752
		xor    %edx,%edx
		mov    %edx,%eax
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_c8752:
		call   ac_get_new_sthing
		cwtl
		test   %eax,%eax
		jne    jump_c8768
		xor    %edx,%edx
		mov    %edx,%eax
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_c8768:
		mov    %eax,%edx
		shl    $0x4,%edx
		sub    %eax,%edx
		lea    0x0(,%edx,4),%eax
		mov    EXPORT_SYMBOL(sthings),%edx
		add    %eax,%edx
		shl    $0x8,%ecx
		mov    0x4(%esp),%eax
		mov    %ecx,0x18(%edx)
		shl    $0x3,%eax
		shl    $0x8,%ebx
		mov    %ax,0x2c(%edx)
		mov    (%esp),%eax
		mov    %ebx,0x20(%edx)
		add    %eax,%eax
		shl    $0x8,%edi
		mov    %ax,0x2e(%edx)
		shl    $0x3,%esi
		mov    0x14(%edx),%eax
		mov    %edi,0x1c(%edx)
		sar    $0x10,%eax
		mov    %si,0x30(%edx)
		call   ac_add_node_sthing
		movb   $0x11,0x9(%edx)
		movw   $0x5,0x14(%edx)
		movw   $0x14,0x28(%edx)
		xor    %ah,%ah
		movl   $0x4,0xc(%edx)
		mov    EXPORT_SYMBOL(colour_lookup)+2,%al
		mov    %ax,0x12(%edx)
	jump_c87d8:
		mov    %edx,%eax
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_spark)	/* 0x0C87E4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		sub    $0x8,%esp
		mov    %eax,%esi
		mov    0x28(%eax),%ax
		movswl %ax,%edx
		dec    %eax
		mov    %ax,0x28(%esi)
		test   %edx,%edx
		je     jump_c8818
		mov    0x20(%esi),%eax
		sar    $0x8,%eax
		movswl %ax,%edx
		mov    0x18(%esi),%eax
		sar    $0x8,%eax
		cwtl
		call   ac_alt_at_point
		cmp    0x1c(%esi),%eax
		jle    jump_c883d
	jump_c8818:
		mov    EXPORT_SYMBOL(sthings),%edi
		mov    %esi,%edx
		sub    %edi,%edx
		mov    $0x3c,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		cwtl
		call   ac_remove_sthing
		mov    %esi,%eax
		call   ac_delete_snode
		jmp    jump_c889b
	jump_c883d:
		mov    0x2a(%esi),%eax
		mov    0x18(%esi),%edx
		sar    $0x10,%eax
		add    %eax,%edx
		mov    %edx,(%esp)
		mov    0x2e(%esi),%eax
		mov    0x20(%esi),%edx
		sar    $0x10,%eax
		mov    0x2c(%esi),%ebx
		add    %eax,%edx
		mov    0x1c(%esi),%ecx
		mov    %edx,0x4(%esp)
		mov    0x18(%esi),%eax
		sar    $0x8,%eax
		sar    $0x10,%ebx
		mov    %ax,0x32(%esi)
		add    %ecx,%ebx
		mov    0x1c(%esi),%eax
		lea    0x4(%esp),%ecx
		sar    $0x8,%eax
		mov    0x2e(%esi),%dx
		mov    %ax,0x34(%esi)
		sub    $0x20,%edx
		mov    0x20(%esi),%eax
		mov    %dx,0x2e(%esi)
		sar    $0x8,%eax
		mov    %esp,%edx
		mov    %ax,0x36(%esi)
		mov    %esi,%eax
		call   move_smapwho
	jump_c889b:
		add    $0x8,%esp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_init_laser)	/* 0x0C88A4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x14,%esp
		mov    %eax,%edi
		mov    %edx,0xc(%esp)
		xor    %edx,%edx
		call   ac_get_new_thing
		mov    %edx,0x10(%esp)
		mov    %eax,%edx
		test   %ax,%ax
		je     jump_c8c56
		and    $0xffff,%eax
		lea    0x0(,%eax,4),%esi
		add    %eax,%esi
		shl    $0x2,%esi
		add    %eax,%esi
		mov    things,%eax
		shl    $0x3,%esi
		add    %eax,%esi
		testb  $0x1,0x47(%edi)
		je     jump_c88ff
		mov    0x18(%edi),%eax
		mov    %eax,0x8(%esp)
		mov    0x1c(%edi),%eax
		add    $0x1400,%eax
		mov    0x20(%edi),%ebp
		jmp    jump_c8934
	jump_c88ff:
		xor    %eax,%eax
		mov    0x57(%edi),%al
		mov    0x18(%edi),%ecx
		mov    data_15335a(,%eax,4),%ebx
		mov    EXPORT_SYMBOL(angle_direction)(,%eax,4),%eax
		mov    0x20(%edi),%ebp
		sar    $0x10,%eax
		sar    $0x10,%ebx
		shl    $0x7,%eax
		shl    $0x7,%ebx
		add    %eax,%ebp
		mov    0x1c(%edi),%eax
		add    %ebx,%ecx
		add    $0x1400,%eax
		mov    %ecx,0x8(%esp)
	jump_c8934:
		mov    %eax,0x4(%esp)
		mov    0x57(%edi),%al
		mov    %al,0x57(%esi)
		mov    0x8(%esp),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jl     jump_c8960
		cmp    $0x80,%eax
		jge    jump_c8960
		mov    %ebp,%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jl     jump_c8960
		cmp    $0x80,%eax
		jl     jump_c896f
	jump_c8960:
		xor    %eax,%eax
		mov    %dx,%ax
		call   ac_remove_thing
		jmp    jump_c8c56
	jump_c896f:
		testb  $0x20,0xf(%edi)
		je     jump_c8990
		mov    0x2c(%edi),%eax
		mov    %eax,0x2c(%esi)
		mov    0x30(%edi),%eax
		mov    %eax,0x30(%esi)
		mov    0x34(%edi),%eax
		mov    %eax,0x34(%esi)
		andb   $0xdf,0xf(%edi)
		jmp    jump_c8a2d
	jump_c8990:
		mov    0x40(%edi),%ebx
		test   %ebx,%ebx
		je     jump_c89c8
		mov    0x18(%ebx),%eax
		sar    $0x8,%eax
		mov    %eax,0x2c(%esi)
		mov    0x40(%edi),%eax
		mov    0x1c(%eax),%eax
		sar    $0x8,%eax
		add    $0xa,%eax
		mov    %eax,0x30(%esi)
		mov    0x40(%edi),%eax
		mov    0x20(%eax),%eax
		sar    $0x8,%eax
		mov    %eax,0x34(%esi)
		mov    0x40(%edi),%eax
		mov    0x16(%eax),%ax
		mov    %eax,0x10(%esp)
		jmp    jump_c8a2d
	jump_c89c8:
		testb  $0x10,0xd(%edi)
		jne    jump_c89e1
		xor    %eax,%eax
		mov    %dx,%ax
		call   ac_remove_thing
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_c89e1:
		xor    %eax,%eax
		mov    0x57(%edi),%al
		mov    data_15335a(,%eax,4),%ebx
		xor    %eax,%eax
		sar    $0x10,%ebx
		mov    EXPORT_SYMBOL(weapon_defs)+75,%ax # sizeof(struct WeaponDef) * 3
		imul   %eax,%ebx
		mov    0x8(%esp),%edx
		sar    $0x8,%edx
		add    %ebx,%edx
		mov    %edx,0x2c(%esi)
		mov    0x4(%esp),%edx
		sar    $0x8,%edx
		mov    %edx,0x30(%esi)
		xor    %edx,%edx
		mov    0x57(%edi),%dl
		mov    EXPORT_SYMBOL(angle_direction)(,%edx,4),%edx
		sar    $0x10,%edx
		imul   %edx,%eax
		mov    %ebp,%edx
		sar    $0x8,%edx
		add    %eax,%edx
		mov    %edx,0x34(%esi)
	jump_c8a2d:
		mov    0x8(%esp),%eax
		mov    $0xa8,%ebx
		mov    things,%ecx
		mov    %edi,%edx
		mov    %eax,0x18(%esi)
		mov    0x4(%esp),%eax
		sub    %ecx,%edx
		mov    %eax,0x1c(%esi)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		movw   $0x32,0x14(%esi)
		push   %esi
		mov    %ebp,0x20(%esi)
		mov    0x8(%esp),%edx
		mov    %ax,0x3c(%esi)
		lea    0x34(%esi),%eax
		mov    %ebp,%ebx
		push   %eax
		lea    0x30(%esi),%eax
		sar    $0x8,%ebx
		push   %eax
		mov    0x14(%esp),%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		lea    0x2c(%esi),%ecx
		call   ac_laser_hit_at
		xor    %edx,%edx
		mov    0xc(%esp),%dx
		cmp    $0xf,%edx
		jle    jump_c8a96
		movl   $0xf,0xc(%esp)
	jump_c8a96:
		xor    %edx,%edx
		mov    0xc(%esp),%dx
		cmp    $0x5,%edx
		jge    jump_c8aaa
		movl   $0x5,0xc(%esp)
	jump_c8aaa:
		xor    %ebx,%ebx
		xor    %edx,%edx
		mov    0xc(%esp),%bx
		mov    EXPORT_SYMBOL(weapon_defs)+77,%dx # sizeof(struct WeaponDef) * 3 + 2
		sub    $0x5,%ebx
		imul   %edx,%ebx
		sar    $0x3,%ebx
		add    %ebx,%edx
		mov    0x8(%esp),%ebx
		sar    $0x8,%ebx
		mov    0x4(%esp),%ecx
		mov    %ebx,(%esp)
		mov    %ebp,%ebx
		sar    $0x8,%ecx
		sar    $0x8,%ebx
		test   %eax,%eax
		jle    jump_c8b85
		test   $0x20000000,%eax
		jne    jump_c8c1a
		test   $0x40000000,%eax
		je     jump_c8b40
		push   $0x4
		push   %edi
		mov    0x34(%esi),%edi
		sub    %ebx,%edi
		movswl %di,%ebx
		push   %ebx
		mov    0x30(%esi),%ebx
		sub    %ecx,%ebx
		mov    0xc(%esp),%edi
		movswl %bx,%ecx
		mov    0x2c(%esi),%ebx
		sub    %edi,%ebx
		movswl %dx,%edi
		mov    %eax,%edx
		and    $0xbfffffff,%edx
		neg    %edx
		mov    %edx,%eax
		shl    $0x4,%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(sthings),%edx
		shl    $0x2,%eax
		movswl %bx,%ebx
		add    %edx,%eax
		mov    %edi,%edx
		call   ac_person_hit_by_bullet
		jmp    jump_c8c1a
	jump_c8b40:
		push   $0x4
		push   %edi
		mov    0x34(%esi),%edi
		sub    %ebx,%edi
		mov    0x8(%esp),%ebp
		movswl %di,%ebx
		movswl %dx,%edx
		push   %ebx
		lea    0x0(,%eax,4),%edi
		mov    0x30(%esi),%ebx
		add    %eax,%edi
		sub    %ecx,%ebx
		shl    $0x2,%edi
		movswl %bx,%ecx
		add    %eax,%edi
		mov    things,%eax
		mov    0x2c(%esi),%ebx
		shl    $0x3,%edi
		sub    %ebp,%ebx
		add    %edi,%eax
		movswl %bx,%ebx
		call   ac_person_hit_by_bullet
		jmp    jump_c8c1a
	jump_c8b85:
		jge    jump_c8bba
		testb  $0x1,0x47(%edi)
		jne    jump_c8c1a
		push   $0x4
		mov    0x10(%esp),%edx
		neg    %eax
		shl    $0x2,%edx
		mov    0x34(%esi),%ebx
		movswl %dx,%edx
		movswl %ax,%ecx
		push   %edx
		mov    0x2c(%esi),%eax
		mov    0x30(%esi),%edx
		call   ac_bul_hit_vector
		orb    $0x40,0x80(%edi)
		jmp    jump_c8c1a
	jump_c8bba:
		cmpw   $0x0,0x10(%esp)
		je     jump_c8c0b
		push   $0x4
		push   %edi
		mov    0x34(%esi),%edi
		sub    %ebx,%edi
		movswl %di,%ebx
		push   %ebx
		mov    0x30(%esi),%ebx
		xor    %eax,%eax
		sub    %ecx,%ebx
		mov    0xc(%esp),%edi
		movswl %bx,%ecx
		mov    0x2c(%esi),%ebx
		mov    0x1c(%esp),%ax
		sub    %edi,%ebx
		lea    0x0(,%eax,4),%edi
		add    %eax,%edi
		shl    $0x2,%edi
		movswl %dx,%edx
		add    %eax,%edi
		mov    things,%eax
		shl    $0x3,%edi
		movswl %bx,%ebx
		add    %edi,%eax
		call   ac_person_hit_by_bullet
		jmp    jump_c8c1a
	jump_c8c0b:
		testb  $0x1,0x47(%edi)
		je     jump_c8c1a
		mov    0x1c(%esi),%eax
		sar    $0x8,%eax
		mov    %eax,0x30(%esi)
	jump_c8c1a:
		mov    0xc(%esp),%eax
		movl   $0x4,0xc(%esi)
		mov    %ax,0x2a(%esi)
		mov    %ax,0x28(%esi)
		xor    %eax,%eax
		mov    0x16(%esi),%ax
		movb   $0xb,0x9(%esi)
		call   ac_add_node_thing
		testb  $0x1,data_1dd8f8
		je     jump_c8c52
		orb    $0x10,0xd(%esi)
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_c8c52:
		andb   $0xef,0xd(%esi)
	jump_c8c56:
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_laser)	/* 0x0C8D2C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		mov    %eax,%ebx
		decw   0x28(%eax)
		mov    0x26(%eax),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_c8d6a
		mov    things,%ecx
		mov    %ebx,%edx
		sub    %ecx,%edx
		mov    $0xa8,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		and    $0xffff,%eax
		call   ac_remove_thing
		mov    %ebx,%eax
		call   ac_delete_node
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_c8d6a:
		mov    0x34(%ebx),%eax
		mov    0x30(%ebx),%edx
		mov    0x2c(%ebx),%ecx
		mov    %eax,%ebx
		mov    %ecx,%eax
		call   init_spark
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_laser_guided)	/* 0x0C8D80 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		mov    %eax,%esi
		movw   $0x40,0x8(%esp)
		mov    0x40(%eax),%edx
		test   %edx,%edx
		jne    jump_c8dc3
		mov    %eax,%edx
		sub    things,%edx
		mov    $0xa8,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		and    $0xffff,%eax
		call   ac_remove_thing
		mov    %esi,%eax
		call   ac_delete_node
		jmp    jump_c8f19
	jump_c8dc3:
		mov    %edx,%edi
		mov    0x18(%eax),%edx
		sub    0x18(%edi),%edx
		sar    $0x8,%edx
		imul   %edx,%edx
		mov    0x20(%edi),%ecx
		mov    0x20(%eax),%eax
		sub    %ecx,%eax
		sar    $0x8,%eax
		imul   %eax,%eax
		lea    (%edx,%eax,1),%ebp
		cmp    $0x4000,%ebp
		jge    jump_c8e3b
		xor    %edx,%edx
		mov    0x3c(%esi),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		push   $0x3
		add    %edx,%eax
		push   %eax
		mov    0x5e(%esi),%eax
		sar    $0x10,%eax
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%eax,4),%edx
		xor    %ecx,%ecx
		sar    $0x5,%edx
		mov    EXPORT_SYMBOL(lbSinTable)(,%eax,4),%eax
		movswl %dx,%edx
		sar    $0x5,%eax
		push   %edx
		movswl %ax,%ebx
		mov    $0x3e8,%edx
		mov    %edi,%eax
		call   ac_person_hit_by_bullet
	jump_c8e3b:
		decw   0x28(%esi)
		mov    0x26(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		je     jump_c8e51
		cmp    $0x4000,%ebp
		jge    jump_c8e82
	jump_c8e51:
		mov    things,%ebp
		mov    %esi,%edx
		sub    %ebp,%edx
		mov    $0xa8,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		and    $0xffff,%eax
		call   ac_remove_thing
		mov    %esi,%eax
		call   ac_delete_node
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_c8e82:
		mov    0x40(%esi),%eax
		mov    0x20(%esi),%edi
		mov    0x18(%esi),%edx
		sar    $0x8,%edi
		mov    0x20(%eax),%ebx
		mov    0x18(%eax),%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		sar    $0x8,%ebx
		sub    %edx,%eax
		mov    %ebx,%edx
		sub    %edi,%edx
		neg    %edx
		lea    0x8(%esp),%ebx
		call   ac_arctan
		mov    0x5e(%esi),%edx
		cwtl
		sar    $0x10,%edx
		call   calc_angle_rate
		add    0x60(%esi),%ax
		add    $0x8,%ah
		and    $0x7,%ah
		mov    %ax,0x60(%esi)
		mov    0x5e(%esi),%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,4),%edx
		mov    0x6(%esp),%eax
		mov    EXPORT_SYMBOL(lbSinTable)(%edx),%edx
		sar    $0x10,%eax
		imul   %eax,%edx
		mov    0x18(%esi),%ebx
		sar    $0x8,%edx
		add    %edx,%ebx
		mov    %ebx,(%esp)
		mov    0x5e(%esi),%edx
		sar    $0x10,%edx
		imul   EXPORT_SYMBOL(lbSinTable)+2048(,%edx,4),%eax
		mov    0x20(%esi),%edx
		sar    $0x8,%eax
		add    %eax,%edx
		mov    %edx,0x4(%esp)
		mov    %edx,%ecx
		mov    %esi,%eax
		mov    (%esp),%edx
		mov    0x1c(%esi),%ebx
		call   ac_move_mapwho
	jump_c8f19:
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_laser_elec)	/* 0x0C8F78 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		mov    %eax,%ecx
		decw   0x28(%eax)
		mov    0x26(%eax),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_c8fb8
		mov    things,%esi
		mov    %ecx,%edx
		sub    %esi,%edx
		mov    $0xa8,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		and    $0xffff,%eax
		call   ac_remove_thing
		mov    %ecx,%eax
		call   ac_delete_node
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_c8fb8:
		xor    %eax,%eax
		mov    0xa(%ecx),%ax
		test   %eax,%eax
		je     jump_c8fcb
		testb  $0x7,gameturn
		jne    jump_c8fe9
	jump_c8fcb:
		mov    0x34(%ecx),%ebx
		mov    0x30(%ecx),%edx
		mov    0x2c(%ecx),%eax
		call   init_spark
		test   %eax,%eax
		je     jump_c8fe9
		xor    %dh,%dh
		mov    EXPORT_SYMBOL(colour_lookup)+4,%dl
		mov    %dx,0x12(%eax)
	jump_c8fe9:
		cmpw   $0x0,0xa(%ecx)
		je     jump_c904a
		mov    0x26(%ecx),%eax
		sar    $0x10,%eax
		cmp    $0xa,%eax
		jle    jump_c904a
		mov    0x62(%ecx),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    0x64(%ecx),%edx
		sar    $0x10,%edx
		imul   %eax,%edx
		sar    $0x6,%edx
		mov    $0x14,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		sub    %eax,0x2c(%ecx)
		mov    0x66(%ecx),%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    0x64(%ecx),%edx
		sar    $0x10,%edx
		imul   %eax,%edx
		sar    $0x6,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		sub    %eax,0x34(%ecx)
	jump_c904a:
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		mov    %eax,%eax


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_razor_wire)	/* 0x0C9050 */
/*----------------------------------------------------------------*/
		ret


/*----------------------------------------------------------------*/
recalc_rocket_direction:	/* 0x0C9054 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		mov    %eax,%ebx
		mov    0x40(%eax),%eax
		mov    0x18(%ebx),%ecx
		mov    0x1c(%ebx),%edi
		mov    0x18(%eax),%esi
		mov    0x1c(%eax),%edx
		sub    %ecx,%esi
		sub    %edi,%edx
		sar    $0x8,%esi
		mov    %edx,%edi
		mov    %esi,%edx
		imul   %esi,%edx
		mov    0x20(%ebx),%ebp
		mov    0x20(%eax),%ecx
		sub    %ebp,%ecx
		sar    $0x8,%ecx
		mov    %ecx,%eax
		imul   %ecx,%eax
		add    %edx,%eax
		sar    $0x8,%edi
		call   ac_LbSqrL
		mov    %eax,%ebp
		test   %eax,%eax
		jne    jump_c909e
		mov    $0x1,%ebp
	jump_c909e:
		mov    %esi,%edx
		shl    $0x8,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebp
		mov    %edi,%edx
		shl    $0x8,%edx
		mov    %eax,%esi
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebp
		mov    %ecx,%edx
		shl    $0x8,%edx
		mov    %eax,%edi
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebp
		mov    0x30(%ebx),%edx
		imul   %edi,%edx
		mov    %eax,%ecx
		mov    0x2c(%ebx),%eax
		imul   %esi,%eax
		mov    0x34(%ebx),%ebp
		add    %eax,%edx
		mov    %ebp,%eax
		imul   %ecx,%eax
		add    %edx,%eax
		test   %eax,%eax
		jge    jump_c90e8
		xor    %eax,%eax
		jmp    jump_c90f6
	jump_c90e8:
		mov    %esi,0x2c(%ebx)
		mov    %edi,0x30(%ebx)
		mov    $0x1,%eax
		mov    %ecx,0x34(%ebx)
	jump_c90f6:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_rocket)	/* 0x0C9100 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x28,%esp
		mov    %eax,%esi
		mov    0x28(%esi),%dx
		dec    %edx
		xor    %ah,%ah
		mov    %dx,0x28(%esi)
		mov    %ah,0x24(%esp)
		mov    0x26(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_c9137
		mov    $0x18,%edx
		mov    0x16(%esi),%ax
		call   ac_stop_sample_using_heap
		jmp    jump_c9480
	jump_c9137:
		/* Tanks bug WA:
		 * It happens sometimes that the pointer at 0x40(%esi) not valid, even though
		 * is is non-zero. But is it a pointer to a thing, so we can be more strict
		 * in checking it, by making sure it is within the allocation range of things.
		 */
		mov    things,%eax
		cmpl   %eax,0x40(%esi)
		jl     jump_c9194
		add    $168000,%eax
		cmpl   %eax,0x40(%esi)
		jge    jump_c9194
		xor    %edx,%edx
		mov    0x3c(%esi),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		mov    0x40(%esi),%ebx
		add    %edx,%eax
		mov    things,%edx
		mov    0x51(%ebx),%bl
		mov    0x51(%edx,%eax,8),%al
		cmp    %bl,%al
		je     jump_c918d
		and    $0x7f,%al
		xor    %edx,%edx
		mov    %al,%dl
		lea    0x0(,%edx,4),%eax
		mov    %bl,%cl
		add    %eax,%edx
		and    $0x7f,%cl
		shl    $0x3,%edx
		mov    $0x1,%eax
		mov    war_flags__Truce(%edx),%ebx
		shl    %cl,%eax
		test   %ebx,%eax
		je     jump_c9194
	jump_c918d:
		movl   $0x0,0x40(%esi)
	jump_c9194:
		/* Tanks bug WA:
		 * We just conditionally zeroed 0x40(%esi). We need to check it again.
		 */
		mov    things,%eax
		cmpl   %eax,0x40(%esi)
		jl     jump_c91ac
		add    $168000,%eax
		cmpl   %eax,0x40(%esi)
		jge    jump_c91ac
		mov    0x40(%esi),%eax
		mov    0xa(%eax),%ax
		and    $0xffff,%eax
		cmp    $0x24,%eax
		jne    jump_c91ac
		movl   $0x0,0x40(%esi)
	jump_c91ac:
		xor    %eax,%eax
		mov    0x8(%esi),%al
		cmp    $0x1,%eax
		jne    jump_c91ec
		cmpl   $0x0,0x40(%esi)
		je     jump_c91ec
		xor    %eax,%eax
		mov    gameturn,%edi
		mov    0x16(%esi),%ax
		add    %edi,%eax
		test   $0x1,%al
		jne    jump_c91ec
		mov    %esi,%eax
		call   recalc_rocket_direction
		test   %eax,%eax
		jne    jump_c91ec
		mov    $0x18,%edx
		mov    0x16(%esi),%ax
		call   ac_stop_sample_using_heap
		jmp    jump_c9480
	jump_c91ec:
		mov    0x36(%esi),%eax
		mov    0x2c(%esi),%edx
		sar    $0x10,%eax
		imul   %edx,%eax
		sar    $0x2,%eax
		mov    0x18(%esi),%edx
		add    %eax,%edx
		mov    %edx,(%esp)
		mov    0x36(%esi),%eax
		mov    0x30(%esi),%edx
		sar    $0x10,%eax
		imul   %eax,%edx
		imul   0x34(%esi),%eax
		mov    0x1c(%esi),%edi
		sar    $0x2,%edx
		add    %edx,%edi
		mov    0x20(%esi),%edx
		sar    $0x2,%eax
		add    %eax,%edx
		mov    (%esp),%eax
		sar    $0x10,%eax
		mov    %edx,0x4(%esp)
		test   %eax,%eax
		jl     jump_c9248
		cmp    $0x80,%eax
		jge    jump_c9248
		mov    %edx,%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jl     jump_c9248
		cmp    $0x80,%eax
		jl     jump_c925d
	jump_c9248:
		xor    %eax,%eax
		mov    $0x18,%edx
		mov    0x16(%esi),%ax
		call   ac_stop_sample_using_heap
		jmp    jump_c9480
	jump_c925d:
		mov    %edx,%eax
		sar    $0x8,%eax
		movswl %ax,%edx
		mov    (%esp),%eax
		sar    $0x8,%eax
		cwtl
		call   ac_alt_at_point
		mov    %eax,%ebp
		mov    %edi,%edx
		sar    $0x8,%ebp
		sar    $0x5,%edx
		lea    0x0(,%ebp,8),%eax
		add    $0x19,%edx
		add    $0x50,%eax
		cmp    %eax,%edx
		jge    jump_c92cf
		mov    0x4(%esp),%eax
		mov    (%esp),%edx
		sar    $0x10,%eax
		sar    $0x10,%edx
		shl    $0x7,%eax
		add    %eax,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		testb  $0x5,0xf(%edx,%eax,2)
		je     jump_c92cf
		mov    $0x1,%dh
		xor    %eax,%eax
		mov    %dh,0x24(%esp)
		mov    0x16(%esi),%ax
		mov    $0x18,%edx
		call   ac_stop_sample_using_heap
		jmp    jump_c9480
	jump_c92cf:
		mov    %edi,%edx
		lea    0x0(,%ebp,8),%eax
		sar    $0x5,%edx
		add    $0x50,%eax
		cmp    %eax,%edx
		jge    jump_c92ed
		mov    %ebp,%edi
		shl    $0x8,%edi
		add    $0xa00,%edi
	jump_c92ed:
		mov    0x4(%esp),%ebx
		mov    (%esp),%eax
		mov    %edi,%edx
		sar    $0x8,%ebx
		sar    $0x8,%edx
		sar    $0x8,%eax
		add    $0x8,%edx
		call   ac_check_col_collision
		mov    %eax,%ecx
		test   %ax,%ax
		jne    jump_c9374
		testb  $0x20,0xf(%esi)
		jne    jump_c931e
		xor    %eax,%eax
		mov    0x8(%esi),%al
		cmp    $0x1,%eax
		jne    jump_c9374
	jump_c931e:
		mov    0x18(%esi),%eax
		mov    0x62(%esi),%edx
		sar    $0x8,%eax
		sar    $0x10,%edx
		sub    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebx
		mov    0x20(%esi),%eax
		sar    $0x8,%eax
		mov    %eax,0xc(%esp)
		mov    0x66(%esi),%eax
		mov    0xc(%esp),%edx
		sar    $0x10,%eax
		sub    %eax,%edx
		mov    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%ebx
		jle    jump_c9358
		sar    %eax
		jmp    jump_c935a
	jump_c9358:
		sar    %ebx
	jump_c935a:
		add    %ebx,%eax
		cmp    $0x80,%eax
		jge    jump_c9374
		mov    0xf(%esi),%al
		mov    $0xffffffff,%ecx
		test   $0x20,%al
		je     jump_c9374
		movb   $0x1,0x24(%esp)
	jump_c9374:
		test   %cx,%cx
		je     jump_c938e
		xor    %eax,%eax
		mov    $0x18,%edx
		mov    0x16(%esi),%ax
		call   ac_stop_sample_using_heap
		jmp    jump_c9480
	jump_c938e:
		mov    (%esp),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jl     jump_c99be
		cmp    $0x80,%eax
		jge    jump_c99be
		mov    0x4(%esp),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jl     jump_c99be
		cmp    $0x80,%eax
		jge    jump_c99be
		mov    0x4(%esp),%ecx
		mov    (%esp),%edx
		mov    %edi,%ebx
		mov    %esi,%eax
		call   ac_move_mapwho
		mov    0x40(%esi),%ecx
		test   %ecx,%ecx
		je     jump_c95d7
		mov    0xc(%ecx),%dl
		mov    %ecx,%ebx
		test   $0x2,%dl
		jne    jump_c9522
		xor    %edx,%edx
		mov    0x3c(%esi),%dx
		lea    0x0(,%edx,4),%eax
		push   $0x0
		add    %edx,%eax
		mov    0x20(%esi),%ebx
		shl    $0x2,%eax
		xor    %ecx,%ecx
		add    %eax,%edx
		mov    things,%eax
		shl    $0x3,%edx
		push   $0x1
		add    %edx,%eax
		mov    0x14(%esi),%cx
		push   %eax
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		call   ac_check_for_radius_hit_person
		mov    %eax,%edi
		test   %eax,%eax
		je     jump_c95d7
		xor    %eax,%eax
		mov    $0x18,%edx
		mov    0x16(%esi),%ax
		call   ac_stop_sample_using_heap
		xor    %edx,%edx
		mov    0x3c(%esi),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		push   $0x6
		shl    $0x2,%eax
		mov    0x2e(%esi),%ecx
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		mov    0x2a(%esi),%ebx
		add    %edx,%eax
		sar    $0x10,%ecx
		push   %eax
		mov    0x32(%esi),%eax
		sar    $0x10,%ebx
		sar    $0x10,%eax
		mov    EXPORT_SYMBOL(weapon_defs)+125,%edx # sizeof(struct WeaponDef) * 5
		push   %eax
		sar    $0x10,%edx
		mov    %edi,%eax
		call   ac_person_hit_by_bullet
	jump_c9480:
		cmpb   $0x0,0x24(%esp)
		je     jump_c98d2
		mov    0x20(%esi),%eax
		mov    0x18(%esi),%edx
		sar    $0x10,%eax
		sar    $0x10,%edx
		shl    $0x7,%eax
		add    %eax,%edx
		lea    0x0(,%edx,8),%eax
		add    %eax,%edx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %edx,%edx
		mov    (%edx,%eax,1),%ax
		and    $0x3f,%ah
		cwtl
		call   sea_texture
		test   %eax,%eax
		je     jump_c98d2
		push   $0x8
		mov    $0x43f,%ecx
		mov    %ebp,%edx
		mov    0x20(%esi),%ebx
		mov    0x18(%esi),%eax
		sar    $0x8,%ebx
		sar    $0x8,%eax
		call   create_scale_effect
		mov    %eax,%edx
		test   %eax,%eax
		je     jump_c9513
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		push   $0x0
		and    $0x7f,%al
		movb   $0x3c,0x8(%edx)
		add    $0x3e,%eax
		mov    $0x3,%ecx
		mov    %ax,0x12(%edx)
		push   $0x0
		mov    0x20(%esi),%ebx
		mov    0x18(%esi),%eax
		xor    %edx,%edx
		sar    $0x8,%ebx
		sar    $0x8,%eax
		call   ac_create_sound_effect
	jump_c9513:
		mov    things,%edi
		mov    %esi,%edx
		sub    %edi,%edx
		jmp    jump_c99a1
	jump_c9522:
		mov    0x1c(%ecx),%eax
		sub    0x1c(%esi),%eax
		sar    $0x8,%eax
		mov    %ecx,%edi
		cmp    $0x19,%eax
		jge    jump_c95d7
		cmp    $0xffffffe7,%eax
		jle    jump_c95d7
		mov    0x18(%ecx),%eax
		sub    0x18(%esi),%eax
		sar    $0x8,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ecx
		mov    0x20(%esi),%edx
		mov    0x20(%ebx),%eax
		sub    %edx,%eax
		sar    $0x8,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%ecx
		jle    jump_c9567
		sar    %eax
		jmp    jump_c9569
	jump_c9567:
		sar    %ecx
	jump_c9569:
		add    %ecx,%eax
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    0x14(%edi),%dx
		mov    0x14(%esi),%bx
		add    %ebx,%edx
		cmp    %edx,%eax
		jge    jump_c95d7
		xor    %eax,%eax
		mov    $0x18,%edx
		mov    0x16(%esi),%ax
		call   ac_stop_sample_using_heap
		xor    %edx,%edx
		mov    0x3c(%esi),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		push   $0x6
		shl    $0x2,%eax
		mov    0x2e(%esi),%ecx
		add    %eax,%edx
		mov    things,%eax
		shl    $0x3,%edx
		mov    0x2a(%esi),%ebx
		add    %edx,%eax
		sar    $0x10,%ecx
		push   %eax
		mov    0x32(%esi),%eax
		sar    $0x10,%ebx
		sar    $0x10,%eax
		mov    EXPORT_SYMBOL(weapon_defs)+125,%edx # sizeof(struct WeaponDef) * 5
		push   %eax
		sar    $0x10,%edx
		mov    0x40(%esi),%eax
		call   ac_person_hit_by_bullet
		jmp    jump_c9480
	jump_c95d7:
		mov    0x34(%esi),%eax
		mov    $0x100,%edi
		mov    %eax,%ebx
		mov    %eax,0x10(%esp)
		neg    %ebx
		mov    0x2c(%esi),%eax
		mov    %ebx,0x10(%esp)
		mov    %eax,0x18(%esp)
		jmp    jump_c9893
	jump_c95f7:
		movl   $0x44d,0x20(%esp)
	jump_c95ff:
		push   $0x20
		mov    0x18(%esp),%ebx
		mov    0x20(%esp),%eax
		xor    %ecx,%ecx
		mov    0x1c(%esi),%edx
		mov    0x24(%esp),%cx
		sar    $0x8,%edx
		call   create_scale_effect
		mov    %eax,%edx
		test   %eax,%eax
		je     jump_c9741
		mov    %edi,%eax
		and    $0x7ff,%eax
		mov    0x10(%esp),%ebx
		imul   EXPORT_SYMBOL(lbSinTable)+2048(,%eax,4),%ebx
		mov    0x18(%esp),%ecx
		imul   EXPORT_SYMBOL(lbSinTable)+2048(,%eax,4),%ecx
		mov    %ecx,%eax
		sar    $0xf,%eax
		mov    %eax,0x8(%esp)
		call   ac_LbRandomAnyShort
		mov    0x28(%edx),%cx
		xor    %ah,%ah
		movb   $0x31,0x8(%edx)
		and    $0x7,%al
		movw   $0x100,0x12(%edx)
		sub    $0x4,%eax
		movw   $0x0,0x26(%edx)
		add    %eax,%ecx
		mov    %cx,0x28(%edx)
		mov    0x36(%esi),%eax
		mov    0x2c(%esi),%ecx
		sar    $0x10,%eax
		imul   %ecx,%eax
		sar    $0xf,%ebx
		sar    $0x5,%eax
		add    %ebx,%eax
		mov    %eax,0xc(%esp)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x1f,%al
		and    $0xffff,%eax
		shl    $0x4,%eax
		mov    0xc(%esp),%ecx
		sub    $0x100,%eax
		add    %ecx,%eax
		mov    %ax,0x2c(%edx)
		mov    0x36(%esi),%eax
		mov    0x30(%esi),%ecx
		sar    $0x10,%eax
		imul   %ecx,%eax
		sar    $0x5,%eax
		add    %ebp,%eax
		mov    %eax,0xc(%esp)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x1f,%al
		and    $0xffff,%eax
		mov    0xc(%esp),%ecx
		sub    $0x10,%eax
		add    %ecx,%eax
		mov    %ax,0x2e(%edx)
		mov    0x36(%esi),%eax
		mov    0x34(%esi),%ecx
		sar    $0x10,%eax
		imul   %ecx,%eax
		mov    0x8(%esp),%ecx
		sar    $0x5,%eax
		add    %eax,%ecx
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		mov    %ecx,0xc(%esp)
		and    $0x1f,%al
		sar    $0x3,%ebx
		mov    %eax,%ecx
		neg    %ebx
		mov    0xc(%esp),%eax
		mov    %bx,0x32(%edx)
		mov    %ebp,%ebx
		and    $0xffff,%ecx
		sar    $0x3,%ebx
		shl    $0x4,%ecx
		neg    %ebx
		sub    $0x100,%ecx
		mov    %bx,0x34(%edx)
		mov    0x8(%esp),%ebx
		add    %eax,%ecx
		sar    $0x3,%ebx
		mov    %cx,0x30(%edx)
		neg    %ebx
		mov    %bx,0x36(%edx)
		mov    0x3c(%esi),%ax
		mov    %ax,0x38(%edx)
	jump_c9741:
		push   $0x20
		mov    0x24(%esp),%eax
		mov    0x18(%esp),%ebx
		mov    0x1c(%esi),%edx
		xor    %ecx,%ecx
		dec    %eax
		sar    $0x8,%edx
		mov    %ax,%cx
		mov    0x20(%esp),%eax
		call   create_scale_effect
		mov    %eax,%edx
		test   %eax,%eax
		je     jump_c9881
		mov    %edi,%eax
		and    $0x7ff,%eax
		mov    0x10(%esp),%ebx
		imul   EXPORT_SYMBOL(lbSinTable)+2048(,%eax,4),%ebx
		mov    0x18(%esp),%ecx
		imul   EXPORT_SYMBOL(lbSinTable)+2048(,%eax,4),%ecx
		mov    %ecx,%eax
		sar    $0x10,%eax
		mov    %eax,0x8(%esp)
		call   ac_LbRandomAnyShort
		mov    0x28(%edx),%cx
		xor    %ah,%ah
		movb   $0x31,0x8(%edx)
		and    $0x7,%al
		movw   $0x100,0x12(%edx)
		sub    $0x4,%eax
		movw   $0x0,0x26(%edx)
		add    %eax,%ecx
		mov    %cx,0x28(%edx)
		mov    0x36(%esi),%eax
		mov    0x2c(%esi),%ecx
		sar    $0x10,%eax
		imul   %ecx,%eax
		sar    $0x10,%ebx
		sar    $0x5,%eax
		add    %ebx,%eax
		mov    %eax,0xc(%esp)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		xor    %ecx,%ecx
		and    $0x1f,%al
		mov    %ax,%cx
		shl    $0x4,%ecx
		mov    0xc(%esp),%eax
		sub    $0x100,%ecx
		add    %eax,%ecx
		mov    %cx,0x2c(%edx)
		mov    0x36(%esi),%ecx
		mov    0x30(%esi),%eax
		sar    $0x10,%ecx
		imul   %eax,%ecx
		sar    %ebp
		call   ac_LbRandomAnyShort
		sar    $0x5,%ecx
		xor    %ah,%ah
		add    %ebp,%ecx
		and    $0x1f,%al
		and    $0xffff,%eax
		sub    $0x10,%eax
		add    %ecx,%eax
		mov    %ax,0x2e(%edx)
		mov    0x36(%esi),%eax
		mov    0x34(%esi),%ecx
		sar    $0x10,%eax
		imul   %ecx,%eax
		mov    0x8(%esp),%ecx
		sar    $0x5,%eax
		add    %eax,%ecx
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		mov    %ecx,0xc(%esp)
		and    $0x1f,%al
		sar    $0x3,%ebx
		mov    %eax,%ecx
		neg    %ebx
		mov    0xc(%esp),%eax
		mov    %bx,0x32(%edx)
		mov    %ebp,%ebx
		and    $0xffff,%ecx
		sar    $0x3,%ebx
		shl    $0x4,%ecx
		neg    %ebx
		sub    $0x100,%ecx
		mov    %bx,0x34(%edx)
		mov    0x8(%esp),%ebx
		add    %eax,%ecx
		sar    $0x3,%ebx
		mov    %cx,0x30(%edx)
		neg    %ebx
		mov    %bx,0x36(%edx)
		mov    0x3c(%esi),%ax
		mov    %ax,0x38(%edx)
	jump_c9881:
		add    $0x200,%edi
		cmp    $0x900,%edi
		jge    jump_c99be
	jump_c9893:
		mov    0x18(%esi),%eax
		mov    %edi,%ebp
		sar    $0x8,%eax
		and    $0x7ff,%ebp
		mov    %eax,0x1c(%esp)
		mov    0x20(%esi),%eax
		mov    EXPORT_SYMBOL(lbSinTable)(,%ebp,4),%ebp
		sar    $0x8,%eax
		sar    $0xa,%ebp
		mov    %eax,0x14(%esp)
		cmp    $0x400,%edi
		jle    jump_c95f7
		movl   $0x44f,0x20(%esp)
		jmp    jump_c95ff
	jump_c98d2:
		mov    0x20(%esi),%eax
		sar    $0x8,%eax
		movswl %ax,%edx
		mov    0x18(%esi),%eax
		sar    $0x8,%eax
		cwtl
		call   ac_alt_at_point
		mov    0x1c(%esi),%edx
		sub    %eax,%edx
		mov    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    $0x4e20,%eax
		jge    jump_c9923
		mov    0x20(%esi),%ebx
		mov    %ebx,%eax
		sar    $0x8,%eax
		movswl %ax,%edx
		mov    0x18(%esi),%eax
		sar    $0x8,%eax
		cwtl
		call   ac_alt_at_point
		mov    %eax,%edx
		mov    $0x1,%ecx
		sar    $0x5,%edx
		mov    0x18(%esi),%eax
		call   FIRE_new
	jump_c9923:
		mov    $0x5f,%ecx
		mov    0x20(%esi),%ebx
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		call   ac_bang_new4
		push   $0x0
		mov    $0x25,%ecx
		mov    0x20(%esi),%ebx
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		push   $0x7f
		sar    $0x8,%ebx
		sar    $0x8,%edx
		sar    $0x8,%eax
		call   ac_create_sound_effect
		xor    %edx,%edx
		mov    0x3c(%esi),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		mov    things,%edx
		shl    $0x3,%eax
		mov    $0x300,%ecx
		add    %edx,%eax
		mov    0x20(%esi),%ebx
		push   %eax
		sar    $0x8,%ebx
		mov    0x1c(%esi),%edx
		push   $0x3e8
		mov    0x18(%esi),%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		call   do_shockwave
		mov    things,%ecx
		mov    %esi,%edx
		sub    %ecx,%edx
	jump_c99a1:
		mov    $0xa8,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		and    $0xffff,%eax
		call   ac_remove_thing
		mov    %esi,%eax
		call   ac_delete_node
	jump_c99be:
		add    $0x28,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
process_c_iff:	/* 0x0C99C8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    %eax,%esi
		testb  $0x2,0xc(%eax)
		jne    jump_c9ad0
		mov    0x56(%esi),%eax
		sar    $0x10,%eax
		cmp    $0x3,%eax
		jle    jump_c99ed
		movw   $0x0,0x58(%esi)
	jump_c99ed:
		mov    %esi,%eax
		call   ac_process_weapon
		mov    0x40(%esi),%edx
		test   %edx,%edx
		je     jump_c9ab7
		mov    0x18(%edx),%eax
		mov    0x18(%esi),%edx
		sar    $0x8,%eax
		sar    $0x8,%edx
		sub    %eax,%edx
		mov    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebx
		mov    0x40(%esi),%eax
		mov    0x20(%eax),%edx
		mov    0x20(%esi),%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		sub    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%ebx
		jle    jump_c9a34
		sar    %eax
		jmp    jump_c9a36
	jump_c9a34:
		sar    %ebx
	jump_c9a36:
		add    %eax,%ebx
		mov    %esi,%eax
		call   ac_get_weapon_range
		cmp    %eax,%ebx
		jge    jump_c9aae
		mov    0x18(%esi),%eax
		mov    0x1c(%esi),%edx
		mov    0x20(%esi),%edi
		mov    0x40(%esi),%ebx
		sar    $0x8,%eax
		sar    $0x8,%edx
		sar    $0x8,%edi
		mov    0x18(%ebx),%ecx
		mov    %eax,(%esp)
		mov    0x1c(%ebx),%eax
		mov    0x20(%ebx),%ebx
		sar    $0x8,%ecx
		sar    $0x8,%ebx
		sar    $0x8,%eax
		push   %ebx
		add    $0x14,%eax
		add    $0x14,%edx
		push   %eax
		mov    %edi,%ebx
		mov    0x8(%esp),%eax
		call   mounted_los
		test   %eax,%eax
		je     jump_c9ad0
		orb    $0x8,0xd(%esi)
		testb  $0x10,0xf(%esi)
		je     jump_c9ad0
		mov    0x5c(%esi),%eax
		sar    $0x10,%eax
		lea    0x0(,%eax,4),%esi
		add    %eax,%esi
		shl    $0x2,%esi
		add    %eax,%esi
		mov    things,%eax
		orb    $0x1,0xf(%eax,%esi,8)
		jmp    jump_c9ad0
	jump_c9aae:
		movl   $0x0,0x40(%esi)
		jmp    jump_c9ad0
	jump_c9ab7:
		xor    %eax,%eax
		mov    gameturn,%ebx
		mov    0x16(%esi),%ax
		add    %ebx,%eax
		test   $0x7,%al
		jne    jump_c9ad0
		mov    %esi,%eax
		call   aquire_target
	jump_c9ad0:
		add    $0x4,%esp
	jump_c9ad3:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_mine)	/* 0x0C9ADC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    %eax,%esi
		mov    0x8(%eax),%al
		cmp    $0xd,%al
		jb     jump_c9d41
		jbe    jump_c9afd
		cmp    $0x30,%al
		je     jump_c9bfa
		jmp    jump_c9d49
	jump_c9afd:
		mov    0x30(%esi),%dx
		test   %dx,%dx
		je     jump_c9b0d
		mov    %edx,%ebx
		dec    %ebx
		mov    %bx,0x30(%esi)
	jump_c9b0d:
		mov    0x26(%esi),%eax
		sar    $0x10,%eax
		cmp    $0x3e7,%eax
		je     jump_c9ad3
		cmp    $0x3c,%eax
		jne    jump_c9b3b
		push   $0x1
		push   $0xffffffff
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x26,%edx
		mov    %esi,%eax
		call   ac_play_dist_ssample
	jump_c9b3b:
		testb  $0x4,0xe(%esi)
		je     jump_c9b59
		mov    0x26(%esi),%eax
		sar    $0x10,%eax
		cmp    $0x7,%eax
		jle    jump_c9b59
		cmpw   $0x0,0x30(%esi)
		jne    jump_c9b59
		movw   $0x7,0x28(%esi)
	jump_c9b59:
		decw   0x28(%esi)
		mov    0x26(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jg     jump_c9ad3
		mov    0x14(%esi),%eax
		mov    $0x26,%edx
		sar    $0x10,%eax
		call   ac_stop_sample_using_heap
		mov    0x20(%esi),%ebx
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		sar    $0x8,%ebx
		sar    $0x8,%edx
		sar    $0x8,%eax
		call   init_nuclear_bomb
		mov    %eax,%edi
		test   %eax,%eax
		je     jump_c9bd3
		push   $0x3
		push   $0x0
		mov    $0x40,%ecx
		push   $0x64
		mov    $0x7f,%ebx
		mov    $0x1,%edx
		call   ac_play_dist_ssample
		mov    0x38(%esi),%ax
		movw   $0x14,0x28(%edi)
		mov    %ax,0x38(%edi)
		mov    0xe(%edi),%ax
		movw   $0x0,0x14(%edi)
		and    $0xeff7,%eax
		mov    %ax,0xe(%edi)
	jump_c9bd3:
		mov    0x14(%esi),%eax
		sar    $0x10,%eax
		call   ac_remove_sthing
		mov    ingame__fld_unkCB7,%dx
		dec    %edx
		mov    %esi,%eax
		mov    %dx,ingame__fld_unkCB7
		call   ac_delete_snode
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_c9bfa:
		mov    %esi,%eax
		call   process_c_iff
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_c9c07:
		mov    0x30(%esi),%cx
		test   %cx,%cx
		je     jump_c9c17
		mov    %ecx,%edi
		dec    %edi
		mov    %di,0x30(%esi)
	jump_c9c17:
		mov    0x26(%esi),%eax
		sar    $0x10,%eax
		cmp    $0x3e7,%eax
		je     jump_c9ad3
		test   %eax,%eax
		jle    jump_c9c6c
		xor    %edi,%edi
		mov    0x38(%esi),%di
		lea    0x0(,%edi,4),%edx
		add    %edi,%edx
		push   $0x0
		shl    $0x2,%edx
		mov    $0x200,%ecx
		add    %edi,%edx
		mov    things,%eax
		shl    $0x3,%edx
		push   $0x1
		add    %edx,%eax
		mov    0x20(%esi),%ebx
		push   %eax
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		call   ac_check_for_radius_hit_person
		test   %eax,%eax
		je     jump_c9c6c
		movw   $0x0,0x28(%esi)
	jump_c9c6c:
		mov    0x26(%esi),%eax
		sar    $0x10,%eax
		cmp    $0x3c,%eax
		jne    jump_c9c93
		push   $0x1
		push   $0xffffffff
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x26,%edx
		mov    %esi,%eax
		call   ac_play_dist_ssample
	jump_c9c93:
		testb  $0x4,0xe(%esi)
		je     jump_c9cb1
		mov    0x26(%esi),%eax
		sar    $0x10,%eax
		cmp    $0x7,%eax
		jle    jump_c9cb1
		cmpw   $0x0,0x30(%esi)
		jne    jump_c9cb1
		movw   $0x7,0x28(%esi)
	jump_c9cb1:
		mov    0x26(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jg     jump_c9ad3
		mov    0x28(%esi),%dx
		mov    0x14(%esi),%eax
		dec    %edx
		sar    $0x10,%eax
		mov    %dx,0x28(%esi)
		mov    $0x26,%edx
		call   ac_stop_sample_using_heap
		mov    0x26(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		je     jump_c9cee
		cmp    $0xfffffffa,%eax
		je     jump_c9cee
		je     jump_c9cee
		cmp    $0xfffffff5,%eax
		jne    jump_c9d0b
	jump_c9cee:
		mov    0x20(%esi),%ebx
		mov    0x1c(%esi),%edx
		mov    0x18(%esi),%eax
		xor    %ecx,%ecx
		sar    $0x8,%ebx
		sar    $0x8,%edx
		sar    $0x8,%eax
		mov    0x38(%esi),%cx
		call   init_electricity_bomb
	jump_c9d0b:
		mov    0x26(%esi),%eax
		sar    $0x10,%eax
		cmp    $0xfffffff1,%eax
		jne    jump_c9ad3
		mov    0x14(%esi),%eax
		sar    $0x10,%eax
		call   ac_remove_sthing
		mov    ingame__fld_unkCB7,%bx
		dec    %ebx
		mov    %esi,%eax
		mov    %bx,ingame__fld_unkCB7
		call   ac_delete_snode
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_c9d41:
		cmp    $0xc,%al
		je     jump_c9c07
	jump_c9d49:
		cmpb   $0x0,in_network_game
		je     jump_c9ad3
		incw   0x30(%esi)
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_grenade)	/* 0x0C9D60 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    %eax,%esi
		mov    0x26(%eax),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		je     jump_c9f92
		mov    0x2c(%esi),%eax
		mov    0x18(%esi),%edx
		shl    $0x8,%eax
		add    %eax,%edx
		mov    %edx,(%esp)
		mov    0x1c(%esi),%ebp
		mov    0x34(%esi),%eax
		mov    0x30(%esi),%edx
		shl    $0x8,%eax
		add    %edx,%ebp
		mov    0x20(%esi),%edx
		add    %eax,%edx
		mov    %edx,0x4(%esp)
		mov    0x30(%esi),%ebx
		sub    $0x1f4,%ebx
		mov    %ebp,%edx
		mov    %ebx,0x30(%esi)
		sar    $0x8,%edx
		mov    0x4(%esp),%ebx
		mov    (%esp),%eax
		sar    $0x8,%ebx
		sar    $0x8,%eax
		call   ac_check_col_collision
		test   %ax,%ax
		je     jump_c9ff8
		cwtl
		cmp    $0xffffffff,%eax
		jne    jump_c9ff2
		mov    0x20(%esi),%edx
		mov    0x18(%esi),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		shl    $0x7,%edx
		add    %edx,%eax
		lea    0x0(,%eax,8),%edi
		add    %eax,%edi
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		mov    (%eax,%edi,2),%ax
		and    $0x3f,%ah
		cwtl
		call   sea_texture
		test   %eax,%eax
		je     jump_c9ff2
		mov    0x20(%esi),%eax
		sar    $0x8,%eax
		movswl %ax,%edx
		mov    0x18(%esi),%eax
		sar    $0x8,%eax
		cwtl
		mov    $0x43f,%ecx
		call   ac_alt_at_point
		push   $0x8
		mov    %eax,%edx
		mov    0x20(%esi),%ebx
		sar    $0x8,%edx
		mov    0x18(%esi),%eax
		sar    $0x8,%ebx
		sar    $0x8,%eax
		call   create_scale_effect
		mov    %eax,%edi
		test   %eax,%eax
		je     jump_c9e72
		call   ac_LbRandomAnyShort
		push   $0x0
		xor    %ah,%ah
		mov    $0x3,%ecx
		and    $0x7f,%al
		movb   $0x3c,0x8(%edi)
		add    $0x3e,%eax
		xor    %edx,%edx
		mov    %ax,0x12(%edi)
		push   $0x0
		mov    0x20(%esi),%ebx
		mov    0x18(%esi),%eax
		sar    $0x8,%ebx
		sar    $0x8,%eax
		call   ac_create_sound_effect
	jump_c9e72:
		mov    things,%ecx
		mov    %esi,%edx
		sub    %ecx,%edx
		mov    $0xa8,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		and    $0xffff,%eax
		call   ac_remove_thing
		mov    %esi,%eax
		call   ac_delete_node
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_c9ea3:
		movswl %ax,%edx
		mov    0x20(%esi),%ebx
		mov    0x18(%esi),%eax
		sar    $0x8,%ebx
		sar    $0x8,%eax
		call   init_nuclear_bomb
		mov    %eax,%edi
		test   %eax,%eax
		je     jump_c9fc1
		push   $0x2
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x0
		mov    $0x22,%edx
		mov    0x3c(%esi),%ax
		push   $0x64
		mov    %ax,0x38(%edi)
		mov    %edi,%eax
		call   ac_play_dist_ssample
		push   $0x3
		push   $0x0
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		push   $0x64
		mov    $0x1,%edx
		mov    %edi,%eax
		call   ac_play_dist_ssample
		jmp    jump_c9fc1
	jump_c9f06:
		movswl %ax,%edx
		mov    0x20(%esi),%ebx
		mov    0x18(%esi),%eax
		sar    $0x8,%ebx
		sar    $0x8,%eax
		call   init_nuclear_bomb
		mov    %eax,%edi
		test   %eax,%eax
		je     jump_c9fc1
		push   $0x2
		mov    $0x40,%ecx
		movb   $0x20,0x9(%eax)
		mov    $0x7f,%ebx
		mov    0x8(%esi),%al
		push   $0x0
		mov    %al,0x8(%edi)
		mov    $0x22,%edx
		mov    0x3c(%esi),%ax
		push   $0x64
		mov    %ax,0x38(%edi)
		mov    %edi,%eax
		call   ac_play_dist_ssample
		xor    %eax,%eax
		mov    0x8(%edi),%al
		cmp    $0x4,%eax
		jne    jump_c9f77
		push   $0x3
		push   $0xffffffff
		mov    $0x40,%ecx
		mov    $0x20,%edx
		push   $0x64
		mov    %edi,%eax
		xor    %ebx,%ebx
		call   ac_play_dist_ssample
		jmp    jump_c9fc1
	jump_c9f77:
		push   $0x3
		push   $0xffffffff
		mov    $0x40,%ecx
		mov    $0x1f,%edx
		push   $0x64
		mov    %edi,%eax
		xor    %ebx,%ebx
		call   ac_play_dist_ssample
		jmp    jump_c9fc1
	jump_c9f92:
		mov    0x20(%esi),%eax
		sar    $0x8,%eax
		movswl %ax,%edx
		mov    0x18(%esi),%eax
		sar    $0x8,%eax
		cwtl
		call   ac_alt_at_point
		mov    0x8(%esi),%dl
		sar    $0x8,%eax
		cmp    $0x3,%dl
		jb     jump_c9fc1
		jbe    jump_c9ea3
		cmp    $0x5,%dl
		jbe    jump_c9f06
	jump_c9fc1:
		mov    things,%edi
		mov    %esi,%edx
		sub    %edi,%edx
		mov    $0xa8,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		and    $0xffff,%eax
		call   ac_remove_thing
		mov    %esi,%eax
		call   ac_delete_node
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_c9ff2:
		movw   $0x0,0x28(%esi)
	jump_c9ff8:
		mov    (%esp),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jl     jump_ca02b
		cmp    $0x80,%eax
		jge    jump_ca02b
		mov    0x4(%esp),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jl     jump_ca02b
		cmp    $0x80,%eax
		jge    jump_ca02b
		mov    0x4(%esp),%ecx
		mov    (%esp),%edx
		mov    %ebp,%ebx
		mov    %esi,%eax
		call   ac_move_mapwho
	jump_ca02b:
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret

vtable_ca038:
		.long   func_ca100
		.long   func_ca12a
		.long   func_ca13e
		.long   func_ca152

vtable_ca048:
		.long   func_ca299
		.long   func_ca31b
		.long   func_ca33b
		.long   func_ca35b

vtable_ca058:
		.long   func_ca500
		.long   func_ca643
		.long   func_ca663
		.long   func_ca683

vtable_ca068:
		.long   func_ca166
		.long   func_ca6a3
		.long   func_ca37b
		.long   func_ca88e


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_bang)	/* 0x0CA078 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x54,%esp
		mov    %eax,%esi
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0x64,%eax
		jl     jump_ca0a7
		mov    %eax,%ecx
		inc    %ecx
		xor    %eax,%eax
		mov    %cx,%ax
		mov    %cx,0xa(%esi)
		cmp    $0x69,%eax
		jl     jump_ca0b3
		movw   $0x0,0xa(%esi)
		jmp    jump_ca0b3
	jump_ca0a7:
		test   %ax,%ax
		je     jump_ca0b3
		mov    %eax,%ebx
		dec    %ebx
		mov    %bx,0xa(%esi)
	jump_ca0b3:
		mov    0x2e(%esi),%ax
		lea    0x2e(%esi),%edi
		mov    %eax,0x48(%esp)
		test   %ax,%ax
		je     jump_cab4c
	jump_ca0c7:
		xor    %eax,%eax
		mov    0x48(%esp),%ax
		imul   $0x1c,%eax,%eax
		mov    $EXPORT_SYMBOL(phwoar),%ebx
		add    %eax,%ebx
		testb  $0x3f,0x11(%ebx)
		jne    jump_ca9ee
		mov    0x10(%ebx),%al
		and    $0x30,%al
		and    $0xff,%eax
		sar    $0x4,%eax
		cmp    $0x3,%eax
		ja     jump_ca9ea
		jmp    *%cs:vtable_ca068(,%eax,4)


/*----------------------------------------------------------------*/
func_ca100:
/*----------------------------------------------------------------*/
		mov    bangdetail__circle,%eax
		mov    %eax,0x20(%esp)
		mov    data_1a72c0,%eax
		mov    %eax,0x2c(%esp)
	jump_ca112:
		xor    %edx,%edx
		mov    0x2c(%esp),%ebp
		mov    %edx,0x1c(%esp)
		mov    %edx,0x8(%esp)
		test   %ebp,%ebp
		jle    jump_ca9ea
		jmp    jump_ca192


/*----------------------------------------------------------------*/
func_ca12a:
/*----------------------------------------------------------------*/
		mov    data_1a72c4,%eax
		mov    %eax,0x20(%esp)
		mov    data_1a72c8,%eax
		mov    %eax,0x2c(%esp)
		jmp    jump_ca112


/*----------------------------------------------------------------*/
func_ca13e:
/*----------------------------------------------------------------*/
		mov    data_1a72cc,%eax
		mov    %eax,0x20(%esp)
		mov    data_1a72d0,%eax
		mov    %eax,0x2c(%esp)
		jmp    jump_ca112


/*----------------------------------------------------------------*/
func_ca152:
/*----------------------------------------------------------------*/
		mov    data_1a72d4,%eax
		mov    %eax,0x20(%esp)
		mov    data_1a72d8,%eax
		mov    %eax,0x2c(%esp)
		jmp    jump_ca112


/*----------------------------------------------------------------*/
func_ca166:
/*----------------------------------------------------------------*/
		mov    0x10(%ebx),%al
		and    $0x3,%al
		and    $0xff,%eax
		cmp    $0x3,%eax
		ja     jump_ca112
		jmp    *%cs:vtable_ca038(,%eax,4)
	jump_ca17d:
		mov    0x8(%esp),%ebp
		inc    %ebp
		mov    0x2c(%esp),%edx
		mov    %ebp,0x8(%esp)
		cmp    %edx,%ebp
		jge    jump_ca9ea
	jump_ca192:
		call   get_some_phwoar
		test   %ax,%ax
		je     jump_ca17d
		xor    %edx,%edx
		mov    %ax,%dx
		imul   $0x1c,%edx,%edx
		add    $EXPORT_SYMBOL(phwoar),%edx
		mov    (%edi),%cx
		mov    %cx,0x18(%edx)
		mov    %ax,(%edi)
		mov    0x1c(%esp),%eax
		and    $0x7ff,%eax
		mov    EXPORT_SYMBOL(lbSinTable)(,%eax,4),%ecx
		sar    $0xa,%ecx
		mov    %ecx,0x40(%esp)
		mov    0x40(%esp),%cl
		mov    %cl,0xc(%edx)
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%eax,4),%eax
		sar    $0xa,%eax
		movb   $0x0,0xd(%edx)
		mov    %al,0xe(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7,%al
		mov    0xc(%edx),%ch
		sub    $0x3,%al
		add    %al,%ch
		mov    %ch,0xc(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7,%al
		sub    $0x3,%al
		mov    0xe(%edx),%ah
		add    %al,%ah
		mov    0x1c(%esp),%ecx
		mov    %ah,0xe(%edx)
		add    0x20(%esp),%ecx
		mov    0xf(%ebx),%al
		dec    %al
		mov    %al,0xf(%edx)
		mov    %edx,%eax
		mov    %ecx,0x1c(%esp)
		call   fillin_phwoar_type_info
		testb  $0x80,0x10(%ebx)
		je     jump_ca235
		mov    (%ebx),%eax
		mov    %eax,(%edx)
		mov    0x4(%ebx),%eax
		mov    %eax,0x4(%edx)
		mov    0x8(%ebx),%eax
		jmp    jump_ca243
	jump_ca235:
		mov    0x18(%esi),%eax
		mov    %eax,(%edx)
		mov    0x1c(%esi),%eax
		mov    %eax,0x4(%edx)
		mov    0x20(%esi),%eax
	jump_ca243:
		mov    %eax,0x8(%edx)
		mov    0x10(%ebx),%al
		xor    %ecx,%ecx
		and    $0xc,%al
		mov    %al,%cl
		sar    $0x2,%ecx
		sarb   %cl,0xc(%edx)
		mov    0x10(%ebx),%al
		xor    %ecx,%ecx
		and    $0xc,%al
		mov    %al,%cl
		sar    $0x2,%ecx
		sarb   %cl,0xd(%edx)
		mov    0x10(%ebx),%al
		xor    %ecx,%ecx
		and    $0xc,%al
		mov    %al,%cl
		sar    $0x2,%ecx
		sarb   %cl,0xe(%edx)
		testb  $0x40,0x10(%ebx)
		je     jump_ca17d
		mov    0xc(%ebx),%al
		add    %al,0xc(%edx)
		mov    0xd(%ebx),%al
		add    %al,0xd(%edx)
		mov    0xe(%edx),%cl
		mov    0xe(%ebx),%al
		add    %al,%cl
		mov    %cl,0xe(%edx)
		jmp    jump_ca17d


/*----------------------------------------------------------------*/
func_ca299:
/*----------------------------------------------------------------*/
		mov    data_1a72e4,%eax
		mov    %eax,0x2c(%esp)
		mov    data_1a72e0,%eax
		mov    %eax,0x30(%esp)
		mov    bangdetail__sphere,%eax
		mov    %eax,0x28(%esp)
	jump_ca2b4:
		xor    %edx,%edx
		mov    0x30(%esp),%ecx
		mov    %edx,0x24(%esp)
		test   %ecx,%ecx
	jump_ca2c0:
		je     jump_ca9ea
		mov    0x24(%esp),%ebp
		and    $0x7ff,%ebp
		shl    $0x2,%ebp
		mov    0x2c(%esp),%eax
		imul   EXPORT_SYMBOL(lbSinTable)+2048(%ebp),%eax
		sar    $0x10,%eax
		mov    %eax,0x34(%esp)
		xor    %eax,%eax
		mov    0x34(%esp),%edx
		mov    %eax,0x44(%esp)
		inc    %edx
		mov    $0x800,%eax
		mov    %edx,0x34(%esp)
		mov    %eax,%edx
		mov    0x34(%esp),%ecx
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %eax,0x20(%esp)
		xor    %eax,%eax
		mov    %eax,0x4(%esp)
		test   %ecx,%ecx
		jle    jump_ca4e4
		jmp    jump_ca418


/*----------------------------------------------------------------*/
func_ca31b:
/*----------------------------------------------------------------*/
		mov    data_1a72f0,%eax
		mov    %eax,0x2c(%esp)
		mov    data_1a72ec,%eax
		mov    %eax,0x30(%esp)
		mov    data_1a72e8,%eax
		mov    %eax,0x28(%esp)
		jmp    jump_ca2b4


/*----------------------------------------------------------------*/
func_ca33b:
/*----------------------------------------------------------------*/
		mov    data_1a72fc,%eax
		mov    %eax,0x2c(%esp)
		mov    data_1a72f8,%eax
		mov    %eax,0x30(%esp)
		mov    data_1a72f4,%eax
		mov    %eax,0x28(%esp)
		jmp    jump_ca2b4


/*----------------------------------------------------------------*/
func_ca35b:
/*----------------------------------------------------------------*/
		mov    data_1a7308,%eax
		mov    %eax,0x2c(%esp)
		mov    data_1a7304,%eax
		mov    %eax,0x30(%esp)
		mov    data_1a7300,%eax
		mov    %eax,0x28(%esp)
		jmp    jump_ca2b4


/*----------------------------------------------------------------*/
func_ca37b:
/*----------------------------------------------------------------*/
		mov    0x10(%ebx),%al
		and    $0x3,%al
		and    $0xff,%eax
		cmp    $0x3,%eax
		ja     jump_ca2b4
		jmp    *%cs:vtable_ca048(,%eax,4)
	jump_ca396:
		mov    0x18(%esi),%ecx
		mov    %ecx,(%edx)
		mov    0x1c(%esi),%ecx
		mov    %ecx,0x4(%edx)
		mov    0x20(%esi),%eax
		mov    %eax,0x8(%edx)
	jump_ca3a7:
		mov    0x10(%ebx),%al
		xor    %ecx,%ecx
		and    $0xc,%al
		mov    %al,%cl
		sar    $0x2,%ecx
		sarb   %cl,0xc(%edx)
		mov    0x10(%ebx),%al
		and    $0xc,%al
		mov    %eax,%ecx
		and    $0xff,%ecx
		mov    0xd(%edx),%al
		sar    $0x2,%ecx
		sar    %cl,%al
		mov    %al,0xd(%edx)
		mov    0x10(%ebx),%al
		and    $0xc,%al
		mov    %eax,%ecx
		and    $0xff,%ecx
		mov    0xe(%edx),%ah
		sar    $0x2,%ecx
		sar    %cl,%ah
		mov    %ah,0xe(%edx)
		testb  $0x40,0x10(%ebx)
		je     jump_ca403
		mov    0xc(%ebx),%al
		add    %al,0xc(%edx)
		mov    0xd(%ebx),%al
		add    %al,0xd(%edx)
		mov    0xe(%edx),%cl
		mov    0xe(%ebx),%al
		add    %al,%cl
		mov    %cl,0xe(%edx)
	jump_ca403:
		mov    0x4(%esp),%ecx
		inc    %ecx
		mov    0x34(%esp),%edx
		mov    %ecx,0x4(%esp)
		cmp    %edx,%ecx
		jge    jump_ca4e4
	jump_ca418:
		call   get_some_phwoar
		test   %ax,%ax
		je     jump_ca403
		xor    %edx,%edx
		mov    %ax,%dx
		imul   $0x1c,%edx,%edx
		add    $EXPORT_SYMBOL(phwoar),%edx
		mov    (%edi),%cx
		mov    %cx,0x18(%edx)
		mov    0x44(%esp),%ecx
		and    $0x7ff,%ecx
		mov    %ax,(%edi)
		mov    EXPORT_SYMBOL(lbSinTable)(,%ecx,4),%eax
		sar    $0xa,%eax
		imul   EXPORT_SYMBOL(lbSinTable)+2048(%ebp),%eax
		sar    $0x10,%eax
		mov    %eax,0x40(%esp)
		mov    0x40(%esp),%al
		mov    %al,0xc(%edx)
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%ecx,4),%ecx
		mov    EXPORT_SYMBOL(lbSinTable)+2048(%ebp),%eax
		sar    $0xa,%ecx
		imul   %eax,%ecx
		sar    $0x10,%ecx
		mov    %cl,0xe(%edx)
		mov    EXPORT_SYMBOL(lbSinTable)(%ebp),%ecx
		sar    $0xa,%ecx
		mov    %cl,0xd(%edx)
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		mov    0xc(%edx),%ch
		sub    $0x7,%al
		add    %al,%ch
		mov    %ch,0xc(%edx)
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		sub    $0x7,%al
		mov    0xe(%edx),%ah
		add    %al,%ah
		mov    0x44(%esp),%ecx
		mov    %ah,0xe(%edx)
		add    0x20(%esp),%ecx
		mov    0xf(%ebx),%al
		dec    %al
		mov    %al,0xf(%edx)
		mov    %edx,%eax
		mov    %ecx,0x44(%esp)
		call   fillin_phwoar_type_info
		testb  $0x80,0x10(%ebx)
		je     jump_ca396
		mov    (%ebx),%eax
		mov    %eax,(%edx)
		mov    0x4(%ebx),%eax
		mov    %eax,0x4(%edx)
		mov    0x8(%ebx),%ecx
		mov    %ecx,0x8(%edx)
		jmp    jump_ca3a7
	jump_ca4e4:
		mov    0x28(%esp),%eax
		mov    0x24(%esp),%ebp
		add    %eax,%ebp
		mov    0x30(%esp),%eax
		mov    %ebp,0x24(%esp)
		dec    %eax
		mov    %eax,0x30(%esp)
		jmp    jump_ca2c0


/*----------------------------------------------------------------*/
func_ca500:
/*----------------------------------------------------------------*/
		mov    data_1a72e4,%eax
		mov    %eax,0x2c(%esp)
		mov    data_1a72e0,%eax
		mov    %eax,0x30(%esp)
		mov    bangdetail__sphere,%eax
		mov    %eax,0x28(%esp)
	jump_ca51b:
		xor    %ebp,%ebp
		mov    0x30(%esp),%eax
		mov    %ebp,0xc(%esp)
		test   %eax,%eax
	jump_ca527:
		je     jump_ca9ea
		mov    0xc(%esp),%ecx
		and    $0x7ff,%ecx
		shl    $0x2,%ecx
		mov    0x2c(%esp),%eax
		imul   EXPORT_SYMBOL(lbSinTable)+2048(%ecx),%eax
		sar    $0x10,%eax
		mov    %eax,0x10(%esp)
		inc    %eax
		mov    %eax,0x10(%esp)
		mov    $0x800,%eax
		mov    %eax,%edx
		sar    $0x1f,%edx
		idivl  0x10(%esp)
		xor    %ebp,%ebp
		mov    %eax,0x20(%esp)
		mov    0x10(%esp),%eax
		mov    %ebp,(%esp)
		test   %eax,%eax
		jle    jump_ca872
		mov    %ecx,0x3c(%esp)
		mov    %ecx,0x38(%esp)
	jump_ca57c:
		call   get_some_phwoar
		test   %ax,%ax
		je     jump_ca726
		xor    %edx,%edx
		mov    %ax,%dx
		imul   $0x1c,%edx,%edx
		add    $EXPORT_SYMBOL(phwoar),%edx
		mov    (%edi),%cx
		mov    %cx,0x18(%edx)
		mov    %ax,(%edi)
		mov    %ebp,%eax
		and    $0x7ff,%eax
		shl    $0x2,%eax
		mov    %eax,0x40(%esp)
		mov    EXPORT_SYMBOL(lbSinTable)(%eax),%eax
		sar    $0xa,%eax
		mov    0x38(%esp),%ecx
		imul   EXPORT_SYMBOL(lbSinTable)+2048(%ecx),%eax
		sar    $0x10,%eax
		mov    %al,0xc(%edx)
		mov    0x40(%esp),%eax
		mov    EXPORT_SYMBOL(lbSinTable)+2048(%eax),%eax
		sar    $0xa,%eax
		imul   EXPORT_SYMBOL(lbSinTable)+2048(%ecx),%eax
		sar    $0x10,%eax
		mov    %al,0xe(%edx)
		mov    EXPORT_SYMBOL(lbSinTable)(%ecx),%eax
		sar    $0xa,%eax
		mov    %eax,0x40(%esp)
		mov    0x40(%esp),%al
		mov    %al,0xd(%edx)
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		mov    0xc(%edx),%ch
		sub    $0x7,%al
		add    %al,%ch
		mov    %ch,0xc(%edx)
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		sub    $0x7,%al
		add    %al,0xe(%edx)
		mov    0xf(%ebx),%al
		dec    %al
		mov    %al,0xf(%edx)
		mov    %edx,%eax
		call   fillin_phwoar_type_info
		testb  $0x80,0x10(%ebx)
		je     jump_ca6be
		mov    (%ebx),%eax
		mov    %eax,(%edx)
		mov    0x4(%ebx),%eax
		mov    %eax,0x4(%edx)
		mov    0x8(%ebx),%ecx
		mov    %ecx,0x8(%edx)
		jmp    jump_ca6cf


/*----------------------------------------------------------------*/
func_ca643:
/*----------------------------------------------------------------*/
		mov    data_1a72f0,%eax
		mov    %eax,0x2c(%esp)
		mov    data_1a72ec,%eax
		mov    %eax,0x30(%esp)
		mov    data_1a72e8,%eax
		mov    %eax,0x28(%esp)
		jmp    jump_ca51b


/*----------------------------------------------------------------*/
func_ca663:
/*----------------------------------------------------------------*/
		mov    data_1a72fc,%eax
		mov    %eax,0x2c(%esp)
		mov    data_1a72f8,%eax
		mov    %eax,0x30(%esp)
		mov    data_1a72f4,%eax
		mov    %eax,0x28(%esp)
		jmp    jump_ca51b


/*----------------------------------------------------------------*/
func_ca683:
/*----------------------------------------------------------------*/
		mov    data_1a7308,%eax
		mov    %eax,0x2c(%esp)
		mov    data_1a7304,%eax
		mov    %eax,0x30(%esp)
		mov    data_1a7300,%eax
		mov    %eax,0x28(%esp)
		jmp    jump_ca51b


/*----------------------------------------------------------------*/
func_ca6a3:
/*----------------------------------------------------------------*/
		mov    0x10(%ebx),%al
		and    $0x3,%al
		and    $0xff,%eax
		cmp    $0x3,%eax
		ja     jump_ca51b
		jmp    *%cs:vtable_ca058(,%eax,4)
	jump_ca6be:
		mov    0x18(%esi),%eax
		mov    %eax,(%edx)
		mov    0x1c(%esi),%eax
		mov    %eax,0x4(%edx)
		mov    0x20(%esi),%eax
		mov    %eax,0x8(%edx)
	jump_ca6cf:
		mov    0x10(%ebx),%al
		and    $0xc,%al
		mov    %eax,%ecx
		and    $0xff,%ecx
		sar    $0x2,%ecx
		sarb   %cl,0xc(%edx)
		mov    0x10(%ebx),%al
		xor    %ecx,%ecx
		and    $0xc,%al
		mov    %al,%cl
		sar    $0x2,%ecx
		sarb   %cl,0xd(%edx)
		mov    0x10(%ebx),%al
		and    $0xc,%al
		mov    %eax,%ecx
		and    $0xff,%ecx
		mov    0xe(%edx),%ah
		sar    $0x2,%ecx
		sar    %cl,%ah
		mov    %ah,0xe(%edx)
		testb  $0x40,0x10(%ebx)
		je     jump_ca726
		mov    0xc(%ebx),%al
		add    %al,0xc(%edx)
		mov    0xd(%ebx),%al
		add    %al,0xd(%edx)
		mov    0xe(%edx),%cl
		mov    0xe(%ebx),%al
		add    %al,%cl
		mov    %cl,0xe(%edx)
	jump_ca726:
		cmpl   $0x0,0xc(%esp)
		je     jump_ca859
		call   get_some_phwoar
		test   %ax,%ax
		je     jump_ca859
		xor    %edx,%edx
		mov    %ax,%dx
		imul   $0x1c,%edx,%edx
		add    $EXPORT_SYMBOL(phwoar),%edx
		mov    (%edi),%cx
		mov    %cx,0x18(%edx)
		mov    %ax,(%edi)
		mov    %ebp,%eax
		and    $0x7ff,%eax
		shl    $0x2,%eax
		mov    %eax,0x40(%esp)
		mov    EXPORT_SYMBOL(lbSinTable)(%eax),%eax
		sar    $0xa,%eax
		mov    0x3c(%esp),%ecx
		imul   EXPORT_SYMBOL(lbSinTable)+2048(%ecx),%eax
		sar    $0x10,%eax
		mov    %al,0xc(%edx)
		mov    0x40(%esp),%eax
		mov    EXPORT_SYMBOL(lbSinTable)+2048(%eax),%eax
		sar    $0xa,%eax
		imul   EXPORT_SYMBOL(lbSinTable)+2048(%ecx),%eax
		sar    $0x10,%eax
		mov    %al,0xe(%edx)
		mov    EXPORT_SYMBOL(lbSinTable)(%ecx),%eax
		neg    %eax
		sar    $0xa,%eax
		mov    %al,0xd(%edx)
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		mov    0xc(%edx),%ch
		sub    $0x7,%al
		add    %al,%ch
		mov    %ch,0xc(%edx)
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		sub    $0x7,%al
		add    %al,0xe(%edx)
		mov    0xf(%ebx),%al
		dec    %al
		mov    %al,0xf(%edx)
		mov    %edx,%eax
		call   fillin_phwoar_type_info
		testb  $0x80,0x10(%ebx)
		je     jump_ca7e8
		mov    (%ebx),%ecx
		mov    %ecx,(%edx)
		mov    0x4(%ebx),%ecx
		mov    %ecx,0x4(%edx)
		mov    0x8(%ebx),%ecx
		jmp    jump_ca7f6
	jump_ca7e8:
		mov    0x18(%esi),%ecx
		mov    %ecx,(%edx)
		mov    0x1c(%esi),%ecx
		mov    %ecx,0x4(%edx)
		mov    0x20(%esi),%ecx
	jump_ca7f6:
		mov    %ecx,0x8(%edx)
		mov    0x10(%ebx),%al
		and    $0xc,%al
		mov    %eax,%ecx
		and    $0xff,%ecx
		sar    $0x2,%ecx
		sarb   %cl,0xc(%edx)
		mov    0x10(%ebx),%al
		and    $0xc,%al
		mov    %eax,%ecx
		and    $0xff,%ecx
		mov    0xd(%edx),%al
		sar    $0x2,%ecx
		sar    %cl,%al
		mov    %al,0xd(%edx)
		mov    0x10(%ebx),%al
		and    $0xc,%al
		mov    %eax,%ecx
		and    $0xff,%ecx
		mov    0xe(%edx),%ah
		sar    $0x2,%ecx
		sar    %cl,%ah
		mov    %ah,0xe(%edx)
		testb  $0x40,0x10(%ebx)
		je     jump_ca859
		mov    0xc(%ebx),%al
		add    %al,0xc(%edx)
		mov    0xd(%ebx),%al
		add    %al,0xd(%edx)
		mov    0xe(%edx),%cl
		mov    0xe(%ebx),%al
		add    %al,%cl
		mov    %cl,0xe(%edx)
	jump_ca859:
		mov    (%esp),%ecx
		mov    0x20(%esp),%edx
		inc    %ecx
		add    %edx,%ebp
		mov    0x10(%esp),%edx
		mov    %ecx,(%esp)
		cmp    %edx,%ecx
		jl     jump_ca57c
	jump_ca872:
		mov    0x28(%esp),%eax
		mov    0xc(%esp),%ebp
		add    %eax,%ebp
		mov    0x30(%esp),%eax
		mov    %ebp,0xc(%esp)
		dec    %eax
		mov    %eax,0x30(%esp)
		jmp    jump_ca527


/*----------------------------------------------------------------*/
func_ca88e:
/*----------------------------------------------------------------*/
		mov    0x10(%ebx),%al
		and    $0x3,%al
		and    $0xff,%eax
		mov    %eax,0x2c(%esp)
		lea    (%eax,%eax,1),%edx
		xor    %ecx,%ecx
		mov    %edx,0x2c(%esp)
		lea    0x1(%edx),%ebp
		mov    %ecx,0x14(%esp)
		mov    %ebp,0x2c(%esp)
		test   %ebp,%ebp
		jle    jump_ca9ea
		jmp    jump_ca92a
	jump_ca8ba:
		mov    0x18(%esi),%eax
		mov    %eax,(%edx)
		mov    0x1c(%esi),%eax
		mov    %eax,0x4(%edx)
		mov    0x20(%esi),%eax
	jump_ca8c8:
		mov    %eax,0x8(%edx)
		mov    0x10(%ebx),%al
		xor    %ecx,%ecx
		and    $0xc,%al
		mov    %al,%cl
		sar    $0x2,%ecx
		sarb   %cl,0xc(%edx)
		mov    0x10(%ebx),%al
		xor    %ecx,%ecx
		and    $0xc,%al
		mov    %al,%cl
		sar    $0x2,%ecx
		sarb   %cl,0xd(%edx)
		mov    0x10(%ebx),%al
		xor    %ecx,%ecx
		and    $0xc,%al
		mov    %al,%cl
		sar    $0x2,%ecx
		sarb   %cl,0xe(%edx)
		testb  $0x40,0x10(%ebx)
		je     jump_ca915
		mov    0xc(%ebx),%al
		add    %al,0xc(%edx)
		mov    0xd(%ebx),%al
		add    %al,0xd(%edx)
		mov    0xe(%edx),%cl
		mov    0xe(%ebx),%al
		add    %al,%cl
		mov    %cl,0xe(%edx)
	jump_ca915:
		mov    0x14(%esp),%ecx
		inc    %ecx
		mov    0x2c(%esp),%ebp
		mov    %ecx,0x14(%esp)
		cmp    %ebp,%ecx
		jge    jump_ca9ea
	jump_ca92a:
		call   get_some_phwoar
		test   %ax,%ax
		je     jump_ca915
		xor    %edx,%edx
		mov    %ax,%dx
		imul   $0x1c,%edx,%edx
		add    $EXPORT_SYMBOL(phwoar),%edx
		mov    (%edi),%cx
		mov    %cx,0x18(%edx)
		mov    %ax,(%edi)
		call   ac_LbRandomAnyShort
		and    $0x7,%ah
		movzwl %ax,%ebp
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3f,%al
		and    $0x7ff,%ebp
		mov    EXPORT_SYMBOL(lbSinTable)(,%ebp,4),%ecx
		and    $0xffff,%eax
		sar    $0xa,%ecx
		and    $0x7ff,%eax
		imul   EXPORT_SYMBOL(lbSinTable)+2048(,%eax,4),%ecx
		sar    $0x10,%ecx
		mov    %ecx,0x40(%esp)
		mov    0x40(%esp),%cl
		mov    %cl,0xc(%edx)
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%ebp,4),%ebp
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%eax,4),%ecx
		sar    $0xa,%ebp
		imul   %ecx,%ebp
		sar    $0x10,%ebp
		mov    %ebp,0x40(%esp)
		mov    0x40(%esp),%cl
		mov    %cl,0xe(%edx)
		mov    EXPORT_SYMBOL(lbSinTable)(,%eax,4),%eax
		sar    $0xa,%eax
		mov    %al,0xd(%edx)
		mov    0xf(%ebx),%al
		dec    %al
		mov    %al,0xf(%edx)
		mov    %edx,%eax
		call   fillin_phwoar_type_info
		testb  $0x80,0x10(%ebx)
		je     jump_ca8ba
		mov    (%ebx),%eax
		mov    %eax,(%edx)
		mov    0x4(%ebx),%eax
		mov    %eax,0x4(%edx)
		mov    0x8(%ebx),%eax
		jmp    jump_ca8c8
	jump_ca9ea:
		movb   $0xff,0x11(%ebx)
	jump_ca9ee:
		mov    0xf(%ebx),%eax
		lea    0x18(%ebx),%ebp
		sar    $0x18,%eax
		mov    0x18(%ebx),%cx
		test   %eax,%eax
		jg     jump_caa17
		xor    %eax,%eax
		mov    0x48(%esp),%ax
		mov    %cx,(%edi)
		call   give_some_phwoar
		mov    %ecx,0x48(%esp)
		jmp    jump_cab40
	jump_caa17:
		decb   0x11(%ebx)
		mov    0x13(%ebx),%al
		and    $0xf,%al
		add    %al,0x1a(%ebx)
	jump_caa22:
		xor    %eax,%eax
		mov    0x1a(%ebx),%al
		cmp    $0x8,%eax
		jl     jump_caa5e
		mov    %al,%dh
		decb   0x12(%ebx)
		mov    0xf(%ebx),%eax
		sub    $0x8,%dh
		sar    $0x18,%eax
		mov    %dh,0x1a(%ebx)
		test   %eax,%eax
		jle    jump_caa22
		xor    %eax,%eax
		mov    0x14(%ebx),%ax
		lea    0x0(,%eax,8),%edx
		mov    frame,%eax
		mov    0x6(%edx,%eax,1),%ax
		mov    %ax,0x14(%ebx)
		jmp    jump_caa22
	jump_caa5e:
		mov    0x9(%ebx),%eax
		sar    $0x18,%eax
		mov    (%ebx),%edi
		shl    $0xa,%eax
		add    %eax,%edi
		mov    0xa(%ebx),%eax
		sar    $0x18,%eax
		mov    0x4(%ebx),%edx
		shl    $0x7,%eax
		add    %eax,%edx
		mov    0xb(%ebx),%eax
		mov    %edi,(%ebx)
		sar    $0x18,%eax
		mov    0x8(%ebx),%edi
		shl    $0xa,%eax
		mov    %edx,0x4(%ebx)
		add    %eax,%edi
		mov    0x13(%ebx),%dl
		mov    %edi,0x8(%ebx)
		test   $0x80,%dl
		je     jump_caa9b
		subb   $0x3,0xd(%ebx)
	jump_caa9b:
		testb  $0x40,0x13(%ebx)
		je     jump_caace
		mov    0x9(%ebx),%eax
		sar    $0x18,%eax
		mov    %eax,%edx
		sar    %edx
		sub    %edx,%eax
		mov    %al,0xc(%ebx)
		mov    0xa(%ebx),%eax
		sar    $0x18,%eax
		mov    %eax,%edx
		sar    %edx
		sub    %edx,%eax
		mov    %al,0xd(%ebx)
		mov    0xb(%ebx),%eax
		sar    $0x18,%eax
		mov    %eax,%edx
		sar    %edx
		sub    %edx,%eax
		mov    %al,0xe(%ebx)
	jump_caace:
		testb  $0x20,0x13(%ebx)
		je     jump_cab04
		mov    0x9(%ebx),%eax
		sar    $0x18,%eax
		mov    %eax,%edx
		sar    $0x2,%edx
		sub    %edx,%eax
		mov    %al,0xc(%ebx)
		mov    0xa(%ebx),%eax
		sar    $0x18,%eax
		mov    %eax,%edx
		sar    $0x2,%edx
		sub    %edx,%eax
		mov    %al,0xd(%ebx)
		mov    0xb(%ebx),%eax
		sar    $0x18,%eax
		mov    %eax,%edx
		sar    $0x2,%edx
		sub    %edx,%eax
		mov    %al,0xe(%ebx)
	jump_cab04:
		testb  $0x10,0x13(%ebx)
		je     jump_cab3a
		mov    0x9(%ebx),%eax
		sar    $0x18,%eax
		mov    %eax,%edx
		sar    $0x3,%edx
		sub    %edx,%eax
		mov    %al,0xc(%ebx)
		mov    0xa(%ebx),%eax
		sar    $0x18,%eax
		mov    %eax,%edx
		sar    $0x3,%edx
		sub    %edx,%eax
		mov    %al,0xd(%ebx)
		mov    0xb(%ebx),%eax
		sar    $0x18,%eax
		mov    %eax,%edx
		sar    $0x3,%edx
		sub    %edx,%eax
		mov    %al,0xe(%ebx)
	jump_cab3a:
		mov    %ecx,0x48(%esp)
		mov    %ebp,%edi
	jump_cab40:
		cmpw   $0x0,0x48(%esp)
		jne    jump_ca0c7
	jump_cab4c:
		mov    0x2c(%esi),%di
		lea    0x2c(%esi),%ebp
		test   %di,%di
		je     jump_cae6c
	jump_cab5c:
		xor    %eax,%eax
		mov    %di,%ax
		cmp    $0x200,%eax
		jge    jump_cae6c
		imul   $0x18,%eax,%eax
		mov    $shrapnel,%esi
		add    %eax,%esi
		mov    0x16(%esi),%ax
		mov    %eax,0x50(%esp)
		lea    0x16(%esi),%eax
		mov    %eax,0x18(%esp)
		mov    0x9(%esi),%eax
		mov    (%esi),%edx
		sar    $0x18,%eax
		mov    0x4(%esi),%ebx
		shl    $0x8,%eax
		mov    0x8(%esi),%ecx
		add    %eax,%edx
		mov    0xa(%esi),%eax
		mov    %edx,(%esi)
		sar    $0x18,%eax
		mov    0xd(%esi),%dl
		shl    $0x5,%eax
		sub    $0x3,%dl
		add    %eax,%ebx
		mov    0xb(%esi),%eax
		mov    %ebx,0x4(%esi)
		sar    $0x18,%eax
		mov    0x10(%esi),%bl
		mov    %dl,0xd(%esi)
		shl    $0x8,%eax
		mov    0xf(%esi),%dh
		add    %eax,%ecx
		mov    0x11(%esi),%al
		mov    %ecx,0x8(%esi)
		add    %al,%dh
		mov    0x12(%esi),%al
		mov    %dh,0xf(%esi)
		add    %al,%bl
		xor    %eax,%eax
		mov    0x13(%esi),%al
		mov    %bl,0x10(%esi)
		cmp    $0x2,%eax
		jne    jump_cabf3
		mov    gameturn,%eax
		test   %eax,bangdetailmask
		jne    jump_cac51
		mov    $0x28,%ecx
		jmp    jump_cac44
	jump_cabf3:
		cmp    $0x4,%eax
		jne    jump_cac2d
		mov    $0x28,%ecx
		mov    0x8(%esi),%ebx
		mov    0x4(%esi),%edx
		mov    (%esi),%eax
		call   ac_bang_new4
		mov    0xa(%esi),%eax
		sar    $0x18,%eax
		mov    0x4(%esi),%ebx
		shl    $0x5,%eax
		add    %eax,%ebx
		mov    0xa(%esi),%eax
		sar    $0x18,%eax
		mov    %eax,%edx
		sar    $0x2,%edx
		mov    %ebx,0x4(%esi)
		sub    %edx,%eax
		mov    %al,0xd(%esi)
		jmp    jump_cac51
	jump_cac2d:
		cmp    $0x3,%eax
		jne    jump_cac51
		mov    gameturn,%eax
		test   %eax,bangdetailmask
		jne    jump_cac51
		mov    $0x1e,%ecx
	jump_cac44:
		mov    0x8(%esi),%ebx
		mov    0x4(%esi),%edx
		mov    (%esi),%eax
		call   ac_bang_new4
	jump_cac51:
		mov    0x8(%esi),%eax
		sar    $0x8,%eax
		movswl %ax,%edx
		mov    (%esi),%eax
		sar    $0x8,%eax
		cwtl
		call   ac_alt_at_point
		mov    (%esi),%edx
		sar    $0x10,%edx
		mov    %eax,%ecx
		test   %edx,%edx
		jl     jump_cac8a
		cmp    $0x80,%edx
		jge    jump_cac8a
		mov    0x8(%esi),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		jl     jump_cac8a
		cmp    $0x80,%edx
		jl     jump_caca5
	jump_cac8a:
		mov    0x16(%esi),%ax
		mov    %ax,0x0(%ebp)
		xor    %eax,%eax
		mov    %di,%ax
		call   give_some_shrapnel
		mov    0x50(%esp),%edi
		jmp    jump_cae63
	jump_caca5:
		mov    0x4(%esi),%edx
		cmp    %edx,%eax
		jg     jump_cacd5
		xor    %eax,%eax
		mov    0x13(%esi),%al
		cmp    $0x4,%eax
		je     jump_cae0b
		sar    $0x8,%edx
		mov    (%esi),%eax
		mov    0x8(%esi),%ebx
		sar    $0x8,%eax
		sar    $0x8,%ebx
		call   ac_check_col_collision
		test   %eax,%eax
		je     jump_cae0b
	jump_cacd5:
		cmp    0x4(%esi),%ecx
		jle    jump_cad4d
		mov    0x8(%esi),%edx
		mov    (%esi),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		shl    $0x7,%edx
		add    %edx,%eax
		imul   $0x12,%eax,%edx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		mov    (%edx,%eax,1),%ax
		and    $0x3f,%ah
		cwtl
		call   sea_texture
		test   %eax,%eax
		je     jump_cad4d
		mov    $0x3,%edx
		push   $0x8
		mov    0x8(%esi),%ebx
		mov    (%esi),%eax
		mov    %edx,0x50(%esp)
		sar    $0x8,%ebx
		sar    $0x8,%eax
		mov    %ecx,%edx
		mov    $0x43f,%ecx
		sar    $0x8,%edx
		call   create_scale_effect
		mov    %eax,%edx
		test   %eax,%eax
		je     jump_cadc5
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x7f,%al
		movb   $0x3c,0x8(%edx)
		add    $0x3e,%eax
		mov    %ax,0x12(%edx)
		jmp    jump_cadc5
	jump_cad4d:
		mov    $0x23,%ecx
		mov    0x8(%esi),%ebx
		mov    0x4(%esi),%edx
		mov    (%esi),%eax
		call   ac_bang_new4
		xor    %eax,%eax
		mov    0x13(%esi),%al
		cmp    $0x2,%eax
		jne    jump_cad87
		push   $0x0
		mov    $0x200,%ecx
		mov    0x8(%esi),%ebx
		mov    (%esi),%eax
		xor    %edx,%edx
		push   $0x320
		sar    $0x8,%ebx
		sar    $0x8,%eax
		call   do_shockwave
	jump_cad87:
		mov    $0x3,%ebx
		mov    gameturn,%eax
		xor    %edx,%edx
		div    %ebx
		cmp    $0x1,%edx
		jb     jump_cadc1
		jbe    jump_cadad
		cmp    $0x2,%edx
		je     jump_cadb7
		jmp    jump_cadc5
	jump_cada3:
		movl   $0x3c,0x4c(%esp)
		jmp    jump_cadc5
	jump_cadad:
		movl   $0x3e,0x4c(%esp)
		jmp    jump_cadc5
	jump_cadb7:
		movl   $0x3f,0x4c(%esp)
		jmp    jump_cadc5
	jump_cadc1:
		test   %edx,%edx
		je     jump_cada3
	jump_cadc5:
		push   $0x0
		mov    0x8(%esi),%ebx
		mov    (%esi),%eax
		xor    %ecx,%ecx
		xor    %edx,%edx
		push   $0x0
		mov    0x54(%esp),%cx
		sar    $0x8,%ebx
		sar    $0x8,%eax
		call   ac_create_sound_effect
		mov    0x16(%esi),%ax
		mov    %ax,0x0(%ebp)
		xor    %eax,%eax
		mov    %di,%ax
		call   give_some_shrapnel
		mov    0x50(%esp),%edi
		test   %di,%di
		jne    jump_cab5c
		add    $0x54,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_cae0b:
		xor    %eax,%eax
		mov    0x13(%esi),%al
		cmp    $0x4,%eax
		jne    jump_cae5b
		mov    0xa(%esi),%eax
		sar    $0x18,%eax
		cmp    $0x14,%eax
		jg     jump_cae5b
		mov    0x16(%esi),%ax
		mov    %ax,0x0(%ebp)
		xor    %eax,%eax
		mov    %di,%ax
		mov    $0x14,%ecx
		call   give_some_shrapnel
		mov    0x8(%esi),%ebx
		mov    0x4(%esi),%edx
		mov    (%esi),%eax
		mov    0x50(%esp),%edi
		call   ac_bang_new4
		test   %di,%di
		jne    jump_cab5c
		add    $0x54,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_cae5b:
		mov    0x50(%esp),%edi
		mov    0x18(%esp),%ebp
	jump_cae63:
		test   %di,%di
		jne    jump_cab5c
	jump_cae6c:
		add    $0x54,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
find_and_time_travel:	/* 0x0CAE78 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    things,%edi
		push   $0x0
		mov    0x20(%eax),%ebx
		push   $0x1
		mov    0x1c(%eax),%edx
		xor    %ecx,%ecx
		push   $0x0
		mov    0x14(%eax),%cx
		mov    0x18(%eax),%eax
		call   ac_check_for_radius_hit_person
		mov    %eax,%esi
		test   %eax,%eax
		je     jump_caf43
		xor    %edx,%edx
		mov    0x9(%eax),%dl
		mov    things,%edi
		cmp    $0x2,%edx
		jne    jump_caed8
		mov    0x5e(%eax),%ax
		test   %ax,%ax
		je     jump_caed8
		mov    %edi,%edx
	jump_caec2:
		cwtl
		imul   $0xa8,%eax,%eax
		orb    $0x2,0x44(%edx,%eax,1)
		mov    0x60(%edx,%eax,1),%ax
		test   %ax,%ax
		jne    jump_caec2
	jump_caed8:
		xor    %eax,%eax
		mov    0x9(%esi),%al
		mov    %edi,things
		cmp    $0x5,%eax
		je     jump_caf1d
		cmp    $0x9,%eax
		je     jump_caf1d
		mov    %esi,%eax
		mov    $0x40,%ecx
		call   ac_delete_node
		push   $0x3
		mov    $0x33,%edx
		mov    0x44(%esi),%bh
		push   $0x0
		mov    %esi,%eax
		or     $0x2,%bh
		push   $0x64
		mov    %bh,0x44(%esi)
		mov    $0x7f,%ebx
		movb   $0x64,0x56(%esi)
		call   ac_play_dist_sample
	jump_caf1d:
		xor    %eax,%eax
		mov    0x9(%esi),%al
		cmp    $0x3,%eax
		jne    jump_caf43
		xor    %edx,%edx
		mov    %esi,%eax
		mov    0x99(%esi),%dl
		call   ac_stop_looped_weapon_sample
		testb  $0x1,0x44(%esi)
		je     jump_caf43
		mov    %esi,%eax
		call   ac_finalise_razor_wire
	jump_caf43:
		mov    things,%edi
	jump_caf49:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_time_pod)	/* 0x0CAF50 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		mov    %eax,%esi
		decw   0x28(%eax)
		mov    0xa(%eax),%ax
		cmp    $0x1,%ax
		jb     jump_cb0b1
		jbe    jump_cb004
		cmp    $0x2,%ax
		je     jump_cb08a
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_caf7d:
		addw   $0x10,0x14(%esi)
		mov    $0x38,%edx
		mov    0x14(%esi),%eax
		xor    %ebx,%ebx
		sar    $0x10,%eax
		call   ac_IsSamplePlaying
		test   %al,%al
		jne    jump_cafc3
		push   $0x1
		mov    $0x32,%eax
		mov    $0x40,%ecx
		mov    0x28(%esi),%dx
		push   $0xffffffff
		xor    %ebx,%ebx
		sub    %edx,%eax
		push   $0x64
		add    %eax,%eax
		mov    $0x38,%edx
		mov    %ax,%bx
		mov    %esi,%eax
		call   ac_play_dist_ssample
		jmp    jump_cafdf
	jump_cafc3:
		mov    $0x32,%eax
		sub    0x28(%esi),%ax
		add    %eax,%eax
		xor    %ebx,%ebx
		mov    $0x38,%edx
		mov    %ax,%bx
		mov    %esi,%eax
		call   set_dist_volume
	jump_cafdf:
		mov    0x26(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_caff8
		mov    0xa(%esi),%cx
		movw   $0x17,0x28(%esi)
		inc    %ecx
		mov    %cx,0xa(%esi)
	jump_caff8:
		mov    %esi,%eax
		call   find_and_time_travel
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_cb004:
		mov    0x14(%esi),%bx
		mov    0x26(%esi),%eax
		sub    $0x20,%ebx
		sar    $0x10,%eax
		mov    %bx,0x14(%esi)
		test   %eax,%eax
		jle    jump_cb06c
		mov    $0x38,%edx
		mov    0x14(%esi),%eax
		xor    %ebx,%ebx
		sar    $0x10,%eax
		call   ac_IsSamplePlaying
		test   %al,%al
		jne    jump_cb054
		push   $0x1
		mov    $0x40,%ecx
		mov    $0x38,%edx
		mov    0x28(%esi),%ax
		xor    %ebx,%ebx
		push   $0xffffffff
		shl    $0x2,%eax
		push   $0x64
		mov    %ax,%bx
		mov    %esi,%eax
		call   ac_play_dist_ssample
		jmp    jump_cb06c
	jump_cb054:
		mov    0x28(%esi),%ax
		xor    %ebx,%ebx
		shl    $0x2,%eax
		mov    $0x38,%edx
		mov    %ax,%bx
		mov    %esi,%eax
		call   set_dist_volume
	jump_cb06c:
		mov    0x26(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_cb0ba
		mov    0xa(%esi),%cx
		movw   $0x19,0x28(%esi)
		inc    %ecx
		mov    %cx,0xa(%esi)
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_cb08a:
		mov    0x14(%esi),%eax
		mov    $0x38,%edx
		sar    $0x10,%eax
		call   ac_stop_sample_using_heap
		mov    %esi,%eax
		call   ac_delete_snode
		mov    0x14(%esi),%eax
		sar    $0x10,%eax
		call   ac_remove_sthing
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_cb0b1:
		test   %ax,%ax
		je     jump_caf7d
	jump_cb0ba:
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
find_and_stasis:	/* 0x0CB0E4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x20,%esp
		mov    %eax,0x4(%esp)
		mov    %edx,(%esp)
		mov    0x4(%esp),%edi
		mov    0x18(%eax),%ebp
		mov    0x1c(%eax),%eax
		sar    $0x8,%ebp
		sar    $0x8,%eax
		mov    0x20(%edi),%edi
		mov    %eax,0x8(%esp)
		mov    %edx,%eax
		sar    $0x8,%edi
		sar    $0x8,%eax
		and    $0xffff,%eax
		cmp    $0x1,%eax
		jge    jump_cb121
		mov    $0x1,%eax
	jump_cb121:
		mov    %eax,0x14(%esp)
		mov    %ebp,%eax
		sar    $0x8,%eax
		mov    %ax,0xc(%esp)
		mov    %edi,%eax
		sar    $0x8,%eax
		mov    %ax,0x10(%esp)
		mov    0x14(%esp),%eax
		mov    %eax,%edx
		mov    %ax,0x18(%esp)
		neg    %edx
		mov    %dx,0x18(%esp)
		jmp    jump_cb152
	jump_cb14d:
		incw   0x18(%esp)
	jump_cb152:
		xor    %ebx,%ebx
		mov    0x16(%esp),%eax
		mov    0x14(%esp),%bx
		sar    $0x10,%eax
		cmp    %ebx,%eax
		jg     jump_cb2df
		mov    %bx,0x1c(%esp)
		neg    %ebx
		mov    %bx,0x1c(%esp)
		jmp    jump_cb1f6
	jump_cb179:
		sar    %ecx
	jump_cb17b:
		add    %ecx,%eax
		xor    %ecx,%ecx
		mov    (%esp),%esi
		mov    0x14(%ebx),%cx
		add    %esi,%ecx
		cmp    %ecx,%eax
		jge    jump_cb190
		orb    $0x2,0x47(%ebx)
	jump_cb190:
		mov    0x2(%ebx),%bx
		jmp    jump_cb1ec
	jump_cb196:
		imul   $0x3c,%eax,%eax
		mov    EXPORT_SYMBOL(sthings),%ecx
		add    %ecx,%eax
		mov    0x1c(%eax),%ecx
		mov    0x8(%esp),%edx
		sar    $0x8,%ecx
		sub    %edx,%ecx
		cmp    $0xb9,%ecx
		jge    jump_cb1db
		cmp    $0xffffff33,%ecx
		jle    jump_cb1db
		mov    0x18(%eax),%ecx
		sar    $0x8,%ecx
		mov    0x20(%eax),%esi
		sub    %ebp,%ecx
		sar    $0x8,%esi
		mov    %ecx,%eax
		sub    %edi,%esi
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %esi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
	jump_cb1db:
		movswl %bx,%eax
		imul   $0x3c,%eax,%eax
		mov    EXPORT_SYMBOL(sthings),%ebx
		mov    0x2(%ebx,%eax,1),%bx
	jump_cb1ec:
		test   %bx,%bx
		jne    jump_cb254
	jump_cb1f1:
		incw   0x1c(%esp)
	jump_cb1f6:
		xor    %eax,%eax
		mov    0x1a(%esp),%ebx
		mov    0x14(%esp),%ax
		sar    $0x10,%ebx
		cmp    %eax,%ebx
		jg     jump_cb14d
		mov    0xa(%esp),%eax
		mov    0x16(%esp),%ecx
		sar    $0x10,%eax
		sar    $0x10,%ecx
		add    %ecx,%eax
		test   %eax,%eax
		jle    jump_cb1f1
		cmp    $0x80,%eax
		jge    jump_cb1f1
		mov    0xe(%esp),%ecx
		sar    $0x10,%ecx
		add    %ecx,%ebx
		test   %ebx,%ebx
		jle    jump_cb1f1
		cmp    $0x80,%ebx
		jge    jump_cb1f1
		shl    $0x7,%ebx
		add    %ebx,%eax
		imul   $0x12,%eax,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%ebx
		mov    0x8(%ebx,%eax,1),%bx
		test   %bx,%bx
		je     jump_cb1f1
	jump_cb254:
		movswl %bx,%eax
		test   %eax,%eax
		jle    jump_cb196
		imul   $0xa8,%eax,%ebx
		mov    things,%eax
		add    %eax,%ebx
		xor    %ecx,%ecx
		mov    0x9(%ebx),%cl
		cmp    $0x3,%ecx
		jne    jump_cb294
		mov    0x4(%esp),%esi
		xor    %ecx,%ecx
		mov    0x38(%esi),%cx
		imul   $0xa8,%ecx,%ecx
		add    %eax,%ecx
		mov    0x50(%ebx),%al
		cmp    0x50(%ecx),%al
		je     jump_cb190
	jump_cb294:
		mov    0x1c(%ebx),%eax
		mov    0x8(%esp),%ecx
		sar    $0x8,%eax
		sub    %ecx,%eax
		cmp    $0x55,%eax
		jge    jump_cb190
		cmp    $0xffffffab,%eax
		jle    jump_cb190
		mov    0x18(%ebx),%eax
		sar    $0x8,%eax
		mov    0x20(%ebx),%esi
		sub    %ebp,%eax
		sar    $0x8,%esi
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		sub    %edi,%esi
		mov    %eax,%ecx
		mov    %esi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%ecx
		jle    jump_cb179
		sar    %eax
		jmp    jump_cb17b
	jump_cb2df:
		add    $0x20,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret

vtable_cb2e8:
		.long   func_cb31e
		.long   func_cb3ac
		.long   func_cb3d4
		.long   func_cb465


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_stasis_pod)	/* 0x0CB2F8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    %eax,%esi
		decw   0x28(%eax)
		mov    0xa(%eax),%ax
		cmp    $0x3,%ax
		ja     jump_caf49
		xor    %edx,%edx
		mov    %ax,%dx
		jmp    *%cs:vtable_cb2e8(,%edx,4)


/*----------------------------------------------------------------*/
func_cb31e:
/*----------------------------------------------------------------*/
		addw   $0x10,0x14(%esi)
		mov    $0x2c,%edx
		mov    0x14(%esi),%eax
		xor    %ebx,%ebx
		sar    $0x10,%eax
		call   ac_IsSamplePlaying
		test   %al,%al
		jne    jump_cb364
		push   $0x1
		mov    $0x32,%eax
		mov    $0x40,%ecx
		mov    0x28(%esi),%dx
		push   $0xffffffff
		xor    %ebx,%ebx
		sub    %edx,%eax
		push   $0x64
		add    %eax,%eax
		mov    $0x2c,%edx
		mov    %ax,%bx
		mov    %esi,%eax
		call   ac_play_dist_ssample
		jmp    jump_cb380
	jump_cb364:
		mov    $0x32,%eax
		sub    0x28(%esi),%ax
		add    %eax,%eax
		xor    %ebx,%ebx
		mov    $0x2c,%edx
		mov    %ax,%bx
		mov    %esi,%eax
		call   set_dist_volume
	jump_cb380:
		mov    0x26(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_cb399
		mov    0xa(%esi),%cx
		movw   $0x64,0x28(%esi)
		inc    %ecx
		mov    %cx,0xa(%esi)
	jump_cb399:
		xor    %edx,%edx
		mov    %esi,%eax
		mov    0x14(%esi),%dx
		call   find_and_stasis
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_cb3ac:
/*----------------------------------------------------------------*/
		mov    0x26(%esi),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		jge    jump_cb3c1
		inc    %eax
		movw   $0x17,0x28(%esi)
		mov    %ax,0xa(%esi)
	jump_cb3c1:
		xor    %edx,%edx
		mov    %esi,%eax
		mov    0x14(%esi),%dx
		call   find_and_stasis
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_cb3d4:
/*----------------------------------------------------------------*/
		mov    0x26(%esi),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jle    jump_cb437
		mov    $0x2c,%edx
		mov    0x14(%esi),%eax
		xor    %ebx,%ebx
		sar    $0x10,%eax
		call   ac_IsSamplePlaying
		test   %al,%al
		jne    jump_cb41f
		push   $0x1
		mov    $0x32,%eax
		mov    $0x40,%ecx
		mov    0x28(%esi),%bx
		mov    $0x2c,%edx
		sub    %ebx,%eax
		push   $0xffffffff
		add    %eax,%eax
		xor    %ebx,%ebx
		push   $0x64
		mov    %ax,%bx
		mov    %esi,%eax
		call   ac_play_dist_ssample
		jmp    jump_cb437
	jump_cb41f:
		mov    0x28(%esi),%ax
		xor    %ebx,%ebx
		shl    $0x2,%eax
		mov    $0x2c,%edx
		mov    %ax,%bx
		mov    %esi,%eax
		call   set_dist_volume
	jump_cb437:
		mov    0x14(%esi),%cx
		mov    0x26(%esi),%eax
		sub    $0x20,%ecx
		sar    $0x10,%eax
		mov    %cx,0x14(%esi)
		test   %eax,%eax
		jge    jump_caf49
		mov    0xa(%esi),%di
		movw   $0x19,0x28(%esi)
		inc    %edi
		mov    %di,0xa(%esi)
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_cb465:
/*----------------------------------------------------------------*/
		mov    0x14(%esi),%eax
		mov    $0x2c,%edx
		sar    $0x10,%eax
		call   ac_stop_sample_using_heap
		mov    %esi,%eax
		call   ac_delete_snode
		mov    0x14(%esi),%eax
		sar    $0x10,%eax
		call   ac_remove_sthing
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_screen_dark_curtain_down)	/* 0x0CB490 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x3d8,%esp
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		xor    %edi,%edi
		and    $0x1f,%al
		mov    %ax,%di
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		xor    %esi,%esi
		and    $0x1f,%al
		xor    %ecx,%ecx
		mov    %ax,%si
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		xor    %edx,%edx
		and    $0x1f,%al
		add    $0x14,%edi
		mov    %ax,%cx
		call   ac_LbRandomAnyShort
		and    $0x7,%ah
		add    $0x14,%esi
		mov    %ax,%dx
		call   ac_LbRandomAnyShort
		and    $0x7,%ah
		add    $0x14,%ecx
		movzwl %ax,%ebp
		call   ac_LbRandomAnyShort
		and    $0x7,%ah
		xor    %ebx,%ebx
		mov    %ecx,0x3d4(%esp)
		imul   %ebx,%ecx
		mov    %edi,0x3cc(%esp)
		imul   %ebx,%edi
		mov    %esi,0x3d0(%esp)
		imul   %ebx,%esi
		and    $0xffff,%eax
		add    %eax,%ecx
		add    %edx,%edi
		add    %ebp,%esi
		xor    %ebp,%ebp
	jump_cb51c:
		mov    %esi,%eax
		and    $0x7ff,%eax
		shl    $0x2,%eax
		mov    %eax,0x3c8(%esp)
		mov    %edi,%eax
		xor    %edx,%edx
		and    $0x7ff,%eax
		mov    %dx,(%esp,%ebp,1)
		mov    0x3c8(%esp),%edx
		mov    EXPORT_SYMBOL(lbSinTable)(,%eax,4),%eax
		add    EXPORT_SYMBOL(lbSinTable)+2048(%edx),%eax
		mov    %eax,0x3c8(%esp)
		mov    %ecx,%eax
		and    $0x7ff,%eax
		mov    0x3c8(%esp),%edx
		add    $0x2,%ebp
		sub    EXPORT_SYMBOL(lbSinTable)(,%eax,4),%edx
		inc    %ebx
		mov    %edx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,0x3c0(%esp)
		sar    $0xe,%eax
		mov    0x3d4(%esp),%edx
		mov    %eax,0x3c0(%esp)
		add    %edx,%ecx
		mov    0x3c0(%esp),%al
		mov    0x3d0(%esp),%edx
		mov    %al,0x27f(%esp,%ebx,1)
		mov    0x3cc(%esp),%eax
		add    %edx,%esi
		add    %eax,%edi
		cmp    $0x140,%ebx
		jl     jump_cb51c
	jump_cb5bb:
		xor    %ebx,%ebx
		xor    %edi,%edi
		xor    %ebp,%ebp
		mov    %ebx,0x3c4(%esp)
		jmp    jump_cb66d
	jump_cb5cd:
		xor    %ebx,%ebx
		mov    0x280(%esp,%edi,1),%bl
		lea    (%eax,%ebx,1),%esi
		sar    $0x4,%esi
		mov    %edx,%eax
		cmp    %esi,%edx
		jge    jump_cb614
		imul   $0x140,%edx,%edx
		add    %edi,%edx
	jump_cb5ea:
		test   %eax,%eax
		jl     jump_cb609
		cmp    $0xc7,%eax
		jg     jump_cb609
		mov    EXPORT_SYMBOL(lbDisplay)+4,%ebx # lbDisplay.WScreen
		xor    %ecx,%ecx
		mov    (%edx,%ebx,1),%cl
		mov    EXPORT_SYMBOL(pixmap)+0x1000(%ecx),%cl # pixmap.fade_table[0x1000+?]
		mov    %cl,(%edx,%ebx,1)
	jump_cb609:
		inc    %eax
		add    $0x140,%edx
		cmp    %esi,%eax
		jl     jump_cb5ea
	jump_cb614:
		xor    %ah,%ah
		mov    (%esp,%ebp,1),%bx
		mov    0x280(%esp,%edi,1),%al
		add    %eax,%ebx
		mov    %al,%ah
		inc    %ah
		mov    %ah,0x280(%esp,%edi,1)
		xor    %eax,%eax
		mov    0x280(%esp,%edi,1),%al
		mov    %eax,%edx
		sar    $0x5,%edx
		add    %edx,%eax
		mov    %al,0x280(%esp,%edi,1)
		xor    %eax,%eax
		mov    0x280(%esp,%edi,1),%al
		mov    %bx,(%esp,%ebp,1)
		cmp    $0xf0,%eax
		jle    jump_cb661
		movb   $0xf0,0x280(%esp,%edi,1)
	jump_cb661:
		inc    %edi
		add    $0x2,%ebp
		cmp    $0x140,%edi
		jge    jump_cb68d
	jump_cb66d:
		xor    %eax,%eax
		mov    (%esp,%ebp,1),%ax
		mov    %eax,%edx
		sar    $0x4,%edx
		cmp    $0xc8,%edx
		jl     jump_cb5cd
		incl   0x3c4(%esp)
		jmp    jump_cb661
	jump_cb68d:
		call   ac_swap_wscreen
		call   ac_dos_clock
		mov    %eax,%edx
	jump_cb699:
		call   ac_dos_clock
		cmp    %eax,%edx
		je     jump_cb699
		cmpl   $0x140,0x3c4(%esp)
		jl     jump_cb5bb
		add    $0x3d8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_traffic_unkn_func_01)	/* 0x0CB738 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x7c,%esp
		cmpl   $0x0,data_1dd91c
		jne    jump_cb86c
		mov    $0x28,%edx
		mov    $0x1,%ebx
		mov    EXPORT_SYMBOL(next_traffic_node),%cx
		mov    %dx,EXPORT_SYMBOL(render_area_b)
		mov    %dx,EXPORT_SYMBOL(render_area_a)
		cmp    %bx,%cx
		ja     jump_cb77c
		jmp    jump_cb7a9
	jump_cb774:
		inc    %ebx
		cmp    %si,%bx
		jb     jump_cb783
		jmp    jump_cb7a9
	jump_cb77c:
		mov    EXPORT_SYMBOL(next_traffic_node),%si
	jump_cb783:
		xor    %eax,%eax
		mov    %bx,%ax
		imul   $0x24,%eax,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edx
		add    %edx,%eax
		xor    %edx,%edx
		mov    0x12(%eax),%dx
		cmp    $0xff,%edx
		je     jump_cb774
		testb  $0x10,0x13(%eax)
		je     jump_cb774
		jmp    jump_cb7c6
	jump_cb7a9:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(next_traffic_node),%ax
		push   %eax
		push   $aNext_trafficD
		lea    0x8(%esp),%eax
		push   %eax
		xor    %ebx,%ebx
		call   ac_sprintf
		add    $0xc,%esp
	jump_cb7c6:
		movswl %bx,%eax
		mov    %eax,data_1dd91c
		mov    %eax,%edx
		shl    $0x3,%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edi
		shl    $0x2,%eax
		add    %eax,%edi
		movswl (%edi),%eax
		mov    %eax,data_1556f4
		mov    (%edi),%eax
		sar    $0x10,%eax
		mov    %edi,%ebx
		mov    %eax,data_1556f8
		mov    0x2(%edi),%eax
		mov    %edi,%ecx
		sar    $0x10,%eax
		add    $0x8,%edi
		mov    %eax,data_1556fc
		jmp    jump_cb80e
	jump_cb806:
		add    $0x2,%ebx
		inc    %ecx
		cmp    %edi,%ebx
		je     jump_cb86c
	jump_cb80e:
		cmpw   $0x0,0x6(%ebx)
		je     jump_cb806
		testb  $0xc0,0xe(%ecx)
		je     jump_cb806
		mov    0x4(%ebx),%eax
		sar    $0x10,%eax
		neg    %eax
		imul   $0x24,%eax,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edx
		movswl (%edx,%eax,1),%esi
		mov    0x2(%edx,%eax,1),%edx
		sar    $0x10,%edx
		mov    %esi,%eax
		mov    data_1556fc,%esi
		mov    data_1556f4,%ebp
		sub    %esi,%edx
		sub    %ebp,%eax
		neg    %edx
		call   ac_arctan
		and    $0xffff,%eax
		xor    %ebp,%ebp
		shl    $0x5,%eax
		mov    %ebp,data_1dd910
		mov    %eax,data_1dd908
		mov    %eax,data_1dd918
		jmp    jump_cb806
	jump_cb86c:
		mov    data_1dd91c,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edx
		shl    $0x2,%eax
		add    %edx,%eax
		movswl (%eax),%edx
		mov    %edx,0x70(%esp)
		mov    (%eax),%edx
		sar    $0x10,%edx
		mov    %edx,0x6c(%esp)
		mov    0x2(%eax),%edx
		sar    $0x10,%edx
		mov    0x70(%esp),%ecx
		mov    %edx,0x74(%esp)
		mov    data_1556f4,%edx
		mov    data_1556f8,%ebx
		sub    %edx,%ecx
		mov    0x6c(%esp),%edx
		sub    %ebx,%edx
		mov    %ecx,%ebx
		imul   %ecx,%ebx
		mov    %edx,0x78(%esp)
		imul   %edx,%edx
		mov    data_1556fc,%esi
		mov    0x74(%esp),%edi
		sub    %esi,%edi
		add    %edx,%ebx
		mov    %edi,%edx
		imul   %edi,%edx
		add    %ebx,%edx
		cmp    $0x40000,%edx
		jge    jump_cba12
		mov    %eax,%ebx
		mov    %eax,%esi
		add    $0x8,%eax
		mov    %eax,0x68(%esp)
		jmp    jump_cb971
	jump_cb8f5:
		test   $0x20,%dl
		je     jump_cb906
		movl   $0xffffff06,data_1556f0
		jmp    jump_cb961
	jump_cb906:
		movl   $0xffffff83,data_1556f0
		jmp    jump_cb961
	jump_cb912:
		mov    0x4(%ebx),%eax
		sar    $0x10,%eax
		neg    %eax
		imul   $0x24,%eax,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edx
		add    %edx,%eax
		movswl (%eax),%ecx
		mov    (%eax),%edx
		mov    0x2(%eax),%edi
		mov    0x6c(%esp),%eax
		sar    $0x10,%edx
		sub    %eax,%edx
		sar    $0x10,%edi
		mov    %edx,0x78(%esp)
		mov    0x74(%esp),%edx
		mov    0x70(%esp),%ebp
		sub    %edx,%edi
		sub    %ebp,%ecx
		mov    %edi,%edx
		mov    %ecx,%eax
		neg    %edx
		call   ac_arctan
		and    $0xffff,%eax
		shl    $0x5,%eax
		mov    %eax,data_1dd918
	jump_cb961:
		mov    0x68(%esp),%eax
		add    $0x2,%ebx
		inc    %esi
		cmp    %eax,%ebx
		je     jump_cba12
	jump_cb971:
		cmpw   $0x0,0x6(%ebx)
		je     jump_cb961
		testb  $0xc0,0xe(%esi)
		jne    jump_cb912
		mov    0x4(%ebx),%eax
		sar    $0x10,%eax
		mov    %eax,%ebp
		mov    %eax,data_1dd91c
		neg    %ebp
		mov    %ebp,data_1dd91c
		imul   $0x24,%ebp,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edx
		testb  $0x4,0x13(%edx,%eax,1)
		je     jump_cb9ad
		movl   $0x400,data_155700
	jump_cb9ad:
		imul   $0x24,data_1dd91c,%edx
		mov    EXPORT_SYMBOL(game_traffic_nodes),%eax
		testb  $0x8,0x12(%edx,%eax,1)
		je     jump_cb9ca
		movl   $0x800,data_155700
	jump_cb9ca:
		imul   $0x24,data_1dd91c,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edx
		testb  $0x8,0x13(%edx,%eax,1)
		je     jump_cb9e8
		movl   $0x1000,data_155700
	jump_cb9e8:
		imul   $0x24,data_1dd91c,%eax
		mov    EXPORT_SYMBOL(game_traffic_nodes),%edx
		add    %edx,%eax
		mov    0x12(%eax),%dl
		test   $0x10,%dl
		je     jump_cb8f5
		movl   $0xffffffba,data_1556f0
		jmp    jump_cb961
	jump_cba12:
		mov    %edi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%esi
		mov    0x78(%esp),%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebx
		mov    %ecx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %ebx,0x64(%esp)
		mov    %eax,%ebp
		mov    %esi,%edx
		cmp    %ebx,%eax
		jle    jump_cba53
		cmp    %esi,%eax
		jle    jump_cba68
		mov    %eax,%edx
		sar    $0x4,%edx
		add    %esi,%ebx
		sub    %edx,%eax
		mov    %ebx,%edx
		sar    %edx
		add    %eax,%edx
		mov    %ebx,%eax
		sar    $0x3,%eax
		jmp    jump_cba80
	jump_cba53:
		cmp    %esi,%ebx
		jle    jump_cba68
		mov    %ebx,%edx
		sar    $0x4,%edx
		sub    %edx,%ebx
		add    %esi,%eax
		mov    %ebx,%edx
		mov    %eax,%ebx
		sar    %ebx
		jmp    jump_cba7b
	jump_cba68:
		mov    %edx,%ebx
		sar    $0x4,%ebx
		mov    0x64(%esp),%eax
		sub    %ebx,%edx
		add    %ebp,%eax
		mov    %edx,%ebx
		mov    %eax,%edx
		sar    %edx
	jump_cba7b:
		sar    $0x3,%eax
		add    %ebx,%edx
	jump_cba80:
		sub    %eax,%edx
		mov    %edx,%eax
		mov    %eax,%ebx
		test   %eax,%eax
		jne    jump_cba8f
		mov    $0x1,%ebx
	jump_cba8f:
		mov    data_155700,%edx
		imul   %ecx,%edx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    data_155700,%esi
		mov    0x78(%esp),%edx
		imul   %esi,%edx
		mov    %eax,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %esi,%edx
		imul   %edi,%edx
		mov    %eax,0x78(%esp)
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		sub    data_1dd8fc,%ecx
		sar    $0x3,%ecx
		mov    data_1dd900,%edx
		mov    %eax,%edi
		mov    0x78(%esp),%eax
		mov    data_1dd904,%ebx
		sub    %edx,%eax
		sub    %ebx,%edi
		sar    $0x3,%eax
		sar    $0x3,%edi
		mov    %eax,0x78(%esp)
		cmp    $0xffffff38,%ecx
		jge    jump_cbafb
		mov    $0xffffff38,%ecx
	jump_cbafb:
		cmp    $0xc8,%ecx
		jle    jump_cbb08
		mov    $0xc8,%ecx
	jump_cbb08:
		cmpl   $0xffffff38,0x78(%esp)
		jge    jump_cbb1a
		movl   $0xffffff38,0x78(%esp)
	jump_cbb1a:
		cmpl   $0xc8,0x78(%esp)
		jle    jump_cbb2c
		movl   $0xc8,0x78(%esp)
	jump_cbb2c:
		cmp    $0xffffff38,%edi
		jge    jump_cbb39
		mov    $0xffffff38,%edi
	jump_cbb39:
		cmp    $0xc8,%edi
		jle    jump_cbb46
		mov    $0xc8,%edi
	jump_cbb46:
		mov    0x78(%esp),%eax
		mov    data_1dd8fc,%ebx
		mov    data_1dd904,%esi
		mov    data_1556f8,%ebp
		mov    data_1556fc,%edx
		add    %ecx,%ebx
		add    %edi,%esi
		mov    data_1dd900,%ecx
		mov    data_1556f4,%edi
		mov    %ebx,data_1dd8fc
		mov    %esi,data_1dd904
		add    %eax,%ecx
		mov    %ebx,%eax
		mov    %ecx,data_1dd900
		sar    $0x4,%eax
		mov    data_1dd908,%ebx
		add    %eax,%edi
		mov    %ecx,%eax
		mov    %edi,data_1556f4
		sar    $0x4,%eax
		mov    %edi,engn_xc
		add    %eax,%ebp
		mov    %esi,%eax
		mov    %ebp,data_1556f8
		sar    $0x4,%eax
		mov    %ebp,engn_yc
		add    %eax,%edx
		mov    data_1dd918,%eax
		mov    %edx,data_1556fc
		sub    %ebx,%eax
		mov    %edx,engn_zc
		cmp    $0xffff8000,%eax
		jge    jump_cbbd8
		add    $0x10000,%eax
	jump_cbbd8:
		cmp    $0x8000,%eax
		jle    jump_cbbe4
		sub    $0x10000,%eax
	jump_cbbe4:
		sub    data_1dd910,%eax
		sar    $0x3,%eax
		cmp    $0xfffffea2,%eax
		jge    jump_cbbf9
		mov    $0xfffffea2,%eax
	jump_cbbf9:
		cmp    $0x15e,%eax
		jle    jump_cbc05
		mov    $0x15e,%eax
	jump_cbc05:
		mov    data_1dd910,%esi
		add    %eax,%esi
		mov    %esi,%eax
		mov    data_1dd908,%edi
		sar    $0x3,%eax
		add    %eax,%edi
		xor    %ebx,%ebx
		mov    %edi,data_1dd908
		mov    %bx,data_1dd90a
		mov    data_1dd908,%eax
		mov    data_1dd90c,%ebp
		mov    %eax,EXPORT_SYMBOL(engn_anglexz)
		mov    data_1556f0,%eax
		sub    %ebp,%eax
		mov    %esi,data_1dd910
		cmp    $0xfffffc00,%eax
		jge    jump_cbc52
		add    $0x800,%eax
	jump_cbc52:
		cmp    $0x400,%eax
		jle    jump_cbc5e
		sub    $0x800,%eax
	jump_cbc5e:
		sub    data_1dd914,%eax
		sar    $0x3,%eax
		cmp    $0xffffffe7,%eax
		jge    jump_cbc71
		mov    $0xffffffe7,%eax
	jump_cbc71:
		cmp    $0x19,%eax
		jle    jump_cbc7b
		mov    $0x19,%eax
	jump_cbc7b:
		mov    data_1dd914,%ebx
		add    %eax,%ebx
		mov    %ebx,%eax
		mov    data_1dd90c,%ecx
		sar    $0x3,%eax
		add    %eax,%ecx
		mov    %ecx,%esi
		mov    %ecx,data_1dd90c
		and    $0x7ff,%esi
		mov    %ebx,data_1dd914
		mov    %esi,data_1dd90c
		mov    %esi,EXPORT_SYMBOL(dword_152EEC)
		add    $0x7c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_func_cc0d4)	/* 0xcc0d4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x2c,%esp
		mov    med2_font,%esi
		mov    %eax,0x8(%esp)
		mov    $0x1,%edx
		mov    $0x6,%ebp
		mov    (%eax),%edi
		xor    %ebx,%ebx
		mov    %edx,data_1ddb6c
		mov    (%edi),%ah
		mov    %ebx,data_1ddb68
		test   %ah,%ah
		je     jump_cc1cc
	jump_cc10b:
		xor    %eax,%eax
		mov    (%edi),%al
		imul   $0x6,%eax,%edx
		mov    med_font,%eax
		add    %edx,%eax
		mov    %ebp,0x10(%esp)
		sub    $0xba,%eax
		mov    %esi,med2_font
		mov    %eax,0x28(%esp)
		mov    $0x6,%eax
		mov    outro_unkn02,%edx
		mov    %eax,0xc(%esp)
		mov    data_1ddb68,%eax
		mov    0x28(%esp),%ebx
		cmp    %edx,%eax
		jg     jump_cc1b0
		lea    0x1(%eax),%ecx
		mov    %edx,%eax
		sub    %ecx,%eax
		add    %eax,%eax
		mov    %ecx,data_1ddb68
		cmp    $0x1f,%eax
		jle    jump_cc161
		mov    $0x1f,%eax
	jump_cc161:
		cmpl   $0x0,data_1ddb6c
		je     jump_cc187
		mov    data_1ddb68,%edx
		add    gameturn,%edx
		and    $0xf,%edx
		shl    $0x9,%edx
		mov    EXPORT_SYMBOL(lbSinTable)(%edx),%edx
		sar    $0xd,%edx
		add    %edx,%eax
	jump_cc187:
		mov    %esi,med2_font
		test   %eax,%eax
		jge    jump_cc193
		xor    %eax,%eax
	jump_cc193:
		mov    $0x3f,%ecx
		sub    %eax,%ecx
		mov    0xc(%esp),%edx
		shl    $0x8,%ecx
		mov    0x10(%esp),%eax
		add    $EXPORT_SYMBOL(pixmap),%ecx # pixmap.fade_table[?]
		call   ac_LbSpriteDrawRemap
	jump_cc1b0:
		mov    med2_font,%esi
		mov    0x28(%esp),%edx
		xor    %eax,%eax
		inc    %edi
		mov    0x4(%edx),%al
		mov    (%edi),%dl
		add    %eax,%ebp
		test   %dl,%dl
		jne    jump_cc10b
	jump_cc1cc:
		mov    0x8(%esp),%eax
		mov    $0xe,%ecx
		mov    0x4(%eax),%eax
		mov    %ecx,0x14(%esp)
		mov    %eax,0x4(%esp)
		jmp    jump_cc366
	jump_cc1e5:
		movl   $0x1,data_1ddb6c
		mov    0x28(%esp),%edx
		xor    %eax,%eax
		mov    0x14(%esp),%ebx
		mov    0x5(%edx),%al
		add    %eax,%ebx
		mov    (%esp),%eax
		mov    0x4(%eax),%eax
		mov    $0xc,%edi
		mov    %ebx,0x14(%esp)
		mov    (%eax),%bl
		mov    %eax,0x24(%esp)
		test   %bl,%bl
		je     jump_cc352
	jump_cc21b:
		mov    0x24(%esp),%edx
		xor    %eax,%eax
		mov    (%edx),%al
		imul   $0x6,%eax,%eax
		add    %esi,%eax
		sub    $0xba,%eax
		mov    (%edx),%cl
		mov    %eax,0x28(%esp)
		cmp    $0x20,%cl
		jne    jump_cc2a5
		lea    0x1(%edx),%ebx
		mov    %ebx,%eax
		mov    (%ebx),%ch
		xor    %edx,%edx
		cmp    %cl,%ch
		je     jump_cc27a
		mov    %esi,%ecx
	jump_cc24b:
		mov    (%eax),%bh
		test   %bh,%bh
		je     jump_cc27a
		cmp    $0xa,%bh
		je     jump_cc27a
		cmp    $0x5b,%bh
		je     jump_cc27a
		xor    %ebx,%ebx
		mov    (%eax),%bl
		imul   $0x6,%ebx,%ebx
		mov    -0xb6(%ecx,%ebx,1),%bl
		and    $0xff,%ebx
		add    %ebx,%edx
		mov    0x1(%eax),%bl
		inc    %eax
		cmp    $0x20,%bl
		jne    jump_cc24b
	jump_cc27a:
		mov    EXPORT_SYMBOL(lbDisplay)+24,%eax # lbDisplay.PhysicalScreenWidth
		add    %edi,%edx
		sub    $0x6,%eax
		cmp    %eax,%edx
		jle    jump_cc29d
		mov    0x14(%esp),%ebx
		add    $0x6,%ebx
		mov    $0xc,%edi
		mov    %ebx,0x14(%esp)
		jmp    jump_cc33e
	jump_cc29d:
		add    $0x4,%edi
		jmp    jump_cc33e
	jump_cc2a5:
		mov    0x14(%esp),%ebp
		mov    outro_unkn02,%ecx
		mov    %edi,0x20(%esp)
		mov    %eax,%ebx
		mov    data_1ddb68,%eax
		mov    %esi,med2_font
		cmp    %ecx,%eax
		jg     jump_cc32d
		inc    %eax
		mov    %eax,data_1ddb68
		mov    data_1ddb68,%edx
		mov    %ecx,%eax
		sub    %edx,%eax
		add    %eax,%eax
		cmp    $0x1f,%eax
		jle    jump_cc2e0
		mov    $0x1f,%eax
	jump_cc2e0:
		cmpl   $0x0,data_1ddb6c
		je     jump_cc306
		mov    data_1ddb68,%edx
		add    gameturn,%edx
		and    $0xf,%edx
		shl    $0x9,%edx
		mov    EXPORT_SYMBOL(lbSinTable)(%edx),%edx
		sar    $0xd,%edx
		add    %edx,%eax
	jump_cc306:
		mov    %esi,med2_font
		test   %eax,%eax
		jge    jump_cc312
		xor    %eax,%eax
	jump_cc312:
		mov    $0x3f,%ecx
		sub    %eax,%ecx
		mov    %ebp,%edx
		shl    $0x8,%ecx
		mov    0x20(%esp),%eax
		add    $EXPORT_SYMBOL(pixmap),%ecx # pixmap.fade_table[?]
		call   ac_LbSpriteDrawRemap
	jump_cc32d:
		mov    0x28(%esp),%edx
		xor    %eax,%eax
		mov    0x4(%edx),%al
		mov    med2_font,%esi
		add    %eax,%edi
	jump_cc33e:
		mov    0x24(%esp),%ebp
		inc    %ebp
		mov    0x0(%ebp),%bh
		mov    %ebp,0x24(%esp)
		test   %bh,%bh
		jne    jump_cc21b
	jump_cc352:
		mov    0x14(%esp),%eax
		mov    0x4(%esp),%edx
		add    $0xa,%eax
		inc    %edx
		mov    %eax,0x14(%esp)
		mov    %edx,0x4(%esp)
	jump_cc366:
		mov    0x4(%esp),%edx
		xor    %eax,%eax
		mov    (%edx),%al
		cmp    $0x64,%eax
		je     jump_cc4d5
		mov    $EXPORT_SYMBOL(people_credits_desc),%edx
		mov    $0xc,%ebp
		mov    $0x1,%ebx
		mov    outro_unkn02,%ecx
		shl    $0x3,%eax
		mov    %esi,med2_font
		mov    %ebx,data_1ddb6c
		add    %eax,%edx
		mov    data_1ddb68,%eax
		mov    %edx,(%esp)
		mov    (%edx),%edi
		cmp    %ecx,%eax
		jne    jump_cc403
		cmpl   $0xffffffff,data_155704
		je     jump_cc3c4
		mov    data_155702,%edx
		xor    %eax,%eax
		sar    $0x10,%edx
		call   ac_stop_sample_using_heap
	jump_cc3c4:
		xor    %edx,%edx
		call   ac_LbRandomAnyShort
		mov    %ax,%dx
		mov    $0x5,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		push   $0x3
		push   $0x0
		mov    $0x40,%ecx
		add    $0x2,%edx
		push   $0x64
		mov    %edx,data_155704
		mov    $0x7f,%ebx
		mov    data_155702,%edx
		xor    %eax,%eax
		sar    $0x10,%edx
		call   ac_play_sample_using_heap
	jump_cc403:
		mov    med2_font,%esi
	jump_cc409:
		mov    (%edi),%dh
		test   %dh,%dh
		je     jump_cc1e5
		xor    %eax,%eax
		mov    %dh,%al
		imul   $0x6,%eax,%eax
		mov    big_font,%edx
		add    %edx,%eax
		mov    outro_unkn02,%ecx
		sub    $0xba,%eax
		mov    %ebp,0x1c(%esp)
		mov    %eax,0x28(%esp)
		mov    0x14(%esp),%eax
		mov    %esi,med2_font
		mov    %eax,0x18(%esp)
		mov    data_1ddb68,%eax
		mov    0x28(%esp),%ebx
		cmp    %ecx,%eax
		jg     jump_cc4be
		inc    %eax
		mov    %eax,data_1ddb68
		mov    data_1ddb68,%edx
		mov    %ecx,%eax
		sub    %edx,%eax
		add    %eax,%eax
		cmp    $0x1f,%eax
		jle    jump_cc46c
		mov    $0x1f,%eax
	jump_cc46c:
		cmpl   $0x0,data_1ddb6c
		je     jump_cc492
		mov    data_1ddb68,%edx
		add    gameturn,%edx
		and    $0xf,%edx
		shl    $0x9,%edx
		mov    EXPORT_SYMBOL(lbSinTable)(%edx),%edx
		sar    $0xd,%edx
		add    %edx,%eax
	jump_cc492:
		mov    %esi,med2_font
		test   %eax,%eax
		jge    jump_cc49e
		xor    %eax,%eax
	jump_cc49e:
		mov    $0x3f,%edx
		sub    %eax,%edx
		mov    %edx,%eax
		mov    $EXPORT_SYMBOL(pixmap),%ecx # pixmap.fade_table[?]
		shl    $0x8,%eax
		mov    0x18(%esp),%edx
		add    %eax,%ecx
		mov    0x1c(%esp),%eax
		call   ac_LbSpriteDrawRemap
	jump_cc4be:
		mov    0x28(%esp),%edx
		xor    %eax,%eax
		mov    med2_font,%esi
		mov    0x4(%edx),%al
		inc    %edi
		add    %eax,%ebp
		jmp    jump_cc409
	jump_cc4d5:
		mov    %esi,med2_font
		add    $0x2c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_cc59c:
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		xor    %esi,%esi
		jmp    jump_cc5d6
	jump_cc5a5:
		xor    %ecx,%ecx
		mov    data_1ddb78(%esi),%cl
		imul   $0x6,%ecx,%ecx
		mov    med2_font,%ebx
	jump_cc5b6:
		add    %ecx,%ebx
		sub    $0xba,%ebx
		mov    %edi,%ecx
		shl    $0x8,%ecx
		add    $EXPORT_SYMBOL(pixmap),%ecx # pixmap.fade_table[?]
		call   ac_LbSpriteDrawRemap
	jump_cc5ce:
		add    $0xc,%esi
		cmp    $0x60,%esi
		je     jump_cc612
	jump_cc5d6:
		cmpb   $0x0,data_1ddb78(%esi)
		je     jump_cc5ce
		mov    data_1ddb70(%esi),%eax
		xor    %ebx,%ebx
		mov    data_1ddb74(%esi),%edx
		mov    data_1ddb7a(%esi),%bl
		movzbl data_1ddb79(%esi),%edi
		cmp    $0x1,%ebx
		jne    jump_cc5a5
		xor    %ebx,%ebx
		mov    data_1ddb78(%esi),%bl
		imul   $0x6,%ebx,%ebx
		mov    big_font,%ecx
		jmp    jump_cc5b6
	jump_cc612:
		call   ac_swap_wscreen
		call   ac_dos_clock
		mov    %eax,%ebx
	jump_cc61e:
		call   ac_dos_clock
		cmp    %eax,%ebx
		je     jump_cc61e
		mov    %eax,%edx
	jump_cc629:
		call   ac_dos_clock
		cmp    %eax,%edx
		je     jump_cc629
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_func_cc638)	/* 0xcc638 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		mov    %eax,%ecx
		mov    %edx,(%esp)
		xor    %eax,%eax
	jump_cc647:
		add    $0xc,%eax
		xor    %dl,%dl
		mov    %dl,data_1ddb6c(%eax)
		cmp    $0x60,%eax
		jne    jump_cc647
		mov    $0xe,%edx
		mov    $0xc,%ebx
		mov    %edx,0x8(%esp)
		mov    (%ecx),%dh
		mov    %ecx,%ebp
		test   %dh,%dh
		je     jump_cc709
	jump_cc671:
		mov    0x0(%ebp),%al
		mov    %al,data_1ddbcc
		xor    %eax,%eax
		mov    0x0(%ebp),%al
		imul   $0x6,%eax,%eax
		mov    $0x1,%dh
		mov    $0xe,%esi
		mov    %dh,data_1ddbce
		mov    big_font,%edx
		mov    $0x3f,%cl
		add    %edx,%eax
		mov    %ebx,data_1ddbc4
		sub    $0xba,%eax
		mov    %esi,data_1ddbc8
		mov    %cl,data_1ddbcd
		mov    0x4(%eax),%al
		and    $0xff,%eax
		inc    %ebp
		add    %eax,%ebx
		call   func_cc59c
		mov    $0xc,%eax
		jmp    jump_cc6ce
	jump_cc6c6:
		add    $0xc,%eax
		cmp    $0x60,%eax
		je     jump_cc6f7
	jump_cc6ce:
		lea    people_groups_count(%eax),%edi
		lea    data_1ddb70(%eax),%esi
		xor    %edx,%edx
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		mov    data_1ddb6d(%eax),%dl
		cmp    $0x20,%edx
		jle    jump_cc6c6
		mov    %dl,%ch
		sub    $0x4,%ch
		mov    %ch,data_1ddb6d(%eax)
		jmp    jump_cc6c6
	jump_cc6f7:
		xor    %cl,%cl
		mov    %cl,data_1ddbcc
		cmpb   $0x0,0x0(%ebp)
		jne    jump_cc671
	jump_cc709:
		mov    $0xc,%ebx
		mov    big_font,%eax
		mov    (%esp),%ebp
		mov    %ebx,0x4(%esp)
		mov    0x119(%eax),%al
		mov    0x8(%esp),%ecx
		and    $0xff,%eax
		add    %eax,%ecx
		mov    0x0(%ebp),%dl
		mov    %ecx,0x8(%esp)
		test   %dl,%dl
		je     jump_cc89f
	jump_cc73a:
		mov    0x0(%ebp),%dl
		cmp    $0x5b,%dl
		je     jump_cc89f
		cmp    $0xd,%dl
		je     jump_cc84f
		cmp    $0xa,%dl
		jne    jump_cc76d
		mov    0x8(%esp),%edx
		mov    $0xc,%eax
		add    $0x6,%edx
		mov    %eax,0x4(%esp)
		mov    %edx,0x8(%esp)
		jmp    jump_cc84f
	jump_cc76d:
		cmp    $0x20,%dl
		jne    jump_cc801
		lea    0x1(%ebp),%ebx
		xor    %edx,%edx
		mov    (%ebx),%cl
		mov    %ebx,%eax
		cmp    $0x20,%cl
		je     jump_cc7b9
	jump_cc784:
		mov    (%eax),%bl
		test   %bl,%bl
		je     jump_cc7b9
		cmp    $0xa,%bl
		je     jump_cc7b9
		cmp    $0x5b,%bl
		je     jump_cc7b9
		xor    %ebx,%ebx
		mov    (%eax),%bl
		imul   $0x6,%ebx,%ebx
		mov    med2_font,%ecx
		mov    -0xb6(%ecx,%ebx,1),%bl
		and    $0xff,%ebx
		mov    0x1(%eax),%ch
		inc    %eax
		add    %ebx,%edx
		cmp    $0x20,%ch
		jne    jump_cc784
	jump_cc7b9:
		mov    EXPORT_SYMBOL(lbDisplay)+24,%eax # lbDisplay.PhysicalScreenWidth
		mov    0x4(%esp),%ebx
		sub    $0x6,%eax
		add    %ebx,%edx
		cmp    %eax,%edx
		jle    jump_cc7ee
		mov    0x8(%esp),%edi
		mov    $0xc,%esi
		add    $0x9,%edi
		mov    %esi,0x4(%esp)
		mov    %edi,0x8(%esp)
		call   func_cc59c
		mov    $0xc,%eax
		jmp    jump_cc863
	jump_cc7ee:
		lea    0x4(%ebx),%ecx
		mov    %ecx,0x4(%esp)
		call   func_cc59c
		mov    $0xc,%eax
		jmp    jump_cc863
	jump_cc801:
		mov    0x4(%esp),%eax
		mov    %eax,data_1ddbc4
		mov    0x8(%esp),%eax
		mov    %eax,data_1ddbc8
		xor    %eax,%eax
		mov    %dl,%al
		imul   $0x6,%eax,%eax
		mov    $0x2,%cl
		mov    %dl,data_1ddbcc
		mov    med2_font,%edx
		mov    %cl,data_1ddbce
		add    %edx,%eax
		mov    $0x3f,%ch
		sub    $0xba,%eax
		mov    %ch,data_1ddbcd
		mov    0x4(%eax),%al
		mov    0x4(%esp),%edi
		and    $0xff,%eax
		add    %eax,%edi
		mov    %edi,0x4(%esp)
	jump_cc84f:
		call   func_cc59c
		mov    $0xc,%eax
		jmp    jump_cc863
	jump_cc85b:
		add    $0xc,%eax
		cmp    $0x60,%eax
		je     jump_cc88c
	jump_cc863:
		lea    people_groups_count(%eax),%edi
		lea    data_1ddb70(%eax),%esi
		xor    %edx,%edx
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		mov    data_1ddb6d(%eax),%dl
		cmp    $0x20,%edx
		jle    jump_cc85b
		mov    %dl,%ch
		sub    $0x4,%ch
		mov    %ch,data_1ddb6d(%eax)
		jmp    jump_cc85b
	jump_cc88c:
		xor    %al,%al
		mov    %al,data_1ddbcc
		mov    0x1(%ebp),%ah
		inc    %ebp
		test   %ah,%ah
		jne    jump_cc73a
	jump_cc89f:
		xor    %ebx,%ebx
		mov    $0x4,%cl
		mov    $0xc,%ebp
		call   func_cc59c
		mov    %ebp,%eax
		jmp    jump_cc8cf
	jump_cc8b1:
		xor    %al,%al
		inc    %ebx
		mov    %al,data_1ddbcc
		cmp    $0x8,%ebx
		jge    jump_cc8f5
		call   func_cc59c
		mov    %ebp,%eax
		jmp    jump_cc8cf
	jump_cc8c7:
		add    $0xc,%eax
		cmp    $0x60,%eax
		je     jump_cc8b1
	jump_cc8cf:
		lea    people_groups_count(%eax),%edi
		lea    data_1ddb70(%eax),%esi
		xor    %edx,%edx
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		movsl  %ds:(%esi),%es:(%edi)
		mov    data_1ddb6d(%eax),%dl
		cmp    $0x20,%edx
		jle    jump_cc8c7
		sub    %cl,%dl
		mov    %dl,data_1ddb6d(%eax)
		jmp    jump_cc8c7
	jump_cc8f5:
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_is_mission_active_in_city)	/* 0x0CCD10 */
/*----------------------------------------------------------------*/
		push   %ebx
		mov    %eax,%ebx
		cmp    $0x24,%ax
		jb     jump_cce0a
		jbe    jump_ccd98
		cmp    $0x3b,%ax
		jb     jump_ccde8
		jbe    jump_ccd52
		cmp    $0x49,%ax
		jb     jump_ccdde
		jbe    jump_ccd73
		cmp    $0x55,%ax
		jb     jump_ccdda
		jbe    jump_ccd77
		cmp    $0x5c,%ax
		je     jump_ccd77
		jmp    jump_ccdda
	jump_ccd52:
		and    $0xffff,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    data_1c52c0(,%eax,8),%eax
		sar    $0x18,%eax
		cmp    $0x3,%eax
		setg   %al
		pop    %ebx
		ret
	jump_ccd73:
		mov    $0x1,%al
		pop    %ebx
		ret
	jump_ccd77:
		and    $0xffff,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    data_1c52c0(,%eax,8),%eax
		sar    $0x18,%eax
		cmp    $0x4,%eax
		setg   %al
		pop    %ebx
		ret
	jump_ccd98:
		and    $0xffff,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    data_1c52c0(,%eax,8),%eax
		sar    $0x18,%eax
		cmp    $0x5,%eax
		setg   %al
		pop    %ebx
		ret
	jump_ccdb9:
		and    $0xffff,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    data_1c52c0(,%eax,8),%eax
		sar    $0x18,%eax
		cmp    $0x7,%eax
		setg   %al
		pop    %ebx
		ret
	jump_ccdda:
		xor    %al,%al
		pop    %ebx
		ret
	jump_ccdde:
		cmp    $0x48,%ax
		je     jump_ccdb9
		xor    %al,%al
		pop    %ebx
		ret
	jump_ccde8:
		cmp    $0x32,%ax
		jb     jump_cce00
		jbe    jump_ccd77
		cmp    $0x33,%ax
		jbe    jump_ccd77
		cmp    $0x3a,%ax
		je     jump_cce2e
		xor    %al,%al
		pop    %ebx
		ret
	jump_cce00:
		cmp    $0x2b,%ax
		je     jump_cce2e
		xor    %al,%al
		pop    %ebx
		ret
	jump_cce0a:
		cmp    $0xf,%ax
		jb     jump_cce5d
		jbe    jump_ccd52
		cmp    $0x1d,%ax
		jb     jump_cce4f
		jbe    jump_ccd52
		cmp    $0x22,%ax
		jb     jump_ccdda
		jbe    jump_ccd73
	jump_cce2e:
		and    $0xffff,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    data_1c52c0(,%eax,8),%eax
		sar    $0x18,%eax
		cmp    $0x2,%eax
		setg   %al
		pop    %ebx
		ret
	jump_cce4f:
		cmp    $0x11,%ax
		je     jump_ccd73
		xor    %al,%al
		pop    %ebx
		ret
	jump_cce5d:
		cmp    $0x5,%ax
		jb     jump_cce81
		jbe    jump_ccd52
		cmp    $0x6,%ax
		jbe    jump_ccd77
		cmp    $0xc,%ax
		je     jump_ccd77
		xor    %al,%al
		pop    %ebx
		ret
	jump_cce81:
		cmp    $0x4,%ax
		je     jump_cce2e
		xor    %al,%al
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_sub_CCE8C)	/* 0xCCE8C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %edi
		mov    %al,%cl
		mov    login_control__Money,%ebx
		xor    %edx,%edx
		xor    %eax,%eax
	jump_cce9c:
		cmp    EXPORT_SYMBOL(dword_155750)(%eax),%ebx
		jne    jump_ccedc
	jump_ccea4:
		movsbl %cl,%eax
		add    %eax,%edx
		test   %edx,%edx
		jge    jump_cceaf
		xor    %edx,%edx
	jump_cceaf:
		cmp    $0x7,%edx
		jle    jump_cceb9
		mov    $0x7,%edx
	jump_cceb9:
		mov    EXPORT_SYMBOL(dword_155750)(,%edx,4),%eax
		xor    %edi,%edi
		mov    %eax,login_control__Money
		mov    %eax,ingame__Credits
		mov    %eax,ingame__CashAtStart
		mov    %edi,ingame__Expenditure
		pop    %edi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_ccedc:
		add    $0x4,%eax
		inc    %edx
		cmp    $0x20,%eax
		jl     jump_cce9c
		jmp    jump_ccea4


/*----------------------------------------------------------------*/
my_net_session_callback:	/* 0x0CCEE8 */
/*----------------------------------------------------------------*/
		call   ac_swap_wscreen
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+1
		je     jump_ccefc
		mov    $0xfffffff9,%eax
		ret
	jump_ccefc:
		xor    %eax,%eax
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_is_unkn_current_player)	/* 0x0CCF00 */
/*----------------------------------------------------------------*/
		push   %edx
		xor    %eax,%eax
		mov    login_control__State,%al
		cmp    $0x6,%eax
		jne    jump_ccf11
		mov    $0x1,%al
		pop    %edx
		ret
	jump_ccf11:
		xor    %edx,%edx
		call   ac_LbNetworkPlayerNumber
		mov    net_host_player_no,%dl
		cmp    %edx,%eax
		sete   %al
		pop    %edx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_net_unkn_func_29)	/* 0x0CCF28 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x10,%esp
		mov    %eax,%edi
		mov    %edx,%esi
		mov    EXPORT_SYMBOL(lbDisplay)+16,%eax # lbDisplay.GraphicsWindowPtr
		mov    %eax,0xc(%esp)
		mov    EXPORT_SYMBOL(lbDisplay)+32,%eax # lbDisplay.GraphicsScreenWidth
		mov    %eax,0x4(%esp)
		mov    EXPORT_SYMBOL(lbDisplay)+48,%eax # lbDisplay.GraphicsWindowWidth
		mov    %eax,(%esp)
		mov    EXPORT_SYMBOL(lbDisplay)+52,%eax # lbDisplay.GraphicsWindowHeight
		mov    %eax,0x8(%esp)
		test   %cl,%cl
		jne    jump_ccf85
		movswl %dx,%edx
		mov    %edx,%eax
		shl    $0x8,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		movswl %di,%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(dword_1C6DE4),%edx
		and    $0xff,%ebx
		add    %eax,%edx
		mov    data_155170(%ebx),%al
		mov    %al,(%edx)
		jmp    jump_cd009
	jump_ccf85:
		xor    %eax,%eax
		mov    %cl,%al
		cmp    $0x1,%eax
		jne    jump_cd009
		mov    $0xff,%edx
		mov    EXPORT_SYMBOL(dword_1C6DE4),%eax
		mov    $0x60,%ebp
		mov    %eax,EXPORT_SYMBOL(lbDisplay)+16 # lbDisplay.GraphicsWindowPtr
		xor    %eax,%eax
		mov    %edx,EXPORT_SYMBOL(lbDisplay)+32 # lbDisplay.GraphicsScreenWidth
		mov    %bl,%al
		mov    %edx,EXPORT_SYMBOL(lbDisplay)+48 # lbDisplay.GraphicsWindowWidth
		mov    %ebp,EXPORT_SYMBOL(lbDisplay)+52 # lbDisplay.GraphicsWindowHeight
		mov    data_155170(%eax),%al
		and    %edx,%eax
		push   %eax
		xor    %eax,%eax
		movswl %si,%ecx
		mov    0x24(%esp),%al
		movswl %di,%ebx
		mov    data_1ddbde(,%eax,2),%edx
		mov    data_1ddbce(,%eax,2),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		call   ac_LbDrawLine
		mov    0xc(%esp),%eax
		mov    %eax,EXPORT_SYMBOL(lbDisplay)+16 # lbDisplay.GraphicsWindowPtr
		mov    0x4(%esp),%eax
		mov    %eax,EXPORT_SYMBOL(lbDisplay)+32 # lbDisplay.GraphicsScreenWidth
		mov    (%esp),%eax
		mov    %eax,EXPORT_SYMBOL(lbDisplay)+48 # lbDisplay.GraphicsWindowWidth
		mov    0x8(%esp),%eax
		mov    %eax,EXPORT_SYMBOL(lbDisplay)+52 # lbDisplay.GraphicsWindowHeight
	jump_cd009:
		xor    %eax,%eax
		mov    0x20(%esp),%al
		mov    %di,data_1ddbd0(,%eax,2)
		mov    %si,data_1ddbe0(,%eax,2)
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
net_unkn_func_30:	/* 0x0CD0AC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xe8,%esp
		mov    data_1c6d45,%eax
		sar    $0x18,%eax
		cmp    $0x14,%eax
		jge    jump_cd2ae
		mov    $0x1,%edx
		mov    %esp,%eax
		call   ac_LbNetworkSessionList
		cmp    $0x1,%eax
		jne    jump_cd191
		mov    $unkstruct04_arr,%ecx
		xor    %esi,%esi
		xor    %ebx,%ebx
		add    $0x6,%ecx
		jmp    jump_cd0f3
	jump_cd0ec:
		add    $0xda,%ecx
		inc    %ebx
	jump_cd0f3:
		mov    data_1c6d45,%eax
		sar    $0x18,%eax
		cmp    %eax,%ebx
		jge    jump_cd143
		imul   $0xda,%ebx,%eax
		mov    $unkstruct04_arr,%edi
		lea    0x6(%esp),%edx
		add    %eax,%edi
		mov    %ecx,%eax
		call   ac_strcmp
		test   %eax,%eax
		jne    jump_cd0ec
		mov    $0xda,%ecx
		mov    %esp,%esi
		push   %edi
		mov    %ecx,%eax
		shr    $0x2,%ecx
		repnz movsl %ds:(%esi),%es:(%edi)
		mov    %al,%cl
		and    $0x3,%cl
		repnz movsb %ds:(%esi),%es:(%edi)
		pop    %edi
		call   ac_dos_clock
		mov    $0x1,%esi
		mov    %eax,data_1ddbf0(,%ebx,4)
	jump_cd143:
		test   %si,%si
		jne    jump_cd191
		mov    data_1c6d45,%eax
		sar    $0x18,%eax
		imul   $0xda,%eax,%eax
		mov    $unkstruct04_arr,%edi
		mov    $0xda,%ecx
		mov    %esp,%esi
		add    %eax,%edi
		push   %edi
		mov    %ecx,%eax
		shr    $0x2,%ecx
		repnz movsl %ds:(%esi),%es:(%edi)
		mov    %al,%cl
		and    $0x3,%cl
		repnz movsb %ds:(%esi),%es:(%edi)
		pop    %edi
		call   ac_dos_clock
		mov    %eax,%edx
		mov    EXPORT_SYMBOL(byte_1C6D48),%al
		movsbl %al,%ebx
		inc    %al
		mov    %edx,data_1ddbf0(,%ebx,4)
		mov    %al,EXPORT_SYMBOL(byte_1C6D48)
	jump_cd191:
		xor    %edx,%edx
		mov    %edx,0xe4(%esp)
		mov    %edx,0xe0(%esp)
		jmp    jump_cd252
	jump_cd1a6:
		mov    $0xda,%ecx
		mov    %ebx,%esi
		mov    %ebp,%edi
		push   %edi
		mov    %ecx,%eax
		shr    $0x2,%ecx
		repnz movsl %ds:(%esi),%es:(%edi)
		mov    %al,%cl
		and    $0x3,%cl
		repnz movsb %ds:(%esi),%es:(%edi)
		pop    %edi
		add    $0x4,%edx
		mov    0xdc(%esp),%edi
		add    $0xda,%ebp
		add    $0xda,%ebx
		mov    data_1ddbec(%edx),%eax
		inc    %edi
		mov    %eax,data_1ddbe8(%edx)
		mov    %edi,0xdc(%esp)
	jump_cd1e9:
		mov    data_1c6d45,%eax
		mov    0xdc(%esp),%ecx
		sar    $0x18,%eax
		cmp    %ecx,%eax
		jg     jump_cd1a6
		decb   EXPORT_SYMBOL(byte_1C6D48)
		mov    data_1c6d45,%eax
		sar    $0x18,%eax
		imul   $0xda,%eax,%eax
		mov    $0xda,%ebx
		xor    %edx,%edx
		add    $unkstruct04_arr,%eax
		call   ac_memset
		mov    data_1c6d45,%eax
		sar    $0x18,%eax
		xor    %esi,%esi
		mov    %esi,data_1ddbf0(,%eax,4)
	jump_cd232:
		mov    0xe0(%esp),%ebp
		mov    0xe4(%esp),%eax
		add    $0x4,%ebp
		inc    %eax
		mov    %ebp,0xe0(%esp)
		mov    %eax,0xe4(%esp)
	jump_cd252:
		mov    data_1c6d45,%eax
		mov    0xe4(%esp),%ecx
		sar    $0x18,%eax
		cmp    %ecx,%eax
		jle    jump_cd2ae
		mov    0xe0(%esp),%edx
		call   ac_dos_clock
		sub    data_1ddbf0(%edx),%eax
		cmp    $0x190,%eax
		jbe    jump_cd232
		lea    0x1(%ecx),%eax
		mov    %eax,0xdc(%esp)
		lea    0x0(,%eax,4),%edx
		imul   $0xda,%eax,%eax
		lea    -0xda(%eax),%ebp
		mov    %eax,%ebx
		add    $unkstruct04_arr,%ebp
		add    $unkstruct04_arr,%ebx
		jmp    jump_cd1e9
	jump_cd2ae:
		mov    unkn_city_no,%eax
		sar    $0x18,%eax
		cmp    $0xffffffff,%eax
		jne    jump_cd2cc
		cmpb   $0x0,EXPORT_SYMBOL(byte_1C6D48)
		je     jump_cd2cc
		xor    %dh,%dh
		mov    %dh,EXPORT_SYMBOL(byte_15516C)
	jump_cd2cc:
		cmpb   $0x0,EXPORT_SYMBOL(byte_1C6D48)
		jne    jump_cd2dc
		movb   $0xff,EXPORT_SYMBOL(byte_15516C)
	jump_cd2dc:
		add    $0xe8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
net_unkn_func_31:	/* 0x0CD2EC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		mov    %eax,%esi
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(word_1811AE),%ax
		xor    %cl,%cl
		cmp    $0x1,%eax
		je     jump_cd3ec
		mov    $0x1108,%ebx
		mov    $unkstruct04_arr,%eax
		xor    %edx,%edx
		call   ac_memset
		mov    %cl,EXPORT_SYMBOL(byte_1C6D48)
		xor    %eax,%eax
	jump_cd320:
		add    $0x10,%eax
		xor    %dl,%dl
		mov    %dl,data_1c499c(%eax)
		cmp    $0x80,%eax
		jne    jump_cd320
		mov    $EXPORT_SYMBOL(nsvc),%eax
		call   ac_LbNetworkServiceStart
		cmp    $0x1,%eax
		je     jump_cd34d
		mov    EXPORT_SYMBOL(gui_strings)+0x8E0,%esi
		push   %esi
		jmp    jump_cd4a6
	jump_cd34d:
		mov    rate,%eax
		xor    %edx,%edx
		call   ac_LbNetworkSetBaud
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    $0x1,%bl
		mov    %eax,%edx
		shl    $0x2,%eax
		mov    %bl,EXPORT_SYMBOL(byte_1C4A7C)
		sub    %edx,%eax
		xor    %dh,%dh
		mov    EXPORT_SYMBOL(byte_1C4A6F),%bh
		mov    %dh,data_1a63ae(%eax)
		test   %bh,%bh
		je     jump_cd3ec
		call   ac_LbNetworkInit
		cmp    $0x1,%eax
		je     jump_cd3b5
		jmp    jump_cd3e0
	jump_cd3a0:
		mov    %bl,%cl
		jmp    jump_cd3ec
	jump_cd3a4:
		call   ac_LbNetworkHangUp
	jump_cd3a9:
		mov    EXPORT_SYMBOL(gui_strings)+0x90C,%ebx
		push   %ebx
		jmp    jump_cd4a6
	jump_cd3b5:
		call   ac_LbNetworkAnswer
		cmp    $0x1,%eax
		jl     jump_cd3d2
		jle    jump_cd3a0
		cmp    $0x4,%eax
		jl     jump_cd3ec
		cmp    $0x6,%eax
		jle    jump_cd3a4
		cmp    $0x7,%eax
		je     jump_cd3a9
		jmp    jump_cd3ec
	jump_cd3d2:
		cmp    $0xfffffff9,%eax
		jl     jump_cd3ec
		jle    jump_cd3a4
		cmp    $0xffffffff,%eax
		je     jump_cd3a4
		jmp    jump_cd3ec
	jump_cd3e0:
		mov    EXPORT_SYMBOL(gui_strings)+0x90C,%edx
		push   %edx
		jmp    jump_cd4a6
	jump_cd3ec:
		mov    $login_name,%edx
		mov    %esi,%eax
		movw   $0x8,0x10(%esi)
		call   ac_LbNetworkSessionJoin
		cmp    $0x1,%eax
		jne    jump_cd49f
		mov    $0x5,%cl
		mov    $data_1811b4,%edi
		mov    %cl,login_control__State
		call   ac_LbNetworkHostPlayerNumber
		mov    $0x1,%ch
		mov    %al,net_host_player_no
		call   ac_LbNetworkSessionNumberPlayers
		mov    %ch,EXPORT_SYMBOL(byte_1C6D4A)
		mov    $0x28,%ecx
		mov    %al,EXPORT_SYMBOL(net_players_num)
		push   %edi
		mov    %ecx,%eax
		shr    $0x2,%ecx
		repnz movsl %ds:(%esi),%es:(%edi)
		mov    %al,%cl
		and    $0x3,%cl
		repnz movsb %ds:(%esi),%es:(%edi)
		pop    %edi
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(word_1811AE),%ax
		cmp    $0x1,%eax
		je     jump_cd478
		movzbl EXPORT_SYMBOL(local_player_no),%esi
		lea    0x0(,%esi,8),%eax
		add    %esi,%eax
		shl    $0x3,%eax
		sub    %esi,%eax
		add    %eax,%eax
		mov    %eax,%esi
		shl    $0x2,%eax
		sub    %esi,%eax
		xor    %dl,%dl
		mov    %dl,data_1a63ae(%eax)
	jump_cd478:
		mov    $99,%eax # Originally multiplayer missions had index 1
		mov    $0x11,%dh
		call   ac_load_missions
		xor    %eax,%eax
	jump_cd486:
		add    $0x1a,%eax
		mov    %dh,data_1c5b3e(%eax)
		cmp    $0xd0,%eax
		jne    jump_cd486
		mov    $0x1,%al
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_cd49f:
		mov    EXPORT_SYMBOL(gui_strings)+0x90C,%edi
		push   %edi
	jump_cd4a6:
		push   $EXPORT_SYMBOL(alert_text)
		call   ac_sprintf
		add    $0x8,%esp
		test   %cl,%cl
		je     jump_cd4bc
		call   ac_LbNetworkHangUp
	jump_cd4bc:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(word_1811AE),%ax
		cmp    $0x1,%eax
		je     jump_cd4e1
		cmpb   $0x0,EXPORT_SYMBOL(byte_1C4A7C)
		je     jump_cd4d7
		call   ac_LbNetworkReset
	jump_cd4d7:
		xor    %cl,%cl
		mov    %cl,EXPORT_SYMBOL(byte_1C4A7C)
		jmp    jump_cd515
	jump_cd4e1:
		cmpb   $0x0,EXPORT_SYMBOL(byte_1C4A7C)
		jne    jump_cd515
		mov    $0x2,%edx
		mov    $asc19200,%ebp
		mov    EXPORT_SYMBOL(gui_strings)+0x7CC,%eax
		mov    %dx,EXPORT_SYMBOL(word_1811AE)
		mov    %eax,EXPORT_SYMBOL(net_protocol_select_button)+0x08
		mov    $ASM_do_serial_speed_switch,%eax
		mov    %ebp,EXPORT_SYMBOL(net_protocol_option_button)+0x8
		mov    %eax,EXPORT_SYMBOL(net_protocol_option_button)+0x18
	jump_cd515:
		mov    $0x1,%ch
		xor    %al,%al
		mov    %ch,show_alert
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
net_unkn_func_32:	/* 0x0CD528 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		xor    %ah,%ah
		mov    %ah,(%esp)
		call   ac_LbNetworkSessionActive
		test   %eax,%eax
		jne    jump_cd79b
		mov    EXPORT_SYMBOL(word_1811AE),%ax
		cmp    $0x1,%eax
		je     jump_cd63f
		mov    $0x1108,%ebx
		mov    $unkstruct04_arr,%eax
		xor    %edx,%edx
		call   ac_memset
		xor    %dl,%dl
		xor    %eax,%eax
		mov    %dl,EXPORT_SYMBOL(byte_1C6D48)
	jump_cd56d:
		add    $0x10,%eax
		xor    %dh,%dh
		mov    %dh,data_1c499c(%eax)
		cmp    $0x80,%eax
		jne    jump_cd56d
		mov    $EXPORT_SYMBOL(nsvc),%eax
		call   ac_LbNetworkServiceStart
		cmp    $0x1,%eax
		je     jump_cd59a
		mov    EXPORT_SYMBOL(gui_strings)+0x8E0,%ecx
		push   %ecx
		jmp    jump_cd715
	jump_cd59a:
		mov    rate,%eax
		xor    %edx,%edx
		call   ac_LbNetworkSetBaud
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		xor    %bl,%bl
		mov    %bl,data_1a63ae(%eax)
		mov    $0x1,%bh
		mov    EXPORT_SYMBOL(byte_1C4A6F),%cl
		mov    %bh,EXPORT_SYMBOL(byte_1C4A7C)
		test   %cl,%cl
		je     jump_cd63f
		call   ac_LbNetworkInit
		cmp    $0x1,%eax
		je     jump_cd603
		jmp    jump_cd633
	jump_cd5ed:
		mov    %bh,(%esp)
		jmp    jump_cd63f
	jump_cd5f2:
		call   ac_LbNetworkHangUp
	jump_cd5f7:
		mov    EXPORT_SYMBOL(gui_strings)+0x90C,%ebx
		push   %ebx
		jmp    jump_cd715
	jump_cd603:
		mov    $net_unkn2_text,%eax
		call   ac_LbNetworkDial
		cmp    $0x1,%eax
		jl     jump_cd625
		jle    jump_cd5ed
		cmp    $0x4,%eax
		jl     jump_cd63f
		cmp    $0x6,%eax
		jle    jump_cd5f2
		cmp    $0x7,%eax
		je     jump_cd5f7
		jmp    jump_cd63f
	jump_cd625:
		cmp    $0xfffffff9,%eax
		jl     jump_cd63f
		jle    jump_cd5f2
		cmp    $0xffffffff,%eax
		je     jump_cd5f2
		jmp    jump_cd63f
	jump_cd633:
		mov    EXPORT_SYMBOL(gui_strings)+0x90C,%edx
		push   %edx
		jmp    jump_cd715
	jump_cd63f:
		mov    $0x10,%ecx
		mov    $login_name,%esi
		mov    $data_1811ba,%edi
		mov    $0x8,%edx
		push   %edi
		mov    %ecx,%eax
		shr    $0x2,%ecx
		repnz movsl %ds:(%esi),%es:(%edi)
		mov    %al,%cl
		and    $0x3,%cl
		repnz movsb %ds:(%esi),%es:(%edi)
		pop    %edi
		xor    %al,%al
		mov    %dx,data_1811c4
		mov    %al,data_1811c2
		mov    %edi,%edx
		mov    $data_1811b4,%eax
		call   ac_LbNetworkSessionCreate
		cmp    $0x1,%eax
		jne    jump_cd70e
		mov    $0x5,%ah
		mov    $0xff,%dl
		mov    %ah,login_control__State
		call   ac_LbNetworkHostPlayerNumber
		mov    %al,net_host_player_no
		call   ac_LbNetworkSessionNumberPlayers
		mov    %al,EXPORT_SYMBOL(net_players_num)
		xor    %eax,%eax
		mov    %dl,EXPORT_SYMBOL(byte_15516C)
		mov    EXPORT_SYMBOL(word_1811AE),%ax
		mov    %dl,EXPORT_SYMBOL(byte_15516D)
		cmp    $0x1,%eax
		je     jump_cd6e4
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		xor    %bl,%bl
		mov    %bl,data_1a63ae(%eax)
	jump_cd6e4:
		mov    $99,%eax # Originally multiplayer missions had index 1
		mov    $0x11,%bh
		call   ac_load_missions
		xor    %eax,%eax
	jump_cd6f2:
		add    $0x1a,%eax
		mov    %bh,data_1c5b3e(%eax)
		cmp    $0xd0,%eax
		jne    jump_cd6f2
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_cd70e:
		mov    EXPORT_SYMBOL(gui_strings)+0x90C,%esi
		push   %esi
	jump_cd715:
		push   $EXPORT_SYMBOL(alert_text)
		call   ac_sprintf
		add    $0x8,%esp
		cmpb   $0x0,(%esp)
		je     jump_cd72d
		call   ac_LbNetworkHangUp
	jump_cd72d:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(word_1811AE),%ax
		cmp    $0x1,%eax
		je     jump_cd752
		cmpb   $0x0,EXPORT_SYMBOL(byte_1C4A7C)
		je     jump_cd748
		call   ac_LbNetworkReset
	jump_cd748:
		xor    %ah,%ah
		mov    %ah,EXPORT_SYMBOL(byte_1C4A7C)
		jmp    jump_cd787
	jump_cd752:
		cmpb   $0x0,EXPORT_SYMBOL(byte_1C4A7C)
		jne    jump_cd787
		mov    $0x2,%ebx
		mov    $asc19200,%edi
		mov    $ASM_do_serial_speed_switch,%ebp
		mov    EXPORT_SYMBOL(gui_strings)+0x7CC,%eax
		mov    %bx,EXPORT_SYMBOL(word_1811AE)
		mov    %eax,EXPORT_SYMBOL(net_protocol_select_button)+0x08
		mov    %edi,EXPORT_SYMBOL(net_protocol_option_button)+0x8
		mov    %ebp,EXPORT_SYMBOL(net_protocol_option_button)+0x18
	jump_cd787:
		mov    $0x1,%dl
		xor    %al,%al
		mov    %dl,show_alert
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_cd79b:
		xor    %al,%al
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_check_buy_sell_button)	/* 0x0CE5A8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		xor    %ah,%ah
		mov    %ah,(%esp)
		xor    %eax,%eax
		mov    screentype,%al
		cmp    $0x5,%eax
		jne    jump_ce740
		mov    data_155161,%eax
		sar    $0x18,%eax
		cmp    $0xffffffff,%eax
		je     jump_ce781
		lea    0x1(%eax),%edx
		imul   $0x19,%edx,%ebx # sizeof(struct WeaponDef)
		mov    data_1c4d22,%ecx
		sar    $0x18,%ecx
		cmp    $0x4,%ecx
		je     jump_ce6a4
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		shl    $0x2,%ecx
		sub    %edx,%eax
		lea    (%eax,%ecx,1),%edx
		mov    data_155161,%ecx
		mov    $0x1,%eax
		sar    $0x18,%ecx
		shl    %cl,%eax
		test   %eax,data_1a63b0(%edx)
		je     jump_ce666
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(weapon_defs)+20(%ebx),%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x3,%eax
		add    %edx,%eax
		add    %eax,%eax
		push   %eax
		push   $ascD_6
		mov    $0x1,%ch
		push   $equip_cost_text
		mov    %ch,0xc(%esp)
		jmp    jump_ce779
	jump_ce666:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(weapon_defs)+20(%ebx),%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x3,%eax
		add    %edx,%eax
		shl    $0x2,%eax
		push   %eax
		push   $ascD_7
		mov    $0x2,%cl
		push   $equip_cost_text
		mov    %cl,0xc(%esp)
		jmp    jump_ce779
	jump_ce696:
		inc    %edx
		add    $0x4,%eax
		cmp    $0x4,%edx
		jb     jump_ce6d8
		jmp    jump_ce781
	jump_ce6a4:
		movb   $0x1,(%esp)
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(weapon_defs)+20(%ebx),%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x3,%eax
		add    %edx,%eax
		add    %eax,%eax
		push   %eax
		push   $ascD_8
		push   $equip_cost_text
		xor    %edx,%edx
		call   ac_sprintf
		add    $0xc,%esp
		xor    %eax,%eax
	jump_ce6d8:
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(local_player_no),%bl
		imul   $0x1aa,%ebx,%ebx
		mov    data_155161,%ecx
		mov    $0x1,%esi
		sar    $0x18,%ecx
		shl    %cl,%esi
		mov    %esi,%ecx
		test   %ecx,data_1a63b0(%ebx,%eax,1)
		jne    jump_ce696
		mov    data_155161,%edx
		sar    $0x18,%edx
		mov    $0x2,%al
		inc    %edx
		mov    %al,(%esp)
		imul   $0x19,%edx,%eax # sizeof(struct WeaponDef)
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(weapon_defs)+20(%eax),%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x3,%eax
		add    %edx,%eax
		shl    $0x2,%eax
		push   %eax
		push   $ascD_9
		jmp    jump_ce774
	jump_ce740:
		mov    data_155162,%eax
		mov    $0x2,%dl
		sar    $0x18,%eax
		mov    %dl,(%esp)
		lea    0x1(%eax),%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(mod_defs)+20(,%eax,8),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		add    %eax,%eax
		push   %eax
		push   $ascD_10
	jump_ce774:
		push   $equip_cost_text
	jump_ce779:
		call   ac_sprintf
		add    $0xc,%esp
	jump_ce781:
		xor    %eax,%eax
		mov    (%esp),%al
		cmp    $0x2,%eax
		jne    jump_ce7a2
		mov    EXPORT_SYMBOL(gui_strings)+0x6D0,%eax
		mov    $ac_do_equip_offer_buy,%ebp
		mov    %eax,EXPORT_SYMBOL(equip_offer_buy_button)+0x08
		mov    %ebp,EXPORT_SYMBOL(equip_offer_buy_button)+0x18
		jmp    jump_ce7bc
	jump_ce7a2:
		cmp    $0x1,%eax
		jne    jump_ce7bc
		mov    EXPORT_SYMBOL(gui_strings)+0x65C,%eax
		mov    $ac_sell_equipment,%edi
		mov    %eax,EXPORT_SYMBOL(equip_offer_buy_button)+0x08
		mov    %edi,EXPORT_SYMBOL(equip_offer_buy_button)+0x18
	jump_ce7bc:
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
	jump_ce7c1:
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_font_height)	/* 0x0CE7C8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		push   %esi
		push   %edi
		mov    EXPORT_SYMBOL(lbFontPtr),%edx
		cmp    EXPORT_SYMBOL(small_font),%edx
		je     jump_ce7e2
		cmp    small2_font,%edx
		jne    jump_ce80b
	jump_ce7e2:
		test   %edx,%edx
		je     jump_ce803
		xor    %ebx,%ebx
		mov    %al,%bl
		sub    $0x1f,%ebx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		mov    %edx,%ebx
		mov    0x5(%ebx,%eax,2),%al
		and    $0xff,%eax
		jmp    jump_ce805
	jump_ce803:
		xor    %eax,%eax
	jump_ce805:
		dec    %eax
		jmp    jump_ce92f
	jump_ce80b:
		mov    small_med_font,%edi
		cmp    %edi,%edx
		jne    jump_ce884
		cmp    $0x61,%al
		jl     jump_ce852
		cmp    $0x7a,%al
		jg     jump_ce852
		test   %edi,%edi
		je     jump_ce843
		and    $0xff,%eax
		lea    -0x1f(%eax),%ebx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		add    %eax,%eax
		mov    %edi,%ebx
		add    %edi,%eax
		xor    %edi,%ebx
		mov    0x5(%eax),%bl
		jmp    jump_ce845
	jump_ce843:
		xor    %ebx,%ebx
	jump_ce845:
		mov    %bl,%al
		mov    %edx,EXPORT_SYMBOL(lbFontPtr)
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ebx
		ret
	jump_ce852:
		test   %edx,%edx
		je     jump_ce874
		and    $0xff,%eax
		lea    -0x1f(%eax),%ebx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		mov    %edx,%ebx
		mov    0x5(%ebx,%eax,2),%al
		and    $0xff,%eax
		jmp    jump_ce876
	jump_ce874:
		xor    %eax,%eax
	jump_ce876:
		sub    $0x2,%eax
		mov    %edx,EXPORT_SYMBOL(lbFontPtr)
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ebx
		ret
	jump_ce884:
		cmp    med_font,%edx
		je     jump_ce894
		cmp    med2_font,%edx
		jne    jump_ce8c6
	jump_ce894:
		test   %edx,%edx
		je     jump_ce8b6
		and    $0xff,%eax
		lea    -0x1f(%eax),%ebx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		mov    %edx,%ebx
		mov    0x5(%ebx,%eax,2),%al
		and    $0xff,%eax
		jmp    jump_ce8b8
	jump_ce8b6:
		xor    %eax,%eax
	jump_ce8b8:
		sub    $0x2,%eax
		mov    %edx,EXPORT_SYMBOL(lbFontPtr)
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ebx
		ret
	jump_ce8c6:
		mov    big_font,%esi
		cmp    %esi,%edx
		jne    jump_ce902
		test   %esi,%esi
		je     jump_ce8f2
		and    $0xff,%eax
		lea    -0x1f(%eax),%ebx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		mov    %esi,%ebx
		mov    0x5(%ebx,%eax,2),%al
		and    $0xff,%eax
		jmp    jump_ce8f4
	jump_ce8f2:
		xor    %eax,%eax
	jump_ce8f4:
		sub    $0x4,%eax
		mov    %edx,EXPORT_SYMBOL(lbFontPtr)
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ebx
		ret
	jump_ce902:
		test   %edx,%edx
		je     jump_ce92d
		and    $0xff,%eax
		lea    -0x1f(%eax),%ebx
		lea    0x0(,%ebx,4),%eax
		sub    %ebx,%eax
		mov    %edx,%ebx
		mov    0x5(%ebx,%eax,2),%al
		and    $0xff,%eax
		mov    %edx,EXPORT_SYMBOL(lbFontPtr)
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ebx
		ret
	jump_ce92d:
		xor    %eax,%eax
	jump_ce92f:
		mov    %edx,EXPORT_SYMBOL(lbFontPtr)
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_update_flic_mods)	/* 0x0CE93C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		mov    data_1c4d22,%edx
		sar    $0x18,%edx
		cmp    $0x4,%edx
		je     jump_ce996
		mov    data_1c4c20(,%edx,2),%bx
		shl    $0x7,%ebx
		shr    $0xd,%bx
		mov    %bl,(%eax)
		mov    data_1c4c20(,%edx,2),%bx
		shl    $0x4,%ebx
		shr    $0xd,%bx
		mov    %bl,0x1(%eax)
		mov    data_1c4c20(,%edx,2),%bx
		shl    $0xa,%ebx
		shr    $0xd,%bx
		mov    %bl,0x2(%eax)
		mov    data_1c4c20(,%edx,2),%dx
		and    $0x7,%dl
		mov    %dl,0x3(%eax)
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_ce996:
		mov    %eax,%edx
		lea    0x4(%eax),%ecx
	jump_ce99b:
		movb   $0x3,(%edx)
		inc    %edx
		cmp    %ecx,%edx
		jne    jump_ce99b
		xor    %ecx,%edx
		jmp    jump_ce9b3
	jump_ce9a7:
		add    $0x2,%edx
		cmp    $0x8,%edx
		je     jump_ce7c1
	jump_ce9b3:
		mov    data_1c4c20(%edx),%bx
		shl    $0x7,%ebx
		xor    %ecx,%ecx
		shr    $0xd,%bx
		movzbl (%eax),%esi
		mov    %bx,%cx
		cmp    %esi,%ecx
		jge    jump_ce9cf
		mov    %bl,(%eax)
	jump_ce9cf:
		mov    data_1c4c20(%edx),%bx
		xor    %esi,%esi
		shl    $0x4,%ebx
		xor    %ecx,%ecx
		shr    $0xd,%bx
		mov    0x1(%eax),%cl
		mov    %bx,%si
		cmp    %ecx,%esi
		jge    jump_ce9ee
		mov    %bl,0x1(%eax)
	jump_ce9ee:
		mov    data_1c4c20(%edx),%bx
		xor    %esi,%esi
		shl    $0xa,%ebx
		xor    %ecx,%ecx
		shr    $0xd,%bx
		mov    0x2(%eax),%cl
		mov    %bx,%si
		cmp    %ecx,%esi
		jge    jump_cea0d
		mov    %bl,0x2(%eax)
	jump_cea0d:
		mov    data_1c4c20(%edx),%bx
		xor    %bh,%bh
		xor    %ecx,%ecx
		and    $0x7,%bl
		movzbl 0x3(%eax),%esi
		mov    %bx,%cx
		cmp    %esi,%ecx
		jge    jump_ce9a7
		mov    %bl,0x3(%eax)
		jmp    jump_ce9a7


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_load_save_slot_names)	/* 0x0CF150 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x20,%esp
		xor    %esi,%esi
		xor    %ecx,%ecx
		mov    $0x19,%ebp
		jmp    jump_cf1c1
	jump_cf164:
		push   %eax
		mov    paQdataSavegam_6,%edx
		push   %edx
	jump_cf16c:
		lea    0x8(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x2,%edx
		mov    %esp,%eax
		call   ac_LbFileOpen
		mov    %eax,%edi
		cmp    $0xffffffff,%eax
		je     jump_cf1b0
		mov    $EXPORT_SYMBOL(save_slot_names),%edx
		mov    %ebp,%ebx
		add    %ecx,%edx
		call   ac_LbFileRead
		cmp    $0x19,%eax
		je     jump_cf1a7
		xor    %dl,%dl
		mov    %dl,EXPORT_SYMBOL(save_slot_names)(%ecx)
	jump_cf1a7:
		mov    %edi,%eax
		call   ac_LbFileClose
		jmp    jump_cf1b8
	jump_cf1b0:
		xor    %ah,%ah
		mov    %ah,EXPORT_SYMBOL(save_slot_names)(%ecx)
	jump_cf1b8:
		inc    %esi
		add    $0x19,%ecx
		cmp    $0x8,%esi
		jge    jump_cf1d7
	jump_cf1c1:
		mov    EXPORT_SYMBOL(save_slot_base),%eax
		add    %esi,%eax
		cmp    $0x8,%eax
		jae    jump_cf164
		push   %eax
		mov    paQdataSavegam_5,%ebx
		push   %ebx
		jmp    jump_cf16c
	jump_cf1d7:
		add    $0x20,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_init_agents)	/* 0x0CF8A0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		sub    $0x4,%esp
		movb   $0x8,data_1c4d24
		xor    %eax,%eax
		xor    %edx,%edx
		mov    background_type,%al
		mov    %dx,EXPORT_SYMBOL(cryo_agent_list_box)+0x16
		cmp    $0x1,%eax
		jne    jump_cf8d5
		xor    %edx,%edx
		call   ac_LbRandomAnyShort
		mov    %ax,%dx
		mov    $0x13,%ebx
		jmp    jump_cf8e4
	jump_cf8d5:
		xor    %edx,%edx
		call   ac_LbRandomAnyShort
		mov    %ax,%dx
		mov    $0x45,%ebx
	jump_cf8e4:
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %edx,%ebx
		xor    %edx,%edx
	jump_cf8ef:
		mov    %dl,%al
		inc    %edx
		add    %bl,%al
		mov    %al,data_1c4c63(%edx)
		cmp    $0x20,%edx
		jl     jump_cf8ef
		mov    $0x1f,%esi
		xor    %edx,%edx
		jmp    jump_cf90e
	jump_cf908:
		inc    %edx
		cmp    $0x20,%edx
		jge    jump_cf94c
	jump_cf90e:
		call   ac_LbRandomAnyShort
		and    %esi,%eax
		xor    %ecx,%ecx
		mov    %ax,%cx
		call   ac_LbRandomAnyShort
		and    %esi,%eax
		and    $0xffff,%eax
		cmp    %eax,%ecx
		je     jump_cf908
		xor    %ebx,%ebx
		mov    data_1c4c64(%ecx),%bl
		mov    %ebx,(%esp)
		mov    data_1c4c64(%eax),%bl
		mov    %bl,data_1c4c64(%ecx)
		mov    (%esp),%bl
		mov    %bl,data_1c4c64(%eax)
		jmp    jump_cf908
	jump_cf94c:
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0xffff,%eax
		xor    %edx,%edx
		mov    %eax,data_1c4c60
		xor    %eax,%eax
		mov    $0x1,%edi
		xor    %esi,%esi
	jump_cf968:
		xor    %ecx,%ecx
		mov    EXPORT_SYMBOL(local_player_no),%cl
		imul   $0x1aa,%ecx,%ecx
		add    $0x4,%edx
		add    $0x2,%eax
		mov    %edi,data_1c4b9c(%edx)
		mov    %edi,data_1a63ac(%ecx,%edx,1)
		mov    %si,data_1c4c1e(%eax)
		mov    %si,data_1a63be(%ecx,%eax,1)
		cmp    $0x8,%eax
		jne    jump_cf968
		mov    $0x4,%edx
		mov    %eax,%ecx
		mov    $0x10,%eax
		jmp    jump_cf9c6
	jump_cf9ab:
		add    $0x4,%eax
		mov    $0x1,%ebx
		add    $0x2,%ecx
		mov    %ebx,data_1c4b9c(%eax)
		xor    %ebx,%ebx
		inc    %edx
		mov    %bx,data_1c4c1e(%ecx)
	jump_cf9c6:
		xor    %ebx,%ebx
		mov    data_1c4d24,%bl
		cmp    %ebx,%edx
		jl     jump_cf9ab
		xor    %eax,%eax
		xor    %dl,%dl
	jump_cf9d6:
		add    $0x5,%eax
		mov    %dl,data_1c4c81(%eax)
		mov    %dl,data_1c4c7f(%eax)
		mov    %dl,data_1c4c80(%eax)
		mov    %dl,data_1c4c83(%eax)
		mov    %dl,data_1c4c82(%eax)
		cmp    $0xa0,%eax
		jne    jump_cf9d6
		xor    %ecx,%ecx
		jmp    jump_cfa10
	jump_cfa02:
		add    $0x1aa,%ecx
		cmp    $0xd50,%ecx
		je     jump_cfa5b
	jump_cfa10:
		mov    %ecx,%edx
		xor    %eax,%eax
	jump_cfa14:
		inc    %edx
		mov    data_1c4c86(%eax),%bl
		mov    %bl,data_1a63ed(%edx)
		mov    data_1c4c84(%eax),%bl
		mov    %bl,data_1a63e5(%edx)
		mov    data_1c4c85(%eax),%bl
		mov    %bl,data_1a63e9(%edx)
		mov    data_1c4c88(%eax),%bl
		mov    %bl,data_1a63f5(%edx)
		mov    data_1c4c87(%eax),%bl
		add    $0x5,%eax
		mov    %bl,data_1a63f1(%edx)
		cmp    $0x14,%eax
		je     jump_cfa02
		jmp    jump_cfa14
	jump_cfa5b:
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_remove_agent)	/* 0x0CFA64 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		mov    EXPORT_SYMBOL(local_player_no),%dh
		mov    %al,0x8(%esp)
		xor    %eax,%eax
		mov    0x8(%esp),%al
		inc    %eax
		mov    %eax,(%esp)
		mov    %eax,%ebx
		shl    $0x2,%eax
		mov    %ebx,%edi
		add    %ebx,%eax
		mov    %ebx,%esi
		lea    0x5(%eax),%ebp
		shl    $0x2,%esi
		sub    $0x5,%eax
		add    %edi,%edi
		mov    %eax,0x4(%esp)
		jmp    jump_cfab8
	jump_cfa9d:
		mov    0x4(%esp),%ecx
		mov    (%esp),%eax
		add    $0x5,%ebp
		add    $0x2,%edi
		add    $0x4,%esi
		add    $0x5,%ecx
		inc    %eax
		mov    %ecx,0x4(%esp)
		mov    %eax,(%esp)
	jump_cfab8:
		xor    %eax,%eax
		mov    (%esp),%ebx
		mov    data_1c4d24,%al
		cmp    %ebx,%eax
		jbe    jump_cfb39
		mov    cryo_agents(%esi),%eax
		mov    (%esp),%cl
		mov    %eax,data_1c4b9c(%esi)
		mov    $0x1,%ebx
		mov    data_1c4c20(%edi),%ax
		shl    %cl,%ebx
		mov    %ax,data_1c4c1e(%edi)
		mov    (%esp),%ecx
		mov    data_1c4c60,%eax
		dec    %ecx
		and    %eax,%ebx
		mov    $0x1,%eax
		shl    %cl,%eax
		mov    data_1c4c60,%ecx
		not    %eax
		and    %eax,%ecx
		mov    %ecx,%eax
		mov    %ecx,data_1c4c60
		or     %ebx,%eax
		mov    (%esp),%ecx
		mov    %eax,data_1c4c60
		lea    (%ecx,%ecx,4),%ecx
		mov    %ebp,%ebx
		mov    0x4(%esp),%eax
	jump_cfb21:
		inc    %eax
		mov    data_1c4c84(%ecx),%dl
		inc    %ecx
		mov    %dl,data_1c4c83(%eax)
		cmp    %ebx,%ecx
		je     jump_cfa9d
		jmp    jump_cfb21
	jump_cfb39:
		xor    %eax,%eax
		mov    0x8(%esp),%al
		inc    %eax
		mov    data_1c4c63(%eax),%dl
		mov    %eax,(%esp)
		cmp    $0x20,%eax
		jae    jump_cfb69
	jump_cfb4e:
		mov    (%esp),%ebx
		mov    (%esp),%eax
		inc    %ebx
		mov    data_1c4c64(%eax),%al
		mov    %ebx,(%esp)
		mov    %al,data_1c4c62(%ebx)
		cmp    $0x20,%ebx
		jb     jump_cfb4e
	jump_cfb69:
		mov    data_1c4d24,%ah
		dec    %ah
		mov    %dl,data_1c4c83
		mov    %ah,data_1c4d24
		xor    %ah,%ah
		xor    %esi,%esi
		mov    data_1c4d24,%al
		mov    %esi,(%esp)
		mov    %ax,EXPORT_SYMBOL(cryo_agent_list_box)+0x16
		jmp    jump_cfb9d
	jump_cfb91:
		mov    (%esp),%edi
		inc    %edi
		mov    %edi,(%esp)
		cmp    $0x4,%edi
		jae    jump_cfbc6
	jump_cfb9d:
		xor    %eax,%eax
		mov    (%esp),%ebx
		mov    data_1c4d24,%al
		cmp    %ebx,%eax
		ja     jump_cfb91
		xor    %eax,%eax
		mov    %dh,%al
		imul   $0x1aa,%eax,%eax
		mov    (%esp),%cl
		mov    $0x1,%dl
		shl    %cl,%dl
		not    %dl
		and    %dl,data_1a639b(%eax)
		jmp    jump_cfb91
	jump_cfbc6:
		mov    %dh,EXPORT_SYMBOL(local_player_no)
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_add_agent)	/* 0x0CFBD8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		mov    %eax,%esi
		mov    %edx,%edi
		xor    %eax,%eax
		mov    data_1c4d24,%al
		xor    %edx,%edx
		cmp    $0x1f,%eax
		jg     jump_cfd80
		and    $0xffa75fff,%esi
		mov    %edx,cryo_agents(,%eax,4)
		xor    %eax,%eax
	jump_cfc02:
		mov    $0x1,%ebx
		mov    %al,%cl
		shl    %cl,%ebx
		test   %ebx,%esi
		je     jump_cfc46
		xor    %ecx,%ecx
		mov    data_1c4d24,%cl
		mov    cryo_agents(,%ecx,4),%ebp
		or     %ebx,%ebp
		mov    %al,%bl
		mov    %ebp,cryo_agents(,%ecx,4)
		inc    %bl
		xor    %ecx,%ecx
		mov    %bl,%cl
		mov    $0x1,%ebx
		dec    %ecx
		shl    %cl,%ebx
		test   %ebx,data_1c5290
		jne    jump_cfc45
		or     %ebx,data_1c5288
	jump_cfc45:
		inc    %edx
	jump_cfc46:
		cmp    $0x6,%edx
		jne    jump_cfd3e
	jump_cfc4f:
		xor    %eax,%eax
	jump_cfc51:
		xor    %edx,%edx
		mov    data_1c4d24,%dl
		inc    %eax
		lea    (%edx,%edx,4),%edx
		xor    %bl,%bl
		mov    %bl,data_1c4c83(%edx,%eax,1)
		cmp    $0x5,%eax
		jb     jump_cfc51
		xor    %eax,%eax
		mov    data_1c4d24,%al
		testb  $0x20,cryo_agents(,%eax,4)
		je     jump_cfc86
		mov    %eax,%edx
		movb   $0x1,data_1c4c86(%edx,%eax,4)
	jump_cfc86:
		xor    %edx,%edx
		mov    data_1c4d24,%dl
		testb  $0x8,data_1c4ba1(,%edx,4)
		je     jump_cfca2
		mov    %edx,%eax
		movb   $0x1,data_1c4c84(%edx,%eax,4)
	jump_cfca2:
		xor    %edx,%edx
		mov    data_1c4d24,%dl
		testb  $0x10,data_1c4ba1(,%edx,4)
		je     jump_cfcbe
		mov    %edx,%eax
		movb   $0x1,data_1c4c85(%edx,%eax,4)
	jump_cfcbe:
		xor    %edx,%edx
		mov    data_1c4d24,%dl
		testb  $0x4,data_1c4ba1(,%edx,4)
		je     jump_cfcda
		mov    %edx,%eax
		movb   $0x1,data_1c4c88(%edx,%eax,4)
	jump_cfcda:
		xor    %eax,%eax
		mov    data_1c4d24,%al
		testb  $0x2,data_1c4ba1(,%eax,4)
		je     jump_cfcf5
		mov    %eax,%edx
		movb   $0x1,data_1c4c87(%edx,%eax,4)
	jump_cfcf5:
		xor    %eax,%eax
		mov    data_1c4d24,%al
		xor    %edx,%edx
		mov    %di,data_1c4c20(,%eax,2)
		call   ac_LbRandomAnyShort
		mov    %ax,%dx
		mov    $0x11,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		cmp    $0x8,%edx
		jle    jump_cfd4d
		mov    $0x1,%eax
		mov    data_1c4d24,%cl
		shl    %cl,%eax
		mov    data_1c4c60,%ebx
		not    %eax
		and    %eax,%ebx
		mov    %ebx,data_1c4c60
		jmp    jump_cfd68
	jump_cfd3e:
		inc    %eax
		cmp    $0x20,%eax
		jb     jump_cfc02
		jmp    jump_cfc4f
	jump_cfd4d:
		mov    $0x1,%eax
		mov    data_1c4d24,%cl
		mov    data_1c4c60,%edx
		shl    %cl,%eax
		or     %eax,%edx
		mov    %edx,data_1c4c60
	jump_cfd68:
		mov    data_1c4d24,%ch
		xor    %ah,%ah
		inc    %ch
		mov    %ch,%al
		mov    %ch,data_1c4d24
		mov    %ax,EXPORT_SYMBOL(cryo_agent_list_box)+0x16
	jump_cfd80:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_update_mission_time)	/* 0x0CFD88 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		test   %al,%al
		je     jump_cfda1
		mov    gameturn,%eax
		mov    %eax,data_1c4b84
		jmp    jump_cffb0
	jump_cfda1:
		mov    gameturn,%eax
		xor    %edx,%edx
		mov    %eax,data_1c4b88
		call   ac_LbRandomAnyShort
		mov    %ax,%dx
		mov    $0x48,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %edx,%ecx
		mov    EXPORT_SYMBOL(open_brief)-2,%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%ebx
		add    %edx,%ebx
		add    $0xf,%ecx
		shl    $0x3,%ebx
		xor    %edx,%edx
		mov    %ecx,data_19982c(%ebx)
		mov    $0x18,%ecx
		mov    data_19982c(%ebx),%eax
		div    %ecx
		mov    %eax,mission_status(%ebx)
		xor    %edx,%edx
		mov    data_19982c(%ebx),%eax
		div    %ecx
		mov    %edx,data_19982c(%ebx)
		xor    %edx,%edx
		call   ac_LbRandomAnyShort
		mov    %ax,%dx
		mov    $0x2,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		inc    %edx
		mov    mission_status(%ebx),%ecx
		add    %edx,%ecx
		mov    EXPORT_SYMBOL(open_brief)-2,%edx
		sar    $0x10,%edx
		mov    %ecx,mission_status(%ebx)
		lea    0x0(,%edx,4),%ebx
		add    %edx,%ebx
		xor    %edx,%edx
		call   ac_LbRandomAnyShort
		mov    %ax,%dx
		mov    $0x18,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		shl    $0x3,%ebx
		mov    data_19982c(%ebx),%esi
		add    %edx,%esi
		mov    EXPORT_SYMBOL(open_brief)-2,%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		mov    %esi,data_19982c(%ebx)
		cmpl   $0x17,data_19982c(%eax)
		jbe    jump_cfe9d
		mov    mission_status(%eax),%ebp
		mov    data_19982c(%eax),%edx
		inc    %ebp
		sub    %ecx,%edx
		mov    %ebp,mission_status(%eax)
		mov    %edx,data_19982c(%eax)
	jump_cfe9d:
		mov    EXPORT_SYMBOL(open_brief)-2,%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		mov    mission_status(%eax),%edx
		mov    data_199830(%eax),%ebx
		mov    data_199834(%eax),%ecx
		add    %edx,%ebx
		mov    data_19982c(%eax),%edx
		mov    %ebx,data_199830(%eax)
		add    %edx,%ecx
		mov    %ecx,data_199834(%eax)
		cmp    $0x17,%ecx
		jbe    jump_cfefb
		mov    data_199830(%eax),%edi
		mov    data_199834(%eax),%ebp
		inc    %edi
		sub    $0x18,%ebp
		mov    %edi,data_199830(%eax)
		mov    %ebp,data_199834(%eax)
	jump_cfefb:
		mov    EXPORT_SYMBOL(open_brief)-2,%edx
		sar    $0x10,%edx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    mission_status(,%eax,8),%dl
		mov    data_1c6df1,%bl
		mov    data_1c6df2,%dh
		mov    data_19982c(,%eax,8),%al
		add    %dl,%dh
		add    %al,%bl
		xor    %eax,%eax
		mov    %dh,data_1c6df2
		mov    %bl,%al
		mov    %bl,data_1c6df1
		cmp    $0x17,%eax
		jle    jump_cffb0
		mov    data_1c6df2,%cl
		xor    %edx,%edx
		mov    %bl,%bh
		mov    data_1c6df3,%dl
		inc    %cl
		sub    $0x18,%bh
		mov    %cl,data_1c6df2
		mov    EXPORT_SYMBOL(month_days)-1(%edx),%ch
		mov    %bh,data_1c6df1
		cmp    %ch,%cl
		jbe    jump_cffb0
		mov    $0x1,%al
		mov    %al,data_1c6df2
		mov    %dl,%ah
		add    %al,%ah
		mov    %ah,data_1c6df3
		xor    %eax,%eax
		mov    data_1c6df3,%al
		cmp    $0xc,%eax
		jle    jump_cffb0
		mov    $0x1,%dl
		mov    %dl,data_1c6df3
		add    %dl,data_1c6df4
		xor    %edx,%edx
		mov    data_1c6df4,%dl
		mov    $0x64,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		mov    %dl,data_1c6df4
	jump_cffb0:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_show_alert_box)	/* 0x0D0090 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		testb  $0x1,data_1dc77a
		je     jump_d0153
		mov    small_med_font,%eax
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    data_1dc776,%ax
		xor    %ecx,%ecx
		sub    $0x8,%eax
		mov    %ax,%cx
		mov    data_1dc774,%ax
		xor    %ebx,%ebx
		sub    $0x8,%eax
		mov    %ax,%bx
		mov    data_1dc772,%ax
		xor    %edx,%edx
		add    $0x4,%eax
		mov    %ax,%dx
		mov    alert_box,%ax
		add    $0x4,%eax
		and    $0xffff,%eax
		call   ac_my_set_text_window
		mov    $0xfffffffb,%edx
		mov    $EXPORT_SYMBOL(alert_text),%eax
		mov    %dx,EXPORT_SYMBOL(alert_textpos)
		call   ac_my_preprocess_text
		mov    $EXPORT_SYMBOL(alert_text),%eax
		call   ac_my_count_lines
		mov    EXPORT_SYMBOL(lbFontPtr),%edx
		and    $0xffff,%eax
		test   %edx,%edx
		je     jump_d0126
		mov    0xd1(%edx),%dl
		and    $0xff,%edx
	jump_d0126:
		add    $0x4,%edx
		imul   %edx,%eax
		mov    data_1dc742,%dx
		sub    %eax,%edx
		sub    $0x4,%edx
		mov    %dx,data_1dc772
		xor    %edx,%edx
		mov    data_1dc746,%dx
		add    $0x8,%edx
		add    %edx,%eax
		mov    %ax,data_1dc776
	jump_d0153:
		mov    $alert_box,%eax
		call   *data_1dc77c
		and    $0xff,%eax
		cmp    $0x3,%eax
		jne    jump_d01f3
		mov    small_med_font,%eax
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    data_1dc776,%ax
		xor    %ecx,%ecx
		sub    $0x8,%eax
		mov    %ax,%cx
		mov    data_1dc774,%ax
		xor    %ebx,%ebx
		sub    $0x8,%eax
		mov    %ax,%bx
		mov    data_1dc772,%ax
		xor    %edx,%edx
		add    $0x4,%eax
		mov    %ax,%dx
		mov    alert_box,%ax
		add    $0x4,%eax
		and    $0xffff,%eax
		call   ac_my_set_text_window
		push   $0x0
		mov    $0x100,%ebx
		mov    $0x3,%ecx
		push   $EXPORT_SYMBOL(alert_textpos)
		xor    %edx,%edx
		xor    %eax,%eax
		push   $0x0
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    $EXPORT_SYMBOL(alert_text),%ebx
		call   ac_flashy_draw_text
		xor    %ecx,%ecx
		mov    $alert_OK_button,%eax
		mov    %cx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		call   *data_1dc750
	jump_d01f3:
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_find_closest_city)	/* 0x0D01F8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		sub    $0xc,%esp
		mov    %eax,(%esp)
		mov    %edx,0x4(%esp)
		mov    $0xffff,%ecx
		mov    $0xff,%ah
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    %ah,0x8(%esp)
		jmp    jump_d021b
	jump_d0217:
		add    $0x28,%ebx
		inc    %edx
	jump_d021b:
		xor    %eax,%eax
		mov    num_cities,%al
		cmp    %eax,%edx
		jge    jump_d0263
		xor    %esi,%esi
		mov    cities(%ebx),%edi
		mov    0x4(%esp),%si
		sar    $0x10,%edi
		sub    %esi,%edi
		imul   %edi,%edi
		mov    word_1C52BA(%ebx),%eax
		xor    %esi,%esi
		sar    $0x10,%eax
		mov    (%esp),%si
		sub    %esi,%eax
		imul   %eax,%eax
		add    %edi,%eax
		call   ac_LbSqrL
		cmp    %cx,%ax
		jae    jump_d0217
		mov    %eax,%ecx
		mov    %dl,0x8(%esp)
		jmp    jump_d0217
	jump_d0263:
		mov    0x8(%esp),%al
		add    $0xc,%esp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
user_read_value:	/* 0x0D0380 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x10,%esp
		mov    %eax,%ebp
		mov    %dl,0x4(%esp)
		mov    %bl,0x8(%esp)
		mov    %eax,%edi
		sub    %ecx,%ecx
		dec    %ecx
		xor    %eax,%eax
		repnz scas %es:(%edi),%al
		not    %ecx
		dec    %ecx
		mov    show_alert,%ah
		mov    %cl,(%esp)
		test   %ah,%ah
		jne    jump_d0510
		call   ac_next_buffered_key
		mov    %eax,%esi
		test   %eax,%eax
		jbe    jump_d0507
		cmp    $0x80,%eax
		jae    jump_d0507
		cmpb   $0x0,EXPORT_SYMBOL(lbKeyOn)+14
		je     jump_d0401
		xor    %eax,%eax
		mov    %cl,%al
		test   %eax,%eax
		jle    jump_d0401
		push   $0x1
		xor    %dh,%dh
		push   $0x0
		mov    %dh,EXPORT_SYMBOL(lbKeyOn)+14
		push   $0x64
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		mov    %dh,-0x1(%eax,%ebp,1)
		mov    $0x75,%edx
		xor    %eax,%eax
		call   ac_play_sample_using_heap
	jump_d0401:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbInkeyToAscii)(%esi),%al
		cmp    $0x20,%eax
		jl     jump_d0507
		cmp    $0x7e,%eax
		jg     jump_d0507
		mov    (%esp),%cl
		cmp    0x4(%esp),%cl
		jae    jump_d0507
		xor    %ecx,%ecx
		mov    0x8(%esp),%cl
		cmp    $0x3,%ecx
		jne    jump_d045f
		cmp    $0x30,%eax
		jl     jump_d043d
		cmp    $0x39,%eax
		jle    jump_d044f
	jump_d043d:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbInkeyToAscii)(%esi),%al
		cmp    $0x61,%eax
		jl     jump_d0457
		cmp    $0x66,%eax
		jg     jump_d0457
	jump_d044f:
		mov    EXPORT_SYMBOL(lbInkeyToAscii)(%esi),%al
		jmp    jump_d049f
	jump_d0457:
		xor    %ah,%ah
		mov    %ah,0xc(%esp)
		jmp    jump_d04a3
	jump_d045f:
		cmp    $0x2,%ecx
		jne    jump_d0472
		cmp    $0x30,%eax
		jl     jump_d046e
		cmp    $0x39,%eax
		jle    jump_d049f
	jump_d046e:
		xor    %al,%al
		jmp    jump_d049f
	jump_d0472:
		cmp    $0x1,%ecx
		jne    jump_d048c
		cmp    $0x61,%eax
		jl     jump_d0481
		cmp    $0x7a,%eax
		jle    jump_d0499
	jump_d0481:
		testb  $0x1,EXPORT_SYMBOL(lbShift)
		je     jump_d044f
		jmp    jump_d0499
	jump_d048c:
		test   %cl,%cl
		jne    jump_d04a3
		testb  $0x1,EXPORT_SYMBOL(lbShift)
		je     jump_d049f
	jump_d0499:
		mov    EXPORT_SYMBOL(lbInkeyToAscii)+128(%esi),%al
	jump_d049f:
		mov    %al,0xc(%esp)
	jump_d04a3:
		movzbl 0xc(%esp),%esi
		lea    -0x1f(%esi),%ecx
		lea    0x0(,%ecx,4),%eax
		sub    %ecx,%eax
		mov    EXPORT_SYMBOL(lbFontPtr),%ecx
		mov    0x4(%ecx,%eax,2),%al
		and    $0xff,%eax
		cmp    $0x1,%eax
		jle    jump_d0505
		xor    %eax,%eax
		mov    (%esp),%al
		test   %eax,%eax
		jne    jump_d04d6
		cmp    $0x20,%esi
		je     jump_d0505
	jump_d04d6:
		push   $0x1
		mov    $0x40,%ecx
		mov    $0x7f,%ebx
		xor    %eax,%eax
		mov    $0x74,%edx
		mov    0x4(%esp),%al
		push   $0x0
		add    %eax,%ebp
		mov    0x14(%esp),%al
		push   $0x64
		mov    %al,0x0(%ebp)
		xor    %eax,%eax
		movb   $0x0,0x1(%ebp)
		call   ac_play_sample_using_heap
	jump_d0505:
		xor    %esi,%esi
	jump_d0507:
		cmp    $0x1c,%esi
		jne    jump_d0510
		mov    $0x1,%al
		jmp    jump_d0512
	jump_d0510:
		xor    %al,%al
	jump_d0512:
		add    $0x10,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_time_difference)	/* 0x0D051C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		mov    %eax,%ebx
		xor    %ecx,%ecx
		mov    0x1(%eax),%cl
		xor    %eax,%eax
		mov    0x1(%edx),%al
		sub    %eax,%ecx
		mov    %ecx,%eax
		shl    $0x4,%eax
		sub    %ecx,%eax
		lea    0x0(,%eax,4),%ecx
		movsbl (%edx),%edx
		movsbl (%ebx),%eax
		sub    %edx,%eax
		add    %ecx,%eax
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_weapon_slot)	/* 0x0D0548 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    $0x4,%ebx
		push   $0xf3
		mov    $0xf,%ecx
		movswl %dx,%edi
		movswl %ax,%ebp
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		mov    %edi,%edx
		mov    %ebp,%eax
		mov    $0x9a,%ebx
		call   ac_draw_box_purple_list
		lea    0x1b(%ebp),%esi
		push   $0xf3
		mov    $0xc,%ecx
		lea    0xf(%edi),%eax
		mov    $0x7f,%ebx
		mov    %eax,0x4(%esp)
		mov    %eax,%edx
		mov    %esi,%eax
		call   ac_draw_box_purple_list
		push   $0xf3
		mov    $0xf,%ecx
		lea    0x1b(%edi),%eax
		mov    $0x9a,%ebx
		mov    %eax,0x8(%esp)
		mov    %eax,%edx
		mov    %esi,%eax
		call   ac_draw_box_purple_list
		push   $0xf3
		lea    0x29(%edi),%eax
		push   %eax
		mov    0x8(%esp),%ecx
		mov    %esi,%ebx
		push   %esi
		mov    %ecx,%edx
		lea    0x1(%ebp),%eax
		call   ac_draw_triangle_purple_list
		push   $0xf3
		mov    0x8(%esp),%edx
		lea    0x9a(%ebp),%eax
		push   %edx
		lea    0xb5(%ebp),%ebx
		push   %eax
		mov    %edx,%ecx
		mov    %edi,%edx
		call   ac_draw_triangle_purple_list
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_show_audio_volume_box_func_02)	/* 0x0D0600 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x1c,%esp
		mov    %ax,0x10(%esp)
		mov    %dx,0x14(%esp)
		mov    %bx,0x18(%esp)
		mov    %ecx,%edi
		mov    0x16(%esp),%eax
		sar    $0x10,%eax
		mov    %eax,0xc(%esp)
		test   %eax,%eax
		je     jump_d06e8
		cmp    %bx,%cx
		jle    jump_d0671
		xor    %esi,%esi
		test   %cx,%cx
		jle    jump_d06e8
	jump_d063a:
		mov    0x12(%esp),%edx
		xor    %eax,%eax
		mov    0xe(%esp),%ebx
		mov    0x2c(%esp),%al
		sar    $0x10,%ebx
		push   %eax
		movswl %si,%eax
		sar    $0x10,%edx
		sub    %eax,%ebx
		add    %eax,%edx
		mov    %ebx,%eax
		mov    0x1a(%esp),%ebx
		sar    $0x10,%ebx
		add    %eax,%ebx
		mov    %edx,%ecx
		dec    %ebx
		inc    %esi
		call   ac_draw_line_purple_list
		cmp    %di,%si
		jge    jump_d06e8
		jmp    jump_d063a
	jump_d0671:
		mov    0x12(%esp),%ebp
		xor    %eax,%eax
		mov    0xe(%esp),%esi
		mov    0x2c(%esp),%al
		sar    $0x10,%ebp
		mov    %eax,0x4(%esp)
		push   %eax
		movswl %cx,%eax
		sar    $0x10,%esi
		mov    %eax,0x4(%esp)
		add    %ebp,%eax
		mov    0x4(%esp),%edx
		mov    %eax,0xc(%esp)
		mov    %eax,%ecx
		push   %eax
		mov    %esi,%eax
		sub    %edx,%eax
		mov    %esi,%ebx
		push   %eax
		mov    %ebp,%edx
		mov    %esi,%eax
		call   ac_draw_triangle_purple_list
		mov    0x4(%esp),%ebx
		mov    0xc(%esp),%eax
		push   %ebx
		add    %esi,%eax
		mov    0x4(%esp),%ecx
		mov    %eax,%ebx
		push   %ebp
		sub    %ecx,%ebx
		push   %ebx
		mov    %ebp,%edx
		mov    0x14(%esp),%ecx
		call   ac_draw_triangle_purple_list
		mov    0x4(%esp),%eax
		mov    0xc(%esp),%ebx
		mov    (%esp),%edx
		movswl %di,%ecx
		push   %eax
		sub    %edx,%ebx
		mov    %ebp,%edx
		mov    %esi,%eax
		call   ac_draw_box_purple_list
	jump_d06e8:
		add    $0x1c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_mouse_move_over_rect_adv)	/* 0x0D06F4 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    %ebx,%esi
		cmpb   $0x0,0x14(%esp)
		je     jump_d07f1
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(lbDisplay)+100,%bx # lbDisplay.ScreenMode
		cmp    $0x1,%ebx
		jne    jump_d071f
		mov    EXPORT_SYMBOL(lbDisplay)+84,%ebx # lbDisplay.MMouseY
		add    %ebx,%ebx
		jmp    jump_d0725
	jump_d071f:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%ebx # lbDisplay.MMouseY
	jump_d0725:
		movswl %dx,%edi
		sub    %edi,%ebx
		mov    %ebx,%edi
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(lbDisplay)+100,%bx # lbDisplay.ScreenMode
		cmp    $0x1,%ebx
		jne    jump_d0744
		mov    EXPORT_SYMBOL(lbDisplay)+84,%ebx # lbDisplay.MMouseY
		add    %ebx,%ebx
		jmp    jump_d074a
	jump_d0744:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%ebx # lbDisplay.MMouseY
	jump_d074a:
		movswl %dx,%ebp
		cmp    %ebp,%ebx
		jl     jump_d08d1
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(lbDisplay)+100,%bx # lbDisplay.ScreenMode
		cmp    $0x1,%ebx
		jne    jump_d076d
		mov    EXPORT_SYMBOL(lbDisplay)+84,%ebx # lbDisplay.MMouseY
		add    %ebx,%ebx
		jmp    jump_d0773
	jump_d076d:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%ebx # lbDisplay.MMouseY
	jump_d0773:
		movswl %dx,%edx
		mov    %edx,(%esp)
		movswl %cx,%edx
		add    (%esp),%edx
		cmp    %edx,%ebx
		jge    jump_d08d1
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay)+100,%dx # lbDisplay.ScreenMode
		cmp    $0x1,%edx
		jne    jump_d079f
		mov    EXPORT_SYMBOL(lbDisplay)+80,%ebx # lbDisplay.MMouseX
		add    %ebx,%ebx
		jmp    jump_d07a5
	jump_d079f:
		mov    EXPORT_SYMBOL(lbDisplay)+80,%ebx # lbDisplay.MMouseX
	jump_d07a5:
		movswl %ax,%ecx
		movswl %di,%edx
		add    %ecx,%edx
		cmp    %edx,%ebx
		jl     jump_d08d1
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay)+100,%dx # lbDisplay.ScreenMode
		cmp    $0x1,%edx
		jne    jump_d07cd
		mov    EXPORT_SYMBOL(lbDisplay)+80,%ebx # lbDisplay.MMouseX
		add    %ebx,%ebx
		jmp    jump_d07d3
	jump_d07cd:
		mov    EXPORT_SYMBOL(lbDisplay)+80,%ebx # lbDisplay.MMouseX
	jump_d07d3:
		cwtl
		movswl %di,%edx
		add    %eax,%edx
		movswl %si,%eax
		add    %edx,%eax
		cmp    %eax,%ebx
		jge    jump_d08d1
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4
	jump_d07f1:
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(lbDisplay)+100,%bx # lbDisplay.ScreenMode
		cmp    $0x1,%ebx
		jne    jump_d0809
		mov    EXPORT_SYMBOL(lbDisplay)+84,%ebx # lbDisplay.MMouseY
		add    %ebx,%ebx
		jmp    jump_d080f
	jump_d0809:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%ebx # lbDisplay.MMouseY
	jump_d080f:
		movswl %dx,%edi
		sub    %edi,%ebx
		mov    %ebx,%edi
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(lbDisplay)+100,%bx # lbDisplay.ScreenMode
		cmp    $0x1,%ebx
		jne    jump_d082e
		mov    EXPORT_SYMBOL(lbDisplay)+84,%ebx # lbDisplay.MMouseY
		add    %ebx,%ebx
		jmp    jump_d0834
	jump_d082e:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%ebx # lbDisplay.MMouseY
	jump_d0834:
		movswl %dx,%ebp
		cmp    %ebp,%ebx
		jl     jump_d08d1
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(lbDisplay)+100,%bx # lbDisplay.ScreenMode
		cmp    $0x1,%ebx
		jne    jump_d0857
		mov    EXPORT_SYMBOL(lbDisplay)+84,%ebx # lbDisplay.MMouseY
		add    %ebx,%ebx
		jmp    jump_d085d
	jump_d0857:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%ebx # lbDisplay.MMouseY
	jump_d085d:
		movswl %dx,%edx
		mov    %edx,(%esp)
		movswl %cx,%edx
		add    (%esp),%edx
		cmp    %edx,%ebx
		jge    jump_d08d1
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay)+100,%dx # lbDisplay.ScreenMode
		cmp    $0x1,%edx
		jne    jump_d0885
		mov    EXPORT_SYMBOL(lbDisplay)+80,%ebx # lbDisplay.MMouseX
		add    %ebx,%ebx
		jmp    jump_d088b
	jump_d0885:
		mov    EXPORT_SYMBOL(lbDisplay)+80,%ebx # lbDisplay.MMouseX
	jump_d088b:
		movswl %ax,%ecx
		movswl %di,%edx
		sub    %edx,%ecx
		cmp    %ecx,%ebx
		jl     jump_d08d1
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(lbDisplay)+100,%dx # lbDisplay.ScreenMode
		cmp    $0x1,%edx
		jne    jump_d08af
		mov    EXPORT_SYMBOL(lbDisplay)+80,%ebx # lbDisplay.MMouseX
		add    %ebx,%ebx
		jmp    jump_d08b5
	jump_d08af:
		mov    EXPORT_SYMBOL(lbDisplay)+80,%ebx # lbDisplay.MMouseX
	jump_d08b5:
		movswl %ax,%edx
		movswl %di,%eax
		sub    %eax,%edx
		movswl %si,%eax
		add    %edx,%eax
		cmp    %eax,%ebx
		jge    jump_d08d1
		mov    $0x1,%al
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4
	jump_d08d1:
		xor    %al,%al
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0x4


/*----------------------------------------------------------------*/
ASM_mouse_move_over_rect:	/* 0x0D08DC */
/*----------------------------------------------------------------*/
		push   %esi
		mov    %ecx,%esi
		xor    %ecx,%ecx
		mov    EXPORT_SYMBOL(lbDisplay)+100,%cx # lbDisplay.ScreenMode
		cmp    $0x1,%ecx
		jne    jump_d08f7
		mov    EXPORT_SYMBOL(lbDisplay)+80,%ecx # lbDisplay.MMouseX
		add    %ecx,%ecx
		jmp    jump_d08fd
	jump_d08f7:
		mov    EXPORT_SYMBOL(lbDisplay)+80,%ecx # lbDisplay.MMouseX
	jump_d08fd:
		cwtl
		cmp    %eax,%ecx
		jl     jump_d0970
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_d091c
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
		add    %eax,%eax
		jmp    jump_d0921
	jump_d091c:
		mov    EXPORT_SYMBOL(lbDisplay)+80,%eax # lbDisplay.MMouseX
	jump_d0921:
		movswl %dx,%ecx
		cmp    %ecx,%eax
		jge    jump_d0970
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_d093e
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		add    %eax,%eax
		jmp    jump_d0943
	jump_d093e:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
	jump_d0943:
		movswl %bx,%ecx
		cmp    %ecx,%eax
		jl     jump_d0970
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(lbDisplay)+100,%ax # lbDisplay.ScreenMode
		cmp    $0x1,%eax
		jne    jump_d0960
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
		add    %eax,%eax
		jmp    jump_d0965
	jump_d0960:
		mov    EXPORT_SYMBOL(lbDisplay)+84,%eax # lbDisplay.MMouseY
	jump_d0965:
		movswl %si,%ecx
		cmp    %ecx,%eax
		jge    jump_d0970
		mov    $0x1,%al
		pop    %esi
		ret
	jump_d0970:
		xor    %al,%al
		pop    %esi
		ret

vtable_d0974:
		.long   func_d09b8
		.long   func_d0a58
		.long   func_d0a58
		.long   func_d0a58
		.long   func_d0a38
		.long   func_d0a18
		.long   func_d09d8
		.long   func_d09f8


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_free_slot)	/* 0x0D0994 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		sub    $0x4,%esp
		mov    %al,(%esp)
		mov    %dl,%al
		sub    $0x5,%al
		xor    %dl,%dl
		cmp    $0x7,%al
		ja     func_d0a58
		and    $0xff,%eax
		jmp    *%cs:vtable_d0974(,%eax,4)


/*----------------------------------------------------------------*/
func_d09b8:
/*----------------------------------------------------------------*/
		xor    %ebx,%ebx
		mov    (%esp),%bl
		mov    %ebx,%eax
		mov    data_1c4c86(%ebx,%eax,4),%al
		and    $0xff,%eax
		cmp    $0x4,%eax
		setl   %al
		add    $0x4,%esp
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_d09d8:
/*----------------------------------------------------------------*/
		xor    %ebx,%ebx
		mov    (%esp),%bl
		mov    %ebx,%eax
		mov    data_1c4c84(%ebx,%eax,4),%al
		and    $0xff,%eax
		cmp    $0x4,%eax
		setl   %al
		add    $0x4,%esp
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_d09f8:
/*----------------------------------------------------------------*/
		xor    %ebx,%ebx
		mov    (%esp),%bl
		mov    %ebx,%eax
		mov    data_1c4c85(%ebx,%eax,4),%al
		and    $0xff,%eax
		cmp    $0x4,%eax
		setl   %al
		add    $0x4,%esp
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_d0a18:
/*----------------------------------------------------------------*/
		xor    %ebx,%ebx
		mov    (%esp),%bl
		mov    %ebx,%eax
		mov    data_1c4c88(%ebx,%eax,4),%al
		and    $0xff,%eax
		cmp    $0x4,%eax
		setl   %al
		add    $0x4,%esp
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_d0a38:
/*----------------------------------------------------------------*/
		xor    %ebx,%ebx
		mov    (%esp),%bl
		mov    %ebx,%eax
		mov    data_1c4c87(%ebx,%eax,4),%al
		and    $0xff,%eax
		cmp    $0x4,%eax
		setl   %al
		add    $0x4,%esp
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_d0a58:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		jmp    jump_d0a62
	jump_d0a5c:
		inc    %eax
		cmp    $0x20,%eax
		jge    jump_d0a90
	jump_d0a62:
		xor    %ecx,%ecx
		mov    EXPORT_SYMBOL(local_player_no),%cl
		imul   $0x1aa,%ecx,%ecx
		xor    %ebx,%ebx
		mov    (%esp),%bl
		shl    $0x2,%ebx
		lea    (%ecx,%ebx,1),%esi
		mov    $0x1,%ebx
		mov    %al,%cl
		shl    %cl,%ebx
		test   %ebx,data_1a63b0(%esi)
		je     jump_d0a5c
		inc    %dl
		jmp    jump_d0a5c
	jump_d0a90:
		xor    %eax,%eax
		mov    %dl,%al
		cmp    $0x6,%eax
		setl   %al
		add    $0x4,%esp
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_draw_noise_box)	/* 0x0D0AA4 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		sub    $0x10,%esp
		mov    %ax,(%esp)
		mov    %dx,0x4(%esp)
		mov    %ebx,0x8(%esp)
		mov    %ecx,0xc(%esp)
		cmpb   $0x0,EXPORT_SYMBOL(byte_1DDEC4)
		je     jump_d0acc
		cmpb   $0x0,EXPORT_SYMBOL(byte_1C6DED)
		je     jump_d0b19
	jump_d0acc:
		xor    %ebx,%ebx
		jmp    jump_d0ad9
	jump_d0ad0:
		inc    %ebx
		cmp    $0x280,%ebx
		jae    jump_d0b09
	jump_d0ad9:
		xor    %cl,%cl
		xor    %edx,%edx
		mov    %cl,EXPORT_SYMBOL(byte_1DDC44)(%ebx)
		call   ac_LbRandomAnyShort
		mov    %ax,%dx
		mov    $0x9,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		cmp    $0x4,%edx
		jbe    jump_d0ad0
		mov    EXPORT_SYMBOL(byte_155189),%al
		mov    %al,EXPORT_SYMBOL(byte_1DDC44)(%ebx)
		jmp    jump_d0ad0
	jump_d0b09:
		xor    %dh,%dh
		mov    $0x1,%bl
		mov    %dh,EXPORT_SYMBOL(byte_1C6DED)
		mov    %bl,EXPORT_SYMBOL(byte_1DDEC4)
	jump_d0b19:
		cmpb   $0x0,EXPORT_SYMBOL(byte_1C4B7F)
		jne    jump_d0b96
		mov    $0x1,%ebx
		jmp    jump_d0b8a
	jump_d0b29:
		call   ac_LbRandomAnyShort
		mov    $0x280,%edi
		xor    %ecx,%ecx
		xor    %edx,%edx
		mov    0x8(%esp),%cx
		mov    %ax,%dx
		lea    -0x2(%ecx),%esi
		mov    %edx,%eax
		sar    $0x1f,%edx
		sub    %ecx,%edi
		idiv   %edi
		mov    0x2(%esp),%ecx
		sar    $0x10,%ecx
		add    %ebx,%ecx
		mov    EXPORT_SYMBOL(lbDisplay)+32,%edi # lbDisplay.GraphicsScreenWidth
		imul   %ecx,%edi
		mov    -0x2(%esp),%ecx
		sar    $0x10,%ecx
		add    %ecx,%edi
		mov    EXPORT_SYMBOL(lbDisplay)+4,%ecx # lbDisplay.WScreen
		inc    %edi
		add    $EXPORT_SYMBOL(byte_1DDC44),%edx
		add    %ecx,%edi
		mov    %esi,%ecx
		mov    %edx,%esi
		inc    %ebx
		push   %edi
		mov    %ecx,%eax
		shr    $0x2,%ecx
		repnz movsl %ds:(%esi),%es:(%edi)
		mov    %al,%cl
		and    $0x3,%cl
		repnz movsb %ds:(%esi),%es:(%edi)
		pop    %edi
	jump_d0b8a:
		xor    %edx,%edx
		mov    0xc(%esp),%dx
		dec    %edx
		cmp    %edx,%ebx
		jb     jump_d0b29
	jump_d0b96:
		add    $0x10,%esp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_init_variables)	/* 0x0D0B9C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		mov    $0xff,%ah
		xor    %bl,%bl
		xor    %edx,%edx
		mov    %ah,EXPORT_SYMBOL(selected_city_id)
		mov    %ah,selected_weapon
		mov    %ah,selected_mod
		mov    %bl,selected_agent
		mov    %ah,%cl
		mov    %ah,EXPORT_SYMBOL(research_selected_wep)
		mov    %ah,EXPORT_SYMBOL(research_selected_mod)
		mov    %ah,unkn_city_no
		mov    %dx,EXPORT_SYMBOL(word_1C6E0A)
		mov    $0x1,%ah
		xor    %bh,%bh
		mov    $ASM_do_research_submit,%edx
		mov    %bl,refresh_equip_list
		mov    %bx,EXPORT_SYMBOL(word_1C6E08)
		mov    %ah,EXPORT_SYMBOL(research_on_weapons)
		mov    %edx,EXPORT_SYMBOL(research_submit_button)+0x18
		mov    EXPORT_SYMBOL(gui_strings)+0x684,%eax
		mov    %cl,%dl
		mov    %eax,EXPORT_SYMBOL(research_submit_button)+0x08
		mov    EXPORT_SYMBOL(gui_strings)+0x70C,%eax
		mov    %dl,EXPORT_SYMBOL(selected_netscan_objective)
		mov    %eax,EXPORT_SYMBOL(unkn12_WEAPONS_MODS_button)+0x08
		xor    %eax,%eax
	jump_d0c1a:
		add    $0xc,%eax
		xor    %dh,%dh
		mov    %dh,ingame__Scanner__BigBlip_0__Period-0x0c(%eax)
		cmp    $0xc0,%eax
		jne    jump_d0c1a
		mov    $0x2,%bl
		mov    $0x4a,%cl
		mov    %dh,new_mail
		xor    %esi,%esi
		xor    %edi,%edi
		xor    %eax,%eax
		mov    %bl,data_1c6df2
		mov    %cl,data_1c6df4
		mov    %si,next_brief
		mov    %di,EXPORT_SYMBOL(word_1C6F3E)
		mov    %ax,EXPORT_SYMBOL(word_1C6F40)
		mov    %si,EXPORT_SYMBOL(word_1C6F48)
		xor    %dl,%dl
		mov    $0x6,%bh
		mov    $0xffffffff,%edi
		mov    $0x1,%eax
		mov    %dx,EXPORT_SYMBOL(old_mission_brief)
		xor    %ch,%ch
		mov    %bh,data_1c6df3
		mov    %di,EXPORT_SYMBOL(word_15518A)
		mov    %ax,ingame__MissionStatus
		xor    %cl,%cl
		mov    starting_cash_amounts,%eax
		mov    %cx,EXPORT_SYMBOL(next_email)
		mov    %cx,next_ref
		mov    %eax,login_control__Money
		xor    %eax,%eax
		xor    %ebx,%ebx
		mov    login_control__State,%al
		mov    %bx,open_brief
		cmp    $0x6,%eax
		jne    jump_d0ccf
		mov    $0xc350,%ebx
		mov    %ebx,ingame__Credits
		mov    %ebx,ingame__CashAtStart
		jmp    jump_d0cde
	jump_d0ccf:
		mov    login_control__Money,%eax
		mov    %eax,ingame__Credits
		mov    %eax,ingame__CashAtStart
	jump_d0cde:
		mov    $0x13,%al
		mov    $0x6,%dl
		xor    %esi,%esi
		xor    %bl,%bl
		mov    %esi,ingame__Expenditure
		mov    %al,login_control__City
		mov    %dl,login_control__State
		mov    %bl,EXPORT_SYMBOL(byte_181189)
		mov    $0x3c,%ah
		mov    $0x4,%dh
		mov    %ah,unkn_flags_08
		mov    %dh,login_control__TechLevel
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_research_allow_weapons_in_cryo)	/* 0x0D0DE8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %ebp
		xor    %esi,%esi
		mov    $0x1,%ebp
		mov    %esi,%ebx
		xor    %eax,%eax
		jmp    jump_d0e0e
	jump_d0dfa:
		add    $0x4,%esi
		cmp    $0x10,%esi
		je     jump_d0e2c
		mov    %esi,%ebx
		xor    %eax,%eax
		jmp    jump_d0e0e
	jump_d0e08:
		inc    %eax
		cmp    $0x20,%eax
		jge    jump_d0dfa
	jump_d0e0e:
		mov    %al,%cl
		mov    %ebp,%edx
		shl    %cl,%edx
		test   %edx,cryo_agents(%ebx)
		je     jump_d0e08
		test   %edx,data_1c5290
		jne    jump_d0e08
		or     %edx,data_1c5288
		jmp    jump_d0e08
	jump_d0e2c:
		pop    %ebp
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_research_unkn_func_003)	/* 0x0D0E34 */
/*----------------------------------------------------------------*/
		push   %edx
		mov    data_1c5283,%edx
		sar    $0x18,%edx
		inc    %edx
		imul   $0x19,%edx,%eax # sizeof(struct WeaponDef)
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(weapon_defs)+24(%edx),%al
		sar    $0x3,%eax
		add    %al,EXPORT_SYMBOL(weapon_defs)+24(%edx)
		pop    %edx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_activate_queued_mail)	/* 0x0D23B4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    new_mail,%cl
		testb  $0x1,data_1c6ea8
		je     jump_d2490
		xor    %ebx,%ebx
		mov    next_brief,%bx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		mov    data_1c6df2,%bl
		mov    %bl,data_1c6e71(%eax)
		mov    data_1c6df3,%bl
		mov    next_ref,%dx
		mov    %bl,data_1c6e72(%eax)
		mov    data_1c6df4,%bl
		mov    next_brief,%di
		mov    %bl,data_1c6e73(%eax)
		mov    data_1c6ea7,%bl
		inc    %edi
		mov    %bl,data_1c6e74(%eax)
		xor    %ebx,%ebx
		mov    %dl,brief_store(%eax)
		mov    %di,%bx
		inc    %edx
		lea    0x0(,%ebx,4),%eax
		mov    %dx,next_ref
		add    %ebx,%eax
		xor    %edx,%edx
		shl    $0x3,%eax
		mov    $0x28,%ebx
		add    $mission_status,%eax
		mov    %di,next_brief
		call   ac_memset
		xor    %ebx,%ebx
		mov    next_brief,%bx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		xor    %edx,%edx
		mov    %edx,data_199830(,%eax,8)
		mov    %edx,data_199834(,%eax,8)
		movl   $0x1,(%esp)
		mov    $0x1,%edx
		mov    new_mail,%cl
		jmp    jump_d251e
	jump_d2490:
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(next_email),%bx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		mov    next_ref,%dx
		mov    EXPORT_SYMBOL(newmail_store),%bl
		mov    %dl,email_store(%eax)
		mov    EXPORT_SYMBOL(next_email),%si
		mov    %bl,data_1c6e0d(%eax)
		mov    data_1c6ea5,%bl
		inc    %esi
		mov    %bl,data_1c6e0e(%eax)
		mov    data_1c6ea6,%bl
		mov    %si,EXPORT_SYMBOL(next_email)
		mov    %bl,data_1c6e0f(%eax)
		mov    data_1c6ea7,%bl
		inc    %edx
		mov    %bl,data_1c6e10(%eax)
		xor    %ebx,%ebx
		mov    %dx,next_ref
		mov    %ebx,(%esp)
		mov    $0x1,%edx
		mov    new_mail,%cl
		jmp    jump_d251e
	jump_d2508:
		lea    (%eax,%eax,4),%ebx
		dec    %eax
		lea    (%eax,%eax,4),%esi
		lea    EXPORT_SYMBOL(newmail_store)(%esi),%edi
		lea    EXPORT_SYMBOL(newmail_store)(%ebx),%esi
		inc    %edx
		movsl  %ds:(%esi),%es:(%edi)
		movsb  %ds:(%esi),%es:(%edi)
	jump_d251e:
		xor    %eax,%eax
		xor    %ebx,%ebx
		mov    %dx,%ax
		mov    %cl,%bl
		cmp    %ebx,%eax
		jl     jump_d2508
		dec    %cl
		mov    (%esp),%eax
		mov    %cl,new_mail
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_delete_mail)	/* 0x0D2540 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		xor    %ebx,%ebx
		mov    %dl,%bl
		mov    %eax,%edx
		inc    %edx
		cmp    $0x1,%ebx
		jne    jump_d25ac
		mov    next_brief,%cx
		mov    %edx,%eax
		cmp    %cx,%dx
		jae    jump_d25a0
	jump_d255e:
		xor    %edx,%edx
		mov    %ax,%dx
		lea    (%edx,%edx,4),%ecx
		lea    -0x1(%edx),%ebx
		imul   $0x28,%edx,%edx
		lea    (%ebx,%ebx,4),%esi
		imul   $0x28,%ebx,%ebx
		lea    brief_store(%esi),%edi
		lea    brief_store(%ecx),%esi
		movsl  %ds:(%esi),%es:(%edi)
		movsb  %ds:(%esi),%es:(%edi)
		mov    $0xa,%ecx
		lea    mission_status(%edx),%esi
		lea    mission_status(%ebx),%edi
		inc    %eax
		mov    next_brief,%dx
		rep movsl %ds:(%esi),%es:(%edi)
		cmp    %dx,%ax
		jb     jump_d255e
	jump_d25a0:
		decw   next_brief
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_d25ac:
		mov    EXPORT_SYMBOL(next_email),%bx
		mov    %edx,%eax
		cmp    %bx,%dx
		jae    jump_d25de
	jump_d25ba:
		xor    %edx,%edx
		mov    %ax,%dx
		lea    (%edx,%edx,4),%esi
		dec    %edx
		lea    (%edx,%edx,4),%edx
		lea    email_store(%esi),%esi
		lea    email_store(%edx),%edi
		movsl  %ds:(%esi),%es:(%edi)
		movsb  %ds:(%esi),%es:(%edi)
		inc    %eax
		cmp    EXPORT_SYMBOL(next_email),%ax
		jb     jump_d25ba
	jump_d25de:
		decw   EXPORT_SYMBOL(next_email)
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_purple_unkn2_data_to_screen)	/* 0x0D265C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		sub    $0x4,%esp
		mov    EXPORT_SYMBOL(lbDisplay)+24,%ebx # lbDisplay.PhysicalScreenWidth
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		add    %eax,%ebx
		mov    EXPORT_SYMBOL(lbDisplay)+4,%eax # lbDisplay.WScreen
		add    $0x8,%ebx
		add    %eax,%ebx
		xor    %ah,%ah
		mov    EXPORT_SYMBOL(vec_tmap)+20,%edx
		mov    %ah,(%esp)
		jmp    jump_d26bc
	jump_d268f:
		mov    $0x140,%ecx
		mov    %edx,%esi
		mov    %ebx,%edi
		push   %edi
		mov    %ecx,%eax
		shr    $0x2,%ecx
		repnz movsl %ds:(%esi),%es:(%edi)
		mov    %al,%cl
		and    $0x3,%cl
		repnz movsb %ds:(%esi),%es:(%edi)
		pop    %edi
		add    EXPORT_SYMBOL(lbDisplay)+24,%ebx # lbDisplay.PhysicalScreenWidth
		mov    (%esp),%cl
		inc    %cl
		add    $0x140,%edx
		mov    %cl,(%esp)
	jump_d26bc:
		xor    %eax,%eax
		mov    (%esp),%al
		cmp    $0xc6,%eax
		jl     jump_d268f
		add    $0x4,%esp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_show_title_box)	/* 0x0D29A4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		sub    $0x4,%esp
		mov    %eax,%esi
		testb  $0x80,0x3c(%eax)
		je     jump_d29ce
		xor    %eax,%eax
		mov    0x9(%esi),%al
		cmp    $0xff,%eax
		je     jump_d29ce
		mov    0x3c(%esi),%dl
		movw   $0xfffb,0x3a(%esi)
		and    $0x7f,%dl
		mov    %dl,0x3c(%esi)
	jump_d29ce:
		cmpl   $0x0,0x18(%esi)
		jne    jump_d29db
		mov    $0x1,%al
		jmp    jump_d2a79
	jump_d29db:
		mov    0x1c(%esi),%eax
		mov    med2_font,%ebx
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		cmp    %ebx,%eax
		sete   %al
		xor    %edx,%edx
		mov    %al,(%esp)
		mov    0x18(%esi),%eax
		mov    0x4(%esi),%dx
		call   ac_my_string_width
		sub    %eax,%edx
		xor    %eax,%eax
		shr    %edx
		mov    (%esi),%ax
		add    %edx,%eax
		mov    %eax,%ebx
		xor    %edx,%edx
		mov    $0x41,%eax
		mov    0x6(%esi),%dx
		call   ac_font_height
		and    $0xff,%eax
		sub    %eax,%edx
		mov    %edx,%eax
		xor    %edx,%edx
		sar    %eax
		mov    0x2(%esi),%dx
		add    %eax,%edx
		mov    $0x41,%eax
		call   ac_font_height
		xor    %ah,%ah
		xor    %ecx,%ecx
		add    %edx,%eax
		mov    %ax,%cx
		xor    %eax,%eax
		and    $0xffff,%edx
		mov    %bx,%ax
		mov    $0x280,%ebx
		call   ac_my_set_text_window
		xor    %eax,%eax
		mov    (%esp),%al
		push   %eax
		lea    0x3a(%esi),%eax
		mov    0x18(%esi),%ebx
		push   %eax
		xor    %eax,%eax
		xor    %ecx,%ecx
		mov    0x38(%esi),%ax
		xor    %edx,%edx
		push   %eax
		mov    0xa(%esi),%cl
		xor    %eax,%eax
		call   ac_flashy_draw_text
	jump_d2a79:
		add    $0x4,%esp
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_show_world_city_info_box)	/* 0x0D2A84 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0xc,%esp
		mov    %eax,(%esp)
		mov    EXPORT_SYMBOL(unkn_city_no)-3,%eax
		sar    $0x18,%eax
		cmp    $0xffffffff,%eax
		je     jump_d2d1e
		mov    (%esp),%eax
		mov    0x3c(%eax),%dl
		test   $0x80,%dl
		jne    jump_d2ab1
		test   $0x80,%dl
		je     jump_d2af2
	jump_d2ab1:
		mov    $0xfffffffb,%edx
		xor    %esi,%esi
		jmp    jump_d2ac3
	jump_d2aba:
		inc    %esi
		mov    %dx,data_155744(,%eax,2)
	jump_d2ac3:
		xor    %eax,%eax
		mov    %si,%ax
		cmp    $0x6,%eax
		jl     jump_d2aba
		mov    (%esp),%eax
		andb   $0x7f,0x3c(%eax)
		mov    EXPORT_SYMBOL(world_info_ACCEPT_button)+0x24,%bh
		mov    EXPORT_SYMBOL(world_info_CANCEL_button)+0x24,%cl
		or     $0x1,%bh
		or     $0x1,%cl
		mov    %bh,EXPORT_SYMBOL(world_info_ACCEPT_button)+0x24
		mov    %cl,EXPORT_SYMBOL(world_info_CANCEL_button)+0x24
	jump_d2af2:
		mov    (%esp),%edx
		xor    %eax,%eax
		mov    0x9(%edx),%al
		cmp    $0xff,%eax
		jne    jump_d2b68
		xor    %esi,%esi
		jmp    jump_d2b3c
	jump_d2b05:
		mov    EXPORT_SYMBOL(unkn_city_no)-3,%edx
		sar    $0x18,%edx
		imul   $0x28,%edx,%ebx
		lea    0x0(,%eax,2),%edx
		xor    %eax,%eax
		mov    memload,%edi
		mov    data_1c52c4(%edx,%ebx,1),%ax
		add    %eax,%edi
		inc    %esi
		sub    %ecx,%ecx
		dec    %ecx
		xor    %eax,%eax
		repnz scas %es:(%edi),%al
		not    %ecx
		dec    %ecx
		mov    %cx,data_155744(%edx)
	jump_d2b3c:
		xor    %eax,%eax
		mov    %si,%ax
		cmp    $0x6,%eax
		jl     jump_d2b05
		mov    EXPORT_SYMBOL(world_info_CANCEL_button)+0x24,%al
		mov    EXPORT_SYMBOL(world_info_ACCEPT_button)+0x24,%ch
		or     $0x2,%al
		or     $0x2,%ch
		mov    %al,EXPORT_SYMBOL(world_info_CANCEL_button)+0x24
		mov    (%esp),%eax
		mov    %ch,EXPORT_SYMBOL(world_info_ACCEPT_button)+0x24
		movb   $0xfe,0x9(%eax)
	jump_d2b68:
		orb    $0x1,EXPORT_SYMBOL(lbDisplay)+97 # lbDisplay.DrawFlags >> 8
		mov    small_med_font,%eax
		mov    %eax,EXPORT_SYMBOL(lbFontPtr)
		mov    $0x41,%eax
		call   ac_font_height
		xor    %ah,%ah
		mov    %eax,0x8(%esp)
		mov    (%esp),%eax
		mov    0x6(%eax),%ax
		xor    %ecx,%ecx
		sub    $0x8,%eax
		mov    %ax,%cx
		mov    (%esp),%eax
		mov    0x4(%eax),%ax
		xor    %ebx,%ebx
		sub    $0x6,%eax
		mov    %ax,%bx
		mov    (%esp),%eax
		mov    0x2(%eax),%ax
		xor    %edx,%edx
		add    $0x4,%eax
		mov    %ax,%dx
		mov    (%esp),%eax
		mov    (%eax),%ax
		add    $0x3,%eax
		and    $0xffff,%eax
		mov    $0x4,%esi
		call   ac_my_set_text_window
		mov    0x8(%esp),%eax
		add    %esi,%eax
		xor    %edi,%edi
		mov    %eax,0x4(%esp)
		jmp    jump_d2c87
	jump_d2be3:
		movzwl %di,%ebp
		xor    %edx,%edx
		xor    %ecx,%ecx
		xor    %eax,%eax
		mov    %si,%dx
		mov    EXPORT_SYMBOL(gui_strings)+0x7A4(,%ebp,4),%ebx
		call   ac_draw_text_purple_list2
		mov    EXPORT_SYMBOL(gui_strings)+0x7A4(,%ebp,4),%eax
		mov    0x4(%esp),%edx
		call   ac_my_count_lines
		imul   %edx,%eax
	jump_d2c0e:
		add    %eax,%esi
		movzwl %di,%ebp
		mov    $data_155744,%eax
		add    %ebp,%ebp
		push   $0x0
		add    %ebp,%eax
		push   %eax
		mov    0x8(%esp),%eax
		xor    %ecx,%ecx
		mov    0xa(%eax),%cl
		mov    EXPORT_SYMBOL(unkn_city_no)-3,%eax
		sar    $0x18,%eax
		imul   $0x28,%eax,%eax
		xor    %edx,%edx
		xor    %ebx,%ebx
		mov    %si,%dx
		mov    data_1c52c4(%eax,%ebp,1),%bx
		mov    memload,%eax
		push   $0x0
		add    %eax,%ebx
		xor    %eax,%eax
		call   ac_flashy_draw_text
		mov    EXPORT_SYMBOL(unkn_city_no)-3,%eax
		sar    $0x18,%eax
		imul   $0x28,%eax,%eax
		mov    data_1c52c4(%eax,%ebp,1),%ax
		mov    memload,%edx
		and    $0xffff,%eax
		add    %edx,%eax
		mov    0x4(%esp),%ebx
		call   ac_my_count_lines
		imul   %ebx,%eax
		mov    0x8(%esp),%ecx
		add    %eax,%esi
		add    %ecx,%esi
	jump_d2c86:
		inc    %edi
	jump_d2c87:
		xor    %eax,%eax
		mov    %di,%ax
		cmp    $0x6,%eax
		jge    jump_d2ce7
		mov    language_3str,%dl
		cmp    $0x66,%dl
		je     jump_d2caa
		cmp    $0x73,%dl
		jne    jump_d2cb4
		cmpb   $0x77,data_177101
		jne    jump_d2cb4
	jump_d2caa:
		xor    %eax,%eax
		mov    %di,%ax
		cmp    $0x4,%eax
		je     jump_d2c86
	jump_d2cb4:
		test   %di,%di
		jne    jump_d2be3
		mov    EXPORT_SYMBOL(gui_strings)+0x650,%ebx
		xor    %edx,%edx
		xor    %ecx,%ecx
		xor    %eax,%eax
		mov    %si,%dx
		call   ac_draw_text_purple_list2
		mov    EXPORT_SYMBOL(gui_strings)+0x650,%eax
		mov    0x4(%esp),%ecx
		call   ac_my_count_lines
		imul   %ecx,%eax
		jmp    jump_d2c0e
	jump_d2ce7:
		xor    %eax,%eax
		xor    %ebx,%ebx
		mov    login_control__State,%al
		mov    %bx,EXPORT_SYMBOL(lbDisplay)+96 # lbDisplay__DrawFlags
		cmp    $0x5,%eax
		je     jump_d2d1e
		xor    %eax,%eax
		mov    screentype,%al
		cmp    $0x3,%eax
		jne    jump_d2d1e
		mov    $world_info_ACCEPT_button,%eax
		call   *EXPORT_SYMBOL(world_info_ACCEPT_button)+0x10
		mov    $world_info_CANCEL_button,%eax
		call   *EXPORT_SYMBOL(world_info_CANCEL_button)+0x10
	jump_d2d1e:
		xor    %al,%al
		add    $0xc,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_do_net_protocol_option)	/* 0x0D2D3C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %edi
		mov    %al,%dl
		cmpb   $0x0,EXPORT_SYMBOL(byte_1C4A7C)
		je     jump_d2d58
		xor    %dh,%dh
		call   ac_LbNetworkReset
		mov    %dh,EXPORT_SYMBOL(byte_1C4A7C)
	jump_d2d58:
		mov    EXPORT_SYMBOL(lbShift),%bl
		mov    $0x1,%eax
		test   $0x1,%bl
		je     jump_d2d6d
		mov    $0x10,%eax
	jump_d2d6d:
		testb  $0x2,EXPORT_SYMBOL(lbShift)
		je     jump_d2d7b
		mov    $0x100,%eax
	jump_d2d7b:
		test   %dl,%dl
		je     jump_d2d9d
		sub    %ax,data_1811b2
		mov    data_1811b0,%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_d2dc2
		movw   $0xaba,data_1811b2
		jmp    jump_d2dc2
	jump_d2d9d:
		mov    data_1811b2,%dx
		add    %eax,%edx
		xor    %eax,%eax
		mov    %dx,%ax
		mov    %dx,data_1811b2
		cmp    $0xaba,%eax
		jle    jump_d2dc2
		xor    %ebx,%ebx
		mov    %bx,data_1811b2
	jump_d2dc2:
		xor    %eax,%eax
		mov    data_1811b2,%ax
		push   %eax
		push   $asc04x_0
		push   $unkn_opt_number_text
		xor    %edx,%edx
		call   ac_sprintf
		add    $0xc,%esp
	jump_d2ddf:
		mov    data_15513d(%edx),%eax
		sar    $0x18,%eax
		inc    %edx
		call   ac_toupper
		mov    %al,data_15513f(%edx)
		cmp    $0x4,%edx
		jb     jump_d2ddf
		mov    $0x1108,%ebx
		mov    $unkstruct04_arr,%eax
		xor    %edx,%edx
		xor    %cl,%cl
		call   ac_memset
		mov    %cl,EXPORT_SYMBOL(byte_1C6D48)
		xor    %edx,%edx
	jump_d2e14:
		add    $0x10,%edx
		xor    %ch,%ch
		mov    %ch,data_1c499c(%edx)
		cmp    $0x80,%edx
		jne    jump_d2e14
		mov    $EXPORT_SYMBOL(nsvc),%eax
		call   ac_LbNetworkServiceStart
		cmp    $0x1,%eax
		jne    jump_d2e3f
		movb   $0x1,EXPORT_SYMBOL(byte_1C4A7C)
		jmp    jump_d2e86
	jump_d2e3f:
		mov    EXPORT_SYMBOL(gui_strings)+0x8E0,%edx
		push   %edx
		mov    $0x2,%edi
		push   $EXPORT_SYMBOL(alert_text)
		mov    $asc19200,%ebx
		mov    $ASM_do_serial_speed_switch,%ecx
		call   ac_sprintf
		mov    $0x1,%al
		add    $0x8,%esp
		mov    %di,EXPORT_SYMBOL(word_1811AE)
		mov    %ebx,EXPORT_SYMBOL(net_protocol_option_button)+0x8
		mov    %al,show_alert
		mov    EXPORT_SYMBOL(gui_strings)+0x7CC,%eax
		mov    %ecx,EXPORT_SYMBOL(net_protocol_option_button)+0x18
		mov    %eax,EXPORT_SYMBOL(net_protocol_select_button)+0x08
	jump_d2e86:
		mov    $0x1,%al
		pop    %edi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_do_net_unkn40)	/* 0x0D2E90 */
/*----------------------------------------------------------------*/
		mov    data_1c4994,%ah
		test   %ah,%ah
		sete   %al
		mov    %al,data_1c4994
		mov    $0x1,%al
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_do_serial_speed_switch)	/* 0x0D2EA4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		sub    $0x4,%esp
		mov    rate,%esi
		mov    %al,(%esp)
		xor    %edx,%edx
		xor    %eax,%eax
	jump_d2eb8:
		mov    data_155770(%eax),%ecx
		lea    0x1(%edx),%ebx
		cmp    %esi,%ecx
		je     jump_d2ecc
		add    $0x4,%eax
		mov    %ebx,%edx
		jmp    jump_d2eb8
	jump_d2ecc:
		cmpb   $0x0,(%esp)
		je     jump_d2ede
		dec    %edx
		test   %edx,%edx
		jge    jump_d2ee7
		mov    $0x7,%edx
		jmp    jump_d2ee7
	jump_d2ede:
		mov    %ebx,%edx
		cmp    $0x7,%ebx
		jle    jump_d2ee7
		xor    %ebx,%edx
	jump_d2ee7:
		mov    data_155770(,%edx,4),%esi
		push   %esi
		push   $ascD_14
		push   $asc19200
		mov    %esi,rate
		call   ac_sprintf
		mov    $0x1,%al
		mov    rate,%esi
		add    $0xc,%esp
		add    $0x4,%esp
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_change_panel_permutation)	/* 0x0D2F18 */
/*----------------------------------------------------------------*/
		push   %edx
		mov    %al,%dl
		mov    ingame__PanelPermutation,%ah
		inc    %ah
		mov    ingame__PanelPermutation,%al
		dec    %al
		test   %dl,%dl
		je     jump_d2f78
		mov    ingame__fld_unkCA0,%edx
		sar    $0x18,%edx
		test   %edx,%edx
		jl     jump_d2f62
		mov    %al,ingame__PanelPermutation
		movsbl %al,%eax
		test   %eax,%eax
		jge    jump_d2f4e
		movb   $0x2,ingame__PanelPermutation
	jump_d2f4e:
		mov    ingame__fld_unkCA0,%eax
		sar    $0x18,%eax
		mov    EXPORT_SYMBOL(gui_strings)+0x910(,%eax,4),%eax
		jmp    jump_d2fdb
	jump_d2f62:
		mov    %ah,ingame__PanelPermutation
		movsbl %ah,%eax
		test   %eax,%eax
		jne    jump_d2fc7
		movb   $0xfd,ingame__PanelPermutation
		jmp    jump_d2fc7
	jump_d2f78:
		mov    ingame__fld_unkCA0,%edx
		sar    $0x18,%edx
		test   %edx,%edx
		jl     jump_d2fb3
		mov    %ah,ingame__PanelPermutation
		movsbl %ah,%eax
		cmp    $0x2,%eax
		jle    jump_d2f9b
		xor    %dl,%dl
		mov    %dl,ingame__PanelPermutation
	jump_d2f9b:
		mov    ingame__fld_unkCA0,%eax
		sar    $0x18,%eax
		mov    EXPORT_SYMBOL(gui_strings)+0x910(,%eax,4),%eax
		mov    %eax,EXPORT_SYMBOL(options_gfx_buttons)+0x28C
		mov    $0x1,%al
		pop    %edx
		ret
	jump_d2fb3:
		mov    %al,ingame__PanelPermutation
		movsbl %al,%eax
		cmp    $0xfffffffd,%eax
		jge    jump_d2fc7
		movb   $0xff,ingame__PanelPermutation
	jump_d2fc7:
		mov    ingame__fld_unkCA0,%eax
		sar    $0x18,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(gui_strings)+0x90C(,%eax,4),%eax
	jump_d2fdb:
		mov    %eax,EXPORT_SYMBOL(options_gfx_buttons)+0x28C
		mov    $0x1,%al
		pop    %edx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_change_trenchcoat_preference)	/* 0x0D2FE4 */
/*----------------------------------------------------------------*/
		push   %edx
		test   %al,%al
		je     jump_d3005
		mov    ingame__TrenchcoatPreference,%dh
		dec    %dh
		mov    %dh,ingame__TrenchcoatPreference
		test   $0x80,%dh
		je     jump_d301f
		movb   $0x5,ingame__TrenchcoatPreference
		jmp    jump_d301f
	jump_d3005:
		incb   ingame__TrenchcoatPreference
		xor    %eax,%eax
		mov    ingame__TrenchcoatPreference,%al
		cmp    $0x5,%eax
		jle    jump_d301f
		xor    %dl,%dl
		mov    %dl,ingame__TrenchcoatPreference
	jump_d301f:
		xor    %eax,%eax
		mov    ingame__TrenchcoatPreference,%al
		mov    EXPORT_SYMBOL(gui_strings)+0x91C(,%eax,4),%eax
		mov    %eax,EXPORT_SYMBOL(options_gfx_buttons)+0x2BA
		mov    $0x1,%al
		pop    %edx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_do_controls_defaults)	/* 0x0D3038 */
/*----------------------------------------------------------------*/
		call   ac_set_default_user_settings
		mov    $0x1,%al
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_do_controls_save)	/* 0x0D3040 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		call   ac_save_user_settings
		test   %al,%al
		je     jump_d3054
		mov    EXPORT_SYMBOL(gui_strings)+0x908,%ebx
		push   %ebx
		jmp    jump_d305b
	jump_d3054:
		mov    EXPORT_SYMBOL(gui_strings)+0x904,%edx
		push   %edx
	jump_d305b:
		push   $EXPORT_SYMBOL(alert_text)
		call   ac_sprintf
		add    $0x8,%esp
		mov    $0x1,%ah
		mov    %ah,show_alert
		mov    %ah,%al
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_do_controls_calibrate)	/* 0x0D3078 */
/*----------------------------------------------------------------*/
		push   %edx
		mov    EXPORT_SYMBOL(gui_strings)+0x8F8,%edx
		push   %edx
		mov    $0x1,%ah
		push   $EXPORT_SYMBOL(alert_text)
		mov    %ah,net_unkn_pos_02
		mov    $0x1,%dl
		call   ac_sprintf
		add    $0x8,%esp
		mov    %dl,show_alert
		mov    %dl,%al
		pop    %edx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_alert_OK)	/* 0x0D30A4 */
/*----------------------------------------------------------------*/
		mov    old_screentype,%al
		mov    %al,screentype
		movb   $0x1,redraw_screen_flag
		xor    %eax,%eax
		mov    screentype,%al
		cmp    $0x7,%eax
		jne    jump_d30c8
		movb   $0x1,EXPORT_SYMBOL(enter_game)
	jump_d30c8:
		mov    $0x1,%al
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_do_net_SET2)	/* 0x0D30CC */
/*----------------------------------------------------------------*/
		push   %edx
		xor    %eax,%eax
		mov    login_control__State,%al
		cmp    $0x6,%eax
		jne    jump_d30dd
		mov    $0x1,%al
		jmp    jump_d30ef
	jump_d30dd:
		xor    %edx,%edx
		call   ac_LbNetworkPlayerNumber
		mov    net_host_player_no,%dl
		cmp    %edx,%eax
		sete   %al
	jump_d30ef:
		test   %al,%al
		je     jump_d3123
		xor    %eax,%eax
		mov    login_control__State,%al
		cmp    $0x5,%eax
		jne    jump_d3123
		orb    $0x2,unkn_flags_08
		call   ac_LbNetworkPlayerNumber
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		movb   $0x6,network_players(,%eax,2)
		mov    $0x1,%al
		pop    %edx
		ret
	jump_d3123:
		xor    %al,%al
		pop    %edx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_do_net_SET)	/* 0x0D3128 */
/*----------------------------------------------------------------*/
		push   %edx
		xor    %eax,%eax
		mov    login_control__State,%al
		cmp    $0x6,%eax
		jne    jump_d3139
		mov    $0x1,%al
		jmp    jump_d314b
	jump_d3139:
		xor    %edx,%edx
		call   ac_LbNetworkPlayerNumber
		mov    net_host_player_no,%dl
		cmp    %edx,%eax
		sete   %al
	jump_d314b:
		test   %al,%al
		je     jump_d317f
		xor    %eax,%eax
		mov    login_control__State,%al
		cmp    $0x5,%eax
		jne    jump_d317f
		orb    $0x1,unkn_flags_08
		call   ac_LbNetworkPlayerNumber
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		movb   $0x6,network_players(,%eax,2)
		mov    $0x1,%al
		pop    %edx
		ret
	jump_d317f:
		xor    %al,%al
		pop    %edx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_do_net_INITIATE)	/* 0x0D3184 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(word_1811AE),%ax
		cmp    $0x1,%eax
		jne    jump_d31a3
		cmpb   $0x0,EXPORT_SYMBOL(byte_1C4A7C)
		jne    jump_d31a3
		xor    %al,%al
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_d31a3:
		xor    %eax,%eax
		mov    login_control__State,%al
		cmp    $0x6,%eax
		jne    jump_d3210
		call   net_unkn_func_32
		test   %al,%al
		je     jump_d326e
		mov    EXPORT_SYMBOL(gui_strings)+0x60C,%eax
		mov    EXPORT_SYMBOL(byte_1C4A6F),%bh
		mov    %eax,EXPORT_SYMBOL(net_INITIATE_button)+0x08
		test   %bh,%bh
		je     jump_d31d7
		mov    EXPORT_SYMBOL(gui_strings)+0x820,%eax
		jmp    jump_d31dc
	jump_d31d7:
		mov    EXPORT_SYMBOL(gui_strings)+0x610,%eax
	jump_d31dc:
		mov    %eax,EXPORT_SYMBOL(net_groups_LOGON_button)+0x08
		call   ac_init_variables
		call   ac_init_agents
		call   ac_srm_reset_research
		mov    $0x5,%cl
		xor    %eax,%eax
		mov    %cl,login_control__State
		mov    $0xf,%ch
	jump_d31fc:
		add    $0x1aa,%eax
		mov    %ch,EXPORT_SYMBOL(players)-0x0EF(%eax)
		cmp    $0xd50,%eax
		je     jump_d326e
		jmp    jump_d31fc
	jump_d3210:
		cmp    $0x5,%eax
		jne    jump_d326e
		cmp    $0x6,%eax
		jne    jump_d321e
		mov    $0x1,%al
		jmp    jump_d3230
	jump_d321e:
		xor    %edx,%edx
		call   ac_LbNetworkPlayerNumber
		mov    net_host_player_no,%dl
		cmp    %edx,%eax
		sete   %al
	jump_d3230:
		test   %al,%al
		je     jump_d326e
		mov    data_181185,%eax
		sar    $0x18,%eax
		cmp    $0xffffffff,%eax
		jne    jump_d3247
		xor    %al,%al
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_d3247:
		mov    $0xff,%dl
		mov    %dl,EXPORT_SYMBOL(byte_15516D)
		mov    %dl,EXPORT_SYMBOL(byte_15516C)
		call   ac_LbNetworkPlayerNumber
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		movb   $0x2,network_players(,%eax,2)
	jump_d326e:
		mov    $0x1,%al
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_do_net_groups_LOGON)	/* 0x0D3274 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(word_1811AE),%ax
		cmp    $0x1,%eax
		jne    jump_d3293
		cmpb   $0x0,EXPORT_SYMBOL(byte_1C4A7C)
		jne    jump_d3293
		xor    %al,%al
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_d3293:
		xor    %eax,%eax
		mov    login_control__State,%al
		cmp    $0x6,%eax
		jne    jump_d3335
		mov    unkn_city_no,%eax
		sar    $0x18,%eax
		cmp    $0xffffffff,%eax
		jne    jump_d32c1
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(word_1811AE),%ax
		cmp    $0x1,%eax
		je     jump_d3335
	jump_d32c1:
		mov    unkn_city_no,%eax
		sar    $0x18,%eax
		imul   $0xda,%eax,%eax
		add    $unkstruct04_arr,%eax
		call   net_unkn_func_31
		test   %al,%al
		je     jump_d3381
		mov    EXPORT_SYMBOL(gui_strings)+0x60C,%eax
		mov    EXPORT_SYMBOL(byte_1C4A6F),%bh
		mov    %eax,EXPORT_SYMBOL(net_INITIATE_button)+0x08
		test   %bh,%bh
		je     jump_d32fc
		mov    EXPORT_SYMBOL(gui_strings)+0x820,%eax
		jmp    jump_d3301
	jump_d32fc:
		mov    EXPORT_SYMBOL(gui_strings)+0x610,%eax
	jump_d3301:
		mov    %eax,EXPORT_SYMBOL(net_groups_LOGON_button)+0x08
		call   ac_init_variables
		call   ac_init_agents
		call   ac_srm_reset_research
		mov    $0x5,%cl
		xor    %eax,%eax
		mov    %cl,login_control__State
		mov    $0xf,%ch
	jump_d3321:
		add    $0x1aa,%eax
		mov    %ch,EXPORT_SYMBOL(players)-0x0EF(%eax)
		cmp    $0xd50,%eax
		je     jump_d3381
		jmp    jump_d3321
	jump_d3335:
		xor    %eax,%eax
		mov    login_control__State,%al
		cmp    $0x5,%eax
		jne    jump_d3381
		call   ac_LbNetworkPlayerNumber
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		movb   $0xd,network_players(,%eax,2)
		mov    $0xff,%dh
		mov    EXPORT_SYMBOL(gui_strings)+0x604,%eax
		mov    %dh,EXPORT_SYMBOL(byte_15516D)
		mov    %eax,EXPORT_SYMBOL(net_INITIATE_button)+0x08
		mov    EXPORT_SYMBOL(gui_strings)+0x608,%eax
		mov    %dh,EXPORT_SYMBOL(byte_15516C)
		mov    %eax,EXPORT_SYMBOL(net_groups_LOGON_button)+0x08
		call   ac_net_unkn_func_33
	jump_d3381:
		mov    $0x1,%al
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_do_unkn8_EJECT)	/* 0x0D3388 */
/*----------------------------------------------------------------*/
		push   %edx
		call   ac_LbNetworkPlayerNumber
		mov    EXPORT_SYMBOL(selected_city_id),%edx
		sar    $0x18,%edx
		cmp    %eax,%edx
		je     jump_d33b3
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		movb   $0xc,network_players(,%eax,2)
		mov    $0x1,%al
		pop    %edx
		ret
	jump_d33b3:
		xor    %al,%al
		pop    %edx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_accept_mission)	/* 0x0D33B8 */
/*----------------------------------------------------------------*/
		push   %edx
		mov    EXPORT_SYMBOL(open_brief)-2,%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jle    jump_d33e1
		mov    $0x3,%ah
		mov    $0x1,%dl
		mov    %ah,change_screen
		mov    open_brief,%ax
		mov    %dl,map_from_mission
		mov    %ax,EXPORT_SYMBOL(old_mission_brief)
	jump_d33e1:
		mov    $0x1,%al
		pop    %edx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_do_unkn1_CANCEL)	/* 0x0D33E8 */
/*----------------------------------------------------------------*/
		push   %edx
		mov    $0x1,%ah
		mov    $0x63,%dl
		mov    %ah,reload_background_flag
		mov    %dl,screentype
		xor    %al,%al
		pop    %edx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_do_unkn2_ACCEPT)	/* 0x0D3400 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		mov    EXPORT_SYMBOL(unkn_city_no)-3,%eax
		sar    $0x18,%eax
		cmp    $0xffffffff,%eax
		je     jump_d3456
		mov    %eax,%edx
		shl    $0x2,%eax
		add    %edx,%eax
		testb  $0x11,data_1c52c2(,%eax,8)
		jne    jump_d3442
		movb   $0x1,show_alert
		mov    EXPORT_SYMBOL(gui_strings)+0x8E4,%edx
		push   %edx
		push   $ascS
		push   $EXPORT_SYMBOL(alert_text)
		call   ac_sprintf
		add    $0xc,%esp
		jmp    jump_d3451
	jump_d3442:
		xor    %bl,%bl
		mov    %bl,map_from_mission
		movb   $0x1,start_into_mission
	jump_d3451:
		mov    $0x1,%al
		pop    %edx
		pop    %ebx
		ret
	jump_d3456:
		xor    %al,%al
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_do_unkn2_CANCEL)	/* 0x0D345C */
/*----------------------------------------------------------------*/
		cmpb   $0x0,map_from_mission
		je     jump_d346f
		movb   $0x7,change_screen
		xor    %al,%al
		ret
	jump_d346f:
		movb   $0x1,reload_background_flag
		movb   $0x63,screentype
		xor    %al,%al
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_do_sysmnu_button)	/* 0x0D3480 */
/*----------------------------------------------------------------*/
		mov    $0x1,%ah
		mov    %ah,EXPORT_SYMBOL(enter_game)
		mov    %ah,%al
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_save_game_slot)	/* 0x0D38B0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		xor    %eax,%eax
		mov    login_control__State,%al
		cmp    $0x6,%eax
		je     jump_d38c7
		xor    %al,%al
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_d38c7:
		mov    EXPORT_SYMBOL(save_slot)-2,%eax
		sar    $0x10,%eax
		cmp    $0xffffffff,%eax
		je     jump_d3942
		mov    EXPORT_SYMBOL(save_slot)-2,%eax
		mov    EXPORT_SYMBOL(save_slot_base),%ebx
		sar    $0x10,%eax
		sub    %ebx,%eax
		lea    -0x1(%eax),%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x3,%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(save_slot_names),%edx
		add    %eax,%edx
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(save_slot),%al
		call   ac_save_game_write
		test   %al,%al
		je     jump_d3927
		mov    EXPORT_SYMBOL(gui_strings)+0x8D8,%esi
		push   %esi
		push   $ascS_5
		mov    $0x1,%dh
		push   $EXPORT_SYMBOL(alert_text)
		mov    %dh,show_alert
		jmp    jump_d395b
	jump_d3927:
		mov    EXPORT_SYMBOL(gui_strings)+0x8EC,%ecx
		push   %ecx
		push   $ascS_6
		mov    $0x1,%dl
		push   $EXPORT_SYMBOL(alert_text)
		mov    %dl,show_alert
		jmp    jump_d395b
	jump_d3942:
		mov    EXPORT_SYMBOL(gui_strings)+0x8D0,%edx
		push   %edx
		push   $ascS_7
		mov    $0x1,%ah
		push   $EXPORT_SYMBOL(alert_text)
		mov    %ah,show_alert
	jump_d395b:
		call   ac_sprintf
		add    $0xc,%esp
		mov    $0x1,%al
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_main_do_my_quit)	/* 0x0D396C */
/*----------------------------------------------------------------*/
		push   %edx
		mov    $0x7a,%edx
		xor    %eax,%eax
		call   ac_stop_sample_using_heap
		mov    $0x1,%ah
		mov    %ah,exit_game
		mov    %ah,%al
		pop    %edx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_main_do_login_1)	/* 0x0D3988 */
/*----------------------------------------------------------------*/
		push   %edx
		mov    $0xa,%ah
		mov    $0x1,%dl
		mov    %ah,screentype
		mov    %dl,edit_flag
		mov    %dl,reload_background_flag
		mov    %dl,%al
		pop    %edx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_goto_savegame)	/* 0x0D39A4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		sub    $0x20,%esp
		mov    $0x1,%ah
		mov    EXPORT_SYMBOL(ingame)+0x92F,%dl # ingame.Flags+0
		mov    %ah,restore_savegame
		test   $0x10,%dl
		je     jump_d39e7
		mov    $0x5c,%ecx
	jump_d39c4:
		mov    EXPORT_SYMBOL(sysmnu_buttons)+0x2(%ecx),%dx
		add    $0x2e,%ecx
		add    $0x3c,%edx
		mov    %dx,EXPORT_SYMBOL(storage_slots_box)+0x18(%ecx)
		cmp    $0x114,%ecx
		jne    jump_d39c4
		andb   $0xef,EXPORT_SYMBOL(ingame)+0x92F # ingame.Flags+0
	jump_d39e7:
		mov    $0x2,%cl
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(ingame)+0x92F,%bl # ingame.Flags+0
		mov    EXPORT_SYMBOL(local_player_no),%dl
		and    $0xef,%bl
		lea    0x0(,%edx,8),%eax
		mov    %cl,EXPORT_SYMBOL(game_system_screen)
		add    %edx,%eax
		mov    $0xf,%ch
		shl    $0x3,%eax
		mov    %bl,EXPORT_SYMBOL(ingame)+0x92F # ingame.Flags+0
		sub    %edx,%eax
		mov    $0x7,%bh
		add    %eax,%eax
		mov    %bh,screentype
		mov    %eax,%edx
		shl    $0x2,%eax
		mov    EXPORT_SYMBOL(sysmnu_buttons)+0x0E8,%bx
		sub    %edx,%eax
		sub    $0x96,%ebx
		mov    $0x2,%edx
		mov    %ch,data_1a639b(%eax)
		mov    %bx,EXPORT_SYMBOL(sysmnu_buttons)+0x0E8
		mov    $0x0,%eax
		call   ac_load_city_data
		call   ac_init_weapon_text
		call   ac_load_city_txt
		call   ac_init_variables
		call   ac_srm_reset_research
		call   ac_init_agents
		xor    %al,%al
		xor    %edx,%edx
		xor    %esi,%esi
		xor    %edi,%edi
		mov    %al,edit_flag
		mov    $0x1,%ah
		mov    %edx,EXPORT_SYMBOL(save_slot_base)
		mov    %ah,redraw_screen_flag
		jmp    jump_d3b16
	jump_d3ac3:
		push   %esi
		mov    paQdataSavegam_5,%ebx
		push   %ebx
		lea    0x8(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
	jump_d3ad8:
		mov    $0x2,%edx
		mov    %esp,%eax
		call   ac_LbFileOpen
		mov    %eax,%ecx
		cmp    $0xffffffff,%eax
		je     jump_d3b05
		mov    $EXPORT_SYMBOL(save_slot_names),%edx
		mov    $0x19,%ebx
		add    %edi,%edx
		call   ac_LbFileRead
		mov    %ecx,%eax
		call   ac_LbFileClose
		jmp    jump_d3b0d
	jump_d3b05:
		xor    %dl,%dl
		mov    %dl,EXPORT_SYMBOL(save_slot_names)(%edi)
	jump_d3b0d:
		inc    %esi
		add    $0x19,%edi
		cmp    $0x9,%esi
		jge    jump_d3b31
	jump_d3b16:
		cmp    $0x8,%esi
		jne    jump_d3ac3
		mov    savegame_mortal_fname,%ecx
		push   %ecx
		lea    0x4(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0x8,%esp
		jmp    jump_d3ad8
	jump_d3b31:
		mov    $0x1,%al
		add    $0x20,%esp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_do_abort_2)	/* 0x0D3B3C */
/*----------------------------------------------------------------*/
		push   %edx
		mov    $0x1,%dl
		mov    $0x6,%ah
		mov    %dl,redraw_screen_flag
		xor    %dh,%dh
		mov    %ah,screentype
		mov    %dh,edit_flag
		mov    %dl,%al
		pop    %edx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_main_do_map_editor)	/* 0x0D3E0C */
/*----------------------------------------------------------------*/
		mov    $0x1,%ah
		mov    %ah,map_editor
		mov    %ah,%al
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_do_cryo_offer_cancel)	/* 0x0D3FF8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		mov    $0xff,%ah
		mov    $0x1,%bl
		xor    %dl,%dl
		mov    %ah,selected_mod
		mov    %dl,EXPORT_SYMBOL(cybmod_name_text)
		mov    EXPORT_SYMBOL(cryo_cybmod_list_box)+0x3C,%dh
		mov    %bl,refresh_equip_list
		or     $0x80,%dh
		xor    %al,%al
		mov    %dh,EXPORT_SYMBOL(cryo_cybmod_list_box)+0x3C
		pop    %edx
		pop    %ebx
		ret

vtable_d4028:
		.long   func_d417d
		.long   func_d4452
		.long   func_d4452
		.long   func_d4452
		.long   func_d43f6
		.long   func_d439a
		.long   func_d42e2
		.long   func_d433e

vtable_d4048:
		.long   func_d4515
		.long   func_d46ab
		.long   func_d46ab
		.long   func_d46ab
		.long   func_d466f
		.long   func_d4633
		.long   func_d45c3
		.long   func_d45fb

vtable_d4068:
		.long   func_d4799
		.long   func_d4903
		.long   func_d49bf
		.long   func_d4a6f
		.long   func_d4b34

vtable_d407c:
		.long   func_d4c03
		.long   func_d4d0e
		.long   func_d4dc2
		.long   func_d4e63
		.long   func_d4f21


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_do_equip_offer_buy)	/* 0x0D4090 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		xor    %ah,%ah
		mov    %ah,0x4(%esp)
		mov    data_1c4d22,%eax
		sar    $0x18,%eax
		cmp    $0xffffffff,%eax
		jne    jump_d40b3
		xor    %al,%al
		jmp    jump_d48f9
	jump_d40b3:
		xor    %eax,%eax
		mov    login_control__State,%al
		cmp    $0x5,%eax
		jne    jump_d40eb
		testb  $0x8,unkn_flags_08
		je     jump_d40eb
		cmp    $0x6,%eax
		jne    jump_d40d1
		mov    $0x1,%al
		jmp    jump_d40e3
	jump_d40d1:
		xor    %edx,%edx
		call   ac_LbNetworkPlayerNumber
		mov    net_host_player_no,%dl
		cmp    %edx,%eax
		sete   %al
	jump_d40e3:
		test   %al,%al
		je     jump_d48f9
	jump_d40eb:
		xor    %eax,%eax
		mov    screentype,%al
		cmp    $0x5,%eax
		jne    jump_d46f4
		mov    data_1c4d22,%eax
		sar    $0x18,%eax
		cmp    $0x4,%eax
		je     jump_d44c2
		mov    data_155161,%eax
		sar    $0x18,%eax
		lea    0x1(%eax),%edx
		imul   $0x19,%edx,%eax # sizeof(struct WeaponDef)
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(weapon_defs)+20(%eax),%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x3,%eax
		add    %edx,%eax
		mov    ingame__Credits,%edx
		shl    $0x2,%eax
		sub    %eax,%edx
		test   %edx,%edx
		jge    jump_d4157
		xor    %al,%al
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_d4157:
		xor    %edx,%edx
		xor    %eax,%eax
		mov    selected_weapon,%dl
		mov    selected_agent,%al
		call   ac_free_slot
		test   %al,%al
		jne    jump_d44aa
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_d417d:
/*----------------------------------------------------------------*/
		mov    data_1c4d22,%ecx
		sar    $0x18,%ecx
		lea    0x0(,%ecx,4),%ebx
		add    %ecx,%ebx
		xor    %eax,%eax
		mov    data_1c4c86(%ebx),%al
		cmp    $0x4,%eax
		jne    jump_d41a8
		xor    %al,%al
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_d41a8:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		incb   data_1c4c86(%ebx)
		incb   data_1a63ee(%ecx,%eax,1)
	jump_d41d4:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		mov    $0x1,%ebx
		sub    %edx,%eax
		mov    data_155161,%ecx
		mov    %eax,%edx
		mov    data_1c4d22,%eax
		sar    $0x18,%ecx
		sar    $0x18,%eax
		shl    %cl,%ebx
		or     %ebx,data_1a63b0(%edx,%eax,4)
		or     %ebx,cryo_agents(,%eax,4)
		mov    data_155161,%eax
		sar    $0x18,%eax
		lea    0x1(%eax),%edx
		imul   $0x19,%edx,%eax # sizeof(struct WeaponDef)
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(weapon_defs)+20(%eax),%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x3,%eax
		add    %edx,%eax
		mov    ingame__Credits,%ebx
		shl    $0x2,%eax
		mov    ingame__Expenditure,%ecx
		sub    %eax,%ebx
		add    %eax,%ecx
		mov    %ebx,ingame__Credits
		mov    $0x1,%bl
		mov    %ecx,ingame__Expenditure
		mov    %bl,0x4(%esp)
	jump_d4270:
		xor    %eax,%eax
		mov    login_control__State,%al
		cmp    $0x5,%eax
		jne    jump_d48f5
		testb  $0x8,unkn_flags_08
		je     jump_d48f5
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		movb   $0xe,network_players(,%eax,2)
		xor    %edx,%edx
		call   ac_net_unkn_func_33
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		movb   $0xf,network_players(,%eax,2)
		incl   gameturn
		mov    0x4(%esp),%al
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_d42e2:
/*----------------------------------------------------------------*/
		mov    data_1c4d22,%ecx
		sar    $0x18,%ecx
		lea    0x0(,%ecx,4),%ebx
		add    %ecx,%ebx
		xor    %eax,%eax
		mov    data_1c4c84(%ebx),%al
		cmp    $0x4,%eax
		jne    jump_d430d
		xor    %al,%al
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_d430d:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		incb   data_1c4c84(%ebx)
		incb   data_1a63e6(%ecx,%eax,1)
		jmp    jump_d41d4


/*----------------------------------------------------------------*/
func_d433e:
/*----------------------------------------------------------------*/
		mov    data_1c4d22,%ecx
		sar    $0x18,%ecx
		lea    0x0(,%ecx,4),%ebx
		add    %ecx,%ebx
		xor    %eax,%eax
		mov    data_1c4c85(%ebx),%al
		cmp    $0x4,%eax
		jne    jump_d4369
		xor    %al,%al
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_d4369:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		incb   data_1c4c85(%ebx)
		incb   data_1a63ea(%ecx,%eax,1)
		jmp    jump_d41d4


/*----------------------------------------------------------------*/
func_d439a:
/*----------------------------------------------------------------*/
		mov    data_1c4d22,%ecx
		sar    $0x18,%ecx
		lea    0x0(,%ecx,4),%ebx
		add    %ecx,%ebx
		xor    %eax,%eax
		mov    data_1c4c88(%ebx),%al
		cmp    $0x4,%eax
		jne    jump_d43c5
		xor    %al,%al
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_d43c5:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		incb   data_1c4c88(%ebx)
		incb   data_1a63f6(%ecx,%eax,1)
		jmp    jump_d41d4


/*----------------------------------------------------------------*/
func_d43f6:
/*----------------------------------------------------------------*/
		mov    data_1c4d22,%ecx
		sar    $0x18,%ecx
		lea    0x0(,%ecx,4),%ebx
		add    %ecx,%ebx
		xor    %eax,%eax
		mov    data_1c4c87(%ebx),%al
		cmp    $0x4,%eax
		jne    jump_d4421
		xor    %al,%al
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_d4421:
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		incb   data_1c4c87(%ebx)
		incb   data_1a63f2(%ecx,%eax,1)
		jmp    jump_d41d4


/*----------------------------------------------------------------*/
func_d4452:
/*----------------------------------------------------------------*/
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		sub    %edx,%eax
		mov    %eax,%edx
		mov    data_1c4d22,%eax
		sar    $0x18,%eax
		shl    $0x2,%eax
		mov    data_155161,%ecx
		add    %eax,%edx
		sar    $0x18,%ecx
		mov    $0x1,%eax
		mov    data_1a63b0(%edx),%edi
		shl    %cl,%eax
		test   %edi,%eax
		je     jump_d41d4
		xor    %al,%al
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_d44aa:
		mov    selected_weapon,%al
		sub    $0x5,%al
		cmp    $0x7,%al
		ja     func_d4452
		and    $0xff,%eax
		jmp    *%cs:vtable_d4028(,%eax,4)
	jump_d44c2:
		xor    %esi,%esi
		xor    %ebx,%ebx
		mov    %esi,(%esp)
		mov    %eax,%ebp
	jump_d44cb:
		mov    data_155161,%eax
		sar    $0x18,%eax
		inc    %eax
		imul   $0x19,%eax,%eax # sizeof(struct WeaponDef)
		mov    EXPORT_SYMBOL(weapon_defs)+20(%eax),%ax
		and    $0xffff,%eax
		imul   $0x64,%eax,%eax
		mov    ingame__Credits,%edx
		sub    %eax,%edx
		test   %edx,%edx
		jl     jump_d48f5
		xor    %eax,%eax
		xor    %edx,%edx
		mov    (%esp),%al
		mov    selected_weapon,%dl
		call   ac_free_slot
		test   %al,%al
		jne    jump_d46dc
		jmp    jump_d45a9


/*----------------------------------------------------------------*/
func_d4515:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    data_1c4c86(%ebx),%al
		cmp    $0x4,%eax
		je     jump_d45a9
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(local_player_no),%al
		imul   $0x1aa,%eax,%eax
		incb   data_1c4c86(%ebx)
		add    (%esp),%eax
		incb   data_1a63ee(%eax)
	jump_d4542:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(local_player_no),%al
		imul   $0x1aa,%eax,%eax
		mov    data_155161,%ecx
		mov    $0x1,%edx
		sar    $0x18,%ecx
		shl    %cl,%edx
		or     %edx,data_1a63b0(%esi,%eax,1)
		mov    data_155161,%eax
		sar    $0x18,%eax
		inc    %eax
		imul   $0x19,%eax,%eax # sizeof(struct WeaponDef)
		or     %edx,cryo_agents(%esi)
		mov    EXPORT_SYMBOL(weapon_defs)+20(%eax),%ax
		and    $0xffff,%eax
		imul   $0x64,%eax,%eax
		mov    ingame__Expenditure,%ecx
		mov    ingame__Credits,%edx
		add    %eax,%ecx
		sub    %eax,%edx
		mov    %ecx,ingame__Expenditure
		mov    $0x1,%cl
		mov    %edx,ingame__Credits
		mov    %cl,0x4(%esp)
	jump_d45a9:
		mov    (%esp),%edi
		add    $0x5,%ebx
		inc    %edi
		add    $0x4,%esi
		mov    %edi,(%esp)
		cmp    %edi,%ebp
		jg     jump_d44cb
		jmp    jump_d4270


/*----------------------------------------------------------------*/
func_d45c3:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    data_1c4c84(%ebx),%al
		cmp    $0x4,%eax
		je     jump_d45a9
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(local_player_no),%al
		imul   $0x1aa,%eax,%eax
		mov    data_1c4c84(%ebx),%cl
		mov    (%esp),%edx
		inc    %cl
		add    %edx,%eax
		mov    %cl,data_1c4c84(%ebx)
		incb   data_1a63e6(%eax)
		jmp    jump_d4542


/*----------------------------------------------------------------*/
func_d45fb:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    data_1c4c85(%ebx),%al
		cmp    $0x4,%eax
		je     jump_d45a9
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(local_player_no),%al
		imul   $0x1aa,%eax,%eax
		mov    data_1c4c85(%ebx),%dl
		mov    (%esp),%edi
		inc    %dl
		add    %edi,%eax
		mov    %dl,data_1c4c85(%ebx)
		incb   data_1a63ea(%eax)
		jmp    jump_d4542


/*----------------------------------------------------------------*/
func_d4633:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    data_1c4c88(%ebx),%al
		cmp    $0x4,%eax
		je     jump_d45a9
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(local_player_no),%al
		imul   $0x1aa,%eax,%eax
		mov    data_1c4c88(%ebx),%dl
		mov    (%esp),%ecx
		inc    %dl
		add    %ecx,%eax
		mov    %dl,data_1c4c88(%ebx)
		incb   data_1a63f6(%eax)
		jmp    jump_d4542


/*----------------------------------------------------------------*/
func_d466f:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    data_1c4c87(%ebx),%al
		cmp    $0x4,%eax
		je     jump_d45a9
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(local_player_no),%al
		imul   $0x1aa,%eax,%eax
		mov    data_1c4c87(%ebx),%cl
		mov    (%esp),%edi
		inc    %cl
		add    %edi,%eax
		mov    %cl,data_1c4c87(%ebx)
		incb   data_1a63f2(%eax)
		jmp    jump_d4542


/*----------------------------------------------------------------*/
func_d46ab:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(local_player_no),%al
		imul   $0x1aa,%eax,%eax
		mov    data_155161,%ecx
		lea    (%eax,%esi,1),%edx
		sar    $0x18,%ecx
		mov    $0x1,%eax
		shl    %cl,%eax
		test   %eax,data_1a63b0(%edx)
		jne    jump_d45a9
		jmp    jump_d4542
	jump_d46dc:
		mov    selected_weapon,%al
		sub    $0x5,%al
		cmp    $0x7,%al
		ja     func_d46ab
		and    $0xff,%eax
		jmp    *%cs:vtable_d4048(,%eax,4)
	jump_d46f4:
		mov    data_155162,%edx
		sar    $0x18,%edx
		cmp    $0xb,%edx
		jle    jump_d4709
		mov    $0x4,%eax
		jmp    jump_d4715
	jump_d4709:
		mov    $0x3,%ebx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
	jump_d4715:
		mov    %al,%bh
		xor    %eax,%eax
		mov    %bh,%al
		cmp    $0x4,%eax
		jne    jump_d472b
		mov    selected_mod,%bl
		sub    $0xb,%bl
		jmp    jump_d4743
	jump_d472b:
		mov    data_155162,%edx
		sar    $0x18,%edx
		mov    $0x3,%ecx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		inc    %edx
		mov    %dl,%bl
	jump_d4743:
		mov    data_1c4d22,%ecx
		sar    $0x18,%ecx
		cmp    $0x4,%ecx
		je     jump_d4bc0
		mov    data_155162,%edx
		sar    $0x18,%edx
		inc    %edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(mod_defs)+20(,%eax,8),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    ingame__Credits,%edx
		add    %eax,%eax
		sub    %eax,%edx
		test   %edx,%edx
		jge    jump_d4bab
		xor    %al,%al
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_d4799:
/*----------------------------------------------------------------*/
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		add    %ecx,%ecx
		sub    %edx,%eax
		add    %ecx,%eax
		mov    data_1a63c0(%eax),%dx
		xor    %dh,%dh
		xor    %esi,%esi
		and    $0x7,%dl
		mov    %dx,%si
		xor    %edx,%edx
		mov    %bl,%dl
		cmp    %edx,%esi
		je     jump_d47fb
		mov    data_1a63c0(%eax),%si
		shl    $0x7,%esi
		shr    $0xd,%si
		and    $0xffff,%esi
		sub    %esi,%edx
		cmp    $0x1,%edx
		jg     jump_d47fb
		testw  $0x1c0,data_1a63c0(%eax)
		jne    jump_d4807
	jump_d47fb:
		xor    %al,%al
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_d4807:
		mov    %bl,%dl
		mov    data_1a63c0(%eax),%bl
		and    $0xf8,%bl
		xor    %dh,%dh
		mov    %bl,data_1a63c0(%eax)
		and    $0x7,%dl
		or     %dx,data_1a63c0(%eax)
		andb   $0xf8,data_1c4c20(%ecx)
		or     %dx,data_1c4c20(%ecx)
		mov    data_1c4a9b,%cl
		or     $0x8,%cl
		mov    $flic_mods,%eax
		mov    %cl,data_1c4a9b
		call   ac_update_flic_mods
	jump_d484b:
		mov    data_155162,%eax
		sar    $0x18,%eax
		lea    0x1(%eax),%edx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(mod_defs)+20(,%eax,8),%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    ingame__Expenditure,%ecx
		add    %eax,%eax
		mov    ingame__Credits,%ebx
		add    %eax,%ecx
		sub    %eax,%ebx
		mov    %ecx,ingame__Expenditure
		mov    $0x1,%ch
		mov    %ebx,ingame__Credits
		mov    %ch,0x4(%esp)
	jump_d4896:
		xor    %eax,%eax
		mov    login_control__State,%al
		cmp    $0x5,%eax
		jne    jump_d48c9
		testb  $0x8,unkn_flags_08
		je     jump_d48c9
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		movb   $0xe,network_players(,%eax,2)
	jump_d48c9:
		mov    $0xff,%cl
		mov    EXPORT_SYMBOL(cryo_cybmod_list_box)+0x3C,%al
		xor    %ebx,%ebx
		mov    %cl,selected_mod
		or     $0x80,%al
		mov    %ebx,EXPORT_SYMBOL(cryo_cybmod_list_box)+0x18
		mov    %al,EXPORT_SYMBOL(cryo_cybmod_list_box)+0x3C
		xor    %ch,%ch
		mov    $0x1,%ah
		mov    %ch,EXPORT_SYMBOL(cybmod_name_text)
		mov    %ah,refresh_equip_list
	jump_d48f5:
		mov    0x4(%esp),%al
	jump_d48f9:
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_d4903:
/*----------------------------------------------------------------*/
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		add    %ecx,%ecx
		sub    %edx,%eax
		add    %ecx,%eax
		mov    data_1a63c0(%eax),%dx
		shl    $0xa,%edx
		xor    %esi,%esi
		shr    $0xd,%dx
		mov    %dx,%si
		xor    %edx,%edx
		mov    %bl,%dl
		cmp    %edx,%esi
		je     jump_d4967
		mov    data_1a63c0(%eax),%si
		shl    $0x7,%esi
		shr    $0xd,%si
		and    $0xffff,%esi
		sub    %esi,%edx
		cmp    $0x1,%edx
		jg     jump_d4967
		testw  $0x1c0,data_1a63c0(%eax)
		jne    jump_d4973
	jump_d4967:
		xor    %al,%al
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_d4973:
		mov    %bl,%dl
		mov    data_1a63c0(%eax),%bl
		xor    %dh,%dh
		and    $0xc7,%bl
		and    $0x7,%dl
		mov    %bl,data_1a63c0(%eax)
		shl    $0x3,%edx
		or     %dx,data_1a63c0(%eax)
		andb   $0xc7,data_1c4c20(%ecx)
		or     %dx,data_1c4c20(%ecx)
		mov    data_1c4a9a,%cl
		or     $0x8,%cl
		mov    $flic_mods,%eax
		mov    %cl,data_1c4a9a
		call   ac_update_flic_mods
		jmp    jump_d484b


/*----------------------------------------------------------------*/
func_d49bf:
/*----------------------------------------------------------------*/
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		add    %ecx,%ecx
		sub    %edx,%eax
		add    %ecx,%eax
		mov    data_1a63c0(%eax),%dx
		shl    $0x7,%edx
		shr    $0xd,%dx
		and    $0xffff,%edx
		movzbl %bl,%esi
		cmp    %esi,%edx
		jne    jump_d4a09
		xor    %al,%al
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_d4a09:
		mov    %bl,%dl
		mov    data_1a63c0(%eax),%di
		mov    data_1c4c20(%ecx),%si
		and    $0xfffffe3f,%edi
		xor    %dh,%dh
		and    $0xfffffe3f,%esi
		and    $0x7,%dl
		mov    %edi,%ebx
		mov    %di,data_1a63c0(%eax)
		mov    %si,data_1c4c20(%ecx)
		shl    $0x6,%edx
		mov    %esi,%edi
		or     %edx,%ebx
		or     %edx,%edi
		mov    mod_draw_states,%dl
		mov    %bx,data_1a63c0(%eax)
		mov    %di,data_1c4c20(%ecx)
		or     $0x8,%dl
		mov    $flic_mods,%eax
		mov    %dl,mod_draw_states
		call   ac_update_flic_mods
		jmp    jump_d484b


/*----------------------------------------------------------------*/
func_d4a6f:
/*----------------------------------------------------------------*/
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		add    %ecx,%ecx
		sub    %edx,%eax
		add    %ecx,%eax
		mov    data_1a63c0(%eax),%dx
		shl    $0x4,%edx
		xor    %esi,%esi
		shr    $0xd,%dx
		mov    %dx,%si
		xor    %edx,%edx
		mov    %bl,%dl
		cmp    %edx,%esi
		je     jump_d4ad3
		mov    data_1a63c0(%eax),%si
		shl    $0x7,%esi
		shr    $0xd,%si
		and    $0xffff,%esi
		sub    %esi,%edx
		cmp    $0x1,%edx
		jg     jump_d4ad3
		testw  $0x1c0,data_1a63c0(%eax)
		jne    jump_d4adf
	jump_d4ad3:
		xor    %al,%al
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_d4adf:
		mov    %bl,%dl
		mov    data_1a63c1(%eax),%bh
		xor    %dh,%dh
		and    $0xf1,%bh
		and    $0x7,%dl
		mov    %bh,data_1a63c1(%eax)
		shl    $0x9,%edx
		or     %dx,data_1a63c0(%eax)
		andb   $0xf1,data_1c4c21(%ecx)
		mov    data_1c4a99,%ah
		mov    data_1c4c20(%ecx),%si
		or     $0x8,%ah
		or     %edx,%esi
		mov    %ah,data_1c4a99
		mov    $flic_mods,%eax
		mov    %si,data_1c4c20(%ecx)
		call   ac_update_flic_mods
		jmp    jump_d484b


/*----------------------------------------------------------------*/
func_d4b34:
/*----------------------------------------------------------------*/
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		add    %eax,%eax
		mov    %eax,%edx
		shl    $0x2,%eax
		add    %ecx,%ecx
		sub    %edx,%eax
		add    %ecx,%eax
		mov    data_1a63c0(%eax),%dx
		mov    %edx,%esi
		shr    $0xc,%si
		and    $0xffff,%esi
		movzbl %bl,%edi
		cmp    %edi,%esi
		jne    jump_d4b7d
		xor    %al,%al
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_d4b7d:
		xor    %bh,%bh
		and    $0xf,%dh
		and    $0xf,%bl
		mov    %dx,data_1a63c0(%eax)
		mov    %ebx,%edx
		shl    $0xc,%edx
		or     %dx,data_1a63c0(%eax)
		andb   $0xf,data_1c4c21(%ecx)
		or     %dx,data_1c4c20(%ecx)
		jmp    jump_d484b
	jump_d4bab:
		cmp    $0x4,%bh
		ja     jump_d484b
		xor    %eax,%eax
		mov    %bh,%al
		jmp    *%cs:vtable_d4068(,%eax,4)
	jump_d4bc0:
		mov    $flic_mods,%ebp
		xor    %edx,%edx
		xor    %ecx,%ecx
		mov    %edx,(%esp)
	jump_d4bcc:
		mov    data_155162,%eax
		sar    $0x18,%eax
		inc    %eax
		imul   $0x18,%eax,%eax
		mov    EXPORT_SYMBOL(mod_defs)+20(%eax),%ax
		and    $0xffff,%eax
		imul   $0xa,%eax,%eax
		mov    ingame__Credits,%edx
		sub    %eax,%edx
		test   %edx,%edx
		jge    jump_d4f86
		xor    %al,%al
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_d4c03:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(local_player_no),%al
		imul   $0x1aa,%eax,%eax
		add    %ecx,%eax
		mov    data_1a63c0(%eax),%dx
		xor    %dh,%dh
		xor    %esi,%esi
		and    $0x7,%dl
		mov    %dx,%si
		xor    %edx,%edx
		mov    %bl,%dl
		cmp    %edx,%esi
		je     jump_d4cf6
		mov    data_1a63c0(%eax),%si
		shl    $0x7,%esi
		shr    $0xd,%si
		and    $0xffff,%esi
		sub    %esi,%edx
		cmp    $0x1,%edx
		jg     jump_d4cf6
		testw  $0x1c0,data_1a63c0(%eax)
		je     jump_d4cf6
		mov    (%esp),%dl
		mov    %dl,selected_agent
		mov    %bl,%dl
		andb   $0xf8,data_1a63c0(%eax)
		xor    %dh,%dh
		mov    data_1a63c0(%eax),%si
		and    $0x7,%dl
		or     %edx,%esi
		mov    %si,data_1a63c0(%eax)
		andb   $0xf8,data_1c4c20(%ecx)
		mov    data_1c4a9b,%ah
		mov    data_1c4c20(%ecx),%di
		or     $0x8,%ah
		or     %edx,%edi
		mov    $0x4,%dl
		mov    %ah,data_1c4a9b
		mov    %ebp,%eax
		mov    %di,data_1c4c20(%ecx)
		call   ac_update_flic_mods
		mov    %dl,selected_agent
	jump_d4cb9:
		mov    data_155162,%eax
		sar    $0x18,%eax
		inc    %eax
		imul   $0x18,%eax,%eax
		mov    EXPORT_SYMBOL(mod_defs)+20(%eax),%ax
		and    $0xffff,%eax
		imul   $0xa,%eax,%eax
		mov    $0x1,%dh
		mov    ingame__Credits,%esi
		mov    ingame__Expenditure,%edi
		mov    %dh,0x4(%esp)
		sub    %eax,%esi
		add    %eax,%edi
		mov    %esi,ingame__Credits
		mov    %edi,ingame__Expenditure
	jump_d4cf6:
		mov    (%esp),%eax
		inc    %eax
		add    $0x2,%ecx
		mov    %eax,(%esp)
		cmp    $0x4,%eax
		jl     jump_d4bcc
		jmp    jump_d4896


/*----------------------------------------------------------------*/
func_d4d0e:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(local_player_no),%al
		imul   $0x1aa,%eax,%eax
		add    %ecx,%eax
		mov    data_1a63c0(%eax),%dx
		shl    $0xa,%edx
		xor    %esi,%esi
		shr    $0xd,%dx
		mov    %dx,%si
		xor    %edx,%edx
		mov    %bl,%dl
		cmp    %edx,%esi
		je     jump_d4cf6
		mov    data_1a63c0(%eax),%si
		shl    $0x7,%esi
		shr    $0xd,%si
		and    $0xffff,%esi
		sub    %esi,%edx
		cmp    $0x1,%edx
		jg     jump_d4cf6
		testw  $0x1c0,data_1a63c0(%eax)
		je     jump_d4cf6
		mov    (%esp),%dl
		mov    %dl,selected_agent
		mov    %bl,%dl
		xor    %dh,%dh
		andb   $0xc7,data_1a63c0(%eax)
		and    $0x7,%dl
		mov    data_1a63c0(%eax),%si
		shl    $0x3,%edx
		or     %edx,%esi
		mov    %si,data_1a63c0(%eax)
		andb   $0xc7,data_1c4c20(%ecx)
		mov    data_1c4a9a,%ah
		mov    data_1c4c20(%ecx),%di
		or     $0x8,%ah
		or     %edx,%edi
		mov    $0x4,%dl
		mov    %ah,data_1c4a9a
		mov    %ebp,%eax
		mov    %di,data_1c4c20(%ecx)
		call   ac_update_flic_mods
		mov    %dl,selected_agent
		jmp    jump_d4cb9


/*----------------------------------------------------------------*/
func_d4dc2:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(local_player_no),%al
		imul   $0x1aa,%eax,%eax
		add    %ecx,%eax
		mov    data_1a63c0(%eax),%dx
		shl    $0x7,%edx
		xor    %esi,%esi
		shr    $0xd,%dx
		mov    %dx,%si
		xor    %edx,%edx
		mov    %bl,%dl
		cmp    %edx,%esi
		je     jump_d4cf6
		mov    (%esp),%dl
		mov    %dl,selected_agent
		mov    %bl,%dl
		mov    data_1a63c0(%eax),%si
		xor    %dh,%dh
		and    $0xfffffe3f,%esi
		and    $0x7,%dl
		mov    %esi,%edi
		shl    $0x6,%edx
		mov    %si,data_1a63c0(%eax)
		or     %edx,%edi
		mov    %di,data_1a63c0(%eax)
		mov    data_1c4c20(%ecx),%ax
		and    $0xfffffe3f,%eax
		mov    %eax,%esi
		mov    %ax,data_1c4c20(%ecx)
		or     %edx,%esi
		mov    mod_draw_states,%dl
		mov    %ebp,%eax
		or     $0x8,%dl
		mov    %si,data_1c4c20(%ecx)
		mov    %dl,mod_draw_states
		mov    $0x4,%dh
		call   ac_update_flic_mods
		mov    %dh,selected_agent
		jmp    jump_d4cb9


/*----------------------------------------------------------------*/
func_d4e63:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(local_player_no),%al
		imul   $0x1aa,%eax,%eax
		add    %ecx,%eax
		mov    data_1a63c0(%eax),%dx
		shl    $0x4,%edx
		shr    $0xd,%dx
		and    $0xffff,%edx
		movzbl %bl,%esi
		cmp    %esi,%edx
		je     jump_d4cf6
		mov    data_1a63c0(%eax),%dx
		shl    $0x7,%edx
		shr    $0xd,%dx
		and    $0xffff,%edx
		sub    %edx,%esi
		cmp    $0x1,%esi
		jg     jump_d4cf6
		testw  $0x1c0,data_1a63c0(%eax)
		je     jump_d4cf6
		mov    (%esp),%dl
		movzbw %bl,%si
		mov    %dl,selected_agent
		mov    data_1a63c1(%eax),%dl
		and    $0x7,%esi
		and    $0xf1,%dl
		shl    $0x9,%esi
		mov    %dl,data_1a63c1(%eax)
		mov    data_1c4c21(%ecx),%dh
		mov    data_1a63c0(%eax),%di
		and    $0xf1,%dh
		or     %esi,%edi
		mov    %dh,data_1c4c21(%ecx)
		mov    %di,data_1a63c0(%eax)
		or     %si,data_1c4c20(%ecx)
		orb    $0x8,data_1c4a99
		mov    %ebp,%eax
		call   ac_update_flic_mods
		movb   $0x4,selected_agent
		jmp    jump_d4cb9


/*----------------------------------------------------------------*/
func_d4f21:
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(local_player_no),%al
		imul   $0x1aa,%eax,%eax
		add    %ecx,%eax
		mov    data_1a63c0(%eax),%dx
		mov    %edx,%esi
		xor    %edi,%edi
		shr    $0xc,%si
		mov    %si,%di
		movzbl %bl,%esi
		cmp    %esi,%edi
		je     jump_d4cf6
		movzbw %bl,%si
		and    $0xf,%dh
		and    $0xf,%esi
		mov    %dx,data_1a63c0(%eax)
		mov    %esi,%edx
		mov    data_1a63c0(%eax),%di
		shl    $0xc,%edx
		or     %edx,%edi
		mov    %di,data_1a63c0(%eax)
		andb   $0xf,data_1c4c21(%ecx)
		or     %dx,data_1c4c20(%ecx)
		jmp    jump_d4cb9
	jump_d4f86:
		cmp    $0x4,%bh
		ja     jump_d4cb9
		xor    %eax,%eax
		mov    %bh,%al
		jmp    *%cs:vtable_d407c(,%eax,4)

vtable_d4f9c:
		.long   func_d5090
		.long   func_d53fc
		.long   func_d53fc
		.long   func_d53fc
		.long   func_d5373
		.long   func_d52ea
		.long   func_d51db
		.long   func_d5264

vtable_d4fbc:
		.long   func_d54c2
		.long   func_d5688
		.long   func_d5688
		.long   func_d5688
		.long   func_d5633
		.long   func_d55d5
		.long   func_d5520
		.long   func_d5575


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_sell_equipment)	/* 0x0D4FDC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		xor    %eax,%eax
		mov    login_control__State,%al
		xor    %esi,%esi
		cmp    $0x5,%eax
		jne    jump_d501c
		testb  $0x8,unkn_flags_08
		je     jump_d501c
		cmp    $0x6,%eax
		jne    jump_d5002
		mov    $0x1,%al
		jmp    jump_d5014
	jump_d5002:
		xor    %edx,%edx
		call   ac_LbNetworkPlayerNumber
		mov    net_host_player_no,%dl
		cmp    %edx,%eax
		sete   %al
	jump_d5014:
		test   %al,%al
		je     jump_d51d4
	jump_d501c:
		xor    %eax,%eax
		mov    screentype,%al
		cmp    $0x5,%eax
		jne    jump_d5175
		mov    data_1c4d22,%ecx
		sar    $0x18,%ecx
		cmp    $0x4,%ecx
		jne    jump_d5461
		xor    %ebx,%ebx
		xor    %edx,%edx
		xor    %eax,%eax
	jump_d5044:
		mov    data_155161,%ecx
		sar    $0x18,%ecx
		inc    %ecx
		imul   $0x19,%ecx,%ecx # sizeof(struct WeaponDef)
		mov    EXPORT_SYMBOL(weapon_defs)+20(%ecx),%cx
		and    $0xffff,%ecx
		imul   $0x64,%ecx,%ecx
		mov    ingame__Credits,%ebp
		sar    %ecx
		add    %ecx,%ebp
		mov    selected_weapon,%cl
		mov    %cl,%ch
		sub    $0x5,%ch
		mov    %ebp,ingame__Credits
		cmp    $0x7,%ch
		ja     func_d5688
		movzbl %ch,%edi
		jmp    *%cs:vtable_d4fbc(,%edi,4)


/*----------------------------------------------------------------*/
func_d5090:
/*----------------------------------------------------------------*/
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(local_player_no),%bl
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		sub    %ebx,%eax
		add    %eax,%eax
		lea    0x0(,%eax,4),%ebp
		sub    %eax,%ebp
		mov    data_1a63ee(%ecx,%ebp,1),%bl
		mov    %ecx,%edi
		dec    %bl
		mov    %ecx,%eax
		mov    %bl,data_1a63ee(%ecx,%ebp,1)
		mov    data_1c4c86(%edi,%eax,4),%bh
		dec    %bh
		mov    %bh,data_1c4c86(%edi,%eax,4)
		jne    jump_d5111
		lea    0x0(,%ecx,4),%eax
		movsbl %dl,%ecx
		mov    $0x1,%edx
		shl    %cl,%edx
		mov    data_1a63b0(%eax,%ebp,1),%esi
		not    %edx
		mov    cryo_agents(%eax),%edi
		and    %edx,%esi
		and    %edx,%edi
		mov    %esi,data_1a63b0(%eax,%ebp,1)
		mov    %edi,cryo_agents(%eax)
		mov    $0x1,%esi
	jump_d5111:
		xor    %eax,%eax
		mov    login_control__State,%al
		cmp    $0x5,%eax
		jne    jump_d5175
		testb  $0x8,unkn_flags_08
		je     jump_d5175
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x2,%eax
		add    %edx,%eax
		movb   $0xe,network_players(,%eax,2)
		xor    %edx,%edx
		call   ac_net_unkn_func_33
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    gameturn,%ebp
		shl    $0x2,%eax
		inc    %ebp
		add    %edx,%eax
		mov    $0xf,%dh
		mov    %ebp,gameturn
		mov    %dh,network_players(,%eax,2)
	jump_d5175:
		test   %esi,%esi
		je     jump_d51d2
		mov    data_155161,%edx
		sar    $0x18,%edx
		inc    %edx
		imul   $0x19,%edx,%eax # sizeof(struct WeaponDef)
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(weapon_defs)+20(%eax),%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x3,%eax
		add    %edx,%eax
		shl    $0x2,%eax
		push   %eax
		push   $ascD_16
		push   $equip_cost_text
		call   ac_sprintf
		mov    EXPORT_SYMBOL(gui_strings)+0x6D0,%eax
		mov    %eax,EXPORT_SYMBOL(equip_offer_buy_button)+0x08
		mov    $ac_do_equip_offer_buy,%eax
		add    $0xc,%esp
		mov    %eax,EXPORT_SYMBOL(equip_offer_buy_button)+0x18
	jump_d51d2:
		mov    $0x1,%al
	jump_d51d4:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_d51db:
/*----------------------------------------------------------------*/
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(local_player_no),%bl
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		sub    %ebx,%eax
		add    %eax,%eax
		mov    %eax,%ebx
		shl    $0x2,%eax
		sub    %ebx,%eax
		mov    %eax,%ebx
		mov    data_1a63e6(%ecx,%ebx,1),%dh
		lea    0x0(,%ecx,4),%eax
		dec    %dh
		add    %ecx,%eax
		mov    %dh,data_1a63e6(%ecx,%ebx,1)
		mov    data_1c4c84(%eax),%dh
		dec    %dh
		mov    %dh,data_1c4c84(%eax)
		jne    jump_d5111
		lea    0x0(,%ecx,4),%eax
		movsbl %dl,%ecx
		mov    $0x1,%edx
		shl    %cl,%edx
		mov    data_1a63b0(%ebx,%eax,1),%ebp
		not    %edx
		and    %edx,%ebp
		mov    %ebp,data_1a63b0(%ebx,%eax,1)
		mov    cryo_agents(%eax),%ebx
		and    %edx,%ebx
		mov    $0x1,%esi
		mov    %ebx,cryo_agents(%eax)
		jmp    jump_d5111


/*----------------------------------------------------------------*/
func_d5264:
/*----------------------------------------------------------------*/
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(local_player_no),%bl
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		sub    %ebx,%eax
		add    %eax,%eax
		lea    0x0(,%eax,4),%ebp
		sub    %eax,%ebp
		mov    %ecx,%edi
		mov    data_1a63ea(%ecx,%ebp,1),%dh
		mov    %ecx,%eax
		dec    %dh
		mov    data_1c4c85(%edi,%eax,4),%bl
		mov    %dh,data_1a63ea(%ecx,%ebp,1)
		dec    %bl
		mov    %bl,data_1c4c85(%edi,%eax,4)
		jne    jump_d5111
		lea    0x0(,%ecx,4),%eax
		movsbl %dl,%ecx
		mov    $0x1,%edx
		shl    %cl,%edx
		mov    data_1a63b0(%eax,%ebp,1),%edi
		not    %edx
		and    %edx,%edi
		mov    %edi,data_1a63b0(%eax,%ebp,1)
		mov    cryo_agents(%eax),%ebp
		and    %edx,%ebp
		mov    $0x1,%esi
		mov    %ebp,cryo_agents(%eax)
		jmp    jump_d5111


/*----------------------------------------------------------------*/
func_d52ea:
/*----------------------------------------------------------------*/
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(local_player_no),%bl
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		sub    %ebx,%eax
		add    %eax,%eax
		lea    0x0(,%eax,4),%edi
		sub    %eax,%edi
		mov    data_1a63f6(%ecx,%edi,1),%bl
		lea    0x0(,%ecx,4),%eax
		dec    %bl
		add    %ecx,%eax
		mov    %bl,data_1a63f6(%ecx,%edi,1)
		mov    data_1c4c88(%eax),%bh
		dec    %bh
		mov    %bh,data_1c4c88(%eax)
		jne    jump_d5111
		lea    0x0(,%ecx,4),%eax
		movsbl %dl,%ecx
		mov    $0x1,%edx
		mov    $0x1,%esi
		shl    %cl,%edx
		mov    data_1a63b0(%edi,%eax,1),%ebx
		not    %edx
		mov    cryo_agents(%eax),%ecx
		and    %edx,%ebx
		and    %edx,%ecx
		mov    %ebx,data_1a63b0(%edi,%eax,1)
		mov    %ecx,cryo_agents(%eax)
		jmp    jump_d5111


/*----------------------------------------------------------------*/
func_d5373:
/*----------------------------------------------------------------*/
		xor    %ebx,%ebx
		mov    EXPORT_SYMBOL(local_player_no),%bl
		lea    0x0(,%ebx,8),%eax
		add    %ebx,%eax
		shl    $0x3,%eax
		sub    %ebx,%eax
		add    %eax,%eax
		lea    0x0(,%eax,4),%edi
		sub    %eax,%edi
		mov    data_1a63f2(%ecx,%edi,1),%bl
		lea    0x0(,%ecx,4),%eax
		dec    %bl
		add    %ecx,%eax
		mov    %bl,data_1a63f2(%ecx,%edi,1)
		mov    data_1c4c87(%eax),%bh
		dec    %bh
		mov    %bh,data_1c4c87(%eax)
		jne    jump_d5111
		lea    0x0(,%ecx,4),%eax
		movsbl %dl,%ecx
		mov    $0x1,%edx
		mov    $0x1,%esi
		shl    %cl,%edx
		mov    data_1a63b0(%edi,%eax,1),%ebx
		not    %edx
		mov    cryo_agents(%eax),%ecx
		and    %edx,%ebx
		and    %edx,%ecx
		mov    %ebx,data_1a63b0(%edi,%eax,1)
		mov    %ecx,cryo_agents(%eax)
		jmp    jump_d5111


/*----------------------------------------------------------------*/
func_d53fc:
/*----------------------------------------------------------------*/
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(local_player_no),%dl
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		shl    $0x3,%eax
		sub    %edx,%eax
		mov    data_155161,%ecx
		add    %eax,%eax
		sar    $0x18,%ecx
		lea    0x0(,%eax,4),%ebx
		mov    $0x1,%edx
		sub    %eax,%ebx
		mov    data_1c4d22,%eax
		shl    %cl,%edx
		sar    $0x18,%eax
		not    %edx
		mov    data_1a63b0(%ebx,%eax,4),%ecx
		mov    cryo_agents(,%eax,4),%esi
		and    %edx,%ecx
		and    %edx,%esi
		mov    %ecx,data_1a63b0(%ebx,%eax,4)
		mov    %esi,cryo_agents(,%eax,4)
		mov    $0x1,%esi
		jmp    jump_d5111
	jump_d5461:
		mov    data_155161,%edx
		sar    $0x18,%edx
		inc    %edx
		imul   $0x19,%edx,%eax # sizeof(struct WeaponDef)
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(weapon_defs)+20(%eax),%dx
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		shl    $0x3,%eax
		add    %edx,%eax
		shl    $0x2,%eax
		mov    ingame__Credits,%edx
		sar    %eax
		add    %eax,%edx
		mov    %edx,ingame__Credits
		mov    selected_weapon,%dl
		mov    %dl,%al
		sub    $0x5,%al
		cmp    $0x7,%al
		ja     func_d53fc
		and    $0xff,%eax
		jmp    *%cs:vtable_d4f9c(,%eax,4)


/*----------------------------------------------------------------*/
func_d54c2:
/*----------------------------------------------------------------*/
		movzbl EXPORT_SYMBOL(local_player_no),%ebp
		imul   $0x1aa,%ebp,%ebp
		decb   data_1a63ee(%ebx,%ebp,1)
		mov    data_1c4c86(%edx),%ch
		dec    %ch
		mov    %ch,data_1c4c86(%edx)
		jne    jump_d56b9
		mov    $0x1,%esi
		movsbl %cl,%ecx
		shl    %cl,%esi
		mov    %esi,%ecx
		not    %ecx
		mov    data_1a63b0(%eax,%ebp,1),%esi
		mov    cryo_agents(%eax),%edi
		and    %ecx,%esi
		and    %ecx,%edi
		mov    %esi,data_1a63b0(%eax,%ebp,1)
		mov    %edi,cryo_agents(%eax)
		mov    $0x1,%esi
		jmp    jump_d56b9


/*----------------------------------------------------------------*/
func_d5520:
/*----------------------------------------------------------------*/
		movzbl EXPORT_SYMBOL(local_player_no),%ebp
		imul   $0x1aa,%ebp,%ebp
		decb   data_1a63e6(%ebx,%ebp,1)
		mov    data_1c4c84(%edx),%ch
		dec    %ch
		mov    %ch,data_1c4c84(%edx)
		jne    jump_d56b9
		mov    $0x1,%edi
		movsbl %cl,%ecx
		shl    %cl,%edi
		mov    %edi,%ecx
		not    %ecx
		and    %ecx,data_1a63b0(%eax,%ebp,1)
		mov    cryo_agents(%eax),%ebp
		and    %ecx,%ebp
		mov    $0x1,%esi
		mov    %ebp,cryo_agents(%eax)
		jmp    jump_d56b9


/*----------------------------------------------------------------*/
func_d5575:
/*----------------------------------------------------------------*/
		movzbl EXPORT_SYMBOL(local_player_no),%edi
		imul   $0x1aa,%edi,%edi
		lea    (%edi,%ebx,1),%ebp
		decb   data_1a63ea(%ebp)
		mov    data_1c4c85(%edx),%ch
		dec    %ch
		mov    %ch,data_1c4c85(%edx)
		jne    jump_d56b9
		mov    $0x1,%esi
		movsbl %cl,%ecx
		shl    %cl,%esi
		mov    %esi,%ecx
		mov    data_1a63b0(%edi,%eax,1),%ebp
		not    %ecx
		mov    cryo_agents(%eax),%esi
		and    %ecx,%ebp
		and    %ecx,%esi
		mov    %ebp,data_1a63b0(%edi,%eax,1)
		mov    %esi,cryo_agents(%eax)
		mov    $0x1,%esi
		jmp    jump_d56b9


/*----------------------------------------------------------------*/
func_d55d5:
/*----------------------------------------------------------------*/
		movzbl EXPORT_SYMBOL(local_player_no),%ebp
		imul   $0x1aa,%ebp,%ebp
		decb   data_1a63f6(%ebx,%ebp,1)
		mov    data_1c4c88(%edx),%ch
		dec    %ch
		mov    %ch,data_1c4c88(%edx)
		jne    jump_d56b9
		mov    $0x1,%edi
		movsbl %cl,%ecx
		shl    %cl,%edi
		mov    %edi,%ecx
		mov    data_1a63b0(%eax,%ebp,1),%esi
		not    %ecx
		mov    cryo_agents(%eax),%edi
		and    %ecx,%esi
		and    %ecx,%edi
		mov    %esi,data_1a63b0(%eax,%ebp,1)
		mov    %edi,cryo_agents(%eax)
		mov    $0x1,%esi
		jmp    jump_d56b9


/*----------------------------------------------------------------*/
func_d5633:
/*----------------------------------------------------------------*/
		movzbl EXPORT_SYMBOL(local_player_no),%ebp
		imul   $0x1aa,%ebp,%ebp
		decb   data_1a63f2(%ebx,%ebp,1)
		mov    data_1c4c87(%edx),%ch
		dec    %ch
		mov    %ch,data_1c4c87(%edx)
		jne    jump_d56b9
		mov    $0x1,%esi
		movsbl %cl,%ecx
		shl    %cl,%esi
		not    %esi
		mov    data_1a63b0(%eax,%ebp,1),%ecx
		mov    cryo_agents(%eax),%edi
		and    %esi,%ecx
		and    %esi,%edi
		mov    $0x1,%esi
		mov    %ecx,data_1a63b0(%eax,%ebp,1)
		mov    %edi,cryo_agents(%eax)
		jmp    jump_d56b9


/*----------------------------------------------------------------*/
func_d5688:
/*----------------------------------------------------------------*/
		movzbl EXPORT_SYMBOL(local_player_no),%esi
		imul   $0x1aa,%esi,%esi
		mov    data_155161,%ecx
		mov    $0x1,%edi
		sar    $0x18,%ecx
		shl    %cl,%edi
		not    %edi
		and    %edi,data_1a63b0(%esi,%eax,1)
		and    %edi,cryo_agents(%eax)
		mov    $0x1,%esi
	jump_d56b9:
		add    $0x5,%edx
		inc    %ebx
		add    $0x4,%eax
		cmp    $0x4,%ebx
		jge    jump_d5111
		jmp    jump_d5044


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_do_research_submit)	/* 0x0D56D0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		push   %esi
		push   %edi
		cmpb   $0x0,EXPORT_SYMBOL(research_on_weapons)
		je     jump_d572e
		mov    data_155163,%eax
		sar    $0x18,%eax
		cmp    $0xffffffff,%eax
		je     jump_d577b
		mov    $0xff,%bl
		mov    EXPORT_SYMBOL(research_selected_wep),%al
		mov    $EXPORT_SYMBOL(research_curr_wep_date),%edi
		mov    $global_date,%esi
		mov    %al,data_1c5286
		mov    %bl,EXPORT_SYMBOL(research_selected_wep)
		movsl  %ds:(%esi),%es:(%edi)
		movsb  %ds:(%esi),%es:(%edi)
		mov    $ASM_do_research_suspend,%ebx
		mov    EXPORT_SYMBOL(gui_strings)+0x688,%eax
		mov    %ebx,EXPORT_SYMBOL(research_submit_button)+0x18
		mov    %eax,EXPORT_SYMBOL(research_submit_button)+0x08
		mov    $0x1,%al
		sub    %al,EXPORT_SYMBOL(research_curr_wep_date)
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ebx
		ret
	jump_d572e:
		mov    selected_weapon,%eax
		sar    $0x18,%eax
		cmp    $0xffffffff,%eax
		je     jump_d577b
		mov    $0xff,%dl
		mov    EXPORT_SYMBOL(research_selected_mod),%al
		mov    $EXPORT_SYMBOL(research_curr_mod_date),%edi
		mov    $global_date,%esi
		mov    %al,data_1c5287
		mov    %dl,EXPORT_SYMBOL(research_selected_mod)
		movsl  %ds:(%esi),%es:(%edi)
		movsb  %ds:(%esi),%es:(%edi)
		mov    $ASM_do_research_suspend,%edx
		mov    EXPORT_SYMBOL(gui_strings)+0x688,%eax
		mov    %edx,EXPORT_SYMBOL(research_submit_button)+0x18
		mov    %eax,EXPORT_SYMBOL(research_submit_button)+0x08
		mov    $0x1,%al
		sub    %al,EXPORT_SYMBOL(research_curr_mod_date)
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ebx
		ret
	jump_d577b:
		xor    %al,%al
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_do_research_suspend)	/* 0x0D5784 */
/*----------------------------------------------------------------*/
		push   %edx
		cmpb   $0x0,EXPORT_SYMBOL(research_on_weapons)
		je     jump_d5797
		movb   $0xff,data_1c5286
		jmp    jump_d579e
	jump_d5797:
		movb   $0xff,data_1c5287
	jump_d579e:
		mov    $ASM_do_research_submit,%edx
		mov    EXPORT_SYMBOL(gui_strings)+0x684,%eax
		mov    %edx,EXPORT_SYMBOL(research_submit_button)+0x18
		mov    %eax,EXPORT_SYMBOL(research_submit_button)+0x08
		xor    %al,%al
		pop    %edx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_do_unkn12_WEAPONS_MODS)	/* 0x0D57B8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		mov    EXPORT_SYMBOL(research_on_weapons),%ah
		test   %ah,%ah
		sete   %al
		mov    %al,EXPORT_SYMBOL(research_on_weapons)
		test   %al,%al
		je     jump_d580b
		mov    EXPORT_SYMBOL(gui_strings)+0x70C,%eax
		mov    %eax,EXPORT_SYMBOL(unkn12_WEAPONS_MODS_button)+0x08
		mov    data_1c5283,%eax
		sar    $0x18,%eax
		cmp    $0xffffffff,%eax
		je     jump_d57f9
		mov    $ASM_do_research_suspend,%esi
		mov    EXPORT_SYMBOL(gui_strings)+0x688,%eax
		mov    %esi,EXPORT_SYMBOL(research_submit_button)+0x18
		jmp    jump_d5844
	jump_d57f9:
		mov    $ASM_do_research_submit,%ecx
		mov    EXPORT_SYMBOL(gui_strings)+0x684,%eax
		mov    %ecx,EXPORT_SYMBOL(research_submit_button)+0x18
		jmp    jump_d5844
	jump_d580b:
		mov    EXPORT_SYMBOL(gui_strings)+0x708,%eax
		mov    %eax,EXPORT_SYMBOL(unkn12_WEAPONS_MODS_button)+0x08
		mov    data_1c5284,%eax
		sar    $0x18,%eax
		cmp    $0xffffffff,%eax
		je     jump_d5834
		mov    $ASM_do_research_suspend,%ebx
		mov    EXPORT_SYMBOL(gui_strings)+0x688,%eax
		mov    %ebx,EXPORT_SYMBOL(research_submit_button)+0x18
		jmp    jump_d5844
	jump_d5834:
		mov    $ASM_do_research_submit,%edx
		mov    EXPORT_SYMBOL(gui_strings)+0x684,%eax
		mov    %edx,EXPORT_SYMBOL(research_submit_button)+0x18
	jump_d5844:
		mov    %eax,EXPORT_SYMBOL(research_submit_button)+0x08
		mov    $0xff,%dl
		mov    %dl,EXPORT_SYMBOL(research_selected_mod)
		mov    %dl,EXPORT_SYMBOL(research_selected_wep)
		xor    %edx,%edx
		mov    $0x1,%al
		mov    %dx,EXPORT_SYMBOL(research_unkn21_box)+0x16
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_fill_ail_sample_ids)	/* 0x0D5AD0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		call   ac_GetSoundInstalled
		test   %al,%al
		je     jump_d5b0b
		call   ac_GetFirstSampleInfoStructure
		mov    %eax,%ecx
		call   ac_GetLastSampleInfoStructure
		xor    %edx,%edx
		mov    %eax,%ebx
		mov    %eax,%esi
		mov    %ecx,%eax
		cmp    %ebx,%ecx
		ja     jump_d5b0b
	jump_d5af5:
		xor    %ebx,%ebx
		mov    (%eax),%ecx
		mov    %dx,%bx
		add    $0x19,%eax
		inc    %edx
		mov    %ecx,ail_sample_ids(,%ebx,4)
		cmp    %esi,%eax
		jbe    jump_d5af5
	jump_d5b0b:
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_create_sound_effect)	/* 0x0D5B60 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		mov    %eax,%edi
		test   %eax,%eax
		jl     jump_d5b6f
		cmp    $0x8000,%eax
		jl     jump_d5b76
	jump_d5b6f:
		xor    %esi,%esi
		jmp    jump_d5c24
	jump_d5b76:
		test   %ebx,%ebx
		jl     jump_d5b82
		cmp    $0x8000,%ebx
		jl     jump_d5b8b
	jump_d5b82:
		xor    %esi,%esi
		mov    %esi,%eax
		pop    %edi
		pop    %esi
		ret    $0x8
	jump_d5b8b:
		xor    %eax,%eax
		mov    EXPORT_SYMBOL(sthings_used),%ax
		cmp    $0x5d7,%eax
		jle    jump_d5ba3
		xor    %esi,%esi
		mov    %esi,%eax
		pop    %edi
		pop    %esi
		ret    $0x8
	jump_d5ba3:
		call   ac_get_new_sthing
		movswl %ax,%esi
		test   %esi,%esi
		je     jump_d5c24
		cmp    $0xffffffff,%esi
		jg     jump_d5bbc
		cmp    $0xfffffa24,%esi
		jge    jump_d5bc5
	jump_d5bbc:
		xor    %esi,%esi
		mov    %esi,%eax
		pop    %edi
		pop    %esi
		ret    $0x8
	jump_d5bc5:
		mov    %esi,%eax
		shl    $0x4,%esi
		sub    %eax,%esi
		mov    EXPORT_SYMBOL(sthings),%eax
		shl    $0x2,%esi
		add    %eax,%esi
		movb   $0x35,0x9(%esi)
		movw   $0x64,0x28(%esi)
		push   $0x1
		movl   $0x4,0xc(%esi)
		shl    $0x8,%ebx
		movw   $0x0,0xa(%esi)
		shl    $0x8,%edx
		mov    %ebx,0x20(%esi)
		shl    $0x8,%edi
		mov    %edx,0x1c(%esi)
		mov    0x12(%esp),%eax
		mov    %cl,0x8(%esi)
		sar    $0x10,%eax
		xor    %edx,%edx
		push   %eax
		mov    $0x7f,%ebx
		mov    %cx,%dx
		push   $0x64
		mov    $0x40,%ecx
		mov    %esi,%eax
		mov    %edi,0x18(%esi)
		call   ac_play_dist_ssample
	jump_d5c24:
		mov    %esi,%eax
		pop    %edi
		pop    %esi
		ret    $0x8


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_snd_unkn1_volume_all_samples)	/* 0x0D5D1C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		testb  $0x2,EXPORT_SYMBOL(ingame)+0x931 # ingame.Flags+2
		je     jump_d5d83
		mov    $0x2,%eax
		call   ac_update_danger_music
		call   ac_GetFirstSampleInfoStructure
		mov    %eax,%edx
		call   ac_GetLastSampleInfoStructure
		mov    %eax,%edi
		mov    %edx,%ecx
		cmp    %eax,%edx
		jmp    jump_d5d4d
	jump_d5d48:
		add    $0x19,%ecx
		cmp    %edi,%ecx
	jump_d5d4d:
		ja     jump_d5d83
		mov    (%ecx),%ebx
		xor    %edx,%edx
		xor    %eax,%eax
		mov    0xe(%ecx),%si
		call   ac_IsSamplePlaying
		test   %al,%al
		je     jump_d5d48
		mov    0x10(%ecx),%edx
		sar    $0x10,%edx
		cmp    $0x8,%edx
		je     jump_d5d48
		cmp    $0x4d,%edx
		je     jump_d5d48
		cmp    $0x4e,%edx
		je     jump_d5d48
		movswl %si,%eax
		xor    %ebx,%ebx
		call   ac_SetSampleVolume
		jmp    jump_d5d48
	jump_d5d83:
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_monitor_all_samples)	/* 0x0D5D8C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8c,%esp
		xor    %edx,%edx
		mov    EXPORT_SYMBOL(ingame)+0x931,%ah # ingame.Flags+2
		mov    %edx,0x84(%esp)
		test   $0x2,%ah
		je     jump_d6124
		mov    $0x18f,%ebx
		mov    $data_1dded8,%eax
		mov    %dx,0x88(%esp)
		xor    %edx,%edx
		call   ac_memset
		call   ac_GetFirstSampleInfoStructure
		mov    %eax,%edx
		call   ac_GetLastSampleInfoStructure
		mov    %eax,0x74(%esp)
		mov    %edx,%ecx
		cmp    %eax,%edx
		jmp    jump_d60c8
	jump_d5de2:
		jge    jump_d5def
		imul   $0x3c,%eax,%eax
		mov    EXPORT_SYMBOL(sthings),%edi
	jump_d5ded:
		add    %eax,%edi
	jump_d5def:
		mov    0x10(%ecx),%eax
		sar    $0x10,%eax
		cmp    $0x270f,%eax
		je     jump_d5e02
		incb   data_1dded8(%eax)
	jump_d5e02:
		mov    0x10(%ecx),%eax
		sar    $0x10,%eax
		cmp    $0x270f,%eax
		je     jump_d5e91
		test   %si,%si
		je     jump_d5e59
		mov    (%ecx),%ebp
		xor    %edx,%edx
		push   %ebp
		mov    0xa(%ecx),%dx
		push   %edx
		xor    %edx,%edx
		mov    data_1dded8(%eax),%dl
		push   %edx
		mov    0x4(%ecx),%edx
		push   %edx
		push   %eax
		xor    %eax,%eax
		mov    0x9(%edi),%al
		push   %eax
		movswl %si,%eax
		push   %eax
		mov    0xa2(%esp),%eax
		sar    $0x10,%eax
		push   %eax
		push   $aDIdDTypeDSampl
		lea    0x24(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0x28,%esp
		jmp    jump_d5e91
	jump_d5e59:
		xor    %edx,%edx
		mov    0xa(%ecx),%dx
		push   %edx
		xor    %edx,%edx
		mov    data_1dded8(%eax),%dl
		push   %edx
		mov    0x4(%ecx),%edx
		push   %edx
		push   %eax
		push   $0x0
		movswl %si,%eax
		push   %eax
		mov    0x9e(%esp),%eax
		sar    $0x10,%eax
		push   %eax
		push   $aDIdDTypeDSam_0
		lea    0x20(%esp),%eax
		push   %eax
		call   ac_sprintf
		add    $0x24,%esp
	jump_d5e91:
		test   %si,%si
		je     jump_d60b0
		movswl %si,%eax
		cmp    $0x270f,%eax
		je     jump_d60b0
		mov    engn_xc,%edx
		mov    engn_zc,%ebx
		mov    0x18(%edi),%eax
		mov    0x20(%edi),%ebp
		sar    $0x8,%eax
		sar    $0x8,%ebp
		sub    %edx,%eax
		sub    %ebx,%ebp
		lea    0x68(%esp),%ebx
		lea    0x6c(%esp),%edx
		mov    %eax,0x7c(%esp)
		mov    %eax,0x64(%esp)
		lea    0x64(%esp),%eax
		mov    %ebp,0x68(%esp)
		call   ac_local_to_worldr
		mov    0x64(%esp),%eax
		sar    $0x3,%eax
		mov    %eax,0x64(%esp)
		cmp    $0x39c,%eax
		jle    jump_d5efa
		mov    $0x6f,%eax
		jmp    jump_d5f18
	jump_d5efa:
		cmp    $0xfffffc64,%eax
		jge    jump_d5f12
		mov    $0x10,%eax
		cmp    $0x10,%eax
		jge    jump_d5f24
		mov    $0x10,%eax
		jmp    jump_d5f2e
	jump_d5f12:
		sar    $0x4,%eax
		add    $0x4a,%eax
	jump_d5f18:
		cmp    $0x10,%eax
		jge    jump_d5f24
		mov    $0x10,%eax
		jmp    jump_d5f2e
	jump_d5f24:
		cmp    $0x6f,%eax
		jle    jump_d5f2e
		mov    $0x6f,%eax
	jump_d5f2e:
		mov    %eax,0x70(%esp)
		movl   $0x7f,0x78(%esp)
		mov    0x7c(%esp),%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebx
		mov    %ebp,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    %eax,%ebx
		jle    jump_d5f5f
		mov    %ebp,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebx
		mov    0x7c(%esp),%eax
		jmp    jump_d5f6c
	jump_d5f5f:
		mov    0x7c(%esp),%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebx
		mov    %ebp,%eax
	jump_d5f6c:
		sar    %ebx
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		add    %ebx,%eax
		cmp    $0xa00,%eax
		jge    jump_d5f83
		imul   $0x7f,0x78(%esp),%eax
		jmp    jump_d5fa4
	jump_d5f83:
		cmp    $0x1a00,%eax
		jl     jump_d5f8e
		xor    %eax,%eax
		jmp    jump_d5fa7
	jump_d5f8e:
		sub    $0xa00,%eax
		mov    $0x7f,%edx
		sar    $0x5,%eax
		sub    %eax,%edx
		mov    %edx,%eax
		imul   0x78(%esp),%eax
	jump_d5fa4:
		sar    $0x7,%eax
	jump_d5fa7:
		mov    0xc(%edi),%dh
		mov    %eax,0x80(%esp)
		test   $0x2,%dh
		je     jump_d5fcf
		mov    0x10(%ecx),%eax
		sar    $0x10,%eax
		cmp    $0x34,%eax
		je     jump_d5fc6
		cmp    $0x7,%eax
		jne    jump_d5fcf
	jump_d5fc6:
		xor    %ebp,%ebp
		mov    %ebp,0x80(%esp)
	jump_d5fcf:
		cmpl   $0x5,0x80(%esp)
		jl     jump_d5ff5
		mov    0x10(%ecx),%eax
		sar    $0x10,%eax
		mov    data_1dded8(%eax),%al
		and    $0xff,%eax
		cmp    $0x3,%eax
		jle    jump_d6032
		testb  $0x20,0xd(%edi)
		jne    jump_d6032
	jump_d5ff5:
		mov    0x10(%ecx),%eax
		sar    $0x10,%eax
		cmp    $0x2c,%eax
		je     jump_d6005
		cmp    $0x38,%eax
		jne    jump_d601f
	jump_d6005:
		mov    0x10(%ecx),%eax
		sar    $0x10,%eax
		mov    data_1dded8(%eax),%al
		and    $0xff,%eax
		cmp    $0x3,%eax
		jle    jump_d60b0
	jump_d601f:
		mov    0x10(%ecx),%edx
		movswl %si,%eax
		sar    $0x10,%edx
		call   ac_stop_sample_using_heap
		jmp    jump_d60b0
	jump_d6032:
		cmpl   $0x7f,0x80(%esp)
		jle    jump_d6047
		movl   $0x7f,0x80(%esp)
	jump_d6047:
		xor    %eax,%eax
		mov    0x9(%edi),%al
		cmp    $0x2,%eax
		jne    jump_d6086
		mov    0x36(%edi),%eax
		sar    $0x10,%eax
		movswl %si,%ebp
		sar    $0x6,%eax
		mov    0x10(%ecx),%edx
		add    $0x64,%eax
		sar    $0x10,%edx
		movswl %ax,%ebx
		mov    %ebp,%eax
		call   ac_SetSamplePitch
		mov    0x80(%esp),%eax
		mov    0x10(%ecx),%edx
		sar    %eax
		sar    $0x10,%edx
		movswl %ax,%ebx
		mov    %ebp,%eax
		jmp    jump_d6096
	jump_d6086:
		mov    0x7e(%esp),%ebx
		movswl %si,%eax
		mov    0x10(%ecx),%edx
		sar    $0x10,%ebx
		sar    $0x10,%edx
	jump_d6096:
		call   ac_SetSampleVolume
		movswl %si,%eax
		xor    %ebx,%ebx
		mov    0x10(%ecx),%edx
		mov    0x70(%esp),%bx
		sar    $0x10,%edx
		call   ac_SetSamplePan
	jump_d60b0:
		mov    0x84(%esp),%esi
		mov    0x74(%esp),%edx
		inc    %esi
		add    $0x19,%ecx
		mov    %esi,0x84(%esp)
		cmp    %edx,%ecx
	jump_d60c8:
		ja     jump_d6124
		xor    %eax,%eax
		mov    0x84(%esp),%ax
		lea    0x0(,%eax,4),%edx
		mov    (%ecx),%eax
		cmp    ail_sample_ids(%edx),%eax
		jne    jump_d60b0
		mov    (%ecx),%ebx
		xor    %edx,%edx
		xor    %eax,%eax
		call   ac_IsSamplePlaying
		test   %al,%al
		je     jump_d60b0
		mov    0x88(%esp),%edx
		mov    0xe(%ecx),%si
		inc    %edx
		movswl %si,%eax
		mov    %dx,0x88(%esp)
		test   %eax,%eax
		jle    jump_d5de2
		imul   $0xa8,%eax,%eax
		mov    things,%edi
		jmp    jump_d5ded
	jump_d6124:
		add    $0x8c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
snd_unkn3_find_stop_sample:	/* 0x0D6134 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    %ax,0x4(%esp)
		mov    %edx,(%esp)
		call   ac_GetFirstSampleInfoStructure
		mov    $0x270f,%edi
		mov    %eax,%ebx
		call   ac_GetLastSampleInfoStructure
		mov    %edi,%esi
		mov    %eax,%ebp
		mov    %ebx,%ecx
		cmp    %eax,%ebx
		jmp    jump_d6164
	jump_d615f:
		add    $0x19,%ecx
		cmp    %ebp,%ecx
	jump_d6164:
		ja     jump_d61a3
		mov    (%ecx),%ebx
		xor    %edx,%edx
		xor    %eax,%eax
		call   ac_IsSamplePlaying
		test   %al,%al
		je     jump_d615f
		xor    %eax,%eax
		mov    0x10(%ecx),%ebx
		mov    0x4(%esp),%ax
		sar    $0x10,%ebx
		cmp    %eax,%ebx
		jne    jump_d615f
		xor    %eax,%ebx
		mov    (%esp),%bx
		cmp    0x4(%ecx),%ebx
		jle    jump_d615f
		movswl %si,%ebx
		cmp    0x4(%ecx),%ebx
		jle    jump_d615f
		mov    0xe(%ecx),%di
		mov    0x4(%ecx),%si
		jmp    jump_d615f
	jump_d61a3:
		movswl %di,%eax
		cmp    $0x270f,%eax
		je     jump_d61c3
		mov    0x2(%esp),%edx
		movswl %di,%eax
		sar    $0x10,%edx
		call   ac_stop_sample_using_heap
		mov    $0x1,%eax
		jmp    jump_d61c5
	jump_d61c3:
		xor    %eax,%eax
	jump_d61c5:
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_play_dist_sample)	/* 0x0D61D0 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x1c,%esp
		mov    %eax,%edi
		mov    %dx,0x18(%esp)
		mov    %ebx,0x14(%esp)
		xor    %eax,%eax
		mov    %bx,%ax
		mov    things,%edx
		mov    %eax,0x10(%esp)
		cmp    %edx,%edi
		jb     jump_d61fe
		lea    0x29040(%edx),%eax
		cmp    %eax,%edi
		jbe    jump_d6205
	jump_d61fe:
		xor    %eax,%eax
		jmp    jump_d6368
	jump_d6205:
		lea    0x8(%esp),%edx
		mov    %esp,%eax
		mov    engn_xc,%ebx
		mov    engn_zc,%ebp
		mov    0x18(%edi),%ecx
		mov    0x20(%edi),%esi
		sar    $0x8,%ecx
		sar    $0x8,%esi
		sub    %ebx,%ecx
		sub    %ebp,%esi
		lea    0x4(%esp),%ebx
		mov    %ecx,(%esp)
		mov    %esi,0x4(%esp)
		call   ac_local_to_worldr
		mov    (%esp),%eax
		sar    $0x3,%eax
		mov    %eax,(%esp)
		cmp    $0x39c,%eax
		jle    jump_d624e
		mov    $0x6f,%eax
		jmp    jump_d626c
	jump_d624e:
		cmp    $0xfffffc64,%eax
		jge    jump_d6266
		mov    $0x10,%eax
		cmp    $0x10,%eax
		jge    jump_d6278
		mov    $0x10,%eax
		jmp    jump_d6282
	jump_d6266:
		sar    $0x4,%eax
		add    $0x4a,%eax
	jump_d626c:
		cmp    $0x10,%eax
		jge    jump_d6278
		mov    $0x10,%eax
		jmp    jump_d6282
	jump_d6278:
		cmp    $0x6f,%eax
		jle    jump_d6282
		mov    $0x6f,%eax
	jump_d6282:
		mov    %eax,%ebp
		mov    %ecx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,0xc(%esp)
		mov    %esi,%eax
		xor    %ebx,%ebx
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    0xc(%esp),%edx
		mov    0x14(%esp),%bx
		cmp    %edx,%eax
		jge    jump_d62bb
		mov    %esi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%esi
		mov    %ecx,%eax
		sar    %esi
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		add    %esi,%eax
		jmp    jump_d62cf
	jump_d62bb:
		mov    %ecx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ecx
		mov    %esi,%eax
		sar    %ecx
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		add    %ecx,%eax
	jump_d62cf:
		cmp    $0xa00,%eax
		jge    jump_d62df
		mov    %ebx,%eax
		shl    $0x7,%eax
		sub    %ebx,%eax
		jmp    jump_d62fe
	jump_d62df:
		cmp    $0x1a00,%eax
		jl     jump_d62ea
		xor    %eax,%eax
		jmp    jump_d6301
	jump_d62ea:
		sub    $0xa00,%eax
		mov    $0x7f,%edx
		sar    $0x5,%eax
		sub    %eax,%edx
		mov    %edx,%eax
		imul   %ebx,%eax
	jump_d62fe:
		sar    $0x7,%eax
	jump_d6301:
		mov    %eax,%ebx
		cmp    $0x5,%eax
		jg     jump_d631a
		cmpl   $0x0,0x10(%esp)
		je     jump_d631a
		xor    %eax,%eax
		add    $0x1c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0xc
	jump_d631a:
		xor    %eax,%eax
		mov    0x18(%esp),%ax
		xor    %edx,%edx
		mov    data_1dded8(%eax),%dl
		cmp    $0x2,%edx
		jle    jump_d633d
		xor    %edx,%edx
		mov    %bx,%dx
		call   snd_unkn3_find_stop_sample
		cwtl
		test   %eax,%eax
		je     jump_d6368
	jump_d633d:
		xor    %eax,%eax
		mov    0x34(%esp),%al
		push   %eax
		mov    0x31(%esp),%eax
		sar    $0x18,%eax
		push   %eax
		xor    %eax,%eax
		mov    0x1e(%esp),%edx
		mov    0x34(%esp),%ax
		mov    %ebp,%ecx
		push   %eax
		xor    %eax,%eax
		sar    $0x10,%edx
		mov    0x16(%edi),%ax
		call   ac_play_sample_using_heap
	jump_d6368:
		add    $0x1c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0xc


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_play_dist_ssample)	/* 0x0D6374 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x18,%esp
		mov    %eax,%edi
		mov    %dx,0x14(%esp)
		mov    %ebx,0x10(%esp)
		mov    EXPORT_SYMBOL(sthings),%eax
		lea    -0x15f90(%eax),%edx
		cmp    %edx,%edi
		jb     jump_d6398
		cmp    %eax,%edi
		jbe    jump_d639f
	jump_d6398:
		xor    %eax,%eax
		jmp    jump_d650a
	jump_d639f:
		mov    %esp,%eax
		mov    engn_xc,%edx
		mov    engn_zc,%ebx
		mov    0x18(%edi),%ecx
		mov    0x20(%edi),%esi
		sar    $0x8,%ecx
		sar    $0x8,%esi
		sub    %edx,%ecx
		sub    %ebx,%esi
		lea    0x4(%esp),%ebx
		lea    0x8(%esp),%edx
		mov    %ecx,(%esp)
		mov    %esi,0x4(%esp)
		call   ac_local_to_worldr
		mov    (%esp),%ebp
		sar    $0x3,%ebp
		mov    %ebp,(%esp)
		cmp    $0x39c,%ebp
		jle    jump_d63e9
		mov    $0x6f,%eax
		jmp    jump_d640a
	jump_d63e9:
		cmp    $0xfffffc64,%ebp
		jge    jump_d6402
		mov    $0x10,%eax
		cmp    $0x10,%eax
		jge    jump_d6416
		mov    $0x10,%eax
		jmp    jump_d6420
	jump_d6402:
		mov    %ebp,%eax
		sar    $0x4,%eax
		add    $0x4a,%eax
	jump_d640a:
		cmp    $0x10,%eax
		jge    jump_d6416
		mov    $0x10,%eax
		jmp    jump_d6420
	jump_d6416:
		cmp    $0x6f,%eax
		jle    jump_d6420
		mov    $0x6f,%eax
	jump_d6420:
		mov    %eax,%ebp
		mov    %ecx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,0xc(%esp)
		mov    %esi,%eax
		xor    %ebx,%ebx
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    0xc(%esp),%edx
		mov    0x10(%esp),%bx
		cmp    %edx,%eax
		jge    jump_d6459
		mov    %esi,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%esi
		mov    %ecx,%eax
		sar    %esi
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		add    %esi,%eax
		jmp    jump_d646d
	jump_d6459:
		mov    %ecx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ecx
		mov    %esi,%eax
		sar    %ecx
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		add    %ecx,%eax
	jump_d646d:
		cmp    $0xa00,%eax
		jge    jump_d647d
		mov    %ebx,%eax
		shl    $0x7,%eax
		sub    %ebx,%eax
		jmp    jump_d649c
	jump_d647d:
		cmp    $0x1a00,%eax
		jl     jump_d6488
		xor    %eax,%eax
		jmp    jump_d649f
	jump_d6488:
		sub    $0xa00,%eax
		mov    $0x7f,%edx
		sar    $0x5,%eax
		sub    %eax,%edx
		mov    %edx,%eax
		imul   %ebx,%eax
	jump_d649c:
		sar    $0x7,%eax
	jump_d649f:
		mov    %eax,%ebx
		cmp    $0x5,%eax
		jg     jump_d64bc
		xor    %eax,%eax
		mov    0x10(%esp),%ax
		test   %eax,%eax
		je     jump_d64bc
		xor    %eax,%eax
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0xc
	jump_d64bc:
		xor    %eax,%eax
		mov    0x14(%esp),%ax
		xor    %edx,%edx
		mov    data_1dded8(%eax),%dl
		cmp    $0x2,%edx
		jle    jump_d64df
		xor    %edx,%edx
		mov    %bx,%dx
		call   snd_unkn3_find_stop_sample
		cwtl
		test   %eax,%eax
		je     jump_d650a
	jump_d64df:
		xor    %eax,%eax
		mov    0x30(%esp),%al
		push   %eax
		mov    0x2d(%esp),%eax
		sar    $0x18,%eax
		push   %eax
		xor    %eax,%eax
		mov    0x1a(%esp),%edx
		mov    0x30(%esp),%ax
		mov    %ebp,%ecx
		push   %eax
		mov    0x14(%edi),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		call   ac_play_sample_using_heap
	jump_d650a:
		add    $0x18,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0xc


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_play_disk_sample)	/* 0x0D6514 */
/*----------------------------------------------------------------*/
		xor    %eax,%eax
		mov    0xc(%esp),%al
		push   %eax
		mov    0x9(%esp),%eax
		sar    $0x18,%eax
		movswl %cx,%ecx
		push   %eax
		mov    0xa(%esp),%eax
		movswl %bx,%ebx
		sar    $0x10,%eax
		add    $0x81,%edx
		push   %eax
		movswl %dx,%edx
		mov    $0x270f,%eax
		call   ac_play_sample_using_heap
		ret    $0xc


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_play_dist_speech)	/* 0x0D6548 */
/*----------------------------------------------------------------*/
		push   %esi
		mov    %ecx,%esi
		mov    things,%ecx
		cmp    %ecx,%eax
		jb     jump_d6592
		add    $0x29040,%ecx
		cmp    %ecx,%eax
		ja     jump_d6592
		xor    %ecx,%ecx
		mov    0x10(%esp),%cl
		push   %ecx
		mov    0xe(%esp),%ecx
		sar    $0x10,%ecx
		push   %ecx
		xor    %ecx,%ecx
		mov    0x10(%esp),%cx
		push   %ecx
		xor    %ecx,%ecx
		mov    %si,%cx
		and    $0xffff,%ebx
		add    $0x81,%edx
		and    $0xffff,%edx
		call   ac_play_dist_sample
	jump_d6592:
		xor    %eax,%eax
		pop    %esi
		ret    $0xc


/*----------------------------------------------------------------*/
set_dist_volume:	/* 0x0D6598 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    %eax,%esi
		mov    %edx,%edi
		mov    %ebx,%eax
		mov    engn_xc,%edx
		mov    engn_zc,%ebp
		mov    0x18(%esi),%ecx
		mov    0x20(%esi),%ebx
		sar    $0x8,%ecx
		sar    $0x8,%ebx
		sub    %edx,%ecx
		sub    %ebp,%ebx
		movzwl %ax,%ebp
		mov    %ecx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,(%esp)
		mov    %ebx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		cmp    (%esp),%eax
		jge    jump_d65f0
		mov    %ebx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ebx
		mov    %ecx,%eax
		sar    %ebx
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		add    %ebx,%eax
		jmp    jump_d6604
	jump_d65f0:
		mov    %ecx,%eax
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		mov    %eax,%ecx
		mov    %ebx,%eax
		sar    %ecx
		cltd
		xor    %edx,%eax
		sub    %edx,%eax
		add    %ecx,%eax
	jump_d6604:
		cmp    $0xa00,%eax
		jge    jump_d6614
		mov    %ebp,%ebx
		shl    $0x7,%ebx
		sub    %ebp,%ebx
		jmp    jump_d6631
	jump_d6614:
		cmp    $0x1a00,%eax
		jl     jump_d661f
		xor    %ebx,%ebx
		jmp    jump_d6634
	jump_d661f:
		sub    $0xa00,%eax
		mov    $0x7f,%ebx
		sar    $0x5,%eax
		sub    %eax,%ebx
		imul   %ebp,%ebx
	jump_d6631:
		sar    $0x7,%ebx
	jump_d6634:
		movswl %bx,%ebx
		mov    0x14(%esi),%eax
		movswl %di,%edx
		sar    $0x10,%eax
		call   ac_SetSampleVolume
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_FIRE_init_or_samples_init)	/* 0x0D6650 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		mov    $0x2800,%ebx
		mov    $EXPORT_SYMBOL(FIRE_flame),%eax
		xor    %edx,%edx
		call   ac_memset
		mov    $0x1,%eax
		mov    $0x14,%edx
	jump_d666e:
		mov    %eax,%ebx
		add    $0x14,%edx
		inc    %ebx
		inc    %eax
		mov    %bx,data_1de0b6(%edx)
		cmp    $0x1ff,%eax
		jl     jump_d666e
		xor    %ebx,%ebx
		mov    $0x1,%ecx
		mov    %bx,data_1de0ca(%edx)
		xor    %edx,%edx
		mov    %cx,data_1e08b8
		mov    %edx,data_1e08bc
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret

vtable_d6724:
		.long   func_d67a1
		.long   func_d8c79
		.long   func_d917f
		.long   func_d8e17
		.long   func_d8fe1


/*----------------------------------------------------------------*/
FIRE_new:	/* 0x0D6738 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x68c,%esp
		mov    %eax,%esi
		mov    %edx,0xc(%esp)
		mov    %ebx,%ebp
		mov    %cl,0x5f0(%esp)
		test   %eax,%eax
		jl     jump_d8c6f
		cmp    $0x800000,%eax
		jg     jump_d8c6f
		test   %ebx,%ebx
		jl     jump_d8c6f
		cmp    $0x800000,%ebx
		jg     jump_d8c6f
		cmpw   $0x0,data_1e08b8
		je     jump_d8c6f
		call   ac_get_new_sthing
		cwtl
		mov    %eax,0x10(%esp)
		test   %eax,%eax
		jne    jump_da9ef
		add    $0x68c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
func_d67a1:
/*----------------------------------------------------------------*/
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		add    $0x12,%al
		mov    %al,0x5b4(%esp)
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		add    $0x2b,%al
		mov    %al,0x5dc(%esp)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3f,%al
		and    $0xffff,%eax
		lea    (%eax,%ebp,1),%ebx
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3f,%al
		and    $0xffff,%eax
		mov    $0x4,%cl
		lea    (%esi,%eax,1),%edx
		call   ac_LbRandomAnyShort
		and    $0x3f,%al
		sub    $0x1f,%ebx
		add    $0x32,%al
		mov    %edi,0x28(%esp)
		mov    %al,0x2ec(%esp)
		mov    0xc(%esp),%eax
		mov    %cl,0x3b8(%esp)
		mov    %eax,0x30(%esp)
		mov    $0x64,%al
		mov    %ebx,0x34(%esp)
		mov    %al,0x2d8(%esp)
		xor    %ah,%ah
		mov    $0x39b,%ecx
		mov    %ah,0x3c4(%esp)
		mov    0x5dc(%esp),%al
		sub    $0x1f,%edx
		mov    %al,0x620(%esp)
		mov    0x5b4(%esp),%al
		mov    %edx,0x2c(%esp)
		mov    %al,0x5a4(%esp)
		xor    %eax,%eax
		mov    $0xff,%dl
		mov    data_1e08b8,%ax
		mov    %dl,0x5a0(%esp)
		test   %eax,%eax
		jne    jump_d6862
		xor    %eax,%eax
		jmp    jump_d688f
	jump_d6862:
		xor    %edx,%edx
		mov    %ax,%dx
		mov    %eax,%ebx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    data_1de0ca(,%eax,4),%ax
		mov    data_1e08bc,%edx
		mov    %ax,data_1e08b8
		inc    %edx
		mov    %ebx,%eax
		mov    %edx,data_1e08bc
	jump_d688f:
		mov    %eax,0x284(%esp)
		test   %ax,%ax
		je     jump_d6963
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0x2c(%esp),%eax
		mov    %ax,0xa(%edx)
		mov    0x34(%esp),%eax
		mov    %ax,0xe(%edx)
		mov    0x30(%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0x3b8(%esp),%al
		mov    %al,(%edx)
		mov    0x2d8(%esp),%al
		mov    %al,0x4(%edx)
		mov    0x3c4(%esp),%al
		mov    %al,0x5(%edx)
		mov    0x5a0(%esp),%al
		mov    nstart_ani,%ebx
		mov    %al,0x6(%edx)
		mov    (%ebx,%ecx,2),%ax
	jump_d6900:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_d6920
		xor    %eax,%eax
		mov    frame,%ebx
		mov    0x8(%edx),%ax
		mov    0x6(%ebx,%eax,8),%ax
		jmp    jump_d6900
	jump_d6920:
		mov    0x620(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x5a4(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x2ec(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0x28(%esp),%eax
		mov    0x2c(%eax),%ax
		mov    %ax,0x12(%edx)
		mov    0x28(%esp),%eax
		mov    0x284(%esp),%edx
		mov    %dx,0x2c(%eax)
	jump_d6963:
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		add    $0x12,%al
		mov    %al,0x5b4(%esp)
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		add    $0x2b,%al
		mov    %al,0x5dc(%esp)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3f,%al
		and    $0xffff,%eax
		lea    (%eax,%ebp,1),%ebx
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3f,%al
		and    $0xffff,%eax
		mov    $0x4,%cl
		lea    (%esi,%eax,1),%edx
		call   ac_LbRandomAnyShort
		and    $0x3f,%al
		sub    $0x1f,%ebx
		add    $0x32,%al
		mov    %edi,0x44(%esp)
		mov    %al,0x5d8(%esp)
		mov    0xc(%esp),%eax
		mov    %cl,0x400(%esp)
		mov    %eax,0x4c(%esp)
		mov    $0x64,%al
		mov    %ebx,0x50(%esp)
		mov    %al,0x40c(%esp)
		xor    %ah,%ah
		mov    $0x39b,%ecx
		mov    %ah,0x5e0(%esp)
		mov    0x5dc(%esp),%al
		sub    $0x1f,%edx
		mov    %al,0x5e4(%esp)
		mov    0x5b4(%esp),%al
		mov    %edx,0x48(%esp)
		mov    %al,0x4e8(%esp)
		xor    %eax,%eax
		mov    $0xff,%dl
		mov    data_1e08b8,%ax
		mov    %dl,0x414(%esp)
		test   %eax,%eax
		jne    jump_d6a24
		xor    %eax,%eax
		jmp    jump_d6a51
	jump_d6a24:
		xor    %edx,%edx
		mov    %ax,%dx
		mov    %eax,%ebx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    data_1de0ca(,%eax,4),%ax
		mov    data_1e08bc,%edx
		mov    %ax,data_1e08b8
		inc    %edx
		mov    %ebx,%eax
		mov    %edx,data_1e08bc
	jump_d6a51:
		mov    %eax,0x264(%esp)
		test   %ax,%ax
		je     jump_d6b25
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0x48(%esp),%eax
		mov    %ax,0xa(%edx)
		mov    0x50(%esp),%eax
		mov    %ax,0xe(%edx)
		mov    0x4c(%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0x400(%esp),%al
		mov    %al,(%edx)
		mov    0x40c(%esp),%al
		mov    %al,0x4(%edx)
		mov    0x5e0(%esp),%al
		mov    %al,0x5(%edx)
		mov    0x414(%esp),%al
		mov    nstart_ani,%ebx
		mov    %al,0x6(%edx)
		mov    (%ebx,%ecx,2),%ax
	jump_d6ac2:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_d6ae2
		xor    %eax,%eax
		mov    frame,%ebx
		mov    0x8(%edx),%ax
		mov    0x6(%ebx,%eax,8),%ax
		jmp    jump_d6ac2
	jump_d6ae2:
		mov    0x5e4(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x4e8(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x5d8(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0x44(%esp),%eax
		mov    0x2c(%eax),%ax
		mov    %ax,0x12(%edx)
		mov    0x44(%esp),%eax
		mov    0x264(%esp),%edx
		mov    %dx,0x2c(%eax)
	jump_d6b25:
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		add    $0x12,%al
		mov    %al,0x5b4(%esp)
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		add    $0x2b,%al
		mov    %al,0x5dc(%esp)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3f,%al
		and    $0xffff,%eax
		mov    %edi,%ecx
		xor    %edx,%edx
		lea    (%eax,%ebp,1),%ebx
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		sub    $0x1f,%ebx
		and    $0x3f,%al
		mov    %ebx,0x74(%esp)
		mov    $0x64,%bl
		mov    %ax,%dx
		call   ac_LbRandomAnyShort
		add    %esi,%edx
		and    $0x3f,%al
		sub    $0x1f,%edx
		add    $0x32,%al
		mov    %edx,0x1ec(%esp)
		mov    %al,0x648(%esp)
		mov    0x1ec(%esp),%eax
		mov    %bl,0x630(%esp)
		mov    %eax,0x6c(%esp)
		mov    0xc(%esp),%eax
		xor    %bh,%bh
		mov    %eax,0x70(%esp)
		mov    $0xff,%al
		mov    %bh,0x668(%esp)
		mov    %al,0x450(%esp)
		mov    0x5dc(%esp),%al
		mov    $0x4,%dh
		mov    %al,0x66c(%esp)
		mov    0x5b4(%esp),%al
		mov    %dh,0x448(%esp)
		mov    %al,0x2e8(%esp)
		xor    %eax,%eax
		mov    $0x39b,%edx
		mov    data_1e08b8,%ax
		mov    %edx,0x68(%esp)
		test   %eax,%eax
		jne    jump_d6bf5
		xor    %eax,%eax
		jmp    jump_d6c1b
	jump_d6bf5:
		xor    %edx,%edx
		mov    %ax,%dx
		mov    %eax,%ebx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    data_1de0ca(,%eax,4),%ax
		mov    %ax,data_1e08b8
		mov    %ebx,%eax
		incl   data_1e08bc
	jump_d6c1b:
		mov    %eax,0x234(%esp)
		test   %ax,%ax
		je     jump_d6ced
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0x6c(%esp),%eax
		mov    %ax,0xa(%edx)
		mov    0x74(%esp),%eax
		mov    %ax,0xe(%edx)
		mov    0x70(%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0x448(%esp),%al
		mov    %al,(%edx)
		mov    0x630(%esp),%al
		mov    %al,0x4(%edx)
		mov    0x668(%esp),%al
		mov    %al,0x5(%edx)
		mov    0x450(%esp),%al
		mov    %al,0x6(%edx)
		mov    0x68(%esp),%eax
		mov    nstart_ani,%ebx
		add    %eax,%eax
		add    %ebx,%eax
		mov    (%eax),%ax
	jump_d6c93:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_d6cb2
		xor    %ebx,%ebx
		mov    frame,%eax
		mov    0x8(%edx),%bx
		mov    0x6(%eax,%ebx,8),%ax
		jmp    jump_d6c93
	jump_d6cb2:
		mov    0x66c(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x2e8(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x648(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0x2c(%ecx),%ax
		mov    %ax,0x12(%edx)
		mov    0x234(%esp),%eax
		mov    %ax,0x2c(%ecx)
	jump_d6ced:
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		add    $0x12,%al
		mov    %al,0x5b4(%esp)
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		add    $0x2b,%al
		mov    %al,0x5dc(%esp)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3f,%al
		and    $0xffff,%eax
		lea    (%eax,%ebp,1),%ebx
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3f,%al
		mov    $0x39b,%ecx
		and    $0xffff,%eax
		sub    $0x1f,%ebx
		mov    %edi,0x94(%esp)
		lea    (%esi,%eax,1),%edx
		call   ac_LbRandomAnyShort
		mov    %ebx,0xa0(%esp)
		and    $0x3f,%al
		mov    $0xff,%bl
		add    $0x32,%al
		sub    $0x1f,%edx
		mov    $0x4,%ah
		mov    %edx,0x98(%esp)
		mov    %ah,0x3d0(%esp)
		mov    %al,0x47c(%esp)
		mov    0xc(%esp),%eax
		mov    %bl,0x398(%esp)
		mov    %eax,0x9c(%esp)
		mov    0x5dc(%esp),%al
		mov    $0x64,%dl
		mov    %al,0x300(%esp)
		mov    0x5b4(%esp),%al
		mov    %dl,0x484(%esp)
		mov    %al,0x2f0(%esp)
		xor    %eax,%eax
		xor    %dh,%dh
		mov    data_1e08b8,%ax
		mov    %dh,0x3d8(%esp)
		test   %eax,%eax
		jne    jump_d6dba
		xor    %eax,%eax
		jmp    jump_d6de0
	jump_d6dba:
		xor    %ebx,%ebx
		mov    %ax,%bx
		mov    %eax,%edx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		mov    data_1de0ca(,%eax,4),%ax
		mov    %ax,data_1e08b8
		mov    %edx,%eax
		incl   data_1e08bc
	jump_d6de0:
		mov    %eax,0x26c(%esp)
		test   %ax,%ax
		je     jump_d6ec3
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0x98(%esp),%eax
		mov    %ax,0xa(%edx)
		mov    0xa0(%esp),%eax
		mov    %ax,0xe(%edx)
		mov    0x9c(%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0x3d0(%esp),%al
		mov    %al,(%edx)
		mov    0x484(%esp),%al
		mov    %al,0x4(%edx)
		mov    0x3d8(%esp),%al
		mov    %al,0x5(%edx)
		mov    0x398(%esp),%al
		mov    nstart_ani,%ebx
		mov    %al,0x6(%edx)
		mov    (%ebx,%ecx,2),%ax
	jump_d6e5a:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_d6e7a
		xor    %eax,%eax
		mov    frame,%ebx
		mov    0x8(%edx),%ax
		mov    0x6(%ebx,%eax,8),%ax
		jmp    jump_d6e5a
	jump_d6e7a:
		mov    0x300(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x2f0(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x47c(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0x94(%esp),%eax
		mov    0x2c(%eax),%ax
		mov    %ax,0x12(%edx)
		mov    0x94(%esp),%eax
		mov    0x26c(%esp),%edx
		mov    %dx,0x2c(%eax)
	jump_d6ec3:
		call   ac_LbRandomAnyShort
		mov    %al,%bl
		and    $0xf,%bl
		add    $0x12,%bl
		call   ac_LbRandomAnyShort
		mov    %al,%bh
		call   ac_LbRandomAnyShort
		and    $0xf,%bh
		xor    %ah,%ah
		add    $0x2b,%bh
		and    $0xffff,%eax
		lea    (%eax,%ebp,1),%edx
		call   ac_LbRandomAnyShort
		mov    %edx,0x21c(%esp)
		xor    %ah,%ah
		mov    $0x4,%cl
		and    $0xffff,%eax
		mov    %edi,0xbc(%esp)
		mov    %bh,0x4c4(%esp)
		mov    %bl,0x684(%esp)
		lea    (%esi,%eax,1),%edx
		call   ac_LbRandomAnyShort
		mov    %cl,0x49c(%esp)
		and    $0x3f,%al
		sub    $0x7f,%edx
		add    $0x32,%al
		mov    %edx,0x1ec(%esp)
		mov    %al,0x3d4(%esp)
		mov    0x1ec(%esp),%eax
		mov    $0x39b,%ecx
		mov    %eax,0xc4(%esp)
		mov    0xc(%esp),%eax
		mov    0x21c(%esp),%edx
		mov    %eax,0xc8(%esp)
		mov    $0x1e,%al
		sub    $0x7f,%edx
		mov    %al,0x2f4(%esp)
		xor    %ah,%ah
		mov    %edx,0xcc(%esp)
		mov    %ah,0x3dc(%esp)
		xor    %eax,%eax
		mov    $0xff,%dl
		mov    data_1e08b8,%ax
		mov    %dl,0x4c0(%esp)
		test   %eax,%eax
		jne    jump_d6f94
		xor    %eax,%eax
		jmp    jump_d6fba
	jump_d6f94:
		xor    %edx,%edx
		mov    %ax,%dx
		mov    %eax,%ebx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    data_1de0ca(,%eax,4),%ax
		mov    %ax,data_1e08b8
		mov    %ebx,%eax
		incl   data_1e08bc
	jump_d6fba:
		mov    %eax,0x2a8(%esp)
		test   %ax,%ax
		je     jump_d709d
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0xc4(%esp),%eax
		mov    %ax,0xa(%edx)
		mov    0xcc(%esp),%eax
		mov    %ax,0xe(%edx)
		mov    0xc8(%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0x49c(%esp),%al
		mov    %al,(%edx)
		mov    0x2f4(%esp),%al
		mov    %al,0x4(%edx)
		mov    0x3dc(%esp),%al
		mov    %al,0x5(%edx)
		mov    0x4c0(%esp),%al
		mov    nstart_ani,%ebx
		mov    %al,0x6(%edx)
		mov    (%ebx,%ecx,2),%ax
	jump_d7034:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_d7054
		xor    %eax,%eax
		mov    frame,%ebx
		mov    0x8(%edx),%ax
		mov    0x6(%ebx,%eax,8),%ax
		jmp    jump_d7034
	jump_d7054:
		mov    0x4c4(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x684(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x3d4(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0xbc(%esp),%eax
		mov    0x2c(%eax),%ax
		mov    %ax,0x12(%edx)
		mov    0xbc(%esp),%eax
		mov    0x2a8(%esp),%edx
		mov    %dx,0x2c(%eax)
	jump_d709d:
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		add    $0x12,%al
		mov    %al,0x5b4(%esp)
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		add    $0x2b,%al
		mov    %al,0x5dc(%esp)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0xffff,%eax
		lea    (%eax,%ebp,1),%ebx
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0xffff,%eax
		mov    $0x4,%cl
		lea    (%esi,%eax,1),%edx
		call   ac_LbRandomAnyShort
		and    $0x3f,%al
		sub    $0x7f,%ebx
		add    $0x32,%al
		mov    %edi,0xd8(%esp)
		mov    %al,0x368(%esp)
		mov    0xc(%esp),%eax
		mov    %cl,0x4f0(%esp)
		mov    %eax,0xe0(%esp)
		mov    $0x1e,%al
		mov    %ebx,0xe4(%esp)
		mov    %al,0x504(%esp)
		xor    %ah,%ah
		mov    $0x39b,%ecx
		mov    %ah,0x338(%esp)
		mov    0x5dc(%esp),%al
		sub    $0x7f,%edx
		mov    %al,0x618(%esp)
		mov    0x5b4(%esp),%al
		mov    %edx,0xdc(%esp)
		mov    %al,0x60c(%esp)
		xor    %eax,%eax
		mov    $0xff,%dl
		mov    data_1e08b8,%ax
		mov    %dl,0x634(%esp)
		test   %eax,%eax
		jne    jump_d7166
		xor    %eax,%eax
		jmp    jump_d7193
	jump_d7166:
		xor    %edx,%edx
		mov    %ax,%dx
		mov    %eax,%ebx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    data_1de0ca(,%eax,4),%ax
		mov    data_1e08bc,%edx
		mov    %ax,data_1e08b8
		inc    %edx
		mov    %ebx,%eax
		mov    %edx,data_1e08bc
	jump_d7193:
		mov    %eax,0x2a4(%esp)
		test   %ax,%ax
		je     jump_d7276
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0xdc(%esp),%eax
		mov    %ax,0xa(%edx)
		mov    0xe4(%esp),%eax
		mov    %ax,0xe(%edx)
		mov    0xe0(%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0x4f0(%esp),%al
		mov    %al,(%edx)
		mov    0x504(%esp),%al
		mov    %al,0x4(%edx)
		mov    0x338(%esp),%al
		mov    %al,0x5(%edx)
		mov    0x634(%esp),%al
		mov    nstart_ani,%ebx
		mov    %al,0x6(%edx)
		mov    (%ebx,%ecx,2),%ax
	jump_d720d:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_d722d
		xor    %eax,%eax
		mov    frame,%ebx
		mov    0x8(%edx),%ax
		mov    0x6(%ebx,%eax,8),%ax
		jmp    jump_d720d
	jump_d722d:
		mov    0x618(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x60c(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x368(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0xd8(%esp),%eax
		mov    0x2c(%eax),%ax
		mov    %ax,0x12(%edx)
		mov    0xd8(%esp),%eax
		mov    0x2a4(%esp),%edx
		mov    %dx,0x2c(%eax)
	jump_d7276:
		call   ac_LbRandomAnyShort
		mov    %al,%cl
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		and    $0xf,%cl
		add    $0x2b,%al
		add    $0x12,%cl
		mov    %al,0x5b4(%esp)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0xffff,%eax
		lea    (%eax,%ebp,1),%ebx
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0xffff,%eax
		sub    $0x7f,%ebx
		mov    %edi,0xf0(%esp)
		lea    (%esi,%eax,1),%edx
		call   ac_LbRandomAnyShort
		mov    %ebx,0x100(%esp)
		mov    %al,%ch
		sub    $0x7f,%edx
		mov    $0x4,%al
		and    $0x3f,%ch
		mov    %al,0x520(%esp)
		mov    $0x39b,%eax
		mov    %edx,0xf8(%esp)
		mov    %eax,0xf4(%esp)
		mov    0xc(%esp),%eax
		add    $0x32,%ch
		mov    %eax,0xfc(%esp)
		mov    $0x1e,%ah
		xor    %dl,%dl
		mov    %ah,0x52c(%esp)
		mov    0x5b4(%esp),%al
		mov    %dl,0x530(%esp)
		mov    %al,0x538(%esp)
		xor    %eax,%eax
		mov    $0xff,%dh
		mov    data_1e08b8,%ax
		mov    %dh,0x534(%esp)
		test   %eax,%eax
		jne    jump_d7332
		xor    %eax,%eax
		jmp    jump_d735f
	jump_d7332:
		xor    %edx,%edx
		mov    %ax,%dx
		mov    %eax,%ebx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    data_1de0ca(,%eax,4),%ax
		mov    data_1e08bc,%edx
		mov    %ax,data_1e08b8
		inc    %edx
		mov    %ebx,%eax
		mov    %edx,data_1e08bc
	jump_d735f:
		mov    %eax,0x294(%esp)
		test   %ax,%ax
		je     jump_d743a
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0xf8(%esp),%eax
		mov    %ax,0xa(%edx)
		mov    0x100(%esp),%eax
		mov    %ax,0xe(%edx)
		mov    0xfc(%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0x520(%esp),%al
		mov    %al,(%edx)
		mov    0x52c(%esp),%al
		mov    %al,0x4(%edx)
		mov    0x530(%esp),%al
		mov    %al,0x5(%edx)
		mov    0x534(%esp),%al
		mov    0xf4(%esp),%ebx
		mov    %al,0x6(%edx)
		mov    nstart_ani,%eax
		mov    (%eax,%ebx,2),%ax
	jump_d73df:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_d73ff
		xor    %eax,%eax
		mov    frame,%ebx
		mov    0x8(%edx),%ax
		mov    0x6(%ebx,%eax,8),%ax
		jmp    jump_d73df
	jump_d73ff:
		mov    %cl,0x1(%edx)
		mov    0x538(%esp),%al
		mov    %ch,0x2(%edx)
		mov    %al,0x7(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0xf0(%esp),%eax
		mov    0x2c(%eax),%ax
		mov    %ax,0x12(%edx)
		mov    0xf0(%esp),%eax
		mov    0x294(%esp),%edx
		mov    %dx,0x2c(%eax)
	jump_d743a:
		call   ac_LbRandomAnyShort
		mov    %al,%dl
		and    $0xf,%dl
		add    $0x12,%dl
		call   ac_LbRandomAnyShort
		mov    %al,%dh
		call   ac_LbRandomAnyShort
		and    $0xf,%dh
		xor    %ah,%ah
		add    $0x2b,%dh
		and    $0xffff,%eax
		lea    (%eax,%ebp,1),%ebx
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0xffff,%eax
		sub    $0x7f,%ebx
		mov    %edi,0x104(%esp)
		mov    %dh,0x2b8(%esp)
		mov    %dl,0x2bc(%esp)
		lea    (%esi,%eax,1),%ecx
		call   ac_LbRandomAnyShort
		and    $0x3f,%al
		sub    $0x7f,%ecx
		add    $0x32,%al
		mov    %ecx,0x1ec(%esp)
		mov    %al,0x574(%esp)
		mov    $0x4,%cl
		mov    0x1ec(%esp),%eax
		mov    %cl,0x56c(%esp)
		mov    %eax,0x10c(%esp)
		mov    0xc(%esp),%eax
		mov    $0x39b,%ecx
		mov    %eax,0x110(%esp)
		mov    $0x1e,%al
		mov    %ecx,0x108(%esp)
		mov    %al,0x578(%esp)
		xor    %ah,%ah
		mov    %ebx,%ecx
		mov    %ah,0x57c(%esp)
		xor    %eax,%eax
		mov    $0xff,%bl
		mov    data_1e08b8,%ax
		mov    %bl,0x2cc(%esp)
		test   %eax,%eax
		jne    jump_d74ff
		xor    %eax,%eax
		jmp    jump_d752c
	jump_d74ff:
		xor    %edx,%edx
		mov    %ax,%dx
		mov    %eax,%ebx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    data_1de0ca(,%eax,4),%ax
		mov    data_1e08bc,%edx
		mov    %ax,data_1e08b8
		inc    %edx
		mov    %ebx,%eax
		mov    %edx,data_1e08bc
	jump_d752c:
		mov    %eax,0x250(%esp)
		test   %ax,%ax
		je     jump_d760e
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0x10c(%esp),%eax
		mov    %ax,0xa(%edx)
		mov    0x110(%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0x56c(%esp),%al
		mov    %al,(%edx)
		mov    0x578(%esp),%al
		mov    %al,0x4(%edx)
		mov    0x57c(%esp),%al
		mov    %al,0x5(%edx)
		mov    0x2cc(%esp),%al
		mov    0x108(%esp),%ebx
		mov    %al,0x6(%edx)
		mov    nstart_ani,%eax
		mov    %cx,0xe(%edx)
		mov    (%eax,%ebx,2),%ax
	jump_d75a5:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_d75c5
		xor    %eax,%eax
		mov    frame,%ebx
		mov    0x8(%edx),%ax
		mov    0x6(%ebx,%eax,8),%ax
		jmp    jump_d75a5
	jump_d75c5:
		mov    0x2b8(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x2bc(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x574(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0x104(%esp),%eax
		mov    0x2c(%eax),%ax
		mov    %ax,0x12(%edx)
		mov    0x104(%esp),%eax
		mov    0x250(%esp),%edx
		mov    %dx,0x2c(%eax)
	jump_d760e:
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		add    $0x18,%al
		mov    %al,0x5dc(%esp)
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		add    $0x35,%al
		mov    %al,0x5b4(%esp)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0xffff,%eax
		lea    (%eax,%ebp,1),%ebx
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		mov    $0x5,%cl
		and    $0xffff,%eax
		sub    $0x7f,%ebx
		lea    (%esi,%eax,1),%edx
		call   ac_LbRandomAnyShort
		and    $0x3f,%al
		mov    %edi,0x114(%esp)
		add    $0x32,%al
		mov    %cl,0x5bc(%esp)
		mov    %al,0x5c0(%esp)
		mov    0xc(%esp),%eax
		mov    %ebx,0x120(%esp)
		mov    %eax,0x11c(%esp)
		mov    $0x64,%al
		mov    $0x39c,%ecx
		mov    %al,0x65c(%esp)
		xor    %ah,%ah
		sub    $0x7f,%edx
		mov    %ah,0x5c4(%esp)
		mov    0x5b4(%esp),%al
		mov    %ecx,0x118(%esp)
		mov    %al,0x5c8(%esp)
		mov    0x5dc(%esp),%al
		mov    %edx,%ecx
		mov    %al,0x5cc(%esp)
		xor    %eax,%eax
		mov    $0xff,%dl
		mov    data_1e08b8,%ax
		mov    %dl,0x600(%esp)
		test   %eax,%eax
		jne    jump_d76d9
		xor    %eax,%eax
		jmp    jump_d7706
	jump_d76d9:
		xor    %edx,%edx
		mov    %ax,%dx
		mov    %eax,%ebx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    data_1de0ca(,%eax,4),%ax
		mov    data_1e08bc,%edx
		mov    %ax,data_1e08b8
		inc    %edx
		mov    %ebx,%eax
		mov    %edx,data_1e08bc
	jump_d7706:
		mov    %eax,0x2a0(%esp)
		test   %ax,%ax
		je     jump_d77e9
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0x120(%esp),%eax
		mov    %ax,0xe(%edx)
		mov    0x11c(%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0x5bc(%esp),%al
		mov    %al,(%edx)
		mov    0x65c(%esp),%al
		mov    %al,0x4(%edx)
		mov    0x5c4(%esp),%al
		mov    %al,0x5(%edx)
		mov    0x600(%esp),%al
		mov    nstart_ani,%ebx
		mov    %al,0x6(%edx)
		mov    0x118(%esp),%eax
		mov    %cx,0xa(%edx)
		mov    (%ebx,%eax,2),%ax
	jump_d7780:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_d77a0
		xor    %eax,%eax
		mov    frame,%ebx
		mov    0x8(%edx),%ax
		mov    0x6(%ebx,%eax,8),%ax
		jmp    jump_d7780
	jump_d77a0:
		mov    0x5c8(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x5cc(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x5c0(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0x114(%esp),%eax
		mov    0x2c(%eax),%ax
		mov    %ax,0x12(%edx)
		mov    0x114(%esp),%eax
		mov    0x2a0(%esp),%edx
		mov    %dx,0x2c(%eax)
	jump_d77e9:
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		add    $0x18,%al
		mov    %al,0x5b4(%esp)
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		add    $0x35,%al
		mov    %al,0x5dc(%esp)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0xffff,%eax
		lea    (%eax,%ebp,1),%ebx
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0xffff,%eax
		sub    $0x7f,%ebx
		lea    (%esi,%eax,1),%edx
		call   ac_LbRandomAnyShort
		and    $0x3f,%al
		mov    %edi,%ecx
		add    $0x32,%al
		mov    %ebx,0x1ec(%esp)
		mov    %al,0x2c8(%esp)
		mov    0xc(%esp),%eax
		mov    $0x5,%bl
		mov    %eax,0x130(%esp)
		mov    0x1ec(%esp),%eax
		sub    $0x7f,%edx
		mov    %eax,0x134(%esp)
		xor    %al,%al
		mov    %bl,0x340(%esp)
		mov    %al,0x304(%esp)
		mov    $0xff,%ah
		mov    %edx,0x12c(%esp)
		mov    %ah,0x43c(%esp)
		mov    0x5dc(%esp),%al
		mov    $0x39c,%ebx
		mov    %al,0x308(%esp)
		mov    0x5b4(%esp),%al
		mov    %ebx,0x128(%esp)
		mov    %al,0x64c(%esp)
		xor    %eax,%eax
		mov    $0x64,%bh
		mov    data_1e08b8,%ax
		mov    %bh,0x348(%esp)
		test   %eax,%eax
		jne    jump_d78c2
		xor    %eax,%eax
		jmp    jump_d78ef
	jump_d78c2:
		xor    %edx,%edx
		mov    %ax,%dx
		mov    %eax,%ebx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    data_1de0ca(,%eax,4),%ax
		mov    data_1e08bc,%edx
		mov    %ax,data_1e08b8
		inc    %edx
		mov    %ebx,%eax
		mov    %edx,data_1e08bc
	jump_d78ef:
		mov    %eax,0x268(%esp)
		test   %ax,%ax
		je     jump_d79d4
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0x12c(%esp),%eax
		mov    %ax,0xa(%edx)
		mov    0x134(%esp),%eax
		mov    %ax,0xe(%edx)
		mov    0x130(%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0x340(%esp),%al
		mov    %al,(%edx)
		mov    0x348(%esp),%al
		mov    %al,0x4(%edx)
		mov    0x304(%esp),%al
		mov    %al,0x5(%edx)
		mov    0x43c(%esp),%al
		mov    %al,0x6(%edx)
		mov    0x128(%esp),%eax
		mov    nstart_ani,%ebx
		add    %eax,%eax
		add    %ebx,%eax
		mov    (%eax),%ax
	jump_d7973:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_d7999
		xor    %eax,%eax
		mov    0x8(%edx),%ax
		lea    0x0(,%eax,8),%ebx
		mov    frame,%eax
		mov    0x6(%ebx,%eax,1),%ax
		jmp    jump_d7973
	jump_d7999:
		mov    0x308(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x64c(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x2c8(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0x2c(%ecx),%ax
		mov    %ax,0x12(%edx)
		mov    0x268(%esp),%eax
		mov    %ax,0x2c(%ecx)
	jump_d79d4:
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		add    $0x18,%al
		mov    %al,0x5b4(%esp)
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		add    $0x35,%al
		mov    %al,0x5dc(%esp)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0xffff,%eax
		lea    (%eax,%ebp,1),%ebx
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0xffff,%eax
		sub    $0x7f,%ebx
		lea    (%esi,%eax,1),%edx
		call   ac_LbRandomAnyShort
		and    $0x3f,%al
		mov    %edi,%ecx
		add    $0x32,%al
		mov    %ebx,0x1ec(%esp)
		mov    %al,0x378(%esp)
		mov    0xc(%esp),%eax
		mov    $0x5,%bl
		mov    %eax,0x88(%esp)
		mov    0x1ec(%esp),%eax
		sub    $0x7f,%edx
		mov    %eax,0x144(%esp)
		xor    %al,%al
		mov    %bl,0x374(%esp)
		mov    %al,0x46c(%esp)
		mov    $0xff,%ah
		mov    %edx,0x84(%esp)
		mov    %ah,0x30c(%esp)
		mov    0x5dc(%esp),%al
		mov    $0x39c,%ebx
		mov    %al,0x640(%esp)
		mov    0x5b4(%esp),%al
		mov    %ebx,0x13c(%esp)
		mov    %al,0x2dc(%esp)
		xor    %eax,%eax
		mov    $0x64,%bh
		mov    data_1e08b8,%ax
		mov    %bh,0x608(%esp)
		test   %eax,%eax
		jne    jump_d7aad
		xor    %eax,%eax
		jmp    jump_d7ada
	jump_d7aad:
		xor    %edx,%edx
		mov    %ax,%dx
		mov    %eax,%ebx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    data_1de0ca(,%eax,4),%ax
		mov    data_1e08bc,%edx
		mov    %ax,data_1e08b8
		inc    %edx
		mov    %ebx,%eax
		mov    %edx,data_1e08bc
	jump_d7ada:
		mov    %eax,0x240(%esp)
		test   %ax,%ax
		je     jump_d7bbf
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0x84(%esp),%eax
		mov    %ax,0xa(%edx)
		mov    0x144(%esp),%eax
		mov    %ax,0xe(%edx)
		mov    0x88(%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0x374(%esp),%al
		mov    %al,(%edx)
		mov    0x608(%esp),%al
		mov    %al,0x4(%edx)
		mov    0x46c(%esp),%al
		mov    %al,0x5(%edx)
		mov    0x30c(%esp),%al
		mov    %al,0x6(%edx)
		mov    0x13c(%esp),%eax
		mov    nstart_ani,%ebx
		add    %eax,%eax
		add    %ebx,%eax
		mov    (%eax),%ax
	jump_d7b5e:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_d7b84
		xor    %eax,%eax
		mov    0x8(%edx),%ax
		lea    0x0(,%eax,8),%ebx
		mov    frame,%eax
		mov    0x6(%ebx,%eax,1),%ax
		jmp    jump_d7b5e
	jump_d7b84:
		mov    0x640(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x2dc(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x378(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0x2c(%ecx),%ax
		mov    %ax,0x12(%edx)
		mov    0x240(%esp),%eax
		mov    %ax,0x2c(%ecx)
	jump_d7bbf:
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		add    $0x18,%al
		mov    %al,0x5dc(%esp)
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		add    $0x35,%al
		mov    %al,0x5b4(%esp)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0xffff,%eax
		lea    (%eax,%ebp,1),%ebx
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0xffff,%eax
		mov    $0x5,%cl
		lea    (%esi,%eax,1),%edx
		call   ac_LbRandomAnyShort
		and    $0x3f,%al
		sub    $0x7f,%ebx
		add    $0x32,%al
		mov    %edi,0x154(%esp)
		mov    %al,0x2d4(%esp)
		mov    0xc(%esp),%eax
		mov    %cl,0x3c0(%esp)
		mov    %eax,0xb0(%esp)
		mov    $0x64,%al
		mov    %ebx,0x15c(%esp)
		mov    %al,0x3cc(%esp)
		xor    %ah,%ah
		mov    $0x39c,%ecx
		mov    %ah,0x650(%esp)
		mov    0x5b4(%esp),%al
		sub    $0x7f,%edx
		mov    %al,0x384(%esp)
		mov    0x5dc(%esp),%al
		mov    %edx,0x158(%esp)
		mov    %al,0x320(%esp)
		xor    %eax,%eax
		mov    $0xff,%dl
		mov    data_1e08b8,%ax
		mov    %dl,0x5a8(%esp)
		test   %eax,%eax
		jne    jump_d7c88
		xor    %eax,%eax
		jmp    jump_d7cb5
	jump_d7c88:
		xor    %edx,%edx
		mov    %ax,%dx
		mov    %eax,%ebx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    data_1de0ca(,%eax,4),%ax
		mov    data_1e08bc,%edx
		mov    %ax,data_1e08b8
		inc    %edx
		mov    %ebx,%eax
		mov    %edx,data_1e08bc
	jump_d7cb5:
		mov    %eax,0x248(%esp)
		test   %ax,%ax
		je     jump_d7d97
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0x158(%esp),%eax
		mov    %ax,0xa(%edx)
		mov    0x15c(%esp),%eax
		mov    %ax,0xe(%edx)
		mov    0xb0(%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0x3c0(%esp),%al
		mov    %al,(%edx)
		mov    0x3cc(%esp),%al
		mov    %al,0x4(%edx)
		mov    0x650(%esp),%al
		mov    %al,0x5(%edx)
		mov    0x5a8(%esp),%al
		mov    %al,0x6(%edx)
		mov    nstart_ani,%eax
		mov    (%eax,%ecx,2),%ax
	jump_d7d2e:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_d7d4e
		xor    %eax,%eax
		mov    frame,%ebx
		mov    0x8(%edx),%ax
		mov    0x6(%ebx,%eax,8),%ax
		jmp    jump_d7d2e
	jump_d7d4e:
		mov    0x384(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x320(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x2d4(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0x154(%esp),%eax
		mov    0x2c(%eax),%ax
		mov    %ax,0x12(%edx)
		mov    0x154(%esp),%eax
		mov    0x248(%esp),%edx
		mov    %dx,0x2c(%eax)
	jump_d7d97:
		call   ac_LbRandomAnyShort
		mov    %al,%bh
		and    $0xf,%bh
		call   ac_LbRandomAnyShort
		add    $0x18,%bh
		xor    %edx,%edx
		mov    %al,%bl
		call   ac_LbRandomAnyShort
		and    $0xf,%bl
		and    $0x1,%ah
		add    $0x35,%bl
		mov    %ax,%dx
		call   ac_LbRandomAnyShort
		and    $0x1,%ah
		add    %ebp,%edx
		and    $0xffff,%eax
		lea    (%esi,%eax,1),%ecx
		call   ac_LbRandomAnyShort
		and    $0x3f,%al
		mov    %bl,0x35c(%esp)
		add    $0x32,%al
		mov    %al,0x5dc(%esp)
		lea    -0xff(%ecx),%eax
		mov    %bh,0x4ec(%esp)
		mov    %eax,0x1ec(%esp)
		lea    -0xff(%edx),%eax
		mov    %edi,%ecx
		mov    $0x5,%dh
		mov    %eax,0x184(%esp)
		mov    $0x1e,%al
		mov    %dh,0x408(%esp)
		mov    $0x39c,%edx
		mov    %al,0x38c(%esp)
		mov    %edx,0x178(%esp)
		mov    0x5dc(%esp),%dl
		xor    %ah,%ah
		mov    %dl,0x410(%esp)
		mov    0x1ec(%esp),%edx
		mov    %ah,0x61c(%esp)
		mov    %edx,0x17c(%esp)
		mov    0xc(%esp),%edx
		xor    %eax,%eax
		mov    %edx,0x180(%esp)
		mov    $0xff,%dl
		mov    data_1e08b8,%ax
		mov    %dl,0x41c(%esp)
		test   %eax,%eax
		jne    jump_d7e71
		xor    %eax,%eax
		jmp    jump_d7e97
	jump_d7e71:
		xor    %edx,%edx
		mov    %ax,%dx
		mov    %eax,%ebx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    data_1de0ca(,%eax,4),%ax
		mov    %ax,data_1e08b8
		mov    %ebx,%eax
		incl   data_1e08bc
	jump_d7e97:
		mov    %eax,0x22c(%esp)
		test   %ax,%ax
		je     jump_d7f7c
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0x17c(%esp),%eax
		mov    %ax,0xa(%edx)
		mov    0x184(%esp),%eax
		mov    %ax,0xe(%edx)
		mov    0x180(%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0x408(%esp),%al
		mov    %al,(%edx)
		mov    0x38c(%esp),%al
		mov    %al,0x4(%edx)
		mov    0x61c(%esp),%al
		mov    %al,0x5(%edx)
		mov    0x41c(%esp),%al
		mov    %al,0x6(%edx)
		mov    0x178(%esp),%eax
		mov    nstart_ani,%ebx
		add    %eax,%eax
		add    %ebx,%eax
		mov    (%eax),%ax
	jump_d7f1b:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_d7f41
		xor    %eax,%eax
		mov    0x8(%edx),%ax
		lea    0x0(,%eax,8),%ebx
		mov    frame,%eax
		mov    0x6(%ebx,%eax,1),%ax
		jmp    jump_d7f1b
	jump_d7f41:
		mov    0x35c(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x4ec(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x410(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0x2c(%ecx),%ax
		mov    %ax,0x12(%edx)
		mov    0x22c(%esp),%eax
		mov    %ax,0x2c(%ecx)
	jump_d7f7c:
		call   ac_LbRandomAnyShort
		mov    %al,%dl
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		and    $0xf,%dl
		add    $0x35,%al
		add    $0x18,%dl
		mov    %al,0x5b4(%esp)
		call   ac_LbRandomAnyShort
		and    $0x1,%ah
		and    $0xffff,%eax
		lea    (%eax,%ebp,1),%ecx
		call   ac_LbRandomAnyShort
		and    $0x1,%ah
		and    $0xffff,%eax
		lea    (%esi,%eax,1),%ebx
		call   ac_LbRandomAnyShort
		mov    %al,%dh
		sub    $0xff,%ebx
		and    $0x3f,%dh
		mov    %ebx,0x1ec(%esp)
		lea    -0xff(%ecx),%eax
		mov    $0x5,%bl
		add    $0x32,%dh
		mov    %edi,%ecx
		mov    %eax,0x1a4(%esp)
		mov    %bl,0x388(%esp)
		mov    %dh,0x5fc(%esp)
		mov    %dl,0x364(%esp)
		xor    %al,%al
		mov    $0x39c,%ebx
		mov    %al,0x328(%esp)
		mov    $0xff,%ah
		mov    %ebx,0x198(%esp)
		mov    0x1ec(%esp),%ebx
		mov    %ah,0x51c(%esp)
		mov    0x5b4(%esp),%al
		mov    %ebx,0x19c(%esp)
		mov    0xc(%esp),%ebx
		mov    %al,0x5ec(%esp)
		mov    %ebx,0x1a0(%esp)
		xor    %eax,%eax
		mov    $0x1e,%bh
		mov    data_1e08b8,%ax
		mov    %bh,0x5f8(%esp)
		test   %eax,%eax
		jne    jump_d8057
		xor    %eax,%eax
		jmp    jump_d8084
	jump_d8057:
		xor    %edx,%edx
		mov    %ax,%dx
		mov    %eax,%ebx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    data_1de0ca(,%eax,4),%ax
		mov    data_1e08bc,%edx
		mov    %ax,data_1e08b8
		inc    %edx
		mov    %ebx,%eax
		mov    %edx,data_1e08bc
	jump_d8084:
		mov    %eax,0x2b0(%esp)
		test   %ax,%ax
		je     jump_d8169
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0x19c(%esp),%eax
		mov    %ax,0xa(%edx)
		mov    0x1a4(%esp),%eax
		mov    %ax,0xe(%edx)
		mov    0x1a0(%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0x388(%esp),%al
		mov    %al,(%edx)
		mov    0x5f8(%esp),%al
		mov    %al,0x4(%edx)
		mov    0x328(%esp),%al
		mov    %al,0x5(%edx)
		mov    0x51c(%esp),%al
		mov    %al,0x6(%edx)
		mov    0x198(%esp),%eax
		mov    nstart_ani,%ebx
		add    %eax,%eax
		add    %ebx,%eax
		mov    (%eax),%ax
	jump_d8108:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_d812e
		xor    %eax,%eax
		mov    0x8(%edx),%ax
		lea    0x0(,%eax,8),%ebx
		mov    frame,%eax
		mov    0x6(%ebx,%eax,1),%ax
		jmp    jump_d8108
	jump_d812e:
		mov    0x5ec(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x364(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x5fc(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0x2c(%ecx),%ax
		mov    %ax,0x12(%edx)
		mov    0x2b0(%esp),%eax
		mov    %ax,0x2c(%ecx)
	jump_d8169:
		call   ac_LbRandomAnyShort
		mov    %al,%bh
		and    $0xf,%bh
		call   ac_LbRandomAnyShort
		add    $0x18,%bh
		xor    %edx,%edx
		mov    %al,%bl
		call   ac_LbRandomAnyShort
		and    $0xf,%bl
		and    $0x1,%ah
		add    $0x35,%bl
		mov    %ax,%dx
		call   ac_LbRandomAnyShort
		and    $0x1,%ah
		add    %ebp,%edx
		and    $0xffff,%eax
		sub    $0xff,%edx
		mov    %edi,0x14(%esp)
		mov    %bl,0x3a0(%esp)
		mov    %bh,0x3a4(%esp)
		lea    (%esi,%eax,1),%ecx
		call   ac_LbRandomAnyShort
		and    $0x3f,%al
		sub    $0xff,%ecx
		add    $0x32,%al
		mov    %ecx,0x1ec(%esp)
		mov    %al,0x568(%esp)
		mov    0x1ec(%esp),%eax
		mov    %edx,0x1b4(%esp)
		mov    %eax,0x18(%esp)
		mov    0xc(%esp),%eax
		mov    $0xff,%dl
		mov    %eax,0x1c(%esp)
		mov    $0x1e,%al
		mov    %dl,0x39c(%esp)
		mov    %al,0x624(%esp)
		xor    %ah,%ah
		mov    $0x5,%cl
		mov    %ah,0x638(%esp)
		xor    %eax,%eax
		mov    %cl,0x564(%esp)
		mov    data_1e08b8,%ax
		mov    $0x39c,%ecx
		test   %eax,%eax
		jne    jump_d822a
		xor    %eax,%eax
		jmp    jump_d8257
	jump_d822a:
		xor    %edx,%edx
		mov    %ax,%dx
		mov    %eax,%ebx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    data_1de0ca(,%eax,4),%ax
		mov    data_1e08bc,%edx
		mov    %ax,data_1e08b8
		inc    %edx
		mov    %ebx,%eax
		mov    %edx,data_1e08bc
	jump_d8257:
		mov    %eax,0x29c(%esp)
		test   %ax,%ax
		je     jump_d832e
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0x18(%esp),%eax
		mov    %ax,0xa(%edx)
		mov    0x1b4(%esp),%eax
		mov    %ax,0xe(%edx)
		mov    0x1c(%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0x564(%esp),%al
		mov    %al,(%edx)
		mov    0x624(%esp),%al
		mov    %al,0x4(%edx)
		mov    0x638(%esp),%al
		mov    %al,0x5(%edx)
		mov    0x39c(%esp),%al
		mov    nstart_ani,%ebx
		mov    %al,0x6(%edx)
		mov    (%ebx,%ecx,2),%ax
	jump_d82cb:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_d82eb
		xor    %eax,%eax
		mov    frame,%ebx
		mov    0x8(%edx),%ax
		mov    0x6(%ebx,%eax,8),%ax
		jmp    jump_d82cb
	jump_d82eb:
		mov    0x3a0(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x3a4(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x568(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0x14(%esp),%eax
		mov    0x2c(%eax),%ax
		mov    %ax,0x12(%edx)
		mov    0x14(%esp),%eax
		mov    0x29c(%esp),%edx
		mov    %dx,0x2c(%eax)
	jump_d832e:
		call   ac_LbRandomAnyShort
		mov    %al,%bl
		call   ac_LbRandomAnyShort
		xor    %ecx,%ecx
		and    $0xf,%al
		xor    %edx,%edx
		add    $0x35,%al
		and    $0xf,%bl
		mov    %al,0x5b4(%esp)
		call   ac_LbRandomAnyShort
		and    $0x1,%ah
		add    $0x18,%bl
		mov    %ax,%cx
		call   ac_LbRandomAnyShort
		and    $0x1,%ah
		add    %ebp,%ecx
		mov    %ax,%dx
		call   ac_LbRandomAnyShort
		sub    $0xff,%ecx
		mov    %al,%bh
		mov    %ecx,0x1ec(%esp)
		add    %esi,%edx
		mov    $0x5,%al
		and    $0x3f,%bh
		sub    $0xff,%edx
		mov    %edi,%ecx
		add    $0x32,%bh
		mov    %al,0x4b4(%esp)
		mov    $0x39c,%eax
		mov    %edx,0x16c(%esp)
		mov    %eax,0x1c8(%esp)
		mov    0xc(%esp),%eax
		mov    %bh,0x5ac(%esp)
		mov    %eax,0x1cc(%esp)
		mov    0x1ec(%esp),%eax
		mov    %bl,0x4cc(%esp)
		mov    %eax,0x38(%esp)
		mov    $0x1e,%ah
		xor    %dl,%dl
		mov    %ah,0x5b0(%esp)
		mov    0x5b4(%esp),%al
		mov    %dl,0x4c8(%esp)
		mov    %al,0x5b8(%esp)
		xor    %eax,%eax
		mov    $0xff,%dh
		mov    data_1e08b8,%ax
		mov    %dh,0x3e8(%esp)
		test   %eax,%eax
		jne    jump_d8404
		xor    %eax,%eax
		jmp    jump_d842a
	jump_d8404:
		xor    %ebx,%ebx
		mov    %ax,%bx
		mov    %eax,%edx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		mov    data_1de0ca(,%eax,4),%ax
		mov    %ax,data_1e08b8
		mov    %edx,%eax
		incl   data_1e08bc
	jump_d842a:
		mov    %eax,0x258(%esp)
		test   %ax,%ax
		je     jump_d8519
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0x16c(%esp),%eax
		mov    %ax,0xa(%edx)
		mov    0x38(%esp),%eax
		mov    %ax,0xe(%edx)
		mov    0x1cc(%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0x4b4(%esp),%al
		mov    %al,(%edx)
		mov    0x5b0(%esp),%al
		mov    %al,0x4(%edx)
		mov    0x4c8(%esp),%al
		mov    %al,0x5(%edx)
		mov    0x3e8(%esp),%al
		mov    %al,0x6(%edx)
		mov    0x1c8(%esp),%eax
		add    %eax,%eax
		mov    %eax,0x1ec(%esp)
		mov    0x1ec(%esp),%ebx
		mov    nstart_ani,%eax
		add    %ebx,%eax
		mov    (%eax),%ax
	jump_d84b8:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_d84de
		xor    %eax,%eax
		mov    0x8(%edx),%ax
		lea    0x0(,%eax,8),%ebx
		mov    frame,%eax
		mov    0x6(%ebx,%eax,1),%ax
		jmp    jump_d84b8
	jump_d84de:
		mov    0x5b8(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x4cc(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x5ac(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0x2c(%ecx),%ax
		mov    %ax,0x12(%edx)
		mov    0x258(%esp),%eax
		mov    %ax,0x2c(%ecx)
	jump_d8519:
		call   ac_LbRandomAnyShort
		mov    %al,%bh
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		and    $0xf,%bh
		add    $0x35,%al
		add    $0x18,%bh
		mov    %al,0x5b4(%esp)
		call   ac_LbRandomAnyShort
		and    $0x1,%ah
		and    $0xffff,%eax
		lea    (%eax,%ebp,1),%ecx
		call   ac_LbRandomAnyShort
		and    $0x1,%ah
		and    $0xffff,%eax
		lea    (%esi,%eax,1),%edx
		call   ac_LbRandomAnyShort
		mov    %al,%bl
		mov    %edi,0x1d8(%esp)
		and    $0x3f,%bl
		lea    -0xff(%edx),%eax
		add    $0x32,%bl
		lea    -0xff(%ecx),%edx
		mov    %eax,0x1dc(%esp)
		mov    $0x5,%cl
		mov    0xc(%esp),%eax
		mov    %bl,0x370(%esp)
		mov    %edx,0x58(%esp)
		mov    %eax,0x54(%esp)
		mov    $0x1e,%al
		mov    %bh,0x434(%esp)
		mov    %al,0x428(%esp)
		xor    %ah,%ah
		mov    $0xff,%dl
		mov    %ah,0x42c(%esp)
		mov    0x5b4(%esp),%al
		mov    %cl,0x420(%esp)
		mov    %al,0x430(%esp)
		xor    %eax,%eax
		mov    $0x39c,%ecx
		mov    data_1e08b8,%ax
		mov    %dl,0x344(%esp)
		test   %eax,%eax
		jne    jump_d85de
		xor    %eax,%eax
		jmp    jump_d8604
	jump_d85de:
		xor    %ebx,%ebx
		mov    %ax,%bx
		mov    %eax,%edx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		mov    data_1de0ca(,%eax,4),%ax
		mov    %ax,data_1e08b8
		mov    %edx,%eax
		incl   data_1e08bc
	jump_d8604:
		mov    %eax,0x260(%esp)
		test   %ax,%ax
		je     jump_d86e1
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0x1dc(%esp),%eax
		mov    %ax,0xa(%edx)
		mov    0x58(%esp),%eax
		mov    %ax,0xe(%edx)
		mov    0x54(%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0x420(%esp),%al
		mov    %al,(%edx)
		mov    0x428(%esp),%al
		mov    %al,0x4(%edx)
		mov    0x42c(%esp),%al
		mov    %al,0x5(%edx)
		mov    0x344(%esp),%al
		mov    nstart_ani,%ebx
		mov    %al,0x6(%edx)
		mov    (%ebx,%ecx,2),%ax
	jump_d8678:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_d8698
		xor    %eax,%eax
		mov    frame,%ebx
		mov    0x8(%edx),%ax
		mov    0x6(%ebx,%eax,8),%ax
		jmp    jump_d8678
	jump_d8698:
		mov    0x430(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x434(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x370(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0x1d8(%esp),%eax
		mov    0x2c(%eax),%ax
		mov    %ax,0x12(%edx)
		mov    0x1d8(%esp),%eax
		mov    0x260(%esp),%edx
		mov    %dx,0x2c(%eax)
	jump_d86e1:
		call   ac_LbRandomAnyShort
		mov    %al,%dh
		and    $0xf,%dh
		add    $0x18,%dh
		call   ac_LbRandomAnyShort
		mov    %al,%dl
		call   ac_LbRandomAnyShort
		and    $0xf,%dl
		and    $0x1,%ah
		add    $0x35,%dl
		and    $0xffff,%eax
		mov    %edi,%ecx
		mov    %dl,0x468(%esp)
		lea    (%eax,%ebp,1),%ebx
		call   ac_LbRandomAnyShort
		mov    %ebx,0x1ec(%esp)
		and    $0x1,%ah
		xor    %ebx,%ebx
		mov    %dh,0x4d4(%esp)
		mov    %ax,%bx
		call   ac_LbRandomAnyShort
		add    %esi,%ebx
		and    $0x3f,%al
		sub    $0xff,%ebx
		add    $0x32,%al
		mov    %ebx,0x21c(%esp)
		mov    %al,0x540(%esp)
		mov    0x1ec(%esp),%ebx
		mov    0x21c(%esp),%eax
		sub    $0xff,%ebx
		mov    %eax,0x7c(%esp)
		mov    0xc(%esp),%eax
		mov    %ebx,0x1ec(%esp)
		mov    $0x5,%bl
		mov    %eax,0x80(%esp)
		mov    0x1ec(%esp),%eax
		mov    %bl,0x2d0(%esp)
		mov    %eax,0x1f4(%esp)
		xor    %al,%al
		mov    $0x39c,%ebx
		mov    %al,0x45c(%esp)
		mov    $0xff,%ah
		mov    %ebx,0x78(%esp)
		mov    %ah,0x460(%esp)
		xor    %eax,%eax
		mov    $0x1e,%bh
		mov    data_1e08b8,%ax
		mov    %bh,0x458(%esp)
		test   %eax,%eax
		jne    jump_d87c3
		xor    %eax,%eax
		jmp    jump_d87f0
	jump_d87c3:
		xor    %edx,%edx
		mov    %ax,%dx
		mov    %eax,%ebx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    data_1de0ca(,%eax,4),%ax
		mov    data_1e08bc,%edx
		mov    %ax,data_1e08b8
		inc    %edx
		mov    %ebx,%eax
		mov    %edx,data_1e08bc
	jump_d87f0:
		mov    %eax,0x238(%esp)
		test   %ax,%ax
		je     jump_d88dc
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0x7c(%esp),%eax
		mov    %ax,0xa(%edx)
		mov    0x1f4(%esp),%eax
		mov    %ax,0xe(%edx)
		mov    0x80(%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0x2d0(%esp),%al
		mov    %al,(%edx)
		mov    0x458(%esp),%al
		mov    %al,0x4(%edx)
		mov    0x45c(%esp),%al
		mov    %al,0x5(%edx)
		mov    0x460(%esp),%al
		mov    %al,0x6(%edx)
		mov    0x78(%esp),%eax
		add    %eax,%eax
		mov    %eax,0x1ec(%esp)
		mov    0x1ec(%esp),%ebx
		mov    nstart_ani,%eax
		add    %ebx,%eax
		mov    (%eax),%ax
	jump_d887b:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_d88a1
		xor    %eax,%eax
		mov    0x8(%edx),%ax
		lea    0x0(,%eax,8),%ebx
		mov    frame,%eax
		mov    0x6(%ebx,%eax,1),%ax
		jmp    jump_d887b
	jump_d88a1:
		mov    0x468(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x4d4(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x540(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0x2c(%ecx),%ax
		mov    %ax,0x12(%edx)
		mov    0x238(%esp),%eax
		mov    %ax,0x2c(%ecx)
	jump_d88dc:
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		mov    $0x5,%cl
		add    $0x18,%al
		mov    %edi,0xa4(%esp)
		mov    %al,0x5b4(%esp)
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		xor    %ebx,%ebx
		add    $0x35,%al
		xor    %edx,%edx
		mov    %al,0x5dc(%esp)
		call   ac_LbRandomAnyShort
		and    $0x1,%ah
		mov    %cl,0x2e0(%esp)
		mov    %ax,%bx
		call   ac_LbRandomAnyShort
		and    $0x1,%ah
		mov    $0x39c,%ecx
		mov    %ax,%dx
		call   ac_LbRandomAnyShort
		and    $0x3f,%al
		mov    %ecx,0x1bc(%esp)
		add    $0x32,%al
		add    %ebp,%ebx
		mov    %al,0x3bc(%esp)
		mov    0xc(%esp),%eax
		sub    $0xff,%ebx
		mov    %eax,0x204(%esp)
		mov    $0x1e,%al
		mov    %ebx,%ecx
		mov    %al,0x48c(%esp)
		xor    %ah,%ah
		add    %esi,%edx
		mov    %ah,0x490(%esp)
		mov    0x5dc(%esp),%al
		sub    $0xff,%edx
		mov    %al,0x3c8(%esp)
		mov    0x5b4(%esp),%al
		mov    %edx,0xa8(%esp)
		mov    %al,0x310(%esp)
		xor    %eax,%eax
		mov    $0xff,%dl
		mov    data_1e08b8,%ax
		mov    %dl,0x494(%esp)
		test   %eax,%eax
		jne    jump_d89ad
		xor    %eax,%eax
		jmp    jump_d89da
	jump_d89ad:
		xor    %edx,%edx
		mov    %ax,%dx
		mov    %eax,%ebx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    data_1de0ca(,%eax,4),%ax
		mov    data_1e08bc,%edx
		mov    %ax,data_1e08b8
		inc    %edx
		mov    %ebx,%eax
		mov    %edx,data_1e08bc
	jump_d89da:
		mov    %eax,0x254(%esp)
		test   %ax,%ax
		je     jump_d8abc
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0xa8(%esp),%eax
		mov    %ax,0xa(%edx)
		mov    0x204(%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0x2e0(%esp),%al
		mov    %al,(%edx)
		mov    0x48c(%esp),%al
		mov    %al,0x4(%edx)
		mov    0x490(%esp),%al
		mov    %al,0x5(%edx)
		mov    0x494(%esp),%al
		mov    0x1bc(%esp),%ebx
		mov    %al,0x6(%edx)
		mov    nstart_ani,%eax
		mov    %cx,0xe(%edx)
		mov    (%eax,%ebx,2),%ax
	jump_d8a53:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_d8a73
		xor    %eax,%eax
		mov    frame,%ebx
		mov    0x8(%edx),%ax
		mov    0x6(%ebx,%eax,8),%ax
		jmp    jump_d8a53
	jump_d8a73:
		mov    0x3c8(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x310(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x3bc(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0xa4(%esp),%eax
		mov    0x2c(%eax),%ax
		mov    %ax,0x12(%edx)
		mov    0xa4(%esp),%eax
		mov    0x254(%esp),%edx
		mov    %dx,0x2c(%eax)
	jump_d8abc:
		call   ac_LbRandomAnyShort
		mov    %al,%dl
		and    $0xf,%dl
		add    $0x18,%dl
		call   ac_LbRandomAnyShort
		mov    %al,%dh
		call   ac_LbRandomAnyShort
		and    $0xf,%dh
		and    $0x1,%ah
		add    $0x35,%dh
		and    $0xffff,%eax
		add    %eax,%ebp
		call   ac_LbRandomAnyShort
		and    $0x1,%ah
		mov    $0x5,%bl
		mov    $0x39c,%ecx
		and    $0xffff,%eax
		sub    $0xff,%ebp
		add    %eax,%esi
		call   ac_LbRandomAnyShort
		and    $0x3f,%al
		mov    %dh,0x4e0(%esp)
		add    $0x32,%al
		mov    %dl,0x4e4(%esp)
		mov    %al,0x404(%esp)
		mov    0xc(%esp),%eax
		mov    %bl,0x4d0(%esp)
		mov    %eax,0x170(%esp)
		xor    %al,%al
		mov    %ebp,0x174(%esp)
		mov    %al,0x4dc(%esp)
		mov    $0xff,%ah
		mov    $0x1e,%bh
		mov    %ah,0x314(%esp)
		xor    %eax,%eax
		sub    $0xff,%esi
		mov    data_1e08b8,%ax
		mov    %bh,0x4d8(%esp)
		test   %eax,%eax
		jne    jump_d8b69
		xor    %eax,%eax
		jmp    jump_d8b96
	jump_d8b69:
		xor    %ebx,%ebx
		mov    %ax,%bx
		mov    %eax,%edx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		mov    data_1de0ca(,%eax,4),%ax
		mov    data_1e08bc,%ebx
		mov    %ax,data_1e08b8
		inc    %ebx
		mov    %edx,%eax
		mov    %ebx,data_1e08bc
	jump_d8b96:
		mov    %eax,0x24c(%esp)
		test   %ax,%ax
		je     jump_d8c63
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0x174(%esp),%eax
		mov    %ax,0xe(%edx)
		mov    0x170(%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0x4d0(%esp),%al
		mov    %al,(%edx)
		mov    0x4d8(%esp),%al
		mov    %al,0x4(%edx)
		mov    0x4dc(%esp),%al
		mov    %al,0x5(%edx)
		mov    0x314(%esp),%al
		mov    %al,0x6(%edx)
		mov    nstart_ani,%eax
		mov    %si,0xa(%edx)
		mov    (%eax,%ecx,2),%ax
	jump_d8c08:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_d8c28
		xor    %eax,%eax
		mov    frame,%ebx
		mov    0x8(%edx),%ax
		mov    0x6(%ebx,%eax,8),%ax
		jmp    jump_d8c08
	jump_d8c28:
		mov    0x4e0(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x4e4(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x404(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0x2c(%edi),%ax
		mov    %ax,0x12(%edx)
		mov    0x24c(%esp),%eax
		mov    %ax,0x2c(%edi)
	jump_d8c63:
		mov    0xe(%esp),%eax
		sar    $0x10,%eax
		call   ac_add_node_sthing
	jump_d8c6f:
		add    $0x68c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
func_d8c79:
/*----------------------------------------------------------------*/
		call   ac_LbRandomAnyShort
		mov    %al,%dl
		call   ac_LbRandomAnyShort
		and    $0xf,%dl
		xor    %ah,%ah
		add    $0x35,%dl
		and    $0x3f,%al
		and    $0xffff,%eax
		add    %eax,%ebp
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3f,%al
		mov    $0xa,%dh
		mov    $0x39b,%ecx
		mov    $0x1e,%bl
		and    $0xffff,%eax
		sub    $0x1f,%ebp
		add    %eax,%esi
		call   ac_LbRandomAnyShort
		and    $0x3f,%al
		mov    %dh,0x50c(%esp)
		add    $0x32,%al
		mov    %ebp,0xec(%esp)
		mov    %al,0x5e8(%esp)
		mov    0xc(%esp),%eax
		mov    %bl,0x510(%esp)
		mov    %eax,0xe8(%esp)
		mov    $0xff,%al
		mov    %dl,0x354(%esp)
		mov    %al,0x350(%esp)
		mov    $0x2,%ah
		sub    $0x1f,%esi
		mov    %ah,0x44c(%esp)
		xor    %eax,%eax
		xor    %bh,%bh
		mov    data_1e08b8,%ax
		mov    %bh,0x34c(%esp)
		test   %eax,%eax
		jne    jump_d8d17
		xor    %eax,%eax
		jmp    jump_d8d44
	jump_d8d17:
		xor    %ebx,%ebx
		mov    %ax,%bx
		mov    %eax,%edx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		mov    data_1de0ca(,%eax,4),%ax
		mov    data_1e08bc,%ebx
		mov    %ax,data_1e08b8
		inc    %ebx
		mov    %edx,%eax
		mov    %ebx,data_1e08bc
	jump_d8d44:
		mov    %eax,0x290(%esp)
		test   %ax,%ax
		je     jump_d8c63
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0xec(%esp),%eax
		mov    %si,0xa(%edx)
		mov    %ax,0xe(%edx)
		mov    0xe8(%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0x50c(%esp),%al
		mov    %al,(%edx)
		mov    0x510(%esp),%al
		mov    %al,0x4(%edx)
		mov    0x34c(%esp),%al
		mov    %al,0x5(%edx)
		mov    0x350(%esp),%al
		mov    nstart_ani,%ebx
		mov    %al,0x6(%edx)
		mov    (%ebx,%ecx,2),%ax
	jump_d8db7:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_d8dd7
		xor    %eax,%eax
		mov    frame,%ebx
		mov    0x8(%edx),%ax
		mov    0x6(%ebx,%eax,8),%ax
		jmp    jump_d8db7
	jump_d8dd7:
		mov    0x354(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x44c(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x5e8(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0x2c(%edi),%ax
		mov    %ax,0x12(%edx)
		mov    0x290(%esp),%eax
		mov    %ax,0x2c(%edi)
		jmp    jump_d8c63


/*----------------------------------------------------------------*/
func_d8e17:
/*----------------------------------------------------------------*/
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		add    $0x35,%al
		mov    %al,0x5b4(%esp)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3f,%al
		and    $0xffff,%eax
		lea    (%eax,%ebp,1),%ebx
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3f,%al
		mov    $0x39b,%ecx
		and    $0xffff,%eax
		sub    $0x1f,%ebx
		mov    %edi,0x138(%esp)
		lea    (%esi,%eax,1),%edx
		call   ac_LbRandomAnyShort
		mov    %ecx,0x1ac(%esp)
		mov    %ebx,0x1b0(%esp)
		mov    $0xff,%bl
		and    $0x3f,%al
		sub    $0x1f,%edx
		add    $0x32,%al
		mov    %edx,%ecx
		mov    %bl,0x654(%esp)
		mov    $0x15,%ah
		mov    $0x1e,%dl
		mov    $0x6,%bh
		mov    %ah,0x544(%esp)
		mov    %al,0x548(%esp)
		mov    0xc(%esp),%eax
		mov    %dl,0x5f4(%esp)
		mov    %eax,0x1fc(%esp)
		mov    0x5b4(%esp),%al
		mov    %bh,0x558(%esp)
		mov    %al,0x554(%esp)
		xor    %eax,%eax
		xor    %dh,%dh
		mov    data_1e08b8,%ax
		mov    %dh,0x550(%esp)
		test   %eax,%eax
		jne    jump_d8ed1
		xor    %eax,%eax
		jmp    jump_d8efe
	jump_d8ed1:
		xor    %edx,%edx
		mov    %ax,%dx
		mov    %eax,%ebx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    data_1de0ca(,%eax,4),%ax
		mov    data_1e08bc,%edx
		mov    %ax,data_1e08b8
		inc    %edx
		mov    %ebx,%eax
		mov    %edx,data_1e08bc
	jump_d8efe:
		mov    %eax,0x23c(%esp)
		test   %ax,%ax
		je     func_d8fe1
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0x1b0(%esp),%eax
		mov    %ax,0xe(%edx)
		mov    0x1fc(%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0x544(%esp),%al
		mov    %al,(%edx)
		mov    0x5f4(%esp),%al
		mov    %al,0x4(%edx)
		mov    0x550(%esp),%al
		mov    %al,0x5(%edx)
		mov    0x654(%esp),%al
		mov    nstart_ani,%ebx
		mov    %al,0x6(%edx)
		mov    0x1ac(%esp),%eax
		mov    %cx,0xa(%edx)
		mov    (%ebx,%eax,2),%ax
	jump_d8f78:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_d8f98
		xor    %eax,%eax
		mov    frame,%ebx
		mov    0x8(%edx),%ax
		mov    0x6(%ebx,%eax,8),%ax
		jmp    jump_d8f78
	jump_d8f98:
		mov    0x554(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x558(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x548(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0x138(%esp),%eax
		mov    0x2c(%eax),%ax
		mov    %ax,0x12(%edx)
		mov    0x138(%esp),%eax
		mov    0x23c(%esp),%edx
		mov    %dx,0x2c(%eax)


/*----------------------------------------------------------------*/
func_d8fe1:
/*----------------------------------------------------------------*/
		call   ac_LbRandomAnyShort
		mov    %al,%dl
		call   ac_LbRandomAnyShort
		and    $0xf,%dl
		xor    %ah,%ah
		add    $0x35,%dl
		and    $0x3f,%al
		and    $0xffff,%eax
		add    %eax,%ebp
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3f,%al
		mov    $0x15,%dh
		mov    $0x39b,%ebx
		mov    0xc(%esp),%ecx
		and    $0xffff,%eax
		sub    $0x1f,%ebp
		add    %eax,%esi
		call   ac_LbRandomAnyShort
		mov    %dh,0x588(%esp)
		mov    %ebx,0x1f8(%esp)
		mov    %ebp,0x1c0(%esp)
		and    $0x3f,%al
		mov    %dl,0x59c(%esp)
		add    $0x32,%al
		mov    $0x1e,%bl
		mov    %al,0x58c(%esp)
		mov    $0xff,%al
		sub    $0x1f,%esi
		mov    %al,0x598(%esp)
		mov    $0xc,%ah
		mov    %bl,0x590(%esp)
		mov    %ah,0x614(%esp)
		xor    %eax,%eax
		xor    %bh,%bh
		mov    data_1e08b8,%ax
		mov    %bh,0x594(%esp)
		test   %eax,%eax
		jne    jump_d907f
		xor    %eax,%eax
		jmp    jump_d90ac
	jump_d907f:
		xor    %edx,%edx
		mov    %ax,%dx
		mov    %eax,%ebx
		lea    0x0(,%edx,4),%eax
		mov    data_1e08bc,%ebp
		add    %edx,%eax
		inc    %ebp
		mov    data_1de0ca(,%eax,4),%ax
		mov    %ebp,data_1e08bc
		mov    %ax,data_1e08b8
		mov    %ebx,%eax
	jump_d90ac:
		mov    %eax,0x27c(%esp)
		test   %ax,%ax
		je     jump_d8c63
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0x1c0(%esp),%eax
		mov    %si,0xa(%edx)
		mov    %ax,0xe(%edx)
		mov    0x588(%esp),%al
		mov    %al,(%edx)
		mov    0x590(%esp),%al
		mov    %al,0x4(%edx)
		mov    0x594(%esp),%al
		mov    %al,0x5(%edx)
		mov    0x598(%esp),%al
		mov    nstart_ani,%ebx
		mov    %al,0x6(%edx)
		mov    0x1f8(%esp),%eax
		mov    %cx,0xc(%edx)
		mov    (%ebx,%eax,2),%ax
	jump_d911f:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_d913f
		xor    %eax,%eax
		mov    frame,%ebx
		mov    0x8(%edx),%ax
		mov    0x6(%ebx,%eax,8),%ax
		jmp    jump_d911f
	jump_d913f:
		mov    0x59c(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x614(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x58c(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0x2c(%edi),%ax
		mov    %ax,0x12(%edx)
		mov    0x27c(%esp),%eax
		mov    %ax,0x2c(%edi)
		jmp    jump_d8c63


/*----------------------------------------------------------------*/
func_d917f:
/*----------------------------------------------------------------*/
		mov    %ebp,%eax
		sar    $0x8,%eax
		mov    %esi,%edx
		mov    %eax,%ebx
		sar    $0x8,%edx
		shl    $0x7,%ebx
		add    %edx,%ebx
		mov    %ebx,0x1ec(%esp)
		mov    0x1ec(%esp),%ecx
		shl    $0x3,%ebx
		add    %ecx,%ebx
		mov    EXPORT_SYMBOL(game_my_big_map),%ecx
		add    %ebx,%ebx
		add    %ecx,%ebx
		mov    %ecx,0x208(%esp)
		andb   $0x7f,0xf(%ebx)
		lea    -0x1(%eax),%ecx
		lea    -0x1(%edx),%ebx
		test   %ebx,%ebx
		jl     jump_d9204
		cmp    $0x7f,%ebx
		jg     jump_d9204
		test   %ecx,%ecx
		jl     jump_d9204
		cmp    $0x7f,%ecx
		jg     jump_d9204
		shl    $0x7,%ecx
		add    %ecx,%ebx
		mov    %ebx,0x1ec(%esp)
		mov    0x1ec(%esp),%ecx
		shl    $0x3,%ebx
		add    %ecx,%ebx
		mov    0x208(%esp),%ecx
		add    %ebx,%ebx
		add    %ecx,%ebx
		mov    0xf(%ebx),%ch
		and    $0xf,%ch
		mov    %ch,0xf(%ebx)
		mov    %ch,%cl
		or     $0x70,%cl
		mov    %cl,0xf(%ebx)
	jump_d9204:
		lea    -0x1(%eax),%ebx
		test   %edx,%edx
		jl     jump_d924c
		cmp    $0x7f,%edx
		jg     jump_d924c
		test   %ebx,%ebx
		jl     jump_d924c
		cmp    $0x7f,%ebx
		jg     jump_d924c
		shl    $0x7,%ebx
		add    %edx,%ebx
		mov    %ebx,0x21c(%esp)
		mov    0x21c(%esp),%ecx
		shl    $0x3,%ebx
		add    %ecx,%ebx
		mov    EXPORT_SYMBOL(game_my_big_map),%ecx
		add    %ebx,%ebx
		add    %ecx,%ebx
		mov    0xf(%ebx),%ch
		and    $0xf,%ch
		mov    %ch,0xf(%ebx)
		mov    %ch,%cl
		or     $0x50,%cl
		mov    %cl,0xf(%ebx)
	jump_d924c:
		lea    0x1(%edx),%ebx
		mov    %ebx,0x20c(%esp)
		mov    0x20c(%esp),%ecx
		lea    -0x1(%eax),%ebx
		test   %ecx,%ecx
		jl     jump_d92a5
		cmp    $0x7f,%ecx
		jg     jump_d92a5
		test   %ebx,%ebx
		jl     jump_d92a5
		cmp    $0x7f,%ebx
		jg     jump_d92a5
		shl    $0x7,%ebx
		add    %ecx,%ebx
		mov    %ebx,0x1ec(%esp)
		mov    0x1ec(%esp),%ecx
		shl    $0x3,%ebx
		add    %ecx,%ebx
		mov    EXPORT_SYMBOL(game_my_big_map),%ecx
		add    %ebx,%ebx
		add    %ecx,%ebx
		mov    0xf(%ebx),%ch
		and    $0xf,%ch
		mov    %ch,0xf(%ebx)
		mov    %ch,%cl
		or     $0x30,%cl
		mov    %cl,0xf(%ebx)
	jump_d92a5:
		lea    0x1(%edx),%ebx
		test   %ebx,%ebx
		jl     jump_d92ef
		cmp    $0x7f,%ebx
		jg     jump_d92ef
		test   %eax,%eax
		jl     jump_d92ef
		cmp    $0x7f,%eax
		jg     jump_d92ef
		mov    %eax,%ecx
		shl    $0x7,%ecx
		add    %ecx,%ebx
		mov    %ebx,0x21c(%esp)
		mov    0x21c(%esp),%ecx
		shl    $0x3,%ebx
		add    %ecx,%ebx
		mov    EXPORT_SYMBOL(game_my_big_map),%ecx
		add    %ebx,%ebx
		add    %ecx,%ebx
		mov    0xf(%ebx),%ch
		and    $0xf,%ch
		mov    %ch,0xf(%ebx)
		mov    %ch,%cl
		or     $0x10,%cl
		mov    %cl,0xf(%ebx)
	jump_d92ef:
		lea    0x1(%eax),%ecx
		lea    0x1(%edx),%ebx
		test   %ebx,%ebx
		jl     jump_d933a
		cmp    $0x7f,%ebx
		jg     jump_d933a
		test   %ecx,%ecx
		jl     jump_d933a
		cmp    $0x7f,%ecx
		jg     jump_d933a
		shl    $0x7,%ecx
		add    %ecx,%ebx
		mov    %ebx,0x1ec(%esp)
		mov    0x1ec(%esp),%ecx
		shl    $0x3,%ebx
		add    %ecx,%ebx
		mov    EXPORT_SYMBOL(game_my_big_map),%ecx
		add    %ebx,%ebx
		add    %ecx,%ebx
		mov    0xf(%ebx),%ch
		and    $0xf,%ch
		mov    %ch,0xf(%ebx)
		mov    %ch,%cl
		or     $0xf0,%cl
		mov    %cl,0xf(%ebx)
	jump_d933a:
		lea    0x1(%eax),%ebx
		test   %edx,%edx
		jl     jump_d9382
		cmp    $0x7f,%edx
		jg     jump_d9382
		test   %ebx,%ebx
		jl     jump_d9382
		cmp    $0x7f,%ebx
		jg     jump_d9382
		shl    $0x7,%ebx
		add    %edx,%ebx
		mov    %ebx,0x1ec(%esp)
		mov    0x1ec(%esp),%ecx
		shl    $0x3,%ebx
		add    %ecx,%ebx
		mov    EXPORT_SYMBOL(game_my_big_map),%ecx
		add    %ebx,%ebx
		add    %ecx,%ebx
		mov    0xf(%ebx),%ch
		and    $0xf,%ch
		mov    %ch,0xf(%ebx)
		mov    %ch,%cl
		or     $0xd0,%cl
		mov    %cl,0xf(%ebx)
	jump_d9382:
		lea    0x1(%eax),%ecx
		lea    -0x1(%edx),%ebx
		test   %ebx,%ebx
		jl     jump_d93cd
		cmp    $0x7f,%ebx
		jg     jump_d93cd
		test   %ecx,%ecx
		jl     jump_d93cd
		cmp    $0x7f,%ecx
		jg     jump_d93cd
		shl    $0x7,%ecx
		add    %ecx,%ebx
		mov    %ebx,0x21c(%esp)
		mov    0x21c(%esp),%ecx
		shl    $0x3,%ebx
		add    %ecx,%ebx
		mov    EXPORT_SYMBOL(game_my_big_map),%ecx
		add    %ebx,%ebx
		add    %ecx,%ebx
		mov    0xf(%ebx),%ch
		and    $0xf,%ch
		mov    %ch,0xf(%ebx)
		mov    %ch,%cl
		or     $0xb0,%cl
		mov    %cl,0xf(%ebx)
	jump_d93cd:
		dec    %edx
		test   %edx,%edx
		jl     jump_d9408
		cmp    $0x7f,%edx
		jg     jump_d9408
		test   %eax,%eax
		jl     jump_d9408
		cmp    $0x7f,%eax
		jg     jump_d9408
		shl    $0x7,%eax
		add    %eax,%edx
		lea    0x0(,%edx,8),%eax
		add    %edx,%eax
		mov    EXPORT_SYMBOL(game_my_big_map),%edx
		mov    0xf(%edx,%eax,2),%ch
		and    $0xf,%ch
		mov    %ch,%bl
		mov    %ch,0xf(%edx,%eax,2)
		or     $0x90,%bl
		mov    %bl,0xf(%edx,%eax,2)
	jump_d9408:
		call   ac_LbRandomAnyShort
		and    $0x3,%al
		mov    $0x2b,%ah
		sub    %al,%ah
		mov    %ah,0x5dc(%esp)
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		add    $0x2b,%al
		mov    %al,0x5b4(%esp)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3f,%al
		and    $0xffff,%eax
		lea    (%eax,%ebp,1),%ebx
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3f,%al
		and    $0xffff,%eax
		mov    $0x6,%cl
		lea    (%esi,%eax,1),%edx
		call   ac_LbRandomAnyShort
		and    $0x3f,%al
		sub    $0x1f,%ebx
		add    $0x32,%al
		mov    %edi,0x1e0(%esp)
		mov    %al,0x2b4(%esp)
		mov    0xc(%esp),%eax
		mov    %cl,0x644(%esp)
		mov    %eax,0x1e8(%esp)
		mov    $0x64,%al
		mov    %ebx,0x194(%esp)
		mov    %al,0x358(%esp)
		xor    %ah,%ah
		mov    $0x39b,%ecx
		mov    %ah,0x660(%esp)
		mov    0x5b4(%esp),%al
		sub    $0x1f,%edx
		mov    %al,0x664(%esp)
		mov    0x5dc(%esp),%al
		mov    %edx,0x190(%esp)
		mov    %al,0x63c(%esp)
		xor    %eax,%eax
		mov    $0xff,%dl
		mov    data_1e08b8,%ax
		mov    %dl,0x604(%esp)
		test   %eax,%eax
		jne    jump_d94d7
		xor    %eax,%eax
		jmp    jump_d9504
	jump_d94d7:
		xor    %edx,%edx
		mov    %ax,%dx
		mov    %eax,%ebx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    data_1de0ca(,%eax,4),%ax
		mov    data_1e08bc,%edx
		mov    %ax,data_1e08b8
		inc    %edx
		mov    %ebx,%eax
		mov    %edx,data_1e08bc
	jump_d9504:
		mov    %eax,0x2ac(%esp)
		test   %ax,%ax
		je     jump_d95e7
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0x190(%esp),%eax
		mov    %ax,0xa(%edx)
		mov    0x194(%esp),%eax
		mov    %ax,0xe(%edx)
		mov    0x1e8(%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0x644(%esp),%al
		mov    %al,(%edx)
		mov    0x358(%esp),%al
		mov    %al,0x4(%edx)
		mov    0x660(%esp),%al
		mov    %al,0x5(%edx)
		mov    0x604(%esp),%al
		mov    nstart_ani,%ebx
		mov    %al,0x6(%edx)
		mov    (%ebx,%ecx,2),%ax
	jump_d957e:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_d959e
		xor    %eax,%eax
		mov    frame,%ebx
		mov    0x8(%edx),%ax
		mov    0x6(%ebx,%eax,8),%ax
		jmp    jump_d957e
	jump_d959e:
		mov    0x664(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x63c(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x2b4(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0x1e0(%esp),%eax
		mov    0x2c(%eax),%ax
		mov    %ax,0x12(%edx)
		mov    0x1e0(%esp),%eax
		mov    0x2ac(%esp),%edx
		mov    %dx,0x2c(%eax)
	jump_d95e7:
		call   ac_LbRandomAnyShort
		and    $0x3,%al
		mov    $0x2b,%ah
		sub    %al,%ah
		mov    %ah,0x5dc(%esp)
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		add    $0x2b,%al
		mov    $0x6,%cl
		mov    %al,0x5b4(%esp)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		xor    %ebx,%ebx
		and    $0x3f,%al
		mov    %edi,0x148(%esp)
		mov    %ax,%bx
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		xor    %edx,%edx
		and    $0x3f,%al
		mov    %cl,0x2fc(%esp)
		mov    %ax,%dx
		call   ac_LbRandomAnyShort
		and    $0x3f,%al
		mov    $0x39b,%ecx
		add    $0x32,%al
		add    %ebp,%ebx
		mov    %al,0x37c(%esp)
		mov    0xc(%esp),%eax
		sub    $0x1f,%ebx
		mov    %eax,0x150(%esp)
		mov    $0x64,%al
		mov    %ebx,0x200(%esp)
		mov    %al,0x480(%esp)
		xor    %ah,%ah
		add    %esi,%edx
		mov    %ah,0x560(%esp)
		mov    0x5b4(%esp),%al
		sub    $0x1f,%edx
		mov    %al,0x390(%esp)
		mov    0x5dc(%esp),%al
		mov    %edx,0x14c(%esp)
		mov    %al,0x394(%esp)
		xor    %eax,%eax
		mov    $0xff,%dl
		mov    data_1e08b8,%ax
		mov    %dl,0x62c(%esp)
		test   %eax,%eax
		jne    jump_d96b4
		xor    %eax,%eax
		jmp    jump_d96e1
	jump_d96b4:
		xor    %edx,%edx
		mov    %ax,%dx
		mov    %eax,%ebx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    data_1de0ca(,%eax,4),%ax
		mov    data_1e08bc,%edx
		mov    %ax,data_1e08b8
		inc    %edx
		mov    %ebx,%eax
		mov    %edx,data_1e08bc
	jump_d96e1:
		mov    %eax,0x278(%esp)
		test   %ax,%ax
		je     jump_d97c4
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0x14c(%esp),%eax
		mov    %ax,0xa(%edx)
		mov    0x200(%esp),%eax
		mov    %ax,0xe(%edx)
		mov    0x150(%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0x2fc(%esp),%al
		mov    %al,(%edx)
		mov    0x480(%esp),%al
		mov    %al,0x4(%edx)
		mov    0x560(%esp),%al
		mov    %al,0x5(%edx)
		mov    0x62c(%esp),%al
		mov    nstart_ani,%ebx
		mov    %al,0x6(%edx)
		mov    (%ebx,%ecx,2),%ax
	jump_d975b:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_d977b
		xor    %eax,%eax
		mov    frame,%ebx
		mov    0x8(%edx),%ax
		mov    0x6(%ebx,%eax,8),%ax
		jmp    jump_d975b
	jump_d977b:
		mov    0x390(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x394(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x37c(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0x148(%esp),%eax
		mov    0x2c(%eax),%ax
		mov    %ax,0x12(%edx)
		mov    0x148(%esp),%eax
		mov    0x278(%esp),%edx
		mov    %dx,0x2c(%eax)
	jump_d97c4:
		call   ac_LbRandomAnyShort
		and    $0x3,%al
		mov    $0x2b,%ah
		sub    %al,%ah
		mov    %ah,0x5b4(%esp)
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		mov    $0x6,%cl
		add    $0x2b,%al
		mov    %edi,0x160(%esp)
		mov    %al,0x5dc(%esp)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		xor    %ebx,%ebx
		and    $0x3f,%al
		xor    %edx,%edx
		mov    %ax,%bx
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		mov    %cl,0x2e4(%esp)
		and    $0x3f,%al
		mov    $0x39b,%ecx
		mov    %ax,%dx
		call   ac_LbRandomAnyShort
		and    $0x3f,%al
		mov    %ecx,0x164(%esp)
		add    $0x32,%al
		add    %ebp,%ebx
		mov    %al,0x670(%esp)
		mov    0xc(%esp),%eax
		sub    $0x1f,%ebx
		mov    %eax,0x168(%esp)
		mov    $0x64,%al
		mov    %ebx,0x1c4(%esp)
		mov    %al,0x454(%esp)
		xor    %ah,%ah
		add    %esi,%edx
		mov    %ah,0x4b0(%esp)
		mov    0x5dc(%esp),%al
		sub    $0x1f,%edx
		mov    %al,0x4b8(%esp)
		mov    0x5b4(%esp),%al
		mov    %edx,%ecx
		mov    %al,0x4bc(%esp)
		xor    %eax,%eax
		mov    $0xff,%dl
		mov    data_1e08b8,%ax
		mov    %dl,0x674(%esp)
		test   %eax,%eax
		jne    jump_d9893
		xor    %eax,%eax
		jmp    jump_d98c0
	jump_d9893:
		xor    %edx,%edx
		mov    %ax,%dx
		mov    %eax,%ebx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    data_1de0ca(,%eax,4),%ax
		mov    data_1e08bc,%edx
		mov    %ax,data_1e08b8
		inc    %edx
		mov    %ebx,%eax
		mov    %edx,data_1e08bc
	jump_d98c0:
		mov    %eax,0x230(%esp)
		test   %ax,%ax
		je     jump_d99a3
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0x1c4(%esp),%eax
		mov    %ax,0xe(%edx)
		mov    0x168(%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0x2e4(%esp),%al
		mov    %al,(%edx)
		mov    0x454(%esp),%al
		mov    %al,0x4(%edx)
		mov    0x4b0(%esp),%al
		mov    %al,0x5(%edx)
		mov    0x674(%esp),%al
		mov    nstart_ani,%ebx
		mov    %al,0x6(%edx)
		mov    0x164(%esp),%eax
		mov    %cx,0xa(%edx)
		mov    (%ebx,%eax,2),%ax
	jump_d993a:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_d995a
		xor    %eax,%eax
		mov    frame,%ebx
		mov    0x8(%edx),%ax
		mov    0x6(%ebx,%eax,8),%ax
		jmp    jump_d993a
	jump_d995a:
		mov    0x4b8(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x4bc(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x670(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0x160(%esp),%eax
		mov    0x2c(%eax),%ax
		mov    %ax,0x12(%edx)
		mov    0x160(%esp),%eax
		mov    0x230(%esp),%edx
		mov    %dx,0x2c(%eax)
	jump_d99a3:
		call   ac_LbRandomAnyShort
		and    $0x3,%al
		mov    $0x2b,%ah
		mov    $0x7,%cl
		sub    %al,%ah
		mov    %edi,0x188(%esp)
		mov    %ah,0x5dc(%esp)
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		xor    %ebx,%ebx
		add    $0x2b,%al
		xor    %edx,%edx
		mov    %al,0x5b4(%esp)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		mov    %cl,0x67c(%esp)
		mov    %ax,%bx
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		mov    $0x39b,%ecx
		mov    %ax,%dx
		call   ac_LbRandomAnyShort
		and    $0x3f,%al
		mov    %ecx,0x18c(%esp)
		add    $0x32,%al
		add    %ebp,%ebx
		mov    %al,0x360(%esp)
		mov    0xc(%esp),%eax
		sub    $0x7f,%ebx
		mov    %eax,0x218(%esp)
		mov    $0x1e,%al
		mov    %ebx,%ecx
		mov    %al,0x32c(%esp)
		xor    %ah,%ah
		add    %esi,%edx
		mov    %ah,0x500(%esp)
		mov    0x5b4(%esp),%al
		sub    $0x7f,%edx
		mov    %al,0x680(%esp)
		mov    0x5dc(%esp),%al
		mov    %edx,0x124(%esp)
		mov    %al,0x424(%esp)
		xor    %eax,%eax
		mov    $0xff,%dl
		mov    data_1e08b8,%ax
		mov    %dl,0x334(%esp)
		test   %eax,%eax
		jne    jump_d9a6e
		xor    %eax,%eax
		jmp    jump_d9a9b
	jump_d9a6e:
		xor    %edx,%edx
		mov    %ax,%dx
		mov    %eax,%ebx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    data_1de0ca(,%eax,4),%ax
		mov    data_1e08bc,%edx
		mov    %ax,data_1e08b8
		inc    %edx
		mov    %ebx,%eax
		mov    %edx,data_1e08bc
	jump_d9a9b:
		mov    %eax,0x25c(%esp)
		test   %ax,%ax
		je     jump_d9b7e
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0x124(%esp),%eax
		mov    %ax,0xa(%edx)
		mov    0x218(%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0x67c(%esp),%al
		mov    %al,(%edx)
		mov    0x32c(%esp),%al
		mov    %al,0x4(%edx)
		mov    0x500(%esp),%al
		mov    %al,0x5(%edx)
		mov    0x334(%esp),%al
		mov    nstart_ani,%ebx
		mov    %al,0x6(%edx)
		mov    0x18c(%esp),%eax
		mov    %cx,0xe(%edx)
		mov    (%ebx,%eax,2),%ax
	jump_d9b15:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_d9b35
		xor    %eax,%eax
		mov    frame,%ebx
		mov    0x8(%edx),%ax
		mov    0x6(%ebx,%eax,8),%ax
		jmp    jump_d9b15
	jump_d9b35:
		mov    0x680(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x424(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x360(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0x188(%esp),%eax
		mov    0x2c(%eax),%ax
		mov    %ax,0x12(%edx)
		mov    0x188(%esp),%eax
		mov    0x25c(%esp),%edx
		mov    %dx,0x2c(%eax)
	jump_d9b7e:
		call   ac_LbRandomAnyShort
		and    $0x3,%al
		mov    $0x2b,%ah
		sub    %al,%ah
		mov    %ah,0x5b4(%esp)
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		add    $0x2b,%al
		mov    %al,0x5dc(%esp)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0xffff,%eax
		lea    (%eax,%ebp,1),%ebx
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0xffff,%eax
		mov    $0x7,%cl
		lea    (%esi,%eax,1),%edx
		call   ac_LbRandomAnyShort
		and    $0x3f,%al
		sub    $0x7f,%ebx
		add    $0x32,%al
		mov    %edi,0x220(%esp)
		mov    %al,0x2c4(%esp)
		mov    0xc(%esp),%eax
		mov    %cl,0x688(%esp)
		mov    %eax,0x4(%esp)
		mov    $0x1e,%al
		mov    %ebx,0x8(%esp)
		mov    %al,0x3a8(%esp)
		xor    %ah,%ah
		mov    $0x39b,%ecx
		mov    %ah,0x33c(%esp)
		mov    0x5dc(%esp),%al
		sub    $0x7f,%edx
		mov    %al,0x3ec(%esp)
		mov    0x5b4(%esp),%al
		mov    %edx,(%esp)
		mov    %al,0x53c(%esp)
		xor    %eax,%eax
		mov    $0xff,%dl
		mov    data_1e08b8,%ax
		mov    %dl,0x610(%esp)
		test   %eax,%eax
		jne    jump_d9c3f
		xor    %eax,%eax
		jmp    jump_d9c6c
	jump_d9c3f:
		xor    %ebx,%ebx
		mov    %ax,%bx
		mov    %eax,%edx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		mov    data_1de0ca(,%eax,4),%ax
		mov    data_1e08bc,%ebx
		mov    %ax,data_1e08b8
		inc    %ebx
		mov    %edx,%eax
		mov    %ebx,data_1e08bc
	jump_d9c6c:
		mov    %eax,0x274(%esp)
		test   %ax,%ax
		je     jump_d9d45
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    (%esp),%eax
		mov    %ax,0xa(%edx)
		mov    0x8(%esp),%eax
		mov    %ax,0xe(%edx)
		mov    0x4(%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0x688(%esp),%al
		mov    %al,(%edx)
		mov    0x3a8(%esp),%al
		mov    %al,0x4(%edx)
		mov    0x33c(%esp),%al
		mov    %al,0x5(%edx)
		mov    0x610(%esp),%al
		mov    nstart_ani,%ebx
		mov    %al,0x6(%edx)
		mov    (%ebx,%ecx,2),%ax
	jump_d9cdc:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_d9cfc
		xor    %eax,%eax
		mov    frame,%ebx
		mov    0x8(%edx),%ax
		mov    0x6(%ebx,%eax,8),%ax
		jmp    jump_d9cdc
	jump_d9cfc:
		mov    0x3ec(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x53c(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x2c4(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0x220(%esp),%eax
		mov    0x2c(%eax),%ax
		mov    %ax,0x12(%edx)
		mov    0x220(%esp),%eax
		mov    0x274(%esp),%edx
		mov    %dx,0x2c(%eax)
	jump_d9d45:
		call   ac_LbRandomAnyShort
		and    $0x3,%al
		mov    $0x2b,%ah
		sub    %al,%ah
		mov    %ah,0x5b4(%esp)
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		add    $0x2b,%al
		xor    %ebx,%ebx
		mov    %al,0x5dc(%esp)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		mov    %ax,%bx
		call   ac_LbRandomAnyShort
		add    %ebp,%ebx
		xor    %ah,%ah
		and    $0xffff,%eax
		mov    $0x7,%cl
		lea    (%esi,%eax,1),%edx
		call   ac_LbRandomAnyShort
		and    $0x3f,%al
		sub    $0x7f,%ebx
		add    $0x32,%al
		mov    %edi,0x228(%esp)
		mov    %al,0x488(%esp)
		mov    0xc(%esp),%eax
		mov    %cl,0x570(%esp)
		mov    %eax,0x20(%esp)
		mov    $0x1e,%al
		mov    %ebx,0x24(%esp)
		mov    %al,0x3ac(%esp)
		xor    %ah,%ah
		mov    $0x39b,%ecx
		mov    %ah,0x3b0(%esp)
		mov    0x5dc(%esp),%al
		sub    $0x7f,%edx
		mov    %al,0x580(%esp)
		mov    0x5b4(%esp),%al
		mov    %edx,0x1b8(%esp)
		mov    %al,0x584(%esp)
		xor    %eax,%eax
		mov    $0xff,%dl
		mov    data_1e08b8,%ax
		mov    %dl,0x3b4(%esp)
		test   %eax,%eax
		jne    jump_d9e09
		xor    %eax,%eax
		jmp    jump_d9e36
	jump_d9e09:
		xor    %edx,%edx
		mov    %ax,%dx
		mov    %eax,%ebx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    data_1de0ca(,%eax,4),%ax
		mov    data_1e08bc,%edx
		mov    %ax,data_1e08b8
		inc    %edx
		mov    %ebx,%eax
		mov    %edx,data_1e08bc
	jump_d9e36:
		mov    %eax,0x244(%esp)
		test   %ax,%ax
		je     jump_d9f13
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0x1b8(%esp),%eax
		mov    %ax,0xa(%edx)
		mov    0x24(%esp),%eax
		mov    %ax,0xe(%edx)
		mov    0x20(%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0x570(%esp),%al
		mov    %al,(%edx)
		mov    0x3ac(%esp),%al
		mov    %al,0x4(%edx)
		mov    0x3b0(%esp),%al
		mov    %al,0x5(%edx)
		mov    0x3b4(%esp),%al
		mov    nstart_ani,%ebx
		mov    %al,0x6(%edx)
		mov    (%ebx,%ecx,2),%ax
	jump_d9eaa:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_d9eca
		xor    %eax,%eax
		mov    frame,%ebx
		mov    0x8(%edx),%ax
		mov    0x6(%ebx,%eax,8),%ax
		jmp    jump_d9eaa
	jump_d9eca:
		mov    0x580(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x584(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x488(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0x228(%esp),%eax
		mov    0x2c(%eax),%ax
		mov    %ax,0x12(%edx)
		mov    0x228(%esp),%eax
		mov    0x244(%esp),%edx
		mov    %dx,0x2c(%eax)
	jump_d9f13:
		call   ac_LbRandomAnyShort
		and    $0x3,%al
		mov    $0x35,%ah
		mov    $0x8,%cl
		sub    %al,%ah
		mov    %edi,0x3c(%esp)
		mov    %ah,0x5dc(%esp)
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		xor    %ebx,%ebx
		add    $0x35,%al
		xor    %edx,%edx
		mov    %al,0x5b4(%esp)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		mov    %cl,0x31c(%esp)
		mov    %ax,%bx
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		mov    $0x39c,%ecx
		mov    %ax,%dx
		call   ac_LbRandomAnyShort
		and    $0x3f,%al
		mov    %ecx,0x1d0(%esp)
		add    $0x32,%al
		add    %ebp,%ebx
		mov    %al,0x3f0(%esp)
		mov    0xc(%esp),%eax
		sub    $0x7f,%ebx
		mov    %eax,0x40(%esp)
		mov    $0x64,%al
		mov    %ebx,0x1d4(%esp)
		mov    %al,0x3f4(%esp)
		xor    %ah,%ah
		add    %esi,%edx
		mov    %ah,0x5d0(%esp)
		mov    0x5b4(%esp),%al
		sub    $0x7f,%edx
		mov    %al,0x3fc(%esp)
		mov    0x5dc(%esp),%al
		mov    %edx,%ecx
		mov    %al,0x5d4(%esp)
		xor    %eax,%eax
		mov    $0xff,%dl
		mov    data_1e08b8,%ax
		mov    %dl,0x3f8(%esp)
		test   %eax,%eax
		jne    jump_d9fd8
		xor    %eax,%eax
		jmp    jump_da005
	jump_d9fd8:
		xor    %edx,%edx
		mov    %ax,%dx
		mov    %eax,%ebx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    data_1de0ca(,%eax,4),%ax
		mov    data_1e08bc,%edx
		mov    %ax,data_1e08b8
		inc    %edx
		mov    %ebx,%eax
		mov    %edx,data_1e08bc
	jump_da005:
		mov    %eax,0x280(%esp)
		test   %ax,%ax
		je     jump_da0df
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0x1d4(%esp),%eax
		mov    %ax,0xe(%edx)
		mov    0x40(%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0x31c(%esp),%al
		mov    %al,(%edx)
		mov    0x3f4(%esp),%al
		mov    %al,0x4(%edx)
		mov    0x5d0(%esp),%al
		mov    %al,0x5(%edx)
		mov    0x3f8(%esp),%al
		mov    nstart_ani,%ebx
		mov    %al,0x6(%edx)
		mov    0x1d0(%esp),%eax
		mov    %cx,0xa(%edx)
		mov    (%ebx,%eax,2),%ax
	jump_da07c:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_da09c
		xor    %eax,%eax
		mov    frame,%ebx
		mov    0x8(%edx),%ax
		mov    0x6(%ebx,%eax,8),%ax
		jmp    jump_da07c
	jump_da09c:
		mov    0x3fc(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x5d4(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x3f0(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0x3c(%esp),%eax
		mov    0x2c(%eax),%ax
		mov    %ax,0x12(%edx)
		mov    0x3c(%esp),%eax
		mov    0x280(%esp),%edx
		mov    %dx,0x2c(%eax)
	jump_da0df:
		call   ac_LbRandomAnyShort
		and    $0x3,%al
		mov    $0x35,%ah
		sub    %al,%ah
		mov    %ah,0x5b4(%esp)
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		add    $0x35,%al
		xor    %ebx,%ebx
		mov    %al,0x5dc(%esp)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		mov    %ax,%bx
		call   ac_LbRandomAnyShort
		add    %ebp,%ebx
		xor    %ah,%ah
		and    $0xffff,%eax
		lea    (%esi,%eax,1),%edx
		call   ac_LbRandomAnyShort
		and    $0x3f,%al
		sub    $0x7f,%ebx
		add    $0x32,%al
		mov    %edi,%ecx
		mov    %al,0x508(%esp)
		mov    0xc(%esp),%eax
		mov    %ebx,0x1ec(%esp)
		mov    %eax,0x60(%esp)
		mov    0x1ec(%esp),%eax
		mov    $0x8,%bl
		mov    %eax,0x64(%esp)
		mov    $0x64,%al
		sub    $0x7f,%edx
		mov    %al,0x2c0(%esp)
		xor    %ah,%ah
		mov    %bl,0x438(%esp)
		mov    %ah,0x440(%esp)
		mov    0x5dc(%esp),%al
		mov    %edx,0x5c(%esp)
		mov    %al,0x2f8(%esp)
		mov    0x5b4(%esp),%al
		mov    $0x39c,%ebx
		mov    %al,0x658(%esp)
		xor    %eax,%eax
		mov    $0xff,%dl
		mov    data_1e08b8,%ax
		mov    %dl,0x444(%esp)
		test   %eax,%eax
		jne    jump_da1a9
		xor    %eax,%eax
		jmp    jump_da1d7
	jump_da1a9:
		mov    %eax,%edx
		xor    %eax,%eax
		mov    %dx,%ax
		mov    %eax,0x1ec(%esp)
		shl    $0x2,%eax
		add    0x1ec(%esp),%eax
		mov    data_1de0ca(,%eax,4),%ax
		mov    %ax,data_1e08b8
		mov    %edx,%eax
		incl   data_1e08bc
	jump_da1d7:
		mov    %eax,0x28c(%esp)
		test   %ax,%ax
		je     jump_da2b1
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0x5c(%esp),%eax
		mov    %ax,0xa(%edx)
		mov    0x64(%esp),%eax
		mov    %ax,0xe(%edx)
		mov    0x60(%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0x438(%esp),%al
		mov    %al,(%edx)
		mov    0x2c0(%esp),%al
		mov    %al,0x4(%edx)
		mov    0x440(%esp),%al
		mov    %al,0x5(%edx)
		mov    0x444(%esp),%al
		mov    %al,0x6(%edx)
		lea    0x0(,%ebx,2),%eax
		mov    nstart_ani,%ebx
		add    %ebx,%eax
		mov    (%eax),%ax
	jump_da250:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_da276
		xor    %eax,%eax
		mov    0x8(%edx),%ax
		lea    0x0(,%eax,8),%ebx
		mov    frame,%eax
		mov    0x6(%ebx,%eax,1),%ax
		jmp    jump_da250
	jump_da276:
		mov    0x2f8(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x658(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x508(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0x2c(%ecx),%ax
		mov    %ax,0x12(%edx)
		mov    0x28c(%esp),%eax
		mov    %ax,0x2c(%ecx)
	jump_da2b1:
		call   ac_LbRandomAnyShort
		and    $0x3,%al
		mov    $0x35,%ah
		sub    %al,%ah
		mov    $0x8,%cl
		mov    %ah,0x5dc(%esp)
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		mov    %edi,0x140(%esp)
		add    $0x35,%al
		xor    %ebx,%ebx
		mov    %al,0x5b4(%esp)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		xor    %edx,%edx
		mov    %ax,%bx
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		mov    %cl,0x464(%esp)
		mov    %ax,%dx
		call   ac_LbRandomAnyShort
		and    $0x3f,%al
		mov    $0x39c,%ecx
		add    $0x32,%al
		add    %ebp,%ebx
		mov    %al,0x54c(%esp)
		mov    0xc(%esp),%eax
		sub    $0x7f,%ebx
		mov    %eax,0x1e4(%esp)
		mov    $0x64,%al
		mov    %ebx,0x90(%esp)
		mov    %al,0x470(%esp)
		xor    %ah,%ah
		add    %esi,%edx
		mov    %ah,0x474(%esp)
		mov    0x5b4(%esp),%al
		sub    $0x7f,%edx
		mov    %al,0x478(%esp)
		mov    0x5dc(%esp),%al
		mov    %edx,0x8c(%esp)
		mov    %al,0x55c(%esp)
		xor    %eax,%eax
		mov    $0xff,%dl
		mov    data_1e08b8,%ax
		mov    %dl,0x380(%esp)
		test   %eax,%eax
		jne    jump_da37a
		xor    %eax,%eax
		jmp    jump_da3a0
	jump_da37a:
		xor    %ebx,%ebx
		mov    %ax,%bx
		mov    %eax,%edx
		lea    0x0(,%ebx,4),%eax
		add    %ebx,%eax
		mov    data_1de0ca(,%eax,4),%ax
		mov    %ax,data_1e08b8
		mov    %edx,%eax
		incl   data_1e08bc
	jump_da3a0:
		mov    %eax,0x298(%esp)
		test   %ax,%ax
		je     jump_da483
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0x8c(%esp),%eax
		mov    %ax,0xa(%edx)
		mov    0x90(%esp),%eax
		mov    %ax,0xe(%edx)
		mov    0x1e4(%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0x464(%esp),%al
		mov    %al,(%edx)
		mov    0x470(%esp),%al
		mov    %al,0x4(%edx)
		mov    0x474(%esp),%al
		mov    %al,0x5(%edx)
		mov    0x380(%esp),%al
		mov    nstart_ani,%ebx
		mov    %al,0x6(%edx)
		mov    (%ebx,%ecx,2),%ax
	jump_da41a:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_da43a
		xor    %eax,%eax
		mov    frame,%ebx
		mov    0x8(%edx),%ax
		mov    0x6(%ebx,%eax,8),%ax
		jmp    jump_da41a
	jump_da43a:
		mov    0x478(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x55c(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x54c(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0x140(%esp),%eax
		mov    0x2c(%eax),%ax
		mov    %ax,0x12(%edx)
		mov    0x140(%esp),%eax
		mov    0x298(%esp),%edx
		mov    %dx,0x2c(%eax)
	jump_da483:
		call   ac_LbRandomAnyShort
		and    $0x3,%al
		mov    $0x35,%ah
		mov    $0x9,%cl
		sub    %al,%ah
		mov    %edi,0xac(%esp)
		mov    %ah,0x5b4(%esp)
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		xor    %ebx,%ebx
		add    $0x35,%al
		xor    %edx,%edx
		mov    %al,0x5dc(%esp)
		call   ac_LbRandomAnyShort
		and    $0x1,%ah
		mov    %cl,0x498(%esp)
		mov    %ax,%bx
		call   ac_LbRandomAnyShort
		and    $0x1,%ah
		mov    $0x39c,%ecx
		mov    %ax,%dx
		call   ac_LbRandomAnyShort
		and    $0x3f,%al
		mov    %ecx,0xb4(%esp)
		add    $0x32,%al
		mov    $0x1e,%ch
		mov    %al,0x318(%esp)
		mov    0xc(%esp),%eax
		mov    %ch,0x4a0(%esp)
		mov    %eax,0xb8(%esp)
		xor    %al,%al
		add    %ebp,%ebx
		mov    %al,0x4a4(%esp)
		mov    $0xff,%ah
		sub    $0xff,%ebx
		mov    %ah,0x628(%esp)
		mov    0x5dc(%esp),%al
		mov    %ebx,0xc0(%esp)
		mov    %al,0x4a8(%esp)
		mov    0x5b4(%esp),%al
		add    %esi,%edx
		mov    %al,0x4ac(%esp)
		xor    %eax,%eax
		sub    $0xff,%edx
		mov    data_1e08b8,%ax
		mov    %edx,0x224(%esp)
		test   %eax,%eax
		jne    jump_da55b
		xor    %eax,%eax
		jmp    jump_da588
	jump_da55b:
		xor    %edx,%edx
		mov    %ax,%dx
		mov    %eax,%ebx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    data_1de0ca(,%eax,4),%ax
		mov    data_1e08bc,%edx
		mov    %ax,data_1e08b8
		inc    %edx
		mov    %ebx,%eax
		mov    %edx,data_1e08bc
	jump_da588:
		mov    %eax,%ecx
		test   %ax,%ax
		je     jump_da666
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0x224(%esp),%eax
		mov    %ax,0xa(%edx)
		mov    0xc0(%esp),%eax
		mov    %ax,0xe(%edx)
		mov    0xb8(%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0x498(%esp),%al
		mov    %al,(%edx)
		mov    0x4a0(%esp),%al
		mov    %al,0x4(%edx)
		mov    0x4a4(%esp),%al
		mov    %al,0x5(%edx)
		mov    0x628(%esp),%al
		mov    nstart_ani,%ebx
		mov    %al,0x6(%edx)
		mov    0xb4(%esp),%eax
		mov    (%ebx,%eax,2),%ax
	jump_da604:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_da624
		xor    %eax,%eax
		mov    frame,%ebx
		mov    0x8(%edx),%ax
		mov    0x6(%ebx,%eax,8),%ax
		jmp    jump_da604
	jump_da624:
		mov    0x4a8(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x4ac(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x318(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0xac(%esp),%eax
		mov    0x2c(%eax),%ax
		mov    %ax,0x12(%edx)
		mov    0xac(%esp),%eax
		mov    %cx,0x2c(%eax)
	jump_da666:
		call   ac_LbRandomAnyShort
		and    $0x3,%al
		mov    $0x35,%ah
		sub    %al,%ah
		mov    %ah,0x5b4(%esp)
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		add    $0x35,%al
		mov    %al,0x5dc(%esp)
		call   ac_LbRandomAnyShort
		and    $0x1,%ah
		mov    $0x9,%cl
		and    $0xffff,%eax
		xor    %edx,%edx
		lea    (%eax,%ebp,1),%ebx
		call   ac_LbRandomAnyShort
		and    $0x1,%ah
		mov    %edi,0xd0(%esp)
		mov    %ax,%dx
		call   ac_LbRandomAnyShort
		and    $0x3f,%al
		mov    %cl,0x678(%esp)
		add    $0x32,%al
		mov    $0x39c,%ecx
		mov    %al,0x418(%esp)
		mov    0xc(%esp),%eax
		sub    $0xff,%ebx
		mov    %eax,0xd4(%esp)
		mov    $0x1e,%al
		mov    %ebx,0x214(%esp)
		mov    %al,0x4f4(%esp)
		xor    %ah,%ah
		add    %esi,%edx
		mov    %ah,0x324(%esp)
		mov    0x5dc(%esp),%al
		sub    $0xff,%edx
		mov    %al,0x4fc(%esp)
		mov    0x5b4(%esp),%al
		mov    %edx,0x210(%esp)
		mov    %al,0x330(%esp)
		xor    %eax,%eax
		mov    $0xff,%dl
		mov    data_1e08b8,%ax
		mov    %dl,0x4f8(%esp)
		test   %eax,%eax
		jne    jump_da738
		xor    %eax,%eax
		jmp    jump_da75e
	jump_da738:
		xor    %edx,%edx
		mov    %ax,%dx
		mov    %eax,%ebx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    data_1de0ca(,%eax,4),%ax
		mov    %ax,data_1e08b8
		mov    %ebx,%eax
		incl   data_1e08bc
	jump_da75e:
		mov    %eax,0x288(%esp)
		test   %ax,%ax
		je     jump_da841
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0x210(%esp),%eax
		mov    %ax,0xa(%edx)
		mov    0x214(%esp),%eax
		mov    %ax,0xe(%edx)
		mov    0xd4(%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0x678(%esp),%al
		mov    %al,(%edx)
		mov    0x4f4(%esp),%al
		mov    %al,0x4(%edx)
		mov    0x324(%esp),%al
		mov    %al,0x5(%edx)
		mov    0x4f8(%esp),%al
		mov    nstart_ani,%ebx
		mov    %al,0x6(%edx)
		mov    (%ebx,%ecx,2),%ax
	jump_da7d8:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_da7f8
		xor    %eax,%eax
		mov    frame,%ebx
		mov    0x8(%edx),%ax
		mov    0x6(%ebx,%eax,8),%ax
		jmp    jump_da7d8
	jump_da7f8:
		mov    0x4fc(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x330(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x418(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0xd0(%esp),%eax
		mov    0x2c(%eax),%ax
		mov    %ax,0x12(%edx)
		mov    0xd0(%esp),%eax
		mov    0x288(%esp),%edx
		mov    %dx,0x2c(%eax)
	jump_da841:
		call   ac_LbRandomAnyShort
		mov    $0x35,%bl
		and    $0x3,%al
		sub    %al,%bl
		call   ac_LbRandomAnyShort
		mov    %al,%bh
		call   ac_LbRandomAnyShort
		and    $0xf,%bh
		and    $0x1,%ah
		add    $0x35,%bh
		and    $0xffff,%eax
		add    %eax,%ebp
		call   ac_LbRandomAnyShort
		and    $0x1,%ah
		mov    $0x9,%cl
		and    $0xffff,%eax
		sub    $0xff,%ebp
		mov    %bh,0x3e4(%esp)
		mov    %bl,0x528(%esp)
		lea    (%esi,%eax,1),%edx
		call   ac_LbRandomAnyShort
		and    $0x3f,%al
		mov    %cl,0x514(%esp)
		add    $0x32,%al
		mov    $0x39c,%esi
		mov    %al,0x518(%esp)
		mov    0xc(%esp),%eax
		sub    $0xff,%edx
		mov    %eax,0x1f0(%esp)
		mov    $0x1e,%al
		mov    %ebp,%ecx
		mov    %al,0x524(%esp)
		xor    %ah,%ah
		mov    %edx,0x1a8(%esp)
		mov    %ah,0x36c(%esp)
		xor    %eax,%eax
		mov    $0xff,%dl
		mov    data_1e08b8,%ax
		mov    %dl,0x3e0(%esp)
		test   %eax,%eax
		jne    jump_da8ef
		xor    %eax,%eax
		jmp    jump_da91c
	jump_da8ef:
		xor    %edx,%edx
		mov    %ax,%dx
		mov    %eax,%ebx
		lea    0x0(,%edx,4),%eax
		mov    data_1e08bc,%ebp
		add    %edx,%eax
		inc    %ebp
		mov    data_1de0ca(,%eax,4),%ax
		mov    %ebp,data_1e08bc
		mov    %ax,data_1e08b8
		mov    %ebx,%eax
	jump_da91c:
		mov    %eax,0x270(%esp)
		test   %ax,%ax
		je     jump_d8c63
		xor    %edx,%edx
		mov    %ax,%dx
		lea    0x0(,%edx,4),%eax
		add    %edx,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		shl    $0x2,%eax
		add    %eax,%edx
		mov    0x1a8(%esp),%eax
		mov    %cx,0xe(%edx)
		mov    %ax,0xa(%edx)
		mov    0x1f0(%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0x514(%esp),%al
		mov    %al,(%edx)
		mov    0x524(%esp),%al
		mov    %al,0x4(%edx)
		mov    0x36c(%esp),%al
		mov    %al,0x5(%edx)
		mov    0x3e0(%esp),%al
		mov    nstart_ani,%ebx
		mov    %al,0x6(%edx)
		mov    (%ebx,%esi,2),%ax
	jump_da98f:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_da9af
		xor    %eax,%eax
		mov    frame,%ebx
		mov    0x8(%edx),%ax
		mov    0x6(%ebx,%eax,8),%ax
		jmp    jump_da98f
	jump_da9af:
		mov    0x3e4(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x528(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x518(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0x2c(%edi),%ax
		mov    %ax,0x12(%edx)
		mov    0x270(%esp),%eax
		mov    %ax,0x2c(%edi)
		jmp    jump_d8c63
	jump_da9ef:
		mov    %eax,%edx
		shl    $0x4,%eax
		push   $0x1
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(sthings),%edi
		shl    $0x2,%eax
		push   $0xffffffff
		add    %eax,%edi
		mov    $0x40,%ecx
		push   $0x64
		movb   $0x34,0x9(%edi)
		mov    $0x10,%edx
		movw   $0x0,0x2c(%edi)
		mov    0x18(%esp),%eax
		mov    %ebx,0x20(%edi)
		mov    $0x7f,%ebx
		mov    %eax,0x1c(%edi)
		mov    %edi,%eax
		mov    %esi,0x18(%edi)
		call   ac_play_dist_ssample
		mov    0x5f0(%esp),%al
		sar    $0x8,%ebp
		dec    %al
		sar    $0x8,%esi
		cmp    $0x4,%al
		ja     jump_d8c63
		and    $0xff,%eax
		jmp    *%cs:vtable_d6724(,%eax,4)

vtable_daa58:
		.long   func_dad7c
		.long   func_dacdf
		.long   func_dacdf
		.long   func_dad8c
		.long   func_dad7c
		.long   func_db265
		.long   func_db444
		.long   func_db60d
		.long   func_db7e3
		.long   func_db9b9
		.long   func_db9b9
		.long   func_db9b9
		.long   func_db9b9
		.long   func_db9b9
		.long   func_dbb7c
		.long   func_dbb7c
		.long   func_dbb7c
		.long   func_dbb7c
		.long   func_dbb7c
		.long   func_dad7c
		.long   func_dc131
		.long   func_dc2d7
		.long   func_dc498
		.long   func_dad7c


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_FIRE_process_flame)	/* 0x0DAAB8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x23c,%esp
		mov    %eax,0x14(%esp)
		mov    0x18(%eax),%eax
		sar    $0x8,%eax
		mov    %eax,0x20(%esp)
		mov    0x14(%esp),%eax
		mov    0x1c(%eax),%eax
		mov    %eax,0x24(%esp)
		mov    0x14(%esp),%eax
		mov    0x20(%eax),%eax
		sar    $0x8,%eax
		mov    %eax,0x28(%esp)
		call   ac_LbRandomAnyShort
		add    $0x10,%eax
		xor    %ah,%ah
		xor    %ebx,%ebx
		and    $0xf,%al
		mov    0x26(%esp),%edx
		mov    %ax,%bx
		mov    0x1e(%esp),%eax
		sar    $0x10,%edx
		sar    $0x10,%eax
		call   ac_apply_super_quick_light
		mov    0x28(%esp),%eax
		mov    0x20(%esp),%edx
		sar    $0x8,%eax
		sar    $0x8,%edx
		shl    $0x7,%eax
		add    %eax,%edx
		lea    0x0(,%edx,8),%eax
		add    %eax,%edx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %edx,%edx
		mov    0x6(%edx,%eax,1),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		je     jump_dabda
	jump_dab43:
		jle    jump_dabab
		imul   $0xa8,%eax,%eax
		mov    things,%ebx
		add    %eax,%ebx
		xor    %eax,%eax
		mov    0x9(%ebx),%al
		cmp    $0x3,%eax
		jne    jump_daba7
		testb  $0x2,0xc(%ebx)
		jne    jump_daba7
		mov    0x38(%ebx),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jl     jump_daba7
		mov    0x70(%ebx),%ax
		shl    $0x7,%eax
		shr    $0xd,%ax
		and    $0xffff,%eax
		mov    $0x20,%edx
		shl    $0x4,%eax
		sub    %eax,%edx
		mov    %edx,%eax
		test   %edx,%edx
		jle    jump_daba7
		sub    %ax,0x3a(%ebx)
		mov    0x38(%ebx),%eax
		sar    $0x10,%eax
		test   %eax,%eax
		jge    jump_daba7
		mov    $0x12,%edx
		mov    %ebx,%eax
		call   ac_set_person_dead
	jump_daba7:
		mov    (%ebx),%eax
		jmp    jump_dabcf
	jump_dabab:
		imul   $0x3c,%eax,%eax
		mov    EXPORT_SYMBOL(sthings),%edx
		add    %eax,%edx
		xor    %eax,%eax
		mov    0x9(%edx),%al
		cmp    $0x5,%eax
		jne    jump_dabcd
		testb  $0x2,0xc(%edx)
		jne    jump_dabcd
		mov    %edx,%eax
		call   ac_set_static_on_fire
	jump_dabcd:
		mov    (%edx),%eax
	jump_dabcf:
		sar    $0x10,%eax
		test   %eax,%eax
		jne    jump_dab43
	jump_dabda:
		mov    0x28(%esp),%eax
		mov    0x20(%esp),%edx
		sar    $0x8,%eax
		sar    $0x8,%edx
		shl    $0x7,%eax
		add    %eax,%edx
		lea    0x0(,%edx,8),%eax
		add    %eax,%edx
		mov    EXPORT_SYMBOL(game_my_big_map),%eax
		add    %edx,%edx
		xor    %edi,%edi
		mov    0xa(%edx,%eax,1),%di
		test   %edi,%edi
		je     jump_dacc2
	jump_dac0c:
		imul   $0x6,%edi,%eax
		mov    game_col_vects_list,%edx
		add    %edx,%eax
		xor    %edi,%edi
		mov    0x2(%eax),%edx
		mov    0x2(%eax),%di
		sar    $0x10,%edx
		and    $0x7fff,%di
		test   %edx,%edx
		jge    jump_dacba
		call   ac_LbRandomAnyShort
		test   $0x7,%al
		jne    jump_dacba
		neg    %edx
		imul   $0xa8,%edx,%edx
		mov    things,%esi
		add    %edx,%esi
		cmpb   $0x0,0x8(%esi)
		je     jump_dacb3
		mov    0x14(%esp),%ebx
		mov    0x14(%esp),%edx
		mov    0x14(%esp),%eax
		mov    $0xf,%ecx
		mov    0x20(%ebx),%ebx
		mov    0x1c(%edx),%edx
		mov    0x18(%eax),%eax
		call   ac_bang_new4
		xor    %eax,%eax
		mov    0x3c(%esi),%ax
		imul   $0xa8,%eax,%edx
		mov    0x14(%esp),%ebx
		mov    $0x400,%ecx
		mov    things,%eax
		mov    0x20(%ebx),%ebx
		add    %edx,%eax
		sar    $0x8,%ebx
		push   %eax
		mov    0x18(%esp),%edx
		mov    0x18(%esp),%eax
		push   $0x3e8
		mov    0x1c(%edx),%edx
		mov    0x18(%eax),%eax
		sar    $0x8,%edx
		sar    $0x8,%eax
		call   do_shockwave
	jump_dacb3:
		mov    %esi,%eax
		call   snap_razor_wire
	jump_dacba:
		test   %edi,%edi
		jne    jump_dac0c
	jump_dacc2:
		mov    0x14(%esp),%edx
		mov    0x14(%esp),%eax
		add    $0x2c,%edx
		mov    0x2c(%eax),%ax
		mov    %edx,0x18(%esp)
		test   %ax,%ax
		jne    jump_dacef
		jmp    jump_dc68b


func_dacdf:
		mov    0xa0(%esp),%eax
		test   %ax,%ax
		je     jump_dc68b
	jump_dacef:
		xor    %edx,%edx
		mov    %ax,%dx
		imul   $0x14,%edx,%edx
		mov    $EXPORT_SYMBOL(FIRE_flame),%ecx
		add    %edx,%ecx
		mov    0x12(%ecx),%bx
		mov    %ebx,0xa0(%esp)
		mov    0x7(%ecx),%bl
		dec    %bl
		mov    %bl,0x7(%ecx)
		je     jump_dc65e
		mov    0x2(%ecx),%edx
		mov    0x1(%ecx),%eax
		sar    $0x18,%edx
		sar    $0x18,%eax
		sar    $0x3,%edx
		add    %edx,%eax
		mov    %al,0x4(%ecx)
		testb  $0x3,gameturn
		jne    jump_dad3a
		mov    0x6(%ecx),%al
		add    %al,0x5(%ecx)
	jump_dad3a:
		mov    0x2(%ecx),%al
		sub    %al,0x3(%ecx)
		mov    (%ecx),%eax
		sar    $0x18,%eax
		test   %eax,%eax
		jg     jump_dad62
		xor    %eax,%eax
		mov    frame,%edx
		mov    0x8(%ecx),%ax
		movb   $0x64,0x3(%ecx)
		mov    0x6(%edx,%eax,8),%ax
		mov    %ax,0x8(%ecx)
	jump_dad62:
		mov    0x1(%ecx),%dh
		dec    %dh
		mov    %dh,0x1(%ecx)
		je     jump_dc645
	jump_dad70:
		add    $0x12,%ecx
		mov    %ecx,0x18(%esp)
		jmp    func_dacdf


func_dad7c:
		add    $0x12,%ecx
		movb   $0x7f,-0x11(%ecx)
		mov    %ecx,0x18(%esp)
		jmp    func_dacdf


func_dad8c:
		call   ac_LbRandomAnyShort
		test   $0x1,%al
		jne    jump_db255
		call   ac_LbRandomAnyShort
		mov    0x28(%esp),%ebx
		mov    0x20(%esp),%edi
		mov    $0x39b,%ebp
		mov    %al,%dl
		call   ac_LbRandomAnyShort
		xor    %esi,%esi
		and    $0xf,%dl
		xor    %ah,%ah
		add    $0x21,%dl
		mov    %ax,%si
		call   ac_LbRandomAnyShort
		mov    $0x1e,%dh
		add    %ebx,%esi
		xor    %ah,%ah
		sub    $0x7f,%esi
		xor    %ebx,%ebx
		mov    %dh,0x114(%esp)
		mov    %ax,%bx
		call   ac_LbRandomAnyShort
		and    $0x3f,%al
		mov    %dl,0x1d0(%esp)
		add    $0x32,%al
		mov    $0x64,%dl
		mov    $0x5,%ah
		mov    %esi,0x38(%esp)
		mov    %ah,0x144(%esp)
		mov    %al,0x1b8(%esp)
		mov    0x24(%esp),%eax
		mov    %dl,0xe0(%esp)
		mov    %eax,0x34(%esp)
		xor    %al,%al
		add    %edi,%ebx
		mov    %al,0x1c8(%esp)
		mov    $0xff,%ah
		lea    -0x7f(%ebx),%edi
		mov    %ah,0x1cc(%esp)
		xor    %eax,%eax
		mov    0x14(%esp),%ebx
		mov    data_1e08b8,%ax
		mov    %edi,0x30(%esp)
		test   %eax,%eax
		jne    jump_dae3d
		xor    %eax,%eax
		jmp    jump_dae59
	jump_dae3d:
		xor    %edx,%edx
		mov    %ax,%dx
		imul   $0x14,%edx,%edx
		mov    data_1de0ca(%edx),%dx
		mov    %dx,data_1e08b8
		incl   data_1e08bc
	jump_dae59:
		mov    %eax,%edi
		test   %ax,%ax
		je     jump_daf1b
		and    $0xffff,%eax
		imul   $0x14,%eax,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%esi
		add    %eax,%esi
		mov    0x30(%esp),%eax
		mov    %ax,0xa(%esi)
		mov    0x38(%esp),%eax
		mov    %ax,0xe(%esi)
		mov    0x34(%esp),%eax
		mov    %ax,0xc(%esi)
		mov    0x144(%esp),%al
		mov    %al,(%esi)
		mov    0x114(%esp),%al
		mov    %al,0x4(%esi)
		mov    0x1c8(%esp),%al
		mov    %al,0x5(%esi)
		mov    0x1cc(%esp),%al
		mov    nstart_ani,%edx
		mov    %al,0x6(%esi)
		mov    (%edx,%ebp,2),%ax
	jump_daebc:
		mov    %ax,0x8(%esi)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_daee2
		xor    %eax,%eax
		mov    0x8(%esi),%ax
		lea    0x0(,%eax,8),%edx
		mov    frame,%eax
		mov    0x6(%edx,%eax,1),%ax
		jmp    jump_daebc
	jump_daee2:
		mov    0x1d0(%esp),%al
		mov    %al,0x7(%esi)
		mov    0xe0(%esp),%al
		mov    %al,0x1(%esi)
		mov    0x1b8(%esp),%al
		mov    %al,0x2(%esi)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%esi)
		mov    0x2c(%ebx),%ax
		mov    %ax,0x12(%esi)
		lea    0x12(%esi),%eax
		mov    %di,0x2c(%ebx)
		jmp    jump_daf1d
	jump_daf1b:
		xor    %eax,%eax
	jump_daf1d:
		mov    %eax,%esi
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		add    $0x21,%al
		mov    %al,0x20c(%esp)
		call   ac_LbRandomAnyShort
		and    $0x1,%ah
		mov    0x28(%esp),%ebx
		and    $0xffff,%eax
		add    %eax,%ebx
		call   ac_LbRandomAnyShort
		and    $0x1,%ah
		mov    0x20(%esp),%edx
		and    $0xffff,%eax
		add    %eax,%edx
		call   ac_LbRandomAnyShort
		and    $0x3f,%al
		mov    0x14(%esp),%edi
		add    $0x32,%al
		mov    $0x39c,%ebp
		mov    $0x5,%ah
		sub    $0xff,%ebx
		mov    %ah,0x1f0(%esp)
		mov    %al,0x148(%esp)
		mov    0x24(%esp),%eax
		sub    $0xff,%edx
		mov    %eax,0x48(%esp)
		mov    $0xff,%al
		mov    %edx,0x10(%esp)
		mov    %al,0x200(%esp)
		mov    0x20c(%esp),%al
		mov    $0x1e,%dl
		mov    %al,0x204(%esp)
		mov    $0x64,%ah
		mov    %dl,0x1f8(%esp)
		mov    %ah,0x208(%esp)
		xor    %eax,%eax
		xor    %dh,%dh
		mov    data_1e08b8,%ax
		mov    %dh,0x1fc(%esp)
		test   %eax,%eax
		jne    jump_dafd1
		xor    %eax,%eax
		jmp    jump_dafed
	jump_dafd1:
		xor    %edx,%edx
		mov    %ax,%dx
		imul   $0x14,%edx,%edx
		mov    data_1de0ca(%edx),%dx
		mov    %dx,data_1e08b8
		incl   data_1e08bc
	jump_dafed:
		mov    %eax,0xbc(%esp)
		test   %ax,%ax
		je     jump_db0ac
		and    $0xffff,%eax
		imul   $0x14,%eax,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		add    %eax,%edx
		mov    0x10(%esp),%eax
		mov    %bx,0xe(%edx)
		mov    %ax,0xa(%edx)
		mov    0x48(%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0x1f0(%esp),%al
		mov    %al,(%edx)
		mov    0x1f8(%esp),%al
		mov    %al,0x4(%edx)
		mov    0x1fc(%esp),%al
		mov    %al,0x5(%edx)
		mov    0x200(%esp),%al
		mov    nstart_ani,%ebx
		mov    %al,0x6(%edx)
		mov    (%ebx,%ebp,2),%ax
	jump_db051:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_db071
		xor    %eax,%eax
		mov    frame,%ebx
		mov    0x8(%edx),%ax
		mov    0x6(%ebx,%eax,8),%ax
		jmp    jump_db051
	jump_db071:
		mov    0x204(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x208(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x148(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0x2c(%edi),%ax
		mov    %ax,0x12(%edx)
		mov    0xbc(%esp),%eax
		mov    %ax,0x2c(%edi)
	jump_db0ac:
		call   ac_LbRandomAnyShort
		mov    0x28(%esp),%edi
		mov    0x20(%esp),%ebp
		mov    %al,%bh
		call   ac_LbRandomAnyShort
		xor    %edx,%edx
		and    $0x1,%ah
		and    $0xf,%bh
		mov    %ax,%dx
		call   ac_LbRandomAnyShort
		and    $0x1,%ah
		add    %edi,%edx
		xor    %edi,%edi
		add    $0x21,%bh
		mov    %ax,%di
		call   ac_LbRandomAnyShort
		mov    %al,%bl
		add    %ebp,%edi
		and    $0x3f,%bl
		lea    -0xff(%edi),%ebp
		lea    -0xff(%edx),%eax
		mov    0x14(%esp),%edi
		mov    $0x5,%dl
		add    $0x32,%bl
		mov    %ebp,0x50(%esp)
		mov    %eax,0x58(%esp)
		mov    %dl,0x22c(%esp)
		mov    %bl,0x230(%esp)
		xor    %eax,%eax
		mov    $0x39c,%edx
		mov    data_1e08b8,%ax
		xor    %bl,%bl
		mov    %edx,0x4c(%esp)
		mov    %bl,0x238(%esp)
		mov    0x24(%esp),%edx
		mov    $0xff,%bl
		mov    %edx,0x54(%esp)
		mov    %bh,0x154(%esp)
		mov    $0x1e,%dh
		mov    $0x64,%bh
		mov    %dh,0x234(%esp)
		mov    %bh,0x158(%esp)
		test   %eax,%eax
		jne    jump_db159
		xor    %eax,%eax
		jmp    jump_db17c
	jump_db159:
		xor    %edx,%edx
		mov    %ax,%dx
		imul   $0x14,%edx,%edx
		mov    data_1e08bc,%ebp
		inc    %ebp
		mov    data_1de0ca(%edx),%dx
		mov    %ebp,data_1e08bc
		mov    %dx,data_1e08b8
	jump_db17c:
		mov    %eax,0xcc(%esp)
		test   %ax,%ax
		je     jump_db241
		and    $0xffff,%eax
		imul   $0x14,%eax,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		add    %eax,%edx
		mov    0x50(%esp),%eax
		mov    %bl,0x6(%edx)
		mov    %ax,0xa(%edx)
		mov    0x58(%esp),%eax
		mov    %ax,0xe(%edx)
		mov    0x54(%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0x22c(%esp),%al
		mov    %al,(%edx)
		mov    0x234(%esp),%al
		mov    %al,0x4(%edx)
		mov    0x238(%esp),%al
		mov    0x4c(%esp),%ebx
		mov    %al,0x5(%edx)
		mov    nstart_ani,%eax
		mov    (%eax,%ebx,2),%ax
	jump_db1e0:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_db206
		xor    %eax,%eax
		mov    0x8(%edx),%ax
		lea    0x0(,%eax,8),%ebx
		mov    frame,%eax
		mov    0x6(%ebx,%eax,1),%ax
		jmp    jump_db1e0
	jump_db206:
		mov    0x154(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x158(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x230(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0x2c(%edi),%ax
		mov    %ax,0x12(%edx)
		mov    0xcc(%esp),%eax
		mov    %ax,0x2c(%edi)
	jump_db241:
		cmpl   $data_1e08b8,0x18(%esp)
		jne    jump_db255
		test   %esi,%esi
		je     jump_db255
		mov    %esi,0x18(%esp)
		jmp    jump_db25c
	jump_db255:
		lea    0x12(%ecx),%eax
		mov    %eax,0x18(%esp)
	jump_db25c:
		movb   $0x7f,0x1(%ecx)
		jmp    func_dacdf


func_db265:
		call   ac_LbRandomAnyShort
		and    $0x3,%al
		mov    $0x2b,%ah
		mov    0x28(%esp),%ebx
		sub    %al,%ah
		mov    0x26(%esp),%edx
		mov    %ah,0x210(%esp)
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		mov    0x20(%esp),%ebp
		add    $0x2b,%al
		xor    %esi,%esi
		mov    %al,0x20c(%esp)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		xor    %edi,%edi
		and    $0x3f,%al
		sar    $0x10,%edx
		mov    %ax,%si
		mov    0x1e(%esp),%eax
		add    %ebx,%esi
		sar    $0x10,%eax
		mov    0x14(%esp),%ebx
		call   ac_alt_at_point
		sub    $0x1f,%esi
		mov    %eax,%edx
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		mov    %esi,0x8(%esp)
		and    $0x3f,%al
		sar    $0x5,%edx
		mov    %ax,%di
		call   ac_LbRandomAnyShort
		and    $0x3f,%al
		mov    %edx,0x64(%esp)
		add    $0x32,%al
		mov    $0x64,%dl
		mov    $0x6,%ah
		mov    %dl,0xe4(%esp)
		mov    %ah,0x134(%esp)
		mov    %al,0x138(%esp)
		mov    $0xff,%al
		add    %ebp,%edi
		mov    %al,0x140(%esp)
		mov    0x20c(%esp),%al
		mov    $0x39b,%ebp
		mov    %al,0x100(%esp)
		mov    0x210(%esp),%al
		sub    $0x1f,%edi
		mov    %al,0x104(%esp)
		xor    %eax,%eax
		xor    %dh,%dh
		mov    data_1e08b8,%ax
		mov    %dh,0x13c(%esp)
		test   %eax,%eax
		jne    jump_db33e
		xor    %eax,%eax
		jmp    jump_db35a
	jump_db33e:
		xor    %edx,%edx
		mov    %ax,%dx
		imul   $0x14,%edx,%edx
		mov    data_1de0ca(%edx),%dx
		mov    %dx,data_1e08b8
		incl   data_1e08bc
	jump_db35a:
		mov    %eax,0xa4(%esp)
		test   %ax,%ax
		je     jump_db423
		xor    %esi,%esi
		mov    %ax,%si
		imul   $0x14,%esi,%esi
		add    $EXPORT_SYMBOL(FIRE_flame),%esi
		mov    0x8(%esp),%eax
		mov    %di,0xa(%esi)
		mov    %ax,0xe(%esi)
		mov    0x64(%esp),%eax
		mov    %ax,0xc(%esi)
		mov    0x134(%esp),%al
		mov    %al,(%esi)
		mov    0xe4(%esp),%al
		mov    %al,0x4(%esi)
		mov    0x13c(%esp),%al
		mov    %al,0x5(%esi)
		mov    0x140(%esp),%al
		mov    nstart_ani,%edx
		mov    %al,0x6(%esi)
		mov    (%edx,%ebp,2),%ax
	jump_db3bd:
		mov    %ax,0x8(%esi)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_db3e3
		xor    %eax,%eax
		mov    0x8(%esi),%ax
		lea    0x0(,%eax,8),%edx
		mov    frame,%eax
		mov    0x6(%edx,%eax,1),%ax
		jmp    jump_db3bd
	jump_db3e3:
		mov    0x100(%esp),%al
		mov    %al,0x7(%esi)
		mov    0x104(%esp),%al
		mov    %al,0x1(%esi)
		mov    0x138(%esp),%al
		mov    %al,0x2(%esi)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%esi)
		mov    0x2c(%ebx),%ax
		mov    %ax,0x12(%esi)
		mov    0xa4(%esp),%eax
		mov    %ax,0x2c(%ebx)
		lea    0x12(%esi),%eax
		jmp    jump_db425
	jump_db423:
		xor    %eax,%eax
	jump_db425:
		cmpl   $data_1e08b8,0x18(%esp)
		jne    jump_dad70
		test   %eax,%eax
		je     jump_dad70
		mov    %eax,0x18(%esp)
		jmp    func_dacdf


func_db444:
		call   ac_LbRandomAnyShort
		and    $0x3,%al
		mov    $0x2b,%ah
		mov    0x28(%esp),%esi
		sub    %al,%ah
		mov    0x26(%esp),%edx
		mov    %ah,0x210(%esp)
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		mov    0x20(%esp),%ebp
		add    $0x2b,%al
		xor    %ebx,%ebx
		mov    %al,0x20c(%esp)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		sar    $0x10,%edx
		mov    %ax,%bx
		mov    0x1e(%esp),%eax
		add    %esi,%ebx
		sar    $0x10,%eax
		mov    0x14(%esp),%esi
		call   ac_alt_at_point
		sub    $0x7f,%ebx
		mov    %eax,%edi
		call   ac_LbRandomAnyShort
		xor    %edx,%edx
		xor    %ah,%ah
		sar    $0x5,%edi
		mov    %ax,%dx
		call   ac_LbRandomAnyShort
		mov    %edi,0x44(%esp)
		and    $0x3f,%al
		add    %ebp,%edx
		add    $0x32,%al
		mov    $0x39b,%ebp
		mov    $0x7,%ah
		sub    $0x7f,%edx
		mov    %ah,0x164(%esp)
		mov    %al,0x10c(%esp)
		mov    $0xff,%al
		mov    %edx,0x5c(%esp)
		mov    %al,0xdc(%esp)
		mov    0x20c(%esp),%al
		mov    $0x1e,%dl
		mov    %al,0x1f4(%esp)
		mov    0x210(%esp),%al
		mov    %dl,0x168(%esp)
		mov    %al,0x12c(%esp)
		xor    %eax,%eax
		xor    %dh,%dh
		mov    data_1e08b8,%ax
		mov    %dh,0xf4(%esp)
		test   %eax,%eax
		jne    jump_db519
		xor    %eax,%eax
		jmp    jump_db535
	jump_db519:
		xor    %edx,%edx
		mov    %ax,%dx
		imul   $0x14,%edx,%edx
		mov    data_1de0ca(%edx),%dx
		mov    %dx,data_1e08b8
		incl   data_1e08bc
	jump_db535:
		mov    %eax,%edi
		test   %ax,%ax
		je     jump_db5ec
		xor    %edx,%edx
		mov    %ax,%dx
		imul   $0x14,%edx,%edx
		add    $EXPORT_SYMBOL(FIRE_flame),%edx
		mov    0x5c(%esp),%eax
		mov    %ax,0xa(%edx)
		mov    %bx,0xe(%edx)
		mov    0x44(%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0x164(%esp),%al
		mov    %al,(%edx)
		mov    0x168(%esp),%al
		mov    %al,0x4(%edx)
		mov    0xf4(%esp),%al
		mov    %al,0x5(%edx)
		mov    0xdc(%esp),%al
		mov    nstart_ani,%ebx
		mov    %al,0x6(%edx)
		mov    (%ebx,%ebp,2),%ax
	jump_db593:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_db5b3
		xor    %eax,%eax
		mov    frame,%ebx
		mov    0x8(%edx),%ax
		mov    0x6(%ebx,%eax,8),%ax
		jmp    jump_db593
	jump_db5b3:
		mov    0x1f4(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x12c(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x10c(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0x2c(%esi),%ax
		mov    %ax,0x12(%edx)
		lea    0x12(%edx),%eax
		mov    %di,0x2c(%esi)
		jmp    jump_db5ee
	jump_db5ec:
		xor    %eax,%eax
	jump_db5ee:
		cmpl   $data_1e08b8,0x18(%esp)
		jne    jump_dad70
		test   %eax,%eax
		je     jump_dad70
		mov    %eax,0x18(%esp)
		jmp    func_dacdf


func_db60d:
		call   ac_LbRandomAnyShort
		mov    $0x35,%bh
		mov    0x28(%esp),%edi
		mov    0x26(%esp),%edx
		mov    0x20(%esp),%ebp
		and    $0x3,%al
		xor    %esi,%esi
		sub    %al,%bh
		call   ac_LbRandomAnyShort
		sar    $0x10,%edx
		mov    %al,%bl
		call   ac_LbRandomAnyShort
		and    $0xf,%bl
		xor    %ah,%ah
		add    $0x35,%bl
		mov    %ax,%si
		mov    0x1e(%esp),%eax
		mov    %bl,0x1d4(%esp)
		sar    $0x10,%eax
		add    %edi,%esi
		call   ac_alt_at_point
		sar    $0x5,%eax
		xor    %edi,%edi
		mov    %eax,0x70(%esp)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		mov    %bh,0x108(%esp)
		mov    %ax,%di
		call   ac_LbRandomAnyShort
		mov    %al,%dl
		add    %ebp,%edi
		mov    $0x39c,%ebp
		and    $0x3f,%dl
		lea    -0x7f(%esi),%eax
		sub    $0x7f,%edi
		mov    0x14(%esp),%esi
		add    $0x32,%dl
		mov    %edi,0x8c(%esp)
		mov    $0x8,%dh
		mov    %eax,%edi
		mov    $0x64,%al
		mov    %dh,0xf8(%esp)
		mov    %dl,0x180(%esp)
		mov    0x70(%esp),%edx
		mov    %al,0x184(%esp)
		xor    %ah,%ah
		mov    %edx,0x90(%esp)
		mov    %ah,0x188(%esp)
		xor    %eax,%eax
		mov    $0xff,%dl
		mov    data_1e08b8,%ax
		mov    %dl,0x18c(%esp)
		test   %eax,%eax
		jne    jump_db6dc
		xor    %eax,%eax
		jmp    jump_db6f8
	jump_db6dc:
		xor    %edx,%edx
		mov    %ax,%dx
		imul   $0x14,%edx,%edx
		mov    data_1de0ca(%edx),%dx
		mov    %dx,data_1e08b8
		incl   data_1e08bc
	jump_db6f8:
		mov    %eax,0xc0(%esp)
		test   %ax,%ax
		je     jump_db7c2
		and    $0xffff,%eax
		imul   $0x14,%eax,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		add    %eax,%edx
		mov    0x8c(%esp),%eax
		mov    %di,0xe(%edx)
		mov    %ax,0xa(%edx)
		mov    0x90(%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0xf8(%esp),%al
		mov    %al,(%edx)
		mov    0x184(%esp),%al
		mov    %al,0x4(%edx)
		mov    0x188(%esp),%al
		mov    %al,0x5(%edx)
		mov    0x18c(%esp),%al
		mov    nstart_ani,%ebx
		mov    %al,0x6(%edx)
		mov    (%ebx,%ebp,2),%ax
	jump_db762:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_db782
		xor    %eax,%eax
		mov    frame,%ebx
		mov    0x8(%edx),%ax
		mov    0x6(%ebx,%eax,8),%ax
		jmp    jump_db762
	jump_db782:
		mov    0x1d4(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x108(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x180(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0x2c(%esi),%ax
		mov    %ax,0x12(%edx)
		mov    0xc0(%esp),%eax
		mov    %ax,0x2c(%esi)
		lea    0x12(%edx),%eax
		jmp    jump_db7c4
	jump_db7c2:
		xor    %eax,%eax
	jump_db7c4:
		cmpl   $data_1e08b8,0x18(%esp)
		jne    jump_dad70
		test   %eax,%eax
		je     jump_dad70
		mov    %eax,0x18(%esp)
		jmp    func_dacdf


func_db7e3:
		call   ac_LbRandomAnyShort
		mov    0x26(%esp),%edx
		mov    0x20(%esp),%ebp
		and    $0x3,%al
		xor    %esi,%esi
		mov    $0x35,%ah
		xor    %edi,%edi
		sub    %al,%ah
		sar    $0x10,%edx
		mov    %ah,0x210(%esp)
		call   ac_LbRandomAnyShort
		mov    %al,%bl
		call   ac_LbRandomAnyShort
		and    $0x1,%ah
		and    $0xf,%bl
		mov    %ax,%si
		mov    0x28(%esp),%eax
		add    $0x35,%bl
		add    %eax,%esi
		mov    0x1e(%esp),%eax
		mov    $0x9,%bh
		sar    $0x10,%eax
		mov    %bh,0x198(%esp)
		call   ac_alt_at_point
		mov    %eax,%edx
		call   ac_LbRandomAnyShort
		and    $0x1,%ah
		sar    $0x5,%edx
		mov    %ax,%di
		call   ac_LbRandomAnyShort
		mov    %edx,0x68(%esp)
		and    $0x3f,%al
		add    %ebp,%edi
		mov    $0x39c,%ebp
		add    $0x32,%al
		sub    $0xff,%edi
		mov    %al,0x20c(%esp)
		lea    -0xff(%esi),%eax
		mov    %edi,0x94(%esp)
		mov    %eax,0x7c(%esp)
		mov    $0x1e,%al
		mov    0x20c(%esp),%bh
		mov    %al,0x1a0(%esp)
		xor    %ah,%ah
		mov    0x14(%esp),%esi
		mov    %ah,0x1a4(%esp)
		mov    0x210(%esp),%al
		mov    %bh,0x19c(%esp)
		mov    %al,0x1ac(%esp)
		xor    %eax,%eax
		mov    $0xff,%bh
		mov    data_1e08b8,%ax
		mov    %bl,0x1a8(%esp)
		test   %eax,%eax
		jne    jump_db8c4
		xor    %eax,%eax
		jmp    jump_db8e0
	jump_db8c4:
		xor    %edx,%edx
		mov    %ax,%dx
		imul   $0x14,%edx,%edx
		mov    data_1de0ca(%edx),%dx
		mov    %dx,data_1e08b8
		incl   data_1e08bc
	jump_db8e0:
		mov    %eax,%edi
		test   %ax,%ax
		je     jump_db998
		and    $0xffff,%eax
		imul   $0x14,%eax,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		add    %eax,%edx
		mov    0x94(%esp),%eax
		mov    %bh,0x6(%edx)
		mov    %ax,0xa(%edx)
		mov    0x7c(%esp),%eax
		mov    %ax,0xe(%edx)
		mov    0x68(%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0x198(%esp),%al
		mov    %al,(%edx)
		mov    0x1a0(%esp),%al
		mov    %al,0x4(%edx)
		mov    0x1a4(%esp),%al
		mov    nstart_ani,%ebx
		mov    %al,0x5(%edx)
		mov    (%ebx,%ebp,2),%ax
	jump_db93f:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_db95f
		xor    %eax,%eax
		mov    frame,%ebx
		mov    0x8(%edx),%ax
		mov    0x6(%ebx,%eax,8),%ax
		jmp    jump_db93f
	jump_db95f:
		mov    0x1a8(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x1ac(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x19c(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0x2c(%esi),%ax
		mov    %ax,0x12(%edx)
		lea    0x12(%edx),%eax
		mov    %di,0x2c(%esi)
		jmp    jump_db99a
	jump_db998:
		xor    %eax,%eax
	jump_db99a:
		cmpl   $data_1e08b8,0x18(%esp)
		jne    jump_dad70
		test   %eax,%eax
		je     jump_dad70
		mov    %eax,0x18(%esp)
		jmp    func_dacdf


func_db9b9:
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		add    $0x35,%al
		mov    %al,0x20c(%esp)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		xor    %ebx,%ebx
		and    $0x3f,%al
		mov    0x28(%esp),%esi
		mov    %ax,%bx
		add    %esi,%ebx
		mov    0xa(%ecx),%esi
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		sar    $0x10,%esi
		and    $0x3f,%al
		mov    0x20(%esp),%edx
		and    $0xffff,%eax
		lea    0x32(%esi),%edi
		lea    -0x1f(%ebx),%ebp
		mov    0x14(%esp),%esi
		add    %eax,%edx
		call   ac_LbRandomAnyShort
		and    $0x3f,%al
		mov    $0x39b,%ebx
		add    $0x32,%al
		mov    %ebp,0x40(%esp)
		mov    (%ecx),%ah
		sub    $0x1f,%edx
		inc    %ah
		mov    %ebx,0x80(%esp)
		mov    %ah,0x120(%esp)
		mov    %al,0x1d8(%esp)
		xor    %al,%al
		mov    %edx,%ebx
		mov    %al,0x1e0(%esp)
		mov    $0xff,%ah
		mov    $0x1e,%dh
		mov    %ah,0x1e4(%esp)
		mov    0x20c(%esp),%al
		mov    %dh,0x1dc(%esp)
		mov    %al,0x1e8(%esp)
		xor    %eax,%eax
		mov    $0x3,%dl
		mov    data_1e08b8,%ax
		mov    %dl,0x1ec(%esp)
		test   %eax,%eax
		jne    jump_dba73
		xor    %eax,%eax
		jmp    jump_dba96
	jump_dba73:
		xor    %edx,%edx
		mov    %ax,%dx
		imul   $0x14,%edx,%edx
		mov    data_1e08bc,%ebp
		inc    %ebp
		mov    data_1de0ca(%edx),%dx
		mov    %ebp,data_1e08bc
		mov    %dx,data_1e08b8
	jump_dba96:
		mov    %eax,0xc8(%esp)
		test   %ax,%ax
		je     jump_dbb5c
		and    $0xffff,%eax
		imul   $0x14,%eax,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		add    %eax,%edx
		mov    0x40(%esp),%eax
		mov    %bx,0xa(%edx)
		mov    %ax,0xe(%edx)
		mov    0x120(%esp),%al
		mov    %al,(%edx)
		mov    0x1dc(%esp),%al
		mov    %al,0x4(%edx)
		mov    0x1e0(%esp),%al
		mov    %al,0x5(%edx)
		mov    0x1e4(%esp),%al
		mov    0x80(%esp),%ebx
		mov    %al,0x6(%edx)
		mov    nstart_ani,%eax
		mov    %di,0xc(%edx)
		mov    (%eax,%ebx,2),%ax
	jump_dbafc:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_dbb1c
		xor    %eax,%eax
		mov    frame,%ebx
		mov    0x8(%edx),%ax
		mov    0x6(%ebx,%eax,8),%ax
		jmp    jump_dbafc
	jump_dbb1c:
		mov    0x1e8(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x1ec(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x1d8(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0x2c(%esi),%ax
		mov    %ax,0x12(%edx)
		mov    0xc8(%esp),%eax
		mov    %ax,0x2c(%esi)
		lea    0x12(%edx),%eax
		jmp    jump_dbb5e
	jump_dbb5c:
		xor    %eax,%eax
	jump_dbb5e:
		cmpl   $data_1e08b8,0x18(%esp)
		jne    jump_dbb6c
		test   %eax,%eax
		jne    jump_dbb6f
	jump_dbb6c:
		lea    0x12(%ecx),%eax
	jump_dbb6f:
		mov    %eax,0x18(%esp)
		movb   $0x7f,0x1(%ecx)
		jmp    func_dacdf


func_dbb7c:
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		add    $0x35,%al
		mov    %al,0x210(%esp)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3f,%al
		mov    0x28(%esp),%esi
		and    $0xffff,%eax
		mov    0xa(%ecx),%ebx
		add    %eax,%esi
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		sar    $0x10,%ebx
		and    $0x3f,%al
		mov    0x20(%esp),%edx
		and    $0xffff,%eax
		add    %eax,%edx
		call   ac_LbRandomAnyShort
		and    $0x3f,%al
		mov    $0x39b,%ebp
		add    $0x32,%al
		add    $0x32,%ebx
		mov    %al,0x20c(%esp)
		mov    (%ecx),%al
		lea    -0x1f(%esi),%edi
		inc    %al
		mov    0x14(%esp),%esi
		mov    %al,0x214(%esp)
		mov    0x20c(%esp),%al
		sub    $0x1f,%edx
		mov    %al,0x218(%esp)
		xor    %al,%al
		mov    %edx,0x9c(%esp)
		mov    %al,0x220(%esp)
		mov    $0xff,%ah
		mov    $0x1e,%dh
		mov    %ah,0x224(%esp)
		mov    0x210(%esp),%al
		mov    %dh,0x21c(%esp)
		mov    %al,0x110(%esp)
		xor    %eax,%eax
		mov    $0x3,%dl
		mov    data_1e08b8,%ax
		mov    %dl,0x228(%esp)
		test   %eax,%eax
		jne    jump_dbc3e
		xor    %eax,%eax
		jmp    jump_dbc5a
	jump_dbc3e:
		xor    %edx,%edx
		mov    %ax,%dx
		imul   $0x14,%edx,%edx
		mov    data_1de0ca(%edx),%dx
		mov    %dx,data_1e08b8
		incl   data_1e08bc
	jump_dbc5a:
		mov    %eax,0xd0(%esp)
		test   %ax,%ax
		je     jump_dbd2c
		and    $0xffff,%eax
		imul   $0x14,%eax,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		add    %eax,%edx
		mov    %di,0xe(%edx)
		mov    0x9c(%esp),%eax
		mov    %bx,0xc(%edx)
		mov    %ax,0xa(%edx)
		mov    0x214(%esp),%al
		mov    %al,(%edx)
		mov    0x21c(%esp),%al
		mov    %al,0x4(%edx)
		mov    0x220(%esp),%al
		mov    %al,0x5(%edx)
		mov    0x224(%esp),%al
		mov    nstart_ani,%ebx
		mov    %al,0x6(%edx)
		mov    (%ebx,%ebp,2),%ax
	jump_dbcbd:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_dbcdd
		xor    %eax,%eax
		mov    frame,%ebx
		mov    0x8(%edx),%ax
		mov    0x6(%ebx,%eax,8),%ax
		jmp    jump_dbcbd
	jump_dbcdd:
		mov    0x110(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x228(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x218(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0x2c(%esi),%ax
		mov    %ax,0x12(%edx)
		mov    0xd0(%esp),%eax
		mov    %ax,0x2c(%esi)
		lea    0x12(%edx),%eax
		mov    0x14(%esp),%edi
		mov    $0x39b,%ebp
		mov    %eax,0x3c(%esp)
		xor    %esi,%esi
		jmp    jump_dbd49
	jump_dbd2c:
		xor    %eax,%eax
		mov    0x14(%esp),%edi
		mov    $0x39b,%ebp
		mov    %eax,0x3c(%esp)
		xor    %esi,%esi
		jmp    jump_dbd49
	jump_dbd3f:
		inc    %esi
		cmp    $0x2,%esi
		jge    jump_dbf1e
	jump_dbd49:
		call   ac_LbRandomAnyShort
		and    $0x7,%ah
		xor    %edx,%edx
		mov    %ax,%dx
		mov    EXPORT_SYMBOL(lbSinTable)(,%edx,4),%ebx
		sar    $0x9,%ebx
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%edx,4),%edx
		call   ac_LbRandomAnyShort
		sar    $0x9,%edx
		xor    %ah,%ah
		and    $0xffff,%eax
		imul   %eax,%ebx
		imul   %eax,%edx
		call   ac_LbRandomAnyShort
		mov    %ax,0xc4(%esp)
		mov    0xc4(%esp),%al
		and    $0xf,%al
		add    $0x12,%al
		mov    %al,0x20c(%esp)
		call   ac_LbRandomAnyShort
		mov    %ax,0xc4(%esp)
		mov    0xc4(%esp),%al
		and    $0xf,%al
		add    $0x2b,%al
		mov    %al,0x210(%esp)
		mov    0xc(%ecx),%eax
		sar    $0x8,%edx
		sar    $0x10,%eax
		add    %eax,%edx
		mov    0xa(%ecx),%eax
		sar    $0x10,%eax
		mov    %eax,0x70(%esp)
		mov    0x8(%ecx),%eax
		sar    $0x8,%ebx
		sar    $0x10,%eax
		add    %eax,%ebx
		call   ac_LbRandomAnyShort
		and    $0x3f,%al
		add    $0x32,%al
		mov    %ebp,0x88(%esp)
		mov    $0x5,%ah
		mov    %edx,0x4(%esp)
		mov    %ah,0x194(%esp)
		mov    %al,0x16c(%esp)
		mov    0x70(%esp),%eax
		mov    $0x64,%dl
		mov    %eax,(%esp)
		mov    0x210(%esp),%al
		mov    %dl,0x130(%esp)
		mov    %al,0xe8(%esp)
		mov    0x20c(%esp),%al
		mov    %ebx,0x60(%esp)
		mov    %al,0xd8(%esp)
		xor    %eax,%eax
		xor    %bl,%bl
		mov    data_1e08b8,%ax
		mov    $0xff,%bh
		test   %eax,%eax
		jne    jump_dbe42
		xor    %eax,%eax
		jmp    jump_dbe5e
	jump_dbe42:
		xor    %edx,%edx
		mov    %ax,%dx
		imul   $0x14,%edx,%edx
		mov    data_1de0ca(%edx),%dx
		mov    %dx,data_1e08b8
		incl   data_1e08bc
	jump_dbe5e:
		mov    %eax,0xb4(%esp)
		test   %ax,%ax
		je     jump_dbd3f
		and    $0xffff,%eax
		imul   $0x14,%eax,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		add    %eax,%edx
		mov    %bl,0x5(%edx)
		mov    0x60(%esp),%eax
		mov    %bh,0x6(%edx)
		mov    %ax,0xa(%edx)
		mov    0x4(%esp),%eax
		mov    %ax,0xe(%edx)
		mov    (%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0x194(%esp),%al
		mov    %al,(%edx)
		mov    0x130(%esp),%al
		mov    nstart_ani,%ebx
		mov    %al,0x4(%edx)
		mov    0x88(%esp),%eax
		mov    (%ebx,%eax,2),%ax
	jump_dbebe:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_dbede
		xor    %eax,%eax
		mov    frame,%ebx
		mov    0x8(%edx),%ax
		mov    0x6(%ebx,%eax,8),%ax
		jmp    jump_dbebe
	jump_dbede:
		mov    0xe8(%esp),%al
		mov    %al,0x7(%edx)
		mov    0xd8(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x16c(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0x2c(%edi),%ax
		mov    %ax,0x12(%edx)
		mov    0xb4(%esp),%eax
		mov    %ax,0x2c(%edi)
		jmp    jump_dbd3f
	jump_dbf1e:
		mov    0x14(%esp),%edi
		mov    $0x39c,%ebp
		xor    %esi,%esi
		jmp    jump_dc00c
	jump_dbf2e:
		xor    %edx,%edx
		mov    %ax,%dx
		imul   $0x14,%edx,%edx
		mov    data_1de0ca(%edx),%dx
		mov    %dx,data_1e08b8
		incl   data_1e08bc
	jump_dbf4a:
		mov    %eax,0xac(%esp)
		test   %ax,%ax
		je     jump_dc002
		and    $0xffff,%eax
		imul   $0x14,%eax,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		add    %eax,%edx
		mov    %bh,0x4(%edx)
		mov    0x74(%esp),%eax
		mov    %bl,0x6(%edx)
		mov    %ax,0xa(%edx)
		mov    0x98(%esp),%eax
		mov    %ax,0xe(%edx)
		mov    0xc(%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0x14c(%esp),%al
		mov    %al,(%edx)
		mov    0x178(%esp),%al
		mov    nstart_ani,%ebx
		mov    %al,0x5(%edx)
		mov    (%ebx,%ebp,2),%ax
	jump_dbfa7:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_dbfc7
		xor    %eax,%eax
		mov    frame,%ebx
		mov    0x8(%edx),%ax
		mov    0x6(%ebx,%eax,8),%ax
		jmp    jump_dbfa7
	jump_dbfc7:
		mov    0x15c(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x160(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x150(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0x2c(%edi),%ax
		mov    %ax,0x12(%edx)
		mov    0xac(%esp),%eax
		mov    %ax,0x2c(%edi)
	jump_dc002:
		inc    %esi
		cmp    $0x2,%esi
		jge    jump_dc109
	jump_dc00c:
		call   ac_LbRandomAnyShort
		and    $0x7,%ah
		xor    %edx,%edx
		mov    %ax,%dx
		mov    EXPORT_SYMBOL(lbSinTable)(,%edx,4),%ebx
		sar    $0x8,%ebx
		mov    EXPORT_SYMBOL(lbSinTable)+2048(,%edx,4),%edx
		call   ac_LbRandomAnyShort
		sar    $0x8,%edx
		xor    %ah,%ah
		and    $0xffff,%eax
		imul   %eax,%ebx
		imul   %eax,%edx
		call   ac_LbRandomAnyShort
		mov    %ax,0xc4(%esp)
		mov    0xc4(%esp),%al
		and    $0xf,%al
		add    $0x18,%al
		mov    %al,0x20c(%esp)
		call   ac_LbRandomAnyShort
		mov    %ax,0xc4(%esp)
		mov    0xc4(%esp),%al
		and    $0xf,%al
		add    $0x35,%al
		mov    %al,0x210(%esp)
		mov    0xc(%ecx),%eax
		sar    $0x8,%edx
		sar    $0x10,%eax
		add    %edx,%eax
		mov    %eax,0x70(%esp)
		mov    0x8(%ecx),%eax
		sar    $0x8,%ebx
		sar    $0x10,%eax
		mov    0xa(%ecx),%edx
		add    %eax,%ebx
		call   ac_LbRandomAnyShort
		and    $0x3f,%al
		add    $0x32,%al
		sar    $0x10,%edx
		mov    $0x5,%ah
		mov    %edx,0xc(%esp)
		mov    %ah,0x14c(%esp)
		mov    %al,0x150(%esp)
		mov    0x70(%esp),%eax
		xor    %dl,%dl
		mov    %eax,0x98(%esp)
		mov    0x210(%esp),%al
		mov    %ebx,0x74(%esp)
		mov    %al,0x15c(%esp)
		mov    0x20c(%esp),%al
		mov    %dl,0x178(%esp)
		mov    %al,0x160(%esp)
		xor    %eax,%eax
		mov    $0x64,%bh
		mov    data_1e08b8,%ax
		mov    $0xff,%bl
		test   %eax,%eax
		jne    jump_dbf2e
		xor    %eax,%eax
		jmp    jump_dbf4a
	jump_dc109:
		cmpl   $data_1e08b8,0x18(%esp)
		jne    jump_dc121
		mov    0x3c(%esp),%esi
		test   %esi,%esi
		je     jump_dc121
		mov    %esi,0x18(%esp)
		jmp    jump_dc128
	jump_dc121:
		lea    0x12(%ecx),%eax
		mov    %eax,0x18(%esp)
	jump_dc128:
		movb   $0x7f,0x1(%ecx)
		jmp    func_dacdf


func_dc131:
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		add    $0x35,%al
		mov    %al,0x20c(%esp)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x7f,%al
		mov    0x28(%esp),%esi
		and    $0xffff,%eax
		mov    0xa(%ecx),%ebx
		add    %eax,%esi
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		sar    $0x10,%ebx
		and    $0x7f,%al
		mov    0x20(%esp),%edx
		mov    $0x39b,%ebp
		and    $0xffff,%eax
		add    $0x23,%ebx
		add    %eax,%edx
		call   ac_LbRandomAnyShort
		and    $0x3f,%al
		lea    -0x3f(%esi),%edi
		add    $0x32,%al
		mov    0x14(%esp),%esi
		mov    %al,0x210(%esp)
		mov    (%ecx),%al
		mov    %ebx,0x78(%esp)
		inc    %al
		sub    $0x3f,%edx
		mov    %al,0x170(%esp)
		mov    0x210(%esp),%al
		xor    %bl,%bl
		mov    %al,0x174(%esp)
		mov    $0x1e,%ah
		mov    $0xff,%bh
		mov    %ah,0xfc(%esp)
		mov    0x20c(%esp),%al
		mov    %edx,0x1c(%esp)
		mov    %al,0x17c(%esp)
		xor    %eax,%eax
		mov    $0x8,%dl
		mov    data_1e08b8,%ax
		mov    %dl,0xf0(%esp)
		test   %eax,%eax
		jne    jump_dc1e6
		xor    %eax,%eax
		jmp    jump_dc202
	jump_dc1e6:
		xor    %edx,%edx
		mov    %ax,%dx
		imul   $0x14,%edx,%edx
		mov    data_1de0ca(%edx),%dx
		mov    %dx,data_1e08b8
		incl   data_1e08bc
	jump_dc202:
		mov    %eax,0xa8(%esp)
		test   %ax,%ax
		je     jump_dc2b7
		and    $0xffff,%eax
		imul   $0x14,%eax,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		add    %eax,%edx
		mov    %di,0xe(%edx)
		mov    0x1c(%esp),%eax
		mov    %bl,0x5(%edx)
		mov    %ax,0xa(%edx)
		mov    0x78(%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0x170(%esp),%al
		mov    %al,(%edx)
		mov    0xfc(%esp),%al
		mov    %al,0x4(%edx)
		mov    nstart_ani,%eax
		mov    %bh,0x6(%edx)
		mov    (%eax,%ebp,2),%ax
	jump_dc257:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_dc277
		xor    %eax,%eax
		mov    frame,%ebx
		mov    0x8(%edx),%ax
		mov    0x6(%ebx,%eax,8),%ax
		jmp    jump_dc257
	jump_dc277:
		mov    0x17c(%esp),%al
		mov    %al,0x7(%edx)
		mov    0xf0(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x174(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0x2c(%esi),%ax
		mov    %ax,0x12(%edx)
		mov    0xa8(%esp),%eax
		mov    %ax,0x2c(%esi)
		lea    0x12(%edx),%eax
		jmp    jump_dc2b9
	jump_dc2b7:
		xor    %eax,%eax
	jump_dc2b9:
		cmpl   $data_1e08b8,0x18(%esp)
		jne    jump_dc2c7
		test   %eax,%eax
		jne    jump_dc2ca
	jump_dc2c7:
		lea    0x12(%ecx),%eax
	jump_dc2ca:
		mov    %eax,0x18(%esp)
		movb   $0x7f,0x1(%ecx)
		jmp    func_dacdf


func_dc2d7:
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		add    $0x35,%al
		mov    %al,0x210(%esp)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x3f,%al
		mov    0x28(%esp),%ebx
		mov    0x20(%esp),%esi
		mov    $0x39b,%ebp
		and    $0xffff,%eax
		mov    0xa(%ecx),%edi
		add    %eax,%ebx
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		xor    %edx,%edx
		and    $0x3f,%al
		sar    $0x10,%edi
		mov    %ax,%dx
		call   ac_LbRandomAnyShort
		and    $0x3f,%al
		add    $0x37,%edi
		add    $0x32,%al
		sub    $0x1f,%ebx
		mov    %al,0x20c(%esp)
		mov    (%ecx),%al
		add    %esi,%edx
		inc    %al
		mov    0x14(%esp),%esi
		mov    %al,0x118(%esp)
		mov    0x20c(%esp),%al
		sub    $0x1f,%edx
		mov    %al,0x11c(%esp)
		mov    $0x1e,%ah
		mov    %edx,0x2c(%esp)
		mov    %ah,0xd4(%esp)
		mov    0x210(%esp),%al
		xor    %dl,%dl
		mov    %al,0x190(%esp)
		mov    $0x8,%al
		mov    %dl,0x124(%esp)
		mov    %al,0xec(%esp)
		xor    %eax,%eax
		mov    $0xff,%dh
		mov    data_1e08b8,%ax
		mov    %dh,0x128(%esp)
		test   %eax,%eax
		jne    jump_dc396
		xor    %eax,%eax
		jmp    jump_dc3b2
	jump_dc396:
		xor    %edx,%edx
		mov    %ax,%dx
		imul   $0x14,%edx,%edx
		mov    data_1de0ca(%edx),%dx
		mov    %dx,data_1e08b8
		incl   data_1e08bc
	jump_dc3b2:
		mov    %eax,0xb0(%esp)
		test   %ax,%ax
		je     jump_dc478
		and    $0xffff,%eax
		imul   $0x14,%eax,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		add    %eax,%edx
		mov    %bx,0xe(%edx)
		mov    0x2c(%esp),%eax
		mov    %di,0xc(%edx)
		mov    %ax,0xa(%edx)
		mov    0x118(%esp),%al
		mov    %al,(%edx)
		mov    0xd4(%esp),%al
		mov    %al,0x4(%edx)
		mov    0x124(%esp),%al
		mov    %al,0x5(%edx)
		mov    0x128(%esp),%al
		mov    nstart_ani,%ebx
		mov    %al,0x6(%edx)
		mov    (%ebx,%ebp,2),%ax
	jump_dc412:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_dc438
		xor    %eax,%eax
		mov    0x8(%edx),%ax
		lea    0x0(,%eax,8),%ebx
		mov    frame,%eax
		mov    0x6(%ebx,%eax,1),%ax
		jmp    jump_dc412
	jump_dc438:
		mov    0x190(%esp),%al
		mov    %al,0x7(%edx)
		mov    0xec(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x11c(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0x2c(%esi),%ax
		mov    %ax,0x12(%edx)
		mov    0xb0(%esp),%eax
		mov    %ax,0x2c(%esi)
		lea    0x12(%edx),%eax
		jmp    jump_dc47a
	jump_dc478:
		xor    %eax,%eax
	jump_dc47a:
		cmpl   $data_1e08b8,0x18(%esp)
		jne    jump_dc488
		test   %eax,%eax
		jne    jump_dc48b
	jump_dc488:
		lea    0x12(%ecx),%eax
	jump_dc48b:
		mov    %eax,0x18(%esp)
		movb   $0x7f,0x1(%ecx)
		jmp    func_dacdf


func_dc498:
		call   ac_LbRandomAnyShort
		and    $0xf,%al
		add    $0x35,%al
		mov    %al,0x20c(%esp)
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		and    $0x1f,%al
		mov    0x28(%esp),%esi
		mov    0x20(%esp),%edi
		mov    $0x39b,%ebp
		and    $0xffff,%eax
		mov    0xa(%ecx),%ebx
		xor    %edx,%edx
		sar    $0x10,%ebx
		add    %eax,%esi
		call   ac_LbRandomAnyShort
		xor    %ah,%ah
		add    $0x37,%ebx
		and    $0x1f,%al
		mov    %ebx,0x6c(%esp)
		mov    %ax,%dx
		call   ac_LbRandomAnyShort
		and    $0x3f,%al
		mov    $0x1e,%bh
		add    $0x32,%al
		mov    %bh,0x1bc(%esp)
		mov    %al,0x210(%esp)
		mov    (%ecx),%al
		add    %edi,%edx
		inc    %al
		sub    $0xf,%edx
		mov    %al,0x1b0(%esp)
		mov    0x210(%esp),%al
		lea    -0xf(%esi),%edi
		mov    %al,0x1b4(%esp)
		mov    0x20c(%esp),%al
		xor    %bh,%bh
		mov    %al,0x1c0(%esp)
		mov    $0x8,%al
		mov    0x14(%esp),%esi
		mov    %al,0x1c4(%esp)
		xor    %eax,%eax
		mov    $0xff,%bl
		mov    data_1e08b8,%ax
		mov    %edx,0x84(%esp)
		test   %eax,%eax
		jne    jump_dc550
		xor    %eax,%eax
		jmp    jump_dc56c
	jump_dc550:
		xor    %edx,%edx
		mov    %ax,%dx
		imul   $0x14,%edx,%edx
		mov    data_1de0ca(%edx),%dx
		mov    %dx,data_1e08b8
		incl   data_1e08bc
	jump_dc56c:
		mov    %eax,0xb8(%esp)
		test   %ax,%ax
		je     jump_dc625
		and    $0xffff,%eax
		imul   $0x14,%eax,%eax
		mov    $EXPORT_SYMBOL(FIRE_flame),%edx
		add    %eax,%edx
		mov    %di,0xe(%edx)
		mov    %bh,0x5(%edx)
		mov    0x84(%esp),%eax
		mov    %bl,0x6(%edx)
		mov    %ax,0xa(%edx)
		mov    0x6c(%esp),%eax
		mov    %ax,0xc(%edx)
		mov    0x1b0(%esp),%al
		mov    %al,(%edx)
		mov    0x1bc(%esp),%al
		mov    nstart_ani,%ebx
		mov    %al,0x4(%edx)
		mov    (%ebx,%ebp,2),%ax
	jump_dc5c5:
		mov    %ax,0x8(%edx)
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		je     jump_dc5e5
		xor    %eax,%eax
		mov    frame,%ebx
		mov    0x8(%edx),%ax
		mov    0x6(%ebx,%eax,8),%ax
		jmp    jump_dc5c5
	jump_dc5e5:
		mov    0x1c0(%esp),%al
		mov    %al,0x7(%edx)
		mov    0x1c4(%esp),%al
		mov    %al,0x1(%edx)
		mov    0x1b4(%esp),%al
		mov    %al,0x2(%edx)
		call   ac_LbRandomAnyShort
		and    $0x7f,%al
		mov    %al,0x3(%edx)
		mov    0x2c(%esi),%ax
		mov    %ax,0x12(%edx)
		mov    0xb8(%esp),%eax
		mov    %ax,0x2c(%esi)
		lea    0x12(%edx),%eax
		jmp    jump_dc627
	jump_dc625:
		xor    %eax,%eax
	jump_dc627:
		cmpl   $data_1e08b8,0x18(%esp)
		jne    jump_dc635
		test   %eax,%eax
		jne    jump_dc638
	jump_dc635:
		lea    0x12(%ecx),%eax
	jump_dc638:
		mov    %eax,0x18(%esp)
		movb   $0x7f,0x1(%ecx)
		jmp    func_dacdf
	jump_dc645:
		mov    (%ecx),%al
		dec    %al
		cmp    $0x17,%al
		ja     func_dacdf
		and    $0xff,%eax
		jmp    *%cs:vtable_daa58(,%eax,4)
	jump_dc65e:
		mov    data_1e08b8,%bx
		mov    %bx,data_1de0ca(%edx)
		mov    0x18(%esp),%edx
		mov    %ax,data_1e08b8
		mov    0xa0(%esp),%eax
		mov    %ax,(%edx)
		decl   data_1e08bc
		jmp    func_dacdf
	jump_dc68b:
		add    $0x23c,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_heapmgr_init)	/* 0x0DFA80 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		mov    %edx,%ecx
		lea    0x0(,%ebx,8),%edx
		sub    %ebx,%edx
		shl    $0x2,%edx
		lea    0x24(%edx),%esi
		mov    %ecx,%edx
		sub    %esi,%edx
		test   %edx,%edx
		jg     jump_dfaa2
		xor    %eax,%eax
		pop    %edi
		pop    %esi
		pop    %ecx
		ret
	jump_dfaa2:
		movl   $0x0,0x10(%eax)
		movl   $0x0,0x14(%eax)
		movl   $0x0,0x18(%eax)
		movl   $0x0,0x1c(%eax)
		movl   $0x0,0x20(%eax)
		mov    %edx,0x8(%eax)
		lea    (%eax,%esi,1),%edi
		mov    %ebx,0xc(%eax)
		lea    (%eax,%ecx,1),%esi
		mov    %edi,(%eax)
		mov    %esi,0x4(%eax)
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
heapmgr_add_item:	/* 0x0DFADC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		mov    %eax,%ebx
		mov    %edx,%esi
		mov    0x8(%eax),%eax
		sub    0x14(%ebx),%eax
		cmp    %eax,%esi
		jle    jump_dfaf6
		xor    %edx,%edx
		jmp    jump_dfbb3
	jump_dfaf6:
		mov    0x10(%ebx),%eax
		cmp    0xc(%ebx),%eax
		jge    jump_dfb18
		lea    0x24(%ebx),%eax
		cmpw   $0x0,0x8(%eax)
		je     jump_dfb14
	jump_dfb08:
		mov    0x24(%eax),%cx
		add    $0x1c,%eax
		test   %cx,%cx
		jne    jump_dfb08
	jump_dfb14:
		mov    %eax,%edx
		jmp    jump_dfb1a
	jump_dfb18:
		xor    %edx,%edx
	jump_dfb1a:
		mov    %edx,%edi
		test   %edx,%edx
		je     jump_dfbb3
		mov    0x18(%ebx),%eax
		test   %eax,%eax
		jne    jump_dfb34
		mov    (%ebx),%eax
		mov    %edx,0x18(%ebx)
		mov    %eax,(%edx)
		jmp    jump_dfb81
	jump_dfb34:
		cmpl   $0x0,0x10(%eax)
		je     jump_dfb48
		mov    0x10(%eax),%ecx
		mov    (%eax),%edx
		mov    0x4(%eax),%ebp
		mov    (%ecx),%ecx
		add    %ebp,%edx
		jmp    jump_dfb50
	jump_dfb48:
		mov    (%eax),%edx
		add    0x4(%eax),%edx
		mov    0x4(%ebx),%ecx
	jump_dfb50:
		sub    %edx,%ecx
		mov    %ecx,%edx
		cmp    %esi,%edx
		jl     jump_dfb73
		mov    (%eax),%ecx
		mov    0x4(%eax),%edx
		add    %edx,%ecx
		mov    %eax,0xc(%edi)
		mov    %ecx,(%edi)
		mov    0x10(%eax),%edx
		mov    %edx,0x10(%edi)
		test   %edx,%edx
		je     jump_dfb7e
		mov    %edi,0xc(%edx)
		jmp    jump_dfb7e
	jump_dfb73:
		mov    0x10(%eax),%edx
		test   %edx,%edx
		je     jump_dfbb3
		mov    %edx,%eax
		jmp    jump_dfb34
	jump_dfb7e:
		mov    %edi,0x10(%eax)
	jump_dfb81:
		movw   $0x1,0x8(%edi)
		mov    %esi,0x4(%edi)
		mov    0x14(%ebx),%ebp
		add    %esi,%ebp
		mov    0x10(%ebx),%eax
		mov    %ebp,0x14(%ebx)
		inc    %eax
		mov    0x20(%ebx),%edx
		mov    %eax,0x10(%ebx)
		test   %edx,%edx
		je     jump_dfbab
		mov    %edi,0x18(%edx)
		mov    0x20(%ebx),%eax
		mov    %eax,0x14(%edi)
		jmp    jump_dfbae
	jump_dfbab:
		mov    %edi,0x1c(%ebx)
	jump_dfbae:
		mov    %edi,0x20(%ebx)
		mov    %edi,%edx
	jump_dfbb3:
		mov    %edx,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
heapmgr_make_newest:	/* 0x0DFBBC */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		mov    0x18(%edx),%ebx
		test   %ebx,%ebx
		je     jump_dfbf3
		mov    0x14(%edx),%ecx
		mov    %ecx,0x14(%ebx)
		test   %ecx,%ecx
		je     jump_dfbd7
		mov    0x18(%edx),%ebx
		mov    %ebx,0x18(%ecx)
		jmp    jump_dfbdd
	jump_dfbd7:
		mov    0x18(%edx),%ebx
		mov    %ebx,0x1c(%eax)
	jump_dfbdd:
		mov    0x20(%eax),%ebx
		mov    %edx,0x18(%ebx)
		mov    0x20(%eax),%ebx
		movl   $0x0,0x18(%edx)
		mov    %ebx,0x14(%edx)
		mov    %edx,0x20(%eax)
	jump_dfbf3:
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
heapmgr_free_oldest:	/* 0x0DFBF8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		mov    %eax,%ebx
		mov    0x1c(%eax),%edx
		test   %edx,%edx
		jne    jump_dfc0b
	jump_dfc03:
		mov    $0xffffffff,%eax
		pop    %edx
		pop    %ebx
		ret
	jump_dfc0b:
		mov    %edx,%eax
		testb  $0x2,0x8(%edx)
		je     jump_dfc20
	jump_dfc13:
		mov    0x18(%eax),%eax
		test   %eax,%eax
		je     jump_dfc03
		testb  $0x2,0x8(%eax)
		jne    jump_dfc13
	jump_dfc20:
		mov    %eax,%edx
		mov    %ebx,%eax
		call   heapmgr_free_handle
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
heapmgr_free_handle:	/* 0x0DFC2C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		push   %ebp
		mov    %eax,%esi
		mov    %edx,%ecx
		cmpl   $0x0,0xc(%edx)
		je     jump_dfc46
		mov    0xc(%ecx),%edx
		mov    0x10(%ecx),%eax
		mov    %eax,0x10(%edx)
		jmp    jump_dfc4c
	jump_dfc46:
		mov    0x10(%ecx),%eax
		mov    %eax,0x18(%esi)
	jump_dfc4c:
		mov    0x10(%ecx),%ebx
		test   %ebx,%ebx
		je     jump_dfca0
		mov    0xc(%ecx),%edx
		mov    %edx,0xc(%ebx)
		mov    0x10(%ecx),%eax
		testb  $0x4,0x8(%eax)
		jne    jump_dfca0
		mov    0xc(%ecx),%edi
		test   %edi,%edi
		je     jump_dfc8d
		mov    0x4(%eax),%ebx
		mov    (%eax),%edx
		mov    %edi,%eax
		mov    (%edi),%edi
		mov    0x4(%eax),%eax
		add    %edi,%eax
		call   ac_memmove
		mov    0xc(%ecx),%eax
		mov    (%eax),%edx
		mov    0x4(%eax),%ebp
		mov    0x10(%ecx),%eax
		add    %ebp,%edx
		mov    %edx,(%eax)
		jmp    jump_dfca0
	jump_dfc8d:
		mov    0x4(%eax),%ebx
		mov    (%eax),%edx
		mov    (%esi),%eax
		call   ac_memmove
		mov    0x10(%ecx),%edx
		mov    (%esi),%eax
		mov    %eax,(%edx)
	jump_dfca0:
		mov    0x14(%ecx),%eax
		test   %eax,%eax
		je     jump_dfcb1
		mov    %eax,%edx
		mov    0x18(%ecx),%eax
		mov    %eax,0x18(%edx)
		jmp    jump_dfcb7
	jump_dfcb1:
		mov    0x18(%ecx),%eax
		mov    %eax,0x1c(%esi)
	jump_dfcb7:
		mov    0x18(%ecx),%edx
		test   %edx,%edx
		je     jump_dfcc8
		mov    %edx,%eax
		mov    0x14(%ecx),%edx
		mov    %edx,0x14(%eax)
		jmp    jump_dfcce
	jump_dfcc8:
		mov    0x14(%ecx),%eax
		mov    %eax,0x20(%esi)
	jump_dfcce:
		decl   0x10(%esi)
		mov    0x14(%esi),%edi
		mov    0x4(%ecx),%eax
		xor    %edx,%edx
		sub    %eax,%edi
		mov    $0x1c,%ebx
		mov    %edi,0x14(%esi)
		xor    %esi,%esi
		mov    %ecx,%eax
		mov    0xa(%ecx),%si
		call   ac_memset
		mov    %esi,%eax
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
heapmgr_defrag:	/* 0x0DFCF8 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		xor    %edx,%edx
		test   %eax,%eax
		je     jump_dfd58
		cmpl   $0x0,0x10(%eax)
		je     jump_dfd58
		mov    0x18(%eax),%ecx
		test   %ecx,%ecx
		je     jump_dfd58
	jump_dfd11:
		mov    0x10(%ecx),%esi
		test   %esi,%esi
		je     jump_dfd58
		mov    (%ecx),%ebx
		mov    0x4(%ecx),%edi
		mov    (%esi),%ebp
		add    %edi,%ebx
		cmp    %ebp,%ebx
		jae    jump_dfd53
		test   %edx,%edx
		jne    jump_dfd2b
		mov    %ecx,%edx
	jump_dfd2b:
		mov    0x10(%ecx),%eax
		testb  $0x4,0x8(%eax)
		jne    jump_dfd53
		mov    0x4(%eax),%ebx
		mov    (%eax),%edx
		mov    0x4(%ecx),%esi
		mov    (%ecx),%eax
		add    %esi,%eax
		call   ac_memmove
		mov    (%ecx),%eax
		mov    0x4(%ecx),%edi
		mov    0x10(%ecx),%edx
		add    %edi,%eax
		mov    %eax,(%edx)
		jmp    jump_dfd58
	jump_dfd53:
		mov    0x10(%ecx),%ecx
		jmp    jump_dfd11
	jump_dfd58:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_process_sound_heap)	/* 0xE00E0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		testb  $0x2,EXPORT_SYMBOL(ingame)+0x931 # ingame.Flags+2
		je     jump_e0183
		mov    EXPORT_SYMBOL(sample_table),%eax
		mov    EXPORT_SYMBOL(samples_in_bank),%edx
		xor    %ecx,%ecx
		test   %edx,%edx
		jle    jump_e0121
		jmp    jump_e0114
	jump_e0106:
		mov    EXPORT_SYMBOL(samples_in_bank),%ebx
		inc    %ecx
		add    $0xc,%eax
		cmp    %ebx,%ecx
		jge    jump_e0121
	jump_e0114:
		mov    0x8(%eax),%esi
		test   %esi,%esi
		je     jump_e0106
		andb   $0xf9,0x8(%esi)
		jmp    jump_e0106
	jump_e0121:
		call   ac_GetLastSampleInfoStructure
		mov    %eax,%edx
		mov    %eax,%esi
		call   ac_GetFirstSampleInfoStructure
		mov    %eax,%ecx
		cmp    %edx,%eax
		jmp    jump_e013e
	jump_e0135:
		andb   $0xfe,0x17(%ecx)
	jump_e0139:
		add    $0x19,%ecx
		cmp    %esi,%ecx
	jump_e013e:
		ja     jump_e0179
		mov    (%ecx),%edi
		test   %edi,%edi
		je     jump_e0139
		testb  $0x1,0x17(%ecx)
		je     jump_e0139
		mov    %edi,%ebx
		xor    %edx,%edx
		xor    %eax,%eax
		call   ac_IsSamplePlaying
		test   %al,%al
		je     jump_e0135
		mov    0x10(%ecx),%eax
		sar    $0x10,%eax
		imul   $0xc,%eax,%eax
		mov    EXPORT_SYMBOL(sample_table),%edx
		add    %edx,%eax
		mov    0x8(%eax),%ebp
		test   %ebp,%ebp
		je     jump_e0139
		orb    $0x6,0x8(%ebp)
		jmp    jump_e0139
	jump_e0179:
		mov    EXPORT_SYMBOL(hmhead),%eax
		call   heapmgr_defrag
	jump_e0183:
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_stop_sample_using_heap)	/* 0x0E018C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		mov    %edx,%esi
		testb  $0x2,EXPORT_SYMBOL(ingame)+0x931 # ingame.Flags+2
		je     jump_e0210
		movswl %si,%edx
		call   ac_StopSample
		call   ac_GetLastSampleInfoStructure
		mov    %eax,%ebx
		mov    %eax,%edi
		call   ac_GetFirstSampleInfoStructure
		mov    %eax,%ecx
		cmp    %ebx,%eax
		jb     jump_e01c4
		jmp    jump_e01e4
	jump_e01bd:
		add    $0x19,%ecx
		cmp    %edi,%ecx
		jae    jump_e01e4
	jump_e01c4:
		cmp    0x12(%ecx),%si
		jne    jump_e01bd
		cmpl   $0x0,(%ecx)
		je     jump_e01bd
		testb  $0x1,0x17(%ecx)
		je     jump_e01bd
		mov    (%ecx),%ebx
		xor    %edx,%edx
		xor    %eax,%eax
		call   ac_IsSamplePlaying
		test   %al,%al
		je     jump_e01bd
	jump_e01e4:
		cmp    %edi,%ecx
		jb     jump_e0210
		movswl %si,%eax
		lea    0x0(,%eax,4),%ebx
		sub    %eax,%ebx
		mov    EXPORT_SYMBOL(sample_table),%eax
		shl    $0x2,%ebx
		add    %ebx,%eax
		mov    0x8(%eax),%ebx
		test   %ebx,%ebx
		je     jump_e0210
		mov    %ebx,%eax
		mov    0x8(%ebx),%bl
		and    $0xf9,%bl
		mov    %bl,0x8(%eax)
	jump_e0210:
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_play_sample_using_heap)	/* 0x0E0218 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x14,%esp
		mov    %eax,(%esp)
		mov    %dx,0x10(%esp)
		mov    %ebx,0xc(%esp)
		mov    %ecx,%ebp
		testb  $0x2,EXPORT_SYMBOL(ingame)+0x931 # ingame.Flags+2
		jne    jump_e023c
		xor    %eax,%eax
		jmp    jump_e0368
	jump_e023c:
		cmpl   $0xffffffff,EXPORT_SYMBOL(sound_file)
		jne    jump_e0250
		xor    %eax,%eax
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0xc
	jump_e0250:
		mov    0xe(%esp),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		jle    jump_e0263
		cmp    EXPORT_SYMBOL(samples_in_bank),%edx
		jl     jump_e026e
	jump_e0263:
		xor    %eax,%eax
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0xc
	jump_e026e:
		lea    0x0(,%edx,4),%eax
		sub    %edx,%eax
		mov    EXPORT_SYMBOL(sample_table),%edi
		shl    $0x2,%eax
		add    %eax,%edi
		cmpl   $0x0,0x8(%edi)
		jne    jump_e0308
		mov    %edx,0x8(%esp)
		mov    0x4(%edi),%ecx
		mov    (%edi),%eax
		xor    %ebx,%ebx
		mov    %eax,0x4(%esp)
	jump_e029b:
		mov    EXPORT_SYMBOL(hmhead),%eax
		mov    %ecx,%edx
		call   heapmgr_add_item
		mov    %eax,%esi
		test   %eax,%eax
		jne    jump_e02bb
		mov    EXPORT_SYMBOL(hmhead),%eax
		call   heapmgr_free_oldest
		test   %eax,%eax
		jge    jump_e02c3
	jump_e02bb:
		test   %esi,%esi
		jne    jump_e02dd
		xor    %eax,%eax
		jmp    jump_e0305
	jump_e02c3:
		imul   $0xc,%eax,%edx
		mov    EXPORT_SYMBOL(sample_table),%eax
		inc    %ebx
		mov    %esi,0x8(%edx,%eax,1)
		cmp    $0x32,%ebx
		jl     jump_e029b
		test   %esi,%esi
		jne    jump_e02dd
		xor    %eax,%eax
		jmp    jump_e0305
	jump_e02dd:
		mov    0x8(%esp),%eax
		mov    0x4(%esp),%edx
		xor    %ebx,%ebx
		mov    %ax,0xa(%esi)
		mov    EXPORT_SYMBOL(sound_file),%eax
		call   ac_LbFileSeek
		mov    EXPORT_SYMBOL(sound_file),%eax
		mov    %ecx,%ebx
		mov    (%esi),%edx
		call   ac_LbFileRead
		mov    %esi,%eax
	jump_e0305:
		mov    %eax,0x8(%edi)
	jump_e0308:
		mov    0x8(%edi),%esi
		test   %esi,%esi
		jne    jump_e031a
		xor    %eax,%eax
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0xc
	jump_e031a:
		mov    EXPORT_SYMBOL(hmhead),%eax
		mov    %esi,%edx
		call   heapmgr_make_newest
		mov    0x8(%edi),%eax
		mov    (%eax),%edx
		xor    %eax,%eax
		push   %edx
		mov    0x30(%esp),%al
		push   %eax
		mov    0x2d(%esp),%eax
		sar    $0x18,%eax
		mov    0x14(%esp),%ebx
		push   %eax
		xor    %eax,%eax
		mov    %ebp,%ecx
		mov    0x30(%esp),%ax
		mov    0x1a(%esp),%edx
		push   %eax
		sar    $0x10,%edx
		mov    0x10(%esp),%eax
		call   ac_PlaySampleFromAddress
		test   %eax,%eax
		je     jump_e0368
		orb    $0x1,0x17(%eax)
		mov    0x8(%edi),%edx
		orb    $0x6,0x8(%edx)
	jump_e0368:
		add    $0x14,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		ret    $0xc

vtable_e061c:
		.long   func_e06d8
		.long   func_e06d5
		.long   func_e06d2
		.long   func_e06cf
		.long   func_e06cc
		.long   func_e06c9
		.long   func_e06c6
		.long   func_e06c1

vtable_e063c:
		.long   func_e0a0e
		.long   func_e0a2c
		.long   func_e0a4a
		.long   func_e0a4a
		.long   func_e0a4a
		.long   func_e0a2c
		.long   func_e0a68
		.long   func_e0a2c
		.long   func_e0a4a
		.long   func_e0a2c
		.long   func_e0a86
		.long   func_e0a68
		.long   func_e0a86
		.long   func_e0a68
		.long   func_e0a2c
		.long   func_e0a4a
		.long   func_e0a2c
		.long   func_e0a4a
		.long   func_e0a2c
		.long   func_e0a2c
		.long   func_e0a4a
		.long   func_e0a2c
		.long   func_e0a2c
		.long   func_e0a2c
		.long   func_e0a2c
		.long   func_e0a2c


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_things_unkn_sub2)	/* 0x0E06A4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %ebp
		sub    $0x4,%esp
		mov    %edx,%ecx
		dec    %eax
		xor    %ebx,%ebx
		cmp    $0x7,%eax
		ja     jump_e08d6
		jmp    *%cs:vtable_e061c(,%eax,4)


func_e06c1:
		mov    $0x8,%ebx


func_e06c6:
		add    $0x15,%ebx


func_e06c9:
		add    $0x2a,%ebx


func_e06cc:
		add    $0x24,%ebx


func_e06cf:
		add    $0x15,%ebx


func_e06d2:
		add    $0xd,%ebx


func_e06d5:
		add    $0xd,%ebx


func_e06d8:
		add    $0x4,%ebx
		je     jump_e08d6
		xor    %edx,%edx
		call   ac_LbRandomAnyShort
		mov    %ax,%dx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ebx
		test   %edx,%edx
		jge    jump_e0702
		movl   $0x1,(%esp)
		jmp    jump_e08c9
	jump_e0702:
		cmp    $0x2,%edx
		jge    jump_e0713
		movl   $0x2,(%esp)
		jmp    jump_e08c9
	jump_e0713:
		sub    $0x2,%edx
		cmp    $0x2,%edx
		jge    jump_e0727
		movl   $0x12,(%esp)
		jmp    jump_e08c9
	jump_e0727:
		sub    $0x2,%edx
		cmp    $0x3,%edx
		jge    jump_e073b
		movl   $0x1b,(%esp)
		jmp    jump_e08c9
	jump_e073b:
		sub    $0x3,%edx
		cmp    $0x4,%edx
		jge    jump_e074f
		movl   $0x7,(%esp)
		jmp    jump_e08c9
	jump_e074f:
		sub    $0x4,%edx
		cmp    $0x6,%edx
		jge    jump_e0763
		movl   $0xb,(%esp)
		jmp    jump_e08c9
	jump_e0763:
		sub    $0x6,%edx
		cmp    $0x5,%edx
		jge    jump_e0777
		movl   $0xa,(%esp)
		jmp    jump_e08c9
	jump_e0777:
		sub    $0x5,%edx
		cmp    $0x4,%edx
		jge    jump_e078b
		movl   $0x4,(%esp)
		jmp    jump_e08c9
	jump_e078b:
		sub    $0x4,%edx
		cmp    $0x4,%edx
		jge    jump_e079f
		movl   $0x3,(%esp)
		jmp    jump_e08c9
	jump_e079f:
		sub    $0x4,%edx
		cmp    $0x6,%edx
		jge    jump_e07b3
		movl   $0x8,(%esp)
		jmp    jump_e08c9
	jump_e07b3:
		sub    $0x6,%edx
		cmp    $0x8,%edx
		jge    jump_e07c7
		movl   $0xd,(%esp)
		jmp    jump_e08c9
	jump_e07c7:
		sub    $0x8,%edx
		cmp    $0x7,%edx
		jge    jump_e07db
		movl   $0xc,(%esp)
		jmp    jump_e08c9
	jump_e07db:
		sub    $0x7,%edx
		cmp    $0xa,%edx
		jge    jump_e07ef
		movl   $0x1a,(%esp)
		jmp    jump_e08c9
	jump_e07ef:
		sub    $0xa,%edx
		cmp    $0xd,%edx
		jge    jump_e0803
		movl   $0xf,(%esp)
		jmp    jump_e08c9
	jump_e0803:
		sub    $0xd,%edx
		cmp    $0xd,%edx
		jge    jump_e0817
		movl   $0x5,(%esp)
		jmp    jump_e08c9
	jump_e0817:
		sub    $0xd,%edx
		cmp    $0xf,%edx
		jge    jump_e082b
		movl   $0x6,(%esp)
		jmp    jump_e08c9
	jump_e082b:
		sub    $0xf,%edx
		cmp    $0x8,%edx
		jge    jump_e083f
		movl   $0x16,(%esp)
		jmp    jump_e08c9
	jump_e083f:
		sub    $0x8,%edx
		cmp    $0xd,%edx
		jge    jump_e0853
		movl   $0x1c,(%esp)
		jmp    jump_e08c9
	jump_e0853:
		sub    $0xd,%edx
		cmp    $0x6,%edx
		jge    jump_e0867
		movl   $0x15,(%esp)
		jmp    jump_e08c9
	jump_e0867:
		sub    $0x6,%edx
		cmp    $0x5,%edx
		jge    jump_e087b
		movl   $0x19,(%esp)
		jmp    jump_e08c9
	jump_e087b:
		sub    $0x5,%edx
		cmp    $0x8,%edx
		jge    jump_e088f
		movl   $0x10,(%esp)
		jmp    jump_e08c9
	jump_e088f:
		sub    $0x8,%edx
		cmp    $0x8,%edx
		jge    jump_e08a3
		movl   $0x1d,(%esp)
		jmp    jump_e08c9
	jump_e08a3:
		sub    $0x8,%edx
		cmp    $0x8,%edx
		jge    jump_e08b7
		movl   $0x11,(%esp)
		jmp    jump_e08c9
	jump_e08b7:
		sub    $0x8,%edx
		test   %edx,%edx
		jge    jump_e08d6
		movl   $0x14,(%esp)
	jump_e08c9:
		test   %ecx,%ecx
		jbe    jump_e08de
		cmp    $0x1,%ecx
		je     jump_e0979
	jump_e08d6:
		add    $0x4,%esp
		pop    %ebp
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_e08de:
		mov    $0x1e0,%ecx
	jump_e08e3:
		xor    %edx,%edx
		call   ac_LbRandomAnyShort
		mov    %ax,%dx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		mov    %edx,%esi
		xor    %edx,%edx
		call   ac_LbRandomAnyShort
		mov    %ax,%dx
		mov    %edx,%eax
		sar    $0x1f,%edx
		idiv   %ecx
		add    $0x10,%esi
		lea    0x10(%edx),%ebx
		shl    $0xe,%esi
		shl    $0xe,%ebx
		mov    %esi,%eax
		mov    %ebx,%edx
		call   is_this_a_nice_place_for_a_picnic
		test   %eax,%eax
		je     jump_e08e3
		sar    $0x8,%ebx
		sar    $0x8,%esi
		movswl %bx,%edx
		movswl %si,%eax
		call   ac_alt_at_point
		mov    %eax,%edx
		xor    %eax,%eax
		mov    (%esp),%al
		mov    $0x3ec,%ecx
		push   %eax
		sar    $0x8,%edx
		mov    %esi,%eax
		call   create_item
		mov    %eax,%edx
		test   %eax,%eax
		je     jump_e08d6
		mov    (%esp),%eax
		cmp    $0xc,%eax
		je     jump_e095f
		cmp    $0xd,%eax
		jne    jump_e08d6
	jump_e095f:
		movw   $0x32,0x14(%edx)
		movw   $0x3e7,0x28(%edx)
		movw   $0x3e7,0x2a(%edx)
		add    $0x4,%esp
		pop    %ebp
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_e0979:
		mov    sthings_empty_head,%edx
		xor    %ecx,%ecx
		sar    $0x10,%edx
		mov    EXPORT_SYMBOL(sthings_used),%cx
		test   %edx,%edx
		jle    jump_e08d6
	jump_e0993:
		dec    %ecx
		cmp    $0xffffffff,%ecx
		je     jump_e08d6
		imul   $0x3c,%edx,%edx
		mov    EXPORT_SYMBOL(sthings),%eax
		add    %eax,%edx
		xor    %eax,%eax
		mov    0x9(%edx),%al
		cmp    $0x19,%eax
		jne    jump_e09fc
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		jne    jump_e09fc
		xor    %esi,%esi
		mov    (%esp),%ebx
		mov    0x2c(%edx),%si
		test   %ebx,%ebx
		jl     jump_e09dd
		cmp    $0x1f,%ebx
		jg     jump_e09dd
		test   %esi,%esi
		jl     jump_e09dd
		cmp    $0x1f,%esi
		jle    jump_e09e1
	jump_e09dd:
		xor    %ebx,%ebx
		jmp    jump_e09f6
	jump_e09e1:
		mov    data_155d54(%ebx),%bl
		cmp    data_155d54(%esi),%bl
		seta   %bl
		and    $0xff,%ebx
	jump_e09f6:
		jne    jump_e0aa4
	jump_e09fc:
		mov    0x4(%edx),%edx
		sar    $0x10,%edx
		test   %edx,%edx
		jg     jump_e0993
		add    $0x4,%esp
		pop    %ebp
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_e0a0e:
/*----------------------------------------------------------------*/
		mov    nstart_ani,%eax
		mov    0x846(%eax),%ax
		movw   $0x422,0x26(%edx)
		mov    %ax,0x24(%edx)
		add    $0x4,%esp
		pop    %ebp
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_e0a2c:
/*----------------------------------------------------------------*/
		mov    nstart_ani,%eax
		mov    0x7d8(%eax),%ax
		movw   $0x3eb,0x26(%edx)
		mov    %ax,0x24(%edx)
		add    $0x4,%esp
		pop    %ebp
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_e0a4a:
/*----------------------------------------------------------------*/
		mov    nstart_ani,%eax
		mov    0x840(%eax),%ax
		movw   $0x41f,0x26(%edx)
		mov    %ax,0x24(%edx)
		add    $0x4,%esp
		pop    %ebp
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_e0a68:
/*----------------------------------------------------------------*/
		mov    nstart_ani,%eax
		mov    0x880(%eax),%ax
		movw   $0x43f,0x26(%edx)
		mov    %ax,0x24(%edx)
		add    $0x4,%esp
		pop    %ebp
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
func_e0a86:
/*----------------------------------------------------------------*/
		mov    nstart_ani,%eax
		mov    0x882(%eax),%ax
		movw   $0x440,0x26(%edx)
		mov    %ax,0x24(%edx)
		add    $0x4,%esp
		pop    %ebp
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret
	jump_e0aa4:
		mov    (%esp),%eax
		mov    (%esp),%ebp
		mov    %ax,0x2c(%edx)
		cmp    $0x19,%ebp
		ja     func_e0a2c
		mov    %ebp,%eax
		jmp    *%cs:vtable_e063c(,%eax,4)


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_things_bang)	/* 0x0E0AC4 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x4,%esp
		mov    %eax,%ebp
		xor    %eax,%eax
		xor    %edi,%edi
		mov    EXPORT_SYMBOL(things_used),%ax
		mov    things_used_head,%di
		mov    %eax,(%esp)
		test   %edi,%edi
		jle    jump_e0b8d
	jump_e0aeb:
		mov    (%esp),%edx
		dec    %edx
		mov    %edx,(%esp)
		cmp    $0xffffffff,%edx
		je     jump_e0b8d
		imul   $0xa8,%edi,%esi
		mov    things,%eax
		add    %eax,%esi
		mov    0x4(%esi),%edi
		mov    0xc(%esi),%ah
		sar    $0x10,%edi
		test   $0x2,%ah
		je     jump_e0b7c
		call   ac_LbRandomAnyShort
		test   $0x3,%al
		jne    jump_e0b7c
		xor    %eax,%eax
		mov    0x9(%esi),%al
		cmp    $0x3,%eax
		jne    jump_e0b3e
		testb  $0x20,0xd(%esi)
		jne    jump_e0b3e
		xor    %eax,%eax
		mov    0xa(%esi),%ax
		cmp    $0xd,%eax
		je     jump_e0b52
	jump_e0b3e:
		xor    %eax,%eax
		mov    0x9(%esi),%al
		cmp    $0xf,%eax
		jne    jump_e0b7c
		xor    %eax,%eax
		mov    0x8(%esi),%al
		cmp    $0x30,%eax
		jne    jump_e0b7c
	jump_e0b52:
		mov    $0x37,%ecx
		mov    0x18(%esi),%eax
		mov    0x1c(%esi),%edx
		mov    0x20(%esi),%ebx
		call   ac_bang_new4
		mov    %esi,%eax
		call   ac_delete_node
		xor    %eax,%eax
		mov    0x16(%esi),%ax
		dec    %ebp
		call   ac_remove_thing
		test   %ebp,%ebp
		jle    jump_e0b86
	jump_e0b7c:
		test   %edi,%edi
		jg     jump_e0aeb
		jmp    jump_e0b8d
	jump_e0b86:
		mov    $0x1,%eax
		jmp    jump_e0b8f
	jump_e0b8d:
		xor    %eax,%eax
	jump_e0b8f:
		add    $0x4,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_process_things_mines_explode)	/* 0x0E0B9C */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		sub    $0x8,%esp
		mov    %eax,%edi
		xor    %eax,%eax
		mov    $0x258,%edx
		mov    ingame__fld_unkCB7,%ax
		sub    %eax,%edx
		mov    %edx,(%esp)
		cmp    $0x1e,%edx
		jge    jump_e0bc5
		movl   $0x1e,(%esp)
	jump_e0bc5:
		mov    sthings_empty_head,%eax
		sar    $0x10,%eax
		movzwl EXPORT_SYMBOL(sthings_used),%ebp
		test   %eax,%eax
		jge    jump_e0c76
	jump_e0bdc:
		dec    %ebp
		cmp    $0xffffffff,%ebp
		je     jump_e0c76
		imul   $0x3c,%eax,%eax
		mov    EXPORT_SYMBOL(sthings),%esi
		add    %eax,%esi
		mov    0x4(%esi),%eax
		sar    $0x10,%eax
		mov    %eax,0x4(%esp)
		xor    %eax,%eax
		mov    0x9(%esi),%al
		cmp    $0x19,%eax
		je     jump_e0c5d
		jmp    jump_e0c6a
	jump_e0c07:
		call   ac_LbRandomAnyShort
		test   $0x1,%al
		jne    jump_e0c6a
	jump_e0c10:
		xor    %eax,%eax
		mov    (%esp),%edx
		mov    0x30(%esi),%ax
		cmp    %edx,%eax
		jl     jump_e0c6a
		mov    $0x37,%ecx
		mov    0x18(%esi),%eax
		mov    0x1c(%esi),%edx
		mov    0x20(%esi),%ebx
		call   ac_bang_new4
		mov    %esi,%eax
		call   ac_delete_snode
		mov    0x14(%esi),%eax
		sar    $0x10,%eax
		call   ac_remove_sthing
		mov    ingame__fld_unkCB7,%dx
		dec    %edx
		dec    %edi
		mov    %dx,ingame__fld_unkCB7
		test   %edi,%edi
		jg     jump_e0c6a
		mov    $0x1,%eax
		jmp    jump_e0c78
	jump_e0c5d:
		mov    0x8(%esi),%al
		cmp    $0x1b,%al
		jb     jump_e0c10
		cmp    $0x1c,%al
		jbe    jump_e0c07
		jmp    jump_e0c10
	jump_e0c6a:
		mov    0x4(%esp),%eax
		test   %eax,%eax
		jl     jump_e0bdc
	jump_e0c76:
		xor    %eax,%eax
	jump_e0c78:
		add    $0x8,%esp
		pop    %ebp
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_net_unkn_func_12)	/* 0x0E57B0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		mov    %eax,%ecx
		mov    $0x8,%ebx
		xor    %edx,%edx
		call   ac_memset
		mov    EXPORT_SYMBOL(NetworkServicePtr)+0x6,%ax	/* NetworkServicePtr.I.Type */
		mov    $0xffffffff,%esi
		cmp    $0x1,%ax
		je     jump_e57da
	jump_e57d3:
		mov    %esi,%eax
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret
	jump_e57da:
		mov    $0x1,%esi
		mov    $EXPORT_SYMBOL(IPXPlayer)+0x2D,%edx
		mov    %ecx,%eax
		lea    0x8(%ecx),%ebx
		cmpw   $0x0,0x1a(%edx)
		je     jump_e57f3
		movb   $0x1,(%eax)
	jump_e57f3:
		inc    %eax
		add    $0x1c,%edx
		cmp    %ebx,%eax
		je     jump_e57d3
		cmpw   $0x0,0x1a(%edx)
		je     jump_e57f3
		movb   $0x1,(%eax)
		jmp    jump_e57f3


/*----------------------------------------------------------------*/
.section .rodata
data_e5890:
		.ascii  "con\x00"
.text


/*----------------------------------------------------------------*/
GLOBAL_FUNC (____GETDS)	/* 0xe5ae8 */
/*----------------------------------------------------------------*/
		data16 		mov    %cs:data_e5af1,%ds
		ret
.data
data_e5af1:
		.short  0x0
data_e5af3:
		.fill   0xd
.text


/*----------------------------------------------------------------*/
GLOBAL_FUNC (ASM_arctan)	/* 0x0EA01C */
/*----------------------------------------------------------------*/
		push   %ebp
		mov    %esp,%ebp
		add    $0xfffffff8,%esp
		push   %ebx
		push   %edx
		mov    %eax,-0x4(%ebp)
		mov    %edx,-0x8(%ebp)
		mov    -0x4(%ebp),%eax
		or     %eax,%eax
		jne    jump_ea03f
		mov    -0x8(%ebp),%ebx
		or     %ebx,%ebx
		jne    jump_ea042
		xor    %ax,%ax
		pop    %edx
		pop    %ebx
		leave
		ret
	jump_ea03f:
		mov    -0x8(%ebp),%ebx
	jump_ea042:
		or     %eax,%eax
		js     jump_ea0b4
		or     %ebx,%ebx
		js     jump_ea080
		cmp    %ebx,%eax
		jl     jump_ea066
		xchg   %eax,%ebx
		shl    $0x8,%eax
		xor    %edx,%edx
		div    %ebx
		mov    data_ea128(,%eax,2),%ax
		add    $0x200,%ax
		pop    %edx
		pop    %ebx
		leave
		ret
	jump_ea066:
		shl    $0x8,%eax
		xor    %edx,%edx
		div    %ebx
		mov    data_ea128(,%eax,2),%ax
		neg    %ax
		add    $0x400,%ax
		pop    %edx
		pop    %ebx
		leave
		ret
	jump_ea080:
		neg    %ebx
		cmp    %ebx,%eax
		jl     jump_ea0a1
		xchg   %eax,%ebx
		shl    $0x8,%eax
		xor    %edx,%edx
		div    %ebx
		mov    data_ea128(,%eax,2),%ax
		neg    %ax
		add    $0x200,%ax
		pop    %edx
		pop    %ebx
		leave
		ret
	jump_ea0a1:
		shl    $0x8,%eax
		xor    %edx,%edx
		div    %ebx
		mov    data_ea128(,%eax,2),%ax
		pop    %edx
		pop    %ebx
		leave
		ret
	jump_ea0b4:
		neg    %eax
		or     %ebx,%ebx
		js     jump_ea0f0
		cmp    %ebx,%eax
		jl     jump_ea0d9
		xchg   %eax,%ebx
		shl    $0x8,%eax
		xor    %edx,%edx
		div    %ebx
		mov    data_ea128(,%eax,2),%ax
		neg    %ax
		add    $0x600,%ax
		pop    %edx
		pop    %ebx
		leave
		ret
	jump_ea0d9:
		shl    $0x8,%eax
		xor    %edx,%edx
		div    %ebx
		mov    data_ea128(,%eax,2),%ax
		add    $0x400,%ax
		pop    %edx
		pop    %ebx
		leave
		ret
	jump_ea0f0:
		neg    %ebx
		cmp    %ebx,%eax
		jl     jump_ea10e
		xchg   %eax,%ebx
		shl    $0x8,%eax
		xor    %edx,%edx
		div    %ebx
		mov    data_ea128(,%eax,2),%ax
		add    $0x600,%ax
		pop    %edx
		pop    %ebx
		leave
		ret
	jump_ea10e:
		shl    $0x8,%eax
		xor    %edx,%edx
		div    %ebx
		mov    data_ea128(,%eax,2),%ax
		neg    %ax
		add    $0x800,%ax
		pop    %edx
		pop    %ebx
		leave
		ret

.section .rodata
data_ea128:
		.ascii  "\x00\x00\x01\x00\x02\x00\x03\x00"
		.ascii  "\x05\x00\x06\x00\x07\x00\x08\x00"
		.ascii  "\x0a\x00\x0b\x00\x0c\x00\x0d\x00"
		.ascii  "\x0f\x00\x10\x00\x11\x00\x13\x00"
		.ascii  "\x14\x00\x15\x00\x16\x00\x18\x00"
		.ascii  "\x19\x00\x1a\x00\x1b\x00\x1d\x00"
		.ascii  "\x1e\x00\x1f\x00\x20\x00\x22\x00"
		.ascii  "\x23\x00\x24\x00\x26\x00\x27\x00"
		.ascii  "\x28\x00\x29\x00\x2b\x00\x2c\x00"
		.ascii  "\x2d\x00\x2e\x00\x30\x00\x31\x00"
		.ascii  "\x32\x00\x33\x00\x35\x00\x36\x00"
		.ascii  "\x37\x00\x38\x00\x39\x00\x3b\x00"
		.ascii  "\x3c\x00\x3d\x00\x3e\x00\x40\x00"
		.ascii  "\x41\x00\x42\x00\x43\x00\x44\x00"
		.ascii  "\x46\x00\x47\x00\x48\x00\x49\x00"
		.ascii  "\x4b\x00\x4c\x00\x4d\x00\x4e\x00"
		.ascii  "\x4f\x00\x51\x00\x52\x00\x53\x00"
		.ascii  "\x54\x00\x55\x00\x57\x00\x58\x00"
		.ascii  "\x59\x00\x5a\x00\x5b\x00\x5c\x00"
		.ascii  "\x5e\x00\x5f\x00\x60\x00\x61\x00"
		.ascii  "\x62\x00\x63\x00\x65\x00\x66\x00"
		.ascii  "\x67\x00\x68\x00\x69\x00\x6a\x00"
		.ascii  "\x6b\x00\x6d\x00\x6e\x00\x6f\x00"
		.ascii  "\x70\x00\x71\x00\x72\x00\x73\x00"
		.ascii  "\x74\x00\x76\x00\x77\x00\x78\x00"
		.ascii  "\x79\x00\x7a\x00\x7b\x00\x7c\x00"
		.ascii  "\x7d\x00\x7e\x00\x7f\x00\x81\x00"
		.ascii  "\x82\x00\x83\x00\x84\x00\x85\x00"
		.ascii  "\x86\x00\x87\x00\x88\x00\x89\x00"
		.ascii  "\x8a\x00\x8b\x00\x8c\x00\x8d\x00"
		.ascii  "\x8e\x00\x8f\x00\x90\x00\x91\x00"
		.ascii  "\x93\x00\x94\x00\x95\x00\x96\x00"
		.ascii  "\x97\x00\x98\x00\x99\x00\x9a\x00"
		.ascii  "\x9b\x00\x9c\x00\x9d\x00\x9e\x00"
		.ascii  "\x9f\x00\xa0\x00\xa1\x00\xa2\x00"
		.ascii  "\xa3\x00\xa4\x00\xa5\x00\xa6\x00"
		.ascii  "\xa7\x00\xa7\x00\xa8\x00\xa9\x00"
		.ascii  "\xaa\x00\xab\x00\xac\x00\xad\x00"
		.ascii  "\xae\x00\xaf\x00\xb0\x00\xb1\x00"
		.ascii  "\xb2\x00\xb3\x00\xb4\x00\xb5\x00"
		.ascii  "\xb6\x00\xb6\x00\xb7\x00\xb8\x00"
		.ascii  "\xb9\x00\xba\x00\xbb\x00\xbc\x00"
		.ascii  "\xbd\x00\xbe\x00\xbf\x00\xbf\x00"
		.ascii  "\xc0\x00\xc1\x00\xc2\x00\xc3\x00"
		.ascii  "\xc4\x00\xc5\x00\xc6\x00\xc6\x00"
		.ascii  "\xc7\x00\xc8\x00\xc9\x00\xca\x00"
		.ascii  "\xcb\x00\xcb\x00\xcc\x00\xcd\x00"
		.ascii  "\xce\x00\xcf\x00\xd0\x00\xd0\x00"
		.ascii  "\xd1\x00\xd2\x00\xd3\x00\xd4\x00"
		.ascii  "\xd4\x00\xd5\x00\xd6\x00\xd7\x00"
		.ascii  "\xd8\x00\xd8\x00\xd9\x00\xda\x00"
		.ascii  "\xdb\x00\xdc\x00\xdc\x00\xdd\x00"
		.ascii  "\xde\x00\xdf\x00\xdf\x00\xe0\x00"
		.ascii  "\xe1\x00\xe2\x00\xe2\x00\xe3\x00"
		.ascii  "\xe4\x00\xe5\x00\xe5\x00\xe6\x00"
		.ascii  "\xe7\x00\xe8\x00\xe8\x00\xe9\x00"
		.ascii  "\xea\x00\xeb\x00\xeb\x00\xec\x00"
		.ascii  "\xed\x00\xed\x00\xee\x00\xef\x00"
		.ascii  "\xef\x00\xf0\x00\xf1\x00\xf2\x00"
		.ascii  "\xf2\x00\xf3\x00\xf4\x00\xf4\x00"
		.ascii  "\xf5\x00\xf6\x00\xf6\x00\xf7\x00"
		.ascii  "\xf8\x00\xf8\x00\xf9\x00\xfa\x00"
		.ascii  "\xfa\x00\xfb\x00\xfc\x00\xfc\x00"
		.ascii  "\xfd\x00\xfe\x00\xfe\x00\xff\x00"
		.ascii  "\x00\x01"

.text

/*----------------------------------------------------------------*/
GLOBAL_FUNC (_segread)	/* 0xf3904 */
/*----------------------------------------------------------------*/
		push   %edx
		mov    %eax,%edx
		mov    %cs,%eax
		mov    %ax,0x2(%edx)
		mov    %ds,%eax
		mov    %ax,0x6(%edx)
		mov    %es,%eax
		mov    %ax,(%edx)
		mov    %ss,%eax
		mov    %ax,0x4(%edx)
		mov    %fs,%eax
		mov    %ax,0x8(%edx)
		mov    %gs,%eax
		mov    %ax,0xa(%edx)
		pop    %edx
		ret


/*----------------------------------------------------------------*/
net_config_read_to_eol:
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		enter  $0xc,$0x0
		mov    %eax,-0x8(%ebp)
		mov    %edx,-0x4(%ebp)
	jump_fa087:
		mov    -0x8(%ebp),%eax
		call   ac_fgetc
		mov    %eax,-0xc(%ebp)
		cmpl   $0xd,-0xc(%ebp)
		je     jump_fa09e
		cmpl   $0xa,-0xc(%ebp)
		jne    jump_fa0a0
	jump_fa09e:
		jmp    jump_fa0b0
	jump_fa0a0:
		mov    -0xc(%ebp),%al
		mov    -0x4(%ebp),%edx
		mov    %al,(%edx)
		mov    -0x4(%ebp),%edx
		incl   -0x4(%ebp)
		jmp    jump_fa087
	jump_fa0b0:
		mov    -0x4(%ebp),%eax
		movb   $0x0,(%eax)
		leave
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret

/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_Net_AllocDosMem)	/* 0x0FA839 serial port comm mem allocator */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		enter  $0x28,$0x0
		mov    %eax,-0x8(%ebp)
		mov    %edx,-0x4(%ebp)
		movl   $0x100,-0x24(%ebp)
		mov    -0x8(%ebp),%eax
		add    $0xf,%eax
		shr    $0x4,%eax
		mov    %eax,-0x20(%ebp)
		lea    -0x24(%ebp),%ebx
		lea    -0x24(%ebp),%edx
		mov    $0x31,%eax
		call   ac_dos_int386
		cmpl   $0x0,-0xc(%ebp)
		je     jump_fa879
		movl   $0x0,-0x28(%ebp)
		jmp    jump_fa896
	jump_fa879:
		cmpl   $0x0,-0x4(%ebp)
		je     jump_fa888
		mov    -0x18(%ebp),%eax
		mov    -0x4(%ebp),%edx
		mov    %ax,(%edx)
	jump_fa888:
		mov    -0x24(%ebp),%eax
		and    $0xffff,%eax
		shl    $0x4,%eax
		mov    %eax,-0x28(%ebp)
	jump_fa896:
		mov    -0x28(%ebp),%eax
		leave
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_run_exchange_func)	/* 0x0FA89F */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		push   %ebp
		mov    %esp,%ebp
		sub    $0x4,%esp
		call   ac_dos_clock
		mov    %eax,run_exchange_func__end_time
		mov    run_exchange_func__end_time,%eax
		sub    run_exchange_func__start_time,%eax
		cmp    $0xa,%eax
		jbe    jump_fa8e5
		mov    run_exchange_func__end_time,%eax
		mov    %eax,run_exchange_func__start_time
		cmpl   $0x0,EXPORT_SYMBOL(NetworkServicePtr)+0x14	/* NetworkServicePtr.F.SessionExchange */
		je     jump_fa8e5
		call   *EXPORT_SYMBOL(NetworkServicePtr)+0x14	/* NetworkServicePtr.F.SessionExchange */
		mov    %eax,-0x4(%ebp)
		jmp    jump_fa8ec
	jump_fa8e5:
		movl   $0x0,-0x4(%ebp)
	jump_fa8ec:
		mov    -0x4(%ebp),%eax
		leave
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_net_unkn_func_02)	/* 0x0FA945 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		enter  $0x20,$0x0
		mov    %eax,-0x8(%ebp)
		mov    %edx,-0x4(%ebp)
		call   ac_LbTimerClock
		mov    %eax,-0x18(%ebp)
		movl   $0x1,-0x14(%ebp)
		movl   $0x0,-0x10(%ebp)
		mov    EXPORT_SYMBOL(data_1e85e3),%eax
		mov    %eax,-0x1c(%ebp)
	jump_fa971:
		cmpl   $0x1,-0x14(%ebp)
		jne    jump_fa9b8
		mov    -0x1c(%ebp),%eax
		call   ac_read_char
		mov    %eax,-0xc(%ebp)
		movswl -0xc(%ebp),%eax
		test   %eax,%eax
		jl     jump_fa9a2
		movl   $0x0,-0x14(%ebp)
		movl   $0x1,-0x10(%ebp)
		mov    -0xc(%ebp),%al
		mov    -0x8(%ebp),%edx
		mov    %al,(%edx)
		jmp    jump_fa9b6
	jump_fa9a2:
		call   ac_LbTimerClock
		sub    -0x18(%ebp),%eax
		cmp    -0x4(%ebp),%eax
		jbe    jump_fa9b6
		movl   $0x0,-0x14(%ebp)
	jump_fa9b6:
		jmp    jump_fa971
	jump_fa9b8:
		mov    -0x10(%ebp),%eax
		mov    %eax,-0x20(%ebp)
		mov    -0x20(%ebp),%eax
		leave
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_net_unkn_callback2)	/* 0x0FA9C7 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		enter  $0x18,$0x0
		mov    %eax,-0xc(%ebp)
		mov    %edx,-0x8(%ebp)
		mov    %ebx,-0x4(%ebp)
		movl   $0x0,-0x14(%ebp)
		movl   $0x1,-0x10(%ebp)
	jump_fa9e5:
		cmpl   $0x1,-0x10(%ebp)
		jne    jump_faa1f
		mov    -0x14(%ebp),%eax
		cmp    -0x8(%ebp),%eax
		jb     jump_fa9fc
		movl   $0x0,-0x10(%ebp)
		jmp    jump_faa1d
	jump_fa9fc:
		mov    -0x4(%ebp),%edx
		mov    -0xc(%ebp),%eax
		add    -0x14(%ebp),%eax
		call   ASM_net_unkn_func_02
		test   %eax,%eax
		je     jump_faa16
		mov    -0x14(%ebp),%eax
		incl   -0x14(%ebp)
		jmp    jump_faa1d
	jump_faa16:
		movl   $0x0,-0x10(%ebp)
	jump_faa1d:
		jmp    jump_fa9e5
	jump_faa1f:
		mov    -0x14(%ebp),%eax
		mov    %eax,-0x18(%ebp)
		mov    -0x18(%ebp),%eax
		leave
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_handle_com_sub1)	/* 0x0FAADB */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		enter  $0x4,$0x0
		mov    %eax,-0x4(%ebp)
		mov    -0x4(%ebp),%eax
		incw   0x109e(%eax)
		mov    -0x4(%ebp),%eax
		movzwl 0x109e(%eax),%eax
		cmp    $0x7ff,%eax
		jle    jump_fab0e
		mov    -0x4(%ebp),%eax
		movw   $0x0,0x109e(%eax)
	jump_fab0e:
		leave
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(____CHK)	/* 0x10b1da, check for stack overflow */
/*----------------------------------------------------------------*/
		xchg   %eax,0x4(%esp)
		call   __STK
		mov    0x4(%esp),%eax
		ret    $0x4


/*----------------------------------------------------------------*/
__STK:	/* 0x10B1ED */
/*----------------------------------------------------------------*/
#if 0 /* disable stack overflow checking */
		cmp    %esp,%eax
		jae    jump_10b1fe
		sub    %esp,%eax
		neg    %eax
		cmp    __STACKLOW,%eax
		jbe    jump_10b1fe
		ret
	jump_10b1fe:
		mov    %ss,%ax
		cmp    data_159608,%ax
		je     ____STKOVERFLOW_
#endif
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(delay_)	/* 0x10b24a */
/*----------------------------------------------------------------*/
		jmp    __delay_



/*----------------------------------------------------------------*/
net_unkn_sub_323:	/* 0x10C9A6 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		enter  $0xb4,$0x0
		mov    %eax,-0xc(%ebp)
		mov    %edx,-0x8(%ebp)
		mov    %ebx,-0x4(%ebp)
		movb   $0x0,-0x10(%ebp)
		movl   $0x1,-0x14(%ebp)
		cmpl   $0x0,-0x8(%ebp)
		je     jump_10ccfd
		mov    -0xc(%ebp),%eax
		cmpl   $0x0,0x110(%eax)
		je     jump_10ca26
		mov    -0x4(%ebp),%eax
		mov    -0xc(%ebp),%edx
		cmp    0x8d(%edx),%eax
		je     jump_10c9ee
		movl   $0x0,-0x14(%ebp)
		jmp    jump_10ca24
	jump_10c9ee:
		movl   $0x0,-0x24(%ebp)
		jmp    jump_10c9fd
	jump_10c9f7:
		mov    -0x24(%ebp),%eax
		incl   -0x24(%ebp)
	jump_10c9fd:
		mov    -0x24(%ebp),%eax
		cmp    -0x4(%ebp),%eax
		jae    jump_10ca24
		mov    -0xc(%ebp),%eax
		add    -0x24(%ebp),%eax
		mov    -0x8(%ebp),%edx
		add    -0x24(%ebp),%edx
		mov    (%edx),%dl
		cmp    0x91(%eax),%dl
		je     jump_10ca22
		movl   $0x0,-0x14(%ebp)
	jump_10ca22:
		jmp    jump_10c9f7
	jump_10ca24:
		jmp    jump_10ca2d
	jump_10ca26:
		movl   $0x0,-0x14(%ebp)
	jump_10ca2d:
		mov    -0xc(%ebp),%eax
		cmpl   $0x0,0x1ab(%eax)
		je     jump_10ca40
		movl   $0x0,-0x14(%ebp)
	jump_10ca40:
		cmpl   $0x0,-0x14(%ebp)
		je     jump_10caa6
		movb   $0xad,-0x28(%ebp)
		mov    -0xc(%ebp),%eax
		mov    (%eax),%al
		mov    %al,-0x26(%ebp)
		mov    -0x28(%ebp),%al
		xor    -0x26(%ebp),%al
		and    $0x7f,%al
		mov    %al,-0x27(%ebp)
		mov    $0x3,%ebx
		lea    -0x28(%ebp),%edx
		mov    -0xc(%ebp),%eax
		call   net_unkn_sub_335
		movl   $0x0,-0x24(%ebp)
		jmp    jump_10ca7c
	jump_10ca76:
		mov    -0x24(%ebp),%eax
		incl   -0x24(%ebp)
	jump_10ca7c:
		cmpl   $0x3,-0x24(%ebp)
		jae    jump_10ca94
		mov    -0xc(%ebp),%edx
		add    -0x24(%ebp),%edx
		mov    -0x24(%ebp),%eax
		mov    -0x28(%eax,%ebp,1),%al
		mov    %al,0xa(%edx)
		jmp    jump_10ca76
	jump_10ca94:
		mov    -0xc(%ebp),%eax
		movl   $0x1,0x89(%eax)
		jmp    jump_10ccfd
	jump_10caa6:
		mov    -0xc(%ebp),%eax
		movl   $0x0,0x110(%eax)
		movl   $0x0,-0x18(%ebp)
		movl   $0x0,-0x20(%ebp)
		jmp    jump_10cac9
	jump_10cac3:
		mov    -0x18(%ebp),%eax
		incl   -0x18(%ebp)
	jump_10cac9:
		mov    -0x18(%ebp),%eax
		cmp    -0x4(%ebp),%eax
		jae    jump_10cbd9
		mov    -0x8(%ebp),%eax
		add    -0x18(%ebp),%eax
		mov    (%eax),%al
		mov    %al,-0x2c(%ebp)
		jmp    jump_10cbaf


/*----------------------------------------------------------------*/
func_10cae5:
/*----------------------------------------------------------------*/
		mov    -0x20(%ebp),%eax
		incl   -0x20(%ebp)
		movb   $0xae,-0xac(%eax,%ebp,1)
		mov    -0x20(%ebp),%eax
		incl   -0x20(%ebp)
		movb   $0x0,-0xac(%eax,%ebp,1)
		jmp    jump_10cbd4


/*----------------------------------------------------------------*/
func_10cb06:
/*----------------------------------------------------------------*/
		mov    -0x20(%ebp),%eax
		incl   -0x20(%ebp)
		movb   $0xae,-0xac(%eax,%ebp,1)
		mov    -0x20(%ebp),%eax
		incl   -0x20(%ebp)
		movb   $0x1,-0xac(%eax,%ebp,1)
		jmp    jump_10cbd4


/*----------------------------------------------------------------*/
func_10cb27:
/*----------------------------------------------------------------*/
		mov    -0x20(%ebp),%eax
		incl   -0x20(%ebp)
		movb   $0xae,-0xac(%eax,%ebp,1)
		mov    -0x20(%ebp),%eax
		incl   -0x20(%ebp)
		movb   $0x2,-0xac(%eax,%ebp,1)
		jmp    jump_10cbd4


/*----------------------------------------------------------------*/
func_10cb48:
/*----------------------------------------------------------------*/
		mov    -0x20(%ebp),%eax
		incl   -0x20(%ebp)
		movb   $0xae,-0xac(%eax,%ebp,1)
		mov    -0x20(%ebp),%eax
		incl   -0x20(%ebp)
		movb   $0x3,-0xac(%eax,%ebp,1)
		jmp    jump_10cbd4


/*----------------------------------------------------------------*/
func_10cb66:
/*----------------------------------------------------------------*/
		mov    -0x20(%ebp),%eax
		incl   -0x20(%ebp)
		movb   $0xae,-0xac(%eax,%ebp,1)
		mov    -0x20(%ebp),%eax
		incl   -0x20(%ebp)
		movb   $0x4,-0xac(%eax,%ebp,1)
		jmp    jump_10cbd4
	jump_10cb84:
		mov    -0x8(%ebp),%eax
		add    -0x18(%ebp),%eax
		mov    -0x20(%ebp),%edx
		incl   -0x20(%ebp)
		mov    (%eax),%al
		mov    %al,-0xac(%edx,%ebp,1)
		jmp    jump_10cbd4

vtable_10cb9b:
		.long   func_10cae5
		.long   func_10cb06
		.long   func_10cb27
		.long   func_10cb48
		.long   func_10cb66

	jump_10cbaf:
		mov    -0x2c(%ebp),%al
		sub    $0xaa,%al
		mov    %al,-0xb0(%ebp)
		cmpb   $0x4,-0xb0(%ebp)
		ja     jump_10cb84
		movzbl -0xb0(%ebp),%eax
		shl    $0x2,%eax
		jmp    *%cs:vtable_10cb9b(%eax)
	jump_10cbd4:
		jmp    jump_10cac3
	jump_10cbd9:
		mov    -0x20(%ebp),%eax
		mov    %eax,-0x1c(%ebp)
		xorb   $0xaa,-0x10(%ebp)
		mov    -0x1c(%ebp),%al
		xor    %al,-0x10(%ebp)
		mov    -0xc(%ebp),%eax
		mov    (%eax),%al
		xor    %al,-0x10(%ebp)
		movl   $0x0,-0x24(%ebp)
		jmp    jump_10cc00
	jump_10cbfa:
		mov    -0x24(%ebp),%eax
		incl   -0x24(%ebp)
	jump_10cc00:
		mov    -0x24(%ebp),%eax
		cmp    -0x1c(%ebp),%eax
		jae    jump_10cc17
		mov    -0x24(%ebp),%eax
		mov    -0xac(%eax,%ebp,1),%al
		xor    %al,-0x10(%ebp)
		jmp    jump_10cbfa
	jump_10cc17:
		movb   $0xaa,-0xb4(%ebp)
		mov    -0x1c(%ebp),%al
		mov    %al,-0xb3(%ebp)
		mov    -0x10(%ebp),%al
		and    $0x7f,%al
		mov    %al,-0xb2(%ebp)
		mov    -0xc(%ebp),%eax
		mov    (%eax),%al
		mov    %al,-0xb1(%ebp)
		mov    $0x4,%ebx
		lea    -0xb4(%ebp),%edx
		mov    -0xc(%ebp),%eax
		call   net_unkn_sub_335
		mov    -0x1c(%ebp),%ebx
		lea    -0xac(%ebp),%edx
		mov    -0xc(%ebp),%eax
		call   net_unkn_sub_335
		movl   $0x0,-0x24(%ebp)
		jmp    jump_10cc70
	jump_10cc6a:
		mov    -0x24(%ebp),%eax
		incl   -0x24(%ebp)
	jump_10cc70:
		cmpl   $0x4,-0x24(%ebp)
		jae    jump_10cc8b
		mov    -0xc(%ebp),%edx
		add    -0x24(%ebp),%edx
		mov    -0x24(%ebp),%eax
		mov    -0xb4(%eax,%ebp,1),%al
		mov    %al,0xa(%edx)
		jmp    jump_10cc6a
	jump_10cc8b:
		movl   $0x0,-0x24(%ebp)
		jmp    jump_10cc9a
	jump_10cc94:
		mov    -0x24(%ebp),%eax
		incl   -0x24(%ebp)
	jump_10cc9a:
		mov    -0x24(%ebp),%eax
		cmp    -0x1c(%ebp),%eax
		jae    jump_10ccb7
		mov    -0xc(%ebp),%edx
		add    -0x24(%ebp),%edx
		mov    -0x24(%ebp),%eax
		mov    -0xac(%eax,%ebp,1),%al
		mov    %al,0xe(%edx)
		jmp    jump_10cc94
	jump_10ccb7:
		mov    -0xc(%ebp),%eax
		movl   $0x1,0x89(%eax)
		mov    -0x4(%ebp),%eax
		mov    -0xc(%ebp),%edx
		mov    %eax,0x8d(%edx)
		movl   $0x0,-0x24(%ebp)
		jmp    jump_10ccdf
	jump_10ccd9:
		mov    -0x24(%ebp),%eax
		incl   -0x24(%ebp)
	jump_10ccdf:
		mov    -0x24(%ebp),%eax
		cmp    -0x4(%ebp),%eax
		jae    jump_10ccfd
		mov    -0x8(%ebp),%eax
		add    -0x24(%ebp),%eax
		mov    -0xc(%ebp),%edx
		add    -0x24(%ebp),%edx
		mov    (%eax),%al
		mov    %al,0x91(%edx)
		jmp    jump_10ccd9
	jump_10ccfd:
		leave
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
net_unkn_sub_324:	/* 0x10CD02 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		enter  $0x2c,$0x0
		mov    %eax,-0x10(%ebp)
		mov    %edx,-0xc(%ebp)
		mov    %ebx,-0x8(%ebp)
		mov    %ecx,-0x4(%ebp)
		movb   $0x0,-0x1c(%ebp)
		movl   $0x1,-0x20(%ebp)
		movl   $0x0,-0x24(%ebp)
		cmpl   $0x0,-0xc(%ebp)
		jne    jump_10cd37
		mov    -0x1c(%ebp),%al
		mov    %al,-0x18(%ebp)
		jmp    jump_10ce37
	jump_10cd37:
		cmpl   $0x0,-0x20(%ebp)
		je     jump_10ce31
		mov    -0x10(%ebp),%eax
		cmpl   $0x0,0x1a7(%eax)
		je     jump_10cd5b
		mov    $EXPORT_SYMBOL(aGettingHeaderB),%eax
		push   %eax
		call   ac_printf
		add    $0x4,%esp
	jump_10cd5b:
		mov    -0x4(%ebp),%ecx
		mov    $0x1,%ebx
		lea    -0x14(%ebp),%edx
		mov    -0x10(%ebp),%eax
		call   net_unkn_func_339
		cmp    $0x1,%eax
		jne    jump_10ce21
		movl   $0x0,-0x20(%ebp)
		movl   $0x1,-0x24(%ebp)
		mov    -0x14(%ebp),%al
		mov    %al,-0x28(%ebp)
		jmp    jump_10ce03


/*----------------------------------------------------------------*/
func_10cd90:
/*----------------------------------------------------------------*/
		mov    -0x4(%ebp),%ecx
		mov    -0x8(%ebp),%ebx
		mov    -0xc(%ebp),%edx
		mov    -0x10(%ebp),%eax
		call   net_unkn_sub_327
		mov    %al,-0x1c(%ebp)
		jmp    jump_10ce1f


/*----------------------------------------------------------------*/
func_10cda9:
/*----------------------------------------------------------------*/
		mov    $0xab,%edx
		mov    -0x10(%ebp),%eax
		call   net_unkn_func_337
		mov    %al,-0x1c(%ebp)
		jmp    jump_10ce1f


/*----------------------------------------------------------------*/
func_10cdbb:
/*----------------------------------------------------------------*/
		mov    $0xac,%edx
		mov    -0x10(%ebp),%eax
		call   net_unkn_func_337
		mov    %al,-0x1c(%ebp)
		jmp    jump_10ce1f


/*----------------------------------------------------------------*/
func_10cdcd:
/*----------------------------------------------------------------*/
		mov    -0x4(%ebp),%ecx
		mov    -0x8(%ebp),%ebx
		mov    -0xc(%ebp),%edx
		mov    -0x10(%ebp),%eax
		call   net_unkn_sub_328
		mov    %al,-0x1c(%ebp)
		jmp    jump_10ce1f
	jump_10cde3:
		movl   $0x1,-0x20(%ebp)
		movl   $0x0,-0x24(%ebp)
		jmp    jump_10ce1f

vtable_10cdf3:
		.long   func_10cd90
		.long   func_10cda9
		.long   func_10cdbb
		.long   func_10cdcd
	jump_10ce03:
		mov    -0x28(%ebp),%al
		sub    $0xaa,%al
		mov    %al,-0x2c(%ebp)
		cmpb   $0x3,-0x2c(%ebp)
		ja     jump_10cde3
		movzbl -0x2c(%ebp),%eax
		shl    $0x2,%eax
		jmp    *%cs:vtable_10cdf3(%eax)
	jump_10ce1f:
		jmp    jump_10ce2c
	jump_10ce21:
		movl   $0x0,-0x20(%ebp)
		movb   $0x1,-0x1c(%ebp)
	jump_10ce2c:
		jmp    jump_10cd37
	jump_10ce31:
		mov    -0x1c(%ebp),%al
		mov    %al,-0x18(%ebp)
	jump_10ce37:
		mov    -0x18(%ebp),%al
		leave
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
net_unkn_sub_325:	/* 0x10CE3E */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		enter  $0x10,$0x0
		mov    %eax,-0x8(%ebp)
		mov    %dl,-0x4(%ebp)
		movb   $0xab,-0xc(%ebp)
		mov    -0x8(%ebp),%eax
		mov    0x366(%eax),%al
		add    %al,%al
		mov    %al,-0x10(%ebp)
		mov    -0x4(%ebp),%al
		and    $0x7,%al
		movzbl %al,%eax
		add    -0x8(%ebp),%eax
		mov    0x3bb(%eax),%al
		xor    %al,-0x10(%ebp)
		movzbl -0x10(%ebp),%eax
		add    -0x8(%ebp),%eax
		mov    -0x4(%ebp),%dl
		and    $0x7,%dl
		mov    0x3c3(%eax),%al
		or     %dl,%al
		mov    %al,-0xb(%ebp)
		mov    $0x2,%ebx
		lea    -0xc(%ebp),%edx
		mov    -0x8(%ebp),%eax
		call   net_unkn_sub_335
		leave
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
net_unkn_sub_326:	/* 0x10CEA0 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		enter  $0x10,$0x0
		mov    %eax,-0x8(%ebp)
		mov    %dl,-0x4(%ebp)
		movb   $0xac,-0xc(%ebp)
		mov    -0x8(%ebp),%eax
		mov    0x367(%eax),%al
		add    %al,%al
		mov    %al,-0x10(%ebp)
		mov    -0x4(%ebp),%al
		and    $0x7,%al
		movzbl %al,%eax
		add    -0x8(%ebp),%eax
		mov    0x3bb(%eax),%al
		xor    %al,-0x10(%ebp)
		movzbl -0x10(%ebp),%eax
		add    -0x8(%ebp),%eax
		mov    -0x4(%ebp),%dl
		and    $0x7,%dl
		mov    0x3c3(%eax),%al
		or     %dl,%al
		mov    %al,-0xb(%ebp)
		mov    $0x2,%ebx
		lea    -0xc(%ebp),%edx
		mov    -0x8(%ebp),%eax
		call   net_unkn_sub_335
		leave
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
net_unkn_sub_327:	/* 0x10CF02 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		enter  $0xc4,$0x0
		mov    %eax,-0x10(%ebp)
		mov    %edx,-0xc(%ebp)
		mov    %ebx,-0x8(%ebp)
		mov    %ecx,-0x4(%ebp)
		movb   $0x0,-0x14(%ebp)
		movb   $0x0,-0x1c(%ebp)
		movl   $0x1,-0x34(%ebp)
		movl   $0x0,-0x38(%ebp)
		movb   $0xaa,-0x3c(%ebp)
		mov    -0x4(%ebp),%ecx
		mov    $0x3,%ebx
		lea    -0x3b(%ebp),%edx
		mov    -0x10(%ebp),%eax
		call   net_unkn_func_339
		cmp    $0x3,%eax
		jne    jump_10d2a7
		movzbl -0x3b(%ebp),%eax
		cmp    $0xaa,%eax
		jl     jump_10cf60
		movzbl -0x3b(%ebp),%eax
		cmp    $0xad,%eax
		jle    jump_10cf62
	jump_10cf60:
		jmp    jump_10cf7a
	jump_10cf62:
		mov    $0x3,%edx
		mov    -0x10(%ebp),%eax
		call   net_unkn_func_340
		mov    -0x14(%ebp),%al
		mov    %al,-0x18(%ebp)
		jmp    jump_10d2b1
	jump_10cf7a:
		movzbl -0x3a(%ebp),%eax
		cmp    $0xaa,%eax
		jl     jump_10cf90
		movzbl -0x3a(%ebp),%eax
		cmp    $0xad,%eax
		jle    jump_10cf92
	jump_10cf90:
		jmp    jump_10cfaa
	jump_10cf92:
		mov    $0x2,%edx
		mov    -0x10(%ebp),%eax
		call   net_unkn_func_340
		mov    -0x14(%ebp),%al
		mov    %al,-0x18(%ebp)
		jmp    jump_10d2b1
	jump_10cfaa:
		movzbl -0x39(%ebp),%eax
		cmp    $0xaa,%eax
		jl     jump_10cfc0
		movzbl -0x39(%ebp),%eax
		cmp    $0xad,%eax
		jle    jump_10cfc2
	jump_10cfc0:
		jmp    jump_10cfda
	jump_10cfc2:
		mov    $0x1,%edx
		mov    -0x10(%ebp),%eax
		call   net_unkn_func_340
		mov    -0x14(%ebp),%al
		mov    %al,-0x18(%ebp)
		jmp    jump_10d2b1
	jump_10cfda:
		movzbl -0x3b(%ebp),%eax
		cmp    $0x80,%eax
		jge    jump_10cff0
		movzbl -0x3a(%ebp),%eax
		cmp    $0x80,%eax
		jl     jump_10cff2
	jump_10cff0:
		jmp    jump_10cffd
	jump_10cff2:
		movzbl -0x39(%ebp),%eax
		cmp    $0x80,%eax
		jl     jump_10d002
	jump_10cffd:
		jmp    jump_10d296
	jump_10d002:
		movzbl -0x3b(%ebp),%eax
		mov    %eax,-0x24(%ebp)
		mov    -0x4(%ebp),%ecx
		mov    -0x24(%ebp),%ebx
		lea    -0xbc(%ebp),%edx
		mov    -0x10(%ebp),%eax
		call   net_unkn_func_339
		cmp    -0x24(%ebp),%eax
		jne    jump_10d290
		movl   $0x0,-0x28(%ebp)
	jump_10d02d:
		cmpl   $0x0,-0x34(%ebp)
		je     jump_10d088
		mov    -0x28(%ebp),%eax
		cmp    -0x24(%ebp),%eax
		jb     jump_10d044
		movl   $0x0,-0x34(%ebp)
		jmp    jump_10d086
	jump_10d044:
		mov    -0x28(%ebp),%eax
		movzbl -0xbc(%eax,%ebp,1),%eax
		cmp    $0xaa,%eax
		jl     jump_10d068
		mov    -0x28(%ebp),%eax
		movzbl -0xbc(%eax,%ebp,1),%eax
		cmp    $0xad,%eax
		jle    jump_10d06a
	jump_10d068:
		jmp    jump_10d080
	jump_10d06a:
		movl   $0x1,-0x38(%ebp)
		movl   $0x0,-0x34(%ebp)
		mov    -0x28(%ebp),%eax
		mov    %eax,-0x20(%ebp)
		jmp    jump_10d086
	jump_10d080:
		mov    -0x28(%ebp),%eax
		incl   -0x28(%ebp)
	jump_10d086:
		jmp    jump_10d02d
	jump_10d088:
		cmpl   $0x0,-0x38(%ebp)
		je     jump_10d0a7
		mov    -0x24(%ebp),%edx
		sub    -0x20(%ebp),%edx
		mov    -0x10(%ebp),%eax
		call   net_unkn_func_340
		mov    -0x14(%ebp),%al
		mov    %al,-0x18(%ebp)
		jmp    jump_10d2b1
	jump_10d0a7:
		mov    -0x3c(%ebp),%al
		xor    %al,-0x1c(%ebp)
		mov    -0x3b(%ebp),%al
		xor    %al,-0x1c(%ebp)
		mov    -0x39(%ebp),%al
		xor    %al,-0x1c(%ebp)
		movl   $0x0,-0x28(%ebp)
		jmp    jump_10d0c8
	jump_10d0c2:
		mov    -0x28(%ebp),%eax
		incl   -0x28(%ebp)
	jump_10d0c8:
		mov    -0x28(%ebp),%eax
		cmp    -0x24(%ebp),%eax
		jae    jump_10d0df
		mov    -0x28(%ebp),%eax
		mov    -0xbc(%eax,%ebp,1),%al
		xor    %al,-0x1c(%ebp)
		jmp    jump_10d0c2
	jump_10d0df:
		mov    -0x1c(%ebp),%al
		and    $0x7f,%al
		movzbl %al,%edx
		movzbl -0x3a(%ebp),%eax
		cmp    %eax,%edx
		jne    jump_10d27f
		mov    -0x10(%ebp),%eax
		movzbl 0x1(%eax),%eax
		inc    %eax
		and    $0x7f,%eax
		movzbl -0x39(%ebp),%edx
		cmp    %eax,%edx
		jne    jump_10d111
		mov    -0x14(%ebp),%al
		mov    %al,-0x18(%ebp)
		jmp    jump_10d2b1
	jump_10d111:
		movzbl -0x39(%ebp),%edx
		mov    -0x10(%ebp),%eax
		call   net_unkn_sub_325
		mov    -0x39(%ebp),%al
		mov    -0x10(%ebp),%edx
		cmp    0x1(%edx),%al
		jne    jump_10d131
		mov    -0x10(%ebp),%eax
		cmpl   $0x0,0x6(%eax)
		jne    jump_10d136
	jump_10d131:
		jmp    jump_10d27d
	jump_10d136:
		movl   $0x0,-0x30(%ebp)
		movl   $0x0,-0x2c(%ebp)
		jmp    jump_10d14c
	jump_10d146:
		mov    -0x30(%ebp),%eax
		incl   -0x30(%ebp)
	jump_10d14c:
		mov    -0x30(%ebp),%eax
		cmp    -0x24(%ebp),%eax
		jae    jump_10d227
		mov    -0x30(%ebp),%eax
		movzbl -0xbc(%eax,%ebp,1),%eax
		cmp    $0xae,%eax
		jne    jump_10d20d
		mov    -0x30(%ebp),%eax
		incl   -0x30(%ebp)
		mov    -0x30(%ebp),%eax
		mov    -0xbc(%eax,%ebp,1),%al
		mov    %al,-0xc0(%ebp)
		jmp    jump_10d1e5


/*----------------------------------------------------------------*/
func_10d186:
/*----------------------------------------------------------------*/
		mov    -0x2c(%ebp),%eax
		incl   -0x2c(%ebp)
		add    -0xc(%ebp),%eax
		movb   $0xaa,(%eax)
		jmp    jump_10d20b


/*----------------------------------------------------------------*/
func_10d197:
/*----------------------------------------------------------------*/
		mov    -0x2c(%ebp),%eax
		incl   -0x2c(%ebp)
		add    -0xc(%ebp),%eax
		movb   $0xab,(%eax)
		jmp    jump_10d20b


/*----------------------------------------------------------------*/
func_10d1a5:
/*----------------------------------------------------------------*/
		mov    -0x2c(%ebp),%eax
		incl   -0x2c(%ebp)
		add    -0xc(%ebp),%eax
		movb   $0xac,(%eax)
		jmp    jump_10d20b


/*----------------------------------------------------------------*/
func_10d1b3:
/*----------------------------------------------------------------*/
		mov    -0x2c(%ebp),%eax
		incl   -0x2c(%ebp)
		add    -0xc(%ebp),%eax
		movb   $0xad,(%eax)
		jmp    jump_10d20b


/*----------------------------------------------------------------*/
func_10d1c1:
/*----------------------------------------------------------------*/
		mov    -0x2c(%ebp),%eax
		incl   -0x2c(%ebp)
		add    -0xc(%ebp),%eax
		movb   $0xae,(%eax)
		jmp    jump_10d20b
	jump_10d1cf:
		jmp    jump_10d20b

vtable_10d1d1:
		.long   func_10d186
		.long   func_10d197
		.long   func_10d1a5
		.long   func_10d1b3
		.long   func_10d1c1
	jump_10d1e5:
		mov    -0xc0(%ebp),%al
		mov    %al,-0xc4(%ebp)
		cmpb   $0x4,-0xc4(%ebp)
		ja     jump_10d1cf
		movzbl -0xc4(%ebp),%eax
		shl    $0x2,%eax
		jmp    *%cs:vtable_10d1d1(%eax)
	jump_10d20b:
		jmp    jump_10d222
	jump_10d20d:
		mov    -0x2c(%ebp),%edx
		incl   -0x2c(%ebp)
		add    -0xc(%ebp),%edx
		mov    -0x30(%ebp),%eax
		mov    -0xbc(%eax,%ebp,1),%al
		mov    %al,(%edx)
	jump_10d222:
		jmp    jump_10d146
	jump_10d227:
		mov    -0x2c(%ebp),%eax
		mov    -0x8(%ebp),%edx
		mov    %eax,(%edx)
		mov    -0x8(%ebp),%eax
		mov    (%eax),%edx
		mov    -0x10(%ebp),%eax
		mov    %edx,0x114(%eax)
		movl   $0x0,-0x28(%ebp)
		jmp    jump_10d24c
	jump_10d246:
		mov    -0x28(%ebp),%eax
		incl   -0x28(%ebp)
	jump_10d24c:
		mov    -0x28(%ebp),%eax
		mov    -0x8(%ebp),%edx
		cmp    (%edx),%eax
		jae    jump_10d26c
		mov    -0xc(%ebp),%eax
		add    -0x28(%ebp),%eax
		mov    -0x10(%ebp),%edx
		add    -0x28(%ebp),%edx
		mov    (%eax),%al
		mov    %al,0x118(%edx)
		jmp    jump_10d246
	jump_10d26c:
		mov    -0x10(%ebp),%eax
		movl   $0x1,0x197(%eax)
		movb   $0x2,-0x14(%ebp)
	jump_10d27d:
		jmp    jump_10d28e
	jump_10d27f:
		mov    -0x10(%ebp),%eax
		movzbl 0x1(%eax),%edx
		mov    -0x10(%ebp),%eax
		call   net_unkn_sub_326
	jump_10d28e:
		jmp    jump_10d294
	jump_10d290:
		movb   $0x1,-0x14(%ebp)
	jump_10d294:
		jmp    jump_10d2a5
	jump_10d296:
		mov    -0x10(%ebp),%eax
		movzbl 0x1(%eax),%edx
		mov    -0x10(%ebp),%eax
		call   net_unkn_sub_326
	jump_10d2a5:
		jmp    jump_10d2ab
	jump_10d2a7:
		movb   $0x1,-0x14(%ebp)
	jump_10d2ab:
		mov    -0x14(%ebp),%al
		mov    %al,-0x18(%ebp)
	jump_10d2b1:
		mov    -0x18(%ebp),%al
		leave
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
net_unkn_sub_328:	/* 0x10D2B8 */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		enter  $0x24,$0x0
		mov    %eax,-0x10(%ebp)
		mov    %edx,-0xc(%ebp)
		mov    %ebx,-0x8(%ebp)
		mov    %ecx,-0x4(%ebp)
		movb   $0x0,-0x1c(%ebp)
		movb   $0x0,-0x18(%ebp)
		movb   $0xad,-0x20(%ebp)
		mov    -0x4(%ebp),%ecx
		mov    $0x2,%ebx
		lea    -0x1f(%ebp),%edx
		mov    -0x10(%ebp),%eax
		call   net_unkn_func_339
		cmp    $0x2,%eax
		jne    jump_10d436
		movzbl -0x1f(%ebp),%eax
		cmp    $0xaa,%eax
		jl     jump_10d308
		movzbl -0x1f(%ebp),%eax
		cmp    $0xad,%eax
		jle    jump_10d30a
	jump_10d308:
		jmp    jump_10d322
	jump_10d30a:
		mov    $0x2,%edx
		mov    -0x10(%ebp),%eax
		call   net_unkn_func_340
		mov    -0x1c(%ebp),%al
		mov    %al,-0x14(%ebp)
		jmp    jump_10d440
	jump_10d322:
		movzbl -0x1e(%ebp),%eax
		cmp    $0xaa,%eax
		jl     jump_10d338
		movzbl -0x1e(%ebp),%eax
		cmp    $0xad,%eax
		jle    jump_10d33a
	jump_10d338:
		jmp    jump_10d352
	jump_10d33a:
		mov    $0x1,%edx
		mov    -0x10(%ebp),%eax
		call   net_unkn_func_340
		mov    -0x1c(%ebp),%al
		mov    %al,-0x14(%ebp)
		jmp    jump_10d440
	jump_10d352:
		movzbl -0x1f(%ebp),%eax
		cmp    $0x80,%eax
		jge    jump_10d368
		movzbl -0x1e(%ebp),%eax
		cmp    $0x80,%eax
		jl     jump_10d36d
	jump_10d368:
		jmp    jump_10d425
	jump_10d36d:
		mov    -0x20(%ebp),%al
		xor    %al,-0x18(%ebp)
		mov    -0x1e(%ebp),%al
		xor    %al,-0x18(%ebp)
		mov    -0x18(%ebp),%al
		and    $0x7f,%al
		movzbl %al,%edx
		movzbl -0x1f(%ebp),%eax
		cmp    %eax,%edx
		jne    jump_10d414
		mov    -0x10(%ebp),%eax
		movzbl 0x1(%eax),%eax
		inc    %eax
		and    $0x7f,%eax
		movzbl -0x1e(%ebp),%edx
		cmp    %eax,%edx
		jne    jump_10d3ab
		mov    -0x1c(%ebp),%al
		mov    %al,-0x14(%ebp)
		jmp    jump_10d440
	jump_10d3ab:
		movzbl -0x1e(%ebp),%edx
		mov    -0x10(%ebp),%eax
		call   net_unkn_sub_325
		mov    -0x1e(%ebp),%al
		mov    -0x10(%ebp),%edx
		cmp    0x1(%edx),%al
		jne    jump_10d3cb
		mov    -0x10(%ebp),%eax
		cmpl   $0x0,0x6(%eax)
		jne    jump_10d3cd
	jump_10d3cb:
		jmp    jump_10d412
	jump_10d3cd:
		mov    -0x10(%ebp),%eax
		mov    0x114(%eax),%edx
		mov    -0x8(%ebp),%eax
		mov    %edx,(%eax)
		movl   $0x0,-0x24(%ebp)
		jmp    jump_10d3ea
	jump_10d3e4:
		mov    -0x24(%ebp),%eax
		incl   -0x24(%ebp)
	jump_10d3ea:
		mov    -0x24(%ebp),%eax
		mov    -0x10(%ebp),%edx
		cmp    0x114(%edx),%eax
		jae    jump_10d40e
		mov    -0x10(%ebp),%eax
		add    -0x24(%ebp),%eax
		mov    -0xc(%ebp),%edx
		add    -0x24(%ebp),%edx
		mov    0x118(%eax),%al
		mov    %al,(%edx)
		jmp    jump_10d3e4
	jump_10d40e:
		movb   $0x2,-0x1c(%ebp)
	jump_10d412:
		jmp    jump_10d423
	jump_10d414:
		mov    -0x10(%ebp),%eax
		movzbl 0x1(%eax),%edx
		mov    -0x10(%ebp),%eax
		call   net_unkn_sub_326
	jump_10d423:
		jmp    jump_10d434
	jump_10d425:
		mov    -0x10(%ebp),%eax
		movzbl 0x1(%eax),%edx
		mov    -0x10(%ebp),%eax
		call   net_unkn_sub_326
	jump_10d434:
		jmp    jump_10d43a
	jump_10d436:
		movb   $0x1,-0x1c(%ebp)
	jump_10d43a:
		mov    -0x1c(%ebp),%al
		mov    %al,-0x14(%ebp)
	jump_10d440:
		mov    -0x14(%ebp),%al
		leave
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
net_unkn_sub_329:	/* 0x10D447 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		enter  $0xc,$0x0
		mov    %eax,-0x4(%ebp)
		mov    -0x4(%ebp),%eax
		cmpl   $0x0,0x89(%eax)
		je     jump_10d506
		mov    -0x4(%ebp),%eax
		mov    0xa(%eax),%al
		mov    %al,-0x8(%ebp)
		jmp    jump_10d4e6
	jump_10d471:
		mov    -0x4(%ebp),%eax
		movzbl 0xb(%eax),%eax
		lea    0x4(%eax),%ebx
		mov    -0x4(%ebp),%edx
		add    $0xa,%edx
		mov    -0x4(%ebp),%eax
		call   net_unkn_sub_335
		mov    -0x4(%ebp),%eax
		cmpl   $0x0,0x1a7(%eax)
		je     jump_10d4ab
		mov    -0x4(%ebp),%eax
		movzbl 0xd(%eax),%eax
		push   %eax
		mov    $EXPORT_SYMBOL(aResendingD),%eax
		push   %eax
		call   ac_printf
		add    $0x8,%esp
	jump_10d4ab:
		jmp    jump_10d506
	jump_10d4ad:
		mov    $0x3,%ebx
		mov    -0x4(%ebp),%edx
		add    $0xa,%edx
		mov    -0x4(%ebp),%eax
		call   net_unkn_sub_335
		mov    -0x4(%ebp),%eax
		cmpl   $0x0,0x1a7(%eax)
		je     jump_10d4e2
		mov    -0x4(%ebp),%eax
		movzbl 0xc(%eax),%eax
		push   %eax
		mov    $EXPORT_SYMBOL(aResendingDelta),%eax
		push   %eax
		call   ac_printf
		add    $0x8,%esp
	jump_10d4e2:
		jmp    jump_10d506
	jump_10d4e4:
		jmp    jump_10d506
	jump_10d4e6:
		mov    -0x8(%ebp),%al
		mov    %al,-0xc(%ebp)
		cmpb   $0xaa,-0xc(%ebp)
		jb     jump_10d504
		cmpb   $0xaa,-0xc(%ebp)
		jbe    jump_10d471
		cmpb   $0xad,-0xc(%ebp)
		je     jump_10d4ad
		jmp    jump_10d4e4
	jump_10d504:
		jmp    jump_10d4e4
	jump_10d506:
		leave
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_unkn_exchange_start)	/* 0x10D50D */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		enter  $0xc,$0x0
		mov    %eax,-0xc(%ebp)
		mov    %edx,-0x8(%ebp)
		mov    %ebx,-0x4(%ebp)
		mov    -0xc(%ebp),%eax
		cmpl   $0x0,0x1a7(%eax)
		je     jump_10d53e
		mov    -0xc(%ebp),%eax
		movzbl (%eax),%eax
		push   %eax
		mov    $EXPORT_SYMBOL(aStartingExchan),%eax
		push   %eax
		call   ac_printf
		add    $0x8,%esp
	jump_10d53e:
		mov    -0x4(%ebp),%ebx
		mov    -0x8(%ebp),%edx
		mov    -0xc(%ebp),%eax
		call   net_unkn_sub_323
		mov    -0xc(%ebp),%eax
		movl   $0x1,0x2(%eax)
		leave
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_unkn_exchange)	/* 0x10D55B */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		enter  $0x28,$0x0
		mov    %eax,-0xc(%ebp)
		mov    %edx,-0x8(%ebp)
		mov    %ebx,-0x4(%ebp)
		movl   $0x1,-0x1c(%ebp)
		movl   $0x0,-0x18(%ebp)
		movl   $0x0,-0x10(%ebp)
		mov    -0xc(%ebp),%eax
		movl   $0x1,0x6(%eax)
		mov    -0xc(%ebp),%eax
		cmpl   $0x0,0x1a7(%eax)
		je     jump_10d59e
		mov    -0xc(%ebp),%eax
		call   net_unkn_change_state
	jump_10d59e:
		cmpl   $0x0,-0x1c(%ebp)
		je     jump_10d70a
		mov    -0xc(%ebp),%eax
		cmpl   $0x0,0x2(%eax)
		je     jump_10d5ba
		movl   $0x64,-0x14(%ebp)
		jmp    jump_10d5c1
	jump_10d5ba:
		movl   $0x7530,-0x14(%ebp)
	jump_10d5c1:
		mov    -0x14(%ebp),%ecx
		mov    -0x4(%ebp),%ebx
		mov    -0x8(%ebp),%edx
		mov    -0xc(%ebp),%eax
		call   net_unkn_sub_324
		mov    %al,-0x24(%ebp)
		jmp    jump_10d680


/*----------------------------------------------------------------*/
func_10d5da:
/*----------------------------------------------------------------*/
		mov    -0xc(%ebp),%eax
		movl   $0x0,0x6(%eax)
		mov    -0xc(%ebp),%eax
		cmpl   $0x0,0x1a7(%eax)
		je     jump_10d5f8
		mov    -0xc(%ebp),%eax
		call   net_unkn_change_state
	jump_10d5f8:
		jmp    jump_10d69a


/*----------------------------------------------------------------*/
func_10d5fd:
/*----------------------------------------------------------------*/
		mov    -0xc(%ebp),%eax
		movl   $0x0,0x2(%eax)
		mov    -0xc(%ebp),%eax
		cmpl   $0x0,0x1a7(%eax)
		je     jump_10d61b
		mov    -0xc(%ebp),%eax
		call   net_unkn_change_state
	jump_10d61b:
		mov    -0xc(%ebp),%eax
		movl   $0x1,0x110(%eax)
		jmp    jump_10d69a


/*----------------------------------------------------------------*/
func_10d62d:
/*----------------------------------------------------------------*/
		mov    -0xc(%ebp),%eax
		cmpl   $0x0,0x2(%eax)
		je     jump_10d644
		mov    -0xc(%ebp),%eax
		call   net_unkn_sub_329
		mov    -0x10(%ebp),%eax
		incl   -0x10(%ebp)
	jump_10d644:
		jmp    jump_10d69a


/*----------------------------------------------------------------*/
func_10d646:
/*----------------------------------------------------------------*/
		mov    -0xc(%ebp),%eax
		cmpl   $0x0,0x2(%eax)
		je     jump_10d65f
		mov    -0xc(%ebp),%eax
		call   net_unkn_sub_329
		mov    -0x10(%ebp),%eax
		incl   -0x10(%ebp)
		jmp    jump_10d666
	jump_10d65f:
		movl   $0x0,-0x1c(%ebp)
	jump_10d666:
		jmp    jump_10d69a


/*----------------------------------------------------------------*/
func_10d668:
/*----------------------------------------------------------------*/
		jmp    jump_10d69a
	jump_10d66a:
		jmp    jump_10d69a

vtable_10d66c:
		.long   func_10d668
		.long   func_10d646
		.long   func_10d5da
		.long   func_10d5fd
		.long   func_10d62d
	jump_10d680:
		mov    -0x24(%ebp),%al
		mov    %al,-0x28(%ebp)
		cmpb   $0x4,-0x28(%ebp)
		ja     jump_10d66a
		movzbl -0x28(%ebp),%eax
		shl    $0x2,%eax
		jmp    *%cs:vtable_10d66c(%eax)
	jump_10d69a:
		mov    -0xc(%ebp),%eax
		cmpl   $0x0,0x1a3(%eax)
		je     jump_10d6bb
		mov    -0xc(%ebp),%eax
		call   *0x1a3(%eax)
		cmp    $0xfffffff9,%eax
		jne    jump_10d6bb
		movl   $0x0,-0x1c(%ebp)
	jump_10d6bb:
		cmpl   $0x190,-0x10(%ebp)
		jb     jump_10d6cb
		movl   $0x0,-0x1c(%ebp)
	jump_10d6cb:
		mov    -0xc(%ebp),%eax
		cmpl   $0x0,0x2(%eax)
		jne    jump_10d6dd
		mov    -0xc(%ebp),%eax
		cmpl   $0x0,0x6(%eax)
		je     jump_10d6df
	jump_10d6dd:
		jmp    jump_10d705
	jump_10d6df:
		mov    -0xc(%ebp),%eax
		incb   0x1(%eax)
		mov    -0xc(%ebp),%eax
		andb   $0x7f,0x1(%eax)
		mov    -0xc(%ebp),%eax
		incb   (%eax)
		mov    -0xc(%ebp),%eax
		andb   $0x7f,(%eax)
		movl   $0x0,-0x1c(%ebp)
		movl   $0x1,-0x18(%ebp)
	jump_10d705:
		jmp    jump_10d59e
	jump_10d70a:
		mov    -0xc(%ebp),%eax
		cmpl   $0x0,0x1a7(%eax)
		je     jump_10d748
		mov    $EXPORT_SYMBOL(aCompletedExcha),%eax
		push   %eax
		call   ac_printf
		add    $0x4,%esp
		cmpl   $0x0,-0x18(%ebp)
		je     jump_10d73a
		mov    $EXPORT_SYMBOL(aTrue),%eax
		push   %eax
		call   ac_printf
		add    $0x4,%esp
		jmp    jump_10d748
	jump_10d73a:
		mov    $EXPORT_SYMBOL(aFalse),%eax
		push   %eax
		call   ac_printf
		add    $0x4,%esp
	jump_10d748:
		mov    -0x18(%ebp),%eax
		mov    %eax,-0x20(%ebp)
		mov    -0x20(%ebp),%eax
		leave
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_net_unkn_post_init_2)	/* 0x10D756 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		enter  $0x8,$0x0
		mov    %eax,-0x8(%ebp)
		mov    %edx,-0x4(%ebp)
		mov    -0x4(%ebp),%eax
		mov    -0x8(%ebp),%edx
		mov    %eax,0x19b(%edx)
		leave
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_net_unkn_post_init_3)	/* 0x10D776 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		enter  $0x8,$0x0
		mov    %eax,-0x8(%ebp)
		mov    %edx,-0x4(%ebp)
		mov    -0x4(%ebp),%eax
		mov    -0x8(%ebp),%edx
		mov    %eax,0x19f(%edx)
		leave
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_net_unkn_sub_332)	/* 0x10D796 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		enter  $0x8,$0x0
		mov    %eax,-0x8(%ebp)
		mov    %edx,-0x4(%ebp)
		mov    -0x4(%ebp),%eax
		mov    -0x8(%ebp),%edx
		mov    %eax,0x1a3(%edx)
		leave
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
net_unkn_sub_335:	/* 0x10D7F6 */
/*----------------------------------------------------------------*/
		push   %ecx
		push   %esi
		push   %edi
		enter  $0x214,$0x0
		mov    %eax,-0xc(%ebp)
		mov    %edx,-0x8(%ebp)
		mov    %ebx,-0x4(%ebp)
		mov    -0xc(%ebp),%eax
		cmpl   $0x0,0x19b(%eax)
		je     jump_10d8f7
		mov    -0xc(%ebp),%eax
		cmpl   $0x0,0x1a7(%eax)
		je     jump_10d86f
		mov    $EXPORT_SYMBOL(aTxData),%eax
		push   %eax
		call   ac_printf
		add    $0x4,%esp
		movl   $0x0,-0x10(%ebp)
		jmp    jump_10d83f
	jump_10d839:
		mov    -0x10(%ebp),%eax
		incl   -0x10(%ebp)
	jump_10d83f:
		mov    -0x10(%ebp),%eax
		cmp    -0x4(%ebp),%eax
		jae    jump_10d861
		mov    -0x8(%ebp),%eax
		add    -0x10(%ebp),%eax
		movzbl (%eax),%eax
		push   %eax
		mov    $EXPORT_SYMBOL(asc02x),%eax
		push   %eax
		call   ac_printf
		add    $0x8,%esp
		jmp    jump_10d839
	jump_10d861:
		mov    $data_1616c1,%eax
		push   %eax
		call   ac_printf
		add    $0x4,%esp
	jump_10d86f:
		mov    -0xc(%ebp),%eax
		cmpl   $0x0,0x2b7(%eax)
		je     jump_10d8e8
		movl   $0x0,-0x14(%ebp)
		jmp    jump_10d88a
	jump_10d884:
		mov    -0x14(%ebp),%eax
		incl   -0x14(%ebp)
	jump_10d88a:
		mov    -0x14(%ebp),%eax
		cmp    -0x4(%ebp),%eax
		jae    jump_10d8b9
		mov    -0x8(%ebp),%eax
		add    -0x14(%ebp),%eax
		movzbl (%eax),%eax
		push   %eax
		mov    $asc02x_0,%eax
		push   %eax
		imul   $0x3,-0x14(%ebp),%eax
		lea    -0x214(%ebp),%edx
		add    %edx,%eax
		push   %eax
		call   ac_sprintf
		add    $0xc,%esp
		jmp    jump_10d884
	jump_10d8b9:
		imul   $0x3,-0x4(%ebp),%ebx
		movb   $0xa,-0x214(%ebx,%ebp,1)
		imul   $0x3,-0x4(%ebp),%ebx
		movb   $0xd,-0x213(%ebx,%ebp,1)
		imul   $0x3,-0x4(%ebp),%edx
		inc    %edx
		inc    %edx
		lea    -0x214(%ebp),%eax
		mov    -0xc(%ebp),%ebx
		call   *0x19b(%ebx)
		jmp    jump_10d8f7
	jump_10d8e8:
		mov    -0x4(%ebp),%edx
		mov    -0x8(%ebp),%eax
		mov    -0xc(%ebp),%ebx
		call   *0x19b(%ebx)
	jump_10d8f7:
		leave
		pop    %edi
		pop    %esi
		pop    %ecx
		ret


/*----------------------------------------------------------------*/
net_unkn_func_339:	/* 0x10D8FC */
/*----------------------------------------------------------------*/
		push   %esi
		push   %edi
		enter  $0x38,$0x0
		mov    %eax,-0x10(%ebp)
		mov    %edx,-0xc(%ebp)
		mov    %ebx,-0x8(%ebp)
		mov    %ecx,-0x4(%ebp)
		movl   $0x1,-0x20(%ebp)
		movl   $0x0,-0x1c(%ebp)
		movl   $0x0,-0x14(%ebp)
		mov    -0x10(%ebp),%eax
		cmpl   $0x0,0x19f(%eax)
		je     jump_10dbca
		mov    -0x10(%ebp),%eax
		mov    0x2af(%eax),%edx
		mov    -0x10(%ebp),%eax
		cmp    0x2b3(%eax),%edx
		je     jump_10d9ae
	jump_10d947:
		cmpl   $0x0,-0x20(%ebp)
		je     jump_10d9ae
		mov    -0x1c(%ebp),%eax
		cmp    -0x8(%ebp),%eax
		jb     jump_10d95e
		movl   $0x0,-0x20(%ebp)
		jmp    jump_10d9ac
	jump_10d95e:
		mov    -0x10(%ebp),%eax
		mov    0x2b3(%eax),%edx
		mov    -0x10(%ebp),%eax
		incl   0x2b3(%eax)
		add    -0x10(%ebp),%edx
		mov    -0x1c(%ebp),%eax
		incl   -0x1c(%ebp)
		add    -0xc(%ebp),%eax
		mov    0x1af(%edx),%dl
		mov    %dl,(%eax)
		mov    -0x10(%ebp),%eax
		andl   $0xff,0x2b3(%eax)
		mov    -0x10(%ebp),%eax
		mov    0x2af(%eax),%edx
		mov    -0x10(%ebp),%eax
		cmp    0x2b3(%eax),%edx
		jne    jump_10d9ac
		movl   $0x0,-0x20(%ebp)
	jump_10d9ac:
		jmp    jump_10d947
	jump_10d9ae:
		mov    -0x1c(%ebp),%eax
		cmp    -0x8(%ebp),%eax
		jae    jump_10db71
		mov    -0x10(%ebp),%eax
		cmpl   $0x0,0x2b7(%eax)
		je     jump_10daf0
		movl   $0x1,-0x2c(%ebp)
		movl   $0x1,-0x30(%ebp)
		mov    EXPORT_SYMBOL(data_1596c4),%ax
		mov    %eax,-0x34(%ebp)
	jump_10d9e1:
		cmpl   $0x0,-0x30(%ebp)
		je     jump_10dadd
	jump_10d9eb:
		mov    $0xea60,%ebx
		mov    $0x1,%edx
		lea    -0x28(%ebp),%eax
		mov    -0x10(%ebp),%ecx
		call   *0x19f(%ecx)
		cmp    $0x1,%eax
		jne    jump_10d9eb
		movl   $0xff,-0x38(%ebp)
		movzbl -0x28(%ebp),%eax
		cmp    $0x30,%eax
		jl     jump_10da1f
		movzbl -0x28(%ebp),%eax
		cmp    $0x39,%eax
		jle    jump_10da21
	jump_10da1f:
		jmp    jump_10da2d
	jump_10da21:
		movzbl -0x28(%ebp),%eax
		sub    $0x30,%eax
		mov    %eax,-0x38(%ebp)
		jmp    jump_10da4b
	jump_10da2d:
		movzbl -0x28(%ebp),%eax
		cmp    $0x61,%eax
		jl     jump_10da3f
		movzbl -0x28(%ebp),%eax
		cmp    $0x66,%eax
		jle    jump_10da41
	jump_10da3f:
		jmp    jump_10da4b
	jump_10da41:
		movzbl -0x28(%ebp),%eax
		sub    $0x57,%eax
		mov    %eax,-0x38(%ebp)
	jump_10da4b:
		movzbl -0x28(%ebp),%eax
		cmp    $0xd,%eax
		jne    jump_10da5b
		movl   $0x0,-0x30(%ebp)
	jump_10da5b:
		cmpl   $0xff,-0x38(%ebp)
		je     jump_10dac9
		mov    $0x1,%edx
		lea    -0x28(%ebp),%eax
		mov    -0x10(%ebp),%ebx
		call   *0x19b(%ebx)
		cmpl   $0x0,-0x2c(%ebp)
		je     jump_10da99
		mov    -0x38(%ebp),%al
		shl    $0x4,%al
		and    $0xf0,%al
		mov    %al,%dl
		mov    -0x1c(%ebp),%eax
		add    -0x14(%ebp),%eax
		add    -0xc(%ebp),%eax
		mov    %dl,(%eax)
		movl   $0x0,-0x2c(%ebp)
		jmp    jump_10dac9
	jump_10da99:
		mov    -0x1c(%ebp),%edx
		add    -0x14(%ebp),%edx
		add    -0xc(%ebp),%edx
		mov    -0x38(%ebp),%al
		or     %al,(%edx)
		mov    -0x14(%ebp),%eax
		incl   -0x14(%ebp)
		movl   $0x1,-0x2c(%ebp)
		movb   $0x20,-0x28(%ebp)
		mov    $0x1,%edx
		lea    -0x28(%ebp),%eax
		mov    -0x10(%ebp),%ebx
		call   *0x19b(%ebx)
	jump_10dac9:
		mov    -0x14(%ebp),%eax
		cmp    -0x8(%ebp),%eax
		jb     jump_10dad8
		movl   $0x0,-0x30(%ebp)
	jump_10dad8:
		jmp    jump_10d9e1
	jump_10dadd:
		mov    $0x2,%edx
		lea    -0x34(%ebp),%eax
		mov    -0x10(%ebp),%ebx
		call   *0x19b(%ebx)
		jmp    jump_10db0b
	jump_10daf0:
		mov    -0x4(%ebp),%ebx
		mov    -0x8(%ebp),%edx
		sub    -0x1c(%ebp),%edx
		mov    -0xc(%ebp),%eax
		add    -0x1c(%ebp),%eax
		mov    -0x10(%ebp),%ecx
		call   *0x19f(%ecx)
		mov    %eax,-0x14(%ebp)
	jump_10db0b:
		movl   $0x0,-0x18(%ebp)
		jmp    jump_10db1a
	jump_10db14:
		mov    -0x18(%ebp),%eax
		incl   -0x18(%ebp)
	jump_10db1a:
		mov    -0x18(%ebp),%eax
		cmp    -0x14(%ebp),%eax
		jae    jump_10db59
		mov    -0x1c(%ebp),%edx
		add    -0x18(%ebp),%edx
		add    -0xc(%ebp),%edx
		mov    -0x10(%ebp),%eax
		mov    0x2af(%eax),%ebx
		mov    -0x10(%ebp),%eax
		incl   0x2af(%eax)
		mov    -0x10(%ebp),%eax
		add    %ebx,%eax
		mov    (%edx),%dl
		mov    %dl,0x1af(%eax)
		mov    -0x10(%ebp),%eax
		andl   $0xff,0x2af(%eax)
		jmp    jump_10db14
	jump_10db59:
		mov    -0x10(%ebp),%eax
		mov    0x2af(%eax),%edx
		mov    -0x10(%ebp),%eax
		mov    %edx,0x2b3(%eax)
		mov    -0x14(%ebp),%eax
		add    %eax,-0x1c(%ebp)
	jump_10db71:
		mov    -0x10(%ebp),%eax
		cmpl   $0x0,0x1a7(%eax)
		je     jump_10dbca
		mov    $ascRxData,%eax
		push   %eax
		call   ac_printf
		add    $0x4,%esp
		movl   $0x0,-0x18(%ebp)
		jmp    jump_10db9a
	jump_10db94:
		mov    -0x18(%ebp),%eax
		incl   -0x18(%ebp)
	jump_10db9a:
		mov    -0x18(%ebp),%eax
		cmp    -0x1c(%ebp),%eax
		jae    jump_10dbbc
		mov    -0xc(%ebp),%eax
		add    -0x18(%ebp),%eax
		movzbl (%eax),%eax
		push   %eax
		mov    $asc02x_1,%eax
		push   %eax
		call   ac_printf
		add    $0x8,%esp
		jmp    jump_10db94
	jump_10dbbc:
		mov    $data_1616d9,%eax
		push   %eax
		call   ac_printf
		add    $0x4,%esp
	jump_10dbca:
		mov    -0x1c(%ebp),%eax
		mov    %eax,-0x24(%ebp)
		mov    -0x24(%ebp),%eax
		leave
		pop    %edi
		pop    %esi
		ret


/*----------------------------------------------------------------*/
net_unkn_func_340:	/* 0x10DBD7 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		enter  $0x8,$0x0
		mov    %eax,-0x8(%ebp)
		mov    %edx,-0x4(%ebp)
		mov    -0x4(%ebp),%eax
		mov    -0x8(%ebp),%edx
		sub    %eax,0x2b3(%edx)
		mov    -0x8(%ebp),%eax
		andl   $0xff,0x2b3(%eax)
		leave
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
net_unkn_change_state:	/* 0x10DC04 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		enter  $0x4,$0x0
		mov    %eax,-0x4(%ebp)
		mov    $aStateChangeWai,%eax
		push   %eax
		call   ac_printf
		add    $0x4,%esp
		mov    -0x4(%ebp),%eax
		cmpl   $0x0,0x2(%eax)
		je     jump_10dc37
		mov    $ascTrue_0,%eax
		push   %eax
		call   ac_printf
		add    $0x4,%esp
		jmp    jump_10dc45
	jump_10dc37:
		mov    $ascFalse_0,%eax
		push   %eax
		call   ac_printf
		add    $0x4,%esp
	jump_10dc45:
		mov    $aWaiting_for_da,%eax
		push   %eax
		call   ac_printf
		add    $0x4,%esp
		mov    -0x4(%ebp),%eax
		cmpl   $0x0,0x6(%eax)
		je     jump_10dc6c
		mov    $ascTrue_1,%eax
		push   %eax
		call   ac_printf
		add    $0x4,%esp
		jmp    jump_10dc7a
	jump_10dc6c:
		mov    $ascFalse_1,%eax
		push   %eax
		call   ac_printf
		add    $0x4,%esp
	jump_10dc7a:
		leave
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
net_unkn_func_337:	/* 0x10DCA1 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %esi
		push   %edi
		enter  $0x28,$0x0
		mov    %eax,-0x8(%ebp)
		mov    %dl,-0x4(%ebp)
		movb   $0x0,-0x1c(%ebp)
		mov    $0x64,%ecx
		mov    $0x1,%ebx
		lea    -0x18(%ebp),%edx
		mov    -0x8(%ebp),%eax
		call   net_unkn_func_339
		cmp    $0x1,%eax
		jne    jump_10dde7
		movzbl -0x18(%ebp),%eax
		cmp    $0xaa,%eax
		jl     jump_10dce7
		movzbl -0x18(%ebp),%eax
		cmp    $0xad,%eax
		jle    jump_10dce9
	jump_10dce7:
		jmp    jump_10dcfb
	jump_10dce9:
		mov    $0x1,%edx
		mov    -0x8(%ebp),%eax
		call   net_unkn_func_340
		jmp    jump_10dde7
	jump_10dcfb:
		movzbl -0x18(%ebp),%eax
		cmp    $0x80,%eax
		jge    jump_10dde7
		movzbl -0x4(%ebp),%eax
		add    -0x8(%ebp),%eax
		mov    0x2bb(%eax),%al
		add    %al,%al
		mov    %al,-0x10(%ebp)
		mov    -0x18(%ebp),%al
		and    $0x7,%al
		movzbl %al,%eax
		add    -0x8(%ebp),%eax
		mov    0x3bb(%eax),%al
		xor    %al,-0x10(%ebp)
		movzbl -0x18(%ebp),%eax
		sar    $0x3,%eax
		and    $0x1f,%eax
		add    -0x8(%ebp),%eax
		mov    0x3e3(%eax),%al
		mov    %al,-0x14(%ebp)
		mov    -0x10(%ebp),%al
		xor    -0x14(%ebp),%al
		mov    %al,-0xc(%ebp)
		movzbl -0xc(%ebp),%eax
		test   %eax,%eax
		je     jump_10dd9f
		testb  $0x10,-0xc(%ebp)
		je     jump_10dd7e
		mov    -0x8(%ebp),%eax
		cmpl   $0x0,0x1a7(%eax)
		je     jump_10dd7c
		movzbl -0xc(%ebp),%eax
		push   %eax
		mov    $aSingleErrorDet,%eax
		push   %eax
		call   ac_printf
		add    $0x8,%esp
	jump_10dd7c:
		jmp    jump_10dd9d
	jump_10dd7e:
		mov    -0x8(%ebp),%eax
		cmpl   $0x0,0x1a7(%eax)
		je     jump_10dd9d
		movzbl -0xc(%ebp),%eax
		push   %eax
		mov    $aDoubleErrorDet,%eax
		push   %eax
		call   ac_printf
		add    $0x8,%esp
	jump_10dd9d:
		jmp    jump_10dde7
	jump_10dd9f:
		mov    -0x8(%ebp),%eax
		mov    (%eax),%al
		and    $0x7,%al
		movzbl %al,%edx
		mov    -0x18(%ebp),%al
		and    $0x7,%al
		movzbl %al,%eax
		cmp    %edx,%eax
		jne    jump_10dde7
		mov    -0x4(%ebp),%al
		mov    %al,-0x24(%ebp)
		jmp    jump_10ddcb
	jump_10ddbd:
		movb   $0x3,-0x1c(%ebp)
		jmp    jump_10dde7
	jump_10ddc3:
		movb   $0x4,-0x1c(%ebp)
		jmp    jump_10dde7
	jump_10ddc9:
		jmp    jump_10dde7
	jump_10ddcb:
		mov    -0x24(%ebp),%al
		mov    %al,-0x28(%ebp)
		cmpb   $0xab,-0x28(%ebp)
		jb     jump_10dde5
		cmpb   $0xab,-0x28(%ebp)
		jbe    jump_10ddbd
		cmpb   $0xac,-0x28(%ebp)
		je     jump_10ddc3
		jmp    jump_10ddc9
	jump_10dde5:
		jmp    jump_10ddc9
	jump_10dde7:
		mov    -0x1c(%ebp),%al
		mov    %al,-0x20(%ebp)
		mov    -0x20(%ebp),%al
		leave
		pop    %edi
		pop    %esi
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_net_unkn_func_338)	/* 0x10DDF6 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		push   %edi
		enter  $0x8,$0x0
		mov    %eax,-0x4(%ebp)
		movl   $0x0,-0x8(%ebp)
		jmp    jump_10de11
	jump_10de0b:
		mov    -0x8(%ebp),%eax
		incl   -0x8(%ebp)
	jump_10de11:
		cmpl   $0x100,-0x8(%ebp)
		jae    jump_10de28
		movzbl -0x8(%ebp),%edx
		mov    -0x4(%ebp),%eax
		call   net_unkn_sub_325
		jmp    jump_10de0b
	jump_10de28:
		leave
		pop    %edi
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_AllocDOSmem) /* 0x10FEA0 Awe soundfont mem allocator  */
/*----------------------------------------------------------------*/
		push   %ebx
		sub    $0x1c,%esp
		mov    $0x100,%edx
		mov    %esp,%ebx
		add    $0xf,%eax
		mov    %edx,(%esp)
		sar    $0x4,%eax
		mov    %esp,%edx
		mov    %eax,0x4(%esp)
		mov    $0x31,%eax
		call   ac_dos_int386
		cmpl   $0x0,0x18(%esp)
		je     jump_10fecf
		xor    %edx,%edx
		jmp    jump_10fed3
	jump_10fecf:
		mov    0xc(%esp),%edx
	jump_10fed3:
		xor    %eax,%eax
		add    $0x1c,%esp
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_FreeDOSmem)
/*----------------------------------------------------------------*/
		push   %ebx
		sub    $0x1c,%esp
		movl   $0x101,(%esp)
		xor    %eax,%eax
		mov    %esp,%ebx
		mov    %dx,%ax
		mov    %esp,%edx
		mov    %eax,0xc(%esp)
		mov    $0x31,%eax
		call   ac_dos_int386
		cmpl   $0x0,0x18(%esp)
		sete   %al
		and    $0xff,%eax
		dec    %eax
		add    $0x1c,%esp
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(CreateSelector_)	/* 0x10ff20 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		sub    $0x1c,%esp
		mov    $0x2,%edx
		mov    %esp,%ebx
		mov    %eax,0x4(%esp)
		mov    $0x31,%eax
		mov    %edx,(%esp)
		mov    %esp,%edx
		call   ac_dos_int386
		cmpl   $0x0,0x18(%esp)
		je     jump_10ff4d
		mov    $0xffffffff,%eax
		jmp    jump_10ff53
	jump_10ff4d:
		xor    %eax,%eax
		mov    (%esp),%ax
	jump_10ff53:
		add    $0x1c,%esp
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(GetDOSseg_)	/* 0x10ff60 */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %edx
		sub    $0x1c,%esp
		mov    $0x6,%edx
		mov    %esp,%ebx
		mov    %eax,0x4(%esp)
		mov    $0x31,%eax
		mov    %edx,(%esp)
		mov    %esp,%edx
		call   ac_dos_int386
		cmpl   $0x0,0x18(%esp)
		je     jump_10ff8d
		mov    $0xffffffff,%eax
		jmp    jump_10ffa5
	jump_10ff8d:
		xor    %eax,%eax
		mov    0x8(%esp),%ax
		mov    %eax,%edx
		xor    %eax,%eax
		mov    0xc(%esp),%ax
		shl    $0xc,%edx
		sar    $0x4,%eax
		add    %edx,%eax
	jump_10ffa5:
		add    $0x1c,%esp
		pop    %edx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
__delay_:	/* 0x1189FB */
/*----------------------------------------------------------------*/
		push   %ebx
		push   %ecx
		push   %edx
		push   %esi
		test   %eax,%eax
		je     jump_118a2c
		imul   _loop_count,%eax
		mov    $0x3e8,%ebx
		add    $0x1f4,%eax
		xor    %edx,%edx
		div    %ebx
		test   %eax,%eax
		jne    jump_118a1d
		inc    %eax
	jump_118a1d:
		mov    %eax,%esi
		xor    %eax,%eax
		mov    %al,%bl
	jump_118a23:
		mov    $0x2c,%ah
		int    $0x21
		cmp    %dh,%bl
		dec    %esi
		jne    jump_118a23
	jump_118a2c:
		pop    %esi
		pop    %edx
		pop    %ecx
		pop    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_func_11f3f3)	/* 0x11f3f3 */
/*----------------------------------------------------------------*/
		movw   $0xffff,data_15ac11
		movl   $0xa,data_15ac13
	jump_11f406:
		cli
		mov    $0xb0,%al
		out    %al,$0x43
		mov    $0xff,%al
		out    %al,$0x42
		out    %al,$0x42
		mov    $0x2710,%edi
		mov    EXPORT_SYMBOL(data_15aba2),%bx
		in     $0x61,%al
		or     $0x1,%al
		out    %al,$0x61
	jump_11f423:
		dec    %edi
		je     jump_11f43a
		mov    $0x20,%al
		bt     $0x6,%ax
		jb     jump_11f43a
		bt     $0x5,%ax
		mov    %bx,%dx
		in     (%dx),%al
		jb     jump_11f423
	jump_11f43a:
		in     $0x61,%al
		or     $0xf3,%al
		out    %al,$0x61
		mov    $0x80,%al
		out    %al,$0x43
		in     $0x42,%al
		mov    %al,%dl
		in     $0x42,%al
		mov    %al,%dh
		sti
		mov    $0xffff,%ax
		sub    %dx,%ax
		cmp    %ax,data_15ac11
		jb     jump_11f463
		mov    %ax,data_15ac11
	jump_11f463:
		decl   data_15ac13
		cmpl   $0x0,data_15ac13
		je     jump_11f474
		jmp    jump_11f406
	jump_11f474:
		mov    data_15ac11,%bx
		movzwl %bx,%eax
		mov    $0x20bd,%ebx
		mul    %ebx
		mov    $0x2710,%ebx
		div    %ebx
		mov    %eax,%ebx
		mov    $0x2710,%eax
		mov    $0xa,%ecx
		mul    %ecx
		div    %ebx
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_func_11f4b8)
/*----------------------------------------------------------------*/
		movw   $0xffff,data_15ac11
		movl   $0xa,data_15ac13
	jump_11f4cb:
		cli
		mov    $0xb0,%al
		out    %al,$0x43
		mov    $0xff,%al
		out    %al,$0x42
		out    %al,$0x42
		mov    $0x2710,%edi
		in     $0x61,%al
		or     $0x1,%al
		out    %al,$0x61
	jump_11f4e1:
		dec    %edi
		jne    jump_11f4e1
		in     $0x61,%al
		or     $0xf3,%al
		out    %al,$0x61
		mov    $0x80,%al
		out    %al,$0x43
		in     $0x42,%al
		mov    %al,%dl
		in     $0x42,%al
		mov    %al,%dh
		sti
		mov    $0xffff,%ax
		sub    %dx,%ax
		cmp    %ax,data_15ac11
		jb     jump_11f50d
		mov    %ax,data_15ac11
	jump_11f50d:
		decl   data_15ac13
		cmpl   $0x0,data_15ac13
		je     jump_11f51e
		jmp    jump_11f4cb
	jump_11f51e:
		mov    data_15ac11,%bx
		movzwl %bx,%eax
		mov    $0x20bd,%ebx
		mul    %ebx
		mov    $0x2710,%ebx
		div    %ebx
		mov    %eax,%ebx
		mov    $0x2710,%eax
		mov    $0xa,%ecx
		mul    %ecx
		div    %ebx
		ret


/*----------------------------------------------------------------*/
func_11f547:
/*----------------------------------------------------------------*/
		push   %ds
		call   ____GETDS
		incw   data_15ac1b
		push   %dx
		mov    $0x20,%dx
		mov    $0x67,%al
		out    %al,(%dx)
		pop    %dx
		pop    %ds
		iret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM_func_11f561)	/* 0x11f561 */
/*----------------------------------------------------------------*/
		push   %ds
		movl   $0x0,EXPORT_SYMBOL(data_15aba5)
		mov    $0x20,%dx
		mov    $0x67,%al
		out    %al,(%dx)
		mov    EXPORT_SYMBOL(data_15abaf),%edi
		shl    %edi
	jump_11f57b:
		dec    %edi
		jne    jump_11f57b
		inc    %dx
		in     (%dx),%al
		bt     $0x7,%ax
		and    $0x7f,%al
		mov    $0x21,%dx
		mov    EXPORT_SYMBOL(data_15abaf),%edi
		shl    %edi
	jump_11f594:
		dec    %edi
		jne    jump_11f594
		out    %al,(%dx)
		mov    EXPORT_SYMBOL(data_15abaf),%edi
		shl    %edi
	jump_11f5a0:
		dec    %edi
		jne    jump_11f5a0
		mov    $0x67,%al
		dec    %dx
		out    %al,(%dx)
		mov    EXPORT_SYMBOL(data_15abaf),%edi
		shl    %edi
	jump_11f5b0:
		dec    %edi
		jne    jump_11f5b0
		cli
		mov    $0xf,%al
		mov    $0x35,%ah
		int    $0x21
		push   %ebx
		push   %es
		push   %ds
		push   %cs
		pop    %ds
		mov    $func_11f547,%edx
		mov    $0x250f,%ax
		int    $0x21
		pop    %ds
		mov    EXPORT_SYMBOL(data_15aba2),%dx
		inc    %dx
		inc    %dx
		mov    EXPORT_SYMBOL(data_15abb3),%al
		or     $0x10,%al
		out    %al,(%dx)
		mov    %al,EXPORT_SYMBOL(data_15abb3)
		dec    %dx
		dec    %dx
		mov    EXPORT_SYMBOL(data_15abaf),%edi
	jump_11f5ed:
		dec    %edi
		jne    jump_11f5ed
		push   %dx
		mov    $0x20,%dx
		mov    $0x67,%al
		out    %al,(%dx)
		pop    %dx
		movw   $0x0,data_15ac1b
		sti
		inc    %dx
		inc    %dx
		mov    EXPORT_SYMBOL(data_15abb3),%al
		and    $0xfb,%al
		out    %al,(%dx)
		mov    %al,EXPORT_SYMBOL(data_15abb3)
		dec    %dx
		dec    %dx
		mov    EXPORT_SYMBOL(data_15abaf),%edi
		shl    $0xa,%edi
	jump_11f623:
		dec    %edi
		jne    jump_11f623
		cmpw   $0x1,data_15ac1b
		je     jump_11f640
		cmpw   $0x0,data_15ac1b
		je     jump_11f6ca
		jmp    jump_11f670
	jump_11f640:
		inc    %dx
		inc    %dx
		mov    EXPORT_SYMBOL(data_15abb3),%al
		or     $0x4,%al
		out    %al,(%dx)
		mov    %al,EXPORT_SYMBOL(data_15abb3)
		dec    %dx
		dec    %dx
		mov    EXPORT_SYMBOL(data_15abaf),%edi
		shl    $0xa,%edi
	jump_11f65e:
		dec    %edi
		jne    jump_11f65e
		cmpw   $0x1,data_15ac1b
		cli
		je     jump_11f72c
	jump_11f670:
		cli
		inc    %dx
		inc    %dx
		mov    EXPORT_SYMBOL(data_15abb3),%al
		or     $0x4,%al
		out    %al,(%dx)
		mov    %al,EXPORT_SYMBOL(data_15abb3)
		dec    %dx
		dec    %dx
		movl   $0x4,EXPORT_SYMBOL(data_15abb6)
		mov    $0x21,%dx
		in     (%dx),%al
		or     $0x80,%al
		out    %al,(%dx)
		mov    EXPORT_SYMBOL(data_15aba2),%dx
		inc    %dx
		inc    %dx
		mov    EXPORT_SYMBOL(data_15abb3),%al
		and    $0xef,%al
		out    %al,(%dx)
		mov    %al,EXPORT_SYMBOL(data_15abb3)
		dec    %dx
		dec    %dx
		mov    EXPORT_SYMBOL(data_15abaf),%edi
	jump_11f6ba:
		dec    %edi
		jne    jump_11f6ba
		push   %dx
		mov    $0x20,%dx
		mov    $0x67,%al
		out    %al,(%dx)
		pop    %dx
		jmp    jump_11f740
	jump_11f6ca:
		cli
		inc    %dx
		inc    %dx
		mov    EXPORT_SYMBOL(data_15abb3),%al
		or     $0x4,%al
		out    %al,(%dx)
		mov    %al,EXPORT_SYMBOL(data_15abb3)
		dec    %dx
		dec    %dx
		mov    $0x21,%dx
		in     (%dx),%al
		or     $0x80,%al
		out    %al,(%dx)
		mov    EXPORT_SYMBOL(data_15aba2),%dx
		inc    %dx
		inc    %dx
		mov    EXPORT_SYMBOL(data_15abb3),%al
		and    $0xef,%al
		out    %al,(%dx)
		mov    %al,EXPORT_SYMBOL(data_15abb3)
		dec    %dx
		dec    %dx
		mov    EXPORT_SYMBOL(data_15abaf),%edi
	jump_11f70a:
		dec    %edi
		jne    jump_11f70a
		push   %dx
		mov    $0x20,%dx
		mov    $0x67,%al
		out    %al,(%dx)
		pop    %dx
		pop    %ds
		pop    %edx
		mov    $0xf,%al
		mov    $0x25,%ah
		int    $0x21
		pop    %ds
		movl   $0x4,EXPORT_SYMBOL(data_15abb6)
		ret
	jump_11f72c:
		movl   $0x7,EXPORT_SYMBOL(data_15aba5)
		movl   $0x0,EXPORT_SYMBOL(data_15abb6)
	jump_11f740:
		pop    %ds
		pop    %edx
		mov    $0xf,%al
		mov    $0x25,%ah
		pop    %ds
		ret


/*----------------------------------------------------------------*/
GLOBAL_FUNC(ASM__chain_intr_)	/* 0x11F748 */
/*----------------------------------------------------------------*/
		mov    %eax,%ecx
		mov    %edx,%eax
		mov    %ebp,%esp
		xchg   %ecx,0x28(%ebp)
		xchg   %eax,0x2c(%ebp)
		pop    %gs
		pop    %fs
		pop    %es
		pop    %ds
		pop    %edi
		pop    %esi
		pop    %ebp
		pop    %ebx
		pop    %ebx
		pop    %edx
		lret


/*----------------------------------------------------------------*/
.data

default_agent_tiles_x:	/* 0x152E28 */
		.ascii  "\x2d\x40\x28\x3c"
		.ascii  "\x1e\x46\x14\x50"
default_agent_tiles_z:	/* 0x152E30 */
		.ascii  "\x2e\x2c\x3c\x3c"
		.ascii  "\x1e\x1e\x46\x46"
data_152e38:
		.ascii  "\xff\xff\xff\xff\xff\xff\xff\xff"
		.ascii  "\xff\xff\xff\xff\xff\xff\xff\xff"
		.ascii  "\xff\xff\xff\xff"
GLOBAL (dword_152E4C)	/* 0x152E4C */
		.ascii  "\x93\xa0\x69\x3f"
GLOBAL (dword_152E50)	/* 0x152E50 */
		.ascii  "\x00\x01\x00\x00"
GLOBAL (dword_152E54)	/* 0x152E54 */
		.ascii  "\x50\x00\x00\x00"
GLOBAL (dword_152E58)	/* 0x152E58 */
		.ascii  "\x9a\x01\x00\x00"
GLOBAL (waft_table2)	/* 0x152E5E */
		.ascii  "\xe4\xff\xe5\xff\xe7\xff\xea\xff"
		.ascii  "\xee\xff\xf3\xff\xf9\xff\x00\x00"
		.ascii  "\x07\x00\x0d\x00\x12\x00\x16\x00"
		.ascii  "\x19\x00\x1b\x00\x1c\x00\x1d\x00"
		.ascii  "\x1c\x00\x1b\x00\x16\x00\x12\x00"
		.ascii  "\x0d\x00\x07\x00\x00\x00\xf9\xff"
		.ascii  "\xf3\xff\xee\xff\xea\xff\xe7\xff"
		.ascii  "\xe5\xff\xe4\xff\xe3\xff\xe4\xff"
GLOBAL (waft_table)	/* 0x152E9E */
		.ascii  "\xe4\xff\xe8\xff\xeb\xff\xef\xff"
		.ascii  "\xf2\xff\xf6\xff\xf9\xff\xfd\xff"
		.ascii  "\x00\x00\x04\x00\x07\x00\x0b\x00"
		.ascii  "\x0e\x00\x12\x00\x15\x00\x18\x00"
		.ascii  "\x1c\x00\x18\x00\x15\x00\x12\x00"
		.ascii  "\x0e\x00\x0b\x00\x07\x00\x04\x00"
		.ascii  "\x00\x00\xfd\xff\xf9\xff\xf6\xff"
		.ascii  "\xf2\xff\xef\xff\xeb\xff\xe8\xff"
		.ascii  "\xe4\xff\x01\x00"
data_152ee2:
		.short  0x0

GLOBAL (engn_xc)	/* 0x152EE4 */
		.ascii  "\x80\x32"
data_152ee6:
		.short  0x0
GLOBAL (engn_zc)	/* 0x152EE8 */
		.ascii  "\x80\x32"
		.short  0x0

GLOBAL (dword_152EEC)	/* 0x152EEC */
		.ascii  "\x54\xff\xff\xff"

GLOBAL (female_peep)	/* 0x1531A4 */
		.ascii  "\x28\x20"
GLOBAL (head_my_path)	/* 0x1531A6 */
		.ascii  "\x01\x00"

GLOBAL (word_1531DA)	/* 0x1531DA */
		.ascii  "\x01\x00"

GLOBAL (tex00dat_fname)	/* 0x153278 */
		.long   aDataTex00_dat

palette_fname_fmt:	/* 0x1532D8 */
		.long   aQdataPalD_dat

GLOBAL (primvehobj_fname)	/* 0x1532E4 */
		.long   aQdataPrimveh_o
maps_dir:	/* 0x1532E8 */
		.long   aMaps

GLOBAL (savegame_mortal_fname)	/* 0x153308 */
		.long   aQdataSavegam_4
paQdataSavegam_5:	/* 0x15330C */
		.long   aQdataSavegam_5
paQdataSavegam_6:	/* 0x153310 */
		.long   aQdataSavegam_6

sfx_man_shot:	/* 0x153350 */
		.ascii  "\x0b\x1a\x29\x2a\x2b\x0b\x1a\x29"
sfx_woman_shot:	/* 0x153358 */
		.ascii  "\x0c\x1b"
data_15335a:
		.short  0x0
GLOBAL(ASM_angle_direction)	/* 0x15335C */
		.ascii  "\x00\x00\x00\x01\xb5\x00\xb5\x00"
		.ascii  "\x00\x01\x00\x00\xb5\x00\x4b\xff"
		.ascii  "\x00\x00\x00\xff\x4b\xff\x4b\xff"
		.ascii  "\x00\xff\x00\x00\x4b\xff\xb5\x00"
GLOBAL (unkn01_maskarr)	/* 0x15337C */
		.ascii  "\x00\x00\x00\x00\x00\x05\x06\x00"
		.ascii  "\x00\x09\x00\x00\x0c\x0d\x00\x00"
		.ascii  "\x00"
data_15338d:
		.ascii  "\x00\x12\x13\x00\x00\x00\x00"
		.ascii  "\x18\x00\x00\x00"

master_glare:	/* 0x153774 */
		.byte	0x0
data_153775:
		.ascii  "\x01\x01\x02\x03\x01\x04\x02\x06"
		.ascii  "\x02\x00\x00\x08\x02\x0a\x02\x0c"
		.ascii  "\x04\x10\x02\x12\x01\x13\x02\x15"
		.ascii  "\x04\x19\x02\x1b\x02"
		.fill   0x6
		.ascii  "\x1d\x02"
		.long	0x0
		.ascii  "\x1f\x01\x20\x02\x22\x02\x24\x02"
		.fill   0x6
		.ascii  "\x26\x01"
		.long	0x0
		.ascii  "\x27\x02"

GLOBAL (door_anim_page)	/* 0x153914 */
		.byte	0x2
data_153915:
		.byte	0x0
data_153916:
		.byte	0x20
data_153917:
		.byte	0x20
data_153918:
		.byte	0x20
data_153919:
		.byte	0x5
		.long	0x0
		.ascii  "\x02\x60\x60\x10\x20\x05"
		.long	0x0
		.ascii  "\x02\x60\x60\x10\x20\x05"
		.fill   0x6
		.ascii  "\x05\x00\x00\x00\x0c\xff\x0c\xff"
		.ascii  "\xf4\x00\xf4"
		.fill   0x21
		.ascii  "\x58\x00\xa8\xff\x58\x00\xa8\xff"
		.fill   0xa
		.ascii  "\x0c\x00\x0e\x00\x0d\x00\x0d\x00"
		.byte	0xe
		.fill   0xe
		.ascii  "\x04\x00\xfc\x00\x04\x00\xfc"
		.fill   0xc

GLOBAL (weapon_nrg)	/* 0x154359 */
		.ascii  "\x02\x04\x01\x01\x06\x07\x00\x02"
		.ascii  "\x01\x06\x06\x03\x03\x00\x03\x01"
		.ascii  "\x02\x02\x00\x02\x01\x04\x00\x03"
		.ascii  "\x05\x05\x01\x01\x02\x03\x00\x00"
GLOBAL (weapon_range)	/* 0x154379 */
		.ascii  "\x03\x04\x05\x05\x06\x03\x01\x02"
		.ascii  "\x00\x03\x03\x02\x02\x02\x08\x07"
		.ascii  "\x05\x00\x00\x06\x01\x03\x00\x02"
		.ascii  "\x03\x05"
		.fill   0x6
GLOBAL (weapon_damage)	/* 0x154399 */
		.ascii  "\x01\x03\x04\x04\x05\x07\x00\x02"
		.ascii  "\x00\x00\x00\x01\x07\x00\x07\x08"
		.ascii  "\x06\x02\x00\x08"
		.fill   0x5
		.ascii  "\x05\x00\x00\x06\x00\x00"
GLOBAL (weapon_sound)	/* 0x1543B8 */
		.ascii  "\x00\x0a\x0b\x0e\x0d\x10\x25\x0c"
		.ascii  "\x24\x11\x12\x13\x14\x16\x16\x15"
		.ascii  "\x17\x0f\x19\x00\x18\x1a\x1b\x00"
		.ascii  "\x1c\x1d\x1e\x1f\x20\x21\x22\x00"
GLOBAL (weapon_sound_z)	/* 0x1543D8 */
		.ascii  "\x00\x0a\x0b\x0e\x0d\x10\x25\x23"
		.ascii  "\x24\x11\x12\x13\x14\x16\x16\x15"
		.ascii  "\x17\x0f\x19\x00\x18\x23\x1b\x00"
		.ascii  "\x1c\x1d\x1e\x1f\x20\x21\x22\x00"

data_15488a:
		.byte	0xf7
data_15488b:
		.byte	0xff
		.long	0x0


GLOBAL (ASM_byte_154BB4)	/* 0x154BB4 */
		.ascii  "\xdc\xe0\xe0\xde\xdc\xdc\x00\x00"

GLOBAL (byte_154F2C)	/* 0x154F2C */
		.byte	0x0
		.ascii  "\x00\x00\x01\x02\x02\x03\x04\x09"
		.ascii  "\x09\x0a\x0b\x05\x06\x00\x00\x00"
		.ascii  "\x01\x05\x06\x00\x01\x07\x08\x02"
		.ascii  "\x02\x0a\x0b\x05\x06\x0a\x0b"
GLOBAL (word_154F4C)
		.ascii  "\x01\x00\x21\x00\x71\x00\xf1\x00"
		.ascii  "\x11\x01\xa1\x00\xc1\x00\xd1\x02"
		.ascii  "\xf1\x02\x41\x01\x91\x01\xb1\x01"
		.ascii  "\x21\x00\x00\x00"
data_154f6c:
		.ascii  "\x00\x00\x01\x00\x01\x00\x00\x00"
GLOBAL (dont_bother_with_explode_faces)	/* 0x154F74 */
		.ascii  "\x01\x00\x00\x00"
data_154f78:
		.ascii  "\x01\x04\x06\x0a\x0f\x14\x14\x16"
		.ascii  "\x18\x19\x1b\x1d\x1f\x00\x00\x00"
		.ascii  "\x03\x02\x01\x01\x01\x02\x03\x00"
GLOBAL (zig_zag)	/* 0x154F90 */
		.ascii  "\x00\x01\xf0\x00\x68\x01\x09\x01"
		.ascii  "\x00\x01\x0e\x01\xf0\x00\x00\x01"
		.ascii  "\xfd\x00\x10\x01\xfa\x00\xf6\x00"
		.ascii  "\xf0\x00\x04\x01\x09\x01\x00\x01"
		.ascii  "\x0e\x01\xf0\x00\x9c\x00\xcb\x00"
		.ascii  "\x10\x01\xfa\x00\x0a\x01\xf0\x00"
		.ascii  "\x04\x01\x27\x01\xd8\x00\x0e\x01"
		.ascii  "\xf0\x00\x00\x01\xfd\x00\x24\x01"
		.ascii  "\xdc\x00\xf6\x00\xff\x00\x04\x01"
		.ascii  "\x09\x01\x9c\x00\x0e\x01\xf0\x00"
		.ascii  "\x00\x01\xcb\x00\x10\x01\xd2\x00"
		.ascii  "\x0a\x01\xf5\x00\x04\x01\x09\x01"
		.ascii  "\x64\x01\x0e\x01\xf0\x00\x00\x01"
		.ascii  "\x25\x01\x10\x01\xfa\x00\x00\x00"
GLOBAL (anim_slots)	/* 0x155000 */
		.byte	0x0
		.byte	0x0
		.byte	0x1
mod1_anim_no:	/* 0x155003 */
		.fill   0x5
mod2_anim_no:	/* 0x155008 */
		.byte	0x0
data_155009:
		.ascii  "\x00\x00\x00\x0a\x00"
data_15500e:
		.short  0x0
GLOBAL (dword_155010)	/* 0x155010 */
		.ascii  "\x00\x40"
data_155012:
		.short  0x0
GLOBAL (dword_155014)	/* 0x155014 */
		.ascii  "\x00\x40\x00\x00"
GLOBAL (dword_155018)	/* 0x155018 */
		.ascii  "\x32\x00"
data_15501a:
		.short  0x0
GLOBAL (last_map_for_lights_func_11)	/* 0x15501C */
		.byte	0xff
		.byte	0xff
		.ascii  "\x00\x00"
quiver:	/* 0x155020 */
		.ascii  "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
		.ascii  "\xff\x00\x01\x00\xff\xfd\xff\x00"
		.ascii  "\x01\x03\x04\x03\x01\x00\xfe\xfb"
		.ascii  "\xf9\xf8\xf9\xfb\xfe\x00\x02\x05"
		.ascii  "\x08\x0a\x0c\x0d\x0d\x0d\x0c\x0a"
		.ascii  "\x08\x05\x02\xfe\xfb\xf8\xf6\xf4"
		.ascii  "\xf3\xf3\xf3\xf4\xf6\xf8\xfb\xfe"
		.byte	0x63
unplace:	/* 0x15505C */
		.ascii  "\xfb\xff"
data_15505e:
		.short  0x0
data_155060:
		.ascii  "\xc8\x00\xf6\xff\x00\x00\x96\x00"
		.ascii  "\xec\xff\x00\x00\x64\x00\xe2\xff"
		.ascii  "\x00\x00\x32\x00\xd8\xff"
		.long	0x0
		.ascii  "\xce\xff"
		.long	0x0
		.ascii  "\xc4\xff"
		.long	0x0
		.ascii  "\xba\xff\x00\x00\xce\xff\xc4\xff"
		.ascii  "\x00\x00\x9c\xff\xce\xff\x00\x00"
		.ascii  "\x6a\xff\xd8\xff\x00\x00\x06\xff"
		.ascii  "\xe2\xff\x00\x00\xd4\xfe\xec\xff"
		.ascii  "\x00\x00\xa2\xfe\xf6\xff\x00\x00"
		.ascii  "\x70\xfe\xf6\xff\x00\x00\x3e\xfe"
		.ascii  "\xfb\xff\x00\x00\x3e\xfe"
		.long	0x0
		.ascii  "\x0c\xfe"
		.long	0x0
		.ascii  "\x0c\xfe"
		.long	0x0
		.ascii  "\x0c\xfe\x00\x00"
nav_rulesA2B:	/* 0x1550D0 */
		.long   Synd_nav_rulesA2B

GLOBAL (selected_triangulation_no)	/* 0x1550EC */
		.ascii  "\xff\xff\xff\xff"
/* uint8_t tag_current
 */
GLOBAL (tag_current)	/* 0x1550F0 */
		.byte	0xff
		.align	4

		.ascii  "\xff\xff\xff\xff"
		.ascii  "\xff\xff\xff\xff\xff\xff\xff\xff"
		.ascii  "\x01\x00\x00\x00\x01\x00\x01\x00"
		.ascii  "\xf6\xff\xf6\xff\xff\xff\x00\x00"
GLOBAL (word_155110)	/* 0x155110 */
		.ascii  "\x04\x01\x6e\x00\x24\x01\xa0\x00"
		.ascii  "\x46\x01\xc0\x00"
GLOBAL (byte_15511C)	/* 0x15511C */
		.byte	0x1
data_15511d:
		.byte	0x0
GLOBAL (word_15511E)	/* 0x15511E */
		.ascii  "\xff\xff"
GLOBAL (controls_hlight_gkey)	/* 0x155120 */
		.ascii  "\x01\x01\x01\x00"
GLOBAL (byte_155124)	/* 0x155124 */
		.ascii  "\x01\x11\x21\x27\x3f\x94\x00\x00"
GLOBAL (byte_15512C)	/* 0x15512C */
		.ascii  "\x08\x08\x03\x0c\x08\x04\x00\x00"
		.ascii  "\xff\x79\x03\x00"
asc19200:	/* 0x155138 */
		.ascii  "19200"
data_15513d:
		.short  0x0
data_15513f:
		.byte	0x0
GLOBAL (unkn_opt_number_text)	/* 0x155140 */
		.string "0000"
		.ascii  "\x00\x00\x00"
		.string "100%"
		.ascii  "\x00\x00\x00"
rate:	/* 0x155150 */
		.byte	0x0
data_155151:
		.ascii  "\x4b\x00\x00"
GLOBAL (mo_weapon)	/* 0x155154 */
		.ascii  "\xff\x00\x00\x00"
GLOBAL (month_days)
		.ascii  "\x1f\x1c\x1f\x1e\x1f\x1e\x1f\x1f\x1e"
data_155161:
		.byte	0x1f
data_155162:
		.byte	0x1e
data_155163:
		.byte	0x1f
GLOBAL (selected_weapon)	/* 0x155164 */
		.byte	0xff
GLOBAL (selected_mod)	/* 0x155165 */
		.byte	0xff
GLOBAL (research_selected_wep)	/* 0x155166 */
		.byte	0xff
GLOBAL (research_selected_mod)	/* 0x155167 */
		.byte	0xff
GLOBAL (research_on_weapons)	/* 0x155168 */
		.byte	0x1
GLOBAL (unkn_city_no)	/* 0x155169 */
		.byte	0xff
GLOBAL (selected_city_id)	/* 0x15516A */
		.byte	0xff
GLOBAL (selected_netscan_objective)	/* 0x15516B */
		.byte	0xff
GLOBAL (byte_15516C)
		.byte	0xff
GLOBAL (byte_15516D)
		.byte	0xff
		.ascii  "\xff\x00"
data_155170:
		.ascii  "\x32\xae\x57\xf4"
GLOBAL (byte_155174)	/* 0x155174 */
		.byte	0xa6
GLOBAL (byte_155175)	/* 0x155175 */
		.ascii  "\xa7\xa8\xa9\xaa\xab\xac\xad\xae"
		.ascii  "\x00\x00\x00"
GLOBAL (byte_155180)	/* 0x155180 */
		.byte	0x6d
GLOBAL (byte_155181)	/* 0x155181 */
		.ascii  "\x6f\x41\x69\xa2\xec\xfd\xfe\x57"
GLOBAL (byte_155189)
		.byte	0xf7
GLOBAL (word_15518A)	/* 0x15518A */
		.ascii  "\xff\xff"

GLOBAL (save_slot)	/* 0x1551D8 */
		.ascii  "\xff\xff"
		.ascii  "\x00\x00"

data_1551e4:
		.ascii  "\x04\x01\x02\x00\x03\x00\x00\x00"
		.ascii  "\x0a\x04\x07\x0d\x01\x00\x00\x00"
GLOBAL (byte_1551F4)	/* 0x1551F4 */
		.ascii  "\x04\x01\x02\x00\x03\x00\x00\x00"
data_1551fc:
		.long	0x0
		.ascii  "\x01\x00\x00\x00\x02\x00\x00\x00"
		.ascii  "\x03\x00\x00\x00\x04\x00\x00\x00"
		.ascii  "\x05\x00\x00\x00\x06\x00\x00\x00"
		.ascii  "\x07\x00\x00\x00"
subst_table_lower_to_upper:	/* 0x15521C */
		.byte	0xfc
data_15521d:
		.ascii  "\x9a\xf6\x99\xe4\x8e\xdf\xe1\xdc"
		.ascii  "\x9a\xd6\x99\xc4\x8e\x81\x9a\x94"
		.ascii  "\x99\x84\x8e\xe0\xb7\xe2\x41\xe9"
		.ascii  "\x90\xe8\xd4\xea\x45\xeb\x45\xee"
		.ascii  "\x49\xef\x49\xf4\x4f\xfb\x55\xf9"
		.ascii  "\xeb\xe7\x80\xc7\x80\x85\xb7\x83"
		.ascii  "\x41\x82\x90\x8a\xd4\x88\x45\x89"
		.ascii  "\x45\x8c\x49\x8b\x49\x93\x4f\x96"
		.ascii  "\x55\x97\xeb\x87\x80\xec\x8d\xf2"
		.ascii  "\xe3\xc0\xb7\xc8\xd4\xcc\x8d\xd2"
		.ascii  "\xe3\xd9\xeb\x95\xe3\xe5\x8f\xc5"
		.ascii  "\x8f\xc9\x90\x86\x8f\xe1\xb5\xed"
		.ascii  "\xd6\xf3\xa2\xfa\xe9\xf1\xa5\xbf"
		.ascii  "\xa8\xaa\x61\xba\x6f\xc1\xb5\xcd"
		.ascii  "\xd6\xd3\xa2\xda\xe9\xd1\xa5\xa0"
		.ascii  "\xb5\xa1\xd6\xa3\xe9\xa4\xa5\xa6"
		.ascii  "\x61\xa7\x6f"
		.long	0x0
		.ascii  "\x8e\x90\x94\x49\x90\x45\x8f\xd4"
		.ascii  "\x88\xb7\x99\x4f\xe0\xb7\xe2\x41"
		.ascii  "\xe9\x90\xe8\xd4\xea\x45\xeb\x45"
		.ascii  "\xee\x49\xef\x49\xf4\x4f\xfb\x55"
		.ascii  "\xf9\xeb\xe7\x80\xc7\x80\x85\xb7"
		.ascii  "\x83\x41\x82\x90\x8a\xd4\x88\x45"
		.ascii  "\x89\x45\x8c\x49\x8b\x49\x93\x4f"
		.ascii  "\x96\x55\x97\xeb\x87\x80\x00"
data_1552e3:
		.ascii  "\x00\x32\xf4\xb0\xae\x57\xf7\xf6"
		.ascii  "\xf5\xf8\xda\x32\xae\xaf\xb0\x32"
		.ascii  "\x00\x01\x00"
data_1552f6:	/* 0x1552F6 */
		.short  0x1
GLOBAL (word_1552F8)	/* 0x1552F8 */
		.short  0x1
		.short  0x5
		.short  0x2
		.short  0x0
GLOBAL (turn_last)	/* 0x155300 */
		.ascii  "\xe7\x03\x00\x00"
rand_c:	/* 0x155304 */
		.ascii  "\x93\xa0\x69\x3f"
GLOBAL (scanner_blink)	/* 0x155308 */
		.ascii  "\x01\x00\x00\x00"
scanner_keys:	/* 0x15530C */
		.ascii  "\x51\x00\x00\x00\x53\x00\x00\x00"
		.ascii  "\x4f\x00\x00\x00\x4b\x00\x00\x00"
		.ascii  "\x4f\x00\x00\x00\x4c\x00\x00\x00"
		.ascii  "\x49\x00\x00\x00\x50\x00\x00\x00"
		.ascii  "\x4d\x00\x00\x00\x4c\x00\x00\x00"
		.ascii  "\x51\x00\x00\x00\x4c\x00\x00\x00"
		.ascii  "\x0f\x27\x00\x00"
GLOBAL (ASM_circle_line_sz7)	/* 0x155340 */
		.ascii  "\xff\xff\xff\xff"
data_155344:
		.ascii  "\xfd\xff\xff\xff"
		.long	0x0
		.ascii  "\xfd\xff\xff\xff\x01\x00\x00\x00"
		.ascii  "\xfd\xff\xff\xff\x02\x00\x00\x00"
		.ascii  "\xfe\xff\xff\xff\x03\x00\x00\x00"
		.ascii  "\xff\xff\xff\xff\x03"
		.fill   0x7
		.ascii  "\x03\x00\x00\x00\x01\x00\x00\x00"
		.ascii  "\x02\x00\x00\x00\x02\x00\x00\x00"
		.ascii  "\x01\x00\x00\x00\x03"
		.fill   0x7
		.ascii  "\x03\x00\x00\x00\xff\xff\xff\xff"
		.ascii  "\x03\x00\x00\x00\xfe\xff\xff\xff"
		.ascii  "\x02\x00\x00\x00\xfd\xff\xff\xff"
		.ascii  "\x01\x00\x00\x00\xfd\xff\xff\xff"
		.long	0x0
		.ascii  "\xfd\xff\xff\xff\xff\xff\xff\xff"
		.ascii  "\xfe\xff\xff\xff\xfe\xff\xff\xff"
		.ascii  "\x80\x00\x00\x00\x80\x00\x00\x00"
GLOBAL (scroll_text)	/* 0x1553C8 */
		.long   aNoObjective

GLOBAL (scanner_unkn3CC)	/* 0x1553CC */
		.ascii  "\x5a\x00\x00\x00"

proj_origin_m2:
		.short  0x0
/* struct ScreenPoint proj_origin;
 */
GLOBAL (proj_origin)	/* 0x1553D0 */
		.ascii  "\x3f\x01\x0d\x01"
		.long	0x0

rand_d:	/* 0x1554F4 */
		.ascii  "\x93\xa0\x69\x3f"
data_1554f8:
		.fill   0x8
		.ascii  "\xba\xff\xff\xff\xf6\xff\xff\xff"
		.ascii  "\x46\x00\x00\x00\x0a"
		.fill   0x7
		.ascii  "\xd8\xff\xff\xff\x28\x00\x00\x00"
		.ascii  "\x28\x00\x00\x00\xd8\xff\xff\xff"
		.long	0x0
data_155528:
		.long	0x0
		.ascii  "\xf6\xff\xff\xff"
		.long	0x0
		.byte	0x4b
		.fill   0x7
		.ascii  "\x4b\x00\x00\x00\x46\x00\x00\x00"
		.ascii  "\x14\x00\x00\x00\x14\x00\x00\x00"
		.ascii  "\x14\x00\x00\x00\x14\x00\x00\x00"
		.ascii  "\x41\x00\x00\x00"
data_155558:
		.fill   0xc
		.byte	0xa
		.fill   0x7
		.ascii  "\x0a\x00\x00\x00\xf6\xff\xff\xff"
		.ascii  "\xd8\xff\xff\xff\xd8\xff\xff\xff"
		.ascii  "\x28\x00\x00\x00\x28\x00\x00\x00"
		.ascii  "\xf6\xff\xff\xff"

data_1556f0:
		.ascii  "\xce\xff\xff\xff"
data_1556f4:
		.ascii  "\x00\x40\x00\x00"
data_1556f8:
		.ascii  "\x00\x02\x00\x00"
data_1556fc:
		.ascii  "\x00\x40\x00\x00"
data_155700:
		.ascii  "\x00\x04"
data_155702:
		.short  0x0
GLOBAL (data_155704)
		.ascii  "\xff\xff"
		.ascii  "\xff\xff"
		.align  4

data_155744:
		.ascii  "\xfb\xff"
		.ascii  "\xfb\xff"
		.ascii  "\xfb\xff"
		.ascii  "\xfb\xff"
		.ascii  "\xfb\xff"
		.ascii  "\xfb\xff"
GLOBAL (dword_155750)	/* 0x155750 */
		.ascii  "\x20\x4e\x00\x00\x50\xc3\x00\x00"
		.ascii  "\x40\x0d\x03\x00\x20\xa1\x07\x00"
GLOBAL (starting_cash_amounts)	/* 0x155760 */
		.ascii  "\x80\x84\x1e\x00\x40\x4b\x4c\x00"
		.ascii  "\x00\x2d\x31\x01\x00\xe1\xf5\x05"
data_155770:
		.ascii  "\x80\x25\x00\x00\x40\x38\x00\x00"
		.ascii  "\x00\x4b\x00\x00\x80\x70\x00\x00"
		.ascii  "\x00\x96\x00\x00\x00\xe1\x00\x00"
		.ascii  "\x00\x2c\x01\x00\x00\xc2\x01\x00"
		.ascii  "\x01\x00\x00\x00"

GLOBAL (sound_file)	/* 0x155D50 */
		.ascii  "\xff\xff\xff\xff"
data_155d54:
		.ascii  "\x00\x01\x02\x05\x06\x0e\x13\x04"
		.ascii  "\x08\x00\x0d\x14\x12\x11\x10\x0f"
		.ascii  "\x0b\x00\x03\x00\x00\x00\x0e\x00"
		.ascii  "\x0a\x09\x15\x07\x0b\x11\x00\x00"


GLOBAL (NetTimeoutTicks)	/* 0x1561C4 */
		.ascii  "\xff\xff\xff\xff"

GLOBAL (__cbyte)	/* 0x159118 */
		.fill   0x8

data_159608:
		.short  0x0

data_15ac11:
		.ascii  "\xff\xff"
data_15ac13:
		.ascii  "\x0a\x00\x00\x00"
data_15ac17:
		.long	0x0
data_15ac1b:
		.short  0x0
		.align  4


aGroupDTrucedWi:	/* 0x15BEB0 */
		.string " group %d truced with group %d"
aAfterPlacePlay:	/* 0x15BECF */
		.string " after place player"
aAfterSimLevel:	/* 0x15BEE3 */
		.string " after sim level"
aAfterGroupActi:	/* 0x15BEF4 */
		.string " after group action"
ascS_11:	/* 0x15BF08 */
		.ascii  "\x25\x73\x00"
ascS_12:	/* 0x15BF0B */
		.ascii  "\x25\x73\x00\x00\x00"
aEngine_c:	/* 0x15BF10 */
		.string "engine.c"
ascD_20:	/* 0x15BF19 */
		.ascii  "\x25\x64\x20\x00"
ascE:	/* 0x15BF1D */
		.ascii  "\x45\x00"
ascB:	/* 0x15BF1F */
		.ascii  "\x42\x00"

aSMap03d_bB:	/* 0x15BF24 */
		.string "%s/map%03d.b&b"

qdata_keys_dat_2:
		.string "qdata/keys.dat"

aSyndicate02d02:	/* 0x15C035 */
		.string "SYNDICATE %02d:%02d:%02d NC"
aChurch02d02d02:	/* 0x15C051 */
		.string "CHURCH %02d:%02d:%02d NC"
aUnguided02d02d:	/* 0x15C06A */
		.string "UNGUIDED %02d:%02d:%02d NC"
aS_idx:	/* 0x15C085 */
		.string "%s.idx"
aS_wad:	/* 0x15C08C */
		.string "%s.wad"
		.align	4

ascSynii:	/* 0x15C208 */
		.string "synII"
aSSSTime02d02d0:	/* 0x15C20E */
		.string "%s %s %s Time %02d:%02d:%02d"
aSSSHeure02d02d:	/* 0x15C22B */
		.string "%s %s %s Heure %02d:%02d:%02d"
aSSSTempo02d02d:	/* 0x15C249 */
		.string "%s %s %s Tempo %02d:%02d:%02d"
aSSSZeit02d02d0:	/* 0x15C267 */
		.string "%s %s %s Zeit %02d:%02d:%02d"
aSSSTiempo02d02:	/* 0x15C284 */
		.string "%s %s %s Tiempo %02d:%02d:%02d"
aSSSTid02d02d02:	/* 0x15C2A3 */
		.string "%s %s %s Tid %02d:%02d:%02d"
ascSSS:	/* 0x15C2BF */
		.string "%s %s: %s "
		.align	4

ascSS:	/* 0x15C37C */
		.string "%s %s"

aCheckError:	/* 0x15C391 */
		.string " CHECK ERROR "
aPlayerSHasTime:	/* 0x15C39F */
		.string " Player >%s< Has Timed Out"
aYouHaveTimedOu:	/* 0x15C3BA */
		.string "You have Timed out from the system"
aHostConnection:	/* 0x15C3DD */
		.string " Host Connection Lost"
aPlayerSIsOutOf:	/* 0x15C3F3 */
		.string " Player >%s< is out of sync"
		.align	4

aDataTex02d_dat:	/* 0x15C47C */
		.string "data/tex%02d.dat"
aDataTex02d_d_0:	/* 0x15C48D */
		.string "data/tex%02d.dat"
aDataTex02d_d_1:	/* 0x15C49E */
		.string "data/tex%02d.dat"
		.align	4

aDataTex00_dat:	/* 0x15C4FE */
		.string "data/tex00.dat"

aQdataPalD_dat:	/* 0x15C6A1 */
		.string "qdata/pal%d.dat"

aQdataPrimveh_o:	/* 0x15C6D3 */
		.string "qdata/primveh.obj"
aMaps:	/* 0x15C6E5 */
		.string "maps"

aQdataSavegam_4:	/* 0x15C74B */
		.string "qdata/savegame/synwarsm.sav"
aQdataSavegam_5:	/* 0x15C767 */
		.string "qdata/savegame/synwars%d.sav"
aQdataSavegam_6:	/* 0x15C784 */
		.string "qdata/savegame/swars%03d.sav"

aD_0:	/* 0x15D30C */
		.ascii  "\x25\x64\x00"
aD_1:	/* 0x15D30F */
		.ascii  "\x25\x64\x00\x00\x00"
aStrangeThingOw:	/* 0x15D314 */
		.string "Strange thing owns col-vect type %d state %d subtype %d"

aStillThingOnMa:	/* 0x15D3E4 */
		.string "Still thing on mapwho type %d"
aStillSimpleOnM:	/* 0x15D402 */
		.string "Still simple on mapwho type %d"
		.ascii  "\x00\x00\x00"
aD_2:	/* 0x15D424 */
		.ascii  "\x25\x64\x00\x00"

ascD_54:	/* 0x15D63E */
		.ascii  "\x25\x64\x00"
ascD_55:	/* 0x15D641 */
		.ascii  "\x25\x64\x00"

aShaggedTrainSt:	/* 0x15D660 */
		.string "Shagged train state %d"
aTellMdFailedEx:	/* 0x15D677 */
		.string "TELL MD failed exit car person ret %d \n"
		.byte	0x0
aTriIdDDTriangu:	/* 0x15D6A0 */
		.string " tri id %d=%d triangulation_select : allocate triangulations"
aDefault_tr:	/* 0x15D6DD */
		.string "default.tr"
aDefault_pt:	/* 0x15D6E8 */
		.string "default.pt"
aCannotFindDD:	/* 0x15D6F3 */
		.string "Cannot find (%d,%d)"
aL002ldN02ldL10:	/* 0x15D707 */
		.string "l0:%02ld n:%02ld l1:%02ld"
aDelete_pointND:	/* 0x15D721 */
		.string "delete_point : n:%d loop:%d"
ascDDDD:	/* 0x15D824 */
		.string "(%d,%d)(%d,%d)"
		.byte	0x0

ascSS_0:	/* 0x15D861 */
		.string "%s: %s"
asc04x:	/* 0x15D868 */
		.string "%04x"
ascS_13:	/* 0x15D86D */
		.ascii  "\x25\x73\x00"
ascSSS_0:	/* 0x15D870 */
		.string "%s'S %s"
ascS_14:	/* 0x15D878 */
		.ascii  "\x25\x73\x00"
ascSSS_1:	/* 0x15D87B */
		.string "%s'S %s"
ascS_15:	/* 0x15D883 */
		.ascii  "\x25\x73\x00"
ascLost_txt:	/* 0x15D886 */
		.string "lost.txt"
ascD_22:	/* 0x15D88F */
		.ascii  "\x25\x64\x00"
ascS_16:	/* 0x15D892 */
		.ascii  "\x25\x73\x00"
ascDSDS:	/* 0x15D895 */
		.string "%d %s %d %s"
ascDSDS_0:	/* 0x15D8A1 */
		.string "%d %s %d %s"
ascDSDS_1:	/* 0x15D8AD */
		.string "%d %s %d %s"
ascDSDS_2:	/* 0x15D8B9 */
		.string "%d %s %d %s"
ascDSDS_3:	/* 0x15D8C5 */
		.string "%d %s %d %s"
ascDSDS_4:	/* 0x15D8D1 */
		.string "%d %s %d %s"
ascDSDS_5:	/* 0x15D8DD */
		.string "%d %s %d %s"
ascDSDS_6:	/* 0x15D8E9 */
		.string "%d %s %d %s"
ascDC:	/* 0x15D8F5 */
		.string "%d C"
ascDC_0:	/* 0x15D8FA */
		.string "%d C"
ascSD:	/* 0x15D8FF */
		.string " %s %d"
ascSD_0:	/* 0x15D906 */
		.string " %s %d"
ascDS:	/* 0x15D90D */
		.string "%d: %s"
ascD_23:	/* 0x15D914 */
		.string "%d"
ascD_24:	/* 0x15D917 */
		.string "%d"
ascD_25:	/* 0x15D91A */
		.string "%d"
ascD_26:	/* 0x15D91D */
		.string "%d"
ascD_27:	/* 0x15D920 */
		.string "%d"
ascD_28:	/* 0x15D923 */
		.string "%d"
ascD_29:	/* 0x15D926 */
		.string "%d"
ascD_30:	/* 0x15D929 */
		.string "%d"
ascD_31:	/* 0x15D92C */
		.string "%d"
ascD_32:	/* 0x15D92F */
		.string "%d"
ascD_33:	/* 0x15D932 */
		.string "%d"
data_15d935:
		.string "/"
ascD_34:	/* 0x15D937 */
		.string "%d"
ascD_35:	/* 0x15D93A */
		.string "%d"
ascD_36:	/* 0x15D93D */
		.string "%d"
ascD_37:	/* 0x15D940 */
		.string "%d"
ascSD_1:	/* 0x15D943 */
		.string "%s %d"
ascSD_2:	/* 0x15D949 */
		.string "%s %d"
ascSSD:	/* 0x15D94F */
		.string "%s %s %d"
ascSSD_0:	/* 0x15D958 */
		.string "%s %s %d"
ascD_38:	/* 0x15D961 */
		.string "%d"
ascD_39:	/* 0x15D964 */
		.string "%d"
ascD_40:	/* 0x15D967 */
		.string "%d"
ascD_41:	/* 0x15D96A */
		.string "%d"
ascD_42:	/* 0x15D96D */
		.string "%d"
ascD_43:	/* 0x15D970 */
		.string "%d"
ascD_44:	/* 0x15D973 */
		.string "%d"
ascD_45:	/* 0x15D976 */
		.string "%d"
ascD_46:	/* 0x15D979 */
		.string "%d"
ascSD_3:	/* 0x15D97C */
		.string "%s %d"
ascSD_4:	/* 0x15D982 */
		.string "%s %d"
ascSSD_1:	/* 0x15D988 */
		.string "%s %s %d"
ascSSD_2:	/* 0x15D991 */
		.string "%s %s %d"
ascD_47:	/* 0x15D99A */
		.string "%d"
ascSD_5:	/* 0x15D99D */
		.string "%s %d"
ascSD_6:	/* 0x15D9A3 */
		.string "%s %d"
GLOBAL (unkn39_text)	/* 0x15d9a9 */
		.byte	0x0
GLOBAL (net_unkn40_text)	/* 0x15D9AA */
		.byte	0x0
GLOBAL (unkn41_text)
		.byte	0x0
ascSD_7:	/* 0x15D9AC */
		.string "%s %d"
ascD_48:	/* 0x15D9B2 */
		.string "%d"
ascSD_8:	/* 0x15D9B5 */
		.string "%s %d"
ascSD_9:	/* 0x15D9BB */
		.string "%s %d"
ascAltS:	/* 0x15D9C1 */
		.string "ALT+%s"
ascS_17:	/* 0x15D9C8 */
		.string "%s"
ascFooD:	/* 0x15D9CB */
		.string "FOO %d"
asc___:	/* 0x15D9D2 */
		.string "..."
asc____0:	/* 0x15D9D6 */
		.string "..."

ascD_50:	/* 0x15DA1B */
		.string "%d"
asc02d02d_1:	/* 0x15DA1E */
		.string "%02d/%02d"
asc02dnc:	/* 0x15DA28 */
		.string "%02dNC"

ascD_3:	/* 0x15DBE1 */
		.ascii  "\x25\x64\x00"
ascD_4:	/* 0x15DBE4 */
		.ascii  "\x25\x64\x00"
ascD_5:	/* 0x15DBE7 */
		.ascii  "\x25\x64\x00"

aSSaidNothing_:	/* 0x15DCA4 */
		.string "%s said nothing."
ascSS_2:	/* 0x15DCB5 */
		.string "%s: %s"
ascS_20:	/* 0x15DCBC */
		.ascii  "\x25\x73\x00"
ascCCSC:	/* 0x15DCBF */
		.string "%c%c%s%c"
ascDD:	/* 0x15DCC8 */
		.string "[%d/%d]"
ascD_56:	/* 0x15DCD0 */
		.ascii  "\x25\x64\x00"
aNoObjective:	/* 0x15DCD3 */
		.string "NO OBJECTIVE"
aBadPhwoarTypeD:	/* 0x15DCE0 */
		.string "bad phwoar type %d"
aXYZ0xX0xX0xXOw:	/* 0x15DCF3 */
		.string "(x,y,z) = (0x%x,0x%x,0x%x) owner = %d type = %d c = %d\n"
		.align	4

aDataMech_txt:	/* 0x15E804 */
		.string "data\\mech.txt"
aDataMech_dat:	/* 0x15E812 */
		.string "data\\mech.dat"
aPathlengthDPat:	/* 0x15E820 */
		.string "Pathlength == %d, path_count = %d"
		.short  0x0

aNext_trafficD:	/* 0x15E914 */
		.string "next_traffic = %d\n"

ascD_6:	/* 0x15EA0C */
		.string "%d"
ascD_7:	/* 0x15EA0F */
		.string "%d"
ascD_8:	/* 0x15EA12 */
		.string "%d"
ascD_9:	/* 0x15EA15 */
		.string "%d"
ascD_10:	/* 0x15EA18 */
		.string "%d"


asc04x_0:	/* 0x15EB37 */
		.string "%04x"
ascD_14:	/* 0x15EB3C */
		.string "%d"
ascS:	/* 0x15EB3F */
		.string "%s"

ascS_4:	/* 0x15EB4E */
		.string "%s"
ascS_5:	/* 0x15EB51 */
		.string "%s"
ascS_6:	/* 0x15EB54 */
		.string "%s"
ascS_7:	/* 0x15EB57 */
		.string "%s"
ascD_15:	/* 0x15EB5A */
		.string "%d"
ascD_16:	/* 0x15EB5D */
		.string "%d"

aDIdDTypeDSampl:	/* 0x15EB93 */
		.string "%d id %d type %d  sample %d vol %d sc %d pan %d handle %x"
aDIdDTypeDSam_0:	/* 0x15EBCD */
		.string "%d id %d type %d  sample %d vol %d sc %d pan %d"
		.align  4

aErrorAllocatio:	/* 0x15F14C */
		.string "ERROR: Allocation %s.\n"
aPressReturnT_0:	/* 0x15F163 */
		.string "Press return to continue\n"
aErrorFileS_:	/* 0x15F17D */
		.string "ERROR: File %s.\n"
aPressReturnToC:	/* 0x15F18E */
		.string "Press return to continue\n"
		.align	4

GLOBAL (aGettingHeaderB)	/* 0x161630 */
		.string "Getting header byte\n"
GLOBAL (aResendingD)	/* 0x161645 */
		.string "Resending %d\n"
GLOBAL (aResendingDelta)	/* 0x161653 */
		.string "Resending delta %d\n"
GLOBAL (aStartingExchan)	/* 0x161667 */
		.string "\nStarting exchange # %d\n"
GLOBAL (aCompletedExcha)	/* 0x161680 */
		.string "Completed exchange - Return Code = "
GLOBAL (aTrue)	/* 0x1616A4 */
		.string "TRUE\n"
GLOBAL (aFalse)	/* 0x1616AA */
		.string "FALSE\n"
GLOBAL (aTxData)	/* 0x1616B1 */
		.string "TX DATA: "
GLOBAL (asc02x)	/* 0x1616BB */
		.string "%02X "
data_1616c1:
		.ascii  "\x0a\x00"
GLOBAL (asc02x_0)	/* 0x1616C3 */
		.string "%02X "
ascRxData:	/* 0x1616C9 */
		.string "RX DATA: "
GLOBAL (asc02x_1)	/* 0x1616D3 */
		.string "%02X "
data_1616d9:
		.ascii  "\x0a\x00"
aStateChangeWai:	/* 0x1616DB */
		.string "State Change: WAITING_FOR_ACK = "
ascTrue_0:	/* 0x1616FC */
		.string "TRUE"
ascFalse_0:	/* 0x161701 */
		.string "FALSE"
aWaiting_for_da:	/* 0x161707 */
		.string "  WAITING_FOR_DATA = "
ascTrue_1:	/* 0x16171D */
		.string "TRUE\n"
ascFalse_1:	/* 0x161723 */
		.string "FALSE\n"
aSingleErrorDet:	/* 0x16172A */
		.string "Single error detected, syndrome = %02X\n"
aDoubleErrorDet:	/* 0x161752 */
		.string "Double error detected, syndrome = %02X\n"
		.short  0x0

word_1621AC: /* TODO BUG: this is clearly referenced from below, with negative offset. */
		.short  0x0
		.ascii  "\x1f\x00\x3b\x00\x5a\x00\x78\x00"
		.ascii  "\x97\x00\xb5\x00\xd4\x00\xf3\x00"
		.ascii  "\x11\x01\x30\x01\x4e\x01"
		.ascii  "\x6d\x01"
		.short  0x0

GLOBAL (netgame_agent_pos_x)	/* 0x176B80 */
		.fill   0x40
GLOBAL (netgame_agent_pos_z)	/* 0x176BC0 */
		.fill   0x40
GLOBAL (playable_agents)	/* 0x176C00 */
		.long	0x0
GLOBAL (net_agents__FourPacks)	/* 0x176C04 */
		.fill   0x0a0
data_176ca4:
		.fill   0x8
GLOBAL (dword_176CAC)	/* 0x176CAC */
		.long	0x0
GLOBAL (dword_176CB0)	/* 0x176CB0 */
		.long	0x0
data_176cb4:
		.short  0x0
data_176cb6:
		.short  0x0
GLOBAL (target_old_frameno)	/* 0x176CB8 */
		.long	0x0
GLOBAL (dword_176CBC)	/* 0x176CBC */
		.long	0x0
GLOBAL (dword_176CC0)	/* 0x176CC0 */
		.long	0x0
GLOBAL (dword_176CC4)	/* 0x176CC4 */
		.long	0x0
data_176cc8:
		.long	0x0
data_176ccc:
		.long	0x0
data_176cd0:
		.long	0x0
GLOBAL (unkn1_pos_x)	/* 0x176CD4 */
		.long	0x0
GLOBAL (unkn1_pos_y)	/* 0x176CD8 */
		.long	0x0
GLOBAL (unkn1_spr)		/* 0x176CDC */
		.long	0x0
GLOBAL (dword_176CE0)
		.long	0x0
GLOBAL (dword_176CE4)
		.long	0x0
GLOBAL (dword_176CE8)
		.long	0x0
GLOBAL (dword_176CEC)
		.long	0x0
GLOBAL (dword_176CF0)	/* 0x176CF0 */
		.long	0x0
GLOBAL (dword_176CF4)
		.fill   0x8
GLOBAL (tnext_special_face4)	/* 0x176CFC */
		.long	0x0
GLOBAL (dword_176D00)	/* 0x176D00 */
		.long	0x0
GLOBAL (dword_176D04)	/* 0x176D04 */
		.long	0x0
GLOBAL (tnext_floor_texture)	/* 0x176d08 */
		.long	0x0
GLOBAL (dword_176D0C)	/* 0x176D0C */
		.long	0x0
GLOBAL (dword_176D10)	/* 0x176D10 */
		.long	0x0
GLOBAL (dword_176D14)	/* 0x176D14 */
		.long	0x0
GLOBAL (dword_176D18)	/* 0x176D18 */
		.long	0x0
GLOBAL (dword_176D1C)	/* 0x176D1C */
		.long	0x0
		.fill   0x1C
GLOBAL (dword_176D3C)	/* 0x176D3C */
		.long	0x0
GLOBAL (dword_176D40)	/* 0x176D40 */
		.long	0x0
GLOBAL (dword_176D44)	/* 0x176D44 */
		.long	0x0
GLOBAL (byte_176D48)	/* 0x176D48 */
		.byte	0x0
GLOBAL (byte_176D49)	/* 0x176D49 */
		.byte	0x0
GLOBAL (byte_176D4A)	/* 0x176D4A */
		.byte	0x0
GLOBAL (byte_176D4B)	/* 0x176D48 */
		.byte	0x0
GLOBAL (dword_176D4C)	/* 0x176D4C */
		.long	0x0
GLOBAL (engn_yc)
		.long	0x0
GLOBAL (dword_176D54)	/* 0x176D54 */
		.long	0x0
GLOBAL (engn_anglexz)	/* 0x176D58 */
		.fill   0xc
GLOBAL (dword_176D64)	/* 0x176D64 */
		.long	0x0
GLOBAL (dword_176D68)	/* 0x176D68 */
		.long	0x0
data_176d6c:
		.long	0x0
GLOBAL (dword_176D70)	/* 0x176D70 */
		.long	0x0
GLOBAL (dword_176D74)	/* 0x176D74 */
		.long	0x0
GLOBAL (dword_176D78)	/* 0x176D78 */
		.long	0x0
GLOBAL (dword_176D7C)	/* 0x176D7C */
		.long	0x0
GLOBAL (dword_176D80)	/* 0x176D80 */
		.long	0x0
GLOBAL (dword_176D84)	/* 0x176D84 */
		.long	0x0
GLOBAL (dword_176D88)	/* 0x176D88 */
		.long	0x0
GLOBAL (dword_176D8C)	/* 0x176D8C */
		.long	0x0
data_176d90:
		.fill   0xa8
GLOBAL (word_176E38)
		.short  0x0
		.short  0x0
GLOBAL (save_mortal_salt)	/* 0x176E3C */
		.long	0x0
save_hashtbl_01:	/* 0x176E40 */
		.fill   0xdc
data_176f1c:
		.long	0x0
save_hashtbl_02:	/* 0x176F20 */
		.fill   0xe4
data_177004:
		.long	0x0
save_hashtbl_03:	/* 0x177008 */
		.fill   0xec
GLOBAL (save_crypto_tables_state)	/* 0x1770F4 */
		.byte	0x0
data_1770f5:
		.byte	0x0
data_1770f6:
		.short  0x0
GLOBAL (save_crypto_data_state)	/* 0x1770F8 */
		.byte	0x0
data_1770f9:
		.byte	0x0
data_1770fa:
		.short  0x0
save_hashtbl_verify_code:	/* 0x1770FC */
		.ascii  "\x00\x00\x00"
data_1770ff:
		.byte	0x0
GLOBAL (language_3str)	/* 0x177100 */
		.byte	0x0
data_177101:
		.ascii  "\x00\x00\x00"
GLOBAL (packet_rec_fh)
		.long	0x0
GLOBAL (smack_malloc_used_tot)	/* 0x177108 */
		.long	0x0
GLOBAL (dword_17710C)	/* 0x17710c */
		.long	0x0
GLOBAL (dword_177110)	/* 0x177110 */
		.fill   0x8

/* static ulong last_sel_agent_turn[8] */
last_sel_agent_turn:
		.long	0x0
data_17711c:
		.long	0x0
data_177120:
		.long	0x0
data_177124:
		.fill   0x9
GLOBAL (mission_result)	/* 0x17712D */
		.ascii  "\x00\x00\x00"

GLOBAL (mouser)	/* 0x177138 */
		.ascii  "\x00\x00\x00"
data_17713b:
		.byte	0x0
data_17713c:
		.long	0x0
data_177140:
		.fill   0x8
data_177148:
		.fill   0x8
data_177150:
		.fill   0x334
GLOBAL (unknmsg_str)	/* 0x177484 */
		.fill   0x64
GLOBAL (word_1774E8)	/* 0x1774E8 */
		.fill   0x258
GLOBAL (navi2_unkn_counter)	/* 0x177740 */
		.long	0x0
GLOBAL (engine_mem_alloc_ptr)	/* 0x177744 */
		.long	0x0
GLOBAL (scratch_malloc_mem)	/* 0x177748 */
		.long	0x0
GLOBAL (unkn_mech_arr7)	/* 0x17774C */
		.long	0x0
GLOBAL (dword_177750)	/* 0x177750 */
		.long	0x0
GLOBAL (cd_drive)	/* 0x177754 */
		.fill   0x34
unkn_mech_var10:	/* 0x177788 */
		.long	0x0
unkn_mech_var11:	/* 0x17778C */
		.long	0x0
data_177790:
		.long	0x0
data_177794:
		.byte	0x0
data_177795:
		.byte	0x0
data_177796:
		.byte	0x0
data_177797:
		.byte	0x0
GLOBAL (gamep_unknval_10)	/* 0x177798 */
		.long	0x0
GLOBAL (gamep_unknval_11)
		.long	0x0
GLOBAL (gamep_unknval_12)	/* 0x1777A0 */
		.long	0x0
GLOBAL (nav_stats__ThisTurn)	/* 0x1777A4 */
		.long	0x0
GLOBAL (gamep_unknval_14)
		.long	0x0
GLOBAL (gamep_unknval_15)
		.long	0x0
GLOBAL (gamep_unknval_16)	/* 0x1777B0 */
		.fill   0x8
GLOBAL (shield_frm)	/* 0x1777B8 */
		.short  0x0
		.short  0x0
		.short  0x0
		.short  0x0

GLOBAL (gamep_scene_effect_type)	/* 0x1777C8 */
		.ascii  "\x00\x00\x00"
		.byte	0x0
GLOBAL (my_paths)	/* 0x1777CC */
		.byte	0x0
data_1777cd:
		.fill   0x6
		.short  0x0
data_1777d5:
		.fill   0x8
		.fill   0x769c
data_17ee79:
		.fill   0x11
data_17ee8a:
		.short  0x0
GLOBAL (path_count)	/* 0x17EE8C */
		.long	0x0
GLOBAL (sprshadow_EE90)	/* 0x17EE90 */
		.byte	0x0
data_17ee91:
		.fill   0x17
GLOBAL (sprshadow_EEA8)	/* 0x17EEA8 */
		.byte	0x0
data_17eea9:
		.fill   0x257
GLOBAL (sprshadow_F100) /* 0x17F100 */
		.byte	0x0
data_17f101:
		.fill   0x17
GLOBAL (sprshadow_F118) /* 0x17F118 */
		.byte	0x0
data_17f119:
		.fill   0x257
GLOBAL (sprshadow_F370) /* 0x17F370 */
		.byte	0x0
data_17f371:
		.fill   0x17
GLOBAL (sprshadow_F388)	/* 0x17F388 */
		.byte	0x0
data_17f389:
		.fill   0x257
GLOBAL (sprshadow_F5E0)	/* 0x17F5E0 */
		.byte	0x0
data_17f5e1:
		.fill   0x17
GLOBAL (sprshadow_F5F8)	/* 0x17F5F8 */
		.byte	0x0
data_17f5f9:
		.fill   0x257
GLOBAL (sprshadow_F850)	/* 0x17F850 */
		.byte	0x0
data_17f851:
		.fill   0x1ff

GLOBAL (input_char)	/* 0x17FA50 */
		.short  0x0
data_17fa52:
		.short  0x0

GLOBAL (word_17FA58)	/* 0x17FA58 */
		.fill   0x320
/* struct DevInput joy; */
GLOBAL (joy)	/* 0x17FD78 */
joy_Yaw:
		.fill   0x40
joy_Roll:
		.fill   0x40
joy_Pitch:
		.fill   0x40
joy_AnalogueX:
		.fill   0x40
		.fill   0x40
		.fill   0x40
		.fill   0x40
		.fill   0x40
		.fill   0x40
joy_DigitalX:
		.fill   0x40
joy_DigitalY:
		.fill   0x40
		.fill   0x40
		.fill   0x40
		.fill   0x40
		.fill   0x40
joy_MinXAxis:
		.fill   0x40
		.fill   0x40
		.fill   0x40
		.fill   0x40
		.fill   0x40
		.fill   0x40
joy_MaxXAxis:
		.fill   0x40
		.fill   0x40
		.fill   0x40
		.fill   0x40
		.fill   0x40
		.fill   0x40
joy_XCentre:
		.fill   0x40
		.fill   0x40
		.fill   0x40
		.fill   0x40
		.fill   0x40
		.fill   0x40
joy_HatX:
		.fill   0x40
joy_HatY:
		.fill   0x40
joy_HatMax:
		.fill   0x40
joy_Buttons:
		.fill   0x40
joy_NumberOfButtons:
		.fill   0x40
joy_ConfigType:
		.fill   0x40
joy_MenuButtons:
		.fill   0x40
joy_Type:
		.fill   0x4
joy_NumberOfDevices:
		.fill   0x4
joy_DeviceType:
		.fill   0x40
joy_Init:
		.fill   0x14


GLOBAL (ingame)	/* 0x1807D4 */
ingame__GameMode:	/* 0x1807D4 ingame+0x000 */
		.short  0x0
/*
 * This variable decides what mode the game is in.  0x37 means menu, 0x32
 * means mission (though there are other possible values)
 */
/* uint16_t */
ingame__DisplayMode:	/* 0x1807D6 ingame+0x002 */
		.long	0x0
ingame__fld_unk7DA:	/* 0x1807DA ingame+0x006 */
		.byte	0x0
/*
 * 2 - track 1
 * 3 - track 2
 * 4 - track 3
 */
ingame__CDTrack:	/* 0x1807db ingame+0x007 */
		.byte	0x0
ingame__DangerTrack:	/* 0x1807dc ingame+0x008 */
		.byte	0x0
ingame__UseMultiMedia:	/* 0x1807DD ingame+0x009 */
		.byte	0x0
ingame__AutoResearch:	/* 0x1807DE ingame+0x00A */
		.byte	0x0
ingame__GameOver:	/* 0x1807DF ingame+0x00B */
		.byte	0x0
ingame__Scanner__X1:	/* 0x1807E0 ingame+0x00C */
		.long	0x0
ingame__Scanner__Y1:	/* 0x1807E4 ingame+0x010 */
		.long	0x0
ingame__Scanner__X2:	/* 0x1807E8 ingame+0x014 */
		.long	0x0
ingame__Scanner__Y2:	/* 0x1807EC ingame+0x018 */
		.long	0x0
ingame__Scanner__MX:	/* 0x1807F0 ingame+0x01C */
		.long	0x0
ingame__Scanner__MZ:	/* 0x1807F4 ingame+0x020 */
		.long	0x0
ingame__Scanner__Zoom:	/* 0x1807F8 ingame+0x024 */
		.long	0x0
ingame__Scanner__Angle:	/* 0x1807FC ingame+0x028 */
		.long	0x0
ingame__Scanner__Contrast:	/* 0x180800 ingame+0x02C */
		.long	0x0
ingame__Scanner__Brightness:	/* 0x180804 ingame+0x030 */
		.long	0x0
ingame__Scanner__Width:	/* 0x180808 ingame+0x034 (Scanner+0x028) */
		.fill   0x190
		.fill   0x190
		.fill   0x190
		.fill   0x190
		.fill   0x190
ingame__Scanner__BigBlip_0__X:	/* 0x180B28 ingame+0x354 (Scanner+0x348) */
		.long	0x0
ingame__Scanner__BigBlip_0__Z:	/* 0x180B2C ingame+0x358 (Scanner+0x34C) */
		.long	0x0
ingame__Scanner__BigBlip_0__Colour:	/* 0x180B30 */
		.byte	0x0
ingame__Scanner__BigBlip_0__Period:	/* 0x180B31 */
		.byte	0x0
ingame__Scanner__BigBlip_0__Speed:	/* 0x180B32 */
		.byte	0x0
ingame__Scanner__BigBlip_0__Counter:	/* 0x180B33 */
		.byte	0x0
		.fill   0xb4
ingame__Scanner__Arc_0__X1:	/* 0x180BE8 */
		.long	0x0
ingame__Scanner__Arc_0__Z1:	/* 0x180BEC */
		.long	0x0
ingame__Scanner__Arc_0__X2:	/* 0x180BF0 */
		.long	0x0
ingame__Scanner__Arc_0__Z2:	/* 0x180BF4 */
		.long	0x0
ingame__Scanner__Arc_0__Colour:	/* 0x180BF8 */
		.byte	0x0
ingame__Scanner__Arc_0__Period:	/* 0x180BF9 */
		.byte	0x0
		.byte	0x0
ingame__Scanner__Arc_0__Counter:	/* 0x180BFB */
		.byte	0x0
		.fill   0x3c
ingame__Scanner__Group:	/* 0x180C38 */
		.fill   0x6
ingame__Scanner__GroupCol:	/* 0x180C3E */
		.fill   0x6
ingame__Scanner__GroupCount:	/* 0x180C44 */
		.byte	0x0
ingame__Scanner__NearThing1:	/* 0x180C45 */
		.short  0x0
ingame__Credits:	/* 0x180C47 */
		.short  0x0
		.short  0x0
ingame__fld_unkC4B:	/* 0x180C4B */
		.short  0x0
		.short  0x0
ingame__fld_unkC4F:	/* 0x180C4F */
		.short  0x0
ingame__MissionStatus:	/* 0x180C51 */
		.short  0x0
/* Some kind of flags */
ingame__Flags:	/* 0x180C53 ingame+0x47F */
		.byte	0x0
ingame__Flags_p1:	/* 0x180C54 ingame+0x480 */
		.byte	0x0
ingame__Flags_p2:	/* 0x180C55 ingame+0x481 */
		.short  0x0
ingame__dword_180C57:	/* 0x180C57 */
		.short  0x0
data_180c59:
		.short  0x0
ingame__draw_unknprop_01:	/* 0x180C5B */
		.short  0x0
ingame__Rocket1:	/* 0x180C5D */
		.fill   0x1e
ingame__NextRocket:	/* 0x180C7B */
		.short  0x0
ingame__TrainMode:	/* 0x180C7D */
		.short  0x0
ingame__MyGroup:	/* 0x180C7F */
		.short  0x0
ingame__CurrentMission:	/* 0x180C81 */
		.short  0x0
		.align  4
ingame__DetailLevel:	/* 0x180c84 */
		.byte	0x0
ingame__UserZoom:	/* 0x180C85 */
		.short  0x0
		.short  0x0
ingame__LowerMemoryUse:
		.short  0x0
ingame__fld_unkC8B:	/* 0x180C8B */
		.short  0x0
		.fill   0x4
ingame__fld_unkC91:	/* 0x180C91 */
		.long	0x0
ingame__TrackX:	/* 0x180C95 */
		.short  0x0
ingame__TrackZ:	/* 0x180C97 */
		.short  0x0
ingame__TrackThing:	/* 0x180C99 */
		.fill   0x7
ingame__fld_unkCA0:	/* 0x180CA0 */
		.short  0x0
		.byte	0x0
ingame__PanelPermutation:	/* 0x180CA3 */
		.byte	0x0
ingame__TrenchcoatPreference:	/* 0x180CA4 */
		.byte	0x0
ingame__MissionNo:	/* 0x180CA5 */
		.byte	0x0
ingame__fld_unkCA6:	/* 0x180CA6 */
		.short  0x0
ingame__fld_unkCA8:	/* 0x180CA8 */
		.short  0x0
		.byte   0x0
ingame__PalType:	/* 0x180CAB */
		.byte	0x0
ingame__FlameCount:	/* 0x180CAC */
		.byte	0x0
data_180cad:
		.byte	0x0
ingame__LastTmap:	/* 0x180CAE */
		.byte	0x0
ingame__SoundThing:	/* 0x180CAF */
		.short  0x0
ingame__byte_180CB1:	/* 0x180CB1 */
		.byte	0x0
ingame__byte_180CB2:	/* 0x180CB2 */
		.byte	0x0
ingame__VisibleBillboardThing:	/* 0x180CB3 */
		.short  0x0
ingame__fld_unkCB5:	/* 0x180CB5 */
		.short  0x0
ingame__fld_unkCB7:	/* 0x180CB7 */
		.short  0x0
ingame__InNetGame_UNSURE:	/* 0x180CB9 */
		.fill   0x6
ingame__UserFlags:	/* 0x180CBF ingame+0x4eb */
		.byte	0x0
		.byte	0x0
ingame__CashAtStart:	/* 0x180CC1 ingame+0x4ed */
		.long	0x0
ingame__Expenditure:	/* 0x180CC5 */
		.long	0x0


GLOBAL (player_unknCC9)	/* 0x180CC9 */
		.byte	0x0
data_180cca:
		.fill   0x7f
		.fill   0x80
		.fill   0x80
		.fill   0x80
		.fill   0x80
		.fill   0x80
		.fill   0x80
		.fill   0x80

GLOBAL (player_unkn0C9)	/* 0x1810C9 */
		.fill   0x8

GLOBAL (dword_1810D1)	/* 0x1810D1 */
		.long	0x0
GLOBAL (dword_1810D5)	/* 0x1810D5 */
		.fill   0x5
GLOBAL (brightness)	/* 0x1810DA */
		.short  0x0
		.fill   0x8
GLOBAL (game_level_unique_id)	/* 0x1810E4 */
		.short  0x0
GLOBAL (game_level_unkn1)	/* 0x1810E6 */
		.fill   0x28
GLOBAL (game_level_unkn2)	/* 0x18110E */
		.fill   0x28
GLOBAL (colour_mix_lookup)	/* 0x181136 */
		.fill   0x0c
GLOBAL (colour_sel_grey)	/* 0x181142 */
		.fill   0x04
GLOBAL (colour_sel_green)	/* 0x181146 */
		.fill   0x04
GLOBAL (colour_sel_blue)	/* 0x18114a */
		.fill   0x04
GLOBAL (colour_sel_red)		/* 0x18114e */
		.fill   0x04
GLOBAL (colour_sel_purple)	/* 0x181152 */
		.fill   0x04
		.fill   0x2a
data_181180:
		.byte	0x0
GLOBAL (login_control__State)	/* 0x181181 */
		.byte	0x0
GLOBAL (login_control__TechLevel)	/* 0x181182 */
		.byte	0x0
GLOBAL (byte_181183)
		.byte	0x0
GLOBAL (login_control__Money)	/* 0x181184 */
		.byte	0x0
data_181185:
		.ascii  "\x00\x00\x00"
GLOBAL (login_control__City)	/* 0x181188 */
		.byte	0x0
GLOBAL (byte_181189)
		.byte	0x0
		.fill   0x1e

GLOBAL (nsvc)	/* 0x1811A8 */
		.long	0x0
data_1811ac:
		.short  0x0
GLOBAL (word_1811AE)	/* 0x1811AE */
		.short  0x0
data_1811b0:
		.short  0x0
data_1811b2:
		.short  0x0
data_1811b4:
		.fill   0x6
data_1811ba:
		.fill   0x8
data_1811c2:
		.short  0x0
data_1811c4:
		.fill   0x1e
data_1811e2:
		.fill   0x8
data_1811ea:
		.fill   0x8
GLOBAL (unkn_flags_08)	/* 0x1811F2 */
		.byte	0x0
		.fill   0x4b1

GLOBAL (ex_faces)	/* 0x18194C */
		.short  0x0
data_18194e:
		.fill   0x1e
data_18196c:
		.fill   0xe
data_18197a:
		.fill   0xb7d0
data_18d14a:
		.short  0x0

GLOBAL (shrapnel)	/* 0x18D14C */
		.fill   0x16
data_18d162:
		.fill   0x2fe6
data_190148:
		.long	0x0

GLOBAL (phwoar)	/* 0x19014C */
		.long	0x0
data_190150:
		.long	0x0
data_190154:
		.long	0x0
data_190158:
		.byte	0x0
data_190159:
		.byte	0x0
data_19015a:
		.byte	0x0
data_19015b:
		.fill   0x9
data_190164:
		.short  0x0
data_190166:
		.fill   0x6fe6
shrapnel_free:	/* 0x19714C */
		.short  0x0
phwoar_free:	/* 0x19714E */
		.short  0x0
GLOBAL (data_197150) /* 0x197150 */
		.fill   0x8
/* ushort text_window_x1;
 */
GLOBAL (text_window_x1)	/* 0x197158 */
		.short  0x0
/* ushort text_window_y1;
 */
GLOBAL (text_window_y1)
		.short  0x0
/* ushort text_window_x2;
 */
GLOBAL (text_window_x2)	/* 0x19715C */
		.short  0x0
/* ushort text_window_y2;
 */
GLOBAL (text_window_y2)
		.short  0x0
GLOBAL (byte_197160)	/* 0x197160 */
		.byte	0x0
		.fill   0x3
data_197164:
		.fill   0xc0
GLOBAL (prim_unknprop01)	/* 0x197224 */
		.short  0x0
		.align	4
GLOBAL (prim4_textures)	/* 0x197228 */
		.long	0x0
GLOBAL (prim_face_textures)	/* 0x19722C */
		.long	0x0
GLOBAL (prim_object_points)	/* 0x197230 */
		.long	0x0
GLOBAL (prim_object_faces)	/* 0x197234 */
		.long	0x0
GLOBAL (prim_object_faces4)	/* 0x197238 */
		.long	0x0
GLOBAL (prim_objects)	/* 0x19723C */
		.long	0x0
/* ushort same_type_head[290];
 */
GLOBAL (same_type_head)	/* 0x197240 */
		.fill   0x200
		.fill   0x44
GLOBAL (game_traffic_nodes)			/* 197484 */
		.long	0x0
GLOBAL (mission_list)	/* 0x197488 */
		.fill   0xa
data_197492:
		.short  0x0
data_197494:
		.short  0x0
data_197496:
		.short  0x0
data_197498:
		.short  0x0
data_19749a:
		.short  0x0
data_19749c:
		.byte	0x0
data_19749d:
		.byte	0x0
data_19749e:
		.byte	0x0
data_19749f:
		.ascii  "\x00\x00\x00"
data_1974a2:
		.ascii  "\x00\x00\x00"
data_1974a5:
		.fill   0x19
data_1974be:
		.byte	0x0
data_1974bf:
		.byte	0x0
data_1974c0:
		.byte	0x0
data_1974c1:
		.byte	0x0
data_1974c2:
		.fill   0x5
data_1974c7:
		.byte	0x0
data_1974c8:
		.long	0x0
data_1974cc:
		.short  0x0
data_1974ce:
		.fill   0x81e
data_197cec:
		.byte	0x0
data_197ced:
		.byte	0x0
data_197cee:
		.fill   0x11f3
data_198ee1:
		.fill   0x947
GLOBAL (mission_status)	/* 0x199828 */
		.long	0x0
data_19982c:
		.long	0x0
data_199830:
		.long	0x0
data_199834:
		.long	0x0
data_199838:
		.short  0x0
data_19983a:
		.short  0x0
data_19983c:
		.short  0x0
data_19983e:
		.short  0x0
data_199840:
		.short  0x0
data_199842:
		.fill   0xc
data_19984e:
		.byte	0x0
data_19984f:
		.fill   0x1298
data_19aae7:
		.byte	0x0
GLOBAL (level_def)	/* 0x19AAE8 */
level_def__PlayableGroups:
		.fill   0x29
data_19ab11:
		.byte	0x0
data_19ab12:
		.byte	0x0
data_19ab13:
		.byte	0x0
GLOBAL (bul_starts)	/* 0x19AB14 */
		.byte	0x0
data_19ab15:
		.fill   0x1f3f
GLOBAL (linear_vec_pal)	/* 0x19CA54 */
		.fill   0x100
GLOBAL (scratch_buf1)	/* 0x19CB54 */
		.long	0x0
data_19cb58:
		.fill   0x84

		.long	0x0
GLOBAL (fe_icons_sprites)	/* 0x19CBE8 */
		.long	0x0
GLOBAL (fe_icons_sprites_end)	/* 0x19CBEC */
		.long	0x0
GLOBAL (fe_icons_sprites_data)	/* 0x19CBF0 */
		.long	0x0
GLOBAL (fe_mouseptr_sprites)	/* 0x19CBF4 */
		.long	0x0
GLOBAL (fe_mouseptr_sprites_end)	/* 0x19CBF8 */
		.long	0x0
GLOBAL (fe_mouseptr_sprites_data)	/* 0x19CBFC */
		.long	0x0
GLOBAL (unk1_sprites)	/* 0x19CC00 */
		.long	0x0
GLOBAL (unk1_sprites_end)	/* 0x19CC04 */
		.long	0x0
GLOBAL (unk1_sprites_data)	/* 0x19CC08 */
		.fill   0x14
GLOBAL (fepanel_sprites)	/* 0x19CC1C */
		.long	0x0
GLOBAL (fepanel_sprites_end)	/* 0x19CC20 */
		.long	0x0
GLOBAL (fepanel_sprites_data)	/* 0x19CC24 */
		.fill   0x8
/* unsigned long m_spr_data[]
 */
GLOBAL (m_spr_data)
		.long	0x0
GLOBAL (m_spr_data_end)
		.long	0x0
/* TbSprite *m_sprites[]
 */
GLOBAL (m_sprites)	/* 0x19CC34 */
		.long	0x0
/* TbSprite *m_sprites_end[]
 */
GLOBAL (m_sprites_end)
		.long	0x0
GLOBAL (frame)
		.long	0x0
GLOBAL (frame_end)
		.long	0x0
		.fill   0x8
GLOBAL (melement_ani)	/* 0x19CC4C */
		.long	0x0
GLOBAL (mele_ani_end)
		.long	0x0
GLOBAL (nstart_ani)		/* 0x19CC54 */
		.long	0x0
GLOBAL (nstart_ani_end)	/* 0x19CC58 */
		.long	0x0
GLOBAL (colour_grey1)	/* 0x19CC5C */
		.byte	0x0
GLOBAL (colour_grey2)	/* 0x19CC5D */
		.byte	0x0
GLOBAL (colour_brown2) /* 0x19CC5E */
		.short  0x0
GLOBAL (nsta_size)	/* 0x19CC60 */
		.short  0x0
data_19cc62:
		.short  0x0
GLOBAL (word_19CC64)	/* 0x19CC64 */
		.short  0x0
GLOBAL (word_19CC66)	/* 0x19CC66 */
		.short  0x0
GLOBAL (super_quick_light)	/* 0x19CC68 */
		.fill   0x4000 /* 2 * (RENDER_AREA_MAX + 1) * (RENDER_AREA_MAX + 1) */
GLOBAL (tnext_screen_point)	/* 0x19EC68 */
		.short  0x0
GLOBAL (tnext_draw_item)	/* 0x19EC6A */
		.short  0x0
GLOBAL (tnext_sort_sprite)	/* 0x19EC6C */
		.short  0x0
GLOBAL (keyboard_mode_direct)	/* 0x19EC6E */
		.byte	0x0
GLOBAL (byte_19EC6F)	/* 0x19ec6f */
		.byte	0x0
data_19ec70:
		.byte	0x0
/* 0 - off, 5 - on */
GLOBAL (game_perspective)	/* 0x19EC71 */
		.byte	0x0
GLOBAL (unkn_flags_01)	/* 0x19EC72 */
		.long	0x0
GLOBAL (display_mode)	/* 0x19EC76 */
		.long	0x0
GLOBAL (byte_19EC7A)	/* 0x19EC7A */
		.byte	0x0
		.fill   0x3
GLOBAL (things_used)	/* 0x19EC7E */
		.short  0x0
GLOBAL (sthings_used)	/* 0x19EC80 */
		.short  0x0
sthings_empty_head:	/* 0x19EC82 */
		.short  0x0
GLOBAL (sthings_used_head)	/* 0x19EC84 */
		.short  0x0
things_empty_head:	/* 0x19EC86 */
		.short  0x0
GLOBAL (things_used_head)	/* 0x19EC88 */
		.short  0x0
		.short  0x0
GLOBAL (link__MapColListEmptyHead)	/* 0x19EC8C */
		.short  0x0
GLOBAL (link__MapColVectEmptyHead)	/* 0x19EC8E */
		.short  0x0
		.fill   0x8

GLOBAL (war_flags)	/* 0x19EC98 */
		.long	0x0
data_19ec9c:
		.long	0x0
data_19eca0:
		.long	0x0
war_flags__Truce:	/* 0x19ECA4 */
		.long	0x0
data_19eca8:
		.fill   0x4ef
data_19f197:
		.byte	0x0
GLOBAL (group_actions)	/* 0x19F198 */
		.long	0x0
data_19f19c:
		.long	0x0
data_19f1a0:
		.short  0x0
data_19f1a2:
		.short  0x0
data_19f1a4:
		.short  0x0
data_19f1a6:
		.byte	0x0
data_19f1a7:
		.fill   0x287
data_19f42e:
		.short  0x0
GLOBAL (mission_open)	/* 0x19F430 */
		.short  0x0
data_19f432:
		.short  0x0
data_19f434:
		.fill   0x5e
data_19f492:
		.short  0x0
GLOBAL (mission_state)	/* 0x19F494 */
		.short  0x0
data_19f496:
		.short  0x0
data_19f498:
		.fill   0x60
GLOBAL (dword_19F4F8)	/* 0x19F4F8 */
		.long	0x0
GLOBAL (dword_19F4FC)	/* 0x19F4FC */
		.long	0x0
GLOBAL (dword_19F500)	/* 0x19F500 */
		.long	0x0
GLOBAL (dword_19F504)	/* 0x19F504 */
		.long	0x0
GLOBAL (dword_19F508)	/* 0x19F508 */
		.long	0x0
GLOBAL (pktrec_mode)	/* 0x19F50C */
		.byte	0x0
		.align  4
GLOBAL (game_anim_tmaps)			/* 0x19f510 */
		.long	0x0
GLOBAL (game_commands)				/* 0x19f514 */
		.long	0x0
GLOBAL (game_used_objectives)		/* 0x19f518 */
		.long	0x0
GLOBAL (game_used_lvl_objectives)	/* 0x19f51c */
		.long	0x0
GLOBAL (game_level_miscs)			/* 0x19f520 */
		.long	0x0
GLOBAL (game_objectives)			/* 0x19f524 */
		.long	0x0
GLOBAL (game_col_vects)				/* 0x19f528 */
		.long	0x0
GLOBAL (game_walk_headers)			/* 0x19f52c */
		.long	0x0
GLOBAL (game_col_vects_list)		/* 0x19f530 */
		.long	0x0
GLOBAL (game_walk_items)			/* 0x19f534 */
		.long	0x0
GLOBAL (game_user_heap)				/* 0x19f538 */
		.long	0x0
GLOBAL (game_my_big_map)			/* 0x19f53c */
		.long	0x0

GLOBAL (game_col_columns)			/* 0x19f550 */
		.long	0x0
GLOBAL (execute_commands)			/* 0x19F554 */
		.fill   0x1e4
GLOBAL (debug_hud_collision)	/* 0x19F738 */
		.byte	0x0
		.align  2
GLOBAL (next_col_column)		/* 0x19f73a */
		.short  0x0
GLOBAL (textwalk_data)	/* 0x19F73C */
		.fill   0x280
GLOBAL (unkn_full_lights)	/* 0x19F9BC */
		.short  0x0
data_19f9be:
		.short  0x0
data_19f9c0:
		.short  0x0
data_19f9c2:
		.short  0x0
data_19f9c4:
		.fill   0x1ec
GLOBAL (local_mats)		/* 0x19FBB0 */
		.fill   0x8
data_19fbb8:
		.fill   0x18
data_19fbd0:
		.fill   0xdf0
GLOBAL (game_floor_tiles)			/* 0x1a09c0 */
		.long	0x0
GLOBAL (game_light_commands)		/* 0x1a09c4 */
		.long	0x0
GLOBAL (game_normals)				/* 0x1a09c8 */
		.long	0x0
GLOBAL (game_quick_lights)			/* 0x1a09cc */
		.long	0x0
GLOBAL (game_full_lights)			/* 0x1a09d0 */
		.long	0x0
GLOBAL (game_textures)				/* 0x1a09d4 */
		.long	0x0
GLOBAL (game_face_textures)			/* 0x1a09d8 */
		.long	0x0
/* struct Thing *things;
 */
GLOBAL (things)	/* 0x1A09DC */
		.long	0x0
GLOBAL (sthings)	/* 0x1A09E0 */
		.long	0x0
GLOBAL (game_object_points)			/* 0x1a09e4 */
		.long	0x0
GLOBAL (game_object_faces)			/* 0x1a09e8 */
		.long	0x0
GLOBAL (game_object_faces4)			/* 0x1a09ec */
		.long	0x0
GLOBAL (game_objects)				/* 0x1a09f0 */
		.long	0x0
GLOBAL (game_special_object_faces)	/* 0x1a09f4 */
		.long	0x0
GLOBAL (game_special_object_faces4)	/* 0x1a09f8 */
		.long	0x0
		.align  4

GLOBAL (word_1A5834)
		.short  0x0
GLOBAL (word_1A5836)
		.short  0x0

GLOBAL (small2_font)	/* 0x1A5850 */
		.long	0x0
GLOBAL (small2_font_end)	/* 0x1A5854 */
		.long	0x0
GLOBAL (small_med_font)	/* 0x1A5858 */
		.long	0x0
GLOBAL (small_med_font_end)	/* 0x1A585C */
		.long	0x0
GLOBAL (med_font)	/* 0x1A5860 */
		.long	0x0
GLOBAL (med_font_end)	/* 0x1A5864 */
		.long	0x0
GLOBAL (med2_font)	/* 0x1A5868 */
		.long	0x0
GLOBAL (med2_font_end)	/* 0x1A586C */
		.long	0x0
GLOBAL (big_font)	/* 0x1A5870 */
		.long	0x0
GLOBAL (big_font_end)	/* 0x1A5874 */
		.long	0x0
GLOBAL (display_palette)	/* 0x1A5878 */
		.fill   0x8

GLOBAL (gui_strings)	/* 0x1A5888 */
		.fill   8000

GLOBAL (small2_font_data)	/* 0x1A62C4 */
		.long	0x0
GLOBAL (small_med_font_data)	/* 0x1A62C8 */
		.long	0x0
GLOBAL (med_font_data)	/* 0x1A62CC */
		.long	0x0
GLOBAL (med2_font_data)	/* 0x1A62D0 */
		.long	0x0
GLOBAL (big_font_data)	/* 0x1A62D4 */
		.long	0x0
GLOBAL (turns_delta)	/* 0x1A62D8 */
		.long	0x0
GLOBAL (gameturn)	/* 0x1A62DC */
		.long	0x0
/* PlayerInfo players[8];
 */
GLOBAL (players)	/* 0x1a62e0 players+0x000  */
		.short  0x0
players_0_UserInput_0_Bits_p2:	/* 0x1a62e2 players+0x002  */
		.byte	0x0
players_0_UserInput_0_Bits_p3:	/* 0x1a62e3 players+0x003  */
		.byte	0x0
		.ascii  "\x00\x00"
players_0_UserInput_0_Turn: /* 0x1a62e6 players+0x006 */
		.fill   0x18
players_0_UserInput_0_ControlMode: /* 0x1a62fe players+0x01e */
		.byte	0x0
players_0_UserInput_0_ControlMode_p1: /* 0x1a62ff players+0x01f */
		.fill   0x03
players_0_UserInput_1_Bits:
		.fill   0x1e
players_0_UserInput_1_ControlMode: /* 0x1a6320 players+0x040 */
		.fill   0x22
players_0_UserInput_2_ControlMode: /* 0x1a6342 players+0x062 */
		.fill   0x22
players_0_UserInput_3_ControlMode: /* 0x1a6364 players+0x084 */
		.short  0x0
		.short  0x0
players_0_DirectControl_0:	/* 0x1a6368 players+0x088 */
		.long	0x0
players_0_DirectControl_1:	/* 0x1a636c players+0x08c */
		.long	0x0
players_0_DirectControl_2:	/* 0x1a6370 players+0x090 */
		.long	0x0
players_0_DirectControl_3:	/* 0x1a6374 players+0x094 */
		.long	0x0
players_0_ControlPad:	/* 0x1a6378 players+0x098 */
		.long	0x0
players_0_MyAgent_0:	/* 0x1a637c players+0x09C players[0].MyAgent[0] */
		.long	0x0
players_0_MyAgent_1:	/* 0x1a6380 players+0x0a0 players[0].MyAgent[1] */
		.long	0x0
players_0_MyAgent_2:	/* 0x1a6384 players+0x0a4 players[0].MyAgent[2] */
		.long	0x0
data_1a6388:
		.ascii  "\x00\x00\x00"
data_1a638b:
		.byte	0x0
data_1a638c:
		.long	0x0
data_1a6390:
		.long	0x0
data_1a6394:
		.fill   0x7
data_1a639b:
		.ascii  "\x00\x00\x00"
data_1a639e:
		.fill   0x8
data_1a63a6:
		.byte	0x0
data_1a63a7:
		.byte	0x0
data_1a63a8:
		.byte	0x0
data_1a63a9:
		.ascii  "\x00\x00\x00"
data_1a63ac:
		.short  0x0
data_1a63ae:
		.short  0x0
data_1a63b0:
		.byte	0x0
data_1a63b1:
		.ascii  "\x00\x00\x00"
data_1a63b4:
		.long	0x0
data_1a63b8:
		.long	0x0
data_1a63bc:
		.short  0x0
data_1a63be:
		.short  0x0
data_1a63c0:
		.byte	0x0
data_1a63c1:
		.byte	0x0
data_1a63c2:
		.short  0x0
data_1a63c4:
		.short  0x0
data_1a63c6:
		.short  0x0
data_1a63c8:
		.fill   0x6
data_1a63ce:
		.short  0x0
data_1a63d0:
		.short  0x0
data_1a63d2:
		.short  0x0
data_1a63d4:
		.short  0x0
data_1a63d6:
		.short  0x0
data_1a63d8:
		.fill   0x6
data_1a63de:
		.short  0x0
data_1a63e0:
		.short  0x0
data_1a63e2:
		.short  0x0
data_1a63e4:
		.byte	0x0
data_1a63e5:
		.byte	0x0
data_1a63e6:
		.ascii  "\x00\x00\x00"
data_1a63e9:
		.byte	0x0
data_1a63ea:
		.ascii  "\x00\x00\x00"
data_1a63ed:
		.byte	0x0
data_1a63ee:
		.ascii  "\x00\x00\x00"
data_1a63f1:
		.byte	0x0
data_1a63f2:
		.ascii  "\x00\x00\x00"
data_1a63f5:
		.byte	0x0
data_1a63f6:
		.long	0x0
data_1a63fa:
		.byte	0x0
data_1a63fb:
		.fill   0x7d
data_1a6478:
		.short  0x0
data_1a647a:
		.fill   0x6
data_1a6480:
		.short  0x0
data_1a6482:
		.fill   0xbae

GLOBAL (packets)	/* 0x1A7030 */
		.short  0x0
data_1a7032:
		.short  0x0
data_1a7034:
		.short  0x0
data_1a7036:
		.short  0x0
data_1a7038:
		.short  0x0
data_1a703a:
		.fill   0xa
data_1a7044:
		.fill   0xa
data_1a704e:
		.fill   0xa
data_1a7058:
		.long	0x0
data_1a705c:
		.fill   0x154

GLOBAL (local_player_no)	/* 0x1A71B0 */
		.byte	0x0
GLOBAL (exit_game)	/* 0x1A71B1 */
		.byte	0x0
GLOBAL (in_network_game)
		.byte	0x0
GLOBAL (is_single_game)	/* 0x1A71B3 */
		.byte	0x0
GLOBAL (cmdln_colour_tables)
		.byte	0x0
GLOBAL (cmdln_param_bcg)
		.byte	0x0
		.align  4

GLOBAL (colour_lookup)	/* 0x1A71B8 */
		.fill   0x0d
		.fill   0xf7

bangdetail__circle:	/* 0x1A72BC */
		.long	0x0
data_1a72c0:
		.long	0x0
data_1a72c4:
		.long	0x0
data_1a72c8:
		.long	0x0
data_1a72cc:
		.long	0x0
data_1a72d0:
		.long	0x0
data_1a72d4:
		.long	0x0
data_1a72d8:
		.long	0x0
bangdetail__sphere:	/* 0x1A72DC */
		.long	0x0
data_1a72e0:
		.long	0x0
data_1a72e4:
		.long	0x0
data_1a72e8:
		.long	0x0
data_1a72ec:
		.long	0x0
data_1a72f0:
		.long	0x0
data_1a72f4:
		.long	0x0
data_1a72f8:
		.long	0x0
data_1a72fc:
		.long	0x0
data_1a7300:
		.long	0x0
data_1a7304:
		.long	0x0
data_1a7308:
		.long	0x0
bangdetailmask:	/* 0x1A730C */
		.short  0x0
data_1a730e:
		.short  0x0
GLOBAL (palette_brightness)	/* 0x1A7310 */
		.long	0x0
data_1a7314:
		.long	0x0
GLOBAL (prev_tick_time)	/* 0x1A7318 */
		.long	0x0
GLOBAL (prev_gameturn)	/* 0x1A731C */
		.long	0x0
GLOBAL (curr_tick_time)	/* 0x1A7320 */
		.long	0x0
GLOBAL (active_flags_general_unkn01)	/* 0x1A7324 */
		.long	0x0
GLOBAL (sprite_over_16x16)	/* 0x1A7328 */
		.long	0x0
GLOBAL (navi2_unkn_counter_max)	/* 0x1A732C */
		.long	0x0
GLOBAL (word_1A7330)	/* 0x1A7330 */
		.fill   0x7d0
GLOBAL (byte_1A7B00)	/* 0x1A7B00 */
		.fill   0x3e8
GLOBAL (byte_1A7EE8)	/* 0x1A7EE8 */
		.fill   0x232c
data_1aa214:
		.short  0x0
data_1aa216:
		.short  0x0
data_1aa218:
		.short  0x0
data_1aa21a:
		.short  0x0
data_1aa21c:
		.short  0x0
data_1aa21e:
		.fill   0x4e
GLOBAL (unkn_changing_color_counter1)	/* 0x1AA26C */
		.long	0x0
GLOBAL (dword_1AA270)	/* 0x1AA270 */
		.long	0x0
data_1aa274:
		.long	0x0
GLOBAL (vec_tmap)	/* 0x1AA278 */
		.long	0x0
		.long	0x0
		.long	0x0
		.long	0x0
		.long	0x0	/* 0x1AA288 vec_tmap[4] */
		.long	0x0	/* 0x1AA28C vec_tmap[5] */
		.fill   0x30
data_1aa2c0:
		.fill   0x38
ingame__Tmaps:	/* 0x1AA2F8 */
		.fill   0x28
data_1aa320:
		.short  0x0
data_1aa322:
		.long	0x0
data_1aa326:
		.short  0x0
data_1aa328:
		.short  0x0
data_1aa32a:
		.long	0x0
data_1aa32e:
		.short  0x0
GLOBAL (data_1aa330)	/* 0x1aa330 */
		.short  0x0
GLOBAL (data_1aa332)	/* 0x1aa332 */
		.short  0x0
data_1aa334:
		.long	0x0
data_1aa338:
		.fill   0x54
data_1aa38c:
		.short  0x0
GLOBAL (word_1AA38E)	/* 0x1AA38E */
		.short  0x0
GLOBAL (word_1AA390)	/* 0x1AA390 */
		.short  0x0
GLOBAL (word_1AA392)	/* 0x1AA392 */
		.short  0x0
GLOBAL (word_1AA394)	/* 0x1AA394 */
		.fill   0x10
data_1aa3a4:
		.long	0x0
data_1aa3a8:
		.long	0x0
data_1aa3ac:
		.long	0x0
data_1aa3b0:
		.long	0x0
data_1aa3b4:
		.long	0x0
GLOBAL (unkn01_downcount)	/* 0x1AA3B8 */
		.long	0x0
GLOBAL (unkn01_pos_x)	/* 0x1AA3BC */
		.long	0x0
GLOBAL (unkn01_pos_y)	/* 0x1AA3C0 */
		.long	0x0
redo_scanner:	/* 0x1AA3C4 */
		.byte	0x0
data_1aa3c5:
		.byte	0x0
data_1aa3c6:
		.byte	0x0
data_1aa3c7:
		.fill   0x1fd
GLOBAL (dword_1AA5C4)	/* 0x1AA5C4 */
		.long	0x0
GLOBAL (dword_1AA5C8)	/* 0x1AA5C8 */
		.long	0x0
data_1aa5cc:
		.long	0x0
data_1aa5d0:
		.long	0x0
data_1aa5d4:
		.long	0x0
data_1aa5d8:
		.long	0x0
data_1aa5dc:
		.long	0x0
data_1aa5e0:
		.long	0x0
data_1aa5e4:
		.long	0x0
minimum_explode_size:	/* 0x1AA5E8 */
		.long	0x0
minimum_explode_and:	/* 0x1AA5EC */
		.long	0x0
minimum_explode_depth:	/* 0x1AA5F0 */
		.long	0x0
GLOBAL (word_1AA5F4)	/* 0x1AA5F4 */
		.short  0x0
GLOBAL (word_1AA5F6)	/* 0x1AA5F6 */
		.short  0x0
GLOBAL (word_1AA5F8)	/* 0x1AA5F8 */
		.short  0x0
GLOBAL (word_1AA5FA)	/* 0x1AA5FA */
		.short  0x0
data_1aa5fc:
		.fill   0x64
data_1aa660:
		.short  0x0
data_1aa662:
		.short  0x0
data_1aa664:
		.long	0x0
data_1aa668:
		.long	0x0
data_1aa66c:
		.long	0x0
data_1aa670:
		.long	0x0
data_1aa674:
		.long	0x0
data_1aa678:
		.long	0x0
data_1aa67c:
		.long	0x0
data_1aa680:
		.long	0x0
GLOBAL (billboard_anim_no)	/* 0x1AA684 */
		.byte	0x0
		.align  4

data_1aaa20:
		.long	0x0
data_1aaa24:
		.short  0x0
data_1aaa26:
		.short  0x0
data_1aaa28:
		.short  0x0
data_1aaa2a:
		.fill   0x2a
data_1aaa54:
		.long	0x0
data_1aaa58:
		.fill   0x30
GLOBAL (byte_1AAA88)	/* 0x1AAA88 */
		.byte  0x0
		.align  2
data_1aaa8a:
		.short  0x0
GLOBAL (animations)	/* 0x1AAA8C */
		.long	0x0
data_1aaa90:
		.long	0x0
data_1aaa94:
		.short  0x0
data_1aaa96:
		.short  0x0
data_1aaa98:
		.short  0x0
data_1aaa9a:
		.short  0x0
data_1aaa9c:
		.fill   0xa
data_1aaaa6:
		.short  0x0
data_1aaaa8:
		.short  0x0
data_1aaaaa:
		.short  0x0
data_1aaaac:
		.long	0x0
data_1aaab0:
		.short  0x0
data_1aaab2:
		.fill   0xa
data_1aaabc:
		.fill   0x8
data_1aaac4:
		.fill   0x36
data_1aaafa:
		.fill   0x72
GLOBAL (active_anim)	/* 0x1AAB6C */
		.fill   0x8
GLOBAL (dword_1AAB74)	/* 0x1AAB74 */
		.long	0x0
GLOBAL (dword_1AAB78)	/* 0x1AAB78 */
		.long	0x0
data_1aab7c:
		.long	0x0
data_1aab80:
		.long	0x0
GLOBAL (stored_l3d_next_object)	/* 0x1AAB84 */
		.long	0x0
GLOBAL (stored_l3d_next_object_face)	/* 0x1AAB88 */
		.long	0x0
GLOBAL (stored_l3d_next_object_face4)	/* 0x1AAB8C */
		.long	0x0
GLOBAL (stored_l3d_next_object_point)	/* 0x1AAB90 */
		.long	0x0
GLOBAL (stored_l3d_next_normal)	/* 0x1AAB94 */
		.long	0x0
GLOBAL (stored_l3d_next_face_texture)	/* 0x1AAB98 */
		.long	0x0
GLOBAL (stored_l3d_next_floor_texture)	/* 0x1AAB9C */
		.long	0x0
GLOBAL (stored_l3d_next_local_mat)	/* 0x1AABA0 */
		.long	0x0
GLOBAL (stored_level3d_inuse)	/* 0x1AABA4 */
		.long	0x0
GLOBAL (stored_g3d_next_object)	/* 0x1aaba8 */
		.long	0x0
GLOBAL (stored_g3d_next_object_face)	/* 0x1aabac */
		.long	0x0
GLOBAL (stored_g3d_next_object_face4)	/* 0x1aabb0 */
		.long	0x0
GLOBAL (stored_g3d_next_object_point)	/* 0x1aabb4 */
		.long	0x0
GLOBAL (stored_g3d_next_normal)	/* 0x1aabb8 */
		.long	0x0
GLOBAL (stored_g3d_next_face_texture)	/* 0x1aabbc */
		.long	0x0
GLOBAL (stored_g3d_next_floor_texture)	/* 0x1aabc0 */
		.long	0x0
GLOBAL (stored_g3d_next_local_mat)	/* 1aabc4 */
		.long	0x0
GLOBAL (stored_global3d_inuse)	/* 0x1AABC8 */
		.long	0x0
GLOBAL (things_init_times)	/* 0x1AABCC */
		.long	0x0
GLOBAL (word_1AABD0)	/* 0x1AABD0 */
		.short  0x0
GLOBAL (unkn01_thing_idx)	/* 0x1AABD2 */
		.short  0x0
GLOBAL (data_1aabd4)
		.long	0x0
GLOBAL (data_1aabd8)	/* 0x1AABD8 */
		.long	0x0
GLOBAL (data_1aabdc)
		.long	0x0
GLOBAL (triangulation)	/* 0x1AABE0 */
		.long	0x0
		.long	0x0
		.long	0x0
		.long	0x0
		.long	0x0
		.long	0x0
		.long	0x0
		.long	0x0
		.long	0x0
triangulation_0_ix_Points:	/* 0x1aabec */
		.long	0x0
triangulation_0_count_Points:	/* 0x1aabf0 */
		.long	0x0
triangulation_0_free_Points:	/* 0x1aabf4 */
		.long	0x0
		.long	0x0
		.long	0x0
/* Point *points
 */
triangulation_0_Points:	/* 0x1aac18 */
		.long	0x0
data_1aac1c:
		.long	0x0
data_1aac20:
		.fill   0x8
data_1aac28:
		.fill   0x10
data_1aac38:
		.long	0x0
data_1aac3c:
		.fill   0x14
data_1aac50:
		.long	0x0
data_1aac54:
		.long	0x0
data_1aac58:
		.long	0x0
data_1aac5c:
		.fill   0x8
data_1aac64:
		.fill   0x10
data_1aac74:
		.long	0x0
data_1aac78:
		.fill   0x14
data_1aac8c:
		.long	0x0
data_1aac90:
		.long	0x0
data_1aac94:
		.fill   0x1c
data_1aacb0:
		.long	0x0
data_1aacb4:
		.fill   0x14
data_1aacc8:
		.long	0x0
data_1aaccc:
		.fill   0x16c
GLOBAL (triangulation_initied)	/* 0x1AAE38 */
		.long	0x0
data_1aae3c:
		.fill   0xc
/* long Ex[]
 */
GLOBAL (Ex)	/* 0x1AAE48 */
		.long	0x0
		.fill   0x18c
/* long Ey[]
 */
GLOBAL (Ey)	/* 0x1AAFD8 */
		.long	0x0
		.fill   0x18c
/* long ixE;
 */
GLOBAL (ixE)
		.long	0x0
GLOBAL (thin_wall_x1)	/* 0x1AB16C */
		.long	0x0
GLOBAL (thin_wall_y1)	/* 0x1AB170 */
		.long	0x0
GLOBAL (thin_wall_x2)	/* 0x1AB174 */
		.long	0x0
GLOBAL (thin_wall_y2)	/* 0x1AB178 */
		.long	0x0
/* long tree_dad[8000]
 */
tree_dad:	/* 0x1AB17C */
		.fill   0x7d00
/* long tree_val[8000]
 */
tree_val:	/* 0x1B2E7C */
		.fill   0x7d00
/* uint8_t routeTags[8000]
 */
GLOBAL (routeTags)
		.fill   0x1f40
/* long tree_Ax8;
 */
tree_Ax8:
		.long	0x0
/* long tree_Ay8;
 */
tree_Ay8:
		.long	0x0
/* long tree_Bx8;
 */
tree_Bx8:
		.long	0x0
/* long tree_By8;
 */
tree_By8:
		.long	0x0
/* long tree_altA;
 */
tree_altA:
		.long	0x0
/* long tree_altB;
 */
tree_altB:
		.long	0x0
/* long tree_triA;
 */
tree_triA:
		.long	0x0
/* long tree_triB;
 */
tree_triB:
		.long	0x0
/* long tree_CentreDest;
 */
tree_CentreDest:
		.long	0x0
/* long tree_routelen;
 */
tree_routelen:
		.long	0x0
/* long tree_routecost;
 */
tree_routecost:
		.long	0x0
/* long tree_route[3000];
 */
tree_route:
		.fill   0x2ee0
/* long route_bak[3000];
 */
route_bak:
		.fill   0x2ee0
/* Path fwd_path;
 */
fwd_path:
		.fill   0x814
heap:	/* 0x1C30BC */
		.long	0x0
data_1c30c0:
		.fill   0x400
heap_end:	/* 0x1C34C0 */
		.long	0x0
dfs_node:	/* 0x1C34C4 */
		.fill   0x200
ix_dfs:	/* 0x1C36C4 */
		.long	0x0
ix_EdgePoints:	/* 0x1C36C8 */
		.long	0x0
GLOBAL (fringe_y)	/* 0x1C36CC */
		.fill   0x400
GLOBAL (fringe_x1)	/* 0x1C3ACC */
		.long	0x0
GLOBAL (fringe_y1)	/* 0x1C3AD0 */
		.long	0x0
GLOBAL (fringe_x2)	/* 0x1C3AD4 */
		.long	0x0
GLOBAL (fringe_y2)	/* 0x1C3AD8 */
		.long	0x0
GLOBAL (fringe_map)	/* 0x1C3ADC */
		.long	0x0
		.fill   0x814
data_1c42f4:
		.short  0x0
data_1c42f6:
		.fill   0x6
crater_unkn_texture_flags:	/* 0x1C42FC */
		.short  0x0
data_1c42fe:
		.short  0x0
data_1c4300:
		.short  0x0
data_1c4302:
		.short  0x0
unkstruct03_arr:	/* 0x1C4304 */
		.short  0x0
data_1c4306:
		.short  0x0
data_1c4308:
		.short  0x0
data_1c430a:
		.fill   0x3f8
data_1c4702:
		.short  0x0
data_1c4704:
		.short  0x0
data_1c4706:
		.short  0x0
data_1c4708:
		.short  0x0
data_1c470a:
		.short  0x0
data_1c470c:
		.byte	0x0
data_1c470d:
		.byte	0x0
data_1c470e:
		.short  0x0
data_1c4710:
		.short  0x0
data_1c4712:
		.short  0x0
data_1c4714:
		.fill   0x51
data_1c4765:
		.byte	0x0
data_1c4766:
		.byte	0x0
data_1c4767:
		.byte	0x0
unkstruct03_first:	/* 0x1C4768 */
		.byte	0x0
data_1c4769:
		.byte	0x0
unkstruct03_last:	/* 0x1C476A */
		.byte	0x0
data_1c476b:
		.byte	0x0
data_1c476c:
		.short  0x0
data_1c476e:
		.short  0x0
data_1c4770:
		.long	0x0


GLOBAL (brief_state_city_selected)	/* 0x1C47D8 */
		.byte	0x0
GLOBAL (brief_citymap_content)	/* 0x1C47D9 */
		.byte	0x0
		.ascii  "\x00\x00"
GLOBAL (mail_num_active_cities)	/* 0x1C47DC */
		.long	0x0
GLOBAL (dword_1C47E0)	/* 0x1C47E0 */
		.long	0x0
GLOBAL (byte_1C47E4)	/* 0x1C47E4 */
		.byte	0x0
		.byte	0x0
GLOBAL (word_1C47E6)	/* 0x1C47E6 */
		.short  0x0
GLOBAL (word_1C47E8)	/* 0x1C47E8 */
		.byte	0x0
data_1c47e9:
		.byte	0x0
data_1c47ea:
		.short  0x0
net_unkn1_text:	/* 0x1C47EC */
		.fill   0x19
data_1c4805:
		.byte	0x0
data_1c4806:
		.short  0x0
GLOBAL (scientist_lost_reason)	/* 0x1C4808 */
		.fill   0x3c
data_1c4844:
		.short  0x0
GLOBAL (word_1C4846)	/* 0x1C4846 */
		.fill   0xe
data_1c4854:
		.short  0x0
GLOBAL(word_1C4856)	/* 0x1C4856 */
		.fill   0x10
GLOBAL(word_1C4866)	/* 0x1C4866 */
		.short  0x0
		.short  0x0
		.short  0x0
GLOBAL (textpos)	/* 0x1C486C */
		.short  0x0
data_1c486e:
		.fill   0x12
data_1c4880:
		.fill   0x8
GLOBAL (byte_1C4888)	/* 0x1C4888 */
		.short  0x0
GLOBAL (word_1C488A)	/* 0x1C488A */
		.fill   0xc
GLOBAL (word_1C4896)	/* 0x1C4896 */
		.fill   0xc
GLOBAL (word_1C48A2)	/* 0x1C48A2 */
		.fill   0xc
GLOBAL (word_1C48AE)	/* 0x1C48AE */
		.fill   0xe
GLOBAL (landmap_8BC)	/* 0x1C48BC */
		.long	0x0
GLOBAL (landmap_8C0)	/* 0x1C48C0 */
		.long	0x0
GLOBAL (landmap_8C4)	/* 0x1C48C4 */
		.long	0x0
GLOBAL (landmap_8C8)	/* 0x1C48C8 */
		.long	0x0
GLOBAL (word_1C48CC)	/* 0x1C48CC */
		.short  0x0
		.short  0x0
GLOBAL (dword_1C48D0)	/* 0x1C48D0 */
		.long	0x0
GLOBAL (dword_1C48D4)	/* 0x1C48D4 */
		.long	0x0
		.fill   0x8
GLOBAL (dword_1C48E0)	/* 0x1C48E0 */
		.fill   0x18
GLOBAL (dword_1C48F8)	/* 0x1C48F8 */
		.long	0x0
GLOBAL (dword_1C48FC)	/* 0x1C48FC */
		.long	0x0
		.fill   0x8
GLOBAL (dword_1C4908)	/* 0x1C4908 */
		.fill   0x18
GLOBAL (dword_1C4920)	/* 0x1C4920 */
		.long	0x0
GLOBAL (dword_1C4924)	/* 0x1C4924 */
		.long	0x0
		.fill   0x8
GLOBAL (dword_1C4930)	/* 0x1C4930 */
		.fill   0x18
data_1c4948:
		.fill   0x14
GLOBAL (byte_1C495C)	/* 0x1C495C */
		.fill   0x14
GLOBAL (byte_1C4970)	/* 0x1C4970 */
		.ascii  "\x00\x00\x00"
GLOBAL (research_completed)	/* 0x1C4973 */
		.byte	0x0
GLOBAL (cheat_research_weapon)	/* 0x1C4974 */
		.byte	0x0
GLOBAL (equip_agents_panel_draw_state)	/* 0x1C4975 */
		.byte	0x0
GLOBAL (equip_agent_name_draw_state)	/* 0x1C4976 */
		.byte	0x0
GLOBAL (cheat_research_cybmods)	/* 0x1C4977 */
		.byte	0x0
GLOBAL (byte_1C4978)	/* 0x1C4978 */
		.byte	0x0
GLOBAL (byte_1C4979)	/* 0x1C4979 */
		.short  0x0
GLOBAL (research_curr_wep_daily_done)	/* 0x1C497B */
		.byte	0x0
GLOBAL (research_curr_mod_daily_done)	/* 0x1C497C */
		.byte	0x0
GLOBAL (byte_1C497D)	/* 0x1C497D */
		.byte	0x0
GLOBAL (byte_1C497E)	/* 0x1C497E */
		.byte	0x0
GLOBAL (byte_1C497F)	/* 0x1C497F */
		.byte	0x0
GLOBAL (byte_1C4980)	/* 0x1C4980 */
		.byte	0x0
		.fill	0x03
GLOBAL (byte_1C4984)	/* 0x1C4984 */
		.fill   0x6
GLOBAL (word_1C498A)	/* 0x1C498A */
		.short  0x0
GLOBAL (byte_1C498C)	/* 0x1C498C */
		.byte	0x0
GLOBAL (data_1c498d)	/* 0x1c498d */
		.byte	0x0
GLOBAL (mouse_sprite_anim_frame)
		.byte	0x0

GLOBAL (replay_intro_timer)	/* 0x1C4992 */
		.short  0x0
data_1c4994:
		.byte	0x0
data_1c4995:
		.ascii  "\x00\x00\x00"
GLOBAL (net_unkn2_text)	/* 0x1C4998 */
		.long	0x0
data_1c499c:
		.fill   0x10
GLOBAL (unkn2_names)	/* 0x1C49AC */
		.fill   0x80
GLOBAL (new_weapons_researched)	/* 0x1c4a2c */
		.long	0x0
GLOBAL (new_mods_researched)	/* 0x1c4a30 */
		.long	0x0
GLOBAL (scientists_lost)
		.byte	0x0
		.fill   0x37
GLOBAL (game_gfx_advanced_lights)	/* 0x1C4A6C */
		.byte	0x0
GLOBAL (game_billboard_movies)	/* 0x1C4A6D */
		.byte	0x0
GLOBAL (game_gfx_deep_radar)	/* 0x1C4A6E */
		.byte	0x0
GLOBAL (byte_1C4A6F)
		.byte	0x0
GLOBAL (data_1c4a70)
		.long	0x0
/* ScreenPoint *hotspot_buffer;
 */
GLOBAL (hotspot_buffer)	/* 0x1C4A74 */
		.long	0x0
/* ubyte *back_buffer;
 */
GLOBAL (back_buffer)
		.long	0x0
GLOBAL (byte_1C4A7C)	/* 0x1C4A7C */
		.byte	0x0
GLOBAL (change_screen)	/* 0x1C4A7D */
		.byte	0x0
GLOBAL (restore_savegame)	/* 0x1C4A7E */
		.short  0x0
/* The maximum volume is 322. */
GLOBAL (startscr_samplevol)			/* 1c4a80 */
		.short  0x0
GLOBAL (startscr_midivol)	/* 1c4a82 */
		.short  0x0
GLOBAL (startscr_cdvolume)		/* 1c4a84 */
		.long	0x0
GLOBAL (flic_mods)	/* 0x1C4A88 */
		.byte	0x0
data_1c4a89:
		.byte	0x0
data_1c4a8a:
		.byte	0x0
data_1c4a8b:
		.fill   0x5
GLOBAL (old_flic_mods)	/* 0x1C4A90 */
		.fill   0x5
		.fill   0x2
data_1c4a97:
		.byte	0x0
GLOBAL (mod_draw_states)	/* 0x1C4A98 */
		.byte	0x0
data_1c4a99:
		.byte	0x0
data_1c4a9a:
		.byte	0x0
data_1c4a9b:
		.byte	0x0
GLOBAL (new_current_drawing_mod)	/* 0x1C4A9C */
		.byte	0x0
GLOBAL (current_drawing_mod)	/* 0x1C4A9D */
		.byte	0x0
GLOBAL (mo_from_agent)	/* 0x1C4A9E */
		.byte	0x0
GLOBAL (ctl_joystick_type)	/* 0x1C4A9F */
		.byte	0x0
GLOBAL (display_box_content)	/* 0x1C4AA0 */
		.byte	0x0
		.byte	0x0
GLOBAL (data_1c4aa2)	/* 0x1c4aa2 */
		.byte	0x0
GLOBAL (byte_1C4AA3)	/* 0x1c4aa3 */
		.byte	0x0
GLOBAL (old_screentype)	/* 0x1C4AA4 */
		.byte	0x0
GLOBAL (screentype)	/* 0x1C4AA5 */
		.ascii  "\x00\x00\x00"
GLOBAL (mission_briefing_text)	/* 0x1C4AA8 */
		.long	0x0
GLOBAL (weapon_text)	/* 0x1C4AAC */
		.long	0x0
GLOBAL (weapon_text_index)	/* 0x1C4AB0 */
		.fill   0x40
GLOBAL (cybmod_text_index)	/* 0x1c4af0 */
		.fill   0x20
GLOBAL (netscan_text)	/* 0x1c4b10 */
		.long	0x0
GLOBAL (memload)	/* 0x1C4B14 */
		.ascii  "\x00\x00\x00"
data_1c4b17:
		.byte	0x0
GLOBAL (mission_name)	/* 0x1c4b18 */
		.fill   0x34
GLOBAL (options_title_text)	/* 0x1C4B4C */
		.fill   0x14
GLOBAL (map_editor)	/* 0x1C4B60 */
		.long	0x0
GLOBAL (brief_netscan_cost_text)	/* 0x1C4B64 */
		.fill   0x14
GLOBAL (start_into_mission)	/* 0x1c4b78 */
		.byte	0x0
GLOBAL (map_from_mission)	/* 0x1C4B79 */
		.byte	0x0
/* 0 - slow, 1 - fast */
GLOBAL (game_projector_speed)	/* 1c4b7a */
		.byte	0x0
GLOBAL (enter_game)	/* 0x1C4B7B */
		.byte	0x0
/*
 * 0 - none
 * 1 - multinet access
 * 2 - file storage
 * 3 - interface
 * 4 - audio
 * 5 - visual depth
 * 6 - logout (temporary)
 */
GLOBAL (game_system_screen)	/* 0x1c4b7c */
		.byte	0x0
GLOBAL (redraw_screen_flag)	/* 0x1C4B7D */
		.byte	0x0
GLOBAL (net_unkn_pos_02)	/* 0x1C4B7E */
		.byte	0x0
GLOBAL (byte_1C4B7F)
		.byte	0x0
GLOBAL (reload_background_flag)	/* 0x1C4B80 */
		.byte	0x0
/* bool */
GLOBAL (game_high_resolution)	/* 0x1c4b81 */
		.byte   0x0
		.ascii  "\x00\x00"
data_1c4b84:
		.long	0x0
data_1c4b88:
		.long	0x0
GLOBAL (equip_cost_text)	/* 0x1C4B8C */
		.fill   0x10
data_1c4b9c:
		.long	0x0
GLOBAL (cryo_agents)	/* 0x1C4BA0 */
		.byte	0x0
data_1c4ba1:
		.fill   0x7d
data_1c4c1e:
		.short  0x0
data_1c4c20:
		.byte	0x0
data_1c4c21:
		.byte	0x0
data_1c4c22:
		.short  0x0
data_1c4c24:
		.short  0x0
data_1c4c26:
		.fill   0x3a
data_1c4c60:
		.short  0x0
data_1c4c62:
		.byte	0x0
data_1c4c63:
		.byte	0x0
data_1c4c64:
		.fill   0x1b
data_1c4c7f:
		.byte	0x0
data_1c4c80:
		.byte	0x0
data_1c4c81:
		.byte	0x0
data_1c4c82:
		.byte	0x0
data_1c4c83:
		.byte	0x0
data_1c4c84:
		.byte	0x0
data_1c4c85:
		.byte	0x0
data_1c4c86:
		.byte	0x0
data_1c4c87:
		.byte	0x0
data_1c4c88:
		.fill   0x9a
data_1c4d22:
		.short  0x0
data_1c4d24:
		.byte	0x0
GLOBAL (selected_agent)	/* 0x1C4D25 */
		.ascii  "\x00\x00\x00"
GLOBAL (cybmod_name_text)
		.fill   0x12
data_1c4d3a:
		.short  0x0
GLOBAL (research)	/* 0x1C4D3C */
		.fill   0x26c
data_1c4fa8:
		.fill   0x12
data_1c4fba:
		.short  0x0
data_1c4fbc:
		.fill   0x280
data_1c523c:
		.fill   0x20
data_1c525c:
		.fill   0x20
data_1c527c:
		.long	0x0
data_1c5280:
		.byte	0x0
data_1c5281:
		.short  0x0
data_1c5283:
		.byte	0x0
data_1c5284:
		.byte	0x0
data_1c5285:
		.byte	0x0
data_1c5286:
		.byte	0x0
data_1c5287:
		.byte	0x0
data_1c5288:
		.byte	0x0
data_1c5289:
		.byte	0x0
data_1c528a:
		.byte	0x0
data_1c528b:
		.byte	0x0
data_1c528c:
		.long	0x0
data_1c5290:
		.byte	0x0
data_1c5291:
		.byte	0x0
data_1c5292:
		.byte	0x0
data_1c5293:
		.byte	0x0
data_1c5294:
		.long	0x0
GLOBAL (refresh_equip_list)	/* 0x1C5298 */
		.short  0x0
data_1c529a:
		.byte	0x0
data_1c529b:
		.byte	0x0
GLOBAL (dword_1C529C)	/* 0x1C529C */
		.fill   0x18
GLOBAL (landmap_2B4)	/* 0x1C52B4 */
		.long	0x0
GLOBAL (num_cities)	/* 0x1C52B8 */
		.short  0x0
word_1C52BA:	/* 0x1C52BA */
		.short  0x0
GLOBAL (cities)	/* 0x1C52BC */
		.short  0x0
		.short  0x0
data_1c52c0:
		.byte	0x0
		.byte	0x0
data_1c52c2:
		.byte	0x0
		.byte	0x0
data_1c52c4:
		.fill   0x47e
data_1c5742:
		.short  0x0
world_landmap_box_x:	/* 0x1C5744 */
		.fill   0x348
GLOBAL (netscan_objectives)	/* 0x1C5A8C */
		.short  0x0
data_1c5a8e:
		.short  0x0
data_1c5a90:
		.ascii  "\x00\x00\x00"
data_1c5a93:
		.byte	0x0
data_1c5a94:
		.fill   0x5
data_1c5a99:
		.fill   0xa5
data_1c5b3e:
		.fill   0x16
GLOBAL (netscan_objectives_count)	/* 0x1C5B54 */
		.byte	0x0
data_1c5b55:
		.ascii  "\x00\x00\x00"
GLOBAL (network_players)	/* 0x1C5B58 */
		.byte	0x0
data_1c5b59:
		.long	0x0
data_1c5b5d:
		.byte	0x0
data_1c5b5e:
		.byte	0x0
data_1c5b5f:
		.byte	0x0
data_1c5b60:
		.byte	0x0
data_1c5b61:
		.short  0x0
data_1c5b63:
		.byte	0x0
data_1c5b64:
		.byte	0x0
data_1c5b65:
		.short  0x0
data_1c5b67:
		.short  0x0
data_1c5b69:
		.byte	0x0
data_1c5b6a:
		.byte	0x0
data_1c5b6b:
		.byte	0x0
data_1c5b6c:
		.byte	0x0
data_1c5b6d:
		.fill   0xbb
GLOBAL (byte_1C5C28)
		.fill   0x8
GLOBAL (byte_1C5C30)
		.fill   0x8
GLOBAL (group_types)	/* 0x1C5C38 */
		.fill   0x8
GLOBAL (unkstruct04_arr)	/* 0x1C5C40 */
		.fill   0x1103
data_1c6d43:
		.short  0x0
data_1c6d45:
		.ascii  "\x00\x00\x00"
GLOBAL (byte_1C6D48)	/* 0x1c6d48 */
		.byte	0x0
GLOBAL (net_host_player_no)	/* 0x1C6D49 */
		.byte	0x0
GLOBAL (byte_1C6D4A)	/* 0x1C6D4A */
		.short  0x0
GLOBAL (login_name)	/* 0x1C6D4C */
		.fill   0x10
GLOBAL (net_players)
		.fill   0x64
data_1c6dc0:
		.fill   0x1a
data_1c6dda:
		.byte	0x0
data_1c6ddb:
		.byte	0x0
GLOBAL (byte_1C6DDC)	/* 0x1C6DDC */
		.fill   0x5
		.fill   0x3
GLOBAL (dword_1C6DE4)	/* 0x1c6de4 */
		.long	0x0
GLOBAL (dword_1C6DE8)	/* 0x1c6de8 */
		.long	0x0
GLOBAL (background_type)	/* 0x1C6DEC */
		.byte	0x0
GLOBAL (byte_1C6DED)
		.ascii  "\x00\x00\x00"
GLOBAL (global_date)	/* 0x1C6DF0 */
		.byte	0x0
data_1c6df1:
		.byte	0x0
data_1c6df2:
		.byte	0x0
data_1c6df3:
		.byte	0x0
data_1c6df4:
		.long	0x0
GLOBAL (research_curr_wep_date)	/* 0x1C6DF8 */
		.fill   0x8
GLOBAL (research_curr_mod_date)	/* 0x1C6E00 */
		.fill   0x6
data_1c6e06:
		.short  0x0
GLOBAL (word_1C6E08)	/* 0x1C6E08 */
		.short  0x0
GLOBAL (word_1C6E0A)	/* 0x1C6E0A */
		.short  0x0
GLOBAL (email_store)	/* 0x1C6E0C */
		.byte	0x0
data_1c6e0d:
		.byte	0x0
data_1c6e0e:
		.byte	0x0
data_1c6e0f:
		.byte	0x0
data_1c6e10:
		.fill   0x60
GLOBAL (brief_store)	/* 0x1C6E70 */
		.byte	0x0
data_1c6e71:
		.byte	0x0
data_1c6e72:
		.byte	0x0
data_1c6e73:
		.byte	0x0
data_1c6e74:
		.fill   0x30
GLOBAL (newmail_store)	/* 0x1C6EA4 */
		.byte	0x0
data_1c6ea5:
		.byte	0x0
data_1c6ea6:
		.byte	0x0
data_1c6ea7:
		.byte	0x0
data_1c6ea8:
		.fill   0x90
GLOBAL (new_mail)	/* 0x1C6F38 */
		.short  0x0
GLOBAL (next_email)	/* 0x1C6F3A */
		.short  0x0
GLOBAL (next_brief)	/* 0x1C6F3C */
		.short  0x0
GLOBAL (word_1C6F3E)	/* 0x1C6F3E */
		.short  0x0
GLOBAL (word_1C6F40)	/* 0x1C6F40 */
		.short  0x0
GLOBAL (old_mission_brief)	/* 0x1C6F42 */
		.short  0x0
GLOBAL (open_brief)	/* 0x1C6F44 */
		.short  0x0
GLOBAL (next_ref)	/* 0x1C6F46 */
		.short  0x0
GLOBAL (word_1C6F48)	/* 0x1C6F48 */
		.short  0x0
GLOBAL (edit_flag)	/* 0x1C6F4A */
		.byte	0x0
GLOBAL (controls_edited_gkey)	/* 0x1C6F4B */
		.byte	0x0
GLOBAL (save_game_buffer)	/* 0x1C6F4C */
		.long	0x0
GLOBAL (heading_box)	/* 0x1C6F50 */
		.fill   0x44
GLOBAL (loading_INITIATING_box)	/* 0x1C6F94 */
		.fill   0x44
GLOBAL (unkn13_SYSTEM_button)	/* 0x1C6FD8 */
		.fill   0x44
GLOBAL (system_screen_shared_header_box)	/* 0x1C701C */
		.fill   0x44
GLOBAL (options_gfx_box)	/* 0x1C7060 */
		.fill   0x18
GLOBAL (storage_slots_box)	/* 0x1C7078 */
		.fill   0x44
GLOBAL (sysmnu_buttons)	/* 0x1C70BC */
		.fill   0x114
GLOBAL (storage_LOAD_button)	/* 0x1C71D0 */
		.fill   0x30
GLOBAL (storage_SAVE_button)	/* 0x1C7200 */
		.fill   0x30
GLOBAL (storage_NEW_MORTAL_button)	/* 0x1C7230 */
		.fill   0x30
GLOBAL (controls_joystick_box)	/* 0x1C7260 */
		.fill   0x18
GLOBAL (audio_volume_boxes)	/* 0x1C7278 */
		.fill   0x48
GLOBAL (audio_tracks_box)	/* 0x1C72C0 */
		.fill   0x18
GLOBAL (options_audio_buttons)	/* 0x1C72D8, audio -> music track */
		.fill   0x144
GLOBAL (options_gfx_buttons)	/* 0x1C741C */
		.fill   0x2E0
GLOBAL (net_protocol_option_button)	/* 0x1C76FC */
		.fill   0x30
GLOBAL (brief_graphical_box)	/* 0x1C772C */
		.fill   0x18
GLOBAL (brief_netscan_box)	/* 0x1C7744 */
		.fill   0x44
GLOBAL (brief_mission_text_box)	/* 0x1C7788 */
		.fill   0x44
GLOBAL (unkn1_ACCEPT_button)	/* 0x1C77CC */
		.fill   0x30
GLOBAL (unkn1_CANCEL_button)	/* 0x1C77FC */
		.fill   0x30
GLOBAL (brief_NETSCAN_button)	/* 0x1C782C */
		.fill   0x30
GLOBAL (brief_NETSCAN_COST_box)	/* 0x1C785C */
		.fill   0x2C
GLOBAL (debrief_mission_box)	/* 0x1C7888 */
		.fill   0x18
GLOBAL (debrief_people_box)	/* 0x1C78A0 */
		.fill   0x18
GLOBAL (world_landmap_box)	/* 0x1C78B8 */
		.fill   0x18
GLOBAL (world_city_info_box)	/* 0x1C78D0 */
		.fill   0x44
GLOBAL (world_info_ACCEPT_button)	/* 0x1C7914 */
		.fill   0x30
GLOBAL (world_info_CANCEL_button)	/* 0x1C7944 */
		.fill   0x30
GLOBAL (main_quit_button)	/* 0x1C7974 */
		.fill   0x30
GLOBAL (main_login_button)	/* 0x1C79A4 */
		.fill   0x30
GLOBAL (login_continue_button)	/* 0x1C79D4 */
		.fill   0x30
GLOBAL (login_abort_button)	/* 0x1C7A04 */
		.fill   0x30
GLOBAL (main_map_editor_button)	/* 0x1C7A34 */
		.fill   0x30
GLOBAL (main_load_button)	/* 0x1C7A64 */
		.fill   0x30
GLOBAL (login_campaigns_box)	/* 0x1C7A94 */
		.fill   0x18
GLOBAL (login_name_box)	/* 0x1C7AAC */
		.fill   0x18
GLOBAL (equip_list_head_box)	/* 0x1C7AC4 */
		.fill   0x44
GLOBAL (equip_name_box)	/* 0x1C7B08 */
		.fill   0x44
GLOBAL (weapon_slots)	/* 0x1C7B4C */
		.fill   0x18
GLOBAL (equip_list_box)	/* 0x1C7B64 */
		.fill   0x44
GLOBAL (equip_display_box)	/* 0x1C7BA8 */
		.fill   0x44
GLOBAL (equip_offer_buy_button)	/* 0x1C7BEC */
		.fill   0x30
GLOBAL (cryo_offer_cancel_button)	/* 0x1C7C1C */
		.fill   0x30
GLOBAL (equip_cost_box)	/* 0x1C7C4C */
		.fill   0x2C
GLOBAL (equip_agent_select_shapes)	/* 0x1C7C78 */
		.fill   0x0D4
GLOBAL (equip_all_agents_button)	/* 0x1C7D4C */
		.fill   0x30
GLOBAL (research_unkn21_box)	/* 0x1C7D7C */
		.fill   0x44
GLOBAL (research_submit_button)	/* 0x1C7DC0 */
		.fill   0x30
GLOBAL (unkn12_WEAPONS_MODS_button)	/* 0x1C7DF0 */
		.fill   0x30
GLOBAL (research_progress_button)	/* 0x1C7E20 */
		.fill   0x44
GLOBAL (research_graph_box)	/* 0x1C7E64 */
		.fill   0x18
GLOBAL (research_list_buttons)	/* 0x1C7E7C */
		.fill   0x5C
GLOBAL (cryo_agent_list_box)	/* 0x1C7ED8 */
		.fill   0x44
GLOBAL (cryo_blokey_box)	/* 0x1C7F1C */
		.fill   0x18
GLOBAL (cryo_cybmod_list_box)	/* 0x1C7F34 */
		.fill   0x44
GLOBAL (net_INITIATE_button)	/* 0x1C7F78 */
		.fill   0x30
GLOBAL (net_groups_LOGON_button)	/* 0x1C7FA8 */
		.fill   0x30
GLOBAL (unkn8_EJECT_button)	/* 0x1C7FD8 */
		.fill   0x30
GLOBAL (net_protocol_select_button)	/* 0x1C8008 */
		.fill   0x30
GLOBAL (net_unkn40_button)	/* 0x1C8038 */
		.fill   0x30
GLOBAL (net_SET2_button)	/* 0x1C8068 */
		.fill   0x30
GLOBAL (net_SET_button)	/* 0x1C8098 */
		.fill   0x30
GLOBAL (net_groups_box)	/* 0x1C80C8 */
		.fill   0x18
GLOBAL (net_users_box)	/* 0x1C80E0 */
		.fill   0x18
GLOBAL (net_faction_box)	/* 0x1C80F8 */
		.fill   0x18
GLOBAL (net_team_box)	/* 0x1C8110 */
		.fill   0x18
GLOBAL (net_benefits_box)	/* 0x1C8128 */
		.fill   0x18
GLOBAL (net_comms_box)	/* 0x1C8140 */
		.fill   0x18
GLOBAL (net_grpaint)	/* 0x1C8158 */
		.fill   0x18
GLOBAL (net_protocol_box)	/* 0x1C8170 */
		.fill   0x18
GLOBAL (controls_defaults_button)	/* 0x1C8188 */
		.fill   0x30
GLOBAL (controls_save_button)	/* 0x1C81B8 */
		.fill   0x30
GLOBAL (controls_calibrate_button)	/* 0x1C81E8 */
		.fill   0x30
GLOBAL (save_slot_names)	/* 0x1C8218 */
		.fill   0xc8
GLOBAL (save_active_desc)
		.fill   0x1c
GLOBAL (save_slot_base)	/* 0x1C82FC */
		.long	0x0
GLOBAL (alert_text)	/* 0x1C8300 */
		.fill   0xc8
GLOBAL (text_buf_pos)	/* 0x1C83C8 */
		.fill   0x8
GLOBAL (cmdln_param_n)	/* 0x1C83D0 */
		.byte	0x0
GLOBAL (byte_1C83D1)	/* 0x1C83D1 */
		.byte	0x0
		.align	4
GLOBAL (bezier_pts)	/* 0x1C83D4 */
		.fill   0x6
GLOBAL (mission_strings_len)	/* 0x1C83DA */
		.short  0x0
		.short  0x0
GLOBAL (unkn3de_len)	/* 0x1C83DE */
		.short  0x0
data_1c83e0:
		.short  0x0
data_1c83e2:
		.short  0x0
GLOBAL (byte_1C83E4)	/* 0x1C83E4 */
		.long	0x0
data_1c83e8:
		.fill   0x1e
GLOBAL (unkn2_pos_x)	/* 0x1C8406 */
		.short  0x0
GLOBAL (unkn2_pos_y)	/* 0x1C8408 */
		.short  0x0
GLOBAL (unkn2_pos_z)	/* 0x1C840A */
		.short  0x0
		.fill   0x1c
GLOBAL (data_1c8428)	/* 0x1c8428 */
		.long	0x0
		.fill   0x18
GLOBAL (byte_1C8444)	/* 0x1C8444 */
		.byte	0x0
		.byte	0x0
GLOBAL (word_1C8446)
		.short  0x0
GLOBAL (current_map)	/* 0x1C8448 */
		.short  0x0
GLOBAL (current_level)	/* 0x1C844A */
		.long	0x0
GLOBAL (byte_1C844E)	/* 0x1C844E */
		.byte	0x0
GLOBAL (byte_1C844F)	/* 0x1C844F */
		.byte	0x0
		.fill   0x4
GLOBAL (spare_map_buffer)			/* 0x1C8454 */
		.long	0x0
GLOBAL (draw_objectv_x)	/* 0x1C8458 */
		.short  0x0
GLOBAL (draw_objectv_y)
		.short  0x0
data_1c845c:
		.long	0x0
GLOBAL (dword_1C8460)	/* 0x1C8460 */
		.long	0x0
GLOBAL (dword_1C8464)
		.long	0x0
data_1c8468:
		.short  0x0
GLOBAL (signal_count)	/* 0x1C846A */
		.fill   0x6
GLOBAL (dword_1C8470)	/* 0x1C8470 */
		.long	0x0
GLOBAL (dword_1C8474)	/* 0x1C8474 */
		.fill   0x80
data_1c84f4:
		.long	0x0
data_1c84f8:
		.fill   0x40
data_1c8538:
		.short  0x0
VNAV_nearnodes:	/* 0x1C853A */
		.fill   0x6
data_1c8540:
		.long	0x0
VNAV_nodedists:	/* 0x1C8544 */
		.fill   0x14
VNAV_route:	/* 0x1C8558 */
		.short  0x0
data_1c855a:
		.long	0x0
VNAV_route__route:	/* 0x1C855E */
		.short  0x0
data_1c8560:
		.fill   0xf8
veh_ma_heap:	/* 0x1C8658 */
		.long	0x0
data_1c865c:
		.fill   0x400
data_1c8a5c:
		.fill   0x2104
GLOBAL (scanner_next_key_no)	/* 0x1CAB60 */
		.ascii  "\x00\x00\x00"
data_1cab63:
		.byte	0x0
GLOBAL (SCANNER_pal_bright)	/* 0x1CAB64 */
		.fill   0x423
data_1caf87:
		.byte	0x0
SCANNER_map:	/* 0x1CAF88 */
		.fill   0xdc
GLOBAL (SCANNER_dw064)
		.long	0x0
GLOBAL (SCANNER_dw068)	/* 0x1CB068 */
		.long	0x0
GLOBAL (SCANNER_dw06C)	/* 0x1CB06C */
		.long	0x0
GLOBAL (SCANNER_dw070)
		.long	0x0
GLOBAL (SCANNER_dw074)	/* 0x1CB074 */
		.long	0x0
GLOBAL (SCANNER_screenptr)
		.long	0x0
GLOBAL (SCANNER_dw07C)	/* 0x1CB07C */
		.long	0x0
GLOBAL (SCANNER_dw080)
		.long	0x0
GLOBAL (SCANNER_bt084)	/* 0x1CB084 */
		.byte	0x0
GLOBAL (SCANNER_bt085)
		.byte	0x0
GLOBAL (SCANNER_brig)	/* 0x1CB086 */
		.byte	0x0
GLOBAL (SCANNER_cont)
		.byte	0x0
GLOBAL (SCANNER_data)	/* 0x1CB088 */
		.fill   0xffff
data_1db087:
		.byte	0x0
GLOBAL (SCANNER_bright_limit)	/* 0x1DB088 */
		.fill   0x100
GLOBAL (SCANNER_width)	/* 0x1DB188 */
		.long	0x0
GLOBAL (SCANNER_people_colours)	/* 0x1DB18C */
		.byte	0x0
data_1db18d:
		.byte	0x0
data_1db18e:
		.byte	0x0
data_1db18f:
		.byte	0x0
data_1db190:
		.byte	0x0
data_1db191:
		.byte	0x0
data_1db192:
		.byte	0x0
data_1db193:
		.byte	0x0
data_1db194:
		.byte	0x0
data_1db195:
		.byte	0x0
data_1db196:
		.byte	0x0
data_1db197:
		.byte	0x0
data_1db198:
		.byte	0x0
data_1db199:
		.byte	0x0
data_1db19a:
		.short  0x0
GLOBAL (SCANNER_keep_arcs)	/* 0x1DB19C */
		.long	0x0
GLOBAL (dword_1DB1A0)	/* 0x1DB1A0 */
		.long	0x0
GLOBAL (SCANNER_arcpoint)	/* 0x1DB1A4 */
		.fill   0x140
GLOBAL (SCANNER_colour)	/* 0x1DB2E4 */
		.byte	0x0
		.byte	0x0
		.byte	0x0
		.byte	0x0
		.byte	0x0
GLOBAL (byte_1DB2E9)	/* 0x1DB2E9 */
		.ascii  "\x00\x00\x00"
GLOBAL (SCANNER_bbpoint)	/* 0x1DB2EC */
		.long	0x0
data_1db2f0:
		.fill   0x7f4
GLOBAL (SCANNER_bbpadds)	/* 0x1DBAE4 */
		.long	0x0
data_1dbae8:
		.long	0x0
data_1dbaec:
		.long	0x0
data_1dbaf0:
		.fill   0x74
GLOBAL (dword_1DBB64)
		.long	0x0
data_1dbb68:
		.long	0x0
GLOBAL (dword_1DBB6C)	/* 0x1DBB6C */
		.long	0x0
GLOBAL (dword_1DBB70)
		.fill   0x7fc
GLOBAL (dword_1DC36C)	/* 0x1DC36C */
		.long	0x0
GLOBAL (scanner_unkn370)	/* 0x1DC370 */
		.long	0x0
data_1dc374:
		.fill   0x168
phwoar__child:	/* 0x1DC4DC */
		.long	0x0
data_1dc4e0:
		.fill   0x2c
data_1dc50c:
		.long	0x0
data_1dc510:
		.fill   0x24
data_1dc534:
		.long	0x0
data_1dc538:
		.fill   0x4c
GLOBAL (purple_box_x1)	/* 0x1DC584 */
		.long	0x0
GLOBAL (purple_box_y1)	/* 0x1DC588 */
		.long	0x0
		.fill   0x20
GLOBAL (purple_box_x2)	/* 0x1DC5AC */
		.long	0x0
GLOBAL (purple_box_y2)	/* 0x1DC5B0 */
		.long	0x0
		.fill   0x48
GLOBAL (dword_1DC5FC)	/* 0x1DC5FC */
		.long	0x0
GLOBAL (dword_1DC600)	/* 0x1DC600 */
		.fill   0x24
GLOBAL (dword_1DC624)	/* 0x1DC624 */
		.long	0x0
GLOBAL (dword_1DC628)	/* 0x1DC628 */
		.fill   0x4c
data_1dc674:
		.long	0x0
data_1dc678:
		.fill   0x24
data_1dc69c:
		.long	0x0
data_1dc6a0:
		.fill   0x4c
data_1dc6ec:
		.long	0x0
data_1dc6f0:
		.fill   0x24
data_1dc714:
		.long	0x0
data_1dc718:
		.fill   0x24
/* static ubyte purple_joy_move; from draw_purple_screen()
 */
GLOBAL (purple_joy_move)	/* 0x1DC73C */
		.byte	0x0
		.fill   0x3
GLOBAL (alert_OK_button)	/* 0x1DC740 */
		.short  0x0
data_1dc742:
		.short  0x0
data_1dc744:
		.short  0x0
data_1dc746:
		.fill   0xa
data_1dc750:
		.fill   0x8
data_1dc758:
		.fill   0xc
data_1dc764:
		.fill   0x8
data_1dc76c:
		.long	0x0
GLOBAL (alert_box)	/* 0x1DC770 */
		.short  0x0
data_1dc772:
		.short  0x0
data_1dc774:
		.short  0x0
data_1dc776:
		.long	0x0
data_1dc77a:
		.short  0x0
data_1dc77c:
		.fill   0xc
GLOBAL (show_alert)	/* 0x1DC788 */
		.long	0x0
/* PurpleDrawItem *purple_draw_list;
 */
GLOBAL (purple_draw_list)
		.long	0x0
/* ushort purple_draw_index;
 */
GLOBAL (purple_draw_index)	/* 0x1DC790 */
		.short  0x0
		.fill   0xc

unkn_mech_var8:	/* 0x1DC82C */
		.long	0x0
unkn_mech_var14:	/* 0x1DC830 */
		.long	0x0
unkn_mech_var16:	/* 0x1DC834 */
		.long	0x0
unkn_mech_var12:	/* 0x1DC838 */
		.long	0x0
unkn_mech_var9:	/* 0x1DC83C */
		.long	0x0
unkn_mech_var17:	/* 0x1DC840 */
		.long	0x0
unkn_mech_var13:	/* 0x1DC844 */
		.long	0x0
unkn_mech_var15:	/* 0x1DC848 */
		.long	0x0
unkn_mech_var18:	/* 0x1DC84C */
		.long	0x0
unkn_mech_arr3:	/* 0x1DC850 */
		.long	0x0
unkn_mech_arr4:	/* 0x1DC854 */
		.long	0x0
unkn_mech_arr5:	/* 0x1DC858 */
		.long	0x0
unkn_mech_arr1:	/* 0x1DC85C */
		.long	0x0
unkn_mech_arr6:	/* 0x1DC860 */
		.long	0x0
unkn_mech_arr2:	/* 0x1DC864 */
		.long	0x0
GLOBAL (mech_unkn_tile_x1)	/* 0x1DC868 */
		.long	0x0
GLOBAL (mech_unkn_tile_y1)	/* 0x1DC86C */
		.long	0x0
GLOBAL (mech_unkn_tile_x2)	/* 0x1DC870 */
		.long	0x0
GLOBAL (mech_unkn_tile_y2)	/* 0x1DC874 */
		.long	0x0
GLOBAL (mech_unkn_tile_x3)	/* 0x1DC878 */
		.long	0x0
GLOBAL (mech_unkn_tile_y3)	/* 0x1DC87C */
		.long	0x0
GLOBAL (mech_unkn_dw_1DC880)	/* 0x1DC880 */
		.long	0x0
GLOBAL (mech_unkn_dw_1DC884)	/* 0x1DC884 */
		.long	0x0
GLOBAL (mech_unkn_dw_1DC888)	/* 0x1DC888 */
		.long	0x0
GLOBAL (mech_unkn_dw_1DC88C)	/* 0x1DC88C */
		.long	0x0
GLOBAL (mech_unkn_dw_1DC890)	/* 0x1DC890 */
		.long	0x0
GLOBAL (mech_unkn_dw_1DC894)	/* 0x1DC894 */
		.short  0x0
data_1dc896:
		.short  0x0
GLOBAL (word_1DC898)	/* 0x1DC898 */
		.byte	0x0
data_1dc899:
		.ascii  "\x00\x00\x00"
GLOBAL (byte_1DC89C)	/* 0x1DC89C */
		.fill   0x30
data_1dc8cc:
		.short  0x0
GLOBAL (word_1DC8CE)	/* 0x1DC8CE */
		.short  0x0
g_nav_data:	/* 0x1DC8D0 */
		.fill   0x10
data_1dc8e0:
		.long	0x0
data_1dc8e4:
		.long	0x0
data_1dc8e8:
		.fill   0x7fc
g_fat_data:	/* 0x1DD0E4 */
		.long	0x0
data_1dd0e8:
		.long	0x0
data_1dd0ec:
		.long	0x0
data_1dd0f0:
		.long	0x0
g_fat_data__PathLength:	/* 0x1DD0F4 */
		.long	0x0
g_fat_data__WayPoints__x8:	/* 0x1DD0F8 */
		.long	0x0
g_fat_data__WayPoints__y8:	/* 0x1DD0FC */
		.fill   0x7fc
data_1dd8f8:
		.long	0x0
data_1dd8fc:
		.long	0x0
data_1dd900:
		.long	0x0
data_1dd904:
		.long	0x0
data_1dd908:
		.short  0x0
data_1dd90a:
		.short  0x0
data_1dd90c:
		.long	0x0
data_1dd910:
		.long	0x0
data_1dd914:
		.long	0x0
data_1dd918:
		.long	0x0
GLOBAL (data_1dd91c)	/* 0x1dd91c */
		.long	0x0
GLOBAL (outro_credits_enabled)	/* 0x1DD920 */
		.long	0x0
GLOBAL (people_credits_desc)	/* 0x1DD924 */
		.long	0x0
data_1dd928:
		.fill   0x18c
GLOBAL (people_credits_groups)	/* 0x1DDAB4 */
		.long	0x0
people_credits_groups_p1:
		.fill   0x9c
GLOBAL (outro_text_s)	/* 0x1DDB54 */
		.long	0x0
GLOBAL (outro_text_z)	/* 0x1DDB58 */
		.long	0x0
GLOBAL (outro_unkn02)	/* 0x1DDB5C */
		.long	0x0
GLOBAL (outro_unkn03)	/* 0x1DDB60 */
		.long	0x0
GLOBAL (people_groups_count)	/* 0x1DDB64 */
		.long	0x0
GLOBAL (data_1ddb68)	/* 0x1ddb68 */
		.long	0x0
data_1ddb6c:
		.byte	0x0
data_1ddb6d:
		.ascii  "\x00\x00\x00"
data_1ddb70:
		.long	0x0
data_1ddb74:
		.long	0x0
data_1ddb78:
		.byte	0x0
data_1ddb79:
		.byte	0x0
data_1ddb7a:
		.fill   0x4a
data_1ddbc4:
		.long	0x0
data_1ddbc8:
		.long	0x0
data_1ddbcc:
		.byte	0x0
data_1ddbcd:
		.byte	0x0
data_1ddbce:
		.short  0x0
data_1ddbd0:
		.fill   0xe
data_1ddbde:
		.short  0x0
data_1ddbe0:
		.fill   0x8
data_1ddbe8:
		.long	0x0
data_1ddbec:
		.long	0x0
data_1ddbf0:
		.fill   0x50
GLOBAL (byte_1DDC40)	/* 0x1DDC40 */
		.byte	0x0
		.byte	0x0
GLOBAL (alert_textpos)	/* 0x1DDC42 */
		.short  0x0
GLOBAL (byte_1DDC44)
		.fill   0x280
GLOBAL (byte_1DDEC4)
		.byte	0x0
GLOBAL (research_unkn_var_01)	/* 0x1DDEC5 */
		.byte	0x0
GLOBAL (current_frame)	/* 0x1DDEC6 */
		.byte	0x0
		.byte	0x0
GLOBAL (sound_heap_size)	/* 0x1DDEC8 */
		.long	0x0
GLOBAL (dword_1DDECC)	/* 0x1DDECC */
		.long	0x0
		.fill   0x4
GLOBAL (sound_heap_memory)	/* 0x1DDED4 */
		.long	0x0
data_1dded8:
		.fill   0x190
ail_sample_ids:	/* 0x1DE068 */
		.fill   0x4e
data_1de0b6:
		.short  0x0
GLOBAL (FIRE_flame)	/* 0x1de0b8 */
		.fill   0x12
data_1de0ca:
		.fill   0x27ee
data_1e08b8:
		.long	0x0
data_1e08bc:
		.long	0x0


GLOBAL (hmhead)	/* 0x1E2E44 */
		.long	0x0
GLOBAL (samples_in_bank)	/* 0x1E2E48 */
		.long	0x0
GLOBAL (sample_table)	/* 0x1E2E4C */
		.long	0x0


run_exchange_func__start_time:	/* 0x1E8128 */
		.long	0x0
run_exchange_func__end_time:	/* 0x1E812C */
		.fill   0x10
GLOBAL (g_count)	/* 0x1E81DC */
		.long	0x0
GLOBAL (byte_1E81E0)	/* 0x1E81E0 */
		.fill   0x403
GLOBAL (data_1e85e3)	/* 0x1e85e3 */
		.fill   0x5


GLOBAL (_wc_errno)
		.long	0x0
GLOBAL (_doserrno)	/* 0x1EA484 */
		.long	0x0

_loop_count:
		.long	0x0

